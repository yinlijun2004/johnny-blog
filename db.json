{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon-16x16-next.png","path":"favicon-16x16-next.png","modified":0,"renderable":0},{"_id":"source/favicon-32x32-next.png","path":"favicon-32x32-next.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay.jpeg","path":"images/alipay.jpeg","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpeg","path":"images/wechatpay.jpeg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/favicon-16x16-next.png","hash":"7cdeaa327f78a7b0bd05e3ded65326bf02ed9767","modified":1546485184271},{"_id":"source/favicon-32x32-next.png","hash":"6c6a4b65f3bf3929ef560f1a57dfc2fcd22276b2","modified":1546485184272},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1546483736426},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1546483736424},{"_id":"themes/next/.DS_Store","hash":"82f535601ca169866e52a4db575d8c6d7173fb0c","modified":1546484502278},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1546483736421},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1546483736421},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1546483736372},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1546483736420},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1546483736421},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1546483736427},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1546483736427},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1546483736424},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1546483736356},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1546483736421},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1546483736356},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1546483736372},{"_id":"themes/next/_config.yml","hash":"9893d39e60a9ebfa3327478a580c8ce9bc0ffcd8","modified":1546485312975},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1546483736424},{"_id":"source/categories/index.md","hash":"9e873ad6d1598bc5a20dd776ca5de59d54058bad","modified":1546483736355},{"_id":"source/_posts/aliyun-ecs-mysql.md","hash":"92b7f2c5496bf6b84a13391faa885b4740764e0f","modified":1562740819796},{"_id":"source/_posts/CSS-The-Definitive-Guide.md","hash":"35be7a493e5bfcadf8e33d0f4fba83cc844ab199","modified":1546483736351},{"_id":"source/_posts/High-Performance-Javascript.md","hash":"ff6604558237e453b0e2d7224f92cbc3db0de564","modified":1546483736343},{"_id":"source/_posts/.DS_Store","hash":"a1950b9b6d79e41c0a42ea745e1e1c2d7b43fa9b","modified":1546483736344},{"_id":"source/_posts/angel-go-go-go.md","hash":"d58bcf493bea69bf379cd87e31b1fc20a88e391d","modified":1561113888310},{"_id":"source/_posts/android-studio编译错误-目标模式不含有“-”。-停止。.md","hash":"efcca3de4ae5105791bf681af639a93246c542af","modified":1546483736348},{"_id":"source/_posts/android-https-verify-ways.md","hash":"d2cdbaef7b8f1d2e277cda5c1fe6ee54dd3ceffe","modified":1546483736351},{"_id":"source/_posts/android-theme-onclick.md","hash":"98010ded213f12b9618c6fba348272f6eca986cf","modified":1546483736350},{"_id":"source/_posts/aws-guide.md","hash":"651f6509f47aed3fa0a4aaa6cc55d5e273402eef","modified":1560939493421},{"_id":"source/_posts/bluecoffee.md","hash":"47be7ed2d1e8cead025c3bc2d6f8e452b7239d3d","modified":1546483736351},{"_id":"source/_posts/chapter-3.md","hash":"9aa834cfba55998723416c621b370a97ae25632f","modified":1546483736344},{"_id":"source/_posts/chapter-2.md","hash":"d0410de6d35c35320478bfbab9c3e82cf7d09665","modified":1546483736345},{"_id":"source/_posts/chapter-4.md","hash":"ba3f4d995cc7f279b84606eb9091fcc3fae9bcfd","modified":1546483736354},{"_id":"source/_posts/converter-solution.md","hash":"da046147090c8acb4a737cca71f74b358d65b44f","modified":1561112005853},{"_id":"source/_posts/fix-dev-kvm-is-not-found.md","hash":"d18b094a1007cfefa94580894f3c85aa7a7d7c01","modified":1546483736351},{"_id":"source/_posts/gitignore无效，不能过滤某些文件.md","hash":"39b88baab05f72e499c15683030d4899193bbd92","modified":1546483736350},{"_id":"source/_posts/git配置user-name和user-email.md","hash":"0ca482b0ef52b798ef5d00acf5bafcb381600de6","modified":1546483736347},{"_id":"source/_posts/hexo-to-ali-ecs.md","hash":"f4f3bade3930a9f7442bdd85b818241c898ffda4","modified":1546483736348},{"_id":"source/_posts/how-to-download-openjdk.md","hash":"c978c3973f4b69d1e17480bcd6a189715985ccd2","modified":1546483736346},{"_id":"source/_posts/http-summery.md","hash":"58712b10406fe7a09a1af997efa6c972d69ce8c7","modified":1546483736344},{"_id":"source/_posts/kotlin-sample.md","hash":"b4271afd340779cfa970eda5e7a139691959b9b6","modified":1546483736350},{"_id":"source/_posts/kotlin惯用法.md","hash":"658f3f61f9f1301c0a9eba73ab2582e8aa9c6706","modified":1546483736347},{"_id":"source/_posts/my-ota-tutorial-1.md","hash":"9bba251da895d390c9cd45f0c0a8b159533d70a5","modified":1546483736345},{"_id":"source/_posts/make-ubutun-desktop.md","hash":"907a3f1e80aa06f8f0d9c0e0f81cc6db2db0662f","modified":1546483736347},{"_id":"source/_posts/javafx-map-entry.md","hash":"5d547ff2a7561fa8e54618b3826c6a63834163e0","modified":1561635345366},{"_id":"source/_posts/my-ota-tutorial-2.md","hash":"ddb00e067fad9c89d24131cd7365ab8e49df2882","modified":1546483736349},{"_id":"source/_posts/my-ota-tutorial-5.md","hash":"976b61f03751a8aa6c08e236aa5a58c927db7f47","modified":1546483736346},{"_id":"source/_posts/my-ota-tutorial-4.md","hash":"d707296a075b780e49a3d09c3032de5860ae215d","modified":1546483736346},{"_id":"source/_posts/my-ota-tutorial-3.md","hash":"8528a7e4c04395652572fafe86fe6608aea48e96","modified":1546483736348},{"_id":"source/_posts/my-ota-tutorial-7.md","hash":"1ffde39f8832b5df59bea6199c7f2f226c34d307","modified":1546483736347},{"_id":"source/_posts/my-ota-tutorial.md","hash":"a648f7a790dfb2b88754519ea84f00d65be9ff8c","modified":1546483736345},{"_id":"source/_posts/nginx-access-ip.md","hash":"5a421c4d80f6914c86a00a765c336fe9a025ed1c","modified":1546483736349},{"_id":"source/_posts/ngrok-intro.md","hash":"1fcfef28ebf34a3d9f8c01311c20420d9c60f05f","modified":1546483736343},{"_id":"source/_posts/natapp-usage.md","hash":"49f1db98f9e41c64d5aebcffa250ef62dcbe0f9d","modified":1555579598025},{"_id":"source/_posts/open-flag.md","hash":"dbf0dbcdd475eb79b5097e2b622a92b2060a9296","modified":1546483736354},{"_id":"source/_posts/ota-user-manual.md","hash":"4e30a7274b9471e720a11f3fbbe32a750061a0cf","modified":1546483736346},{"_id":"source/_posts/pm2-load-environment.md","hash":"1aaacda9a0457a0f555058685737e735c5c89d0e","modified":1546483736350},{"_id":"source/_posts/problem-anal.md","hash":"404444393322fb5f7a38b6db741a91b23983eb0b","modified":1554285389487},{"_id":"source/_posts/progress-action-button-tutorial.md","hash":"d8b9a25fdc4887b1e182a00678e1d34322b41c9e","modified":1546483736351},{"_id":"source/_posts/react-lifecycle.md","hash":"518e838da24c2be1720bed12be7af222839e36c1","modified":1546483736343},{"_id":"source/_posts/qiniu-create-bucket-cname.md","hash":"944c81aacd5d57f1e83acfe3008d704a90537dc1","modified":1546483736351},{"_id":"source/_posts/react-router-4-0-0-api-BrowserRouter.md","hash":"0d1d596e302d8d1f0bfa3750cf64ccee88bae355","modified":1546483736347},{"_id":"source/_posts/react-router-4-0-0-api-Match.md","hash":"7ba03ba609b50a5db17105674ce05b68f3b1d4cf","modified":1546483736344},{"_id":"source/_posts/react-router-4-0-0-api-Link.md","hash":"e8d86a6f8764a828ae729719f7d3f49138b08e0e","modified":1546483736343},{"_id":"source/_posts/react-router-4-0-0-api-Miss.md","hash":"cb236c9e2be77593fcecb8be9593917cb86bda78","modified":1546483736348},{"_id":"source/_posts/react-router-4-0-0-api.md","hash":"10711ef9576de09ddb832bfd4c237516f8818251","modified":1546483736345},{"_id":"source/_posts/react-router-4-0-0-api-NavigationPrompt.md","hash":"f29b93377ad80bf4154d741f571dad77b986421c","modified":1546483736346},{"_id":"source/_posts/spring-boot-nginx-prepare.md","hash":"f8b9414621da52203c419578073c3495eb0f538a","modified":1565365725609},{"_id":"source/_posts/switch-native-debug-on-off.md","hash":"5a7a0abb6872f966cca9af9e2980f7c82babc509","modified":1546483736348},{"_id":"source/_posts/react-spring-boot.md","hash":"30b49984cba2101a020f81938eec5449324481cd","modified":1560939417156},{"_id":"source/_posts/ubuntu利用update-alternatives配置java.md","hash":"66ee0732eb505a66f69b6af0572660be9ec4ca07","modified":1546483736345},{"_id":"source/_posts/ubuntu-16-04-android-compile.md","hash":"fb05581528a9d58c8fbffef8ab0c16bcb0df940b","modified":1546483736347},{"_id":"source/_posts/ubuntu编译android源代码环境搭建.md","hash":"92049193181886480ad4203b32b8d71462348c12","modified":1546483736346},{"_id":"source/_posts/windows下文件路径太深，无法删除解决办法.md","hash":"11a87573eec7fa74a6c586d28f2d972465f933b5","modified":1546483736350},{"_id":"source/_posts/windows配置mongdb记录.md","hash":"d21c4369e92bab7e460c0b7d964d496d9403fa06","modified":1546483736344},{"_id":"source/tags/index.md","hash":"b1bc9815c6a2db22d30b325a57576bfcbb3e48e0","modified":1546483736354},{"_id":"source/_posts/xjzw.md","hash":"744531d60b3388a8abd584b6ed49f48456e9bb91","modified":1554281927790},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1546483736422},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1546483736421},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1546483736423},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1546483736423},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1546483736422},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1546483736422},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1546483736422},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1546483736422},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1546483736423},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1546483736423},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1546483736423},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1546483736422},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1546483736424},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1546483736422},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1546483736423},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1546483736424},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1546483736358},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1546483736364},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1546483736358},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1546483736360},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1546483736360},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1546483736425},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1546483736360},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1546483736425},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1546483736357},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1546483736357},{"_id":"themes/next/source/.DS_Store","hash":"4b4345d9a31eecc9d49b68020048cd8615d466f1","modified":1546486226420},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1546483736356},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1546483736356},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1546483736356},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546483736420},{"_id":"source/_posts/xjzw/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1554280389367},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1546483736357},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1546483736357},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1546483736372},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1546483736372},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1546483736372},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1546483736371},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1546483736371},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1546483736371},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1546483736362},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1546483736362},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1546483736362},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1546483736362},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1546483736363},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1546483736360},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1546483736362},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1546483736359},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1546483736359},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1546483736359},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1546483736366},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1546483736368},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1546483736368},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1546483736366},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1546483736368},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1546483736366},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1546483736366},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1546483736426},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1546483736425},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1546483736426},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1546483736426},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1546483736426},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1546483736426},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1546483736425},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1546483736425},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1546483736426},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1546483736388},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1546483736396},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1546483736397},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1546483736395},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1546483736399},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1546483736396},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1546483736395},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1546483736395},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1546483736398},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1546483736396},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"7cdeaa327f78a7b0bd05e3ded65326bf02ed9767","modified":1546484650794},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1546483736398},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1546483736395},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1546483736399},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"6c6a4b65f3bf3929ef560f1a57dfc2fcd22276b2","modified":1546484640313},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1546483736396},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1546483736396},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1546483736398},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1546483736396},{"_id":"source/_posts/bluecoffee/3.jpeg","hash":"a82189e72e57c8cfec3dce25b0eb4e4b1577971b","modified":1546483736354},{"_id":"source/_posts/bluecoffee/2.jpeg","hash":"eeac5be245efafec120bbe8271baf0c150890c7f","modified":1546483736353},{"_id":"source/_posts/bluecoffee/4.jpeg","hash":"442f061d6e2e0f1a44b60fa744e2c796825fe525","modified":1546483736353},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546483736358},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546483736359},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546483736394},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546483736394},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546483736393},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546483736388},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546483736387},{"_id":"themes/next/source/images/alipay.jpeg","hash":"87653b94c3eee37a18552e5224eb1728dd9d9932","modified":1546483736395},{"_id":"themes/next/source/images/wechatpay.jpeg","hash":"e03118c78a8e75f3ff4cdf00798a927821647360","modified":1546483736397},{"_id":"source/_posts/bluecoffee/1.jpeg","hash":"ce8527829a6091d788c1a9b36ab3804d3a69e4f3","modified":1546483736352},{"_id":"source/_posts/bluecoffee/6.jpeg","hash":"068ef5c5f460be54ec6adc75179a1bf13085639a","modified":1546483736352},{"_id":"source/_posts/bluecoffee/7.jpeg","hash":"71fdbd8a17c5f1dab7f119f0012011ebef0b5f1a","modified":1546483736352},{"_id":"source/_posts/bluecoffee/8.jpeg","hash":"10c09489e7721ea0130e43c0b4bc7be65e8a520a","modified":1546483736352},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1546483736361},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1546483736361},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1546483736361},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1546483736361},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1546483736361},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1546483736363},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1546483736363},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1546483736363},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1546483736363},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1546483736358},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1546483736359},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1546483736358},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1546483736370},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1546483736370},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1546483736369},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1546483736369},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1546483736371},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1546483736370},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1546483736370},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1546483736369},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1546483736369},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1546483736371},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1546483736370},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1546483736370},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1546483736369},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1546483736365},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1546483736364},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1546483736365},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1546483736364},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1546483736365},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1546483736366},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1546483736365},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1546483736365},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1546483736365},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1546483736367},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1546483736367},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1546483736367},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1546483736368},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1546483736373},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1546483736394},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1546483736394},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1546483736394},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1546483736387},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1546483736388},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1546483736388},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1546483736388},{"_id":"themes/next/source/images/avatar.jpg","hash":"aedbfc9c168aed279fbbb5e87c1de5db9d881a33","modified":1546483736397},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1546483736401},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1546483736401},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1546483736401},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1546483736400},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1546483736400},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1546483736400},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1546483736401},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1546483736401},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1546483736400},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1546483736400},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1546483736401},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1546483736411},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1546483736408},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1546483736404},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1546483736408},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1546483736404},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1546483736402},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1546483736402},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1546483736418},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1546483736402},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1546483736402},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1546483736417},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1546483736418},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1546483736419},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1546483736418},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1546483736408},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1546483736415},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1546483736415},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"00a08c702de9a0b8d371212f29e97487b0978c8b","modified":1546483736399},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1546483736415},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1546483736414},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1546483736415},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1546483736414},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1546483736404},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1546483736403},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1546483736403},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1546483736410},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1546483736410},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1546483736409},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1546483736411},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1546483736409},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1546483736410},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1546483736410},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1546483736411},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1546483736409},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1546483736410},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1546483736409},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1546483736411},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1546483736410},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1546483736409},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1546483736413},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1546483736412},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1546483736413},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1546483736412},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1546483736413},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1546483736411},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1546483736412},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1546483736412},{"_id":"source/_posts/bluecoffee/5.jpeg","hash":"3c7b15d0437565056ec7d672a31dfd11bfe459ba","modified":1546483736353},{"_id":"themes/next/source/images/alipay.jpg","hash":"c55209a65cd9fbc6f5bf9c423d7afe0c5037a1c2","modified":1546483736398},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1546483736408},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1546483736367},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1546483736368},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1546483736380},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1546483736383},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1546483736381},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1546483736375},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1546483736380},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1546483736381},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1546483736383},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1546483736373},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1546483736374},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1546483736373},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1546483736374},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1546483736374},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1546483736374},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1546483736387},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1546483736390},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1546483736392},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1546483736393},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1546483736393},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1546483736392},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1546483736393},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1546483736393},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1546483736392},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1546483736390},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1546483736389},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1546483736390},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1546483736389},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1546483736390},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1546483736389},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1546483736391},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1546483736391},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1546483736390},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1546483736391},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1546483736391},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1546483736400},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1546483736417},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1546483736416},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1546483736406},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1546483736406},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1546483736406},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1546483736405},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1546483736406},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1546483736405},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1546483736405},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1546483736403},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1546483736406},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1546483736405},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1546483736403},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1546483736418},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1546483736418},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1546483736418},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1546483736414},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1546483736414},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1546483736416},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1546483736416},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1546483736419},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1546483736420},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1546483736412},{"_id":"source/_posts/xjzw/db_xjzw_score.jpg","hash":"bea95203e3d8b5a309ff78f33f2d8ca96b07ac0a","modified":1553418126387},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1546483736377},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1546483736386},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1546483736387},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1546483736386},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1546483736386},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1546483736380},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1546483736380},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1546483736386},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1546483736385},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1546483736386},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1546483736380},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1546483736385},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1546483736385},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1546483736378},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1546483736385},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1546483736379},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1546483736379},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1546483736379},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1546483736379},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1546483736378},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1546483736378},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1546483736378},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1546483736377},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1546483736377},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1546483736378},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1546483736378},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1546483736379},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1546483736378},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1546483736377},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1546483736376},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1546483736375},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1546483736375},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1546483736375},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1546483736376},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1546483736376},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1546483736375},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1546483736376},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1546483736375},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1546483736376},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1546483736382},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1546483736381},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1546483736382},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1546483736382},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1546483736382},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1546483736381},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1546483736382},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1546483736384},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1546483736383},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1546483736382},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1546483736381},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1546483736383},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1546483736383},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1546483736385},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1546483736384},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1546483736384},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1546483736384},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1546483736384},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1546483736384},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1546483736392},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1546483736393},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1546483736389},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1546483736416},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1546483736416},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1546483736417},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1546483736416},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1546483736407},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1546483736417},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1546483736408},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1546483736407},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1546483736407},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1546483736407},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1546483736407},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1546483736419},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1546483736420},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1546483736420},{"_id":"source/_posts/xjzw/db_fkdwxr_score.png","hash":"83045eb2c66cca3d530ee932661f7ef1728255e2","modified":1554280261751},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1546483736404},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1546483736419},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1546483736413},{"_id":"source/_posts/open-flag/lovely_candy.png","hash":"8bd088723baaaa012ad5f357d539041f741872da","modified":1546483736349},{"_id":"public/search.xml","hash":"15964d6c11e2b396cc89aa23f928a6f16b56cc3c","modified":1565365738046},{"_id":"public/categories/index.html","hash":"7c0f1504fafaeb8cb4f71bb45646b5560fd9bc92","modified":1565365664795},{"_id":"public/tags/index.html","hash":"32e666761a8ad96019a1de56a653c9489c8dfbbb","modified":1565365664795},{"_id":"public/2019/06/21/aliyun-ecs-mysql/index.html","hash":"57f2708a460b78d0b41c6550240f1699682a6284","modified":1565365738106},{"_id":"public/2019/06/19/react-spring-boot/index.html","hash":"a099f2954cb6684d8b26e661baaeef841acf48b0","modified":1565365664797},{"_id":"public/2019/06/19/aws-guide/index.html","hash":"eaa4f8825a6aa34f99595e21c945bfc1e8938bce","modified":1565365664797},{"_id":"public/2019/04/18/converter-solution/index.html","hash":"9aa46b0a2af168a025bc4e97374939e813df2620","modified":1565365664797},{"_id":"public/2019/04/18/natapp-usage/index.html","hash":"9c527c0d74bdad49b9d7e0f75e611a29c19f35d1","modified":1565365664797},{"_id":"public/2019/04/18/angel-go-go-go/index.html","hash":"c10f5757f7006fe2fe0131a0b35f27e8e22816eb","modified":1565365664797},{"_id":"public/2019/04/03/problem-anal/index.html","hash":"a98e3f327cc7c1d71ccfa2e9242646c1ab1b8129","modified":1565365664797},{"_id":"public/2019/03/24/xjzw/index.html","hash":"d4ebc3a412f7095f9bf15d28f8ef78c3d482819c","modified":1565365664797},{"_id":"public/2019/01/01/open-flag/index.html","hash":"3ccbb1f5e989bab2e2b3a1b5bb0153c35c462472","modified":1565365664797},{"_id":"public/2018/12/29/bluecoffee/index.html","hash":"153e430e7ba2d050d0fd3958f54e196aae9f79c8","modified":1565365664797},{"_id":"public/2018/04/26/switch-native-debug-on-off/index.html","hash":"b5049ad5ed4985a18331278694a761479a600ed0","modified":1565365664797},{"_id":"public/2018/04/26/ubuntu-16-04-android-compile/index.html","hash":"8c39fb22e7ab2c2bde42d37e67f1034955fc5901","modified":1565365664798},{"_id":"public/2018/04/25/nginx-access-ip/index.html","hash":"f718f7a8e8c0701ef51525d0a9a4f029a47af7b5","modified":1565365664798},{"_id":"public/2018/04/20/progress-action-button-tutorial/index.html","hash":"1c99241eff2aabd81502e69bd000789a6f729425","modified":1565365664798},{"_id":"public/2018/04/19/my-ota-tutorial-5/index.html","hash":"794ea8ee591ff5fc3b61ed52fdb5671b4a669193","modified":1565365664798},{"_id":"public/2018/04/19/my-ota-tutorial-4/index.html","hash":"c237a74f6075a2cbaaf5f23a4e470344ad2066fa","modified":1565365664798},{"_id":"public/2018/04/18/pm2-load-environment/index.html","hash":"a047bd54520ce051b5502cc8a7b0cb179f356030","modified":1565365664798},{"_id":"public/2018/04/18/my-ota-tutorial-3/index.html","hash":"f2cf635dacf9162d7f611b207efbb4d2934c1f4b","modified":1565365664798},{"_id":"public/2018/04/17/qiniu-create-bucket-cname/index.html","hash":"24bbf33c4d9b7dd9b166e985b03acc6cf12ccafa","modified":1565365664798},{"_id":"public/2018/04/10/ota-user-manual/index.html","hash":"03e95e245c47bf847564d2ba822972bdc6d6f9fb","modified":1565365664798},{"_id":"public/2018/04/09/my-ota-tutorial-2/index.html","hash":"a63b798450471226ee65faeafc7a117995c300b7","modified":1565365664798},{"_id":"public/2018/03/29/android-theme-onclick/index.html","hash":"95180149a2bead225b3b90fdcc701432ca8d20d7","modified":1565365664798},{"_id":"public/2018/03/24/ngrok-intro/index.html","hash":"cd3656ecf04a9ed776a814eac6adcc3b4b3ceb04","modified":1565365664798},{"_id":"public/2018/03/20/my-ota-tutorial-7/index.html","hash":"36939801a3d44b044f324368f45b4178ed11eb39","modified":1565365664798},{"_id":"public/2018/01/09/http-summery/index.html","hash":"b0406dcae9c44ffbabe05396f03dedfafb8d7072","modified":1565365664798},{"_id":"public/2017/12/20/my-ota-tutorial-1/index.html","hash":"3633f822129e9846f654009436caa647cecbd626","modified":1565365664799},{"_id":"public/2017/12/20/my-ota-tutorial/index.html","hash":"10a4f7fabe0b1612a78d3603fd7266a3857f67ce","modified":1565365664799},{"_id":"public/2017/12/18/hexo-to-ali-ecs/index.html","hash":"88f9de9fda5803e03c5e7f33fdae31e48c93fda0","modified":1565365664799},{"_id":"public/2017/05/26/kotlin惯用法/index.html","hash":"76071673be9d2357373a11863e02c22e4f54f838","modified":1565365664799},{"_id":"public/2017/05/25/kotlin-sample/index.html","hash":"84a59274a198cbad6e28e763c9a6d3cf50a62cac","modified":1565365664799},{"_id":"public/2016/12/02/react-router-4-0-0-api-NavigationPrompt/index.html","hash":"cf3ab7eb5ca7c58698989943d50babf4c11231f1","modified":1565365664799},{"_id":"public/2016/11/29/react-router-4-0-0-api-Link/index.html","hash":"de83a2f5c11ac26234aee947d8f9a3e17db0929e","modified":1565365664799},{"_id":"public/2016/11/29/react-router-4-0-0-api-Miss/index.html","hash":"c5d08d33c83c30b606f11f70ef0f5a4a785aa2bb","modified":1565365664799},{"_id":"public/2016/11/28/fix-dev-kvm-is-not-found/index.html","hash":"5e131aa02ccc34bf850accc8197749d884235684","modified":1565365664799},{"_id":"public/2016/11/28/android-https-verify-ways/index.html","hash":"9205483f1d3493e4bb02283d5ff5437d846a0b14","modified":1565365664799},{"_id":"public/2016/11/25/react-router-4-0-0-api-Match/index.html","hash":"586bbb0ca52c9024e430bde03a806f0a7b671a5a","modified":1565365664799},{"_id":"public/2016/11/24/react-lifecycle/index.html","hash":"32139680159eb476e535678e07dbe8fe23347871","modified":1565365664799},{"_id":"public/2016/11/24/react-router-4-0-0-api/index.html","hash":"f555987aae8603a5f20495325a7761519b62aa6c","modified":1565365664799},{"_id":"public/2016/11/24/react-router-4-0-0-api-BrowserRouter/index.html","hash":"37fc98327e809193ba797fd503b7f41b11a1bf8f","modified":1565365664799},{"_id":"public/2016/11/16/ubuntu编译android源代码环境搭建/index.html","hash":"b4b95b2d4c1ab7b5905eda4707a4b6399a0863b8","modified":1565365664800},{"_id":"public/2016/11/15/how-to-download-openjdk/index.html","hash":"cbe2009b8f77bf3b753777c36972294e66824654","modified":1565365664800},{"_id":"public/2016/11/15/ubuntu利用update-alternatives配置java/index.html","hash":"9115f77bc6e9201523831b36ec5603dff0822498","modified":1565365664800},{"_id":"public/2016/11/15/make-ubutun-desktop/index.html","hash":"068d0545c08fb989388fa35068182b2823518642","modified":1565365664800},{"_id":"public/2016/11/15/git配置user-name和user-email/index.html","hash":"5706cf8f7bff9dc15e37cb0452746ef93faf00fb","modified":1565365664800},{"_id":"public/2016/11/09/windows配置mongdb记录/index.html","hash":"23036605f8c3f4fe6c76bb92715a0f5d83887a4f","modified":1565365664800},{"_id":"public/2016/11/08/windows下文件路径太深，无法删除解决办法/index.html","hash":"b2af9134ce7dc3b6133790e849de966809f2c640","modified":1565365664800},{"_id":"public/2016/11/06/gitignore无效，不能过滤某些文件/index.html","hash":"159d759f961e14cc776d351792d67121b2cdb7fe","modified":1565365664800},{"_id":"public/2016/11/05/High-Performance-Javascript/index.html","hash":"c62d4829ab028bdb2d82875f3f8a4fba046aaa3a","modified":1565365664800},{"_id":"public/2016/11/05/android-studio编译错误-目标模式不含有“-”。-停止。/index.html","hash":"bf26d41fcdc33898d33719b0f913c98ea7742a40","modified":1565365664800},{"_id":"public/2016/09/06/CSS-The-Definitive-Guide/index.html","hash":"d2ce8d377aba6f6df8da8a4fd78baaca8800229a","modified":1565365664800},{"_id":"public/2016/09/05/chapter-4/index.html","hash":"a507b056f028ba0f2bf33dc857d0c6617c39adda","modified":1565365664800},{"_id":"public/2016/09/03/chapter-3/index.html","hash":"0f8e214a29e823eff9b4355041178baeb60357e8","modified":1565365664800},{"_id":"public/2016/09/02/chapter-2/index.html","hash":"14950edaaca8c25fed6eb242421f7fcc997b86bd","modified":1565365664800},{"_id":"public/categories/互联网产品分析/index.html","hash":"edbfba9667034c6ee5778d9f86a056ced7635a42","modified":1565365664800},{"_id":"public/categories/从零搭建Android-OTA系统/index.html","hash":"416215e09e1d97fc47eed3e769fdb4f63b689868","modified":1565365664801},{"_id":"public/categories/个人计划和总结/index.html","hash":"c9c1ddbe17cdf0caaebf6797ff9ba2c119f2049b","modified":1565365664801},{"_id":"public/categories/react-router-4-0-0-api中文文档/index.html","hash":"1ae453e3436751f8fb91bb5c0c001cbd93a3eb8b","modified":1565365664801},{"_id":"public/archives/index.html","hash":"5974b948de8e62ecd4f9140f6d91633faf1c90cc","modified":1565365738106},{"_id":"public/archives/page/2/index.html","hash":"6fa55da72b16e8d291bb579d942e21cef5b963a7","modified":1565365664801},{"_id":"public/archives/page/3/index.html","hash":"9161a4a912168871089a6bb87f802209b8848494","modified":1565365664801},{"_id":"public/archives/page/4/index.html","hash":"f39921a6d5d55a7e0d01ac2afb9794d2c668078f","modified":1565365664801},{"_id":"public/archives/page/5/index.html","hash":"2ffc20351de1846a1d2d42b4c05c5ff304403b20","modified":1565365664801},{"_id":"public/archives/page/6/index.html","hash":"fdb2b48f527e25eb309d9296d8c875f4037f76ea","modified":1565365664801},{"_id":"public/archives/2016/index.html","hash":"b6bf9fffe1ef787d8f8eeaddc9fa5a1f1a62d91c","modified":1565365664801},{"_id":"public/archives/2016/page/2/index.html","hash":"7b7d7258e049f0ced8cacea2326b33dad45370e1","modified":1565365664801},{"_id":"public/archives/2016/page/3/index.html","hash":"3b47d43d9257acb063c0135ebfab0432c9927f14","modified":1565365664801},{"_id":"public/archives/2016/09/index.html","hash":"cfdc9f1c9df053798d6fdeb9521d599019a7716e","modified":1565365664801},{"_id":"public/archives/2016/11/index.html","hash":"d70e44e6afc066119f20f54b682f694ca00982cd","modified":1565365664801},{"_id":"public/archives/2016/11/page/2/index.html","hash":"c5be26f1ad75f5a886b1dfc9d6af1f5d9a10a0ea","modified":1565365664801},{"_id":"public/archives/2016/12/index.html","hash":"4e9efe66fd1f5f243c2b1f894df68337e7099d8e","modified":1565365664801},{"_id":"public/archives/2017/index.html","hash":"fa513dff6c3497cee57ab843a3e27eff09860d2c","modified":1565365664802},{"_id":"public/archives/2017/05/index.html","hash":"9579e6da8699d2e3df9c5f056367ed2cf02d7112","modified":1565365664802},{"_id":"public/archives/2017/12/index.html","hash":"66d5d51f92570a34af08bf7f2794982887871410","modified":1565365664802},{"_id":"public/archives/2018/index.html","hash":"25a9ffde0929d89dcda4c2460500ce14b31a37ff","modified":1565365664802},{"_id":"public/archives/2018/page/2/index.html","hash":"c92a072053ebb2029c918eb211ecdc252ae34659","modified":1565365664802},{"_id":"public/archives/2018/01/index.html","hash":"4e7964402dbc61f047a62b48d079d995fb1baac6","modified":1565365664802},{"_id":"public/archives/2018/03/index.html","hash":"04006e067c75b277acc36b0f840eae7e00ff78b3","modified":1565365664802},{"_id":"public/archives/2018/04/index.html","hash":"2d3b0e018e9349bb4ff0201d287437d5c895233d","modified":1565365664802},{"_id":"public/archives/2018/04/page/2/index.html","hash":"0f140ee56f91821c4a4366589252ca212eb87a51","modified":1565365664802},{"_id":"public/archives/2018/12/index.html","hash":"e26f91614de88006fdd7cc4401bec18163d248ca","modified":1565365664802},{"_id":"public/archives/2019/index.html","hash":"61bc9fd92d9876c3a018a31f40a44cd41113c7bf","modified":1565365738106},{"_id":"public/archives/2019/01/index.html","hash":"59f64d581606d1bd7089735c26c9074455b805e0","modified":1565365664802},{"_id":"public/archives/2019/03/index.html","hash":"cd2c474009880c3c722d71351287cfdf93a4f9d1","modified":1565365664802},{"_id":"public/archives/2019/04/index.html","hash":"6b08626aacb391ab48e5612bef57972e99abc6d7","modified":1565365664802},{"_id":"public/archives/2019/06/index.html","hash":"d64edfaf2fc840c05fa7e79a6085ab8e7ee8f2b5","modified":1565365738107},{"_id":"public/tags/mysql/index.html","hash":"196cf17e56293f8106f69202674cb2909bd3058b","modified":1565365664802},{"_id":"public/tags/javascript/index.html","hash":"7e91632461610b167dfe5dec974a67be3a540ee8","modified":1565365664802},{"_id":"public/tags/ecs/index.html","hash":"c894109168e70c84e574f3af1c8de7db6690fbed","modified":1565365664803},{"_id":"public/tags/android-studio/index.html","hash":"7a03a5342e3f77ac666ac3d3bc4fa2531789fabc","modified":1565365664803},{"_id":"public/tags/android/index.html","hash":"75e2f29a2288dc2f7b25e10d34fdcd746c9a43f2","modified":1565365664803},{"_id":"public/tags/AWS/index.html","hash":"ef83b9ca33aade50513e587fff0d0fbeb909ff7c","modified":1565365738106},{"_id":"public/tags/ssh/index.html","hash":"0246073461c0a8a8a3df728442374ff4ea1dada0","modified":1565365664803},{"_id":"public/tags/小蓝咖啡/index.html","hash":"85fecb26112a442ddbba864f7af755cb8b863b5f","modified":1565365664803},{"_id":"public/tags/jQuery/index.html","hash":"504ea851a08b47284a76eb4e9ef8106284bfd869","modified":1565365664803},{"_id":"public/tags/spring-boot/index.html","hash":"04db9e85c76c7c9b415c177ba955e06ad5c3fbaa","modified":1565365664803},{"_id":"public/tags/enum/index.html","hash":"e1c71ff6304252db6a8f6722e0c96a6e0be35bb3","modified":1565365664803},{"_id":"public/tags/git/index.html","hash":"a35256530f2937688fa46195a9193bf17b541814","modified":1565365664803},{"_id":"public/tags/gitignore/index.html","hash":"dac85b3dfec414cd7883f1fa2ea23bd4e127903b","modified":1565365664803},{"_id":"public/tags/ubuntu/index.html","hash":"42c7004b9d033c52ba83d36017e13a93c4a6d58e","modified":1565365664803},{"_id":"public/tags/hexo/index.html","hash":"f2a2a5de0989202f0082becc7f5575a8a51b9411","modified":1565365664803},{"_id":"public/tags/ECS/index.html","hash":"e875a73a5991d33549d9c426d381322c9be87013","modified":1565365664803},{"_id":"public/tags/openjdk/index.html","hash":"6e2ca96cc48f36d8966b60b5a5be22bf791a4911","modified":1565365664803},{"_id":"public/tags/java/index.html","hash":"69a614dbb9a39a94d6a56786fb4273f040c28eb6","modified":1565365664803},{"_id":"public/tags/kotlin/index.html","hash":"e90494e856565eeaae6378b720c560db536fe7f8","modified":1565365664803},{"_id":"public/tags/express/index.html","hash":"461d50dafd6793372fdf67c0f0e0930a2be39aed","modified":1565365664803},{"_id":"public/tags/react/index.html","hash":"8a56ff9895546697cb93fca72422dff21ad65204","modified":1565365664804},{"_id":"public/tags/react/page/2/index.html","hash":"609a2d15d0d64007e67d5d1d9d71ca67660d2401","modified":1565365664804},{"_id":"public/tags/nodejs/index.html","hash":"c6d3d609b6677a2a019608c5d6f3ad3dd349dc7c","modified":1565365664804},{"_id":"public/tags/antd/index.html","hash":"a2269e7286e32c570213079cb9ead65296571790","modified":1565365664804},{"_id":"public/tags/ECS，-nginx/index.html","hash":"504e90dc6a93594aed32a1c6a5cfc5bc98799b08","modified":1565365664804},{"_id":"public/tags/nginx/index.html","hash":"fe3cde40e5bfc8ca45d81d15a28692916b7e039f","modified":1565365664804},{"_id":"public/tags/ngrok/index.html","hash":"dbd8bca93a0a7c750f7e764d2677d434f0adef84","modified":1565365664804},{"_id":"public/tags/nodjs/index.html","hash":"2d2269167cd5365a57845ab5825bdccb59877092","modified":1565365664804},{"_id":"public/tags/个人计划和总结/index.html","hash":"385ba6d86257345e8f32b49db9fd95277dd3cdbb","modified":1565365664804},{"_id":"public/tags/pm2/index.html","hash":"6c47f493c5c4f4bb02376d3bbfcbd1b7d7d52695","modified":1565365664804},{"_id":"public/tags/button/index.html","hash":"90290709527372bd4e60991ade5159ec15c6311b","modified":1565365664804},{"_id":"public/tags/progressbar/index.html","hash":"295ae217c356ce9baaa25538443b4ea0b08c9246","modified":1565365664804},{"_id":"public/tags/qiniu/index.html","hash":"04389eaac849ebd34653f86e9bde5f5160ac1fda","modified":1565365664804},{"_id":"public/tags/aliyun/index.html","hash":"13d014abe8c56cede5cab52e398a8d74b14ac13b","modified":1565365664804},{"_id":"public/tags/react-router/index.html","hash":"60369222d6145e810dea6837878440207da8453b","modified":1565365664804},{"_id":"public/tags/翻译文档/index.html","hash":"963aeb8abf54b17d714898fdf826649cb2abc333","modified":1565365664804},{"_id":"public/tags/Spring-Boot/index.html","hash":"6ad4b958c47d5ac737a641047b4ae56f2cc684a5","modified":1565365738106},{"_id":"public/tags/debug/index.html","hash":"5f3feee4d1e4671d3904e3a3eb5f3765bc83603a","modified":1565365664805},{"_id":"public/tags/c-c/index.html","hash":"09453c8ce297327c78fd20f286c8d04614aa5dd1","modified":1565365664805},{"_id":"public/tags/react-spring-boot/index.html","hash":"820f3ca765a1be3fbf687c6b47cc47cbb077013c","modified":1565365664805},{"_id":"public/tags/update-alternatives/index.html","hash":"e4c3f2470cf2a91cec2378d35e28c652bbae943f","modified":1565365664805},{"_id":"public/tags/环境搭建/index.html","hash":"fd87105827934eb1d791b9a757986a6999729d54","modified":1565365664805},{"_id":"public/tags/windows/index.html","hash":"e22f51983a0639929fa7eb8af6b2813f81f229fb","modified":1565365664805},{"_id":"public/tags/npm/index.html","hash":"d41ce9cddfeee09758f83c23c474dba72d4502b6","modified":1565365664805},{"_id":"public/tags/mongodb/index.html","hash":"b2ea0131e91e001265f18356870c990f7b98a19f","modified":1565365664805},{"_id":"public/tags/jdk/index.html","hash":"d216c52d7e64737146d075170a5922e03c34ab88","modified":1565365664805},{"_id":"public/tags/make/index.html","hash":"a3eea8e748bcb8cef35ba8e0fefd639a05bd14d2","modified":1565365664805},{"_id":"public/tags/css/index.html","hash":"868664888292d2bc6010f05e066e6dfb69917084","modified":1565365664805},{"_id":"public/tags/https/index.html","hash":"b56e6eb621936a30e781bd3f7d4e54ff466a2fb4","modified":1565365664805},{"_id":"public/tags/openssl/index.html","hash":"f341ebaef8d7acc5bf56292799536adb5b119a2c","modified":1565365664805},{"_id":"public/index.html","hash":"050fea9991cd994f6d609cae02295083462f685b","modified":1565365738106},{"_id":"public/page/2/index.html","hash":"929c0a83c0f759f8df128cbe0b40aad35a62aaf3","modified":1565365664805},{"_id":"public/page/3/index.html","hash":"64c148b4edc8294c8523e260d6d1c4ac9f5e6726","modified":1565365664806},{"_id":"public/page/4/index.html","hash":"9e25a7d9e657295af991b17cc242f3f2909674d4","modified":1565365664806},{"_id":"public/page/5/index.html","hash":"f6d12f3569e862b3963f5acb773adb2f50ff7291","modified":1565365664806},{"_id":"public/page/6/index.html","hash":"91dd4ea1c52c462aafb41617dd27b4b5dc6d1b33","modified":1565365664806},{"_id":"public/2019/06/27/javafx-map-entry/index.html","hash":"c6232ebc8dd1d78e49b5788e85c2bf2eb70b94f2","modified":1565365738106},{"_id":"public/2019/06/21/spring-boot-nginx-prepare/index.html","hash":"76692246df2309ce6831166e0bca239ff679c44a","modified":1565365738106},{"_id":"public/archives/2019/page/2/index.html","hash":"a443e0724c1954bdc492dfa5f293425f66d04c5e","modified":1565365664813},{"_id":"public/tags/家庭/index.html","hash":"6c1d56e693411a3c7bc50e71c686f3e37d63107f","modified":1565365664813},{"_id":"public/tags/Linux/index.html","hash":"c49ef183eb721c1e0cb45d17fba8042ef12aedc2","modified":1565365738106},{"_id":"public/favicon-16x16-next.png","hash":"7cdeaa327f78a7b0bd05e3ded65326bf02ed9767","modified":1565365664822},{"_id":"public/favicon-32x32-next.png","hash":"6c6a4b65f3bf3929ef560f1a57dfc2fcd22276b2","modified":1565365664822},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1565365664822},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1565365664822},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1565365664822},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1565365664822},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1565365664822},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1565365664822},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1565365664822},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1565365664822},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1565365664822},{"_id":"public/images/favicon-16x16-next.png","hash":"7cdeaa327f78a7b0bd05e3ded65326bf02ed9767","modified":1565365664822},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1565365664822},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1565365664823},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1565365664823},{"_id":"public/images/favicon-32x32-next.png","hash":"6c6a4b65f3bf3929ef560f1a57dfc2fcd22276b2","modified":1565365664823},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1565365664823},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1565365664823},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1565365664823},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1565365664823},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1565365664823},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1565365664823},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1565365664823},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1565365664823},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1565365664823},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1565365664823},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1565365664823},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1565365664824},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1565365664824},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1565365664824},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1565365664824},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1565365664824},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1565365664824},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1565365664824},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1565365664824},{"_id":"public/images/wechatpay.jpeg","hash":"e03118c78a8e75f3ff4cdf00798a927821647360","modified":1565365665337},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1565365665341},{"_id":"public/2018/12/29/bluecoffee/2.jpeg","hash":"eeac5be245efafec120bbe8271baf0c150890c7f","modified":1565365665342},{"_id":"public/2018/12/29/bluecoffee/3.jpeg","hash":"a82189e72e57c8cfec3dce25b0eb4e4b1577971b","modified":1565365665342},{"_id":"public/2018/12/29/bluecoffee/4.jpeg","hash":"442f061d6e2e0f1a44b60fa744e2c796825fe525","modified":1565365665342},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1565365665348},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1565365665348},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1565365665349},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1565365665349},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1565365665349},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1565365665349},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1565365665349},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1565365665349},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1565365665349},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1565365665349},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1565365665349},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1565365665349},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1565365665349},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1565365665349},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1565365665349},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1565365665350},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1565365665350},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1565365665350},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1565365665350},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1565365665350},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1565365665350},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1565365665350},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1565365665350},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1565365665350},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1565365665350},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1565365665350},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1565365665350},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1565365665350},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1565365665351},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1565365665351},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1565365665351},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1565365665351},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1565365665351},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1565365665351},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1565365665351},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1565365665351},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1565365665351},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1565365665351},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1565365665351},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1565365665351},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1565365665352},{"_id":"public/css/main.css","hash":"0a7f0f862e3dd0e500f6d1ba02a82f91d52d25c4","modified":1565365665352},{"_id":"public/images/alipay.jpeg","hash":"87653b94c3eee37a18552e5224eb1728dd9d9932","modified":1565365665352},{"_id":"public/images/avatar.jpg","hash":"aedbfc9c168aed279fbbb5e87c1de5db9d881a33","modified":1565365665352},{"_id":"public/images/wechatpay.jpg","hash":"00a08c702de9a0b8d371212f29e97487b0978c8b","modified":1565365665352},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1565365665352},{"_id":"public/images/alipay.jpg","hash":"c55209a65cd9fbc6f5bf9c423d7afe0c5037a1c2","modified":1565365665352},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1565365665352},{"_id":"public/2018/12/29/bluecoffee/1.jpeg","hash":"ce8527829a6091d788c1a9b36ab3804d3a69e4f3","modified":1565365665353},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1565365665353},{"_id":"public/2018/12/29/bluecoffee/7.jpeg","hash":"71fdbd8a17c5f1dab7f119f0012011ebef0b5f1a","modified":1565365665353},{"_id":"public/2018/12/29/bluecoffee/8.jpeg","hash":"10c09489e7721ea0130e43c0b4bc7be65e8a520a","modified":1565365665353},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1565365665407},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1565365665407},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1565365665407},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1565365665408},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1565365665408},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1565365665408},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1565365665408},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1565365665408},{"_id":"public/2018/12/29/bluecoffee/6.jpeg","hash":"068ef5c5f460be54ec6adc75179a1bf13085639a","modified":1565365665408},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1565365665408},{"_id":"public/2018/12/29/bluecoffee/5.jpeg","hash":"3c7b15d0437565056ec7d672a31dfd11bfe459ba","modified":1565365665408},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1565365665412},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1565365665412},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1565365665415},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1565365665417},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1565365665421},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1565365665421},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1565365665422},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1565365665422},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1565365665422},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1565365665422},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1565365665423},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1565365665442},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1565365665442},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1565365665443},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1565365665444},{"_id":"public/2019/03/24/xjzw/db_fkdwxr_score.png","hash":"83045eb2c66cca3d530ee932661f7ef1728255e2","modified":1565365665445},{"_id":"public/2019/03/24/xjzw/db_xjzw_score.jpg","hash":"bea95203e3d8b5a309ff78f33f2d8ca96b07ac0a","modified":1565365665445},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1565365665448},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1565365665448},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1565365665450},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1565365665459},{"_id":"public/2019/01/01/open-flag/lovely_candy.png","hash":"8bd088723baaaa012ad5f357d539041f741872da","modified":1565365665460},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1565365665469},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1565365665475}],"Category":[{"name":"互联网产品分析","_id":"cjz4aandj000dbiuisey3zwq1"},{"name":"从零搭建Android OTA系统","_id":"cjz4aaneh0015biuiul3g0nrb"},{"name":"个人计划和总结","_id":"cjz4aaneq001tbiui29dql753"},{"name":"react router 4.0.0 api中文文档","_id":"cjz4aanex0029biuimdrgm1ef"}],"Data":[],"Page":[{"title":"categories","date":"2019-01-02T11:05:33.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-01-02 19:05:33\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-01-03T02:48:56.355Z","path":"categories/index.html","layout":"page","_id":"cjz4aancy0000biuikoslqgp0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-01-02T11:05:10.000Z","type":"tags","comments":0,"layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-01-02 19:05:10\ntype: \"tags\"\ncomments: false\nlayout: \"tags\"\n---\n","updated":"2019-01-03T02:48:56.354Z","path":"tags/index.html","_id":"cjz4aanke0078biui3uyyl7tb","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"远程访问阿里云ECS MYSQL服务的方法","date":"2019-06-21T03:07:33.000Z","_content":"\n在连接阿里云ECS的Mysql服务的时候，碰到失败的问题，排查的步骤如下：\n\n- 在云服务器实例的安全组入规则里面，开通MYSQL(3306)端口，如果你的MYSQL服务绑定的是其他端口，那么请开通对应端口。\n\n- 在MYSQL的配置文件里面，我的ECS的配置文件是/etc/mysql/my.cnf里，注释掉\n```\nbind-address\t\t= 127.0.0.1\n```\n或者改为\n```\nbind-address\t\t= 0.0.0.0\n```\n\n- 将host字段的值改为%就表示在任何客户端机器上能以root用户登录到mysql服务器，建议在开发时设为%。   \n\n```\nmysql> use mysql;\nReading table information for completion of table and column names\nYou can turn off this feature to get a quicker startup with -A\n\nDatabase changed\nmysql> grant all privileges  on *.* to root@'%' identified by \"password\";\n```\n- 退出，然后重启mysql服务:\n```bash\nservice mysql restart\n```\n\n然后就可以用MySQLWorkbench之类的工具远程连接数据库了。\n\n或者在spring boot项目application.yml里面，配置远程连接：\n```\nspring:\n  datasource:\n    driver-class-name: com.mysql.jdbc.Driver\n    username: root\n    password: root\n    url: jdbc:mysql://xx.xx.xx.xx:3306/test\n```","source":"_posts/aliyun-ecs-mysql.md","raw":"---\ntitle: 远程访问阿里云ECS MYSQL服务的方法\ndate: 2019-06-21 11:07:33\ntags: [mysql, ecs]\n---\n\n在连接阿里云ECS的Mysql服务的时候，碰到失败的问题，排查的步骤如下：\n\n- 在云服务器实例的安全组入规则里面，开通MYSQL(3306)端口，如果你的MYSQL服务绑定的是其他端口，那么请开通对应端口。\n\n- 在MYSQL的配置文件里面，我的ECS的配置文件是/etc/mysql/my.cnf里，注释掉\n```\nbind-address\t\t= 127.0.0.1\n```\n或者改为\n```\nbind-address\t\t= 0.0.0.0\n```\n\n- 将host字段的值改为%就表示在任何客户端机器上能以root用户登录到mysql服务器，建议在开发时设为%。   \n\n```\nmysql> use mysql;\nReading table information for completion of table and column names\nYou can turn off this feature to get a quicker startup with -A\n\nDatabase changed\nmysql> grant all privileges  on *.* to root@'%' identified by \"password\";\n```\n- 退出，然后重启mysql服务:\n```bash\nservice mysql restart\n```\n\n然后就可以用MySQLWorkbench之类的工具远程连接数据库了。\n\n或者在spring boot项目application.yml里面，配置远程连接：\n```\nspring:\n  datasource:\n    driver-class-name: com.mysql.jdbc.Driver\n    username: root\n    password: root\n    url: jdbc:mysql://xx.xx.xx.xx:3306/test\n```","slug":"aliyun-ecs-mysql","published":1,"updated":"2019-07-10T06:40:19.796Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aand00001biui5jvgfqqg","content":"<p>在连接阿里云ECS的Mysql服务的时候，碰到失败的问题，排查的步骤如下：</p>\n<ul>\n<li><p>在云服务器实例的安全组入规则里面，开通MYSQL(3306)端口，如果你的MYSQL服务绑定的是其他端口，那么请开通对应端口。</p>\n</li>\n<li><p>在MYSQL的配置文件里面，我的ECS的配置文件是/etc/mysql/my.cnf里，注释掉</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bind-address\t\t= 127.0.0.1</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>或者改为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bind-address\t\t= 0.0.0.0</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>将host字段的值改为%就表示在任何客户端机器上能以root用户登录到mysql服务器，建议在开发时设为%。   </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; use mysql;</span><br><span class=\"line\">Reading table information for completion of table and column names</span><br><span class=\"line\">You can turn off this feature to get a quicker startup with -A</span><br><span class=\"line\"></span><br><span class=\"line\">Database changed</span><br><span class=\"line\">mysql&gt; grant all privileges  on *.* to root@&apos;%&apos; identified by &quot;password&quot;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>退出，然后重启mysql服务:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysql restart</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>然后就可以用MySQLWorkbench之类的工具远程连接数据库了。</p>\n<p>或者在spring boot项目application.yml里面，配置远程连接：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  datasource:</span><br><span class=\"line\">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class=\"line\">    username: root</span><br><span class=\"line\">    password: root</span><br><span class=\"line\">    url: jdbc:mysql://xx.xx.xx.xx:3306/test</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在连接阿里云ECS的Mysql服务的时候，碰到失败的问题，排查的步骤如下：</p>\n<ul>\n<li><p>在云服务器实例的安全组入规则里面，开通MYSQL(3306)端口，如果你的MYSQL服务绑定的是其他端口，那么请开通对应端口。</p>\n</li>\n<li><p>在MYSQL的配置文件里面，我的ECS的配置文件是/etc/mysql/my.cnf里，注释掉</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bind-address\t\t= 127.0.0.1</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>或者改为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bind-address\t\t= 0.0.0.0</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>将host字段的值改为%就表示在任何客户端机器上能以root用户登录到mysql服务器，建议在开发时设为%。   </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; use mysql;</span><br><span class=\"line\">Reading table information for completion of table and column names</span><br><span class=\"line\">You can turn off this feature to get a quicker startup with -A</span><br><span class=\"line\"></span><br><span class=\"line\">Database changed</span><br><span class=\"line\">mysql&gt; grant all privileges  on *.* to root@&apos;%&apos; identified by &quot;password&quot;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>退出，然后重启mysql服务:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysql restart</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>然后就可以用MySQLWorkbench之类的工具远程连接数据库了。</p>\n<p>或者在spring boot项目application.yml里面，配置远程连接：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  datasource:</span><br><span class=\"line\">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class=\"line\">    username: root</span><br><span class=\"line\">    password: root</span><br><span class=\"line\">    url: jdbc:mysql://xx.xx.xx.xx:3306/test</span><br></pre></td></tr></table></figure></p>\n"},{"title":"高性能Javscript - 笔记","date":"2016-11-05T10:04:19.000Z","_content":"\n## 第一章 加载和执行\n\n### 减少Javascript加载对性能的影响\n\n- &lt;/body>闭合标签之前，将所有&lt;javascript>标签放到页面底部。这能确保在脚本执行前页面已经完成了渲染\n- 合并脚本，减少&lt;javascript>标签\n- 使用&lt;javascript>标签的defer属性\n```javascript\n    <script type='text/javascript' src='file1.js' defer></script>\n```\n\n<!--more-->\n\n- 利用动态创建的&lt;javascript>元素来下载并执行代码\n```javascript\n    var script = document.createElemnet('script');\n    script.type = 'text/javascript';\n    script.onload = function() {\n        alert('Script loaded!');\n    }\n    script.src = 'file1.js';\n    document.getElementByTagName('head')[0].appendChild(script);\n```\n- 使用XHR对象下载Javascript代码并注入页面中\n```javascript\n    var xhr = new XMLHttpRequest();\n    xhr.open('get', 'file1.js', true);\n    xhr.onreadystatechange = function() {\n        if(xhr.readyState == 4) {\n            if(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n                var script = document.createElemnet('script');\n                script.type = 'text/javascript';\n                script.text = xhr.responseText;\n                document.body.appendChild(script);\n            }\n        }\n    }\n```\n\n### 几种类库加载js的方式\n- YUI3\n```javascript\n    <script type='text/javascript' src='http://yui.yahooapis.com/combo?3.0.0/build/yui/yui-min.js'></script>\n    <script type='text/javascript'>\n        YUI().use('dom', function(Y) {\n            Y.DOM.addClass(document.body, 'loaded');\n        })\n    </script>\n```\n- LazyLoad\n```javascript\n    <script type='text/javascript' src='lazyload-min.js'></script>\n    <script type='text/javascript'>\n        LazyLoad.js('the-rest.js', function() {\n            Applicationn.init();\n        })\n    </script>\n```\n- LABjs\n```javascript\n    <script type='text/javascript' src='lab.js'></script>\n    <script type='text/javascript'> \n        $LAB.script('first-file.js')\n            .wait()\n            .script('the-rest.js')\n            .wait(function() {\n                Applicationn.init();\n            })\n```\n\n## 第二章 数据存取\n\n在Javascript中，数据存储的位置会对代码整体性能产成重大影响。数据存储共有4中方式：字面量、变量、数组项、对象成员。它们有着各自的性能特点。\n\n\n- 访问字面量和局部变量的速度最快，相反，访问数组元素和对象成员相对较慢。\n- 由于局部变量存在于作用域链的起始位置，因此访问局部变量比访问跨作用域变量更快。变量在作用域中的位置越深，访问所需时间就越长。由于全局变量总处在作用域的最末端，因此访问速度时最慢的。\n- 避免使用with语句。\n- 嵌套的对象成员会明显影响性能，尽量少用。\n- 属性或方法在原型链中的位置越深，访问它的速度也越慢。\n- 通常来说，你可以通过把常用的对象成员、数组元素、跨域变量保存在局部变量中来改善Javascript性能，因为局部变量访问速度更快。\n\n## 第三章 DOM编程\n\n访问和操作DOM时现在Web应用的重要部分。但每次穿越链接ECMAScript和DOM都会有性能消耗，为了减少DOM编程带来的消耗，请记住以下几点：\n\n- 最小化DOM访问次数，尽可能在Javascript端处理。\n- 如果需要多次访问某个DOM节点，请使用局部变量存储它的引用。\n- 小心处理HTML集合，把集合的长度缓存到一个变量中，并在迭代中使用它。如果需要经常操作集合，建议把它靠背到一个数组中。\n- 如果可能的话，使用速度更快的API，比如querySelecetAll()和firstElementChild。\n- 要留意重排和重绘，批量修改样式时，离线操作DOM树，使用缓存，并减少布局信息的次数。\n- 动画中使用绝对定位，使用拖放代理。\n- 使用事件委托来减少事件处理器的数量。","source":"_posts/High-Performance-Javascript.md","raw":"---\ntitle: 高性能Javscript - 笔记\ndate: 2016-11-5 18:04:19\ntags: javascript\n---\n\n## 第一章 加载和执行\n\n### 减少Javascript加载对性能的影响\n\n- &lt;/body>闭合标签之前，将所有&lt;javascript>标签放到页面底部。这能确保在脚本执行前页面已经完成了渲染\n- 合并脚本，减少&lt;javascript>标签\n- 使用&lt;javascript>标签的defer属性\n```javascript\n    <script type='text/javascript' src='file1.js' defer></script>\n```\n\n<!--more-->\n\n- 利用动态创建的&lt;javascript>元素来下载并执行代码\n```javascript\n    var script = document.createElemnet('script');\n    script.type = 'text/javascript';\n    script.onload = function() {\n        alert('Script loaded!');\n    }\n    script.src = 'file1.js';\n    document.getElementByTagName('head')[0].appendChild(script);\n```\n- 使用XHR对象下载Javascript代码并注入页面中\n```javascript\n    var xhr = new XMLHttpRequest();\n    xhr.open('get', 'file1.js', true);\n    xhr.onreadystatechange = function() {\n        if(xhr.readyState == 4) {\n            if(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n                var script = document.createElemnet('script');\n                script.type = 'text/javascript';\n                script.text = xhr.responseText;\n                document.body.appendChild(script);\n            }\n        }\n    }\n```\n\n### 几种类库加载js的方式\n- YUI3\n```javascript\n    <script type='text/javascript' src='http://yui.yahooapis.com/combo?3.0.0/build/yui/yui-min.js'></script>\n    <script type='text/javascript'>\n        YUI().use('dom', function(Y) {\n            Y.DOM.addClass(document.body, 'loaded');\n        })\n    </script>\n```\n- LazyLoad\n```javascript\n    <script type='text/javascript' src='lazyload-min.js'></script>\n    <script type='text/javascript'>\n        LazyLoad.js('the-rest.js', function() {\n            Applicationn.init();\n        })\n    </script>\n```\n- LABjs\n```javascript\n    <script type='text/javascript' src='lab.js'></script>\n    <script type='text/javascript'> \n        $LAB.script('first-file.js')\n            .wait()\n            .script('the-rest.js')\n            .wait(function() {\n                Applicationn.init();\n            })\n```\n\n## 第二章 数据存取\n\n在Javascript中，数据存储的位置会对代码整体性能产成重大影响。数据存储共有4中方式：字面量、变量、数组项、对象成员。它们有着各自的性能特点。\n\n\n- 访问字面量和局部变量的速度最快，相反，访问数组元素和对象成员相对较慢。\n- 由于局部变量存在于作用域链的起始位置，因此访问局部变量比访问跨作用域变量更快。变量在作用域中的位置越深，访问所需时间就越长。由于全局变量总处在作用域的最末端，因此访问速度时最慢的。\n- 避免使用with语句。\n- 嵌套的对象成员会明显影响性能，尽量少用。\n- 属性或方法在原型链中的位置越深，访问它的速度也越慢。\n- 通常来说，你可以通过把常用的对象成员、数组元素、跨域变量保存在局部变量中来改善Javascript性能，因为局部变量访问速度更快。\n\n## 第三章 DOM编程\n\n访问和操作DOM时现在Web应用的重要部分。但每次穿越链接ECMAScript和DOM都会有性能消耗，为了减少DOM编程带来的消耗，请记住以下几点：\n\n- 最小化DOM访问次数，尽可能在Javascript端处理。\n- 如果需要多次访问某个DOM节点，请使用局部变量存储它的引用。\n- 小心处理HTML集合，把集合的长度缓存到一个变量中，并在迭代中使用它。如果需要经常操作集合，建议把它靠背到一个数组中。\n- 如果可能的话，使用速度更快的API，比如querySelecetAll()和firstElementChild。\n- 要留意重排和重绘，批量修改样式时，离线操作DOM树，使用缓存，并减少布局信息的次数。\n- 动画中使用绝对定位，使用拖放代理。\n- 使用事件委托来减少事件处理器的数量。","slug":"High-Performance-Javascript","published":1,"updated":"2019-01-03T02:48:56.343Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aand40002biui9l24fi05","content":"<h2 id=\"第一章-加载和执行\"><a href=\"#第一章-加载和执行\" class=\"headerlink\" title=\"第一章 加载和执行\"></a>第一章 加载和执行</h2><h3 id=\"减少Javascript加载对性能的影响\"><a href=\"#减少Javascript加载对性能的影响\" class=\"headerlink\" title=\"减少Javascript加载对性能的影响\"></a>减少Javascript加载对性能的影响</h3><ul>\n<li>&lt;/body&gt;闭合标签之前，将所有&lt;javascript&gt;标签放到页面底部。这能确保在脚本执行前页面已经完成了渲染</li>\n<li>合并脚本，减少&lt;javascript&gt;标签</li>\n<li>使用&lt;javascript&gt;标签的defer属性<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'file1.js'</span> defer&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>利用动态创建的&lt;javascript&gt;元素来下载并执行代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElemnet(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">script.type = <span class=\"string\">'text/javascript'</span>;</span><br><span class=\"line\">script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'Script loaded!'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">script.src = <span class=\"string\">'file1.js'</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(script);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用XHR对象下载Javascript代码并注入页面中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">xhr.open(<span class=\"string\">'get'</span>, <span class=\"string\">'file1.js'</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xhr.readyState == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span> || xhr.status === <span class=\"number\">304</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElemnet(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">            script.type = <span class=\"string\">'text/javascript'</span>;</span><br><span class=\"line\">            script.text = xhr.responseText;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.body.appendChild(script);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"几种类库加载js的方式\"><a href=\"#几种类库加载js的方式\" class=\"headerlink\" title=\"几种类库加载js的方式\"></a>几种类库加载js的方式</h3><ul>\n<li><p>YUI3</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'http://yui.yahooapis.com/combo?3.0.0/build/yui/yui-min.js'</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt;</span><br><span class=\"line\">    YUI().use(<span class=\"string\">'dom'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Y</span>) </span>&#123;</span><br><span class=\"line\">        Y.DOM.addClass(<span class=\"built_in\">document</span>.body, <span class=\"string\">'loaded'</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>LazyLoad</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'lazyload-min.js'</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt;</span><br><span class=\"line\">    LazyLoad.js(<span class=\"string\">'the-rest.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        Applicationn.init();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>LABjs</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'lab.js'</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt; </span><br><span class=\"line\">    $LAB.script(<span class=\"string\">'first-file.js'</span>)</span><br><span class=\"line\">        .wait()</span><br><span class=\"line\">        .script(<span class=\"string\">'the-rest.js'</span>)</span><br><span class=\"line\">        .wait(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            Applicationn.init();</span><br><span class=\"line\">        &#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"第二章-数据存取\"><a href=\"#第二章-数据存取\" class=\"headerlink\" title=\"第二章 数据存取\"></a>第二章 数据存取</h2><p>在Javascript中，数据存储的位置会对代码整体性能产成重大影响。数据存储共有4中方式：字面量、变量、数组项、对象成员。它们有着各自的性能特点。</p>\n<ul>\n<li>访问字面量和局部变量的速度最快，相反，访问数组元素和对象成员相对较慢。</li>\n<li>由于局部变量存在于作用域链的起始位置，因此访问局部变量比访问跨作用域变量更快。变量在作用域中的位置越深，访问所需时间就越长。由于全局变量总处在作用域的最末端，因此访问速度时最慢的。</li>\n<li>避免使用with语句。</li>\n<li>嵌套的对象成员会明显影响性能，尽量少用。</li>\n<li>属性或方法在原型链中的位置越深，访问它的速度也越慢。</li>\n<li>通常来说，你可以通过把常用的对象成员、数组元素、跨域变量保存在局部变量中来改善Javascript性能，因为局部变量访问速度更快。</li>\n</ul>\n<h2 id=\"第三章-DOM编程\"><a href=\"#第三章-DOM编程\" class=\"headerlink\" title=\"第三章 DOM编程\"></a>第三章 DOM编程</h2><p>访问和操作DOM时现在Web应用的重要部分。但每次穿越链接ECMAScript和DOM都会有性能消耗，为了减少DOM编程带来的消耗，请记住以下几点：</p>\n<ul>\n<li>最小化DOM访问次数，尽可能在Javascript端处理。</li>\n<li>如果需要多次访问某个DOM节点，请使用局部变量存储它的引用。</li>\n<li>小心处理HTML集合，把集合的长度缓存到一个变量中，并在迭代中使用它。如果需要经常操作集合，建议把它靠背到一个数组中。</li>\n<li>如果可能的话，使用速度更快的API，比如querySelecetAll()和firstElementChild。</li>\n<li>要留意重排和重绘，批量修改样式时，离线操作DOM树，使用缓存，并减少布局信息的次数。</li>\n<li>动画中使用绝对定位，使用拖放代理。</li>\n<li>使用事件委托来减少事件处理器的数量。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"第一章-加载和执行\"><a href=\"#第一章-加载和执行\" class=\"headerlink\" title=\"第一章 加载和执行\"></a>第一章 加载和执行</h2><h3 id=\"减少Javascript加载对性能的影响\"><a href=\"#减少Javascript加载对性能的影响\" class=\"headerlink\" title=\"减少Javascript加载对性能的影响\"></a>减少Javascript加载对性能的影响</h3><ul>\n<li>&lt;/body&gt;闭合标签之前，将所有&lt;javascript&gt;标签放到页面底部。这能确保在脚本执行前页面已经完成了渲染</li>\n<li>合并脚本，减少&lt;javascript&gt;标签</li>\n<li>使用&lt;javascript&gt;标签的defer属性<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'file1.js'</span> defer&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<ul>\n<li><p>利用动态创建的&lt;javascript&gt;元素来下载并执行代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElemnet(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">script.type = <span class=\"string\">'text/javascript'</span>;</span><br><span class=\"line\">script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'Script loaded!'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">script.src = <span class=\"string\">'file1.js'</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(script);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用XHR对象下载Javascript代码并注入页面中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">xhr.open(<span class=\"string\">'get'</span>, <span class=\"string\">'file1.js'</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xhr.readyState == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span> || xhr.status === <span class=\"number\">304</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElemnet(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">            script.type = <span class=\"string\">'text/javascript'</span>;</span><br><span class=\"line\">            script.text = xhr.responseText;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.body.appendChild(script);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"几种类库加载js的方式\"><a href=\"#几种类库加载js的方式\" class=\"headerlink\" title=\"几种类库加载js的方式\"></a>几种类库加载js的方式</h3><ul>\n<li><p>YUI3</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'http://yui.yahooapis.com/combo?3.0.0/build/yui/yui-min.js'</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt;</span><br><span class=\"line\">    YUI().use(<span class=\"string\">'dom'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Y</span>) </span>&#123;</span><br><span class=\"line\">        Y.DOM.addClass(<span class=\"built_in\">document</span>.body, <span class=\"string\">'loaded'</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>LazyLoad</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'lazyload-min.js'</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt;</span><br><span class=\"line\">    LazyLoad.js(<span class=\"string\">'the-rest.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        Applicationn.init();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>LABjs</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'lab.js'</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt; </span><br><span class=\"line\">    $LAB.script(<span class=\"string\">'first-file.js'</span>)</span><br><span class=\"line\">        .wait()</span><br><span class=\"line\">        .script(<span class=\"string\">'the-rest.js'</span>)</span><br><span class=\"line\">        .wait(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            Applicationn.init();</span><br><span class=\"line\">        &#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"第二章-数据存取\"><a href=\"#第二章-数据存取\" class=\"headerlink\" title=\"第二章 数据存取\"></a>第二章 数据存取</h2><p>在Javascript中，数据存储的位置会对代码整体性能产成重大影响。数据存储共有4中方式：字面量、变量、数组项、对象成员。它们有着各自的性能特点。</p>\n<ul>\n<li>访问字面量和局部变量的速度最快，相反，访问数组元素和对象成员相对较慢。</li>\n<li>由于局部变量存在于作用域链的起始位置，因此访问局部变量比访问跨作用域变量更快。变量在作用域中的位置越深，访问所需时间就越长。由于全局变量总处在作用域的最末端，因此访问速度时最慢的。</li>\n<li>避免使用with语句。</li>\n<li>嵌套的对象成员会明显影响性能，尽量少用。</li>\n<li>属性或方法在原型链中的位置越深，访问它的速度也越慢。</li>\n<li>通常来说，你可以通过把常用的对象成员、数组元素、跨域变量保存在局部变量中来改善Javascript性能，因为局部变量访问速度更快。</li>\n</ul>\n<h2 id=\"第三章-DOM编程\"><a href=\"#第三章-DOM编程\" class=\"headerlink\" title=\"第三章 DOM编程\"></a>第三章 DOM编程</h2><p>访问和操作DOM时现在Web应用的重要部分。但每次穿越链接ECMAScript和DOM都会有性能消耗，为了减少DOM编程带来的消耗，请记住以下几点：</p>\n<ul>\n<li>最小化DOM访问次数，尽可能在Javascript端处理。</li>\n<li>如果需要多次访问某个DOM节点，请使用局部变量存储它的引用。</li>\n<li>小心处理HTML集合，把集合的长度缓存到一个变量中，并在迭代中使用它。如果需要经常操作集合，建议把它靠背到一个数组中。</li>\n<li>如果可能的话，使用速度更快的API，比如querySelecetAll()和firstElementChild。</li>\n<li>要留意重排和重绘，批量修改样式时，离线操作DOM树，使用缓存，并减少布局信息的次数。</li>\n<li>动画中使用绝对定位，使用拖放代理。</li>\n<li>使用事件委托来减少事件处理器的数量。</li>\n</ul>"},{"title":"我女儿会爬了","date":"2019-04-18T08:59:33.000Z","_content":"\n今天上着班，我妈发来一段微信视频，我女儿终于会爬了，不是四肢撑地，而是手脚前后舞动，在地上缓缓蠕动。虽然慢如蜗牛，但较以前只会趴着往后退或者转身，已经属于大进步。作为老父亲，看到这一幕，脸上也露出了慈祥的笑容。俗话说七坐八爬，小女八个多月，也没落入下风，很是争气。\n\n这两天写码都是写到两三点，碰到问题，一度郁闷到发慌，以为自己头脑要爆炸，强制自己合上笔记本，拿起手机，来两局王者荣耀，然后上油管看视频找思路，果然豁然开朗，神清气爽。所以说，累的时候，歇一会儿再出发，也是不错的选择哩。","source":"_posts/angel-go-go-go.md","raw":"---\ntitle: 我女儿会爬了\ndate: 2019-04-18 16:59:33\ntags: [家庭]\n---\n\n今天上着班，我妈发来一段微信视频，我女儿终于会爬了，不是四肢撑地，而是手脚前后舞动，在地上缓缓蠕动。虽然慢如蜗牛，但较以前只会趴着往后退或者转身，已经属于大进步。作为老父亲，看到这一幕，脸上也露出了慈祥的笑容。俗话说七坐八爬，小女八个多月，也没落入下风，很是争气。\n\n这两天写码都是写到两三点，碰到问题，一度郁闷到发慌，以为自己头脑要爆炸，强制自己合上笔记本，拿起手机，来两局王者荣耀，然后上油管看视频找思路，果然豁然开朗，神清气爽。所以说，累的时候，歇一会儿再出发，也是不错的选择哩。","slug":"angel-go-go-go","published":1,"updated":"2019-06-21T10:44:48.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aand80004biui4lsg9rqi","content":"<p>今天上着班，我妈发来一段微信视频，我女儿终于会爬了，不是四肢撑地，而是手脚前后舞动，在地上缓缓蠕动。虽然慢如蜗牛，但较以前只会趴着往后退或者转身，已经属于大进步。作为老父亲，看到这一幕，脸上也露出了慈祥的笑容。俗话说七坐八爬，小女八个多月，也没落入下风，很是争气。</p>\n<p>这两天写码都是写到两三点，碰到问题，一度郁闷到发慌，以为自己头脑要爆炸，强制自己合上笔记本，拿起手机，来两局王者荣耀，然后上油管看视频找思路，果然豁然开朗，神清气爽。所以说，累的时候，歇一会儿再出发，也是不错的选择哩。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天上着班，我妈发来一段微信视频，我女儿终于会爬了，不是四肢撑地，而是手脚前后舞动，在地上缓缓蠕动。虽然慢如蜗牛，但较以前只会趴着往后退或者转身，已经属于大进步。作为老父亲，看到这一幕，脸上也露出了慈祥的笑容。俗话说七坐八爬，小女八个多月，也没落入下风，很是争气。</p>\n<p>这两天写码都是写到两三点，碰到问题，一度郁闷到发慌，以为自己头脑要爆炸，强制自己合上笔记本，拿起手机，来两局王者荣耀，然后上油管看视频找思路，果然豁然开朗，神清气爽。所以说，累的时候，歇一会儿再出发，也是不错的选择哩。</p>\n"},{"title":"android studio编译错误: *** 目标模式不含有“%”。 停止。","date":"2016-11-05T10:04:19.000Z","_content":"\nAndroid Studio NDK编译出现如下错误：\n*** target pattern contains no `%'. Stop\n中文：\n*** 目标模式不含有“%”。 停止。\n可能是obj目录的问题，需要删掉。\n在工程目录下find所有的obj目录\n```bash\nfind . -name obj\n```","source":"_posts/android-studio编译错误-目标模式不含有“-”。-停止。.md","raw":"---\ntitle: 'android studio编译错误: *** 目标模式不含有“%”。 停止。'\ndate: 2016-11-5 18:04:19\ntags: [android studio, android]\n---\n\nAndroid Studio NDK编译出现如下错误：\n*** target pattern contains no `%'. Stop\n中文：\n*** 目标模式不含有“%”。 停止。\n可能是obj目录的问题，需要删掉。\n在工程目录下find所有的obj目录\n```bash\nfind . -name obj\n```","slug":"android-studio编译错误-目标模式不含有“-”。-停止。","published":1,"updated":"2019-01-03T02:48:56.348Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aand90005biui92ktj187","content":"<p>Android Studio NDK编译出现如下错误：<br><strong><em> target pattern contains no `%’. Stop<br>中文：\n</em></strong> 目标模式不含有“%”。 停止。<br>可能是obj目录的问题，需要删掉。<br>在工程目录下find所有的obj目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -name obj</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Android Studio NDK编译出现如下错误：<br><strong><em> target pattern contains no `%’. Stop<br>中文：\n</em></strong> 目标模式不含有“%”。 停止。<br>可能是obj目录的问题，需要删掉。<br>在工程目录下find所有的obj目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -name obj</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Android 5.0中的布局文件onClick回调报错","date":"2018-03-29T12:16:55.000Z","_content":"\n监听控件的onClick事件有两种方法：\n- 方法1\n调用控件的setOnClickListener设置监听回调。\n\n```java\n    Button button = (Button) findViewById(R.id.button);\n    button.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n        }\n    });\n```\n\n<!--more-->\n\n- 方法2\n将回调方法名赋值给布局文件中的onClick属性，然后在Activity中实现该方法。\n\n```xml\n    <Button\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Button\"\n        android:onClick=\"onClickButton\"/>\n```\n\n```java\n    public void onClickButton(View view) {\n    }\n```\n\n但是方法2在5.0上有个坑，如果当前控件的layout的中xml中写了theme属性，那么就会报找不到该方法的错误。\n如\n```xml\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"200dp\"\n        android:background=\"@color/colorPrimary\"\n        android:onClick=\"onClickButton\"\n        android:theme=\"@style/AppTheme.MenuDefaultItem\">\n        <TextView\n            android:text=\"text\"\n            android:layout_width=\"100dp\"\n            android:layout_height=\"100dp\" />\n    </LinearLayout>\n```\n这是一个LinearLayout嵌套一个TextView，将onClick回调写在LinearLayout里，然后加上一个theme属性，这时点击LinearLayout就会报错。\n```\n03-30 08:48:24.060 29147-29147/trendit.com.posusageintro E/AndroidRuntime: FATAL EXCEPTION: main\n                                                                           Process: trendit.com.posusageintro, PID: 29147\n                                                                           java.lang.IllegalStateException: Could not find a method onClickButton(View) in the activity class android.view.ContextThemeWrapper for onClick handler on view class android.widget.LinearLayout\n                                                                               at android.view.View$1.onClick(View.java:4008)\n                                                                               at android.view.View.performClick(View.java:4781)\n                                                                               at android.view.View$PerformClick.run(View.java:19874)\n                                                                               at android.os.Handler.handleCallback(Handler.java:739)\n                                                                               at android.os.Handler.dispatchMessage(Handler.java:95)\n                                                                               at android.os.Looper.loop(Looper.java:135)\n                                                                               at android.app.ActivityThread.main(ActivityThread.java:5254)\n                                                                               at java.lang.reflect.Method.invoke(Native Method)\n                                                                               at java.lang.reflect.Method.invoke(Method.java:372)\n                                                                               at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:902)\n                                                                               at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:697)\n                                                                            Caused by: java.lang.NoSuchMethodException: onClickButton [class android.view.View]\n                                                                               at java.lang.Class.getMethod(Class.java:664)\n                                                                               at java.lang.Class.getMethod(Class.java:643)\n                                                                               at android.view.View$1.onClick(View.java:4001)\n                                                                               at android.view.View.performClick(View.java:4781) \n                                                                               at android.view.View$PerformClick.run(View.java:19874) \n                                                                               at android.os.Handler.handleCallback(Handler.java:739) \n                                                                               at android.os.Handler.dispatchMessage(Handler.java:95) \n                                                                               at android.os.Looper.loop(Looper.java:135) \n                                                                               at android.app.ActivityThread.main(ActivityThread.java:5254) \n                                                                               at java.lang.reflect.Method.invoke(Native Method) \n                                                                               at java.lang.reflect.Method.invoke(Method.java:372) \n                                                                               at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:902) \n                                                                               at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:697) \n                                                                               \n```\n\n[StackOverflow](https://stackoverflow.com/questions/27531381/android-5-and-onclick-in-xml-layout/28345359#28345359)上有一段解释，在Android 5.0上的layout布局上，如果应用android:theme属性，就会报这个错误。较老的版本不会有这个问题。解决方法就是要么使用上面的方法1，要么将android:theme应用到application上。\n```xml\n<application \n         ...\n         android:theme=\"@android:style/Theme.Holo.Light\"\n         ...  >\n\n```","source":"_posts/android-theme-onclick.md","raw":"---\ntitle: Android 5.0中的布局文件onClick回调报错\ndate: 2018-03-29 20:16:55\ntags: [android]\n---\n\n监听控件的onClick事件有两种方法：\n- 方法1\n调用控件的setOnClickListener设置监听回调。\n\n```java\n    Button button = (Button) findViewById(R.id.button);\n    button.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n        }\n    });\n```\n\n<!--more-->\n\n- 方法2\n将回调方法名赋值给布局文件中的onClick属性，然后在Activity中实现该方法。\n\n```xml\n    <Button\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Button\"\n        android:onClick=\"onClickButton\"/>\n```\n\n```java\n    public void onClickButton(View view) {\n    }\n```\n\n但是方法2在5.0上有个坑，如果当前控件的layout的中xml中写了theme属性，那么就会报找不到该方法的错误。\n如\n```xml\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"200dp\"\n        android:background=\"@color/colorPrimary\"\n        android:onClick=\"onClickButton\"\n        android:theme=\"@style/AppTheme.MenuDefaultItem\">\n        <TextView\n            android:text=\"text\"\n            android:layout_width=\"100dp\"\n            android:layout_height=\"100dp\" />\n    </LinearLayout>\n```\n这是一个LinearLayout嵌套一个TextView，将onClick回调写在LinearLayout里，然后加上一个theme属性，这时点击LinearLayout就会报错。\n```\n03-30 08:48:24.060 29147-29147/trendit.com.posusageintro E/AndroidRuntime: FATAL EXCEPTION: main\n                                                                           Process: trendit.com.posusageintro, PID: 29147\n                                                                           java.lang.IllegalStateException: Could not find a method onClickButton(View) in the activity class android.view.ContextThemeWrapper for onClick handler on view class android.widget.LinearLayout\n                                                                               at android.view.View$1.onClick(View.java:4008)\n                                                                               at android.view.View.performClick(View.java:4781)\n                                                                               at android.view.View$PerformClick.run(View.java:19874)\n                                                                               at android.os.Handler.handleCallback(Handler.java:739)\n                                                                               at android.os.Handler.dispatchMessage(Handler.java:95)\n                                                                               at android.os.Looper.loop(Looper.java:135)\n                                                                               at android.app.ActivityThread.main(ActivityThread.java:5254)\n                                                                               at java.lang.reflect.Method.invoke(Native Method)\n                                                                               at java.lang.reflect.Method.invoke(Method.java:372)\n                                                                               at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:902)\n                                                                               at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:697)\n                                                                            Caused by: java.lang.NoSuchMethodException: onClickButton [class android.view.View]\n                                                                               at java.lang.Class.getMethod(Class.java:664)\n                                                                               at java.lang.Class.getMethod(Class.java:643)\n                                                                               at android.view.View$1.onClick(View.java:4001)\n                                                                               at android.view.View.performClick(View.java:4781) \n                                                                               at android.view.View$PerformClick.run(View.java:19874) \n                                                                               at android.os.Handler.handleCallback(Handler.java:739) \n                                                                               at android.os.Handler.dispatchMessage(Handler.java:95) \n                                                                               at android.os.Looper.loop(Looper.java:135) \n                                                                               at android.app.ActivityThread.main(ActivityThread.java:5254) \n                                                                               at java.lang.reflect.Method.invoke(Native Method) \n                                                                               at java.lang.reflect.Method.invoke(Method.java:372) \n                                                                               at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:902) \n                                                                               at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:697) \n                                                                               \n```\n\n[StackOverflow](https://stackoverflow.com/questions/27531381/android-5-and-onclick-in-xml-layout/28345359#28345359)上有一段解释，在Android 5.0上的layout布局上，如果应用android:theme属性，就会报这个错误。较老的版本不会有这个问题。解决方法就是要么使用上面的方法1，要么将android:theme应用到application上。\n```xml\n<application \n         ...\n         android:theme=\"@android:style/Theme.Holo.Light\"\n         ...  >\n\n```","slug":"android-theme-onclick","published":1,"updated":"2019-01-03T02:48:56.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aanda0006biuintt75udl","content":"<p>监听控件的onClick事件有两种方法：</p>\n<ul>\n<li>方法1<br>调用控件的setOnClickListener设置监听回调。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Button button = (Button) findViewById(R.id.button);</span><br><span class=\"line\">button.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>方法2<br>将回调方法名赋值给布局文件中的onClick属性，然后在Activity中实现该方法。</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"Button\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:onClick</span>=<span class=\"string\">\"onClickButton\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClickButton</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是方法2在5.0上有个坑，如果当前控件的layout的中xml中写了theme属性，那么就会报找不到该方法的错误。<br>如<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"200dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/colorPrimary\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:onClick</span>=<span class=\"string\">\"onClickButton\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/AppTheme.MenuDefaultItem\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"text\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"100dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100dp\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这是一个LinearLayout嵌套一个TextView，将onClick回调写在LinearLayout里，然后加上一个theme属性，这时点击LinearLayout就会报错。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">03-30 08:48:24.060 29147-29147/trendit.com.posusageintro E/AndroidRuntime: FATAL EXCEPTION: main</span><br><span class=\"line\">                                                                           Process: trendit.com.posusageintro, PID: 29147</span><br><span class=\"line\">                                                                           java.lang.IllegalStateException: Could not find a method onClickButton(View) in the activity class android.view.ContextThemeWrapper for onClick handler on view class android.widget.LinearLayout</span><br><span class=\"line\">                                                                               at android.view.View$1.onClick(View.java:4008)</span><br><span class=\"line\">                                                                               at android.view.View.performClick(View.java:4781)</span><br><span class=\"line\">                                                                               at android.view.View$PerformClick.run(View.java:19874)</span><br><span class=\"line\">                                                                               at android.os.Handler.handleCallback(Handler.java:739)</span><br><span class=\"line\">                                                                               at android.os.Handler.dispatchMessage(Handler.java:95)</span><br><span class=\"line\">                                                                               at android.os.Looper.loop(Looper.java:135)</span><br><span class=\"line\">                                                                               at android.app.ActivityThread.main(ActivityThread.java:5254)</span><br><span class=\"line\">                                                                               at java.lang.reflect.Method.invoke(Native Method)</span><br><span class=\"line\">                                                                               at java.lang.reflect.Method.invoke(Method.java:372)</span><br><span class=\"line\">                                                                               at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:902)</span><br><span class=\"line\">                                                                               at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:697)</span><br><span class=\"line\">                                                                            Caused by: java.lang.NoSuchMethodException: onClickButton [class android.view.View]</span><br><span class=\"line\">                                                                               at java.lang.Class.getMethod(Class.java:664)</span><br><span class=\"line\">                                                                               at java.lang.Class.getMethod(Class.java:643)</span><br><span class=\"line\">                                                                               at android.view.View$1.onClick(View.java:4001)</span><br><span class=\"line\">                                                                               at android.view.View.performClick(View.java:4781) </span><br><span class=\"line\">                                                                               at android.view.View$PerformClick.run(View.java:19874) </span><br><span class=\"line\">                                                                               at android.os.Handler.handleCallback(Handler.java:739) </span><br><span class=\"line\">                                                                               at android.os.Handler.dispatchMessage(Handler.java:95) </span><br><span class=\"line\">                                                                               at android.os.Looper.loop(Looper.java:135) </span><br><span class=\"line\">                                                                               at android.app.ActivityThread.main(ActivityThread.java:5254) </span><br><span class=\"line\">                                                                               at java.lang.reflect.Method.invoke(Native Method) </span><br><span class=\"line\">                                                                               at java.lang.reflect.Method.invoke(Method.java:372) </span><br><span class=\"line\">                                                                               at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:902) </span><br><span class=\"line\">                                                                               at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:697)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://stackoverflow.com/questions/27531381/android-5-and-onclick-in-xml-layout/28345359#28345359\" target=\"_blank\" rel=\"noopener\">StackOverflow</a>上有一段解释，在Android 5.0上的layout布局上，如果应用android:theme属性，就会报这个错误。较老的版本不会有这个问题。解决方法就是要么使用上面的方法1，要么将android:theme应用到application上。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">application</span> </span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@android:style/Theme.Holo.Light\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">...</span>  &gt;</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>监听控件的onClick事件有两种方法：</p>\n<ul>\n<li>方法1<br>调用控件的setOnClickListener设置监听回调。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Button button = (Button) findViewById(R.id.button);</span><br><span class=\"line\">button.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","more":"<ul>\n<li>方法2<br>将回调方法名赋值给布局文件中的onClick属性，然后在Activity中实现该方法。</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"Button\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:onClick</span>=<span class=\"string\">\"onClickButton\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClickButton</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是方法2在5.0上有个坑，如果当前控件的layout的中xml中写了theme属性，那么就会报找不到该方法的错误。<br>如<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"200dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/colorPrimary\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:onClick</span>=<span class=\"string\">\"onClickButton\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/AppTheme.MenuDefaultItem\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"text\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"100dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100dp\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这是一个LinearLayout嵌套一个TextView，将onClick回调写在LinearLayout里，然后加上一个theme属性，这时点击LinearLayout就会报错。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">03-30 08:48:24.060 29147-29147/trendit.com.posusageintro E/AndroidRuntime: FATAL EXCEPTION: main</span><br><span class=\"line\">                                                                           Process: trendit.com.posusageintro, PID: 29147</span><br><span class=\"line\">                                                                           java.lang.IllegalStateException: Could not find a method onClickButton(View) in the activity class android.view.ContextThemeWrapper for onClick handler on view class android.widget.LinearLayout</span><br><span class=\"line\">                                                                               at android.view.View$1.onClick(View.java:4008)</span><br><span class=\"line\">                                                                               at android.view.View.performClick(View.java:4781)</span><br><span class=\"line\">                                                                               at android.view.View$PerformClick.run(View.java:19874)</span><br><span class=\"line\">                                                                               at android.os.Handler.handleCallback(Handler.java:739)</span><br><span class=\"line\">                                                                               at android.os.Handler.dispatchMessage(Handler.java:95)</span><br><span class=\"line\">                                                                               at android.os.Looper.loop(Looper.java:135)</span><br><span class=\"line\">                                                                               at android.app.ActivityThread.main(ActivityThread.java:5254)</span><br><span class=\"line\">                                                                               at java.lang.reflect.Method.invoke(Native Method)</span><br><span class=\"line\">                                                                               at java.lang.reflect.Method.invoke(Method.java:372)</span><br><span class=\"line\">                                                                               at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:902)</span><br><span class=\"line\">                                                                               at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:697)</span><br><span class=\"line\">                                                                            Caused by: java.lang.NoSuchMethodException: onClickButton [class android.view.View]</span><br><span class=\"line\">                                                                               at java.lang.Class.getMethod(Class.java:664)</span><br><span class=\"line\">                                                                               at java.lang.Class.getMethod(Class.java:643)</span><br><span class=\"line\">                                                                               at android.view.View$1.onClick(View.java:4001)</span><br><span class=\"line\">                                                                               at android.view.View.performClick(View.java:4781) </span><br><span class=\"line\">                                                                               at android.view.View$PerformClick.run(View.java:19874) </span><br><span class=\"line\">                                                                               at android.os.Handler.handleCallback(Handler.java:739) </span><br><span class=\"line\">                                                                               at android.os.Handler.dispatchMessage(Handler.java:95) </span><br><span class=\"line\">                                                                               at android.os.Looper.loop(Looper.java:135) </span><br><span class=\"line\">                                                                               at android.app.ActivityThread.main(ActivityThread.java:5254) </span><br><span class=\"line\">                                                                               at java.lang.reflect.Method.invoke(Native Method) </span><br><span class=\"line\">                                                                               at java.lang.reflect.Method.invoke(Method.java:372) </span><br><span class=\"line\">                                                                               at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:902) </span><br><span class=\"line\">                                                                               at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:697)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://stackoverflow.com/questions/27531381/android-5-and-onclick-in-xml-layout/28345359#28345359\" target=\"_blank\" rel=\"noopener\">StackOverflow</a>上有一段解释，在Android 5.0上的layout布局上，如果应用android:theme属性，就会报这个错误。较老的版本不会有这个问题。解决方法就是要么使用上面的方法1，要么将android:theme应用到application上。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">application</span> </span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@android:style/Theme.Holo.Light\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">...</span>  &gt;</span></span><br></pre></td></tr></table></figure></p>"},{"title":"AWS虚拟机实例ssh登录注意事项","date":"2019-06-19T09:29:19.000Z","_content":"\n在AWS上创建好实例时，会要求输入私钥对名称，AWS会让你将私钥下载下来，利用私钥登录，这样做的目的是省去口令登录。毕竟口令登录是不安全的。\n\n登录命令：\n```bash\nssh -v -i /path/my-key-pair.pem ec2-user@ec2-198-51-100-1.compute-1.amazonaws.com\n```\n但是会报错，\n```\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nPermissions 0644 for 'my-key-pair.pem' are too open.\nIt is required that your private key files are NOT accessible by others.\nThis private key will be ignored.\nLoad key \"my-key-pair.pem\": bad permissions\nec2-user@ec2-198-51-100-1.compute-1.amazonaws.com: Permission denied (publickey).\n```\n\n这里要求/path/my-key-pair.pem文件，必须是别的用户不能修改的，因此要改下权限。\n\n```bash\nchmod 0600 /path/my-key-pair.pem\n```\n\n改好之后，再次执行ssh登录，可能还是会报错\n```bash\nec2-user@ec2-198-51-100-1.compute-1.amazonaws.com: Permission denied (publickey).\n```\n\n这是因为ec2-user用户名错了，不同的系统实例，用户名是不一样的。\n\n- 对于 Amazon Linux AMI，用户名称是 ec2-user。\n- 对于 RHEL5 AMI，用户名称为 root 或 ec2-user。\n- 对于 Ubuntu AMI，用户名称是 ubuntu。\n- 对于 Fedora AMI，用户名称为 fedora 或 ec2-user。\n- 对于 SUSE Linux，用户名称是 root 或 ec2-user。\n- 另外，如果 ec2-user 和 root 无法使用，请与 AMI 供应商核实。\n\n我选的是ubuntu，所以应该是ubuntu。\n\n","source":"_posts/aws-guide.md","raw":"---\ntitle: AWS虚拟机实例ssh登录注意事项\ndate: 2019-06-19 17:29:19\ntags: [AWS, ssh]\n---\n\n在AWS上创建好实例时，会要求输入私钥对名称，AWS会让你将私钥下载下来，利用私钥登录，这样做的目的是省去口令登录。毕竟口令登录是不安全的。\n\n登录命令：\n```bash\nssh -v -i /path/my-key-pair.pem ec2-user@ec2-198-51-100-1.compute-1.amazonaws.com\n```\n但是会报错，\n```\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nPermissions 0644 for 'my-key-pair.pem' are too open.\nIt is required that your private key files are NOT accessible by others.\nThis private key will be ignored.\nLoad key \"my-key-pair.pem\": bad permissions\nec2-user@ec2-198-51-100-1.compute-1.amazonaws.com: Permission denied (publickey).\n```\n\n这里要求/path/my-key-pair.pem文件，必须是别的用户不能修改的，因此要改下权限。\n\n```bash\nchmod 0600 /path/my-key-pair.pem\n```\n\n改好之后，再次执行ssh登录，可能还是会报错\n```bash\nec2-user@ec2-198-51-100-1.compute-1.amazonaws.com: Permission denied (publickey).\n```\n\n这是因为ec2-user用户名错了，不同的系统实例，用户名是不一样的。\n\n- 对于 Amazon Linux AMI，用户名称是 ec2-user。\n- 对于 RHEL5 AMI，用户名称为 root 或 ec2-user。\n- 对于 Ubuntu AMI，用户名称是 ubuntu。\n- 对于 Fedora AMI，用户名称为 fedora 或 ec2-user。\n- 对于 SUSE Linux，用户名称是 root 或 ec2-user。\n- 另外，如果 ec2-user 和 root 无法使用，请与 AMI 供应商核实。\n\n我选的是ubuntu，所以应该是ubuntu。\n\n","slug":"aws-guide","published":1,"updated":"2019-06-19T10:18:13.421Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aandb0008biui127xulx5","content":"<p>在AWS上创建好实例时，会要求输入私钥对名称，AWS会让你将私钥下载下来，利用私钥登录，这样做的目的是省去口令登录。毕竟口令登录是不安全的。</p>\n<p>登录命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -v -i /path/my-key-pair.pem ec2-user@ec2-198-51-100-1.compute-1.amazonaws.com</span><br></pre></td></tr></table></figure></p>\n<p>但是会报错，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">Permissions 0644 for &apos;my-key-pair.pem&apos; are too open.</span><br><span class=\"line\">It is required that your private key files are NOT accessible by others.</span><br><span class=\"line\">This private key will be ignored.</span><br><span class=\"line\">Load key &quot;my-key-pair.pem&quot;: bad permissions</span><br><span class=\"line\">ec2-user@ec2-198-51-100-1.compute-1.amazonaws.com: Permission denied (publickey).</span><br></pre></td></tr></table></figure></p>\n<p>这里要求/path/my-key-pair.pem文件，必须是别的用户不能修改的，因此要改下权限。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 0600 /path/my-key-pair.pem</span><br></pre></td></tr></table></figure>\n<p>改好之后，再次执行ssh登录，可能还是会报错<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ec2-user@ec2-198-51-100-1.compute-1.amazonaws.com: Permission denied (publickey).</span><br></pre></td></tr></table></figure></p>\n<p>这是因为ec2-user用户名错了，不同的系统实例，用户名是不一样的。</p>\n<ul>\n<li>对于 Amazon Linux AMI，用户名称是 ec2-user。</li>\n<li>对于 RHEL5 AMI，用户名称为 root 或 ec2-user。</li>\n<li>对于 Ubuntu AMI，用户名称是 ubuntu。</li>\n<li>对于 Fedora AMI，用户名称为 fedora 或 ec2-user。</li>\n<li>对于 SUSE Linux，用户名称是 root 或 ec2-user。</li>\n<li>另外，如果 ec2-user 和 root 无法使用，请与 AMI 供应商核实。</li>\n</ul>\n<p>我选的是ubuntu，所以应该是ubuntu。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在AWS上创建好实例时，会要求输入私钥对名称，AWS会让你将私钥下载下来，利用私钥登录，这样做的目的是省去口令登录。毕竟口令登录是不安全的。</p>\n<p>登录命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -v -i /path/my-key-pair.pem ec2-user@ec2-198-51-100-1.compute-1.amazonaws.com</span><br></pre></td></tr></table></figure></p>\n<p>但是会报错，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">Permissions 0644 for &apos;my-key-pair.pem&apos; are too open.</span><br><span class=\"line\">It is required that your private key files are NOT accessible by others.</span><br><span class=\"line\">This private key will be ignored.</span><br><span class=\"line\">Load key &quot;my-key-pair.pem&quot;: bad permissions</span><br><span class=\"line\">ec2-user@ec2-198-51-100-1.compute-1.amazonaws.com: Permission denied (publickey).</span><br></pre></td></tr></table></figure></p>\n<p>这里要求/path/my-key-pair.pem文件，必须是别的用户不能修改的，因此要改下权限。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 0600 /path/my-key-pair.pem</span><br></pre></td></tr></table></figure>\n<p>改好之后，再次执行ssh登录，可能还是会报错<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ec2-user@ec2-198-51-100-1.compute-1.amazonaws.com: Permission denied (publickey).</span><br></pre></td></tr></table></figure></p>\n<p>这是因为ec2-user用户名错了，不同的系统实例，用户名是不一样的。</p>\n<ul>\n<li>对于 Amazon Linux AMI，用户名称是 ec2-user。</li>\n<li>对于 RHEL5 AMI，用户名称为 root 或 ec2-user。</li>\n<li>对于 Ubuntu AMI，用户名称是 ubuntu。</li>\n<li>对于 Fedora AMI，用户名称为 fedora 或 ec2-user。</li>\n<li>对于 SUSE Linux，用户名称是 root 或 ec2-user。</li>\n<li>另外，如果 ec2-user 和 root 无法使用，请与 AMI 供应商核实。</li>\n</ul>\n<p>我选的是ubuntu，所以应该是ubuntu。</p>\n"},{"title":"小蓝咖啡App分析","date":"2018-12-29T11:14:11.000Z","_content":"\n很久之前就知道小蓝咖啡，毕竟其广告已经覆盖到小区的每部电梯，最近试用了一下小蓝咖啡App，有一些理解和总结。本文仅对IOS平台的小蓝咖啡App进行分析，不论及咖啡质量、品牌定位、公司运作等。\n\nApp支持手机注册及微信登陆，最终会将手机号与微信号绑定，然后利用微信的好友关系进行用户裂变。\n\n<!--more-->\n\n### 主页介绍\n![主页](bluecoffee/1.jpeg)\n\n主页包含以下几个标签\n- 首页\n\n    - <b>图片Banner</b> 轮播优惠、品牌广告等信息。\n    - <b>当前所选实体店</b> 右侧有购买选项，包含自提和外送，点击前者会弹出实体店面列表，后者会让用户选择配送地址。\n    - <b>现在下单</b> 跳转到菜单标签。\n    - <b>咖啡钱包</b> 跳转到咖啡钱包菜单，后面介绍。\n    - <b>送他咖啡</b> 跳转到用户分享页面。\n    - <b>企业账户</b> 跳转到企业推广页面。\n\n- 菜单\n\n根据选择的店面，获取菜单列表，切换店面时，菜单会刷新。\n\n- 订单\n\n显示订单列表，包含未完成和已完成的订单。\n\n- 购物车\n\n显示已选购但未下单的产品。\n\n- 我的\n\n显示个人信息，包括地址管理，联系方式，及其等下会介绍的<b>咖啡钱包</b>\n\n### 咖啡钱包\n![咖啡钱包](2.jpeg)\n\n- 咖啡券\n这个页面展示已经钱包里有的咖啡券，咖啡券的来源大致有几个\n\n    - 充值购买 现在有一些优惠活动，比如说买二赠一，买五赠五之类。\n    - 分享新用户免费获得 这是一种很有诱惑力的用户裂变手段。\n    - 好友赠送 包括好友的咖啡红包，和好友直接转赠。\n\n- 我要请客\n\n点击我要请客，将咖啡券以红包形式转增给好友。\n![选择咖啡](bluecoffee/3.jpeg)![发送红包](bluecoffee/4.jpeg)![发送红包](bluecoffee/5.jpeg)\n用户点击后，可以看到领取详情。\n![发送红包](bluecoffee/6.jpeg)\n如果是新用户，这里绑定手机号，然后注册后就可以直接使用这张券了。\n\n- 发送红包\n与我要请客差不多，也是以红包形式转增也好友。\n\n### 给好友送咖啡\n\n![咖啡钱包](bluecoffee/7.jpeg)\n这个页面的url大致为: https://mkt.luckincoffee.com/wechat/author?appid=wxc7d10081104e0956&redirect_uri=https%3A%2F%2Fm.luckincoffee.com%2FwxauthorUseAPI&response_type=code&scope=snsapi_userinfo&state=3dd44586-1364-4193-8f78-13ed1b50a2d1#wechat_redirect\n\n可以看到有appid的参数，根据这个参数，获取该用户的获赠记录，点击微信图标分享的界面如下：\n![咖啡钱包](bluecoffee/8.jpeg)\n\n页面的url如下：\nhttps://m.luckincoffee.com/invited/register?type=zhangzhen&activityNo=NR201801030001&inviteCode=V0hwuT7I9Nnbyr3p5tjR7g%3D%3D&secondfrom=1&title=%E4%BB%8A%E5%A4%A9%E5%91%A8%E6%9C%AB%EF%BC%8C%E8%AF%B7%E4%BD%A0%E5%96%9D%E6%9D%AF%E5%85%8D%E8%B4%B9%E5%A4%A7%E5%B8%88%E5%92%96%E5%95%A1%EF%BC%8C%E5%92%96%E5%95%A1%E5%92%8C%E8%BF%90%E5%8A%A8%E5%BE%88%E9%85%8D%E5%93%A6&timestamp=1546085863328&from=singlemessage&isappinstalled=0\n\n可以看到，url里面有一个唯一邀请码，表示属于该用户分享出来的，这样新用户注册以后就可以该用户账户下增加一张咖啡券了。\n\n\n不得不说，小蓝咖啡利用微信进行用户裂变的方式上做的非常到位，很大的刺激了用户的分享欲望，反正我周围的羊毛党都被我安利了一遍，：）\n\n","source":"_posts/bluecoffee.md","raw":"---\ntitle: 小蓝咖啡App分析\ndate: 2018-12-29 19:14:11\ntags: [小蓝咖啡]\ncategories: 互联网产品分析\n---\n\n很久之前就知道小蓝咖啡，毕竟其广告已经覆盖到小区的每部电梯，最近试用了一下小蓝咖啡App，有一些理解和总结。本文仅对IOS平台的小蓝咖啡App进行分析，不论及咖啡质量、品牌定位、公司运作等。\n\nApp支持手机注册及微信登陆，最终会将手机号与微信号绑定，然后利用微信的好友关系进行用户裂变。\n\n<!--more-->\n\n### 主页介绍\n![主页](bluecoffee/1.jpeg)\n\n主页包含以下几个标签\n- 首页\n\n    - <b>图片Banner</b> 轮播优惠、品牌广告等信息。\n    - <b>当前所选实体店</b> 右侧有购买选项，包含自提和外送，点击前者会弹出实体店面列表，后者会让用户选择配送地址。\n    - <b>现在下单</b> 跳转到菜单标签。\n    - <b>咖啡钱包</b> 跳转到咖啡钱包菜单，后面介绍。\n    - <b>送他咖啡</b> 跳转到用户分享页面。\n    - <b>企业账户</b> 跳转到企业推广页面。\n\n- 菜单\n\n根据选择的店面，获取菜单列表，切换店面时，菜单会刷新。\n\n- 订单\n\n显示订单列表，包含未完成和已完成的订单。\n\n- 购物车\n\n显示已选购但未下单的产品。\n\n- 我的\n\n显示个人信息，包括地址管理，联系方式，及其等下会介绍的<b>咖啡钱包</b>\n\n### 咖啡钱包\n![咖啡钱包](2.jpeg)\n\n- 咖啡券\n这个页面展示已经钱包里有的咖啡券，咖啡券的来源大致有几个\n\n    - 充值购买 现在有一些优惠活动，比如说买二赠一，买五赠五之类。\n    - 分享新用户免费获得 这是一种很有诱惑力的用户裂变手段。\n    - 好友赠送 包括好友的咖啡红包，和好友直接转赠。\n\n- 我要请客\n\n点击我要请客，将咖啡券以红包形式转增给好友。\n![选择咖啡](bluecoffee/3.jpeg)![发送红包](bluecoffee/4.jpeg)![发送红包](bluecoffee/5.jpeg)\n用户点击后，可以看到领取详情。\n![发送红包](bluecoffee/6.jpeg)\n如果是新用户，这里绑定手机号，然后注册后就可以直接使用这张券了。\n\n- 发送红包\n与我要请客差不多，也是以红包形式转增也好友。\n\n### 给好友送咖啡\n\n![咖啡钱包](bluecoffee/7.jpeg)\n这个页面的url大致为: https://mkt.luckincoffee.com/wechat/author?appid=wxc7d10081104e0956&redirect_uri=https%3A%2F%2Fm.luckincoffee.com%2FwxauthorUseAPI&response_type=code&scope=snsapi_userinfo&state=3dd44586-1364-4193-8f78-13ed1b50a2d1#wechat_redirect\n\n可以看到有appid的参数，根据这个参数，获取该用户的获赠记录，点击微信图标分享的界面如下：\n![咖啡钱包](bluecoffee/8.jpeg)\n\n页面的url如下：\nhttps://m.luckincoffee.com/invited/register?type=zhangzhen&activityNo=NR201801030001&inviteCode=V0hwuT7I9Nnbyr3p5tjR7g%3D%3D&secondfrom=1&title=%E4%BB%8A%E5%A4%A9%E5%91%A8%E6%9C%AB%EF%BC%8C%E8%AF%B7%E4%BD%A0%E5%96%9D%E6%9D%AF%E5%85%8D%E8%B4%B9%E5%A4%A7%E5%B8%88%E5%92%96%E5%95%A1%EF%BC%8C%E5%92%96%E5%95%A1%E5%92%8C%E8%BF%90%E5%8A%A8%E5%BE%88%E9%85%8D%E5%93%A6&timestamp=1546085863328&from=singlemessage&isappinstalled=0\n\n可以看到，url里面有一个唯一邀请码，表示属于该用户分享出来的，这样新用户注册以后就可以该用户账户下增加一张咖啡券了。\n\n\n不得不说，小蓝咖啡利用微信进行用户裂变的方式上做的非常到位，很大的刺激了用户的分享欲望，反正我周围的羊毛党都被我安利了一遍，：）\n\n","slug":"bluecoffee","published":1,"updated":"2019-01-03T02:48:56.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aandd0009biui657dl3ok","content":"<p>很久之前就知道小蓝咖啡，毕竟其广告已经覆盖到小区的每部电梯，最近试用了一下小蓝咖啡App，有一些理解和总结。本文仅对IOS平台的小蓝咖啡App进行分析，不论及咖啡质量、品牌定位、公司运作等。</p>\n<p>App支持手机注册及微信登陆，最终会将手机号与微信号绑定，然后利用微信的好友关系进行用户裂变。</p>\n<a id=\"more\"></a>\n<h3 id=\"主页介绍\"><a href=\"#主页介绍\" class=\"headerlink\" title=\"主页介绍\"></a>主页介绍</h3><p><img src=\"/2018/12/29/bluecoffee/1.jpeg\" alt=\"主页\"></p>\n<p>主页包含以下几个标签</p>\n<ul>\n<li><p>首页</p>\n<ul>\n<li><b>图片Banner</b> 轮播优惠、品牌广告等信息。</li>\n<li><b>当前所选实体店</b> 右侧有购买选项，包含自提和外送，点击前者会弹出实体店面列表，后者会让用户选择配送地址。</li>\n<li><b>现在下单</b> 跳转到菜单标签。</li>\n<li><b>咖啡钱包</b> 跳转到咖啡钱包菜单，后面介绍。</li>\n<li><b>送他咖啡</b> 跳转到用户分享页面。</li>\n<li><b>企业账户</b> 跳转到企业推广页面。</li>\n</ul>\n</li>\n<li><p>菜单</p>\n</li>\n</ul>\n<p>根据选择的店面，获取菜单列表，切换店面时，菜单会刷新。</p>\n<ul>\n<li>订单</li>\n</ul>\n<p>显示订单列表，包含未完成和已完成的订单。</p>\n<ul>\n<li>购物车</li>\n</ul>\n<p>显示已选购但未下单的产品。</p>\n<ul>\n<li>我的</li>\n</ul>\n<p>显示个人信息，包括地址管理，联系方式，及其等下会介绍的<b>咖啡钱包</b></p>\n<h3 id=\"咖啡钱包\"><a href=\"#咖啡钱包\" class=\"headerlink\" title=\"咖啡钱包\"></a>咖啡钱包</h3><p><img src=\"/2018/12/29/bluecoffee/2.jpeg\" alt=\"咖啡钱包\"></p>\n<ul>\n<li><p>咖啡券<br>这个页面展示已经钱包里有的咖啡券，咖啡券的来源大致有几个</p>\n<ul>\n<li>充值购买 现在有一些优惠活动，比如说买二赠一，买五赠五之类。</li>\n<li>分享新用户免费获得 这是一种很有诱惑力的用户裂变手段。</li>\n<li>好友赠送 包括好友的咖啡红包，和好友直接转赠。</li>\n</ul>\n</li>\n<li><p>我要请客</p>\n</li>\n</ul>\n<p>点击我要请客，将咖啡券以红包形式转增给好友。<br><img src=\"/2018/12/29/bluecoffee/3.jpeg\" alt=\"选择咖啡\"><img src=\"/2018/12/29/bluecoffee/4.jpeg\" alt=\"发送红包\"><img src=\"/2018/12/29/bluecoffee/5.jpeg\" alt=\"发送红包\"><br>用户点击后，可以看到领取详情。<br><img src=\"/2018/12/29/bluecoffee/6.jpeg\" alt=\"发送红包\"><br>如果是新用户，这里绑定手机号，然后注册后就可以直接使用这张券了。</p>\n<ul>\n<li>发送红包<br>与我要请客差不多，也是以红包形式转增也好友。</li>\n</ul>\n<h3 id=\"给好友送咖啡\"><a href=\"#给好友送咖啡\" class=\"headerlink\" title=\"给好友送咖啡\"></a>给好友送咖啡</h3><p><img src=\"/2018/12/29/bluecoffee/7.jpeg\" alt=\"咖啡钱包\"><br>这个页面的url大致为: <a href=\"https://mkt.luckincoffee.com/wechat/author?appid=wxc7d10081104e0956&amp;redirect_uri=https%3A%2F%2Fm.luckincoffee.com%2FwxauthorUseAPI&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=3dd44586-1364-4193-8f78-13ed1b50a2d1#wechat_redirect\" target=\"_blank\" rel=\"noopener\">https://mkt.luckincoffee.com/wechat/author?appid=wxc7d10081104e0956&amp;redirect_uri=https%3A%2F%2Fm.luckincoffee.com%2FwxauthorUseAPI&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=3dd44586-1364-4193-8f78-13ed1b50a2d1#wechat_redirect</a></p>\n<p>可以看到有appid的参数，根据这个参数，获取该用户的获赠记录，点击微信图标分享的界面如下：<br><img src=\"/2018/12/29/bluecoffee/8.jpeg\" alt=\"咖啡钱包\"></p>\n<p>页面的url如下：<br><a href=\"https://m.luckincoffee.com/invited/register?type=zhangzhen&amp;activityNo=NR201801030001&amp;inviteCode=V0hwuT7I9Nnbyr3p5tjR7g%3D%3D&amp;secondfrom=1&amp;title=%E4%BB%8A%E5%A4%A9%E5%91%A8%E6%9C%AB%EF%BC%8C%E8%AF%B7%E4%BD%A0%E5%96%9D%E6%9D%AF%E5%85%8D%E8%B4%B9%E5%A4%A7%E5%B8%88%E5%92%96%E5%95%A1%EF%BC%8C%E5%92%96%E5%95%A1%E5%92%8C%E8%BF%90%E5%8A%A8%E5%BE%88%E9%85%8D%E5%93%A6&amp;timestamp=1546085863328&amp;from=singlemessage&amp;isappinstalled=0\" target=\"_blank\" rel=\"noopener\">https://m.luckincoffee.com/invited/register?type=zhangzhen&amp;activityNo=NR201801030001&amp;inviteCode=V0hwuT7I9Nnbyr3p5tjR7g%3D%3D&amp;secondfrom=1&amp;title=%E4%BB%8A%E5%A4%A9%E5%91%A8%E6%9C%AB%EF%BC%8C%E8%AF%B7%E4%BD%A0%E5%96%9D%E6%9D%AF%E5%85%8D%E8%B4%B9%E5%A4%A7%E5%B8%88%E5%92%96%E5%95%A1%EF%BC%8C%E5%92%96%E5%95%A1%E5%92%8C%E8%BF%90%E5%8A%A8%E5%BE%88%E9%85%8D%E5%93%A6&amp;timestamp=1546085863328&amp;from=singlemessage&amp;isappinstalled=0</a></p>\n<p>可以看到，url里面有一个唯一邀请码，表示属于该用户分享出来的，这样新用户注册以后就可以该用户账户下增加一张咖啡券了。</p>\n<p>不得不说，小蓝咖啡利用微信进行用户裂变的方式上做的非常到位，很大的刺激了用户的分享欲望，反正我周围的羊毛党都被我安利了一遍，：）</p>\n","site":{"data":{}},"excerpt":"<p>很久之前就知道小蓝咖啡，毕竟其广告已经覆盖到小区的每部电梯，最近试用了一下小蓝咖啡App，有一些理解和总结。本文仅对IOS平台的小蓝咖啡App进行分析，不论及咖啡质量、品牌定位、公司运作等。</p>\n<p>App支持手机注册及微信登陆，最终会将手机号与微信号绑定，然后利用微信的好友关系进行用户裂变。</p>","more":"<h3 id=\"主页介绍\"><a href=\"#主页介绍\" class=\"headerlink\" title=\"主页介绍\"></a>主页介绍</h3><p><img src=\"/2018/12/29/bluecoffee/1.jpeg\" alt=\"主页\"></p>\n<p>主页包含以下几个标签</p>\n<ul>\n<li><p>首页</p>\n<ul>\n<li><b>图片Banner</b> 轮播优惠、品牌广告等信息。</li>\n<li><b>当前所选实体店</b> 右侧有购买选项，包含自提和外送，点击前者会弹出实体店面列表，后者会让用户选择配送地址。</li>\n<li><b>现在下单</b> 跳转到菜单标签。</li>\n<li><b>咖啡钱包</b> 跳转到咖啡钱包菜单，后面介绍。</li>\n<li><b>送他咖啡</b> 跳转到用户分享页面。</li>\n<li><b>企业账户</b> 跳转到企业推广页面。</li>\n</ul>\n</li>\n<li><p>菜单</p>\n</li>\n</ul>\n<p>根据选择的店面，获取菜单列表，切换店面时，菜单会刷新。</p>\n<ul>\n<li>订单</li>\n</ul>\n<p>显示订单列表，包含未完成和已完成的订单。</p>\n<ul>\n<li>购物车</li>\n</ul>\n<p>显示已选购但未下单的产品。</p>\n<ul>\n<li>我的</li>\n</ul>\n<p>显示个人信息，包括地址管理，联系方式，及其等下会介绍的<b>咖啡钱包</b></p>\n<h3 id=\"咖啡钱包\"><a href=\"#咖啡钱包\" class=\"headerlink\" title=\"咖啡钱包\"></a>咖啡钱包</h3><p><img src=\"/2018/12/29/bluecoffee/2.jpeg\" alt=\"咖啡钱包\"></p>\n<ul>\n<li><p>咖啡券<br>这个页面展示已经钱包里有的咖啡券，咖啡券的来源大致有几个</p>\n<ul>\n<li>充值购买 现在有一些优惠活动，比如说买二赠一，买五赠五之类。</li>\n<li>分享新用户免费获得 这是一种很有诱惑力的用户裂变手段。</li>\n<li>好友赠送 包括好友的咖啡红包，和好友直接转赠。</li>\n</ul>\n</li>\n<li><p>我要请客</p>\n</li>\n</ul>\n<p>点击我要请客，将咖啡券以红包形式转增给好友。<br><img src=\"/2018/12/29/bluecoffee/3.jpeg\" alt=\"选择咖啡\"><img src=\"/2018/12/29/bluecoffee/4.jpeg\" alt=\"发送红包\"><img src=\"/2018/12/29/bluecoffee/5.jpeg\" alt=\"发送红包\"><br>用户点击后，可以看到领取详情。<br><img src=\"/2018/12/29/bluecoffee/6.jpeg\" alt=\"发送红包\"><br>如果是新用户，这里绑定手机号，然后注册后就可以直接使用这张券了。</p>\n<ul>\n<li>发送红包<br>与我要请客差不多，也是以红包形式转增也好友。</li>\n</ul>\n<h3 id=\"给好友送咖啡\"><a href=\"#给好友送咖啡\" class=\"headerlink\" title=\"给好友送咖啡\"></a>给好友送咖啡</h3><p><img src=\"/2018/12/29/bluecoffee/7.jpeg\" alt=\"咖啡钱包\"><br>这个页面的url大致为: <a href=\"https://mkt.luckincoffee.com/wechat/author?appid=wxc7d10081104e0956&amp;redirect_uri=https%3A%2F%2Fm.luckincoffee.com%2FwxauthorUseAPI&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=3dd44586-1364-4193-8f78-13ed1b50a2d1#wechat_redirect\" target=\"_blank\" rel=\"noopener\">https://mkt.luckincoffee.com/wechat/author?appid=wxc7d10081104e0956&amp;redirect_uri=https%3A%2F%2Fm.luckincoffee.com%2FwxauthorUseAPI&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=3dd44586-1364-4193-8f78-13ed1b50a2d1#wechat_redirect</a></p>\n<p>可以看到有appid的参数，根据这个参数，获取该用户的获赠记录，点击微信图标分享的界面如下：<br><img src=\"/2018/12/29/bluecoffee/8.jpeg\" alt=\"咖啡钱包\"></p>\n<p>页面的url如下：<br><a href=\"https://m.luckincoffee.com/invited/register?type=zhangzhen&amp;activityNo=NR201801030001&amp;inviteCode=V0hwuT7I9Nnbyr3p5tjR7g%3D%3D&amp;secondfrom=1&amp;title=%E4%BB%8A%E5%A4%A9%E5%91%A8%E6%9C%AB%EF%BC%8C%E8%AF%B7%E4%BD%A0%E5%96%9D%E6%9D%AF%E5%85%8D%E8%B4%B9%E5%A4%A7%E5%B8%88%E5%92%96%E5%95%A1%EF%BC%8C%E5%92%96%E5%95%A1%E5%92%8C%E8%BF%90%E5%8A%A8%E5%BE%88%E9%85%8D%E5%93%A6&amp;timestamp=1546085863328&amp;from=singlemessage&amp;isappinstalled=0\" target=\"_blank\" rel=\"noopener\">https://m.luckincoffee.com/invited/register?type=zhangzhen&amp;activityNo=NR201801030001&amp;inviteCode=V0hwuT7I9Nnbyr3p5tjR7g%3D%3D&amp;secondfrom=1&amp;title=%E4%BB%8A%E5%A4%A9%E5%91%A8%E6%9C%AB%EF%BC%8C%E8%AF%B7%E4%BD%A0%E5%96%9D%E6%9D%AF%E5%85%8D%E8%B4%B9%E5%A4%A7%E5%B8%88%E5%92%96%E5%95%A1%EF%BC%8C%E5%92%96%E5%95%A1%E5%92%8C%E8%BF%90%E5%8A%A8%E5%BE%88%E9%85%8D%E5%93%A6&amp;timestamp=1546085863328&amp;from=singlemessage&amp;isappinstalled=0</a></p>\n<p>可以看到，url里面有一个唯一邀请码，表示属于该用户分享出来的，这样新用户注册以后就可以该用户账户下增加一张咖啡券了。</p>\n<p>不得不说，小蓝咖啡利用微信进行用户裂变的方式上做的非常到位，很大的刺激了用户的分享欲望，反正我周围的羊毛党都被我安利了一遍，：）</p>"},{"title":"锋利的jQeury 第三章-笔记","date":"2016-09-03T10:04:19.000Z","_content":"\n## 第三章 jQuery中的DOM操作\n - 查找`DOM`节点\n\n    ```javascript\n    var $li = $('ul li:eq(1)'); //获取<ul>里的第二个<li>节点\n    ```\n\n<!--more-->\n\n - 查找属性节点\n\n    ```javascript\n    var $para = $('p'); \n    var p_txt = $para.attr('title');\n    ```\n<!--more-->\n\n - 创建元素节点\n\n    ```javascript\n    var $li = $('<li></li>');\n    ```\n\n - 创建文本节点\n\n    ```javascript\n    var $li = $('<li>香蕉</li>');\n    ```\n\n - 创建属性节点\n\n    ```javascript\n    var $li = $('<li title=\"香蕉\">香蕉</li>');\n    ```\n    \n - 插入节点的方法\n    - append 追加元素。$('p').append($(\"&lt;b>你好&lt;/b>\"))，A.append(B)之后，A和B是父子关系。\n    - appendTo 跟append相反，A.append(B) 相当于 B.appendTo(A)\n    - prepend 插入到前面\n    - prependTo 跟prepend相反\n    - after 在每个匹配元素之后插入内容，A.after(B)之后，A与B是兄弟元素\n    - intertAfter跟after相反，A.after(B)相当于B.instertAfter(A)\n    - before，跟after相反\n    - insertBefore，A.before(B)相当于B.insertBefore(A)\n    - 删除节点的方法\n    - remove 删除匹配的元素 $('ul li:eq(1)').remove()，删除第二个li元素，remove返回值是删除的元素\n    - detach 与remove不同，detach会保留所有该元素绑定的事件，附加的数据等。\n    - empty 清空节点\n\n- 复制节点 clone，可以传入一个boolean参数表示是否同时复制元素中所绑定的事件。\n\n- 替换节点\n    - replaceWith， A.replaceWith(B)，用B替换A\n    - replaceAll 跟replaceWith相反，A.replaceWith(B)相当于B.replaceAll(A)\n\n- 包裹节点\n    - wrap $('strong').wrap('&lt;b>&lt;/b>') 用&lt;b>标签将&lt;strong>标签包起来，如果有多个匹配，则每个元素单独包裹。\n    - wrapAll，将所有的元素用一个元素来包裹。如果匹配的节点之间有其他节点，其他节点会被放到包裹元素之后。\n    - wrapInner 将子内容（包括文本节点）包裹起来。\n\n- 获取属性，$('p').atter('title')\n\n- 设置属性\n\n    - $('p').attr('title', 'your title') 设置单个属性\n\n    - $('p').attr({'title', 'your title', 'name': 'test'})，设置多个属性\n\n- 删除属性 $('p').removeAttr('title');\n\n- 获取样式 $('p').attr('class')获取&lt;p>元素的class\n\n- 设置样式 $('p').attr('class', 'high') 设置样式\n\n- 追加样式 $('p').addClass('another')\n\n- 移除样式\n\n    - $('p').removeClass('another') 移除一个样式\n\n    - $('p').removeClass('another high') 移除多个样式\n\n- 切换样式 $('p').toggleClass('another')，如果another类名不存在则添加之，否则删除之\n\n- 判断是否含有某个样式 $('p').hasClass('another')\n- html()方法 获取或设置html内容，相当于javascript的innerHTML属性\n- text() 获取或设置文本内容，相当于javascript的innerText属性\n\n    - 获取: var text = $('p').text()\n\n    - 设置 $('p').text('你喜欢的水果是')\n- val()方法 获取或设置value，相当于javascript的value属性\n\n- 遍历节点\n    - children() 返回子节点（DOM原声节点，非jQuery节点）\n    - next()方法，获取紧临的同辈元素，也就是返回下一个兄弟节点。\n    - prev()，跟next相反，返回上一个兄弟节点\n    - siblings()返回前后所有的同辈元素。\n    - closest() 取得最近的匹配元素，往父控件追溯。如$(e.target).closest('li').css('color', 'red');给点击的目标元素附近的li元素添加颜色。\n    - parents() 获得集合中每个匹配元素的祖先元素。\n    - parent() 获得集合中每个匹配元素的父级元素。\n    - find() / filter() / nextAll() / prevAll() 等。\n\n- 获取样式 $('p').css('color') 获取&lt;p>的样式颜色\n\n- 设置样式\n\n    - $('p').css('color', 'red');\n\n    - $('p').css({\"fontSize\": \"30px\", \"backgroundColor\": \"#888888\"'});\n\n    - 元素定位\n        - offset()，获取元素在当前视窗中的相对偏移。\n        - position() 获取元素相对于最近的一个position样式为relative或absolute（为啥）的父节点的相对偏移。\n    - scrollLeft() 获取或设置水平滚动条的位置\n    - scrollRight() 获取或设置垂直滚动条的位置。\n","source":"_posts/chapter-3.md","raw":"---\ntitle: 锋利的jQeury 第三章-笔记 \ndate: 2016-9-3 18:04:19\ntags: jQuery\n---\n\n## 第三章 jQuery中的DOM操作\n - 查找`DOM`节点\n\n    ```javascript\n    var $li = $('ul li:eq(1)'); //获取<ul>里的第二个<li>节点\n    ```\n\n<!--more-->\n\n - 查找属性节点\n\n    ```javascript\n    var $para = $('p'); \n    var p_txt = $para.attr('title');\n    ```\n<!--more-->\n\n - 创建元素节点\n\n    ```javascript\n    var $li = $('<li></li>');\n    ```\n\n - 创建文本节点\n\n    ```javascript\n    var $li = $('<li>香蕉</li>');\n    ```\n\n - 创建属性节点\n\n    ```javascript\n    var $li = $('<li title=\"香蕉\">香蕉</li>');\n    ```\n    \n - 插入节点的方法\n    - append 追加元素。$('p').append($(\"&lt;b>你好&lt;/b>\"))，A.append(B)之后，A和B是父子关系。\n    - appendTo 跟append相反，A.append(B) 相当于 B.appendTo(A)\n    - prepend 插入到前面\n    - prependTo 跟prepend相反\n    - after 在每个匹配元素之后插入内容，A.after(B)之后，A与B是兄弟元素\n    - intertAfter跟after相反，A.after(B)相当于B.instertAfter(A)\n    - before，跟after相反\n    - insertBefore，A.before(B)相当于B.insertBefore(A)\n    - 删除节点的方法\n    - remove 删除匹配的元素 $('ul li:eq(1)').remove()，删除第二个li元素，remove返回值是删除的元素\n    - detach 与remove不同，detach会保留所有该元素绑定的事件，附加的数据等。\n    - empty 清空节点\n\n- 复制节点 clone，可以传入一个boolean参数表示是否同时复制元素中所绑定的事件。\n\n- 替换节点\n    - replaceWith， A.replaceWith(B)，用B替换A\n    - replaceAll 跟replaceWith相反，A.replaceWith(B)相当于B.replaceAll(A)\n\n- 包裹节点\n    - wrap $('strong').wrap('&lt;b>&lt;/b>') 用&lt;b>标签将&lt;strong>标签包起来，如果有多个匹配，则每个元素单独包裹。\n    - wrapAll，将所有的元素用一个元素来包裹。如果匹配的节点之间有其他节点，其他节点会被放到包裹元素之后。\n    - wrapInner 将子内容（包括文本节点）包裹起来。\n\n- 获取属性，$('p').atter('title')\n\n- 设置属性\n\n    - $('p').attr('title', 'your title') 设置单个属性\n\n    - $('p').attr({'title', 'your title', 'name': 'test'})，设置多个属性\n\n- 删除属性 $('p').removeAttr('title');\n\n- 获取样式 $('p').attr('class')获取&lt;p>元素的class\n\n- 设置样式 $('p').attr('class', 'high') 设置样式\n\n- 追加样式 $('p').addClass('another')\n\n- 移除样式\n\n    - $('p').removeClass('another') 移除一个样式\n\n    - $('p').removeClass('another high') 移除多个样式\n\n- 切换样式 $('p').toggleClass('another')，如果another类名不存在则添加之，否则删除之\n\n- 判断是否含有某个样式 $('p').hasClass('another')\n- html()方法 获取或设置html内容，相当于javascript的innerHTML属性\n- text() 获取或设置文本内容，相当于javascript的innerText属性\n\n    - 获取: var text = $('p').text()\n\n    - 设置 $('p').text('你喜欢的水果是')\n- val()方法 获取或设置value，相当于javascript的value属性\n\n- 遍历节点\n    - children() 返回子节点（DOM原声节点，非jQuery节点）\n    - next()方法，获取紧临的同辈元素，也就是返回下一个兄弟节点。\n    - prev()，跟next相反，返回上一个兄弟节点\n    - siblings()返回前后所有的同辈元素。\n    - closest() 取得最近的匹配元素，往父控件追溯。如$(e.target).closest('li').css('color', 'red');给点击的目标元素附近的li元素添加颜色。\n    - parents() 获得集合中每个匹配元素的祖先元素。\n    - parent() 获得集合中每个匹配元素的父级元素。\n    - find() / filter() / nextAll() / prevAll() 等。\n\n- 获取样式 $('p').css('color') 获取&lt;p>的样式颜色\n\n- 设置样式\n\n    - $('p').css('color', 'red');\n\n    - $('p').css({\"fontSize\": \"30px\", \"backgroundColor\": \"#888888\"'});\n\n    - 元素定位\n        - offset()，获取元素在当前视窗中的相对偏移。\n        - position() 获取元素相对于最近的一个position样式为relative或absolute（为啥）的父节点的相对偏移。\n    - scrollLeft() 获取或设置水平滚动条的位置\n    - scrollRight() 获取或设置垂直滚动条的位置。\n","slug":"chapter-3","published":1,"updated":"2019-01-03T02:48:56.344Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aandf000bbiui9a44h85j","content":"<h2 id=\"第三章-jQuery中的DOM操作\"><a href=\"#第三章-jQuery中的DOM操作\" class=\"headerlink\" title=\"第三章 jQuery中的DOM操作\"></a>第三章 jQuery中的DOM操作</h2><ul>\n<li><p>查找<code>DOM</code>节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'ul li:eq(1)'</span>); <span class=\"comment\">//获取&lt;ul&gt;里的第二个&lt;li&gt;节点</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>查找属性节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $para = $(<span class=\"string\">'p'</span>); </span><br><span class=\"line\"><span class=\"keyword\">var</span> p_txt = $para.attr(<span class=\"string\">'title'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<!--more-->\n<ul>\n<li><p>创建元素节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li&gt;&lt;/li&gt;'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建文本节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li&gt;香蕉&lt;/li&gt;'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建属性节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li title=\"香蕉\"&gt;香蕉&lt;/li&gt;'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>插入节点的方法<ul>\n<li>append 追加元素。$(‘p’).append($(“&lt;b&gt;你好&lt;/b&gt;”))，A.append(B)之后，A和B是父子关系。</li>\n<li>appendTo 跟append相反，A.append(B) 相当于 B.appendTo(A)</li>\n<li>prepend 插入到前面</li>\n<li>prependTo 跟prepend相反</li>\n<li>after 在每个匹配元素之后插入内容，A.after(B)之后，A与B是兄弟元素</li>\n<li>intertAfter跟after相反，A.after(B)相当于B.instertAfter(A)</li>\n<li>before，跟after相反</li>\n<li>insertBefore，A.before(B)相当于B.insertBefore(A)</li>\n<li>删除节点的方法</li>\n<li>remove 删除匹配的元素 $(‘ul li:eq(1)’).remove()，删除第二个li元素，remove返回值是删除的元素</li>\n<li>detach 与remove不同，detach会保留所有该元素绑定的事件，附加的数据等。</li>\n<li>empty 清空节点</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>复制节点 clone，可以传入一个boolean参数表示是否同时复制元素中所绑定的事件。</p>\n</li>\n<li><p>替换节点</p>\n<ul>\n<li>replaceWith， A.replaceWith(B)，用B替换A</li>\n<li>replaceAll 跟replaceWith相反，A.replaceWith(B)相当于B.replaceAll(A)</li>\n</ul>\n</li>\n<li><p>包裹节点</p>\n<ul>\n<li>wrap $(‘strong’).wrap(‘&lt;b&gt;&lt;/b&gt;’) 用&lt;b&gt;标签将&lt;strong&gt;标签包起来，如果有多个匹配，则每个元素单独包裹。</li>\n<li>wrapAll，将所有的元素用一个元素来包裹。如果匹配的节点之间有其他节点，其他节点会被放到包裹元素之后。</li>\n<li>wrapInner 将子内容（包括文本节点）包裹起来。</li>\n</ul>\n</li>\n<li><p>获取属性，$(‘p’).atter(‘title’)</p>\n</li>\n<li><p>设置属性</p>\n<ul>\n<li><p>$(‘p’).attr(‘title’, ‘your title’) 设置单个属性</p>\n</li>\n<li><p>$(‘p’).attr({‘title’, ‘your title’, ‘name’: ‘test’})，设置多个属性</p>\n</li>\n</ul>\n</li>\n<li><p>删除属性 $(‘p’).removeAttr(‘title’);</p>\n</li>\n<li><p>获取样式 $(‘p’).attr(‘class’)获取&lt;p&gt;元素的class</p>\n</li>\n<li><p>设置样式 $(‘p’).attr(‘class’, ‘high’) 设置样式</p>\n</li>\n<li><p>追加样式 $(‘p’).addClass(‘another’)</p>\n</li>\n<li><p>移除样式</p>\n<ul>\n<li><p>$(‘p’).removeClass(‘another’) 移除一个样式</p>\n</li>\n<li><p>$(‘p’).removeClass(‘another high’) 移除多个样式</p>\n</li>\n</ul>\n</li>\n<li><p>切换样式 $(‘p’).toggleClass(‘another’)，如果another类名不存在则添加之，否则删除之</p>\n</li>\n<li><p>判断是否含有某个样式 $(‘p’).hasClass(‘another’)</p>\n</li>\n<li>html()方法 获取或设置html内容，相当于javascript的innerHTML属性</li>\n<li><p>text() 获取或设置文本内容，相当于javascript的innerText属性</p>\n<ul>\n<li><p>获取: var text = $(‘p’).text()</p>\n</li>\n<li><p>设置 $(‘p’).text(‘你喜欢的水果是’)</p>\n</li>\n</ul>\n</li>\n<li><p>val()方法 获取或设置value，相当于javascript的value属性</p>\n</li>\n<li><p>遍历节点</p>\n<ul>\n<li>children() 返回子节点（DOM原声节点，非jQuery节点）</li>\n<li>next()方法，获取紧临的同辈元素，也就是返回下一个兄弟节点。</li>\n<li>prev()，跟next相反，返回上一个兄弟节点</li>\n<li>siblings()返回前后所有的同辈元素。</li>\n<li>closest() 取得最近的匹配元素，往父控件追溯。如$(e.target).closest(‘li’).css(‘color’, ‘red’);给点击的目标元素附近的li元素添加颜色。</li>\n<li>parents() 获得集合中每个匹配元素的祖先元素。</li>\n<li>parent() 获得集合中每个匹配元素的父级元素。</li>\n<li>find() / filter() / nextAll() / prevAll() 等。</li>\n</ul>\n</li>\n<li><p>获取样式 $(‘p’).css(‘color’) 获取&lt;p&gt;的样式颜色</p>\n</li>\n<li><p>设置样式</p>\n<ul>\n<li><p>$(‘p’).css(‘color’, ‘red’);</p>\n</li>\n<li><p>$(‘p’).css({“fontSize”: “30px”, “backgroundColor”: “#888888”‘});</p>\n</li>\n<li><p>元素定位</p>\n<ul>\n<li>offset()，获取元素在当前视窗中的相对偏移。</li>\n<li>position() 获取元素相对于最近的一个position样式为relative或absolute（为啥）的父节点的相对偏移。</li>\n</ul>\n</li>\n<li>scrollLeft() 获取或设置水平滚动条的位置</li>\n<li>scrollRight() 获取或设置垂直滚动条的位置。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"第三章-jQuery中的DOM操作\"><a href=\"#第三章-jQuery中的DOM操作\" class=\"headerlink\" title=\"第三章 jQuery中的DOM操作\"></a>第三章 jQuery中的DOM操作</h2><ul>\n<li><p>查找<code>DOM</code>节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'ul li:eq(1)'</span>); <span class=\"comment\">//获取&lt;ul&gt;里的第二个&lt;li&gt;节点</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<ul>\n<li><p>查找属性节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $para = $(<span class=\"string\">'p'</span>); </span><br><span class=\"line\"><span class=\"keyword\">var</span> p_txt = $para.attr(<span class=\"string\">'title'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<!--more-->\n<ul>\n<li><p>创建元素节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li&gt;&lt;/li&gt;'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建文本节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li&gt;香蕉&lt;/li&gt;'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建属性节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li title=\"香蕉\"&gt;香蕉&lt;/li&gt;'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>插入节点的方法<ul>\n<li>append 追加元素。$(‘p’).append($(“&lt;b&gt;你好&lt;/b&gt;”))，A.append(B)之后，A和B是父子关系。</li>\n<li>appendTo 跟append相反，A.append(B) 相当于 B.appendTo(A)</li>\n<li>prepend 插入到前面</li>\n<li>prependTo 跟prepend相反</li>\n<li>after 在每个匹配元素之后插入内容，A.after(B)之后，A与B是兄弟元素</li>\n<li>intertAfter跟after相反，A.after(B)相当于B.instertAfter(A)</li>\n<li>before，跟after相反</li>\n<li>insertBefore，A.before(B)相当于B.insertBefore(A)</li>\n<li>删除节点的方法</li>\n<li>remove 删除匹配的元素 $(‘ul li:eq(1)’).remove()，删除第二个li元素，remove返回值是删除的元素</li>\n<li>detach 与remove不同，detach会保留所有该元素绑定的事件，附加的数据等。</li>\n<li>empty 清空节点</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>复制节点 clone，可以传入一个boolean参数表示是否同时复制元素中所绑定的事件。</p>\n</li>\n<li><p>替换节点</p>\n<ul>\n<li>replaceWith， A.replaceWith(B)，用B替换A</li>\n<li>replaceAll 跟replaceWith相反，A.replaceWith(B)相当于B.replaceAll(A)</li>\n</ul>\n</li>\n<li><p>包裹节点</p>\n<ul>\n<li>wrap $(‘strong’).wrap(‘&lt;b&gt;&lt;/b&gt;’) 用&lt;b&gt;标签将&lt;strong&gt;标签包起来，如果有多个匹配，则每个元素单独包裹。</li>\n<li>wrapAll，将所有的元素用一个元素来包裹。如果匹配的节点之间有其他节点，其他节点会被放到包裹元素之后。</li>\n<li>wrapInner 将子内容（包括文本节点）包裹起来。</li>\n</ul>\n</li>\n<li><p>获取属性，$(‘p’).atter(‘title’)</p>\n</li>\n<li><p>设置属性</p>\n<ul>\n<li><p>$(‘p’).attr(‘title’, ‘your title’) 设置单个属性</p>\n</li>\n<li><p>$(‘p’).attr({‘title’, ‘your title’, ‘name’: ‘test’})，设置多个属性</p>\n</li>\n</ul>\n</li>\n<li><p>删除属性 $(‘p’).removeAttr(‘title’);</p>\n</li>\n<li><p>获取样式 $(‘p’).attr(‘class’)获取&lt;p&gt;元素的class</p>\n</li>\n<li><p>设置样式 $(‘p’).attr(‘class’, ‘high’) 设置样式</p>\n</li>\n<li><p>追加样式 $(‘p’).addClass(‘another’)</p>\n</li>\n<li><p>移除样式</p>\n<ul>\n<li><p>$(‘p’).removeClass(‘another’) 移除一个样式</p>\n</li>\n<li><p>$(‘p’).removeClass(‘another high’) 移除多个样式</p>\n</li>\n</ul>\n</li>\n<li><p>切换样式 $(‘p’).toggleClass(‘another’)，如果another类名不存在则添加之，否则删除之</p>\n</li>\n<li><p>判断是否含有某个样式 $(‘p’).hasClass(‘another’)</p>\n</li>\n<li>html()方法 获取或设置html内容，相当于javascript的innerHTML属性</li>\n<li><p>text() 获取或设置文本内容，相当于javascript的innerText属性</p>\n<ul>\n<li><p>获取: var text = $(‘p’).text()</p>\n</li>\n<li><p>设置 $(‘p’).text(‘你喜欢的水果是’)</p>\n</li>\n</ul>\n</li>\n<li><p>val()方法 获取或设置value，相当于javascript的value属性</p>\n</li>\n<li><p>遍历节点</p>\n<ul>\n<li>children() 返回子节点（DOM原声节点，非jQuery节点）</li>\n<li>next()方法，获取紧临的同辈元素，也就是返回下一个兄弟节点。</li>\n<li>prev()，跟next相反，返回上一个兄弟节点</li>\n<li>siblings()返回前后所有的同辈元素。</li>\n<li>closest() 取得最近的匹配元素，往父控件追溯。如$(e.target).closest(‘li’).css(‘color’, ‘red’);给点击的目标元素附近的li元素添加颜色。</li>\n<li>parents() 获得集合中每个匹配元素的祖先元素。</li>\n<li>parent() 获得集合中每个匹配元素的父级元素。</li>\n<li>find() / filter() / nextAll() / prevAll() 等。</li>\n</ul>\n</li>\n<li><p>获取样式 $(‘p’).css(‘color’) 获取&lt;p&gt;的样式颜色</p>\n</li>\n<li><p>设置样式</p>\n<ul>\n<li><p>$(‘p’).css(‘color’, ‘red’);</p>\n</li>\n<li><p>$(‘p’).css({“fontSize”: “30px”, “backgroundColor”: “#888888”‘});</p>\n</li>\n<li><p>元素定位</p>\n<ul>\n<li>offset()，获取元素在当前视窗中的相对偏移。</li>\n<li>position() 获取元素相对于最近的一个position样式为relative或absolute（为啥）的父节点的相对偏移。</li>\n</ul>\n</li>\n<li>scrollLeft() 获取或设置水平滚动条的位置</li>\n<li>scrollRight() 获取或设置垂直滚动条的位置。</li>\n</ul>\n</li>\n</ul>"},{"title":"锋利的jQeury 第二章-笔记","date":"2016-09-02T10:04:19.000Z","_content":"\n## 第二章 jQuery选择器\n\n### 基本选择器\n\n- `#id` 匹配id,  `$('#test')`\n- `.class` 匹配类, `$('.test')`\n- `element` 匹配标签, `$('div')`\n- `*` 匹配所有元素, `$('*')`\n- `selector1, select2,...,selectN` 匹配集合，如$('div, span, p.myClass')\n\n<!--more-->\n\n### 层次选择器\n\n- `$('ancestor decendant')` 选择后代元素\n- `$('parent > child')` 选择子元素\n- `$('prev + next')` 选择紧接在`prev`后的`next`元素，如: `$('.one + div')`，选择`one`之后的下个一个`div`同辈元素\n- `$('prev ~ siblings')` 选择prev后的所有siblings元素，如`$('#two ~ div')`选择`two`之后的所有`div`同辈元素\n\n### 过滤选择器\n\n- `:first` 选取第一个元素，它只返回一个元素。 如`$('div:first')`选取第一个div元素。\n- `:last` 选取最后一个元素，它只返回一个元素。\n- `:not(selector)` 取出所有给定选择器匹配的元素，如`$('input:not(.myClass)')`,选取`class`不是`myClass`的`input`元素\n- `:even` 选取索引为偶数的元素，索引从**0**开始\n- `:odd` 选取奇数索引元素\n- `:eq(index)` 选取指定索引元素\n- `:gt(index)` 选取大于索引的元素\n- `:lt(index)` 选取小于索引的元素\n- `:header` 选取所有标题元素 如`$(':header')`，选取网页中所有`&lt;h1>,&lt;h2>,&lt;h3>;....`\n- `:animated` 选取所有正在执行动画的元素 如：`$('div:animated')`选取正在执行动画的所有`div`元素\n- `:focus` 选取当前获取焦点的元素 如`$(':focus')`，获取当前获取焦点的元素\n\n### 内容过滤选择器\n\n- `:contains(text)` 选取文本内容含有text的元素, 如`$('div:contains(\"我\")')`,选取文本含有`我`的`div`元素\n- `:empty` 选取不包含子元素或者文本为空的元素, 如`$('div:empty')`选取不包含子元素的`div`元素\n- `:has(selector)` 选取含有选择器的所匹配的元素的元素，如`$('div:has(p)')`，选取含有`p`元素的`div`元素\n- `:parent` 选取含有子元素或文本的元素 如`$('div:parent')`,选取拥有子元素的`div`元素\n\n### 可见性过滤器\n\n- `:hidden` 选取所有不可见元素, 如`$(':hidden')`, 选取所有不可见元素，`$('input:hidden')`选取所有不可见的input元素\n- `:visible` 选取所有可见元素\n\n### 属性过滤选择器\n\n- `[attr]` 选取拥有此属性的元素, 如`$('div[id]')`, 选取拥有属性`id`的元素\n- `[attr=val]` 选取`attr`属性为`val`的元素如, `$('div[title=test]')`选取`title`为`test`的`div`元素\n- `[attr!=val]` 选取`attr`的值不为`val`的元素\n- `[attr^=val]` 选取`attr`的值以`val`开始的元素\n- `[attr$=val]` 选取`attr`的值以`val`结束的元素\n- `[attr*=val]` 选取`attr`的值包含`val`的元素\n- `[attr|=val]` 选取`attr`的值为`val`或以`val-`开始的元素\n- `[attr~=val]` 选取`attr`的值包含`' val'`的元素（注意val前面要有空格）\n- `[attr1][attr2][attrN]` 选取同时满足几个条件的元素，如`$('div[id][title$=\"test\"]')`，选取拥有属性id，并且属性title以test结束的div元素\n\n### 子元素过滤选择器\n\n- `:nth-child(index/even/odd/equation)` 选取每个父元素下的第`index`个或者奇偶子元素\n- `:first-child` 选取每个父元素的第一个子元素，如`$('ul li:first-child')`, 选择ul的第一个li元素\n- `:last-child` 选取每个父元素的子元素\n- `:only-child` 如果父控件一个子元素，那么匹配到，否则不被匹配。`$('ul li:only-child')`返回只有一个子元素且为li的li元素\n\n### 表单对象属性过滤选择器\n\n- `:enabled` 选取所有可用元素。`$('#form1 :enabled')`,选取`id`为`form1`的表单内的所有可用元素。\n- `:disbaled` 选取所有不可用元素。\n- `:checked` 选取所有被选中元素(单选框，复选框)。`$('input:checked')`,选取所有被选中的`input`元素\n- `:selected` 选取所有被选中的选项元素（下拉列表）。`$('select option:seleted')`\n\n### 表单选择器\n\n- `:input` 选取所有`&lt;input>,&lt;textarea>,&lt;select>,&lt;button>`元素。如`$('#form1 :input')`\n- `:text` 选取所有单行文本框。\n- `:password` 选取所有密码框\n- `:radio` 选取所有单选框\n- `:submit` 选取所有提交按钮\n- `:image` 选取所有的图像按钮\n- `:reset` 选取所有的重置按钮\n- `:button` 选取所有的按钮\n- `:file` 选取所有的上川域\n- `:hidden` 选取所有不可见元素\n","source":"_posts/chapter-2.md","raw":"---\ntitle: 锋利的jQeury 第二章-笔记 \ndate: 2016-9-2 18:04:19\ntags: jQuery\n---\n\n## 第二章 jQuery选择器\n\n### 基本选择器\n\n- `#id` 匹配id,  `$('#test')`\n- `.class` 匹配类, `$('.test')`\n- `element` 匹配标签, `$('div')`\n- `*` 匹配所有元素, `$('*')`\n- `selector1, select2,...,selectN` 匹配集合，如$('div, span, p.myClass')\n\n<!--more-->\n\n### 层次选择器\n\n- `$('ancestor decendant')` 选择后代元素\n- `$('parent > child')` 选择子元素\n- `$('prev + next')` 选择紧接在`prev`后的`next`元素，如: `$('.one + div')`，选择`one`之后的下个一个`div`同辈元素\n- `$('prev ~ siblings')` 选择prev后的所有siblings元素，如`$('#two ~ div')`选择`two`之后的所有`div`同辈元素\n\n### 过滤选择器\n\n- `:first` 选取第一个元素，它只返回一个元素。 如`$('div:first')`选取第一个div元素。\n- `:last` 选取最后一个元素，它只返回一个元素。\n- `:not(selector)` 取出所有给定选择器匹配的元素，如`$('input:not(.myClass)')`,选取`class`不是`myClass`的`input`元素\n- `:even` 选取索引为偶数的元素，索引从**0**开始\n- `:odd` 选取奇数索引元素\n- `:eq(index)` 选取指定索引元素\n- `:gt(index)` 选取大于索引的元素\n- `:lt(index)` 选取小于索引的元素\n- `:header` 选取所有标题元素 如`$(':header')`，选取网页中所有`&lt;h1>,&lt;h2>,&lt;h3>;....`\n- `:animated` 选取所有正在执行动画的元素 如：`$('div:animated')`选取正在执行动画的所有`div`元素\n- `:focus` 选取当前获取焦点的元素 如`$(':focus')`，获取当前获取焦点的元素\n\n### 内容过滤选择器\n\n- `:contains(text)` 选取文本内容含有text的元素, 如`$('div:contains(\"我\")')`,选取文本含有`我`的`div`元素\n- `:empty` 选取不包含子元素或者文本为空的元素, 如`$('div:empty')`选取不包含子元素的`div`元素\n- `:has(selector)` 选取含有选择器的所匹配的元素的元素，如`$('div:has(p)')`，选取含有`p`元素的`div`元素\n- `:parent` 选取含有子元素或文本的元素 如`$('div:parent')`,选取拥有子元素的`div`元素\n\n### 可见性过滤器\n\n- `:hidden` 选取所有不可见元素, 如`$(':hidden')`, 选取所有不可见元素，`$('input:hidden')`选取所有不可见的input元素\n- `:visible` 选取所有可见元素\n\n### 属性过滤选择器\n\n- `[attr]` 选取拥有此属性的元素, 如`$('div[id]')`, 选取拥有属性`id`的元素\n- `[attr=val]` 选取`attr`属性为`val`的元素如, `$('div[title=test]')`选取`title`为`test`的`div`元素\n- `[attr!=val]` 选取`attr`的值不为`val`的元素\n- `[attr^=val]` 选取`attr`的值以`val`开始的元素\n- `[attr$=val]` 选取`attr`的值以`val`结束的元素\n- `[attr*=val]` 选取`attr`的值包含`val`的元素\n- `[attr|=val]` 选取`attr`的值为`val`或以`val-`开始的元素\n- `[attr~=val]` 选取`attr`的值包含`' val'`的元素（注意val前面要有空格）\n- `[attr1][attr2][attrN]` 选取同时满足几个条件的元素，如`$('div[id][title$=\"test\"]')`，选取拥有属性id，并且属性title以test结束的div元素\n\n### 子元素过滤选择器\n\n- `:nth-child(index/even/odd/equation)` 选取每个父元素下的第`index`个或者奇偶子元素\n- `:first-child` 选取每个父元素的第一个子元素，如`$('ul li:first-child')`, 选择ul的第一个li元素\n- `:last-child` 选取每个父元素的子元素\n- `:only-child` 如果父控件一个子元素，那么匹配到，否则不被匹配。`$('ul li:only-child')`返回只有一个子元素且为li的li元素\n\n### 表单对象属性过滤选择器\n\n- `:enabled` 选取所有可用元素。`$('#form1 :enabled')`,选取`id`为`form1`的表单内的所有可用元素。\n- `:disbaled` 选取所有不可用元素。\n- `:checked` 选取所有被选中元素(单选框，复选框)。`$('input:checked')`,选取所有被选中的`input`元素\n- `:selected` 选取所有被选中的选项元素（下拉列表）。`$('select option:seleted')`\n\n### 表单选择器\n\n- `:input` 选取所有`&lt;input>,&lt;textarea>,&lt;select>,&lt;button>`元素。如`$('#form1 :input')`\n- `:text` 选取所有单行文本框。\n- `:password` 选取所有密码框\n- `:radio` 选取所有单选框\n- `:submit` 选取所有提交按钮\n- `:image` 选取所有的图像按钮\n- `:reset` 选取所有的重置按钮\n- `:button` 选取所有的按钮\n- `:file` 选取所有的上川域\n- `:hidden` 选取所有不可见元素\n","slug":"chapter-2","published":1,"updated":"2019-01-03T02:48:56.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aandj000ebiuisn2gs9wf","content":"<h2 id=\"第二章-jQuery选择器\"><a href=\"#第二章-jQuery选择器\" class=\"headerlink\" title=\"第二章 jQuery选择器\"></a>第二章 jQuery选择器</h2><h3 id=\"基本选择器\"><a href=\"#基本选择器\" class=\"headerlink\" title=\"基本选择器\"></a>基本选择器</h3><ul>\n<li><code>#id</code> 匹配id,  <code>$(&#39;#test&#39;)</code></li>\n<li><code>.class</code> 匹配类, <code>$(&#39;.test&#39;)</code></li>\n<li><code>element</code> 匹配标签, <code>$(&#39;div&#39;)</code></li>\n<li><code>*</code> 匹配所有元素, <code>$(&#39;*&#39;)</code></li>\n<li><code>selector1, select2,...,selectN</code> 匹配集合，如$(‘div, span, p.myClass’)</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"层次选择器\"><a href=\"#层次选择器\" class=\"headerlink\" title=\"层次选择器\"></a>层次选择器</h3><ul>\n<li><code>$(&#39;ancestor decendant&#39;)</code> 选择后代元素</li>\n<li><code>$(&#39;parent &gt; child&#39;)</code> 选择子元素</li>\n<li><code>$(&#39;prev + next&#39;)</code> 选择紧接在<code>prev</code>后的<code>next</code>元素，如: <code>$(&#39;.one + div&#39;)</code>，选择<code>one</code>之后的下个一个<code>div</code>同辈元素</li>\n<li><code>$(&#39;prev ~ siblings&#39;)</code> 选择prev后的所有siblings元素，如<code>$(&#39;#two ~ div&#39;)</code>选择<code>two</code>之后的所有<code>div</code>同辈元素</li>\n</ul>\n<h3 id=\"过滤选择器\"><a href=\"#过滤选择器\" class=\"headerlink\" title=\"过滤选择器\"></a>过滤选择器</h3><ul>\n<li><code>:first</code> 选取第一个元素，它只返回一个元素。 如<code>$(&#39;div:first&#39;)</code>选取第一个div元素。</li>\n<li><code>:last</code> 选取最后一个元素，它只返回一个元素。</li>\n<li><code>:not(selector)</code> 取出所有给定选择器匹配的元素，如<code>$(&#39;input:not(.myClass)&#39;)</code>,选取<code>class</code>不是<code>myClass</code>的<code>input</code>元素</li>\n<li><code>:even</code> 选取索引为偶数的元素，索引从<strong>0</strong>开始</li>\n<li><code>:odd</code> 选取奇数索引元素</li>\n<li><code>:eq(index)</code> 选取指定索引元素</li>\n<li><code>:gt(index)</code> 选取大于索引的元素</li>\n<li><code>:lt(index)</code> 选取小于索引的元素</li>\n<li><code>:header</code> 选取所有标题元素 如<code>$(&#39;:header&#39;)</code>，选取网页中所有<code>&amp;lt;h1&gt;,&amp;lt;h2&gt;,&amp;lt;h3&gt;;....</code></li>\n<li><code>:animated</code> 选取所有正在执行动画的元素 如：<code>$(&#39;div:animated&#39;)</code>选取正在执行动画的所有<code>div</code>元素</li>\n<li><code>:focus</code> 选取当前获取焦点的元素 如<code>$(&#39;:focus&#39;)</code>，获取当前获取焦点的元素</li>\n</ul>\n<h3 id=\"内容过滤选择器\"><a href=\"#内容过滤选择器\" class=\"headerlink\" title=\"内容过滤选择器\"></a>内容过滤选择器</h3><ul>\n<li><code>:contains(text)</code> 选取文本内容含有text的元素, 如<code>$(&#39;div:contains(&quot;我&quot;)&#39;)</code>,选取文本含有<code>我</code>的<code>div</code>元素</li>\n<li><code>:empty</code> 选取不包含子元素或者文本为空的元素, 如<code>$(&#39;div:empty&#39;)</code>选取不包含子元素的<code>div</code>元素</li>\n<li><code>:has(selector)</code> 选取含有选择器的所匹配的元素的元素，如<code>$(&#39;div:has(p)&#39;)</code>，选取含有<code>p</code>元素的<code>div</code>元素</li>\n<li><code>:parent</code> 选取含有子元素或文本的元素 如<code>$(&#39;div:parent&#39;)</code>,选取拥有子元素的<code>div</code>元素</li>\n</ul>\n<h3 id=\"可见性过滤器\"><a href=\"#可见性过滤器\" class=\"headerlink\" title=\"可见性过滤器\"></a>可见性过滤器</h3><ul>\n<li><code>:hidden</code> 选取所有不可见元素, 如<code>$(&#39;:hidden&#39;)</code>, 选取所有不可见元素，<code>$(&#39;input:hidden&#39;)</code>选取所有不可见的input元素</li>\n<li><code>:visible</code> 选取所有可见元素</li>\n</ul>\n<h3 id=\"属性过滤选择器\"><a href=\"#属性过滤选择器\" class=\"headerlink\" title=\"属性过滤选择器\"></a>属性过滤选择器</h3><ul>\n<li><code>[attr]</code> 选取拥有此属性的元素, 如<code>$(&#39;div[id]&#39;)</code>, 选取拥有属性<code>id</code>的元素</li>\n<li><code>[attr=val]</code> 选取<code>attr</code>属性为<code>val</code>的元素如, <code>$(&#39;div[title=test]&#39;)</code>选取<code>title</code>为<code>test</code>的<code>div</code>元素</li>\n<li><code>[attr!=val]</code> 选取<code>attr</code>的值不为<code>val</code>的元素</li>\n<li><code>[attr^=val]</code> 选取<code>attr</code>的值以<code>val</code>开始的元素</li>\n<li><code>[attr$=val]</code> 选取<code>attr</code>的值以<code>val</code>结束的元素</li>\n<li><code>[attr*=val]</code> 选取<code>attr</code>的值包含<code>val</code>的元素</li>\n<li><code>[attr|=val]</code> 选取<code>attr</code>的值为<code>val</code>或以<code>val-</code>开始的元素</li>\n<li><code>[attr~=val]</code> 选取<code>attr</code>的值包含<code>&#39; val&#39;</code>的元素（注意val前面要有空格）</li>\n<li><code>[attr1][attr2][attrN]</code> 选取同时满足几个条件的元素，如<code>$(&#39;div[id][title$=&quot;test&quot;]&#39;)</code>，选取拥有属性id，并且属性title以test结束的div元素</li>\n</ul>\n<h3 id=\"子元素过滤选择器\"><a href=\"#子元素过滤选择器\" class=\"headerlink\" title=\"子元素过滤选择器\"></a>子元素过滤选择器</h3><ul>\n<li><code>:nth-child(index/even/odd/equation)</code> 选取每个父元素下的第<code>index</code>个或者奇偶子元素</li>\n<li><code>:first-child</code> 选取每个父元素的第一个子元素，如<code>$(&#39;ul li:first-child&#39;)</code>, 选择ul的第一个li元素</li>\n<li><code>:last-child</code> 选取每个父元素的子元素</li>\n<li><code>:only-child</code> 如果父控件一个子元素，那么匹配到，否则不被匹配。<code>$(&#39;ul li:only-child&#39;)</code>返回只有一个子元素且为li的li元素</li>\n</ul>\n<h3 id=\"表单对象属性过滤选择器\"><a href=\"#表单对象属性过滤选择器\" class=\"headerlink\" title=\"表单对象属性过滤选择器\"></a>表单对象属性过滤选择器</h3><ul>\n<li><code>:enabled</code> 选取所有可用元素。<code>$(&#39;#form1 :enabled&#39;)</code>,选取<code>id</code>为<code>form1</code>的表单内的所有可用元素。</li>\n<li><code>:disbaled</code> 选取所有不可用元素。</li>\n<li><code>:checked</code> 选取所有被选中元素(单选框，复选框)。<code>$(&#39;input:checked&#39;)</code>,选取所有被选中的<code>input</code>元素</li>\n<li><code>:selected</code> 选取所有被选中的选项元素（下拉列表）。<code>$(&#39;select option:seleted&#39;)</code></li>\n</ul>\n<h3 id=\"表单选择器\"><a href=\"#表单选择器\" class=\"headerlink\" title=\"表单选择器\"></a>表单选择器</h3><ul>\n<li><code>:input</code> 选取所有<code>&amp;lt;input&gt;,&amp;lt;textarea&gt;,&amp;lt;select&gt;,&amp;lt;button&gt;</code>元素。如<code>$(&#39;#form1 :input&#39;)</code></li>\n<li><code>:text</code> 选取所有单行文本框。</li>\n<li><code>:password</code> 选取所有密码框</li>\n<li><code>:radio</code> 选取所有单选框</li>\n<li><code>:submit</code> 选取所有提交按钮</li>\n<li><code>:image</code> 选取所有的图像按钮</li>\n<li><code>:reset</code> 选取所有的重置按钮</li>\n<li><code>:button</code> 选取所有的按钮</li>\n<li><code>:file</code> 选取所有的上川域</li>\n<li><code>:hidden</code> 选取所有不可见元素</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"第二章-jQuery选择器\"><a href=\"#第二章-jQuery选择器\" class=\"headerlink\" title=\"第二章 jQuery选择器\"></a>第二章 jQuery选择器</h2><h3 id=\"基本选择器\"><a href=\"#基本选择器\" class=\"headerlink\" title=\"基本选择器\"></a>基本选择器</h3><ul>\n<li><code>#id</code> 匹配id,  <code>$(&#39;#test&#39;)</code></li>\n<li><code>.class</code> 匹配类, <code>$(&#39;.test&#39;)</code></li>\n<li><code>element</code> 匹配标签, <code>$(&#39;div&#39;)</code></li>\n<li><code>*</code> 匹配所有元素, <code>$(&#39;*&#39;)</code></li>\n<li><code>selector1, select2,...,selectN</code> 匹配集合，如$(‘div, span, p.myClass’)</li>\n</ul>","more":"<h3 id=\"层次选择器\"><a href=\"#层次选择器\" class=\"headerlink\" title=\"层次选择器\"></a>层次选择器</h3><ul>\n<li><code>$(&#39;ancestor decendant&#39;)</code> 选择后代元素</li>\n<li><code>$(&#39;parent &gt; child&#39;)</code> 选择子元素</li>\n<li><code>$(&#39;prev + next&#39;)</code> 选择紧接在<code>prev</code>后的<code>next</code>元素，如: <code>$(&#39;.one + div&#39;)</code>，选择<code>one</code>之后的下个一个<code>div</code>同辈元素</li>\n<li><code>$(&#39;prev ~ siblings&#39;)</code> 选择prev后的所有siblings元素，如<code>$(&#39;#two ~ div&#39;)</code>选择<code>two</code>之后的所有<code>div</code>同辈元素</li>\n</ul>\n<h3 id=\"过滤选择器\"><a href=\"#过滤选择器\" class=\"headerlink\" title=\"过滤选择器\"></a>过滤选择器</h3><ul>\n<li><code>:first</code> 选取第一个元素，它只返回一个元素。 如<code>$(&#39;div:first&#39;)</code>选取第一个div元素。</li>\n<li><code>:last</code> 选取最后一个元素，它只返回一个元素。</li>\n<li><code>:not(selector)</code> 取出所有给定选择器匹配的元素，如<code>$(&#39;input:not(.myClass)&#39;)</code>,选取<code>class</code>不是<code>myClass</code>的<code>input</code>元素</li>\n<li><code>:even</code> 选取索引为偶数的元素，索引从<strong>0</strong>开始</li>\n<li><code>:odd</code> 选取奇数索引元素</li>\n<li><code>:eq(index)</code> 选取指定索引元素</li>\n<li><code>:gt(index)</code> 选取大于索引的元素</li>\n<li><code>:lt(index)</code> 选取小于索引的元素</li>\n<li><code>:header</code> 选取所有标题元素 如<code>$(&#39;:header&#39;)</code>，选取网页中所有<code>&amp;lt;h1&gt;,&amp;lt;h2&gt;,&amp;lt;h3&gt;;....</code></li>\n<li><code>:animated</code> 选取所有正在执行动画的元素 如：<code>$(&#39;div:animated&#39;)</code>选取正在执行动画的所有<code>div</code>元素</li>\n<li><code>:focus</code> 选取当前获取焦点的元素 如<code>$(&#39;:focus&#39;)</code>，获取当前获取焦点的元素</li>\n</ul>\n<h3 id=\"内容过滤选择器\"><a href=\"#内容过滤选择器\" class=\"headerlink\" title=\"内容过滤选择器\"></a>内容过滤选择器</h3><ul>\n<li><code>:contains(text)</code> 选取文本内容含有text的元素, 如<code>$(&#39;div:contains(&quot;我&quot;)&#39;)</code>,选取文本含有<code>我</code>的<code>div</code>元素</li>\n<li><code>:empty</code> 选取不包含子元素或者文本为空的元素, 如<code>$(&#39;div:empty&#39;)</code>选取不包含子元素的<code>div</code>元素</li>\n<li><code>:has(selector)</code> 选取含有选择器的所匹配的元素的元素，如<code>$(&#39;div:has(p)&#39;)</code>，选取含有<code>p</code>元素的<code>div</code>元素</li>\n<li><code>:parent</code> 选取含有子元素或文本的元素 如<code>$(&#39;div:parent&#39;)</code>,选取拥有子元素的<code>div</code>元素</li>\n</ul>\n<h3 id=\"可见性过滤器\"><a href=\"#可见性过滤器\" class=\"headerlink\" title=\"可见性过滤器\"></a>可见性过滤器</h3><ul>\n<li><code>:hidden</code> 选取所有不可见元素, 如<code>$(&#39;:hidden&#39;)</code>, 选取所有不可见元素，<code>$(&#39;input:hidden&#39;)</code>选取所有不可见的input元素</li>\n<li><code>:visible</code> 选取所有可见元素</li>\n</ul>\n<h3 id=\"属性过滤选择器\"><a href=\"#属性过滤选择器\" class=\"headerlink\" title=\"属性过滤选择器\"></a>属性过滤选择器</h3><ul>\n<li><code>[attr]</code> 选取拥有此属性的元素, 如<code>$(&#39;div[id]&#39;)</code>, 选取拥有属性<code>id</code>的元素</li>\n<li><code>[attr=val]</code> 选取<code>attr</code>属性为<code>val</code>的元素如, <code>$(&#39;div[title=test]&#39;)</code>选取<code>title</code>为<code>test</code>的<code>div</code>元素</li>\n<li><code>[attr!=val]</code> 选取<code>attr</code>的值不为<code>val</code>的元素</li>\n<li><code>[attr^=val]</code> 选取<code>attr</code>的值以<code>val</code>开始的元素</li>\n<li><code>[attr$=val]</code> 选取<code>attr</code>的值以<code>val</code>结束的元素</li>\n<li><code>[attr*=val]</code> 选取<code>attr</code>的值包含<code>val</code>的元素</li>\n<li><code>[attr|=val]</code> 选取<code>attr</code>的值为<code>val</code>或以<code>val-</code>开始的元素</li>\n<li><code>[attr~=val]</code> 选取<code>attr</code>的值包含<code>&#39; val&#39;</code>的元素（注意val前面要有空格）</li>\n<li><code>[attr1][attr2][attrN]</code> 选取同时满足几个条件的元素，如<code>$(&#39;div[id][title$=&quot;test&quot;]&#39;)</code>，选取拥有属性id，并且属性title以test结束的div元素</li>\n</ul>\n<h3 id=\"子元素过滤选择器\"><a href=\"#子元素过滤选择器\" class=\"headerlink\" title=\"子元素过滤选择器\"></a>子元素过滤选择器</h3><ul>\n<li><code>:nth-child(index/even/odd/equation)</code> 选取每个父元素下的第<code>index</code>个或者奇偶子元素</li>\n<li><code>:first-child</code> 选取每个父元素的第一个子元素，如<code>$(&#39;ul li:first-child&#39;)</code>, 选择ul的第一个li元素</li>\n<li><code>:last-child</code> 选取每个父元素的子元素</li>\n<li><code>:only-child</code> 如果父控件一个子元素，那么匹配到，否则不被匹配。<code>$(&#39;ul li:only-child&#39;)</code>返回只有一个子元素且为li的li元素</li>\n</ul>\n<h3 id=\"表单对象属性过滤选择器\"><a href=\"#表单对象属性过滤选择器\" class=\"headerlink\" title=\"表单对象属性过滤选择器\"></a>表单对象属性过滤选择器</h3><ul>\n<li><code>:enabled</code> 选取所有可用元素。<code>$(&#39;#form1 :enabled&#39;)</code>,选取<code>id</code>为<code>form1</code>的表单内的所有可用元素。</li>\n<li><code>:disbaled</code> 选取所有不可用元素。</li>\n<li><code>:checked</code> 选取所有被选中元素(单选框，复选框)。<code>$(&#39;input:checked&#39;)</code>,选取所有被选中的<code>input</code>元素</li>\n<li><code>:selected</code> 选取所有被选中的选项元素（下拉列表）。<code>$(&#39;select option:seleted&#39;)</code></li>\n</ul>\n<h3 id=\"表单选择器\"><a href=\"#表单选择器\" class=\"headerlink\" title=\"表单选择器\"></a>表单选择器</h3><ul>\n<li><code>:input</code> 选取所有<code>&amp;lt;input&gt;,&amp;lt;textarea&gt;,&amp;lt;select&gt;,&amp;lt;button&gt;</code>元素。如<code>$(&#39;#form1 :input&#39;)</code></li>\n<li><code>:text</code> 选取所有单行文本框。</li>\n<li><code>:password</code> 选取所有密码框</li>\n<li><code>:radio</code> 选取所有单选框</li>\n<li><code>:submit</code> 选取所有提交按钮</li>\n<li><code>:image</code> 选取所有的图像按钮</li>\n<li><code>:reset</code> 选取所有的重置按钮</li>\n<li><code>:button</code> 选取所有的按钮</li>\n<li><code>:file</code> 选取所有的上川域</li>\n<li><code>:hidden</code> 选取所有不可见元素</li>\n</ul>"},{"title":"锋利的jQeury 第四章-笔记","date":"2016-09-05T10:04:19.000Z","_content":"\n## 第四章 jQuery中的事件和动画\n\n- window.onload方法，相当于`jQuery`中的$(window).load(function(){})方法。都是等文档中的所有元素加载完成时调用，包括关联css文件和javascript文件。\n- $(document).ready(function() {})则不会等待关联文件下载完，在DOM准备好之后就会调用。\n- $(window).load(function(){})可以调用多次，都会执行，而window.onload只会调用最后一次赋予的函数。\n- $(document).ready(function() {})可以简写为$(function() {});\n\n<!--more-->\n\n### 事件绑定 \n- bind(type [, data], fn);第1个参数是事件类型，包括focus、load、click、dbclik等。，第2个参数可选，作为event.data传递，第3个参数是回调函数。示例：\n```javascript\n$(function(){\n    $('#panel h5.head').bind('click', function(e) {\n        $(this).next().show();\n    })\n})\n```\n- bind函数可以级联，如\n```javascript\n$('#panel h5.head').bind('mouseover', function(e) {\n    $(this).next().show();\n}).bind('mouseout', function(e) {\n    $(this).next().hide();\n})\n```\n- bind可以简写，如\n```javascript\n$('#panel h5.head').click(function(e) {\n    $(this).next().toggle();\n})\n```\n- 合成事件\n\n    `jQuery`有两个合成事件，hover()和toggle(),都有两个回调函数作为参数，可以看成是语法糖。hover表示移入移出两个事件，toggle表示前后两次点击事件，如\n    ```javascript\n    $('#panel h5.head').hover(function() {\n        $(this).next().show(); //划过时显示下一个元素\n    }, function() {\n        $(this).next().hide(); //划出隐藏下一个元素\n    })\n    ```\n    ```javascript\n    $('#panel h5.head').toggle(function() {\n        $(this).next().show(); //点击时显示下一个元素\n    }, function() {\n        $(this).next().hide(); //再次点击时隐藏下一个元素\n    })\n    ```\n- 事件对象的属性\n    - event.type 事件类型，字符串格式，如'click', 'dbclick', 'load'等。\n    - event.preventDefault()阻止默认行为，可以用return false代替。\n    - event.stopProgagation()组织事件冒泡，可以用return false代替。\n    - event.target 触发事件的元素。\n    - event.pageX event.pageY,相对于页面的x，y坐标。\n    - event.which 不同事件含义不同，鼠标事件表示那个键，键盘事件表示键值。\n    - event.metaKey ctl键是否按下。\n- 移除事件 unbind([type],[data]) \n    - 如果没有参数，表示删除所有事件。\n    - 如果只提供type，表示移除所有type对应的事件回调。\n    - 如果传递了2个参数，表示对应的处理函数会被删除。\n- 单次事件 one(type, [data], fn);执行一次后，事件回被移除。\n- 事件模拟\n    - 原生事件 $('#btn').trigger('click')或者$('#btn').click();\n    - 自定义事件\n    ```javascript\n    $('#btn').bind('myClick', function(){\n        $('#test').append('&lt;p>我的自定义事件&lt;/p>')\n    });\n\n    $('#btn').trigger('myClick'); //触发事件。\n    ```    \n    - 传递数据\n    ```javascript\n    $('#btn').bind('myClick', function(event, msg1, msg2){\n        $('#test').append('&lt;p>我的自定义事件&lt;/p>')\n    });\n\n    $('#btn').trigger('myClick'. ['参数1'，'参数2']); //触发事件。\n    ```   \n    - 执行默认操作 triggerHandler，例如，只触发focus事件，但是不获取焦点（浏览器默认行为）\n    ```javascript\n    $('input').triggerHandler('focus');\n    ```\n- 事件命名空间\n    - 添加命名空间\n    ```javascript\n    $('#div').bind('mouseover.plugin', function() {\n\n    })\n    $('#btn').click(function() {\n        $('#div').unbind('.plugin'); //移除上面的事件。\n    })\n    ```\n    \n## 动画\n - show(duration) 显示元素，duration不为0时，表示显示动画。将元素display属性从’none‘设置为原来的值\n - hide(duration) 隐藏元素，duration不为0时，表示隐藏动画。将元素display属性设置为'none'\n - fadeIn(duration) 与show一样，但是不改变display样式。\n - fadeOut(duration) 与hide一样，但是不改变display样式。\n - slideUp(duration)和slideDown(duration)，只改变高度。\n - animate(param, speed, callback)\n    - param 包含样式属性值，如{left: '400px', top: '400px'}，可累加或累减，如{left: '+=400px'}\n    - speed 动画时间\n    - callback 动画完成回调\n    -累加动画\n    ```javascript\n    $('#panel').animate({left:'400px', height:'200px', opacity:1}, 3000)\n        .animate({top:'200px', width:'200px'}, 3000， function() {\n            consle.log('animate done');\n        })\n        .fadeOut('slow');\n    ```\n    - 停止动画stop([clearQueue], [gotoEnd])\n    - 判断是否处于动画状态 $(element).is(':animated')\n    - 延迟动画delay(duration),延迟一段时间开始动画，$(this).animate({left:'400px'}).delay(200);\n    - 其他动画方法\n        - toggle(speed, [callback]) 显示/隐藏元素\n        - slideToggle(speed, [easing], [callback])通过改变高度来显示/隐藏元素\n        - fadeTo(speed, opacity, [callback]) 通过改变不透明度来显示/隐藏元素\n        - fadeToggle(speed, [easing], [callback]) 通过不透明度来显示/隐藏元素。\n","source":"_posts/chapter-4.md","raw":"---\ntitle: 锋利的jQeury 第四章-笔记 \ndate: 2016-9-5 18:04:19\ntags: jQuery\n---\n\n## 第四章 jQuery中的事件和动画\n\n- window.onload方法，相当于`jQuery`中的$(window).load(function(){})方法。都是等文档中的所有元素加载完成时调用，包括关联css文件和javascript文件。\n- $(document).ready(function() {})则不会等待关联文件下载完，在DOM准备好之后就会调用。\n- $(window).load(function(){})可以调用多次，都会执行，而window.onload只会调用最后一次赋予的函数。\n- $(document).ready(function() {})可以简写为$(function() {});\n\n<!--more-->\n\n### 事件绑定 \n- bind(type [, data], fn);第1个参数是事件类型，包括focus、load、click、dbclik等。，第2个参数可选，作为event.data传递，第3个参数是回调函数。示例：\n```javascript\n$(function(){\n    $('#panel h5.head').bind('click', function(e) {\n        $(this).next().show();\n    })\n})\n```\n- bind函数可以级联，如\n```javascript\n$('#panel h5.head').bind('mouseover', function(e) {\n    $(this).next().show();\n}).bind('mouseout', function(e) {\n    $(this).next().hide();\n})\n```\n- bind可以简写，如\n```javascript\n$('#panel h5.head').click(function(e) {\n    $(this).next().toggle();\n})\n```\n- 合成事件\n\n    `jQuery`有两个合成事件，hover()和toggle(),都有两个回调函数作为参数，可以看成是语法糖。hover表示移入移出两个事件，toggle表示前后两次点击事件，如\n    ```javascript\n    $('#panel h5.head').hover(function() {\n        $(this).next().show(); //划过时显示下一个元素\n    }, function() {\n        $(this).next().hide(); //划出隐藏下一个元素\n    })\n    ```\n    ```javascript\n    $('#panel h5.head').toggle(function() {\n        $(this).next().show(); //点击时显示下一个元素\n    }, function() {\n        $(this).next().hide(); //再次点击时隐藏下一个元素\n    })\n    ```\n- 事件对象的属性\n    - event.type 事件类型，字符串格式，如'click', 'dbclick', 'load'等。\n    - event.preventDefault()阻止默认行为，可以用return false代替。\n    - event.stopProgagation()组织事件冒泡，可以用return false代替。\n    - event.target 触发事件的元素。\n    - event.pageX event.pageY,相对于页面的x，y坐标。\n    - event.which 不同事件含义不同，鼠标事件表示那个键，键盘事件表示键值。\n    - event.metaKey ctl键是否按下。\n- 移除事件 unbind([type],[data]) \n    - 如果没有参数，表示删除所有事件。\n    - 如果只提供type，表示移除所有type对应的事件回调。\n    - 如果传递了2个参数，表示对应的处理函数会被删除。\n- 单次事件 one(type, [data], fn);执行一次后，事件回被移除。\n- 事件模拟\n    - 原生事件 $('#btn').trigger('click')或者$('#btn').click();\n    - 自定义事件\n    ```javascript\n    $('#btn').bind('myClick', function(){\n        $('#test').append('&lt;p>我的自定义事件&lt;/p>')\n    });\n\n    $('#btn').trigger('myClick'); //触发事件。\n    ```    \n    - 传递数据\n    ```javascript\n    $('#btn').bind('myClick', function(event, msg1, msg2){\n        $('#test').append('&lt;p>我的自定义事件&lt;/p>')\n    });\n\n    $('#btn').trigger('myClick'. ['参数1'，'参数2']); //触发事件。\n    ```   \n    - 执行默认操作 triggerHandler，例如，只触发focus事件，但是不获取焦点（浏览器默认行为）\n    ```javascript\n    $('input').triggerHandler('focus');\n    ```\n- 事件命名空间\n    - 添加命名空间\n    ```javascript\n    $('#div').bind('mouseover.plugin', function() {\n\n    })\n    $('#btn').click(function() {\n        $('#div').unbind('.plugin'); //移除上面的事件。\n    })\n    ```\n    \n## 动画\n - show(duration) 显示元素，duration不为0时，表示显示动画。将元素display属性从’none‘设置为原来的值\n - hide(duration) 隐藏元素，duration不为0时，表示隐藏动画。将元素display属性设置为'none'\n - fadeIn(duration) 与show一样，但是不改变display样式。\n - fadeOut(duration) 与hide一样，但是不改变display样式。\n - slideUp(duration)和slideDown(duration)，只改变高度。\n - animate(param, speed, callback)\n    - param 包含样式属性值，如{left: '400px', top: '400px'}，可累加或累减，如{left: '+=400px'}\n    - speed 动画时间\n    - callback 动画完成回调\n    -累加动画\n    ```javascript\n    $('#panel').animate({left:'400px', height:'200px', opacity:1}, 3000)\n        .animate({top:'200px', width:'200px'}, 3000， function() {\n            consle.log('animate done');\n        })\n        .fadeOut('slow');\n    ```\n    - 停止动画stop([clearQueue], [gotoEnd])\n    - 判断是否处于动画状态 $(element).is(':animated')\n    - 延迟动画delay(duration),延迟一段时间开始动画，$(this).animate({left:'400px'}).delay(200);\n    - 其他动画方法\n        - toggle(speed, [callback]) 显示/隐藏元素\n        - slideToggle(speed, [easing], [callback])通过改变高度来显示/隐藏元素\n        - fadeTo(speed, opacity, [callback]) 通过改变不透明度来显示/隐藏元素\n        - fadeToggle(speed, [easing], [callback]) 通过不透明度来显示/隐藏元素。\n","slug":"chapter-4","published":1,"updated":"2019-01-03T02:48:56.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aandl000hbiui5ihe5j27","content":"<h2 id=\"第四章-jQuery中的事件和动画\"><a href=\"#第四章-jQuery中的事件和动画\" class=\"headerlink\" title=\"第四章 jQuery中的事件和动画\"></a>第四章 jQuery中的事件和动画</h2><ul>\n<li>window.onload方法，相当于<code>jQuery</code>中的$(window).load(function(){})方法。都是等文档中的所有元素加载完成时调用，包括关联css文件和javascript文件。</li>\n<li>$(document).ready(function() {})则不会等待关联文件下载完，在DOM准备好之后就会调用。</li>\n<li>$(window).load(function(){})可以调用多次，都会执行，而window.onload只会调用最后一次赋予的函数。</li>\n<li>$(document).ready(function() {})可以简写为$(function() {});</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h3><ul>\n<li><p>bind(type [, data], fn);第1个参数是事件类型，包括focus、load、click、dbclik等。，第2个参数可选，作为event.data传递，第3个参数是回调函数。示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'#panel h5.head'</span>).bind(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        $(<span class=\"keyword\">this</span>).next().show();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>bind函数可以级联，如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).bind(<span class=\"string\">'mouseover'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"keyword\">this</span>).next().show();</span><br><span class=\"line\">&#125;).bind(<span class=\"string\">'mouseout'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>bind可以简写，如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"keyword\">this</span>).next().toggle();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>合成事件</p>\n<p>  <code>jQuery</code>有两个合成事件，hover()和toggle(),都有两个回调函数作为参数，可以看成是语法糖。hover表示移入移出两个事件，toggle表示前后两次点击事件，如</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).hover(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"keyword\">this</span>).next().show(); <span class=\"comment\">//划过时显示下一个元素</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide(); <span class=\"comment\">//划出隐藏下一个元素</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).toggle(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"keyword\">this</span>).next().show(); <span class=\"comment\">//点击时显示下一个元素</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide(); <span class=\"comment\">//再次点击时隐藏下一个元素</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>事件对象的属性</p>\n<ul>\n<li>event.type 事件类型，字符串格式，如’click’, ‘dbclick’, ‘load’等。</li>\n<li>event.preventDefault()阻止默认行为，可以用return false代替。</li>\n<li>event.stopProgagation()组织事件冒泡，可以用return false代替。</li>\n<li>event.target 触发事件的元素。</li>\n<li>event.pageX event.pageY,相对于页面的x，y坐标。</li>\n<li>event.which 不同事件含义不同，鼠标事件表示那个键，键盘事件表示键值。</li>\n<li>event.metaKey ctl键是否按下。</li>\n</ul>\n</li>\n<li>移除事件 unbind([type],[data]) <ul>\n<li>如果没有参数，表示删除所有事件。</li>\n<li>如果只提供type，表示移除所有type对应的事件回调。</li>\n<li>如果传递了2个参数，表示对应的处理函数会被删除。</li>\n</ul>\n</li>\n<li>单次事件 one(type, [data], fn);执行一次后，事件回被移除。</li>\n<li><p>事件模拟</p>\n<ul>\n<li>原生事件 $(‘#btn’).trigger(‘click’)或者$(‘#btn’).click();</li>\n<li>自定义事件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#btn'</span>).bind(<span class=\"string\">'myClick'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'#test'</span>).append(<span class=\"string\">'&amp;lt;p&gt;我的自定义事件&amp;lt;/p&gt;'</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">'#btn'</span>).trigger(<span class=\"string\">'myClick'</span>); <span class=\"comment\">//触发事件。</span></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`    </span></span><br><span class=\"line\"><span class=\"string\">- 传递数据</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>javascript</span><br><span class=\"line\">$(<span class=\"string\">'#btn'</span>).bind(<span class=\"string\">'myClick'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event, msg1, msg2</span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'#test'</span>).append(<span class=\"string\">'&amp;lt;p&gt;我的自定义事件&amp;lt;/p&gt;'</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">'#btn'</span>).trigger(<span class=\"string\">'myClick'</span>. [<span class=\"string\">'参数1'</span>，<span class=\"string\">'参数2'</span>]); <span class=\"comment\">//触发事件。</span></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`   </span></span><br><span class=\"line\"><span class=\"string\">- 执行默认操作 triggerHandler，例如，只触发focus事件，但是不获取焦点（浏览器默认行为）</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>javascript</span><br><span class=\"line\">$(<span class=\"string\">'input'</span>).triggerHandler(<span class=\"string\">'focus'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>事件命名空间</p>\n<ul>\n<li>添加命名空间<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#div'</span>).bind(<span class=\"string\">'mouseover.plugin'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">$(<span class=\"string\">'#btn'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'#div'</span>).unbind(<span class=\"string\">'.plugin'</span>); <span class=\"comment\">//移除上面的事件。</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h2><ul>\n<li>show(duration) 显示元素，duration不为0时，表示显示动画。将元素display属性从’none‘设置为原来的值</li>\n<li>hide(duration) 隐藏元素，duration不为0时，表示隐藏动画。将元素display属性设置为’none’</li>\n<li>fadeIn(duration) 与show一样，但是不改变display样式。</li>\n<li>fadeOut(duration) 与hide一样，但是不改变display样式。</li>\n<li>slideUp(duration)和slideDown(duration)，只改变高度。</li>\n<li><p>animate(param, speed, callback)</p>\n<ul>\n<li>param 包含样式属性值，如{left: ‘400px’, top: ‘400px’}，可累加或累减，如{left: ‘+=400px’}</li>\n<li>speed 动画时间</li>\n<li><p>callback 动画完成回调<br>-累加动画</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#panel'</span>).animate(&#123;<span class=\"attr\">left</span>:<span class=\"string\">'400px'</span>, <span class=\"attr\">height</span>:<span class=\"string\">'200px'</span>, <span class=\"attr\">opacity</span>:<span class=\"number\">1</span>&#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\">    .animate(&#123;<span class=\"attr\">top</span>:<span class=\"string\">'200px'</span>, <span class=\"attr\">width</span>:<span class=\"string\">'200px'</span>&#125;, <span class=\"number\">3000</span>， <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        consle.log(<span class=\"string\">'animate done'</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .fadeOut(<span class=\"string\">'slow'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>停止动画stop([clearQueue], [gotoEnd])</p>\n</li>\n<li>判断是否处于动画状态 $(element).is(‘:animated’)</li>\n<li>延迟动画delay(duration),延迟一段时间开始动画，$(this).animate({left:’400px’}).delay(200);</li>\n<li>其他动画方法<ul>\n<li>toggle(speed, [callback]) 显示/隐藏元素</li>\n<li>slideToggle(speed, [easing], [callback])通过改变高度来显示/隐藏元素</li>\n<li>fadeTo(speed, opacity, [callback]) 通过改变不透明度来显示/隐藏元素</li>\n<li>fadeToggle(speed, [easing], [callback]) 通过不透明度来显示/隐藏元素。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"第四章-jQuery中的事件和动画\"><a href=\"#第四章-jQuery中的事件和动画\" class=\"headerlink\" title=\"第四章 jQuery中的事件和动画\"></a>第四章 jQuery中的事件和动画</h2><ul>\n<li>window.onload方法，相当于<code>jQuery</code>中的$(window).load(function(){})方法。都是等文档中的所有元素加载完成时调用，包括关联css文件和javascript文件。</li>\n<li>$(document).ready(function() {})则不会等待关联文件下载完，在DOM准备好之后就会调用。</li>\n<li>$(window).load(function(){})可以调用多次，都会执行，而window.onload只会调用最后一次赋予的函数。</li>\n<li>$(document).ready(function() {})可以简写为$(function() {});</li>\n</ul>","more":"<h3 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h3><ul>\n<li><p>bind(type [, data], fn);第1个参数是事件类型，包括focus、load、click、dbclik等。，第2个参数可选，作为event.data传递，第3个参数是回调函数。示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'#panel h5.head'</span>).bind(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        $(<span class=\"keyword\">this</span>).next().show();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>bind函数可以级联，如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).bind(<span class=\"string\">'mouseover'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"keyword\">this</span>).next().show();</span><br><span class=\"line\">&#125;).bind(<span class=\"string\">'mouseout'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>bind可以简写，如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"keyword\">this</span>).next().toggle();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>合成事件</p>\n<p>  <code>jQuery</code>有两个合成事件，hover()和toggle(),都有两个回调函数作为参数，可以看成是语法糖。hover表示移入移出两个事件，toggle表示前后两次点击事件，如</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).hover(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"keyword\">this</span>).next().show(); <span class=\"comment\">//划过时显示下一个元素</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide(); <span class=\"comment\">//划出隐藏下一个元素</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).toggle(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"keyword\">this</span>).next().show(); <span class=\"comment\">//点击时显示下一个元素</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide(); <span class=\"comment\">//再次点击时隐藏下一个元素</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>事件对象的属性</p>\n<ul>\n<li>event.type 事件类型，字符串格式，如’click’, ‘dbclick’, ‘load’等。</li>\n<li>event.preventDefault()阻止默认行为，可以用return false代替。</li>\n<li>event.stopProgagation()组织事件冒泡，可以用return false代替。</li>\n<li>event.target 触发事件的元素。</li>\n<li>event.pageX event.pageY,相对于页面的x，y坐标。</li>\n<li>event.which 不同事件含义不同，鼠标事件表示那个键，键盘事件表示键值。</li>\n<li>event.metaKey ctl键是否按下。</li>\n</ul>\n</li>\n<li>移除事件 unbind([type],[data]) <ul>\n<li>如果没有参数，表示删除所有事件。</li>\n<li>如果只提供type，表示移除所有type对应的事件回调。</li>\n<li>如果传递了2个参数，表示对应的处理函数会被删除。</li>\n</ul>\n</li>\n<li>单次事件 one(type, [data], fn);执行一次后，事件回被移除。</li>\n<li><p>事件模拟</p>\n<ul>\n<li>原生事件 $(‘#btn’).trigger(‘click’)或者$(‘#btn’).click();</li>\n<li>自定义事件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#btn'</span>).bind(<span class=\"string\">'myClick'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'#test'</span>).append(<span class=\"string\">'&amp;lt;p&gt;我的自定义事件&amp;lt;/p&gt;'</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">'#btn'</span>).trigger(<span class=\"string\">'myClick'</span>); <span class=\"comment\">//触发事件。</span></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`    </span></span><br><span class=\"line\"><span class=\"string\">- 传递数据</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>javascript</span><br><span class=\"line\">$(<span class=\"string\">'#btn'</span>).bind(<span class=\"string\">'myClick'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event, msg1, msg2</span>)</span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'#test'</span>).append(<span class=\"string\">'&amp;lt;p&gt;我的自定义事件&amp;lt;/p&gt;'</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">'#btn'</span>).trigger(<span class=\"string\">'myClick'</span>. [<span class=\"string\">'参数1'</span>，<span class=\"string\">'参数2'</span>]); <span class=\"comment\">//触发事件。</span></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`   </span></span><br><span class=\"line\"><span class=\"string\">- 执行默认操作 triggerHandler，例如，只触发focus事件，但是不获取焦点（浏览器默认行为）</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>javascript</span><br><span class=\"line\">$(<span class=\"string\">'input'</span>).triggerHandler(<span class=\"string\">'focus'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>事件命名空间</p>\n<ul>\n<li>添加命名空间<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#div'</span>).bind(<span class=\"string\">'mouseover.plugin'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">$(<span class=\"string\">'#btn'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">'#div'</span>).unbind(<span class=\"string\">'.plugin'</span>); <span class=\"comment\">//移除上面的事件。</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h2><ul>\n<li>show(duration) 显示元素，duration不为0时，表示显示动画。将元素display属性从’none‘设置为原来的值</li>\n<li>hide(duration) 隐藏元素，duration不为0时，表示隐藏动画。将元素display属性设置为’none’</li>\n<li>fadeIn(duration) 与show一样，但是不改变display样式。</li>\n<li>fadeOut(duration) 与hide一样，但是不改变display样式。</li>\n<li>slideUp(duration)和slideDown(duration)，只改变高度。</li>\n<li><p>animate(param, speed, callback)</p>\n<ul>\n<li>param 包含样式属性值，如{left: ‘400px’, top: ‘400px’}，可累加或累减，如{left: ‘+=400px’}</li>\n<li>speed 动画时间</li>\n<li><p>callback 动画完成回调<br>-累加动画</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#panel'</span>).animate(&#123;<span class=\"attr\">left</span>:<span class=\"string\">'400px'</span>, <span class=\"attr\">height</span>:<span class=\"string\">'200px'</span>, <span class=\"attr\">opacity</span>:<span class=\"number\">1</span>&#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\">    .animate(&#123;<span class=\"attr\">top</span>:<span class=\"string\">'200px'</span>, <span class=\"attr\">width</span>:<span class=\"string\">'200px'</span>&#125;, <span class=\"number\">3000</span>， <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        consle.log(<span class=\"string\">'animate done'</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .fadeOut(<span class=\"string\">'slow'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>停止动画stop([clearQueue], [gotoEnd])</p>\n</li>\n<li>判断是否处于动画状态 $(element).is(‘:animated’)</li>\n<li>延迟动画delay(duration),延迟一段时间开始动画，$(this).animate({left:’400px’}).delay(200);</li>\n<li>其他动画方法<ul>\n<li>toggle(speed, [callback]) 显示/隐藏元素</li>\n<li>slideToggle(speed, [easing], [callback])通过改变高度来显示/隐藏元素</li>\n<li>fadeTo(speed, opacity, [callback]) 通过改变不透明度来显示/隐藏元素</li>\n<li>fadeToggle(speed, [easing], [callback]) 通过不透明度来显示/隐藏元素。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>"},{"title":"Spring Boot的枚举最佳实践","date":"2019-04-18T09:31:39.000Z","_content":"\n在跟前端交互的过程中，会经常遇到枚举值的处理，这些枚举值往往还会存入数据库，经过一段时间的摸索，自己总结了一套不错的实践方法。\n\n首先在DAO层，定义一个枚举内省\n```java\n\npublic enum UserOrderType {\n    SELL(\"0\"),\n    BUY(\"1\");\n\n    private String value;\n\n    private UserOrderType(String value) {\n        this.value = value;\n    }\n\n    public static UserOrderType fromValue(String value) {\n        for(UserOrderType type : values()) {\n            if(type.value.equalsIgnoreCase(value)) {\n                return type;\n            }\n        }\n        return null;\n    }\n\n    @JsonValue\n    public String getValue() {\n        return value;\n    }\n}\n```\n\n上面的定义中，为每个枚举类型声明一个字符串，另外\n```java\n    @JsonValue\n    public String getValue() {\n        return value;\n    }\n```\n这个是避免rest接口返回给客户端的时候，枚举类型默认转换为字面量，如SELL枚举类型就会转换为”SELL“字符串。\n\n另外，定义一个与之对应的converter类。\n```java\nimport org.springframework.core.convert.converter.Converter;\n\nimport javax.persistence.AttributeConverter;\n\npublic class UserOrderTypeConverter implements Converter<String, UserOrderType>, AttributeConverter<UserOrderType, String> {\n    @Override\n    public UserOrderType convert(String s) {\n        return UserOrderType.fromValue(s);\n    }\n\n    @Override\n    public String convertToDatabaseColumn(UserOrderType attribute) {\n        return attribute.getValue();\n    }\n\n    @Override\n    public UserOrderType convertToEntityAttribute(String dbData) {\n        return UserOrderType.fromValue(dbData);\n    }\n}\n```\n这个convert类，实现了两个接口，一个org.springframework.core.convert.converter.Converter，用于转换客户端传过来的字符串值，需要注册\n```java\n@Configuration\npublic class GlobalParamConverterConfig {\n    @Autowired\n    private RequestMappingHandlerAdapter handlerAdapter;\n\n    @PostConstruct\n    public void addConversionConfig() {\n        ConfigurableWebBindingInitializer initializer = (ConfigurableWebBindingInitializer)handlerAdapter.getWebBindingInitializer();\n        if (initializer.getConversionService() != null) {\n            GenericConversionService genericConversionService = (GenericConversionService)initializer.getConversionService();\n            genericConversionService.addConverter(new UserOrderTypeConverter());\n        }\n    }\n}\n```\n\n另一个接口是javax.persistence.AttributeConverter，用于数据库的持久化工作。\n\n所以，在DAO层里的引用该枚举的时候，可以像这样：\n```java\n@Entity\n@Table(name = \"t_user_order\")\n@Builder\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class UserOrder implements Serializable {\n    @Column(name = \"order_type\", nullable = false)\n    @Convert(converter = UserOrderTypeConverter.class)\n    private UserOrderType orderType;\n}\n```\n\n这里不使用@Enumerated注解，而是用@Convert注解。\n\n@Enumerated有两种保存方式，\n- ORDINAL 保存序号，如果往中间插入枚举值的话，会引起乱序问题。\n- STRING 会增加数据量，而且如果发现枚举值拼写错了，也不好改正。\n\n\n\n","source":"_posts/converter-solution.md","raw":"---\ntitle: Spring Boot的枚举最佳实践\ndate: 2019-04-18 17:31:39\ntags: [spring boot, enum]\n---\n\n在跟前端交互的过程中，会经常遇到枚举值的处理，这些枚举值往往还会存入数据库，经过一段时间的摸索，自己总结了一套不错的实践方法。\n\n首先在DAO层，定义一个枚举内省\n```java\n\npublic enum UserOrderType {\n    SELL(\"0\"),\n    BUY(\"1\");\n\n    private String value;\n\n    private UserOrderType(String value) {\n        this.value = value;\n    }\n\n    public static UserOrderType fromValue(String value) {\n        for(UserOrderType type : values()) {\n            if(type.value.equalsIgnoreCase(value)) {\n                return type;\n            }\n        }\n        return null;\n    }\n\n    @JsonValue\n    public String getValue() {\n        return value;\n    }\n}\n```\n\n上面的定义中，为每个枚举类型声明一个字符串，另外\n```java\n    @JsonValue\n    public String getValue() {\n        return value;\n    }\n```\n这个是避免rest接口返回给客户端的时候，枚举类型默认转换为字面量，如SELL枚举类型就会转换为”SELL“字符串。\n\n另外，定义一个与之对应的converter类。\n```java\nimport org.springframework.core.convert.converter.Converter;\n\nimport javax.persistence.AttributeConverter;\n\npublic class UserOrderTypeConverter implements Converter<String, UserOrderType>, AttributeConverter<UserOrderType, String> {\n    @Override\n    public UserOrderType convert(String s) {\n        return UserOrderType.fromValue(s);\n    }\n\n    @Override\n    public String convertToDatabaseColumn(UserOrderType attribute) {\n        return attribute.getValue();\n    }\n\n    @Override\n    public UserOrderType convertToEntityAttribute(String dbData) {\n        return UserOrderType.fromValue(dbData);\n    }\n}\n```\n这个convert类，实现了两个接口，一个org.springframework.core.convert.converter.Converter，用于转换客户端传过来的字符串值，需要注册\n```java\n@Configuration\npublic class GlobalParamConverterConfig {\n    @Autowired\n    private RequestMappingHandlerAdapter handlerAdapter;\n\n    @PostConstruct\n    public void addConversionConfig() {\n        ConfigurableWebBindingInitializer initializer = (ConfigurableWebBindingInitializer)handlerAdapter.getWebBindingInitializer();\n        if (initializer.getConversionService() != null) {\n            GenericConversionService genericConversionService = (GenericConversionService)initializer.getConversionService();\n            genericConversionService.addConverter(new UserOrderTypeConverter());\n        }\n    }\n}\n```\n\n另一个接口是javax.persistence.AttributeConverter，用于数据库的持久化工作。\n\n所以，在DAO层里的引用该枚举的时候，可以像这样：\n```java\n@Entity\n@Table(name = \"t_user_order\")\n@Builder\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class UserOrder implements Serializable {\n    @Column(name = \"order_type\", nullable = false)\n    @Convert(converter = UserOrderTypeConverter.class)\n    private UserOrderType orderType;\n}\n```\n\n这里不使用@Enumerated注解，而是用@Convert注解。\n\n@Enumerated有两种保存方式，\n- ORDINAL 保存序号，如果往中间插入枚举值的话，会引起乱序问题。\n- STRING 会增加数据量，而且如果发现枚举值拼写错了，也不好改正。\n\n\n\n","slug":"converter-solution","published":1,"updated":"2019-06-21T10:13:25.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aandn000jbiuin8ft8ub0","content":"<p>在跟前端交互的过程中，会经常遇到枚举值的处理，这些枚举值往往还会存入数据库，经过一段时间的摸索，自己总结了一套不错的实践方法。</p>\n<p>首先在DAO层，定义一个枚举内省<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> UserOrderType &#123;</span><br><span class=\"line\">    SELL(<span class=\"string\">\"0\"</span>),</span><br><span class=\"line\">    BUY(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">UserOrderType</span><span class=\"params\">(String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> UserOrderType <span class=\"title\">fromValue</span><span class=\"params\">(String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(UserOrderType type : values()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(type.value.equalsIgnoreCase(value)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> type;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@JsonValue</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的定义中，为每个枚举类型声明一个字符串，另外<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonValue</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个是避免rest接口返回给客户端的时候，枚举类型默认转换为字面量，如SELL枚举类型就会转换为”SELL“字符串。</p>\n<p>另外，定义一个与之对应的converter类。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.persistence.AttributeConverter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserOrderTypeConverter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Converter</span>&lt;<span class=\"title\">String</span>, <span class=\"title\">UserOrderType</span>&gt;, <span class=\"title\">AttributeConverter</span>&lt;<span class=\"title\">UserOrderType</span>, <span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UserOrderType <span class=\"title\">convert</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> UserOrderType.fromValue(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">convertToDatabaseColumn</span><span class=\"params\">(UserOrderType attribute)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> attribute.getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UserOrderType <span class=\"title\">convertToEntityAttribute</span><span class=\"params\">(String dbData)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> UserOrderType.fromValue(dbData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个convert类，实现了两个接口，一个org.springframework.core.convert.converter.Converter，用于转换客户端传过来的字符串值，需要注册<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GlobalParamConverterConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RequestMappingHandlerAdapter handlerAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addConversionConfig</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ConfigurableWebBindingInitializer initializer = (ConfigurableWebBindingInitializer)handlerAdapter.getWebBindingInitializer();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initializer.getConversionService() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            GenericConversionService genericConversionService = (GenericConversionService)initializer.getConversionService();</span><br><span class=\"line\">            genericConversionService.addConverter(<span class=\"keyword\">new</span> UserOrderTypeConverter());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>另一个接口是javax.persistence.AttributeConverter，用于数据库的持久化工作。</p>\n<p>所以，在DAO层里的引用该枚举的时候，可以像这样：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table</span>(name = <span class=\"string\">\"t_user_order\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Builder</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserOrder</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"order_type\"</span>, nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Convert</span>(converter = UserOrderTypeConverter.class)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserOrderType orderType;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里不使用@Enumerated注解，而是用@Convert注解。</p>\n<p>@Enumerated有两种保存方式，</p>\n<ul>\n<li>ORDINAL 保存序号，如果往中间插入枚举值的话，会引起乱序问题。</li>\n<li>STRING 会增加数据量，而且如果发现枚举值拼写错了，也不好改正。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>在跟前端交互的过程中，会经常遇到枚举值的处理，这些枚举值往往还会存入数据库，经过一段时间的摸索，自己总结了一套不错的实践方法。</p>\n<p>首先在DAO层，定义一个枚举内省<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> UserOrderType &#123;</span><br><span class=\"line\">    SELL(<span class=\"string\">\"0\"</span>),</span><br><span class=\"line\">    BUY(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">UserOrderType</span><span class=\"params\">(String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> UserOrderType <span class=\"title\">fromValue</span><span class=\"params\">(String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(UserOrderType type : values()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(type.value.equalsIgnoreCase(value)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> type;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@JsonValue</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的定义中，为每个枚举类型声明一个字符串，另外<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonValue</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个是避免rest接口返回给客户端的时候，枚举类型默认转换为字面量，如SELL枚举类型就会转换为”SELL“字符串。</p>\n<p>另外，定义一个与之对应的converter类。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.persistence.AttributeConverter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserOrderTypeConverter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Converter</span>&lt;<span class=\"title\">String</span>, <span class=\"title\">UserOrderType</span>&gt;, <span class=\"title\">AttributeConverter</span>&lt;<span class=\"title\">UserOrderType</span>, <span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UserOrderType <span class=\"title\">convert</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> UserOrderType.fromValue(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">convertToDatabaseColumn</span><span class=\"params\">(UserOrderType attribute)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> attribute.getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UserOrderType <span class=\"title\">convertToEntityAttribute</span><span class=\"params\">(String dbData)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> UserOrderType.fromValue(dbData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个convert类，实现了两个接口，一个org.springframework.core.convert.converter.Converter，用于转换客户端传过来的字符串值，需要注册<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GlobalParamConverterConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RequestMappingHandlerAdapter handlerAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addConversionConfig</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ConfigurableWebBindingInitializer initializer = (ConfigurableWebBindingInitializer)handlerAdapter.getWebBindingInitializer();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initializer.getConversionService() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            GenericConversionService genericConversionService = (GenericConversionService)initializer.getConversionService();</span><br><span class=\"line\">            genericConversionService.addConverter(<span class=\"keyword\">new</span> UserOrderTypeConverter());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>另一个接口是javax.persistence.AttributeConverter，用于数据库的持久化工作。</p>\n<p>所以，在DAO层里的引用该枚举的时候，可以像这样：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table</span>(name = <span class=\"string\">\"t_user_order\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Builder</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserOrder</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"order_type\"</span>, nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Convert</span>(converter = UserOrderTypeConverter.class)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserOrderType orderType;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里不使用@Enumerated注解，而是用@Convert注解。</p>\n<p>@Enumerated有两种保存方式，</p>\n<ul>\n<li>ORDINAL 保存序号，如果往中间插入枚举值的话，会引起乱序问题。</li>\n<li>STRING 会增加数据量，而且如果发现枚举值拼写错了，也不好改正。</li>\n</ul>\n"},{"title":".gitignore无效，不能过滤某些文件","date":"2016-11-06T10:03:31.000Z","_content":"\n利用.gitignore过滤文件，如编译过程中的中间文件，等等，这些文件不需要被追踪管理。\n\n现象：\n\n在.gitignore添加file1文件，以过滤该文件，但是通过Git status查看仍显示file1文件的状态。\n\n<!--more-->\n\n原因：\n\n在git库中已存在了这个文件，之前push提交过该文件。\n\n.gitignore文件只对还没有加入版本管理的文件起作用，如果之前已经用git把这些文件纳入了版本库，就不起作用了\n\n解决：\n\n需要在git库中删除该文件，并更新。\n\n然后再次git status查看状态，file1文件不再显示状态。\n","source":"_posts/gitignore无效，不能过滤某些文件.md","raw":"---\ntitle: .gitignore无效，不能过滤某些文件\ndate: 2016-11-6 18:03:31\ntags: [git, .gitignore]\n---\n\n利用.gitignore过滤文件，如编译过程中的中间文件，等等，这些文件不需要被追踪管理。\n\n现象：\n\n在.gitignore添加file1文件，以过滤该文件，但是通过Git status查看仍显示file1文件的状态。\n\n<!--more-->\n\n原因：\n\n在git库中已存在了这个文件，之前push提交过该文件。\n\n.gitignore文件只对还没有加入版本管理的文件起作用，如果之前已经用git把这些文件纳入了版本库，就不起作用了\n\n解决：\n\n需要在git库中删除该文件，并更新。\n\n然后再次git status查看状态，file1文件不再显示状态。\n","slug":"gitignore无效，不能过滤某些文件","published":1,"updated":"2019-01-03T02:48:56.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aando000lbiui1nputuds","content":"<p>利用.gitignore过滤文件，如编译过程中的中间文件，等等，这些文件不需要被追踪管理。</p>\n<p>现象：</p>\n<p>在.gitignore添加file1文件，以过滤该文件，但是通过Git status查看仍显示file1文件的状态。</p>\n<a id=\"more\"></a>\n<p>原因：</p>\n<p>在git库中已存在了这个文件，之前push提交过该文件。</p>\n<p>.gitignore文件只对还没有加入版本管理的文件起作用，如果之前已经用git把这些文件纳入了版本库，就不起作用了</p>\n<p>解决：</p>\n<p>需要在git库中删除该文件，并更新。</p>\n<p>然后再次git status查看状态，file1文件不再显示状态。</p>\n","site":{"data":{}},"excerpt":"<p>利用.gitignore过滤文件，如编译过程中的中间文件，等等，这些文件不需要被追踪管理。</p>\n<p>现象：</p>\n<p>在.gitignore添加file1文件，以过滤该文件，但是通过Git status查看仍显示file1文件的状态。</p>","more":"<p>原因：</p>\n<p>在git库中已存在了这个文件，之前push提交过该文件。</p>\n<p>.gitignore文件只对还没有加入版本管理的文件起作用，如果之前已经用git把这些文件纳入了版本库，就不起作用了</p>\n<p>解决：</p>\n<p>需要在git库中删除该文件，并更新。</p>\n<p>然后再次git status查看状态，file1文件不再显示状态。</p>"},{"title":"解决 /dev/kvm is not found 的问题","date":"2016-11-28T11:44:23.000Z","_content":"\n## 问题出现环境\n- Ubuntu 12.04\n- Android Studio 2.2.2\n\n## 解决步骤\n### 开启VT-x\n在ubuntu上使用Android Studio创建模拟器时，会提示一个错误：\n```\n/dev/kvm is not found\n```\n并且提示要在*BIOS*里面开启<font size='4em'>**VT-x**</font>。\n\n<!-- more -->\n重启电脑，按*DEL*键进入*BIOS*,发现确实没有启用，于是启用后再此重启电脑。\n\n此时打开Android Studio，仍然提示一样的错误。\n\n再次在网上搜寻，发现如下解决方案，记录一下。\n\n[http://askubuntu.com/questions/600727/replacement-for-haxm-on-ubuntu-says-intel-x86-emulator-accelerator-is-not-comp](http://askubuntu.com/questions/600727/replacement-for-haxm-on-ubuntu-says-intel-x86-emulator-accelerator-is-not-comp)\n\n### \nCheck if your CPU supports hardware virtualization, by typing:\n```\negrep -c '(vmx|svm)' /proc/cpuinfo\n```\nIf the result is 0, your CPU does not support hardware virtualization, which is necessary to run the KVM. If you get 1 or more, that means you’re fine.\n\nNext, install KVM. First make sure if your processor supports KVM by typing:\n```\nkvm-ok\n```\nYou will see this if that’s the case:\n\nINFO: Your CPU supports KVM extensions INFO: /dev/kvm exists KVM acceleration can be used\nIf this is the result, you need to turn on Intel VT in BIOS:\n\nINFO: KVM is disabled by your BIOS HINT: Enter your BIOS setup and enable Virtualization Technology (VT), and then hard poweroff/poweron your system KVM acceleration can NOT be used\nThe next step is to install the KVM and a few other packages needed. To do so, type:\n```\nsudo apt-get install qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils\n```\nAdd your user to some groups, replacing by your own username:\n```\nsudo adduser <user> libvirtd\nsudo adduser <user> kvm\n```\nCheck if everything is ok:\n```\nsudo virsh -c qemu:///system list\n```","source":"_posts/fix-dev-kvm-is-not-found.md","raw":"---\ntitle: 解决 /dev/kvm is not found 的问题\ntags:\n  - android\n  - ubuntu\n  - android studio\ndate: 2016-11-28 19:44:23\n---\n\n## 问题出现环境\n- Ubuntu 12.04\n- Android Studio 2.2.2\n\n## 解决步骤\n### 开启VT-x\n在ubuntu上使用Android Studio创建模拟器时，会提示一个错误：\n```\n/dev/kvm is not found\n```\n并且提示要在*BIOS*里面开启<font size='4em'>**VT-x**</font>。\n\n<!-- more -->\n重启电脑，按*DEL*键进入*BIOS*,发现确实没有启用，于是启用后再此重启电脑。\n\n此时打开Android Studio，仍然提示一样的错误。\n\n再次在网上搜寻，发现如下解决方案，记录一下。\n\n[http://askubuntu.com/questions/600727/replacement-for-haxm-on-ubuntu-says-intel-x86-emulator-accelerator-is-not-comp](http://askubuntu.com/questions/600727/replacement-for-haxm-on-ubuntu-says-intel-x86-emulator-accelerator-is-not-comp)\n\n### \nCheck if your CPU supports hardware virtualization, by typing:\n```\negrep -c '(vmx|svm)' /proc/cpuinfo\n```\nIf the result is 0, your CPU does not support hardware virtualization, which is necessary to run the KVM. If you get 1 or more, that means you’re fine.\n\nNext, install KVM. First make sure if your processor supports KVM by typing:\n```\nkvm-ok\n```\nYou will see this if that’s the case:\n\nINFO: Your CPU supports KVM extensions INFO: /dev/kvm exists KVM acceleration can be used\nIf this is the result, you need to turn on Intel VT in BIOS:\n\nINFO: KVM is disabled by your BIOS HINT: Enter your BIOS setup and enable Virtualization Technology (VT), and then hard poweroff/poweron your system KVM acceleration can NOT be used\nThe next step is to install the KVM and a few other packages needed. To do so, type:\n```\nsudo apt-get install qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils\n```\nAdd your user to some groups, replacing by your own username:\n```\nsudo adduser <user> libvirtd\nsudo adduser <user> kvm\n```\nCheck if everything is ok:\n```\nsudo virsh -c qemu:///system list\n```","slug":"fix-dev-kvm-is-not-found","published":1,"updated":"2019-01-03T02:48:56.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aandt000nbiuiuu9d0qwy","content":"<h2 id=\"问题出现环境\"><a href=\"#问题出现环境\" class=\"headerlink\" title=\"问题出现环境\"></a>问题出现环境</h2><ul>\n<li>Ubuntu 12.04</li>\n<li>Android Studio 2.2.2</li>\n</ul>\n<h2 id=\"解决步骤\"><a href=\"#解决步骤\" class=\"headerlink\" title=\"解决步骤\"></a>解决步骤</h2><h3 id=\"开启VT-x\"><a href=\"#开启VT-x\" class=\"headerlink\" title=\"开启VT-x\"></a>开启VT-x</h3><p>在ubuntu上使用Android Studio创建模拟器时，会提示一个错误：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/kvm is not found</span><br></pre></td></tr></table></figure></p>\n<p>并且提示要在<em>BIOS</em>里面开启<font size=\"4em\"><strong>VT-x</strong></font>。</p>\n<a id=\"more\"></a>\n<p>重启电脑，按<em>DEL</em>键进入<em>BIOS</em>,发现确实没有启用，于是启用后再此重启电脑。</p>\n<p>此时打开Android Studio，仍然提示一样的错误。</p>\n<p>再次在网上搜寻，发现如下解决方案，记录一下。</p>\n<p><a href=\"http://askubuntu.com/questions/600727/replacement-for-haxm-on-ubuntu-says-intel-x86-emulator-accelerator-is-not-comp\" target=\"_blank\" rel=\"noopener\">http://askubuntu.com/questions/600727/replacement-for-haxm-on-ubuntu-says-intel-x86-emulator-accelerator-is-not-comp</a></p>\n<p>###<br>Check if your CPU supports hardware virtualization, by typing:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egrep -c &apos;(vmx|svm)&apos; /proc/cpuinfo</span><br></pre></td></tr></table></figure></p>\n<p>If the result is 0, your CPU does not support hardware virtualization, which is necessary to run the KVM. If you get 1 or more, that means you’re fine.</p>\n<p>Next, install KVM. First make sure if your processor supports KVM by typing:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kvm-ok</span><br></pre></td></tr></table></figure></p>\n<p>You will see this if that’s the case:</p>\n<p>INFO: Your CPU supports KVM extensions INFO: /dev/kvm exists KVM acceleration can be used<br>If this is the result, you need to turn on Intel VT in BIOS:</p>\n<p>INFO: KVM is disabled by your BIOS HINT: Enter your BIOS setup and enable Virtualization Technology (VT), and then hard poweroff/poweron your system KVM acceleration can NOT be used<br>The next step is to install the KVM and a few other packages needed. To do so, type:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils</span><br></pre></td></tr></table></figure></p>\n<p>Add your user to some groups, replacing by your own username:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo adduser &lt;user&gt; libvirtd</span><br><span class=\"line\">sudo adduser &lt;user&gt; kvm</span><br></pre></td></tr></table></figure></p>\n<p>Check if everything is ok:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo virsh -c qemu:///system list</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"问题出现环境\"><a href=\"#问题出现环境\" class=\"headerlink\" title=\"问题出现环境\"></a>问题出现环境</h2><ul>\n<li>Ubuntu 12.04</li>\n<li>Android Studio 2.2.2</li>\n</ul>\n<h2 id=\"解决步骤\"><a href=\"#解决步骤\" class=\"headerlink\" title=\"解决步骤\"></a>解决步骤</h2><h3 id=\"开启VT-x\"><a href=\"#开启VT-x\" class=\"headerlink\" title=\"开启VT-x\"></a>开启VT-x</h3><p>在ubuntu上使用Android Studio创建模拟器时，会提示一个错误：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/kvm is not found</span><br></pre></td></tr></table></figure></p>\n<p>并且提示要在<em>BIOS</em>里面开启<font size=\"4em\"><strong>VT-x</strong></font>。</p>","more":"<p>重启电脑，按<em>DEL</em>键进入<em>BIOS</em>,发现确实没有启用，于是启用后再此重启电脑。</p>\n<p>此时打开Android Studio，仍然提示一样的错误。</p>\n<p>再次在网上搜寻，发现如下解决方案，记录一下。</p>\n<p><a href=\"http://askubuntu.com/questions/600727/replacement-for-haxm-on-ubuntu-says-intel-x86-emulator-accelerator-is-not-comp\" target=\"_blank\" rel=\"noopener\">http://askubuntu.com/questions/600727/replacement-for-haxm-on-ubuntu-says-intel-x86-emulator-accelerator-is-not-comp</a></p>\n<p>###<br>Check if your CPU supports hardware virtualization, by typing:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egrep -c &apos;(vmx|svm)&apos; /proc/cpuinfo</span><br></pre></td></tr></table></figure></p>\n<p>If the result is 0, your CPU does not support hardware virtualization, which is necessary to run the KVM. If you get 1 or more, that means you’re fine.</p>\n<p>Next, install KVM. First make sure if your processor supports KVM by typing:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kvm-ok</span><br></pre></td></tr></table></figure></p>\n<p>You will see this if that’s the case:</p>\n<p>INFO: Your CPU supports KVM extensions INFO: /dev/kvm exists KVM acceleration can be used<br>If this is the result, you need to turn on Intel VT in BIOS:</p>\n<p>INFO: KVM is disabled by your BIOS HINT: Enter your BIOS setup and enable Virtualization Technology (VT), and then hard poweroff/poweron your system KVM acceleration can NOT be used<br>The next step is to install the KVM and a few other packages needed. To do so, type:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils</span><br></pre></td></tr></table></figure></p>\n<p>Add your user to some groups, replacing by your own username:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo adduser &lt;user&gt; libvirtd</span><br><span class=\"line\">sudo adduser &lt;user&gt; kvm</span><br></pre></td></tr></table></figure></p>\n<p>Check if everything is ok:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo virsh -c qemu:///system list</span><br></pre></td></tr></table></figure></p>"},{"title":"git配置user.name和user.email","date":"2016-11-15T10:02:54.000Z","_content":"\ngithub在统计提交的时候，会判断邮箱是否跟github的登陆邮箱匹配，不匹配则不计算活跃度，即不生成小绿块。\n\n获取配置\n```\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email\naaa@aaa.com\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.name\naaa\n```\n<!--more-->\n\n设置当前仓库的user.name/user.email\n```\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa@aaa.com\n```\n设置全局user.name/user.email\n```\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.name yinlijun\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.email yinlijun2004@gmail.com\n```\n如果当前仓库未设置user.name/user.email则采用全局的user.name/user.email，否则当前仓库的user.name/user.email会覆盖全局的user.name/user.email。","source":"_posts/git配置user-name和user-email.md","raw":"---\ntitle: git配置user.name和user.email\ndate: 2016-11-15 18:02:54\ntags: git\n---\n\ngithub在统计提交的时候，会判断邮箱是否跟github的登陆邮箱匹配，不匹配则不计算活跃度，即不生成小绿块。\n\n获取配置\n```\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email\naaa@aaa.com\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.name\naaa\n```\n<!--more-->\n\n设置当前仓库的user.name/user.email\n```\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa@aaa.com\n```\n设置全局user.name/user.email\n```\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.name yinlijun\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.email yinlijun2004@gmail.com\n```\n如果当前仓库未设置user.name/user.email则采用全局的user.name/user.email，否则当前仓库的user.name/user.email会覆盖全局的user.name/user.email。","slug":"git配置user-name和user-email","published":1,"updated":"2019-01-03T02:48:56.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aandx000pbiuij89u7dvq","content":"<p>github在统计提交的时候，会判断邮箱是否跟github的登陆邮箱匹配，不匹配则不计算活跃度，即不生成小绿块。</p>\n<p>获取配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email</span><br><span class=\"line\">aaa@aaa.com</span><br><span class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.name</span><br><span class=\"line\">aaa</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>设置当前仓库的user.name/user.email<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa</span><br><span class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa@aaa.com</span><br></pre></td></tr></table></figure></p>\n<p>设置全局user.name/user.email<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.name yinlijun</span><br><span class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.email yinlijun2004@gmail.com</span><br></pre></td></tr></table></figure></p>\n<p>如果当前仓库未设置user.name/user.email则采用全局的user.name/user.email，否则当前仓库的user.name/user.email会覆盖全局的user.name/user.email。</p>\n","site":{"data":{}},"excerpt":"<p>github在统计提交的时候，会判断邮箱是否跟github的登陆邮箱匹配，不匹配则不计算活跃度，即不生成小绿块。</p>\n<p>获取配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email</span><br><span class=\"line\">aaa@aaa.com</span><br><span class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.name</span><br><span class=\"line\">aaa</span><br></pre></td></tr></table></figure></p>","more":"<p>设置当前仓库的user.name/user.email<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa</span><br><span class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa@aaa.com</span><br></pre></td></tr></table></figure></p>\n<p>设置全局user.name/user.email<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.name yinlijun</span><br><span class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.email yinlijun2004@gmail.com</span><br></pre></td></tr></table></figure></p>\n<p>如果当前仓库未设置user.name/user.email则采用全局的user.name/user.email，否则当前仓库的user.name/user.email会覆盖全局的user.name/user.email。</p>"},{"title":"部署HEXO博客到阿里云ECS","date":"2017-12-18T09:46:56.000Z","_content":"\n本文假设你具备如下条件：\n- 熟悉hexo操作\n- 熟悉linux基本指令\n- 熟悉express(nodejs)框架\n- 在github上已经部署了hexo博客\n\n<!--more-->\n\n## ECS准备\n### 购买ECS\n前往阿里云购买[ECS](https://ecs-buy.aliyun.com)，根据个人需要和财务状况，选择对应规模的ECS。\n我购买的是这个配置，费用是330.00¥。\n![img](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/a6b1134939a35cdf34dab8f9d564c777b7aafbb5518fae80c8450e0ba8d5280bf07d7e677b3b3c2028e2f7a5c778e5a8?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=1GE9BH_P%29%600QGAZLQY6E%7D0G.png&size=1024)\n\n### 配置ECS\n购买之后，可以远程登录ECS实例，可以选择网页登录，即点击上图的远程连接，此时需要输入远程连接密码。\n![img](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/8f23cd09eff9be82c51f1dcbe340257766d02aae3ea6c33a920a3fbdf917426660d0df1eecce1e99548aa7aafad45df3?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=2RK%5D3A%28ZCW9N7%7DRB801Q92V.png&size=1024)\n这个密码在创建ECS实例的时候会提供给你，点击确认之后，就可以登录root用户。\n\n我的本地是ubuntu系统，所以可以利用ssh登录。\n``` bash\nssh root@xx.xx.xx.xx\n```\n登录之后，创建一个非root用户。\n``` bash\nadduser yinlijun\n```\n切换到该用户\n``` bash\nsu yinlijun\n```\n### 上传本地公钥，方便部署。\n``` bash\nssh-copy-id -i ~/.ssh/id_rsa.pub yinlijun@xx.xx.xx.xx\n```\n\n如果需要绑定域名，还需要如下申请域名和备案：\n\n## 购买域名\n前往[阿里域名服务](https://wanwang.aliyun.com/domain)选购域名。\n\n## 域名备案\n前往[备案专区](https://beian.aliyun.com/)，进行备案，需要时间比较长，我花了12天，备案完成后，阿里云会给你的ECS续费，续费的天数就是你的备案花的天数。\n期间要填写资料，上传备案照片等等。\n\n备案完成之后，需要设置域名解析。\n![img](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/02ad73354fe97dd378b486349444aeebd3f5fc81ebe1853b1773f70416c90e7878a24b24afa25c27f122c679c20d523b?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=AJTAI%40%601%7DB3GU6Q%60ZWZO%24Z3.png&size=1024)\n上图的记录值，填写你的ECS的公网IP。\n\n### 在ECS上创建hexo仓库\n````\ngit init --bare ~/project/hexo.git\n````\n\n### 捕获post操作\n\n``` bash\ntouch ~/project/hexo.git/hooks/post-receive\n```\n\n输入如下内容\n\n``` bash\n#!/bin/bash -l\nGIT_REPO=<到hexo.git的目录>\nTMP_GIT_CLONE=<到临时blog的目录>\nPUBLIC_WWW=<到blog服务的目录/public/blog>\n\nrm -rf ${TMP_GIT_CLONE}\ngit clone ${GIT_REPO} ${TMP_GIT_CLONE}\nrm -rf ${PUBLIC_WWW}/*\ncp -rf ${TMP_GIT_CLONE}/* ${PUBLIC_WWW} \n```\n\n### 本地blog(express)服务\n新建express服务\n``` bash\nexpress blog-server\n```\n\n修改app.js，配置静态文件目录\n``` javascript\napp.use(express.static(path.join(__dirname, 'public/blog/')));\n```\n### 启动blog服务\n``` bash\npm2 start bin/www\n```\n### 安装nginx，反向代理二级域名\n通过域名访问默认的80端口，blog默认监听3000端口，因此需要配置代理。\n创建blog.conf配置文件\n``` bash\ntouch /etc/nginx/conf.d/blog.conf\n```\n输入如下内容\n``` \nserver {\n    listen 80;\n    server_name yinlijun.com www.yinlijun.com bloc.yinlijun.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n```\n\n## 本地操作\n\n### 把github上的blog目录clone下来\n``` bash\ngit clone git@github.com:yinlijun2004/johnny-blog.git\n```\n如果你原来没有在github上部署hexo博客，也可以用hexo新建一个，然后托管到某个git仓库。\n\n### 修改_config.yml配置\n```\ndeploy:\n  type: git\n  repo: yinlijun@www.yinlijun.com:project/hexo.git\n  branch: master\n```\n\n### 发布博客\n撰写好博客后，如下命令部署。\n``` bash\nhexo clean\nhexo g\nhexo d\n```\n\n### 最终效果\n[www.yinlijun.com](http://www.yinlijun.com)\n\n## 有可能碰到的问题\n\n### 外网无法访问端口\n需要配置安全组规则。\n![img](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/87f1aead6dd1582f56cae6e0179540db4090e83c7f3636e20bd26f24faf1bb04340403773fc999742081809ea9168224?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=3VAK%25~%7DO0ZZZXL9M%60%2963UF7.png&size=1024)\n上图是默认开通的端口，如果你的端口不在里面，则需要自行添加安全组规则。\n\n### hexo deploy之后没有反应\n- 检查有没有上传本机公钥\n- 检查hexo.git仓库的路径是否正确\n- 检查备案的域名是否能正常访问\n\n\n\n\n","source":"_posts/hexo-to-ali-ecs.md","raw":"---\ntitle: 部署HEXO博客到阿里云ECS\ndate: 2017-12-18 17:46:56\ntags: [hexo, ECS, git]\n---\n\n本文假设你具备如下条件：\n- 熟悉hexo操作\n- 熟悉linux基本指令\n- 熟悉express(nodejs)框架\n- 在github上已经部署了hexo博客\n\n<!--more-->\n\n## ECS准备\n### 购买ECS\n前往阿里云购买[ECS](https://ecs-buy.aliyun.com)，根据个人需要和财务状况，选择对应规模的ECS。\n我购买的是这个配置，费用是330.00¥。\n![img](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/a6b1134939a35cdf34dab8f9d564c777b7aafbb5518fae80c8450e0ba8d5280bf07d7e677b3b3c2028e2f7a5c778e5a8?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=1GE9BH_P%29%600QGAZLQY6E%7D0G.png&size=1024)\n\n### 配置ECS\n购买之后，可以远程登录ECS实例，可以选择网页登录，即点击上图的远程连接，此时需要输入远程连接密码。\n![img](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/8f23cd09eff9be82c51f1dcbe340257766d02aae3ea6c33a920a3fbdf917426660d0df1eecce1e99548aa7aafad45df3?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=2RK%5D3A%28ZCW9N7%7DRB801Q92V.png&size=1024)\n这个密码在创建ECS实例的时候会提供给你，点击确认之后，就可以登录root用户。\n\n我的本地是ubuntu系统，所以可以利用ssh登录。\n``` bash\nssh root@xx.xx.xx.xx\n```\n登录之后，创建一个非root用户。\n``` bash\nadduser yinlijun\n```\n切换到该用户\n``` bash\nsu yinlijun\n```\n### 上传本地公钥，方便部署。\n``` bash\nssh-copy-id -i ~/.ssh/id_rsa.pub yinlijun@xx.xx.xx.xx\n```\n\n如果需要绑定域名，还需要如下申请域名和备案：\n\n## 购买域名\n前往[阿里域名服务](https://wanwang.aliyun.com/domain)选购域名。\n\n## 域名备案\n前往[备案专区](https://beian.aliyun.com/)，进行备案，需要时间比较长，我花了12天，备案完成后，阿里云会给你的ECS续费，续费的天数就是你的备案花的天数。\n期间要填写资料，上传备案照片等等。\n\n备案完成之后，需要设置域名解析。\n![img](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/02ad73354fe97dd378b486349444aeebd3f5fc81ebe1853b1773f70416c90e7878a24b24afa25c27f122c679c20d523b?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=AJTAI%40%601%7DB3GU6Q%60ZWZO%24Z3.png&size=1024)\n上图的记录值，填写你的ECS的公网IP。\n\n### 在ECS上创建hexo仓库\n````\ngit init --bare ~/project/hexo.git\n````\n\n### 捕获post操作\n\n``` bash\ntouch ~/project/hexo.git/hooks/post-receive\n```\n\n输入如下内容\n\n``` bash\n#!/bin/bash -l\nGIT_REPO=<到hexo.git的目录>\nTMP_GIT_CLONE=<到临时blog的目录>\nPUBLIC_WWW=<到blog服务的目录/public/blog>\n\nrm -rf ${TMP_GIT_CLONE}\ngit clone ${GIT_REPO} ${TMP_GIT_CLONE}\nrm -rf ${PUBLIC_WWW}/*\ncp -rf ${TMP_GIT_CLONE}/* ${PUBLIC_WWW} \n```\n\n### 本地blog(express)服务\n新建express服务\n``` bash\nexpress blog-server\n```\n\n修改app.js，配置静态文件目录\n``` javascript\napp.use(express.static(path.join(__dirname, 'public/blog/')));\n```\n### 启动blog服务\n``` bash\npm2 start bin/www\n```\n### 安装nginx，反向代理二级域名\n通过域名访问默认的80端口，blog默认监听3000端口，因此需要配置代理。\n创建blog.conf配置文件\n``` bash\ntouch /etc/nginx/conf.d/blog.conf\n```\n输入如下内容\n``` \nserver {\n    listen 80;\n    server_name yinlijun.com www.yinlijun.com bloc.yinlijun.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n```\n\n## 本地操作\n\n### 把github上的blog目录clone下来\n``` bash\ngit clone git@github.com:yinlijun2004/johnny-blog.git\n```\n如果你原来没有在github上部署hexo博客，也可以用hexo新建一个，然后托管到某个git仓库。\n\n### 修改_config.yml配置\n```\ndeploy:\n  type: git\n  repo: yinlijun@www.yinlijun.com:project/hexo.git\n  branch: master\n```\n\n### 发布博客\n撰写好博客后，如下命令部署。\n``` bash\nhexo clean\nhexo g\nhexo d\n```\n\n### 最终效果\n[www.yinlijun.com](http://www.yinlijun.com)\n\n## 有可能碰到的问题\n\n### 外网无法访问端口\n需要配置安全组规则。\n![img](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/87f1aead6dd1582f56cae6e0179540db4090e83c7f3636e20bd26f24faf1bb04340403773fc999742081809ea9168224?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=3VAK%25~%7DO0ZZZXL9M%60%2963UF7.png&size=1024)\n上图是默认开通的端口，如果你的端口不在里面，则需要自行添加安全组规则。\n\n### hexo deploy之后没有反应\n- 检查有没有上传本机公钥\n- 检查hexo.git仓库的路径是否正确\n- 检查备案的域名是否能正常访问\n\n\n\n\n","slug":"hexo-to-ali-ecs","published":1,"updated":"2019-01-03T02:48:56.348Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aane5000rbiuibwutmk48","content":"<p>本文假设你具备如下条件：</p>\n<ul>\n<li>熟悉hexo操作</li>\n<li>熟悉linux基本指令</li>\n<li>熟悉express(nodejs)框架</li>\n<li>在github上已经部署了hexo博客</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"ECS准备\"><a href=\"#ECS准备\" class=\"headerlink\" title=\"ECS准备\"></a>ECS准备</h2><h3 id=\"购买ECS\"><a href=\"#购买ECS\" class=\"headerlink\" title=\"购买ECS\"></a>购买ECS</h3><p>前往阿里云购买<a href=\"https://ecs-buy.aliyun.com\" target=\"_blank\" rel=\"noopener\">ECS</a>，根据个人需要和财务状况，选择对应规模的ECS。<br>我购买的是这个配置，费用是330.00¥。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/a6b1134939a35cdf34dab8f9d564c777b7aafbb5518fae80c8450e0ba8d5280bf07d7e677b3b3c2028e2f7a5c778e5a8?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=1GE9BH_P%29%600QGAZLQY6E%7D0G.png&amp;size=1024\" alt=\"img\"></p>\n<h3 id=\"配置ECS\"><a href=\"#配置ECS\" class=\"headerlink\" title=\"配置ECS\"></a>配置ECS</h3><p>购买之后，可以远程登录ECS实例，可以选择网页登录，即点击上图的远程连接，此时需要输入远程连接密码。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/8f23cd09eff9be82c51f1dcbe340257766d02aae3ea6c33a920a3fbdf917426660d0df1eecce1e99548aa7aafad45df3?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=2RK%5D3A%28ZCW9N7%7DRB801Q92V.png&amp;size=1024\" alt=\"img\"><br>这个密码在创建ECS实例的时候会提供给你，点击确认之后，就可以登录root用户。</p>\n<p>我的本地是ubuntu系统，所以可以利用ssh登录。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@xx.xx.xx.xx</span><br></pre></td></tr></table></figure></p>\n<p>登录之后，创建一个非root用户。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adduser yinlijun</span><br></pre></td></tr></table></figure></p>\n<p>切换到该用户<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su yinlijun</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"上传本地公钥，方便部署。\"><a href=\"#上传本地公钥，方便部署。\" class=\"headerlink\" title=\"上传本地公钥，方便部署。\"></a>上传本地公钥，方便部署。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id -i ~/.ssh/id_rsa.pub yinlijun@xx.xx.xx.xx</span><br></pre></td></tr></table></figure>\n<p>如果需要绑定域名，还需要如下申请域名和备案：</p>\n<h2 id=\"购买域名\"><a href=\"#购买域名\" class=\"headerlink\" title=\"购买域名\"></a>购买域名</h2><p>前往<a href=\"https://wanwang.aliyun.com/domain\" target=\"_blank\" rel=\"noopener\">阿里域名服务</a>选购域名。</p>\n<h2 id=\"域名备案\"><a href=\"#域名备案\" class=\"headerlink\" title=\"域名备案\"></a>域名备案</h2><p>前往<a href=\"https://beian.aliyun.com/\" target=\"_blank\" rel=\"noopener\">备案专区</a>，进行备案，需要时间比较长，我花了12天，备案完成后，阿里云会给你的ECS续费，续费的天数就是你的备案花的天数。<br>期间要填写资料，上传备案照片等等。</p>\n<p>备案完成之后，需要设置域名解析。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/02ad73354fe97dd378b486349444aeebd3f5fc81ebe1853b1773f70416c90e7878a24b24afa25c27f122c679c20d523b?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=AJTAI%40%601%7DB3GU6Q%60ZWZO%24Z3.png&amp;size=1024\" alt=\"img\"><br>上图的记录值，填写你的ECS的公网IP。</p>\n<h3 id=\"在ECS上创建hexo仓库\"><a href=\"#在ECS上创建hexo仓库\" class=\"headerlink\" title=\"在ECS上创建hexo仓库\"></a>在ECS上创建hexo仓库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init --bare ~/project/hexo.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"捕获post操作\"><a href=\"#捕获post操作\" class=\"headerlink\" title=\"捕获post操作\"></a>捕获post操作</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch ~/project/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure>\n<p>输入如下内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/bin/bash -l</span></span><br><span class=\"line\">GIT_REPO=&lt;到hexo.git的目录&gt;</span><br><span class=\"line\">TMP_GIT_CLONE=&lt;到临时blog的目录&gt;</span><br><span class=\"line\">PUBLIC_WWW=&lt;到blog服务的目录/public/blog&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf <span class=\"variable\">$&#123;TMP_GIT_CLONE&#125;</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> <span class=\"variable\">$&#123;GIT_REPO&#125;</span> <span class=\"variable\">$&#123;TMP_GIT_CLONE&#125;</span></span><br><span class=\"line\">rm -rf <span class=\"variable\">$&#123;PUBLIC_WWW&#125;</span>/*</span><br><span class=\"line\">cp -rf <span class=\"variable\">$&#123;TMP_GIT_CLONE&#125;</span>/* <span class=\"variable\">$&#123;PUBLIC_WWW&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"本地blog-express-服务\"><a href=\"#本地blog-express-服务\" class=\"headerlink\" title=\"本地blog(express)服务\"></a>本地blog(express)服务</h3><p>新建express服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">express blog-server</span><br></pre></td></tr></table></figure></p>\n<p>修改app.js，配置静态文件目录<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(express.static(path.join(__dirname, <span class=\"string\">'public/blog/'</span>)));</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"启动blog服务\"><a href=\"#启动blog服务\" class=\"headerlink\" title=\"启动blog服务\"></a>启动blog服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start bin/www</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装nginx，反向代理二级域名\"><a href=\"#安装nginx，反向代理二级域名\" class=\"headerlink\" title=\"安装nginx，反向代理二级域名\"></a>安装nginx，反向代理二级域名</h3><p>通过域名访问默认的80端口，blog默认监听3000端口，因此需要配置代理。<br>创建blog.conf配置文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch /etc/nginx/conf.d/blog.conf</span><br></pre></td></tr></table></figure></p>\n<p>输入如下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name yinlijun.com www.yinlijun.com bloc.yinlijun.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:3000;</span><br><span class=\"line\">        proxy_http_version 1.1;</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">        proxy_set_header Connection &apos;upgrade&apos;;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_cache_bypass $http_upgrade;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"本地操作\"><a href=\"#本地操作\" class=\"headerlink\" title=\"本地操作\"></a>本地操作</h2><h3 id=\"把github上的blog目录clone下来\"><a href=\"#把github上的blog目录clone下来\" class=\"headerlink\" title=\"把github上的blog目录clone下来\"></a>把github上的blog目录clone下来</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:yinlijun2004/johnny-blog.git</span><br></pre></td></tr></table></figure>\n<p>如果你原来没有在github上部署hexo博客，也可以用hexo新建一个，然后托管到某个git仓库。</p>\n<h3 id=\"修改-config-yml配置\"><a href=\"#修改-config-yml配置\" class=\"headerlink\" title=\"修改_config.yml配置\"></a>修改_config.yml配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: yinlijun@www.yinlijun.com:project/hexo.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<h3 id=\"发布博客\"><a href=\"#发布博客\" class=\"headerlink\" title=\"发布博客\"></a>发布博客</h3><p>撰写好博客后，如下命令部署。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p><a href=\"http://www.yinlijun.com\">www.yinlijun.com</a></p>\n<h2 id=\"有可能碰到的问题\"><a href=\"#有可能碰到的问题\" class=\"headerlink\" title=\"有可能碰到的问题\"></a>有可能碰到的问题</h2><h3 id=\"外网无法访问端口\"><a href=\"#外网无法访问端口\" class=\"headerlink\" title=\"外网无法访问端口\"></a>外网无法访问端口</h3><p>需要配置安全组规则。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/87f1aead6dd1582f56cae6e0179540db4090e83c7f3636e20bd26f24faf1bb04340403773fc999742081809ea9168224?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=3VAK%25~%7DO0ZZZXL9M%60%2963UF7.png&amp;size=1024\" alt=\"img\"><br>上图是默认开通的端口，如果你的端口不在里面，则需要自行添加安全组规则。</p>\n<h3 id=\"hexo-deploy之后没有反应\"><a href=\"#hexo-deploy之后没有反应\" class=\"headerlink\" title=\"hexo deploy之后没有反应\"></a>hexo deploy之后没有反应</h3><ul>\n<li>检查有没有上传本机公钥</li>\n<li>检查hexo.git仓库的路径是否正确</li>\n<li>检查备案的域名是否能正常访问</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>本文假设你具备如下条件：</p>\n<ul>\n<li>熟悉hexo操作</li>\n<li>熟悉linux基本指令</li>\n<li>熟悉express(nodejs)框架</li>\n<li>在github上已经部署了hexo博客</li>\n</ul>","more":"<h2 id=\"ECS准备\"><a href=\"#ECS准备\" class=\"headerlink\" title=\"ECS准备\"></a>ECS准备</h2><h3 id=\"购买ECS\"><a href=\"#购买ECS\" class=\"headerlink\" title=\"购买ECS\"></a>购买ECS</h3><p>前往阿里云购买<a href=\"https://ecs-buy.aliyun.com\" target=\"_blank\" rel=\"noopener\">ECS</a>，根据个人需要和财务状况，选择对应规模的ECS。<br>我购买的是这个配置，费用是330.00¥。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/a6b1134939a35cdf34dab8f9d564c777b7aafbb5518fae80c8450e0ba8d5280bf07d7e677b3b3c2028e2f7a5c778e5a8?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=1GE9BH_P%29%600QGAZLQY6E%7D0G.png&amp;size=1024\" alt=\"img\"></p>\n<h3 id=\"配置ECS\"><a href=\"#配置ECS\" class=\"headerlink\" title=\"配置ECS\"></a>配置ECS</h3><p>购买之后，可以远程登录ECS实例，可以选择网页登录，即点击上图的远程连接，此时需要输入远程连接密码。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/8f23cd09eff9be82c51f1dcbe340257766d02aae3ea6c33a920a3fbdf917426660d0df1eecce1e99548aa7aafad45df3?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=2RK%5D3A%28ZCW9N7%7DRB801Q92V.png&amp;size=1024\" alt=\"img\"><br>这个密码在创建ECS实例的时候会提供给你，点击确认之后，就可以登录root用户。</p>\n<p>我的本地是ubuntu系统，所以可以利用ssh登录。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@xx.xx.xx.xx</span><br></pre></td></tr></table></figure></p>\n<p>登录之后，创建一个非root用户。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adduser yinlijun</span><br></pre></td></tr></table></figure></p>\n<p>切换到该用户<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su yinlijun</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"上传本地公钥，方便部署。\"><a href=\"#上传本地公钥，方便部署。\" class=\"headerlink\" title=\"上传本地公钥，方便部署。\"></a>上传本地公钥，方便部署。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id -i ~/.ssh/id_rsa.pub yinlijun@xx.xx.xx.xx</span><br></pre></td></tr></table></figure>\n<p>如果需要绑定域名，还需要如下申请域名和备案：</p>\n<h2 id=\"购买域名\"><a href=\"#购买域名\" class=\"headerlink\" title=\"购买域名\"></a>购买域名</h2><p>前往<a href=\"https://wanwang.aliyun.com/domain\" target=\"_blank\" rel=\"noopener\">阿里域名服务</a>选购域名。</p>\n<h2 id=\"域名备案\"><a href=\"#域名备案\" class=\"headerlink\" title=\"域名备案\"></a>域名备案</h2><p>前往<a href=\"https://beian.aliyun.com/\" target=\"_blank\" rel=\"noopener\">备案专区</a>，进行备案，需要时间比较长，我花了12天，备案完成后，阿里云会给你的ECS续费，续费的天数就是你的备案花的天数。<br>期间要填写资料，上传备案照片等等。</p>\n<p>备案完成之后，需要设置域名解析。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/02ad73354fe97dd378b486349444aeebd3f5fc81ebe1853b1773f70416c90e7878a24b24afa25c27f122c679c20d523b?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=AJTAI%40%601%7DB3GU6Q%60ZWZO%24Z3.png&amp;size=1024\" alt=\"img\"><br>上图的记录值，填写你的ECS的公网IP。</p>\n<h3 id=\"在ECS上创建hexo仓库\"><a href=\"#在ECS上创建hexo仓库\" class=\"headerlink\" title=\"在ECS上创建hexo仓库\"></a>在ECS上创建hexo仓库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init --bare ~/project/hexo.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"捕获post操作\"><a href=\"#捕获post操作\" class=\"headerlink\" title=\"捕获post操作\"></a>捕获post操作</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch ~/project/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure>\n<p>输入如下内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/bin/bash -l</span></span><br><span class=\"line\">GIT_REPO=&lt;到hexo.git的目录&gt;</span><br><span class=\"line\">TMP_GIT_CLONE=&lt;到临时blog的目录&gt;</span><br><span class=\"line\">PUBLIC_WWW=&lt;到blog服务的目录/public/blog&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf <span class=\"variable\">$&#123;TMP_GIT_CLONE&#125;</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> <span class=\"variable\">$&#123;GIT_REPO&#125;</span> <span class=\"variable\">$&#123;TMP_GIT_CLONE&#125;</span></span><br><span class=\"line\">rm -rf <span class=\"variable\">$&#123;PUBLIC_WWW&#125;</span>/*</span><br><span class=\"line\">cp -rf <span class=\"variable\">$&#123;TMP_GIT_CLONE&#125;</span>/* <span class=\"variable\">$&#123;PUBLIC_WWW&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"本地blog-express-服务\"><a href=\"#本地blog-express-服务\" class=\"headerlink\" title=\"本地blog(express)服务\"></a>本地blog(express)服务</h3><p>新建express服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">express blog-server</span><br></pre></td></tr></table></figure></p>\n<p>修改app.js，配置静态文件目录<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(express.static(path.join(__dirname, <span class=\"string\">'public/blog/'</span>)));</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"启动blog服务\"><a href=\"#启动blog服务\" class=\"headerlink\" title=\"启动blog服务\"></a>启动blog服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start bin/www</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装nginx，反向代理二级域名\"><a href=\"#安装nginx，反向代理二级域名\" class=\"headerlink\" title=\"安装nginx，反向代理二级域名\"></a>安装nginx，反向代理二级域名</h3><p>通过域名访问默认的80端口，blog默认监听3000端口，因此需要配置代理。<br>创建blog.conf配置文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch /etc/nginx/conf.d/blog.conf</span><br></pre></td></tr></table></figure></p>\n<p>输入如下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name yinlijun.com www.yinlijun.com bloc.yinlijun.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:3000;</span><br><span class=\"line\">        proxy_http_version 1.1;</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">        proxy_set_header Connection &apos;upgrade&apos;;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_cache_bypass $http_upgrade;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"本地操作\"><a href=\"#本地操作\" class=\"headerlink\" title=\"本地操作\"></a>本地操作</h2><h3 id=\"把github上的blog目录clone下来\"><a href=\"#把github上的blog目录clone下来\" class=\"headerlink\" title=\"把github上的blog目录clone下来\"></a>把github上的blog目录clone下来</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:yinlijun2004/johnny-blog.git</span><br></pre></td></tr></table></figure>\n<p>如果你原来没有在github上部署hexo博客，也可以用hexo新建一个，然后托管到某个git仓库。</p>\n<h3 id=\"修改-config-yml配置\"><a href=\"#修改-config-yml配置\" class=\"headerlink\" title=\"修改_config.yml配置\"></a>修改_config.yml配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: yinlijun@www.yinlijun.com:project/hexo.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<h3 id=\"发布博客\"><a href=\"#发布博客\" class=\"headerlink\" title=\"发布博客\"></a>发布博客</h3><p>撰写好博客后，如下命令部署。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p><a href=\"http://www.yinlijun.com\">www.yinlijun.com</a></p>\n<h2 id=\"有可能碰到的问题\"><a href=\"#有可能碰到的问题\" class=\"headerlink\" title=\"有可能碰到的问题\"></a>有可能碰到的问题</h2><h3 id=\"外网无法访问端口\"><a href=\"#外网无法访问端口\" class=\"headerlink\" title=\"外网无法访问端口\"></a>外网无法访问端口</h3><p>需要配置安全组规则。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/87f1aead6dd1582f56cae6e0179540db4090e83c7f3636e20bd26f24faf1bb04340403773fc999742081809ea9168224?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=3VAK%25~%7DO0ZZZXL9M%60%2963UF7.png&amp;size=1024\" alt=\"img\"><br>上图是默认开通的端口，如果你的端口不在里面，则需要自行添加安全组规则。</p>\n<h3 id=\"hexo-deploy之后没有反应\"><a href=\"#hexo-deploy之后没有反应\" class=\"headerlink\" title=\"hexo deploy之后没有反应\"></a>hexo deploy之后没有反应</h3><ul>\n<li>检查有没有上传本机公钥</li>\n<li>检查hexo.git仓库的路径是否正确</li>\n<li>检查备案的域名是否能正常访问</li>\n</ul>"},{"title":"如何下载安装openJDK","date":"2016-11-15T12:04:44.000Z","_content":"\n## JDK 8\n\n### **Debian, Ubuntu**\n```\n$ sudo apt-get install openjdk-8-jre\n```\nopenjdk-8-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-8-jdk。\n\n<!--more-->\n\n### **Fedora, Oracle Linux, Red Hat Enterprise Linux**\n```\n$ su -c \"yum install java-1.8.0-openjdk\"\n```\njava-1.8.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.8.0-openjdk-devel。\n\n## JDK 7\n\n### **Debian, Ubuntu**\n```\n$ sudo apt-get install openjdk-7-jre\n```\nopenjdk-7-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-7-jdk。\n\n### **Fedora, Oracle Linux, Red Hat Enterprise Linux**\n```\n$ su -c \"yum install java-1.7.0-openjdk\"\n```\njava-1.7.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.7.0-openjdk-devel。\n\n## JDK 6\n\n### **Debian, Ubuntu**\n```\n$ sudo apt-get install openjdk-6-jre\n```\nopenjdk-6-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-6-jdk。\n\n### **Fedora, Oracle Linux, Red Hat Enterprise Linux**\n```\n$ su -c \"yum install java-1.6.0-openjdk\"\n```\njava-1.6.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.6.0-openjdk-devel。\n\n\n参考[http://openjdk.java.net/install/](http://openjdk.java.net/install/)","source":"_posts/how-to-download-openjdk.md","raw":"---\ntitle: 如何下载安装openJDK\ndate: 2016-11-15 20:04:44\ntags: [openjdk, java]\n---\n\n## JDK 8\n\n### **Debian, Ubuntu**\n```\n$ sudo apt-get install openjdk-8-jre\n```\nopenjdk-8-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-8-jdk。\n\n<!--more-->\n\n### **Fedora, Oracle Linux, Red Hat Enterprise Linux**\n```\n$ su -c \"yum install java-1.8.0-openjdk\"\n```\njava-1.8.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.8.0-openjdk-devel。\n\n## JDK 7\n\n### **Debian, Ubuntu**\n```\n$ sudo apt-get install openjdk-7-jre\n```\nopenjdk-7-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-7-jdk。\n\n### **Fedora, Oracle Linux, Red Hat Enterprise Linux**\n```\n$ su -c \"yum install java-1.7.0-openjdk\"\n```\njava-1.7.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.7.0-openjdk-devel。\n\n## JDK 6\n\n### **Debian, Ubuntu**\n```\n$ sudo apt-get install openjdk-6-jre\n```\nopenjdk-6-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-6-jdk。\n\n### **Fedora, Oracle Linux, Red Hat Enterprise Linux**\n```\n$ su -c \"yum install java-1.6.0-openjdk\"\n```\njava-1.6.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.6.0-openjdk-devel。\n\n\n参考[http://openjdk.java.net/install/](http://openjdk.java.net/install/)","slug":"how-to-download-openjdk","published":1,"updated":"2019-01-03T02:48:56.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aane9000sbiuitdg0bmd4","content":"<h2 id=\"JDK-8\"><a href=\"#JDK-8\" class=\"headerlink\" title=\"JDK 8\"></a>JDK 8</h2><h3 id=\"Debian-Ubuntu\"><a href=\"#Debian-Ubuntu\" class=\"headerlink\" title=\"Debian, Ubuntu\"></a><strong>Debian, Ubuntu</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install openjdk-8-jre</span><br></pre></td></tr></table></figure>\n<p>openjdk-8-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-8-jdk。</p>\n<a id=\"more\"></a>\n<h3 id=\"Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux\"><a href=\"#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux\" class=\"headerlink\" title=\"Fedora, Oracle Linux, Red Hat Enterprise Linux\"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ su -c &quot;yum install java-1.8.0-openjdk&quot;</span><br></pre></td></tr></table></figure>\n<p>java-1.8.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.8.0-openjdk-devel。</p>\n<h2 id=\"JDK-7\"><a href=\"#JDK-7\" class=\"headerlink\" title=\"JDK 7\"></a>JDK 7</h2><h3 id=\"Debian-Ubuntu-1\"><a href=\"#Debian-Ubuntu-1\" class=\"headerlink\" title=\"Debian, Ubuntu\"></a><strong>Debian, Ubuntu</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install openjdk-7-jre</span><br></pre></td></tr></table></figure>\n<p>openjdk-7-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-7-jdk。</p>\n<h3 id=\"Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-1\"><a href=\"#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-1\" class=\"headerlink\" title=\"Fedora, Oracle Linux, Red Hat Enterprise Linux\"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ su -c &quot;yum install java-1.7.0-openjdk&quot;</span><br></pre></td></tr></table></figure>\n<p>java-1.7.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.7.0-openjdk-devel。</p>\n<h2 id=\"JDK-6\"><a href=\"#JDK-6\" class=\"headerlink\" title=\"JDK 6\"></a>JDK 6</h2><h3 id=\"Debian-Ubuntu-2\"><a href=\"#Debian-Ubuntu-2\" class=\"headerlink\" title=\"Debian, Ubuntu\"></a><strong>Debian, Ubuntu</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install openjdk-6-jre</span><br></pre></td></tr></table></figure>\n<p>openjdk-6-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-6-jdk。</p>\n<h3 id=\"Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-2\"><a href=\"#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-2\" class=\"headerlink\" title=\"Fedora, Oracle Linux, Red Hat Enterprise Linux\"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ su -c &quot;yum install java-1.6.0-openjdk&quot;</span><br></pre></td></tr></table></figure>\n<p>java-1.6.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.6.0-openjdk-devel。</p>\n<p>参考<a href=\"http://openjdk.java.net/install/\" target=\"_blank\" rel=\"noopener\">http://openjdk.java.net/install/</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"JDK-8\"><a href=\"#JDK-8\" class=\"headerlink\" title=\"JDK 8\"></a>JDK 8</h2><h3 id=\"Debian-Ubuntu\"><a href=\"#Debian-Ubuntu\" class=\"headerlink\" title=\"Debian, Ubuntu\"></a><strong>Debian, Ubuntu</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install openjdk-8-jre</span><br></pre></td></tr></table></figure>\n<p>openjdk-8-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-8-jdk。</p>","more":"<h3 id=\"Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux\"><a href=\"#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux\" class=\"headerlink\" title=\"Fedora, Oracle Linux, Red Hat Enterprise Linux\"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ su -c &quot;yum install java-1.8.0-openjdk&quot;</span><br></pre></td></tr></table></figure>\n<p>java-1.8.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.8.0-openjdk-devel。</p>\n<h2 id=\"JDK-7\"><a href=\"#JDK-7\" class=\"headerlink\" title=\"JDK 7\"></a>JDK 7</h2><h3 id=\"Debian-Ubuntu-1\"><a href=\"#Debian-Ubuntu-1\" class=\"headerlink\" title=\"Debian, Ubuntu\"></a><strong>Debian, Ubuntu</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install openjdk-7-jre</span><br></pre></td></tr></table></figure>\n<p>openjdk-7-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-7-jdk。</p>\n<h3 id=\"Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-1\"><a href=\"#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-1\" class=\"headerlink\" title=\"Fedora, Oracle Linux, Red Hat Enterprise Linux\"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ su -c &quot;yum install java-1.7.0-openjdk&quot;</span><br></pre></td></tr></table></figure>\n<p>java-1.7.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.7.0-openjdk-devel。</p>\n<h2 id=\"JDK-6\"><a href=\"#JDK-6\" class=\"headerlink\" title=\"JDK 6\"></a>JDK 6</h2><h3 id=\"Debian-Ubuntu-2\"><a href=\"#Debian-Ubuntu-2\" class=\"headerlink\" title=\"Debian, Ubuntu\"></a><strong>Debian, Ubuntu</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install openjdk-6-jre</span><br></pre></td></tr></table></figure>\n<p>openjdk-6-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-6-jdk。</p>\n<h3 id=\"Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-2\"><a href=\"#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-2\" class=\"headerlink\" title=\"Fedora, Oracle Linux, Red Hat Enterprise Linux\"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ su -c &quot;yum install java-1.6.0-openjdk&quot;</span><br></pre></td></tr></table></figure>\n<p>java-1.6.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.6.0-openjdk-devel。</p>\n<p>参考<a href=\"http://openjdk.java.net/install/\" target=\"_blank\" rel=\"noopener\">http://openjdk.java.net/install/</a></p>"},{"title":"HTTP请求头摘要","date":"2018-01-09T03:09:03.000Z","_content":"\n### If-Modified-Since\n<b>If-Modified-Since</b>是一个条件式请求首部，服务器只在请求的资源在给定的日期时间之后对内容进行过修改的情况下才会返回，状态码<b>200</b>。如果请求的资源从那时起未经修改，则返回一个不带消息主体的<b>304</b>响应，而在<b>Last-Modified</b>首部中会带有上次修改的时间。\n\n语法：If-Modified-Since: <day-name>, <day> <month> <year> <hour>:<minute>:<second> GMT\n\n示例：If-Modified-Since: Wed, 21 Oct 2015 07:28:00 GMT\n\n<!--more-->\n\n### If-Unmodified-Since\n只有当资源在指定的时间之后没有进行过修改，服务器在返回请求的资源，或是接受<b>POST</b>或其他non-safe方法的请求。如果所请求的资源在指定的时间之后发生的修改，那么会返回<b>412</b>(Proceondition Failed)错误。\n\n常见应用场景：\n- 与non-safe方法如<b>POST</b>搭配使用，可以用来优化并发控制，例如某些wiki应用中的做法：假如在原始副本获取之后，服务器上所存储的文档已经被修改，那么对其做出的编辑会被拒绝提交。\n\n- 与含有<b>If-Range</b>消息头的范围请求搭配使用，用来确保新的请求片段来自于未经修改的文档。\n\n语法：\nIf-Unmodified-Since: <day-name>, <day> <month> <year> <hour>:<minute>:<second> GMT\n\n示例：\nIf-Unmodified-Since: Wed, 21 Oct 2015 07:28:00 GMT\n\n### If-None-Match\n对于<b>GET</b>和<b>HEAD</b>请求来说，当且仅当服务器上没有任何资源的ETag属性值与这个首部中列出的相匹配的时候，服务器端才会返回所请求的资源，响应码200。对其他方法来说，当且仅当最终确认没有已存在的资源的ETag的属性值与这个首部所列出的相匹配的时候，才会对请求进行相应的处理。\n\n\n### If-Range\nIf-Range跟Range一起使用，但字段中的d饿到满足时，Range头字段才会起作用，同时服务器返回(Partial Content)状态码；如果字段值中的条件没有得到满足，服务器返回200状态码，返回完整的请求资源。\n\n字段值中既可以用Last-Modified时间用作验证，也可以用ETag标记作为验证，但不能同时使用。\n\n常见场景：\nIf-Range头字段通常用于断点续传的下载过程中，用来自上次中断后，确保下载的资源没有发生改变。\n\n语法：\nIf-Range: <星期>, <日> <月> <年> <时>:<分>:<秒> GMT\nIf-Range: <etag>\n\n示例：\nIf-Range: Wed, 21 Oct 2015 07:28:00 GMT\nIf-Range: \"675af34563dc-tr34\"\n\n### Range\n<b>Range</b>告知服务器返回文件的哪个部分。在一个Range首部中，可以一次性请求多个部分，服务器会以multipart文件的形式返回。如果服务器返回的是范围响应，需要使用206(Partial Content)状态码。加入所请求的范围不合法，那么服务器会返回416（Range Not Satisfiable）状态码，表示客户端错误。服务器允许忽略Range首部，从而返回整个文件，状态码用200。\n\n语法：\n```\nRange: <unit>=<range-start>-\nRange: <unit>=<range-start>-<range-end>\nRange: <unit>=<range-start>-<range-end>, <range-start>-<range-end>\nRange: <unit>=<range-start>-<range-end>, <range-start>-<range-end>, <range-start>-<range-end>\n```\n示例：\n```\nRange: bytes=200-1000, 2000-6576, 19000-\n```\n\n\n\n\n### 区别\n- <b>If-Modified-Since</b>和<b>If-Unmodified-Since</b>\n\n    <b>If-Mmodified-Since</b>只会出现在<b>GET</b>和<b>HEAD</b>请求中。\n\n- <b>If-Modified-Since</b>和<b>If-None-Match</b>\n\n    <b>If-Modified-Since</b>比<b>If-None-Match</b>优先级要高，但两者都存在时，后者会被忽略，除非服务器不支持<b>If-None-Match</b>\n\n\n参考资料：\nhttps://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Unmodified-Since\n\nhttps://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Range\n\nhttps://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Range\n\nhttps://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-None-Match","source":"_posts/http-summery.md","raw":"---\ntitle: HTTP请求头摘要\ndate: 2018-01-09 11:09:03\ntags:\n---\n\n### If-Modified-Since\n<b>If-Modified-Since</b>是一个条件式请求首部，服务器只在请求的资源在给定的日期时间之后对内容进行过修改的情况下才会返回，状态码<b>200</b>。如果请求的资源从那时起未经修改，则返回一个不带消息主体的<b>304</b>响应，而在<b>Last-Modified</b>首部中会带有上次修改的时间。\n\n语法：If-Modified-Since: <day-name>, <day> <month> <year> <hour>:<minute>:<second> GMT\n\n示例：If-Modified-Since: Wed, 21 Oct 2015 07:28:00 GMT\n\n<!--more-->\n\n### If-Unmodified-Since\n只有当资源在指定的时间之后没有进行过修改，服务器在返回请求的资源，或是接受<b>POST</b>或其他non-safe方法的请求。如果所请求的资源在指定的时间之后发生的修改，那么会返回<b>412</b>(Proceondition Failed)错误。\n\n常见应用场景：\n- 与non-safe方法如<b>POST</b>搭配使用，可以用来优化并发控制，例如某些wiki应用中的做法：假如在原始副本获取之后，服务器上所存储的文档已经被修改，那么对其做出的编辑会被拒绝提交。\n\n- 与含有<b>If-Range</b>消息头的范围请求搭配使用，用来确保新的请求片段来自于未经修改的文档。\n\n语法：\nIf-Unmodified-Since: <day-name>, <day> <month> <year> <hour>:<minute>:<second> GMT\n\n示例：\nIf-Unmodified-Since: Wed, 21 Oct 2015 07:28:00 GMT\n\n### If-None-Match\n对于<b>GET</b>和<b>HEAD</b>请求来说，当且仅当服务器上没有任何资源的ETag属性值与这个首部中列出的相匹配的时候，服务器端才会返回所请求的资源，响应码200。对其他方法来说，当且仅当最终确认没有已存在的资源的ETag的属性值与这个首部所列出的相匹配的时候，才会对请求进行相应的处理。\n\n\n### If-Range\nIf-Range跟Range一起使用，但字段中的d饿到满足时，Range头字段才会起作用，同时服务器返回(Partial Content)状态码；如果字段值中的条件没有得到满足，服务器返回200状态码，返回完整的请求资源。\n\n字段值中既可以用Last-Modified时间用作验证，也可以用ETag标记作为验证，但不能同时使用。\n\n常见场景：\nIf-Range头字段通常用于断点续传的下载过程中，用来自上次中断后，确保下载的资源没有发生改变。\n\n语法：\nIf-Range: <星期>, <日> <月> <年> <时>:<分>:<秒> GMT\nIf-Range: <etag>\n\n示例：\nIf-Range: Wed, 21 Oct 2015 07:28:00 GMT\nIf-Range: \"675af34563dc-tr34\"\n\n### Range\n<b>Range</b>告知服务器返回文件的哪个部分。在一个Range首部中，可以一次性请求多个部分，服务器会以multipart文件的形式返回。如果服务器返回的是范围响应，需要使用206(Partial Content)状态码。加入所请求的范围不合法，那么服务器会返回416（Range Not Satisfiable）状态码，表示客户端错误。服务器允许忽略Range首部，从而返回整个文件，状态码用200。\n\n语法：\n```\nRange: <unit>=<range-start>-\nRange: <unit>=<range-start>-<range-end>\nRange: <unit>=<range-start>-<range-end>, <range-start>-<range-end>\nRange: <unit>=<range-start>-<range-end>, <range-start>-<range-end>, <range-start>-<range-end>\n```\n示例：\n```\nRange: bytes=200-1000, 2000-6576, 19000-\n```\n\n\n\n\n### 区别\n- <b>If-Modified-Since</b>和<b>If-Unmodified-Since</b>\n\n    <b>If-Mmodified-Since</b>只会出现在<b>GET</b>和<b>HEAD</b>请求中。\n\n- <b>If-Modified-Since</b>和<b>If-None-Match</b>\n\n    <b>If-Modified-Since</b>比<b>If-None-Match</b>优先级要高，但两者都存在时，后者会被忽略，除非服务器不支持<b>If-None-Match</b>\n\n\n参考资料：\nhttps://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Unmodified-Since\n\nhttps://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Range\n\nhttps://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Range\n\nhttps://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-None-Match","slug":"http-summery","published":1,"updated":"2019-01-03T02:48:56.344Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aanec000ubiuimk9i074d","content":"<h3 id=\"If-Modified-Since\"><a href=\"#If-Modified-Since\" class=\"headerlink\" title=\"If-Modified-Since\"></a>If-Modified-Since</h3><p><b>If-Modified-Since</b>是一个条件式请求首部，服务器只在请求的资源在给定的日期时间之后对内容进行过修改的情况下才会返回，状态码<b>200</b>。如果请求的资源从那时起未经修改，则返回一个不带消息主体的<b>304</b>响应，而在<b>Last-Modified</b>首部中会带有上次修改的时间。</p>\n<p>语法：If-Modified-Since: <day-name>, <day> <month> <year> <hour>:<minute>:<second> GMT</second></minute></hour></year></month></day></day-name></p>\n<p>示例：If-Modified-Since: Wed, 21 Oct 2015 07:28:00 GMT</p>\n<a id=\"more\"></a>\n<h3 id=\"If-Unmodified-Since\"><a href=\"#If-Unmodified-Since\" class=\"headerlink\" title=\"If-Unmodified-Since\"></a>If-Unmodified-Since</h3><p>只有当资源在指定的时间之后没有进行过修改，服务器在返回请求的资源，或是接受<b>POST</b>或其他non-safe方法的请求。如果所请求的资源在指定的时间之后发生的修改，那么会返回<b>412</b>(Proceondition Failed)错误。</p>\n<p>常见应用场景：</p>\n<ul>\n<li><p>与non-safe方法如<b>POST</b>搭配使用，可以用来优化并发控制，例如某些wiki应用中的做法：假如在原始副本获取之后，服务器上所存储的文档已经被修改，那么对其做出的编辑会被拒绝提交。</p>\n</li>\n<li><p>与含有<b>If-Range</b>消息头的范围请求搭配使用，用来确保新的请求片段来自于未经修改的文档。</p>\n</li>\n</ul>\n<p>语法：<br>If-Unmodified-Since: <day-name>, <day> <month> <year> <hour>:<minute>:<second> GMT</second></minute></hour></year></month></day></day-name></p>\n<p>示例：<br>If-Unmodified-Since: Wed, 21 Oct 2015 07:28:00 GMT</p>\n<h3 id=\"If-None-Match\"><a href=\"#If-None-Match\" class=\"headerlink\" title=\"If-None-Match\"></a>If-None-Match</h3><p>对于<b>GET</b>和<b>HEAD</b>请求来说，当且仅当服务器上没有任何资源的ETag属性值与这个首部中列出的相匹配的时候，服务器端才会返回所请求的资源，响应码200。对其他方法来说，当且仅当最终确认没有已存在的资源的ETag的属性值与这个首部所列出的相匹配的时候，才会对请求进行相应的处理。</p>\n<h3 id=\"If-Range\"><a href=\"#If-Range\" class=\"headerlink\" title=\"If-Range\"></a>If-Range</h3><p>If-Range跟Range一起使用，但字段中的d饿到满足时，Range头字段才会起作用，同时服务器返回(Partial Content)状态码；如果字段值中的条件没有得到满足，服务器返回200状态码，返回完整的请求资源。</p>\n<p>字段值中既可以用Last-Modified时间用作验证，也可以用ETag标记作为验证，但不能同时使用。</p>\n<p>常见场景：<br>If-Range头字段通常用于断点续传的下载过程中，用来自上次中断后，确保下载的资源没有发生改变。</p>\n<p>语法：<br>If-Range: &lt;星期&gt;, &lt;日&gt; &lt;月&gt; &lt;年&gt; &lt;时&gt;:&lt;分&gt;:&lt;秒&gt; GMT<br>If-Range: <etag></etag></p>\n<p>示例：<br>If-Range: Wed, 21 Oct 2015 07:28:00 GMT<br>If-Range: “675af34563dc-tr34”</p>\n<h3 id=\"Range\"><a href=\"#Range\" class=\"headerlink\" title=\"Range\"></a>Range</h3><p><b>Range</b>告知服务器返回文件的哪个部分。在一个Range首部中，可以一次性请求多个部分，服务器会以multipart文件的形式返回。如果服务器返回的是范围响应，需要使用206(Partial Content)状态码。加入所请求的范围不合法，那么服务器会返回416（Range Not Satisfiable）状态码，表示客户端错误。服务器允许忽略Range首部，从而返回整个文件，状态码用200。</p>\n<p>语法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Range: &lt;unit&gt;=&lt;range-start&gt;-</span><br><span class=\"line\">Range: &lt;unit&gt;=&lt;range-start&gt;-&lt;range-end&gt;</span><br><span class=\"line\">Range: &lt;unit&gt;=&lt;range-start&gt;-&lt;range-end&gt;, &lt;range-start&gt;-&lt;range-end&gt;</span><br><span class=\"line\">Range: &lt;unit&gt;=&lt;range-start&gt;-&lt;range-end&gt;, &lt;range-start&gt;-&lt;range-end&gt;, &lt;range-start&gt;-&lt;range-end&gt;</span><br></pre></td></tr></table></figure></p>\n<p>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Range: bytes=200-1000, 2000-6576, 19000-</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><ul>\n<li><p><b>If-Modified-Since</b>和<b>If-Unmodified-Since</b></p>\n<p>  <b>If-Mmodified-Since</b>只会出现在<b>GET</b>和<b>HEAD</b>请求中。</p>\n</li>\n<li><p><b>If-Modified-Since</b>和<b>If-None-Match</b></p>\n<p>  <b>If-Modified-Since</b>比<b>If-None-Match</b>优先级要高，但两者都存在时，后者会被忽略，除非服务器不支持<b>If-None-Match</b></p>\n</li>\n</ul>\n<p>参考资料：<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Unmodified-Since\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Unmodified-Since</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Range\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Range</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Range\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Range</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-None-Match\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-None-Match</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"If-Modified-Since\"><a href=\"#If-Modified-Since\" class=\"headerlink\" title=\"If-Modified-Since\"></a>If-Modified-Since</h3><p><b>If-Modified-Since</b>是一个条件式请求首部，服务器只在请求的资源在给定的日期时间之后对内容进行过修改的情况下才会返回，状态码<b>200</b>。如果请求的资源从那时起未经修改，则返回一个不带消息主体的<b>304</b>响应，而在<b>Last-Modified</b>首部中会带有上次修改的时间。</p>\n<p>语法：If-Modified-Since: <day-name>, <day> <month> <year> <hour>:<minute>:<second> GMT</second></minute></hour></year></month></day></day-name></p>\n<p>示例：If-Modified-Since: Wed, 21 Oct 2015 07:28:00 GMT</p>","more":"<h3 id=\"If-Unmodified-Since\"><a href=\"#If-Unmodified-Since\" class=\"headerlink\" title=\"If-Unmodified-Since\"></a>If-Unmodified-Since</h3><p>只有当资源在指定的时间之后没有进行过修改，服务器在返回请求的资源，或是接受<b>POST</b>或其他non-safe方法的请求。如果所请求的资源在指定的时间之后发生的修改，那么会返回<b>412</b>(Proceondition Failed)错误。</p>\n<p>常见应用场景：</p>\n<ul>\n<li><p>与non-safe方法如<b>POST</b>搭配使用，可以用来优化并发控制，例如某些wiki应用中的做法：假如在原始副本获取之后，服务器上所存储的文档已经被修改，那么对其做出的编辑会被拒绝提交。</p>\n</li>\n<li><p>与含有<b>If-Range</b>消息头的范围请求搭配使用，用来确保新的请求片段来自于未经修改的文档。</p>\n</li>\n</ul>\n<p>语法：<br>If-Unmodified-Since: <day-name>, <day> <month> <year> <hour>:<minute>:<second> GMT</second></minute></hour></year></month></day></day-name></p>\n<p>示例：<br>If-Unmodified-Since: Wed, 21 Oct 2015 07:28:00 GMT</p>\n<h3 id=\"If-None-Match\"><a href=\"#If-None-Match\" class=\"headerlink\" title=\"If-None-Match\"></a>If-None-Match</h3><p>对于<b>GET</b>和<b>HEAD</b>请求来说，当且仅当服务器上没有任何资源的ETag属性值与这个首部中列出的相匹配的时候，服务器端才会返回所请求的资源，响应码200。对其他方法来说，当且仅当最终确认没有已存在的资源的ETag的属性值与这个首部所列出的相匹配的时候，才会对请求进行相应的处理。</p>\n<h3 id=\"If-Range\"><a href=\"#If-Range\" class=\"headerlink\" title=\"If-Range\"></a>If-Range</h3><p>If-Range跟Range一起使用，但字段中的d饿到满足时，Range头字段才会起作用，同时服务器返回(Partial Content)状态码；如果字段值中的条件没有得到满足，服务器返回200状态码，返回完整的请求资源。</p>\n<p>字段值中既可以用Last-Modified时间用作验证，也可以用ETag标记作为验证，但不能同时使用。</p>\n<p>常见场景：<br>If-Range头字段通常用于断点续传的下载过程中，用来自上次中断后，确保下载的资源没有发生改变。</p>\n<p>语法：<br>If-Range: &lt;星期&gt;, &lt;日&gt; &lt;月&gt; &lt;年&gt; &lt;时&gt;:&lt;分&gt;:&lt;秒&gt; GMT<br>If-Range: <etag></etag></p>\n<p>示例：<br>If-Range: Wed, 21 Oct 2015 07:28:00 GMT<br>If-Range: “675af34563dc-tr34”</p>\n<h3 id=\"Range\"><a href=\"#Range\" class=\"headerlink\" title=\"Range\"></a>Range</h3><p><b>Range</b>告知服务器返回文件的哪个部分。在一个Range首部中，可以一次性请求多个部分，服务器会以multipart文件的形式返回。如果服务器返回的是范围响应，需要使用206(Partial Content)状态码。加入所请求的范围不合法，那么服务器会返回416（Range Not Satisfiable）状态码，表示客户端错误。服务器允许忽略Range首部，从而返回整个文件，状态码用200。</p>\n<p>语法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Range: &lt;unit&gt;=&lt;range-start&gt;-</span><br><span class=\"line\">Range: &lt;unit&gt;=&lt;range-start&gt;-&lt;range-end&gt;</span><br><span class=\"line\">Range: &lt;unit&gt;=&lt;range-start&gt;-&lt;range-end&gt;, &lt;range-start&gt;-&lt;range-end&gt;</span><br><span class=\"line\">Range: &lt;unit&gt;=&lt;range-start&gt;-&lt;range-end&gt;, &lt;range-start&gt;-&lt;range-end&gt;, &lt;range-start&gt;-&lt;range-end&gt;</span><br></pre></td></tr></table></figure></p>\n<p>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Range: bytes=200-1000, 2000-6576, 19000-</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><ul>\n<li><p><b>If-Modified-Since</b>和<b>If-Unmodified-Since</b></p>\n<p>  <b>If-Mmodified-Since</b>只会出现在<b>GET</b>和<b>HEAD</b>请求中。</p>\n</li>\n<li><p><b>If-Modified-Since</b>和<b>If-None-Match</b></p>\n<p>  <b>If-Modified-Since</b>比<b>If-None-Match</b>优先级要高，但两者都存在时，后者会被忽略，除非服务器不支持<b>If-None-Match</b></p>\n</li>\n</ul>\n<p>参考资料：<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Unmodified-Since\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Unmodified-Since</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Range\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Range</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Range\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Range</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-None-Match\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-None-Match</a></p>"},{"title":"kotlin惯用法","date":"2017-05-26T02:01:03.000Z","_content":"\nkotlin提供了一些惯用法（语法糖？），简单的记录一下。\n\n## data class\n有时候需要一些类要保存数据，而不需要其他操作，当然基本操作除外，kotlin为data class提供的基本操作有：\n\n- equals() 相当与“==”操作\n- hashCode() 计算hash值\n- toString() 函数\n- componentsN() 函数\n- copy() 拷贝\n\n<!-- more -->\n\n```kotlin\ndata class User(val name: String = \"nobody\", val age: Int = 0)\n\nfun main(args: Array<String>) {\n    //默认参数\n    val nobody = User()\n    //User(name=nobody, age=0)\n    println(nobody)\n    \n    val johnny = User(\"Johnny\", 29)\n    //解构赋值\n    val (name, age) = johnny\n    //name: Johnny, age: 29\n    println(\"name: $name, age: $age\")\n    \n    //toString用法\n    //User(name=Johnny, age=29)\n    println(johnny)\n    \n    //hashCode用法\n    //233064103\n    println(johnny.hashCode())\n    \n    //\"==\" 和\"===\"\n    //true\n    println(\"johnny == johnny  ${johnny == johnny}\")\n    //true\n    println(\"johnny === johnny  ${johnny === johnny}\")\n    \n    //copy用法\n    val youngJohnny = johnny.copy(age = 2)\n    //\"User(name=Johnny, age=2)\"\n    println(youngJohnny)\n    //false\n    println(\"johnny == youngJohnny  ${johnny == youngJohnny}\")\n    //false\n    println(\"johnny === youngJohnny  ${johnny === youngJohnny}\")\n    //false\n    println(\"johnny.hashCode() == yongJohnny.hashCode() ${johnny.hashCode() == youngJohnny.hashCode()}\")\n    \n    val copyJohnny = johnny.copy()\n    //true\n    println(\"johnny == copyJohnny  ${johnny == copyJohnny}\")\n    //false\n    println(\"johnny === copyJohnny  ${johnny === copyJohnny}\")\n    //true\n    println(\"johnny.equals(copyJohnny)  ${johnny.equals(copyJohnny)}\")\n    //true\n    println(\"johnny.hashCode() == copyJohnny.hashCode() ${johnny.hashCode() == copyJohnny.hashCode()}\")\n    \n    val anotherJohnny = User(\"Johnny\", 29)\n    //true\n    println(\"johnny == anotherJohnny  ${johnny == anotherJohnny}\")\n    //false\n    println(\"johnny === anotherJohnny  ${johnny === anotherJohnny}\")\n    //true\n    println(\"johnny.equals(anotherJohnny)  ${johnny.equals(anotherJohnny)}\")\n    //true\n    println(\"johnny.hashCode() == anotherJohnny.hashCode() ${johnny.hashCode() == anotherJohnny.hashCode()}\")\n}\n```\n\n## 函数(包括构造函数)的默认值\n\n如上例的\n```kotlin\ndata class User(val name: String = \"nobody\", val age: Int = 0)\n```\n对于普通函数\n```kotlin\nfun foo(a: Int = 0, b: String = \"\") { ... }\n```\n\n有了默认的参数，就可以避免写多个重载函数\n如下面的java代码\n```java\npublic String foo(String name, int number, boolean toUpperCase) {\n    return (toUpperCase ? name.toUpperCase() : name) + number;\n}\npublic String foo(String name, int number) {\n    return foo(name, number, false);\n}\npublic String foo(String name, boolean toUpperCase) {\n    return foo(name, 42, toUpperCase);\n}\npublic String foo(String name) {\n    return foo(name, 42);\n}\n```\n可以用一个kotlin函数表示\n```kotlin\nfun foo(name: String, number: Int = 42, toUpperCase: Boolean = false) =\n        (if (toUpperCase) name.toUpperCase() else name) + number\n```\n\n## 过滤list\n```kotlin\nval positives = list.filter { x => x > 0}\n```\n甚至可以更简洁一点\n```kotlin\nval positives = list.filter { it > 0 }\n```\n\n## 字符串模板\n```kotlin\nprintln(\"Name $name\")\n```\n\n## 类型检查\n```kotlin\nwhen (x) {\n    is Foo -> ...\n    is Bar -> ...\n    else   -> ...\n}\n```\n\n## 遍历集合\n```kotlin\nfor ((k, v) in map) {\n    println(\"$k -> $v\")\n}\n```\n\n## 使用范围（Ranges）\n```kotlin\nfor (i in 1..100) { ... }  // 闭区间包含100\nfor (i in 1 until 100) { ... } // 半开区间，不包含100\nfor (x in 2..10 step 2) { ... } \nfor (x in 10 downTo 1) { ... }\nif (x in 1..10) { ... }\n```\n\n## 构造只读列表\n```kotlin\nval list = listOf(\"a\", \"b\", \"c\")\n```\n\n## 构造只读map\n```kotlin\nval map = mapOf(\"a\" to 1, \"b\" to 2, \"c\" to 3)\n```\n\n## 访问map\n```kotlin\nprintln(map[\"key\"])\nmap[\"key\"] = value\n```\n\n## 延迟加载\n```kotlin\nval p: String by lazy {\n    // compute the string\n}\n```\n\n## 函数扩展\n```kotlin\nfun String.spaceToCamelCase() { ... }\n\n\"Convert this to camelcase\".spaceToCamelCase()\n```\n\n## 创建单例\n```kotlin\nobject Resource {\n    var name = \"Name\"\n}\n\nfun main(args: Array<String>) {\n\tvar rs = Resource;\n    //Name\n    println(rs.name)\n    var rs2 = Resource;\n    //Name\n    println(rs2.name)\n    rs.name = \"Anthoer\"\n    //Another\n    println(rs.name)\n    //Another\n    println(rs2.name)\n}\n```\n\n## 判断null\n\n### ?.\n```kotlin\nval files = File(\"Test\").listFiles()\n\nprintln(files?.size)\n```\n例如：\n```kotlin\nfun getList(isNull: Boolean): List<String>? =\n    if(isNull) null else listOf(\"a\", \"b\", \"c\")\n\nfun main(args: Array<String>) {\n    var list = getList(true)\n    //\"null\"\n    println(list?.size)\n    \n    list = getList(false)\n    //\"3\"\n    println(list?.size)\n}\n```\n### ?. 可以执行语句块\nval data = ...\n\ndata?.let {\n    ... // execute this block if not null\n}\n\n### ?:\n上述println语句可以改为\n```kotlin\nprintln(list?.size ?: \"empty\" )\n```\n这打印结果如下\n```\nempty\n3\n```\n### ?: 后面的字符串也可以换成表达式\n```kotlin\nval data = ...\nval email = data[\"email\"] ?: throw IllegalStateException(\"Email is missing!\")\n```\n\n## 返回when语句\n```kotlin\nfun transform(color: String): Int {\n    return when (color) {\n        \"Red\" -> 0\n        \"Green\" -> 1\n        \"Blue\" -> 2\n        else -> throw IllegalArgumentException(\"Invalid color param value\")\n    }\n}\n```\n\n## 'try/catch' 表达式\n```kotlin\nfun test() {\n    val result = try {\n        count()\n    } catch (e: ArithmeticException) {\n        throw IllegalStateException(e)\n    }\n\n    // result是count()返回值\n}\n```\n\n## 'if'表达式\n```kotlin\nfun foo(param: Int) {\n    val result = if (param == 1) {\n        \"one\"\n    } else if (param == 2) {\n        \"two\"\n    } else {\n        \"three\"\n    }\n}\n```\n\n\n## 表达式函数\n```kotlin\nfun theAnswer() = 42\n```\n等于如下函数\n```kotlin\nfun theAnswer(): Int {\n    return 42\n}\n```\n表达式函数可以很方便的和其他惯用法结合在一起使用\n```kotlin\nfun transform(color: String): Int = when (color) {\n    \"Red\" -> 0\n    \"Green\" -> 1\n    \"Blue\" -> 2\n    else -> throw IllegalArgumentException(\"Invalid color param value\")\n}\n```\n\n## with语句（ES6不是快废除这个了？）\nwith语句块的函数都是对()括号内的对象的方法调用。\n```kotlin\nclass Turtle {\n    fun penDown()\n    fun penUp()\n    fun turn(degrees: Double)\n    fun forward(pixels: Double)\n}\n\nval myTurtle = Turtle()\nwith(myTurtle) { //draw a 100 pix square\n    penDown()\n    for(i in 1..4) {\n        forward(100.0)\n        turn(90.0)\n    }\n    penUp()\n}\n```\n\n## nullable的Boolean对象\n```kotlin\nval b: Boolean? = ...\nif (b == true) {\n    ...\n} else {\n    // `b` 为false或者null\n}\n```\n","source":"_posts/kotlin惯用法.md","raw":"---\ntitle: kotlin惯用法\ndate: 2017-05-26 10:01:03\ntags: kotlin\n---\n\nkotlin提供了一些惯用法（语法糖？），简单的记录一下。\n\n## data class\n有时候需要一些类要保存数据，而不需要其他操作，当然基本操作除外，kotlin为data class提供的基本操作有：\n\n- equals() 相当与“==”操作\n- hashCode() 计算hash值\n- toString() 函数\n- componentsN() 函数\n- copy() 拷贝\n\n<!-- more -->\n\n```kotlin\ndata class User(val name: String = \"nobody\", val age: Int = 0)\n\nfun main(args: Array<String>) {\n    //默认参数\n    val nobody = User()\n    //User(name=nobody, age=0)\n    println(nobody)\n    \n    val johnny = User(\"Johnny\", 29)\n    //解构赋值\n    val (name, age) = johnny\n    //name: Johnny, age: 29\n    println(\"name: $name, age: $age\")\n    \n    //toString用法\n    //User(name=Johnny, age=29)\n    println(johnny)\n    \n    //hashCode用法\n    //233064103\n    println(johnny.hashCode())\n    \n    //\"==\" 和\"===\"\n    //true\n    println(\"johnny == johnny  ${johnny == johnny}\")\n    //true\n    println(\"johnny === johnny  ${johnny === johnny}\")\n    \n    //copy用法\n    val youngJohnny = johnny.copy(age = 2)\n    //\"User(name=Johnny, age=2)\"\n    println(youngJohnny)\n    //false\n    println(\"johnny == youngJohnny  ${johnny == youngJohnny}\")\n    //false\n    println(\"johnny === youngJohnny  ${johnny === youngJohnny}\")\n    //false\n    println(\"johnny.hashCode() == yongJohnny.hashCode() ${johnny.hashCode() == youngJohnny.hashCode()}\")\n    \n    val copyJohnny = johnny.copy()\n    //true\n    println(\"johnny == copyJohnny  ${johnny == copyJohnny}\")\n    //false\n    println(\"johnny === copyJohnny  ${johnny === copyJohnny}\")\n    //true\n    println(\"johnny.equals(copyJohnny)  ${johnny.equals(copyJohnny)}\")\n    //true\n    println(\"johnny.hashCode() == copyJohnny.hashCode() ${johnny.hashCode() == copyJohnny.hashCode()}\")\n    \n    val anotherJohnny = User(\"Johnny\", 29)\n    //true\n    println(\"johnny == anotherJohnny  ${johnny == anotherJohnny}\")\n    //false\n    println(\"johnny === anotherJohnny  ${johnny === anotherJohnny}\")\n    //true\n    println(\"johnny.equals(anotherJohnny)  ${johnny.equals(anotherJohnny)}\")\n    //true\n    println(\"johnny.hashCode() == anotherJohnny.hashCode() ${johnny.hashCode() == anotherJohnny.hashCode()}\")\n}\n```\n\n## 函数(包括构造函数)的默认值\n\n如上例的\n```kotlin\ndata class User(val name: String = \"nobody\", val age: Int = 0)\n```\n对于普通函数\n```kotlin\nfun foo(a: Int = 0, b: String = \"\") { ... }\n```\n\n有了默认的参数，就可以避免写多个重载函数\n如下面的java代码\n```java\npublic String foo(String name, int number, boolean toUpperCase) {\n    return (toUpperCase ? name.toUpperCase() : name) + number;\n}\npublic String foo(String name, int number) {\n    return foo(name, number, false);\n}\npublic String foo(String name, boolean toUpperCase) {\n    return foo(name, 42, toUpperCase);\n}\npublic String foo(String name) {\n    return foo(name, 42);\n}\n```\n可以用一个kotlin函数表示\n```kotlin\nfun foo(name: String, number: Int = 42, toUpperCase: Boolean = false) =\n        (if (toUpperCase) name.toUpperCase() else name) + number\n```\n\n## 过滤list\n```kotlin\nval positives = list.filter { x => x > 0}\n```\n甚至可以更简洁一点\n```kotlin\nval positives = list.filter { it > 0 }\n```\n\n## 字符串模板\n```kotlin\nprintln(\"Name $name\")\n```\n\n## 类型检查\n```kotlin\nwhen (x) {\n    is Foo -> ...\n    is Bar -> ...\n    else   -> ...\n}\n```\n\n## 遍历集合\n```kotlin\nfor ((k, v) in map) {\n    println(\"$k -> $v\")\n}\n```\n\n## 使用范围（Ranges）\n```kotlin\nfor (i in 1..100) { ... }  // 闭区间包含100\nfor (i in 1 until 100) { ... } // 半开区间，不包含100\nfor (x in 2..10 step 2) { ... } \nfor (x in 10 downTo 1) { ... }\nif (x in 1..10) { ... }\n```\n\n## 构造只读列表\n```kotlin\nval list = listOf(\"a\", \"b\", \"c\")\n```\n\n## 构造只读map\n```kotlin\nval map = mapOf(\"a\" to 1, \"b\" to 2, \"c\" to 3)\n```\n\n## 访问map\n```kotlin\nprintln(map[\"key\"])\nmap[\"key\"] = value\n```\n\n## 延迟加载\n```kotlin\nval p: String by lazy {\n    // compute the string\n}\n```\n\n## 函数扩展\n```kotlin\nfun String.spaceToCamelCase() { ... }\n\n\"Convert this to camelcase\".spaceToCamelCase()\n```\n\n## 创建单例\n```kotlin\nobject Resource {\n    var name = \"Name\"\n}\n\nfun main(args: Array<String>) {\n\tvar rs = Resource;\n    //Name\n    println(rs.name)\n    var rs2 = Resource;\n    //Name\n    println(rs2.name)\n    rs.name = \"Anthoer\"\n    //Another\n    println(rs.name)\n    //Another\n    println(rs2.name)\n}\n```\n\n## 判断null\n\n### ?.\n```kotlin\nval files = File(\"Test\").listFiles()\n\nprintln(files?.size)\n```\n例如：\n```kotlin\nfun getList(isNull: Boolean): List<String>? =\n    if(isNull) null else listOf(\"a\", \"b\", \"c\")\n\nfun main(args: Array<String>) {\n    var list = getList(true)\n    //\"null\"\n    println(list?.size)\n    \n    list = getList(false)\n    //\"3\"\n    println(list?.size)\n}\n```\n### ?. 可以执行语句块\nval data = ...\n\ndata?.let {\n    ... // execute this block if not null\n}\n\n### ?:\n上述println语句可以改为\n```kotlin\nprintln(list?.size ?: \"empty\" )\n```\n这打印结果如下\n```\nempty\n3\n```\n### ?: 后面的字符串也可以换成表达式\n```kotlin\nval data = ...\nval email = data[\"email\"] ?: throw IllegalStateException(\"Email is missing!\")\n```\n\n## 返回when语句\n```kotlin\nfun transform(color: String): Int {\n    return when (color) {\n        \"Red\" -> 0\n        \"Green\" -> 1\n        \"Blue\" -> 2\n        else -> throw IllegalArgumentException(\"Invalid color param value\")\n    }\n}\n```\n\n## 'try/catch' 表达式\n```kotlin\nfun test() {\n    val result = try {\n        count()\n    } catch (e: ArithmeticException) {\n        throw IllegalStateException(e)\n    }\n\n    // result是count()返回值\n}\n```\n\n## 'if'表达式\n```kotlin\nfun foo(param: Int) {\n    val result = if (param == 1) {\n        \"one\"\n    } else if (param == 2) {\n        \"two\"\n    } else {\n        \"three\"\n    }\n}\n```\n\n\n## 表达式函数\n```kotlin\nfun theAnswer() = 42\n```\n等于如下函数\n```kotlin\nfun theAnswer(): Int {\n    return 42\n}\n```\n表达式函数可以很方便的和其他惯用法结合在一起使用\n```kotlin\nfun transform(color: String): Int = when (color) {\n    \"Red\" -> 0\n    \"Green\" -> 1\n    \"Blue\" -> 2\n    else -> throw IllegalArgumentException(\"Invalid color param value\")\n}\n```\n\n## with语句（ES6不是快废除这个了？）\nwith语句块的函数都是对()括号内的对象的方法调用。\n```kotlin\nclass Turtle {\n    fun penDown()\n    fun penUp()\n    fun turn(degrees: Double)\n    fun forward(pixels: Double)\n}\n\nval myTurtle = Turtle()\nwith(myTurtle) { //draw a 100 pix square\n    penDown()\n    for(i in 1..4) {\n        forward(100.0)\n        turn(90.0)\n    }\n    penUp()\n}\n```\n\n## nullable的Boolean对象\n```kotlin\nval b: Boolean? = ...\nif (b == true) {\n    ...\n} else {\n    // `b` 为false或者null\n}\n```\n","slug":"kotlin惯用法","published":1,"updated":"2019-01-03T02:48:56.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aaned000wbiuijcqg96a3","content":"<p>kotlin提供了一些惯用法（语法糖？），简单的记录一下。</p>\n<h2 id=\"data-class\"><a href=\"#data-class\" class=\"headerlink\" title=\"data class\"></a>data class</h2><p>有时候需要一些类要保存数据，而不需要其他操作，当然基本操作除外，kotlin为data class提供的基本操作有：</p>\n<ul>\n<li>equals() 相当与“==”操作</li>\n<li>hashCode() 计算hash值</li>\n<li>toString() 函数</li>\n<li>componentsN() 函数</li>\n<li>copy() 拷贝</li>\n</ul>\n<a id=\"more\"></a>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>(<span class=\"keyword\">val</span> name: String = <span class=\"string\">\"nobody\"</span>, <span class=\"keyword\">val</span> age: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//默认参数</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> nobody = User()</span><br><span class=\"line\">    <span class=\"comment\">//User(name=nobody, age=0)</span></span><br><span class=\"line\">    println(nobody)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">val</span> johnny = User(<span class=\"string\">\"Johnny\"</span>, <span class=\"number\">29</span>)</span><br><span class=\"line\">    <span class=\"comment\">//解构赋值</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> (name, age) = johnny</span><br><span class=\"line\">    <span class=\"comment\">//name: Johnny, age: 29</span></span><br><span class=\"line\">    println(<span class=\"string\">\"name: <span class=\"variable\">$name</span>, age: <span class=\"variable\">$age</span>\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//toString用法</span></span><br><span class=\"line\">    <span class=\"comment\">//User(name=Johnny, age=29)</span></span><br><span class=\"line\">    println(johnny)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//hashCode用法</span></span><br><span class=\"line\">    <span class=\"comment\">//233064103</span></span><br><span class=\"line\">    println(johnny.hashCode())</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//\"==\" 和\"===\"</span></span><br><span class=\"line\">    <span class=\"comment\">//true</span></span><br><span class=\"line\">    println(<span class=\"string\">\"johnny == johnny  <span class=\"subst\">$&#123;johnny == johnny&#125;</span>\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//true</span></span><br><span class=\"line\">    println(<span class=\"string\">\"johnny === johnny  <span class=\"subst\">$&#123;johnny === johnny&#125;</span>\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//copy用法</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> youngJohnny = johnny.copy(age = <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"comment\">//\"User(name=Johnny, age=2)\"</span></span><br><span class=\"line\">    println(youngJohnny)</span><br><span class=\"line\">    <span class=\"comment\">//false</span></span><br><span class=\"line\">    println(<span class=\"string\">\"johnny == youngJohnny  <span class=\"subst\">$&#123;johnny == youngJohnny&#125;</span>\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//false</span></span><br><span class=\"line\">    println(<span class=\"string\">\"johnny === youngJohnny  <span class=\"subst\">$&#123;johnny === youngJohnny&#125;</span>\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//false</span></span><br><span class=\"line\">    println(<span class=\"string\">\"johnny.hashCode() == yongJohnny.hashCode() <span class=\"subst\">$&#123;johnny.hashCode() == youngJohnny.hashCode()&#125;</span>\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">val</span> copyJohnny = johnny.copy()</span><br><span class=\"line\">    <span class=\"comment\">//true</span></span><br><span class=\"line\">    println(<span class=\"string\">\"johnny == copyJohnny  <span class=\"subst\">$&#123;johnny == copyJohnny&#125;</span>\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//false</span></span><br><span class=\"line\">    println(<span class=\"string\">\"johnny === copyJohnny  <span class=\"subst\">$&#123;johnny === copyJohnny&#125;</span>\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//true</span></span><br><span class=\"line\">    println(<span class=\"string\">\"johnny.equals(copyJohnny)  <span class=\"subst\">$&#123;johnny.equals(copyJohnny)&#125;</span>\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//true</span></span><br><span class=\"line\">    println(<span class=\"string\">\"johnny.hashCode() == copyJohnny.hashCode() <span class=\"subst\">$&#123;johnny.hashCode() == copyJohnny.hashCode()&#125;</span>\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">val</span> anotherJohnny = User(<span class=\"string\">\"Johnny\"</span>, <span class=\"number\">29</span>)</span><br><span class=\"line\">    <span class=\"comment\">//true</span></span><br><span class=\"line\">    println(<span class=\"string\">\"johnny == anotherJohnny  <span class=\"subst\">$&#123;johnny == anotherJohnny&#125;</span>\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//false</span></span><br><span class=\"line\">    println(<span class=\"string\">\"johnny === anotherJohnny  <span class=\"subst\">$&#123;johnny === anotherJohnny&#125;</span>\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//true</span></span><br><span class=\"line\">    println(<span class=\"string\">\"johnny.equals(anotherJohnny)  <span class=\"subst\">$&#123;johnny.equals(anotherJohnny)&#125;</span>\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//true</span></span><br><span class=\"line\">    println(<span class=\"string\">\"johnny.hashCode() == anotherJohnny.hashCode() <span class=\"subst\">$&#123;johnny.hashCode() == anotherJohnny.hashCode()&#125;</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数-包括构造函数-的默认值\"><a href=\"#函数-包括构造函数-的默认值\" class=\"headerlink\" title=\"函数(包括构造函数)的默认值\"></a>函数(包括构造函数)的默认值</h2><p>如上例的<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>(<span class=\"keyword\">val</span> name: String = <span class=\"string\">\"nobody\"</span>, <span class=\"keyword\">val</span> age: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure></p>\n<p>对于普通函数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">(a: <span class=\"type\">Int</span> = <span class=\"number\">0</span>, b: <span class=\"type\">String</span> = <span class=\"string\">\"\"</span>)</span></span> &#123; ... &#125;</span><br></pre></td></tr></table></figure></p>\n<p>有了默认的参数，就可以避免写多个重载函数<br>如下面的java代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">foo</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> number, <span class=\"keyword\">boolean</span> toUpperCase)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (toUpperCase ? name.toUpperCase() : name) + number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">foo</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> number)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> foo(name, number, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">foo</span><span class=\"params\">(String name, <span class=\"keyword\">boolean</span> toUpperCase)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> foo(name, <span class=\"number\">42</span>, toUpperCase);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">foo</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> foo(name, <span class=\"number\">42</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以用一个kotlin函数表示<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">(name: <span class=\"type\">String</span>, number: <span class=\"type\">Int</span> = <span class=\"number\">42</span>, toUpperCase: <span class=\"type\">Boolean</span> = <span class=\"literal\">false</span>)</span></span> =</span><br><span class=\"line\">        (<span class=\"keyword\">if</span> (toUpperCase) name.toUpperCase() <span class=\"keyword\">else</span> name) + number</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"过滤list\"><a href=\"#过滤list\" class=\"headerlink\" title=\"过滤list\"></a>过滤list</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> positives = list.filter &#123; x =&gt; x &gt; <span class=\"number\">0</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>甚至可以更简洁一点<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> positives = list.filter &#123; it &gt; <span class=\"number\">0</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"字符串模板\"><a href=\"#字符串模板\" class=\"headerlink\" title=\"字符串模板\"></a>字符串模板</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(<span class=\"string\">\"Name <span class=\"variable\">$name</span>\"</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"类型检查\"><a href=\"#类型检查\" class=\"headerlink\" title=\"类型检查\"></a>类型检查</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">when</span> (x) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">is</span> Foo -&gt; ...</span><br><span class=\"line\">    <span class=\"keyword\">is</span> Bar -&gt; ...</span><br><span class=\"line\">    <span class=\"keyword\">else</span>   -&gt; ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"遍历集合\"><a href=\"#遍历集合\" class=\"headerlink\" title=\"遍历集合\"></a>遍历集合</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ((k, v) <span class=\"keyword\">in</span> map) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"<span class=\"variable\">$k</span> -&gt; <span class=\"variable\">$v</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用范围（Ranges）\"><a href=\"#使用范围（Ranges）\" class=\"headerlink\" title=\"使用范围（Ranges）\"></a>使用范围（Ranges）</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1</span>..<span class=\"number\">100</span>) &#123; ... &#125;  <span class=\"comment\">// 闭区间包含100</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1</span> until <span class=\"number\">100</span>) &#123; ... &#125; <span class=\"comment\">// 半开区间，不包含100</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (x <span class=\"keyword\">in</span> <span class=\"number\">2</span>..<span class=\"number\">10</span> step <span class=\"number\">2</span>) &#123; ... &#125; </span><br><span class=\"line\"><span class=\"keyword\">for</span> (x <span class=\"keyword\">in</span> <span class=\"number\">10</span> downTo <span class=\"number\">1</span>) &#123; ... &#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (x <span class=\"keyword\">in</span> <span class=\"number\">1</span>..<span class=\"number\">10</span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"构造只读列表\"><a href=\"#构造只读列表\" class=\"headerlink\" title=\"构造只读列表\"></a>构造只读列表</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list = listOf(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"构造只读map\"><a href=\"#构造只读map\" class=\"headerlink\" title=\"构造只读map\"></a>构造只读map</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> map = mapOf(<span class=\"string\">\"a\"</span> to <span class=\"number\">1</span>, <span class=\"string\">\"b\"</span> to <span class=\"number\">2</span>, <span class=\"string\">\"c\"</span> to <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"访问map\"><a href=\"#访问map\" class=\"headerlink\" title=\"访问map\"></a>访问map</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(map[<span class=\"string\">\"key\"</span>])</span><br><span class=\"line\">map[<span class=\"string\">\"key\"</span>] = value</span><br></pre></td></tr></table></figure>\n<h2 id=\"延迟加载\"><a href=\"#延迟加载\" class=\"headerlink\" title=\"延迟加载\"></a>延迟加载</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> p: String <span class=\"keyword\">by</span> lazy &#123;</span><br><span class=\"line\">    <span class=\"comment\">// compute the string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数扩展\"><a href=\"#函数扩展\" class=\"headerlink\" title=\"函数扩展\"></a>函数扩展</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> String.<span class=\"title\">spaceToCamelCase</span><span class=\"params\">()</span></span> &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"Convert this to camelcase\"</span>.spaceToCamelCase()</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建单例\"><a href=\"#创建单例\" class=\"headerlink\" title=\"创建单例\"></a>创建单例</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> Resource &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">\"Name\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> rs = Resource;</span><br><span class=\"line\">    <span class=\"comment\">//Name</span></span><br><span class=\"line\">    println(rs.name)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rs2 = Resource;</span><br><span class=\"line\">    <span class=\"comment\">//Name</span></span><br><span class=\"line\">    println(rs2.name)</span><br><span class=\"line\">    rs.name = <span class=\"string\">\"Anthoer\"</span></span><br><span class=\"line\">    <span class=\"comment\">//Another</span></span><br><span class=\"line\">    println(rs.name)</span><br><span class=\"line\">    <span class=\"comment\">//Another</span></span><br><span class=\"line\">    println(rs2.name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"判断null\"><a href=\"#判断null\" class=\"headerlink\" title=\"判断null\"></a>判断null</h2><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"?.\"></a>?.</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> files = File(<span class=\"string\">\"Test\"</span>).listFiles()</span><br><span class=\"line\"></span><br><span class=\"line\">println(files?.size)</span><br></pre></td></tr></table></figure>\n<p>例如：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getList</span><span class=\"params\">(isNull: <span class=\"type\">Boolean</span>)</span></span>: List&lt;String&gt;? =</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isNull) <span class=\"literal\">null</span> <span class=\"keyword\">else</span> listOf(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> list = getList(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    <span class=\"comment\">//\"null\"</span></span><br><span class=\"line\">    println(list?.size)</span><br><span class=\"line\">    </span><br><span class=\"line\">    list = getList(<span class=\"literal\">false</span>)</span><br><span class=\"line\">    <span class=\"comment\">//\"3\"</span></span><br><span class=\"line\">    println(list?.size)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"可以执行语句块\"><a href=\"#可以执行语句块\" class=\"headerlink\" title=\"?. 可以执行语句块\"></a>?. 可以执行语句块</h3><p>val data = …</p>\n<p>data?.let {<br>    … // execute this block if not null<br>}</p>\n<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"?:\"></a>?:</h3><p>上述println语句可以改为<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(list?.size ?: <span class=\"string\">\"empty\"</span> )</span><br></pre></td></tr></table></figure></p>\n<p>这打印结果如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">empty</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"后面的字符串也可以换成表达式\"><a href=\"#后面的字符串也可以换成表达式\" class=\"headerlink\" title=\"?: 后面的字符串也可以换成表达式\"></a>?: 后面的字符串也可以换成表达式</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> <span class=\"keyword\">data</span> = ...</span><br><span class=\"line\"><span class=\"keyword\">val</span> email = <span class=\"keyword\">data</span>[<span class=\"string\">\"email\"</span>] ?: <span class=\"keyword\">throw</span> IllegalStateException(<span class=\"string\">\"Email is missing!\"</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"返回when语句\"><a href=\"#返回when语句\" class=\"headerlink\" title=\"返回when语句\"></a>返回when语句</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">transform</span><span class=\"params\">(color: <span class=\"type\">String</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">when</span> (color) &#123;</span><br><span class=\"line\">        <span class=\"string\">\"Red\"</span> -&gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"string\">\"Green\"</span> -&gt; <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"string\">\"Blue\"</span> -&gt; <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> -&gt; <span class=\"keyword\">throw</span> IllegalArgumentException(<span class=\"string\">\"Invalid color param value\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"‘try-catch’-表达式\"><a href=\"#‘try-catch’-表达式\" class=\"headerlink\" title=\"‘try/catch’ 表达式\"></a>‘try/catch’ 表达式</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result = <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        count()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e: ArithmeticException) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> IllegalStateException(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// result是count()返回值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"‘if’表达式\"><a href=\"#‘if’表达式\" class=\"headerlink\" title=\"‘if’表达式\"></a>‘if’表达式</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">(param: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result = <span class=\"keyword\">if</span> (param == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"string\">\"one\"</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (param == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"string\">\"two\"</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">\"three\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"表达式函数\"><a href=\"#表达式函数\" class=\"headerlink\" title=\"表达式函数\"></a>表达式函数</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">theAnswer</span><span class=\"params\">()</span></span> = <span class=\"number\">42</span></span><br></pre></td></tr></table></figure>\n<p>等于如下函数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">theAnswer</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">42</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>表达式函数可以很方便的和其他惯用法结合在一起使用<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">transform</span><span class=\"params\">(color: <span class=\"type\">String</span>)</span></span>: <span class=\"built_in\">Int</span> = <span class=\"keyword\">when</span> (color) &#123;</span><br><span class=\"line\">    <span class=\"string\">\"Red\"</span> -&gt; <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"string\">\"Green\"</span> -&gt; <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"string\">\"Blue\"</span> -&gt; <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> -&gt; <span class=\"keyword\">throw</span> IllegalArgumentException(<span class=\"string\">\"Invalid color param value\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"with语句（ES6不是快废除这个了？）\"><a href=\"#with语句（ES6不是快废除这个了？）\" class=\"headerlink\" title=\"with语句（ES6不是快废除这个了？）\"></a>with语句（ES6不是快废除这个了？）</h2><p>with语句块的函数都是对()括号内的对象的方法调用。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Turtle</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">penDown</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">penUp</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">turn</span><span class=\"params\">(degrees: <span class=\"type\">Double</span>)</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">forward</span><span class=\"params\">(pixels: <span class=\"type\">Double</span>)</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> myTurtle = Turtle()</span><br><span class=\"line\">with(myTurtle) &#123; <span class=\"comment\">//draw a 100 pix square</span></span><br><span class=\"line\">    penDown()</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">1</span>..<span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        forward(<span class=\"number\">100.0</span>)</span><br><span class=\"line\">        turn(<span class=\"number\">90.0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    penUp()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"nullable的Boolean对象\"><a href=\"#nullable的Boolean对象\" class=\"headerlink\" title=\"nullable的Boolean对象\"></a>nullable的Boolean对象</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> b: <span class=\"built_in\">Boolean</span>? = ...</span><br><span class=\"line\"><span class=\"keyword\">if</span> (b == <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// `b` 为false或者null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>kotlin提供了一些惯用法（语法糖？），简单的记录一下。</p>\n<h2 id=\"data-class\"><a href=\"#data-class\" class=\"headerlink\" title=\"data class\"></a>data class</h2><p>有时候需要一些类要保存数据，而不需要其他操作，当然基本操作除外，kotlin为data class提供的基本操作有：</p>\n<ul>\n<li>equals() 相当与“==”操作</li>\n<li>hashCode() 计算hash值</li>\n<li>toString() 函数</li>\n<li>componentsN() 函数</li>\n<li>copy() 拷贝</li>\n</ul>","more":"<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>(<span class=\"keyword\">val</span> name: String = <span class=\"string\">\"nobody\"</span>, <span class=\"keyword\">val</span> age: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//默认参数</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> nobody = User()</span><br><span class=\"line\">    <span class=\"comment\">//User(name=nobody, age=0)</span></span><br><span class=\"line\">    println(nobody)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">val</span> johnny = User(<span class=\"string\">\"Johnny\"</span>, <span class=\"number\">29</span>)</span><br><span class=\"line\">    <span class=\"comment\">//解构赋值</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> (name, age) = johnny</span><br><span class=\"line\">    <span class=\"comment\">//name: Johnny, age: 29</span></span><br><span class=\"line\">    println(<span class=\"string\">\"name: <span class=\"variable\">$name</span>, age: <span class=\"variable\">$age</span>\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//toString用法</span></span><br><span class=\"line\">    <span class=\"comment\">//User(name=Johnny, age=29)</span></span><br><span class=\"line\">    println(johnny)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//hashCode用法</span></span><br><span class=\"line\">    <span class=\"comment\">//233064103</span></span><br><span class=\"line\">    println(johnny.hashCode())</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//\"==\" 和\"===\"</span></span><br><span class=\"line\">    <span class=\"comment\">//true</span></span><br><span class=\"line\">    println(<span class=\"string\">\"johnny == johnny  <span class=\"subst\">$&#123;johnny == johnny&#125;</span>\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//true</span></span><br><span class=\"line\">    println(<span class=\"string\">\"johnny === johnny  <span class=\"subst\">$&#123;johnny === johnny&#125;</span>\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//copy用法</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> youngJohnny = johnny.copy(age = <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"comment\">//\"User(name=Johnny, age=2)\"</span></span><br><span class=\"line\">    println(youngJohnny)</span><br><span class=\"line\">    <span class=\"comment\">//false</span></span><br><span class=\"line\">    println(<span class=\"string\">\"johnny == youngJohnny  <span class=\"subst\">$&#123;johnny == youngJohnny&#125;</span>\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//false</span></span><br><span class=\"line\">    println(<span class=\"string\">\"johnny === youngJohnny  <span class=\"subst\">$&#123;johnny === youngJohnny&#125;</span>\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//false</span></span><br><span class=\"line\">    println(<span class=\"string\">\"johnny.hashCode() == yongJohnny.hashCode() <span class=\"subst\">$&#123;johnny.hashCode() == youngJohnny.hashCode()&#125;</span>\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">val</span> copyJohnny = johnny.copy()</span><br><span class=\"line\">    <span class=\"comment\">//true</span></span><br><span class=\"line\">    println(<span class=\"string\">\"johnny == copyJohnny  <span class=\"subst\">$&#123;johnny == copyJohnny&#125;</span>\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//false</span></span><br><span class=\"line\">    println(<span class=\"string\">\"johnny === copyJohnny  <span class=\"subst\">$&#123;johnny === copyJohnny&#125;</span>\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//true</span></span><br><span class=\"line\">    println(<span class=\"string\">\"johnny.equals(copyJohnny)  <span class=\"subst\">$&#123;johnny.equals(copyJohnny)&#125;</span>\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//true</span></span><br><span class=\"line\">    println(<span class=\"string\">\"johnny.hashCode() == copyJohnny.hashCode() <span class=\"subst\">$&#123;johnny.hashCode() == copyJohnny.hashCode()&#125;</span>\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">val</span> anotherJohnny = User(<span class=\"string\">\"Johnny\"</span>, <span class=\"number\">29</span>)</span><br><span class=\"line\">    <span class=\"comment\">//true</span></span><br><span class=\"line\">    println(<span class=\"string\">\"johnny == anotherJohnny  <span class=\"subst\">$&#123;johnny == anotherJohnny&#125;</span>\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//false</span></span><br><span class=\"line\">    println(<span class=\"string\">\"johnny === anotherJohnny  <span class=\"subst\">$&#123;johnny === anotherJohnny&#125;</span>\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//true</span></span><br><span class=\"line\">    println(<span class=\"string\">\"johnny.equals(anotherJohnny)  <span class=\"subst\">$&#123;johnny.equals(anotherJohnny)&#125;</span>\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//true</span></span><br><span class=\"line\">    println(<span class=\"string\">\"johnny.hashCode() == anotherJohnny.hashCode() <span class=\"subst\">$&#123;johnny.hashCode() == anotherJohnny.hashCode()&#125;</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数-包括构造函数-的默认值\"><a href=\"#函数-包括构造函数-的默认值\" class=\"headerlink\" title=\"函数(包括构造函数)的默认值\"></a>函数(包括构造函数)的默认值</h2><p>如上例的<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>(<span class=\"keyword\">val</span> name: String = <span class=\"string\">\"nobody\"</span>, <span class=\"keyword\">val</span> age: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure></p>\n<p>对于普通函数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">(a: <span class=\"type\">Int</span> = <span class=\"number\">0</span>, b: <span class=\"type\">String</span> = <span class=\"string\">\"\"</span>)</span></span> &#123; ... &#125;</span><br></pre></td></tr></table></figure></p>\n<p>有了默认的参数，就可以避免写多个重载函数<br>如下面的java代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">foo</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> number, <span class=\"keyword\">boolean</span> toUpperCase)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (toUpperCase ? name.toUpperCase() : name) + number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">foo</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> number)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> foo(name, number, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">foo</span><span class=\"params\">(String name, <span class=\"keyword\">boolean</span> toUpperCase)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> foo(name, <span class=\"number\">42</span>, toUpperCase);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">foo</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> foo(name, <span class=\"number\">42</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以用一个kotlin函数表示<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">(name: <span class=\"type\">String</span>, number: <span class=\"type\">Int</span> = <span class=\"number\">42</span>, toUpperCase: <span class=\"type\">Boolean</span> = <span class=\"literal\">false</span>)</span></span> =</span><br><span class=\"line\">        (<span class=\"keyword\">if</span> (toUpperCase) name.toUpperCase() <span class=\"keyword\">else</span> name) + number</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"过滤list\"><a href=\"#过滤list\" class=\"headerlink\" title=\"过滤list\"></a>过滤list</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> positives = list.filter &#123; x =&gt; x &gt; <span class=\"number\">0</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>甚至可以更简洁一点<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> positives = list.filter &#123; it &gt; <span class=\"number\">0</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"字符串模板\"><a href=\"#字符串模板\" class=\"headerlink\" title=\"字符串模板\"></a>字符串模板</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(<span class=\"string\">\"Name <span class=\"variable\">$name</span>\"</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"类型检查\"><a href=\"#类型检查\" class=\"headerlink\" title=\"类型检查\"></a>类型检查</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">when</span> (x) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">is</span> Foo -&gt; ...</span><br><span class=\"line\">    <span class=\"keyword\">is</span> Bar -&gt; ...</span><br><span class=\"line\">    <span class=\"keyword\">else</span>   -&gt; ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"遍历集合\"><a href=\"#遍历集合\" class=\"headerlink\" title=\"遍历集合\"></a>遍历集合</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ((k, v) <span class=\"keyword\">in</span> map) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"<span class=\"variable\">$k</span> -&gt; <span class=\"variable\">$v</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用范围（Ranges）\"><a href=\"#使用范围（Ranges）\" class=\"headerlink\" title=\"使用范围（Ranges）\"></a>使用范围（Ranges）</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1</span>..<span class=\"number\">100</span>) &#123; ... &#125;  <span class=\"comment\">// 闭区间包含100</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1</span> until <span class=\"number\">100</span>) &#123; ... &#125; <span class=\"comment\">// 半开区间，不包含100</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (x <span class=\"keyword\">in</span> <span class=\"number\">2</span>..<span class=\"number\">10</span> step <span class=\"number\">2</span>) &#123; ... &#125; </span><br><span class=\"line\"><span class=\"keyword\">for</span> (x <span class=\"keyword\">in</span> <span class=\"number\">10</span> downTo <span class=\"number\">1</span>) &#123; ... &#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (x <span class=\"keyword\">in</span> <span class=\"number\">1</span>..<span class=\"number\">10</span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"构造只读列表\"><a href=\"#构造只读列表\" class=\"headerlink\" title=\"构造只读列表\"></a>构造只读列表</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list = listOf(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"构造只读map\"><a href=\"#构造只读map\" class=\"headerlink\" title=\"构造只读map\"></a>构造只读map</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> map = mapOf(<span class=\"string\">\"a\"</span> to <span class=\"number\">1</span>, <span class=\"string\">\"b\"</span> to <span class=\"number\">2</span>, <span class=\"string\">\"c\"</span> to <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"访问map\"><a href=\"#访问map\" class=\"headerlink\" title=\"访问map\"></a>访问map</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(map[<span class=\"string\">\"key\"</span>])</span><br><span class=\"line\">map[<span class=\"string\">\"key\"</span>] = value</span><br></pre></td></tr></table></figure>\n<h2 id=\"延迟加载\"><a href=\"#延迟加载\" class=\"headerlink\" title=\"延迟加载\"></a>延迟加载</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> p: String <span class=\"keyword\">by</span> lazy &#123;</span><br><span class=\"line\">    <span class=\"comment\">// compute the string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数扩展\"><a href=\"#函数扩展\" class=\"headerlink\" title=\"函数扩展\"></a>函数扩展</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> String.<span class=\"title\">spaceToCamelCase</span><span class=\"params\">()</span></span> &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"Convert this to camelcase\"</span>.spaceToCamelCase()</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建单例\"><a href=\"#创建单例\" class=\"headerlink\" title=\"创建单例\"></a>创建单例</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> Resource &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">\"Name\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> rs = Resource;</span><br><span class=\"line\">    <span class=\"comment\">//Name</span></span><br><span class=\"line\">    println(rs.name)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rs2 = Resource;</span><br><span class=\"line\">    <span class=\"comment\">//Name</span></span><br><span class=\"line\">    println(rs2.name)</span><br><span class=\"line\">    rs.name = <span class=\"string\">\"Anthoer\"</span></span><br><span class=\"line\">    <span class=\"comment\">//Another</span></span><br><span class=\"line\">    println(rs.name)</span><br><span class=\"line\">    <span class=\"comment\">//Another</span></span><br><span class=\"line\">    println(rs2.name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"判断null\"><a href=\"#判断null\" class=\"headerlink\" title=\"判断null\"></a>判断null</h2><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"?.\"></a>?.</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> files = File(<span class=\"string\">\"Test\"</span>).listFiles()</span><br><span class=\"line\"></span><br><span class=\"line\">println(files?.size)</span><br></pre></td></tr></table></figure>\n<p>例如：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getList</span><span class=\"params\">(isNull: <span class=\"type\">Boolean</span>)</span></span>: List&lt;String&gt;? =</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isNull) <span class=\"literal\">null</span> <span class=\"keyword\">else</span> listOf(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> list = getList(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    <span class=\"comment\">//\"null\"</span></span><br><span class=\"line\">    println(list?.size)</span><br><span class=\"line\">    </span><br><span class=\"line\">    list = getList(<span class=\"literal\">false</span>)</span><br><span class=\"line\">    <span class=\"comment\">//\"3\"</span></span><br><span class=\"line\">    println(list?.size)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"可以执行语句块\"><a href=\"#可以执行语句块\" class=\"headerlink\" title=\"?. 可以执行语句块\"></a>?. 可以执行语句块</h3><p>val data = …</p>\n<p>data?.let {<br>    … // execute this block if not null<br>}</p>\n<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"?:\"></a>?:</h3><p>上述println语句可以改为<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(list?.size ?: <span class=\"string\">\"empty\"</span> )</span><br></pre></td></tr></table></figure></p>\n<p>这打印结果如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">empty</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"后面的字符串也可以换成表达式\"><a href=\"#后面的字符串也可以换成表达式\" class=\"headerlink\" title=\"?: 后面的字符串也可以换成表达式\"></a>?: 后面的字符串也可以换成表达式</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> <span class=\"keyword\">data</span> = ...</span><br><span class=\"line\"><span class=\"keyword\">val</span> email = <span class=\"keyword\">data</span>[<span class=\"string\">\"email\"</span>] ?: <span class=\"keyword\">throw</span> IllegalStateException(<span class=\"string\">\"Email is missing!\"</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"返回when语句\"><a href=\"#返回when语句\" class=\"headerlink\" title=\"返回when语句\"></a>返回when语句</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">transform</span><span class=\"params\">(color: <span class=\"type\">String</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">when</span> (color) &#123;</span><br><span class=\"line\">        <span class=\"string\">\"Red\"</span> -&gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"string\">\"Green\"</span> -&gt; <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"string\">\"Blue\"</span> -&gt; <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> -&gt; <span class=\"keyword\">throw</span> IllegalArgumentException(<span class=\"string\">\"Invalid color param value\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"‘try-catch’-表达式\"><a href=\"#‘try-catch’-表达式\" class=\"headerlink\" title=\"‘try/catch’ 表达式\"></a>‘try/catch’ 表达式</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result = <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        count()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e: ArithmeticException) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> IllegalStateException(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// result是count()返回值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"‘if’表达式\"><a href=\"#‘if’表达式\" class=\"headerlink\" title=\"‘if’表达式\"></a>‘if’表达式</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">(param: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result = <span class=\"keyword\">if</span> (param == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"string\">\"one\"</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (param == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"string\">\"two\"</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">\"three\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"表达式函数\"><a href=\"#表达式函数\" class=\"headerlink\" title=\"表达式函数\"></a>表达式函数</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">theAnswer</span><span class=\"params\">()</span></span> = <span class=\"number\">42</span></span><br></pre></td></tr></table></figure>\n<p>等于如下函数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">theAnswer</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">42</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>表达式函数可以很方便的和其他惯用法结合在一起使用<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">transform</span><span class=\"params\">(color: <span class=\"type\">String</span>)</span></span>: <span class=\"built_in\">Int</span> = <span class=\"keyword\">when</span> (color) &#123;</span><br><span class=\"line\">    <span class=\"string\">\"Red\"</span> -&gt; <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"string\">\"Green\"</span> -&gt; <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"string\">\"Blue\"</span> -&gt; <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> -&gt; <span class=\"keyword\">throw</span> IllegalArgumentException(<span class=\"string\">\"Invalid color param value\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"with语句（ES6不是快废除这个了？）\"><a href=\"#with语句（ES6不是快废除这个了？）\" class=\"headerlink\" title=\"with语句（ES6不是快废除这个了？）\"></a>with语句（ES6不是快废除这个了？）</h2><p>with语句块的函数都是对()括号内的对象的方法调用。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Turtle</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">penDown</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">penUp</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">turn</span><span class=\"params\">(degrees: <span class=\"type\">Double</span>)</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">forward</span><span class=\"params\">(pixels: <span class=\"type\">Double</span>)</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> myTurtle = Turtle()</span><br><span class=\"line\">with(myTurtle) &#123; <span class=\"comment\">//draw a 100 pix square</span></span><br><span class=\"line\">    penDown()</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">1</span>..<span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        forward(<span class=\"number\">100.0</span>)</span><br><span class=\"line\">        turn(<span class=\"number\">90.0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    penUp()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"nullable的Boolean对象\"><a href=\"#nullable的Boolean对象\" class=\"headerlink\" title=\"nullable的Boolean对象\"></a>nullable的Boolean对象</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> b: <span class=\"built_in\">Boolean</span>? = ...</span><br><span class=\"line\"><span class=\"keyword\">if</span> (b == <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// `b` 为false或者null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Ubuntu 12.04 生成桌面图标","date":"2016-11-15T10:04:19.000Z","_content":"\n在Ubuntu上从网上下载压缩包版本（非.deb包）的应用程序之后，是不生成桌面图表的，比如网上下载的[Android Studio](http://www.android-studio.org/), 所以需要自己做一个桌面图标。\n\n1. 进入到/usr/share/applications/目录下\n```bash\ncd /usr/share/applications/\n```\n\n2. 新建一个android-studio.desktop文件。\n```bash\nvim android-studio.desktop\n```\n<!--more-->\n\n3. 输入一下内容\n```bash\nVersion=2.2\nName=Android Studio\nGenericName=Android IDE\nComment=Android Development\nExec=/home/yinlijun/android_toolchain/android-studio/bin/studio.sh %U\nTerminal=false\nIcon=/home/yinlijun/android_toolchain/android-studio/bin/studio.png\nType=Application\nCategories=Android;IDE;\n```\n\n保存退出之后，在应用程序里面就可以找到，绑定了图标的应用程序，可以将其固定到启动器上。","source":"_posts/make-ubutun-desktop.md","raw":"---\ntitle: Ubuntu 12.04 生成桌面图标 \ndate: 2016-11-15 18:04:19\ntags: [ubuntu, android studio]\n---\n\n在Ubuntu上从网上下载压缩包版本（非.deb包）的应用程序之后，是不生成桌面图表的，比如网上下载的[Android Studio](http://www.android-studio.org/), 所以需要自己做一个桌面图标。\n\n1. 进入到/usr/share/applications/目录下\n```bash\ncd /usr/share/applications/\n```\n\n2. 新建一个android-studio.desktop文件。\n```bash\nvim android-studio.desktop\n```\n<!--more-->\n\n3. 输入一下内容\n```bash\nVersion=2.2\nName=Android Studio\nGenericName=Android IDE\nComment=Android Development\nExec=/home/yinlijun/android_toolchain/android-studio/bin/studio.sh %U\nTerminal=false\nIcon=/home/yinlijun/android_toolchain/android-studio/bin/studio.png\nType=Application\nCategories=Android;IDE;\n```\n\n保存退出之后，在应用程序里面就可以找到，绑定了图标的应用程序，可以将其固定到启动器上。","slug":"make-ubutun-desktop","published":1,"updated":"2019-01-03T02:48:56.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aanee000zbiuink46rtl4","content":"<p>在Ubuntu上从网上下载压缩包版本（非.deb包）的应用程序之后，是不生成桌面图表的，比如网上下载的<a href=\"http://www.android-studio.org/\" target=\"_blank\" rel=\"noopener\">Android Studio</a>, 所以需要自己做一个桌面图标。</p>\n<ol>\n<li><p>进入到/usr/share/applications/目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/share/applications/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建一个android-studio.desktop文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim android-studio.desktop</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol start=\"3\">\n<li>输入一下内容<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Version=2.2</span><br><span class=\"line\">Name=Android Studio</span><br><span class=\"line\">GenericName=Android IDE</span><br><span class=\"line\">Comment=Android Development</span><br><span class=\"line\">Exec=/home/yinlijun/android_toolchain/android-studio/bin/studio.sh %U</span><br><span class=\"line\">Terminal=<span class=\"literal\">false</span></span><br><span class=\"line\">Icon=/home/yinlijun/android_toolchain/android-studio/bin/studio.png</span><br><span class=\"line\">Type=Application</span><br><span class=\"line\">Categories=Android;IDE;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>保存退出之后，在应用程序里面就可以找到，绑定了图标的应用程序，可以将其固定到启动器上。</p>\n","site":{"data":{}},"excerpt":"<p>在Ubuntu上从网上下载压缩包版本（非.deb包）的应用程序之后，是不生成桌面图表的，比如网上下载的<a href=\"http://www.android-studio.org/\" target=\"_blank\" rel=\"noopener\">Android Studio</a>, 所以需要自己做一个桌面图标。</p>\n<ol>\n<li><p>进入到/usr/share/applications/目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/share/applications/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建一个android-studio.desktop文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim android-studio.desktop</span><br></pre></td></tr></table></figure>\n</li>\n</ol>","more":"<ol start=\"3\">\n<li>输入一下内容<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Version=2.2</span><br><span class=\"line\">Name=Android Studio</span><br><span class=\"line\">GenericName=Android IDE</span><br><span class=\"line\">Comment=Android Development</span><br><span class=\"line\">Exec=/home/yinlijun/android_toolchain/android-studio/bin/studio.sh %U</span><br><span class=\"line\">Terminal=<span class=\"literal\">false</span></span><br><span class=\"line\">Icon=/home/yinlijun/android_toolchain/android-studio/bin/studio.png</span><br><span class=\"line\">Type=Application</span><br><span class=\"line\">Categories=Android;IDE;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>保存退出之后，在应用程序里面就可以找到，绑定了图标的应用程序，可以将其固定到启动器上。</p>"},{"title":"javafx-map.entry","date":"2019-06-27T11:35:45.000Z","_content":"","source":"_posts/javafx-map-entry.md","raw":"---\ntitle: javafx-map.entry\ndate: 2019-06-27 19:35:45\ntags:\n---\n","slug":"javafx-map-entry","published":1,"updated":"2019-06-27T11:35:45.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aanef0011biuits7btm3o","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"从零搭建Android OTA系统——用户注册登录前端界面实现","date":"2018-04-09T09:17:31.000Z","_content":"OTA的前端界面，打算用react实现，采用的库有\n- [antd](https://ant.design/index-cn) 目前比较流行UI组件库。\n- [axios](https://www.npmjs.com/package/axios) 网络请求库。\n- [redux-saga](https://www.npmjs.com/package/redux-saga) 一个处理异步流处理的库。\n\n目录结构：\n```\nsrc\n - components\n - containers\n - reducers\n - sagas\n```\n\n<!--more-->\n\ncomponents用来存放无状态组件\n\ncontainers用来存放状态组件\n\nreducers用来存放reducer文件\n\nsagas用来存放redux-saga文件\n\n#### component和container的区别\n我的理解，component是无状态、可复用的，只负责渲染的组件，它的输入是Props，输出是render的结果。\n\ncontainer负责和redux连接，从store里面获取数据。\n\n#### 界面\n登录和注册组件，可以作为一个component，用一个Tabs组件包装。\n```javascript\nexport default class Login extends Component {\n    constructor(props) {\n        super(props);\n        this.shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate.bind(this)\n    }\n\n\n    render() {\n        const { login, register } = this.props;\n        return (\n            <Tabs defaultActiveKey=\"1\" tabBarStyle={{ textAlign: 'center' }} className={ style.container }>\n                <TabPane tab=\"登录\" key=\"1\">\n                    <LoginForm login={ login }/>\n                </TabPane>\n                <TabPane tab=\"注册\" key=\"2\">\n                    <RegisterForm register={ register }/>\n                </TabPane>\n            </Tabs>\n        )\n    }\n}\n```\n\n##### reducer\n```javascript\nexport const actions = {\n    login: function (username, password) {\n        return {\n            type: actionsTypes.USER_LOGIN,\n            username,\n            password\n        }\n    },\n    logout: function () {\n        return {\n            type: actionsTypes.USER_LOGOUT,\n        }\n    },\n    register: function (data) {\n        return {\n            type: actionsTypes.USER_REGISTER,\n            data\n        }\n    },\n}\n```\ndata是注册表单的内容\n\n#### saga\n```javascript\nexport function* login(username, password) {\n    yield put({type: IndexActionTypes.FETCH_START});\n    try {\n        return yield call(post, '/user/login', {username, password})\n    } catch (error) {\n        console.log(\"login failed\", error.message);\n    } finally {\n        yield put({type: IndexActionTypes.FETCH_END});\n    }\n}\n\nexport function* loginFlow() {\n    while (true) {\n        let request = yield take(IndexActionTypes.USER_LOGIN);\n        let response = yield call(login, request.username, request.password);\n        if(response && response.code === 0){\n            yield put({type:IndexActionTypes.SET_MESSAGE,msgContent:'登录成功!',msgType:1});\n            yield put({type:IndexActionTypes.RESPONSE_USER_INFO,data:response.data})\n        } else {\n            yield put({type:IndexActionTypes.SET_MESSAGE,msgContent: (response && response.message) || '登录失败',msgType:0});\n        }\n    }\n}\n\nexport function* logout() {\n    yield put({type: IndexActionTypes.FETCH_START});\n    try {\n        return yield call(get, '/user/logout')\n    } catch (error) {\n        console.log(\"logout failed\", error.message);\n    } finally {\n        yield put({type: IndexActionTypes.FETCH_END});\n    }\n}\n\nexport function* logoutFlow() {\n    while(true) {\n        let request = yield take(IndexActionTypes.USER_LOGOUT);\n        let response = yield call(logout);\n        yield put({type:IndexActionTypes.SET_MESSAGE,msgContent:'已退出当前账号',msgType:1});\n        yield put({type:IndexActionTypes.RESPONSE_USER_INFO,data:{}})\n    }\n}\n\nexport function* register (data) {\n    yield put({type:IndexActionTypes.FETCH_START});\n    try {\n        return yield call(puter, '/user', data)\n    } catch (error) {\n        yield put({type:IndexActionTypes.SET_MESSAGE,msgContent:'注册失败',msgType:0});\n    } finally {\n        yield put({type: IndexActionTypes.FETCH_END}); \n    }\n}\n\nexport function* registerFlow () {\n    while(true){\n        let request = yield take(IndexActionTypes.USER_REGISTER);\n        let response = yield call(register, request.data);\n        if(response && response.code === 0){\n            yield put({type:IndexActionTypes.SET_MESSAGE,msgContent:'注册成功，请联系管理员批准!',msgType:1});\n            yield put({type:IndexActionTypes.RESPONSE_USER_INFO,data:response.data})\n        }\n    }\n}\n```\n\n#### 网络请求\n为了和saga的操作put分开，axios的put方法被我封装成了puter。\n```javascript\nimport axios from 'axios'\n\nlet config = {\n    baseURL: '/api',\n    transformRequest: [\n        function (data) {\n            let ret = '';\n            for (let it in data) {\n                ret += encodeURIComponent(it) + '=' + encodeURIComponent(data[it]) + '&'\n            }\n            return ret\n        }\n    ],\n    transformResponse: [\n        function (data) {\n            return data\n        }\n    ],\n    headers: {\n        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\n    },\n    timeout: 10000,\n    responseType: 'json'\n};\n\naxios.interceptors.response.use(function(res){\n    //相应拦截器\n    return res.data;\n});\n\nexport function get(url, params) {\n    console.log(\"url\", url);\n    config.params = params;\n    return axios.get(url, config)\n}\n\nexport function post(url, data) {\n    console.log(\"url\", url, \"data\", data);\n    if(config.params) {\n        delete config.params\n    }\n    return axios.post(url, data, config)\n}\n\nexport function puter(url, data) {\n    console.log(\"url\", url, \"data\", data);\n    if(config.params) {\n        delete config.params\n    }\n    return axios.put(url, data, config);\n}\n\nexport function deleter(url, param) {\n    console.log(\"url\", url, \"param\", param);\n    config.params = param;\n    return axios.delete(url, config);\n}\n```\n\n以上所有的源代码都可以在[https://github.com/yinlijun2004/android_ota_system](https://github.com/yinlijun2004/android_ota_system)中找到。\n\n\n","source":"_posts/my-ota-tutorial-2.md","raw":"---\ntitle: 从零搭建Android OTA系统——用户注册登录前端界面实现\ndate: 2018-04-09 17:17:31\ntags: [express, react, nodejs, antd]\ncategories: 从零搭建Android OTA系统\n---\nOTA的前端界面，打算用react实现，采用的库有\n- [antd](https://ant.design/index-cn) 目前比较流行UI组件库。\n- [axios](https://www.npmjs.com/package/axios) 网络请求库。\n- [redux-saga](https://www.npmjs.com/package/redux-saga) 一个处理异步流处理的库。\n\n目录结构：\n```\nsrc\n - components\n - containers\n - reducers\n - sagas\n```\n\n<!--more-->\n\ncomponents用来存放无状态组件\n\ncontainers用来存放状态组件\n\nreducers用来存放reducer文件\n\nsagas用来存放redux-saga文件\n\n#### component和container的区别\n我的理解，component是无状态、可复用的，只负责渲染的组件，它的输入是Props，输出是render的结果。\n\ncontainer负责和redux连接，从store里面获取数据。\n\n#### 界面\n登录和注册组件，可以作为一个component，用一个Tabs组件包装。\n```javascript\nexport default class Login extends Component {\n    constructor(props) {\n        super(props);\n        this.shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate.bind(this)\n    }\n\n\n    render() {\n        const { login, register } = this.props;\n        return (\n            <Tabs defaultActiveKey=\"1\" tabBarStyle={{ textAlign: 'center' }} className={ style.container }>\n                <TabPane tab=\"登录\" key=\"1\">\n                    <LoginForm login={ login }/>\n                </TabPane>\n                <TabPane tab=\"注册\" key=\"2\">\n                    <RegisterForm register={ register }/>\n                </TabPane>\n            </Tabs>\n        )\n    }\n}\n```\n\n##### reducer\n```javascript\nexport const actions = {\n    login: function (username, password) {\n        return {\n            type: actionsTypes.USER_LOGIN,\n            username,\n            password\n        }\n    },\n    logout: function () {\n        return {\n            type: actionsTypes.USER_LOGOUT,\n        }\n    },\n    register: function (data) {\n        return {\n            type: actionsTypes.USER_REGISTER,\n            data\n        }\n    },\n}\n```\ndata是注册表单的内容\n\n#### saga\n```javascript\nexport function* login(username, password) {\n    yield put({type: IndexActionTypes.FETCH_START});\n    try {\n        return yield call(post, '/user/login', {username, password})\n    } catch (error) {\n        console.log(\"login failed\", error.message);\n    } finally {\n        yield put({type: IndexActionTypes.FETCH_END});\n    }\n}\n\nexport function* loginFlow() {\n    while (true) {\n        let request = yield take(IndexActionTypes.USER_LOGIN);\n        let response = yield call(login, request.username, request.password);\n        if(response && response.code === 0){\n            yield put({type:IndexActionTypes.SET_MESSAGE,msgContent:'登录成功!',msgType:1});\n            yield put({type:IndexActionTypes.RESPONSE_USER_INFO,data:response.data})\n        } else {\n            yield put({type:IndexActionTypes.SET_MESSAGE,msgContent: (response && response.message) || '登录失败',msgType:0});\n        }\n    }\n}\n\nexport function* logout() {\n    yield put({type: IndexActionTypes.FETCH_START});\n    try {\n        return yield call(get, '/user/logout')\n    } catch (error) {\n        console.log(\"logout failed\", error.message);\n    } finally {\n        yield put({type: IndexActionTypes.FETCH_END});\n    }\n}\n\nexport function* logoutFlow() {\n    while(true) {\n        let request = yield take(IndexActionTypes.USER_LOGOUT);\n        let response = yield call(logout);\n        yield put({type:IndexActionTypes.SET_MESSAGE,msgContent:'已退出当前账号',msgType:1});\n        yield put({type:IndexActionTypes.RESPONSE_USER_INFO,data:{}})\n    }\n}\n\nexport function* register (data) {\n    yield put({type:IndexActionTypes.FETCH_START});\n    try {\n        return yield call(puter, '/user', data)\n    } catch (error) {\n        yield put({type:IndexActionTypes.SET_MESSAGE,msgContent:'注册失败',msgType:0});\n    } finally {\n        yield put({type: IndexActionTypes.FETCH_END}); \n    }\n}\n\nexport function* registerFlow () {\n    while(true){\n        let request = yield take(IndexActionTypes.USER_REGISTER);\n        let response = yield call(register, request.data);\n        if(response && response.code === 0){\n            yield put({type:IndexActionTypes.SET_MESSAGE,msgContent:'注册成功，请联系管理员批准!',msgType:1});\n            yield put({type:IndexActionTypes.RESPONSE_USER_INFO,data:response.data})\n        }\n    }\n}\n```\n\n#### 网络请求\n为了和saga的操作put分开，axios的put方法被我封装成了puter。\n```javascript\nimport axios from 'axios'\n\nlet config = {\n    baseURL: '/api',\n    transformRequest: [\n        function (data) {\n            let ret = '';\n            for (let it in data) {\n                ret += encodeURIComponent(it) + '=' + encodeURIComponent(data[it]) + '&'\n            }\n            return ret\n        }\n    ],\n    transformResponse: [\n        function (data) {\n            return data\n        }\n    ],\n    headers: {\n        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\n    },\n    timeout: 10000,\n    responseType: 'json'\n};\n\naxios.interceptors.response.use(function(res){\n    //相应拦截器\n    return res.data;\n});\n\nexport function get(url, params) {\n    console.log(\"url\", url);\n    config.params = params;\n    return axios.get(url, config)\n}\n\nexport function post(url, data) {\n    console.log(\"url\", url, \"data\", data);\n    if(config.params) {\n        delete config.params\n    }\n    return axios.post(url, data, config)\n}\n\nexport function puter(url, data) {\n    console.log(\"url\", url, \"data\", data);\n    if(config.params) {\n        delete config.params\n    }\n    return axios.put(url, data, config);\n}\n\nexport function deleter(url, param) {\n    console.log(\"url\", url, \"param\", param);\n    config.params = param;\n    return axios.delete(url, config);\n}\n```\n\n以上所有的源代码都可以在[https://github.com/yinlijun2004/android_ota_system](https://github.com/yinlijun2004/android_ota_system)中找到。\n\n\n","slug":"my-ota-tutorial-2","published":1,"updated":"2019-01-03T02:48:56.349Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aaneg0013biui1jmg0uqv","content":"<p>OTA的前端界面，打算用react实现，采用的库有</p>\n<ul>\n<li><a href=\"https://ant.design/index-cn\" target=\"_blank\" rel=\"noopener\">antd</a> 目前比较流行UI组件库。</li>\n<li><a href=\"https://www.npmjs.com/package/axios\" target=\"_blank\" rel=\"noopener\">axios</a> 网络请求库。</li>\n<li><a href=\"https://www.npmjs.com/package/redux-saga\" target=\"_blank\" rel=\"noopener\">redux-saga</a> 一个处理异步流处理的库。</li>\n</ul>\n<p>目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src</span><br><span class=\"line\"> - components</span><br><span class=\"line\"> - containers</span><br><span class=\"line\"> - reducers</span><br><span class=\"line\"> - sagas</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>components用来存放无状态组件</p>\n<p>containers用来存放状态组件</p>\n<p>reducers用来存放reducer文件</p>\n<p>sagas用来存放redux-saga文件</p>\n<h4 id=\"component和container的区别\"><a href=\"#component和container的区别\" class=\"headerlink\" title=\"component和container的区别\"></a>component和container的区别</h4><p>我的理解，component是无状态、可复用的，只负责渲染的组件，它的输入是Props，输出是render的结果。</p>\n<p>container负责和redux连接，从store里面获取数据。</p>\n<h4 id=\"界面\"><a href=\"#界面\" class=\"headerlink\" title=\"界面\"></a>界面</h4><p>登录和注册组件，可以作为一个component，用一个Tabs组件包装。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Login</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; login, register &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;Tabs defaultActiveKey=<span class=\"string\">\"1\"</span> tabBarStyle=&#123;&#123; <span class=\"attr\">textAlign</span>: <span class=\"string\">'center'</span> &#125;&#125; className=&#123; style.container &#125;&gt;</span><br><span class=\"line\">                &lt;TabPane tab=<span class=\"string\">\"登录\"</span> key=<span class=\"string\">\"1\"</span>&gt;</span><br><span class=\"line\">                    &lt;LoginForm login=&#123; login &#125;/&gt;</span><br><span class=\"line\">                &lt;<span class=\"regexp\">/TabPane&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                &lt;TabPane tab=\"注册\" key=\"2\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                    &lt;RegisterForm register=&#123; register &#125;/</span>&gt;</span><br><span class=\"line\">                &lt;<span class=\"regexp\">/TabPane&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>Tabs&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"reducer\"><a href=\"#reducer\" class=\"headerlink\" title=\"reducer\"></a>reducer</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">    login: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">username, password</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            type: actionsTypes.USER_LOGIN,</span><br><span class=\"line\">            username,</span><br><span class=\"line\">            password</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    logout: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            type: actionsTypes.USER_LOGOUT,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    register: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            type: actionsTypes.USER_REGISTER,</span><br><span class=\"line\">            data</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>data是注册表单的内容</p>\n<h4 id=\"saga\"><a href=\"#saga\" class=\"headerlink\" title=\"saga\"></a>saga</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">login</span>(<span class=\"params\">username, password</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_START&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> call(post, <span class=\"string\">'/user/login'</span>, &#123;username, password&#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"login failed\"</span>, error.message);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_END&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">loginFlow</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> request = <span class=\"keyword\">yield</span> take(IndexActionTypes.USER_LOGIN);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> response = <span class=\"keyword\">yield</span> call(login, request.username, request.password);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(response &amp;&amp; response.code === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>:IndexActionTypes.SET_MESSAGE,<span class=\"attr\">msgContent</span>:<span class=\"string\">'登录成功!'</span>,<span class=\"attr\">msgType</span>:<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>:IndexActionTypes.RESPONSE_USER_INFO,<span class=\"attr\">data</span>:response.data&#125;)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>:IndexActionTypes.SET_MESSAGE,<span class=\"attr\">msgContent</span>: (response &amp;&amp; response.message) || <span class=\"string\">'登录失败'</span>,<span class=\"attr\">msgType</span>:<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">logout</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_START&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> call(get, <span class=\"string\">'/user/logout'</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"logout failed\"</span>, error.message);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_END&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">logoutFlow</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> request = <span class=\"keyword\">yield</span> take(IndexActionTypes.USER_LOGOUT);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> response = <span class=\"keyword\">yield</span> call(logout);</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>:IndexActionTypes.SET_MESSAGE,<span class=\"attr\">msgContent</span>:<span class=\"string\">'已退出当前账号'</span>,<span class=\"attr\">msgType</span>:<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>:IndexActionTypes.RESPONSE_USER_INFO,<span class=\"attr\">data</span>:&#123;&#125;&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">register</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>:IndexActionTypes.FETCH_START&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> call(puter, <span class=\"string\">'/user'</span>, data)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>:IndexActionTypes.SET_MESSAGE,<span class=\"attr\">msgContent</span>:<span class=\"string\">'注册失败'</span>,<span class=\"attr\">msgType</span>:<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_END&#125;); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">registerFlow</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> request = <span class=\"keyword\">yield</span> take(IndexActionTypes.USER_REGISTER);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> response = <span class=\"keyword\">yield</span> call(register, request.data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(response &amp;&amp; response.code === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>:IndexActionTypes.SET_MESSAGE,<span class=\"attr\">msgContent</span>:<span class=\"string\">'注册成功，请联系管理员批准!'</span>,<span class=\"attr\">msgType</span>:<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>:IndexActionTypes.RESPONSE_USER_INFO,<span class=\"attr\">data</span>:response.data&#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"网络请求\"><a href=\"#网络请求\" class=\"headerlink\" title=\"网络请求\"></a>网络请求</h4><p>为了和saga的操作put分开，axios的put方法被我封装成了puter。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> config = &#123;</span><br><span class=\"line\">    baseURL: <span class=\"string\">'/api'</span>,</span><br><span class=\"line\">    transformRequest: [</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> ret = <span class=\"string\">''</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> it <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">                ret += <span class=\"built_in\">encodeURIComponent</span>(it) + <span class=\"string\">'='</span> + <span class=\"built_in\">encodeURIComponent</span>(data[it]) + <span class=\"string\">'&amp;'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    transformResponse: [</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">        <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/x-www-form-urlencoded;charset=UTF-8'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    timeout: <span class=\"number\">10000</span>,</span><br><span class=\"line\">    responseType: <span class=\"string\">'json'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">axios.interceptors.response.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//相应拦截器</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.data;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">url, params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"url\"</span>, url);</span><br><span class=\"line\">    config.params = params;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> axios.get(url, config)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">post</span>(<span class=\"params\">url, data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"url\"</span>, url, <span class=\"string\">\"data\"</span>, data);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(config.params) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> config.params</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> axios.post(url, data, config)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">puter</span>(<span class=\"params\">url, data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"url\"</span>, url, <span class=\"string\">\"data\"</span>, data);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(config.params) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> config.params</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> axios.put(url, data, config);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deleter</span>(<span class=\"params\">url, param</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"url\"</span>, url, <span class=\"string\">\"param\"</span>, param);</span><br><span class=\"line\">    config.params = param;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> axios.delete(url, config);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上所有的源代码都可以在<a href=\"https://github.com/yinlijun2004/android_ota_system\" target=\"_blank\" rel=\"noopener\">https://github.com/yinlijun2004/android_ota_system</a>中找到。</p>\n","site":{"data":{}},"excerpt":"<p>OTA的前端界面，打算用react实现，采用的库有</p>\n<ul>\n<li><a href=\"https://ant.design/index-cn\" target=\"_blank\" rel=\"noopener\">antd</a> 目前比较流行UI组件库。</li>\n<li><a href=\"https://www.npmjs.com/package/axios\" target=\"_blank\" rel=\"noopener\">axios</a> 网络请求库。</li>\n<li><a href=\"https://www.npmjs.com/package/redux-saga\" target=\"_blank\" rel=\"noopener\">redux-saga</a> 一个处理异步流处理的库。</li>\n</ul>\n<p>目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src</span><br><span class=\"line\"> - components</span><br><span class=\"line\"> - containers</span><br><span class=\"line\"> - reducers</span><br><span class=\"line\"> - sagas</span><br></pre></td></tr></table></figure></p>","more":"<p>components用来存放无状态组件</p>\n<p>containers用来存放状态组件</p>\n<p>reducers用来存放reducer文件</p>\n<p>sagas用来存放redux-saga文件</p>\n<h4 id=\"component和container的区别\"><a href=\"#component和container的区别\" class=\"headerlink\" title=\"component和container的区别\"></a>component和container的区别</h4><p>我的理解，component是无状态、可复用的，只负责渲染的组件，它的输入是Props，输出是render的结果。</p>\n<p>container负责和redux连接，从store里面获取数据。</p>\n<h4 id=\"界面\"><a href=\"#界面\" class=\"headerlink\" title=\"界面\"></a>界面</h4><p>登录和注册组件，可以作为一个component，用一个Tabs组件包装。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Login</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; login, register &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;Tabs defaultActiveKey=<span class=\"string\">\"1\"</span> tabBarStyle=&#123;&#123; <span class=\"attr\">textAlign</span>: <span class=\"string\">'center'</span> &#125;&#125; className=&#123; style.container &#125;&gt;</span><br><span class=\"line\">                &lt;TabPane tab=<span class=\"string\">\"登录\"</span> key=<span class=\"string\">\"1\"</span>&gt;</span><br><span class=\"line\">                    &lt;LoginForm login=&#123; login &#125;/&gt;</span><br><span class=\"line\">                &lt;<span class=\"regexp\">/TabPane&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                &lt;TabPane tab=\"注册\" key=\"2\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                    &lt;RegisterForm register=&#123; register &#125;/</span>&gt;</span><br><span class=\"line\">                &lt;<span class=\"regexp\">/TabPane&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>Tabs&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"reducer\"><a href=\"#reducer\" class=\"headerlink\" title=\"reducer\"></a>reducer</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">    login: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">username, password</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            type: actionsTypes.USER_LOGIN,</span><br><span class=\"line\">            username,</span><br><span class=\"line\">            password</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    logout: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            type: actionsTypes.USER_LOGOUT,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    register: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            type: actionsTypes.USER_REGISTER,</span><br><span class=\"line\">            data</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>data是注册表单的内容</p>\n<h4 id=\"saga\"><a href=\"#saga\" class=\"headerlink\" title=\"saga\"></a>saga</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">login</span>(<span class=\"params\">username, password</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_START&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> call(post, <span class=\"string\">'/user/login'</span>, &#123;username, password&#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"login failed\"</span>, error.message);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_END&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">loginFlow</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> request = <span class=\"keyword\">yield</span> take(IndexActionTypes.USER_LOGIN);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> response = <span class=\"keyword\">yield</span> call(login, request.username, request.password);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(response &amp;&amp; response.code === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>:IndexActionTypes.SET_MESSAGE,<span class=\"attr\">msgContent</span>:<span class=\"string\">'登录成功!'</span>,<span class=\"attr\">msgType</span>:<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>:IndexActionTypes.RESPONSE_USER_INFO,<span class=\"attr\">data</span>:response.data&#125;)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>:IndexActionTypes.SET_MESSAGE,<span class=\"attr\">msgContent</span>: (response &amp;&amp; response.message) || <span class=\"string\">'登录失败'</span>,<span class=\"attr\">msgType</span>:<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">logout</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_START&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> call(get, <span class=\"string\">'/user/logout'</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"logout failed\"</span>, error.message);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_END&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">logoutFlow</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> request = <span class=\"keyword\">yield</span> take(IndexActionTypes.USER_LOGOUT);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> response = <span class=\"keyword\">yield</span> call(logout);</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>:IndexActionTypes.SET_MESSAGE,<span class=\"attr\">msgContent</span>:<span class=\"string\">'已退出当前账号'</span>,<span class=\"attr\">msgType</span>:<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>:IndexActionTypes.RESPONSE_USER_INFO,<span class=\"attr\">data</span>:&#123;&#125;&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">register</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>:IndexActionTypes.FETCH_START&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> call(puter, <span class=\"string\">'/user'</span>, data)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>:IndexActionTypes.SET_MESSAGE,<span class=\"attr\">msgContent</span>:<span class=\"string\">'注册失败'</span>,<span class=\"attr\">msgType</span>:<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_END&#125;); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">registerFlow</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> request = <span class=\"keyword\">yield</span> take(IndexActionTypes.USER_REGISTER);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> response = <span class=\"keyword\">yield</span> call(register, request.data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(response &amp;&amp; response.code === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>:IndexActionTypes.SET_MESSAGE,<span class=\"attr\">msgContent</span>:<span class=\"string\">'注册成功，请联系管理员批准!'</span>,<span class=\"attr\">msgType</span>:<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>:IndexActionTypes.RESPONSE_USER_INFO,<span class=\"attr\">data</span>:response.data&#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"网络请求\"><a href=\"#网络请求\" class=\"headerlink\" title=\"网络请求\"></a>网络请求</h4><p>为了和saga的操作put分开，axios的put方法被我封装成了puter。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> config = &#123;</span><br><span class=\"line\">    baseURL: <span class=\"string\">'/api'</span>,</span><br><span class=\"line\">    transformRequest: [</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> ret = <span class=\"string\">''</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> it <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">                ret += <span class=\"built_in\">encodeURIComponent</span>(it) + <span class=\"string\">'='</span> + <span class=\"built_in\">encodeURIComponent</span>(data[it]) + <span class=\"string\">'&amp;'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    transformResponse: [</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">        <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/x-www-form-urlencoded;charset=UTF-8'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    timeout: <span class=\"number\">10000</span>,</span><br><span class=\"line\">    responseType: <span class=\"string\">'json'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">axios.interceptors.response.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//相应拦截器</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.data;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">url, params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"url\"</span>, url);</span><br><span class=\"line\">    config.params = params;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> axios.get(url, config)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">post</span>(<span class=\"params\">url, data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"url\"</span>, url, <span class=\"string\">\"data\"</span>, data);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(config.params) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> config.params</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> axios.post(url, data, config)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">puter</span>(<span class=\"params\">url, data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"url\"</span>, url, <span class=\"string\">\"data\"</span>, data);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(config.params) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> config.params</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> axios.put(url, data, config);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deleter</span>(<span class=\"params\">url, param</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"url\"</span>, url, <span class=\"string\">\"param\"</span>, param);</span><br><span class=\"line\">    config.params = param;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> axios.delete(url, config);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上所有的源代码都可以在<a href=\"https://github.com/yinlijun2004/android_ota_system\" target=\"_blank\" rel=\"noopener\">https://github.com/yinlijun2004/android_ota_system</a>中找到。</p>"},{"title":"从零搭建Android OTA系统——用户管理规则实现","date":"2018-04-19T02:16:18.000Z","_content":"\nOTA系统提供两套API，一套用于普通的查询功能，比如以发布的版本列表，版本下载地址等，另一套提供管理功能，比如新建，编辑，删除等。\n\n管理功能API，需要区分用户类型，不同的用户有不同的权限，用户分为以下四类：\n\n- 系统管理员\n    - 批准用户注册申请\n    - 删除用户\n    - 重置用户密码\n    - 管理测试SN\n    - 管理Android版本\n    - 管理版本类别\n\n<!--more-->\n\n- 软件工程师\n    - 新建版本\n    - 修改版本\n    - 上传固件包\n    - 发布Alpha测试\n\n- 测试工程师\n    - 撤回Alpha测试\n    - 发布Beta测试\n\n- 运营工程师\n    - 撤回Beta测试\n    - 发布Release版本\n\n### 注册用户\n\n#### 前端注册请求\n\nsaga/homeSaga.js\n```javascript\nexport function* register (data) {\n    yield put({type:IndexActionTypes.FETCH_START});\n    try {\n        return yield call(puter, '/user', data)\n    } catch (error) {\n        yield put({type:IndexActionTypes.SET_MESSAGE,msgContent:'注册失败',msgType:0});\n    } finally {\n        yield put({type: IndexActionTypes.FETCH_END}); \n    }\n}\n```\n\n#### 后端处理注册请求\n\nroutes/user.js\n```javascript\n//注册\nrouter.put('/', validRequest.validUsernamePassword, user.register);\n```\nvalidRequest中间件用来校验用户名密码。\n\ncontroller/user.js\n```javascript\nexports.register = (req, res, next) => {\n  const {\n    type,\n    username,\n    password} = req.body;\n  var newUser = new User();\n  newUser.username = username;\n  newUser.password = newUser.encryptPassword(password);\n  newUser.type = type;\n  newUser.state = \"pending\";\n  \n  newUser.save()\n    .then(user => {\n      responseClient(res, 200, errorCode.ERROR_CODE_SUCCESS, \"注册成功，请联系管理员批准\");\n    })\n    .catch(err => {\n      console.log(err.message);\n      responseClient(res, 406, errorCode.ERROR_CODE_SERVER, err.message);\n    })\n}\n```\n创建用户时，初始状态为pending，存储密码用密文。\n\n\n### 批准用户\n\n批准用户需要管理员身份。\n\n#### 前端发送批准请求\nadminManagerUserSaga.js\n```javascript\nfunction* acceptUser(username) {\n    yield put({type: IndexActionTypes.FETCH_START});\n    try {\n        return yield call(post, `/user_manager/accept`, {username});\n    } catch (err) {\n        yield put({type: IndexActionTypes.SET_MESSAGE, msgContent: '网络请求错误', msgType: 0});\n    } finally {\n        yield put({type: IndexActionTypes.FETCH_END})\n    }\n}\n```\n\n#### 后端处理批准请求\nroutes/user_manager.js\n```javascript\n//批准用户\nrouter.post('/accept', validRequest.validUserType('admin'), user.acceptUser);\n```\n\ncontroller/user_manager.js\n```javascript\nexports.acceptUser = (req, res, next) => {\n  const {\n    username,\n  } = req.body;\n  \n  if(!username) {\n    responseClient(res, 401, errorCode.ERROR_CODE_CLIENT, \"未知用户名\");\n    return;\n  }\n  User.findOne({username: username}).exec()\n    .then(user => {\n      if(!user) {\n        throw new Error(`未知用户名:${username}`)\n      } else if(user.state === 'accept') {\n        return Promise.resolve(user);\n      }\n      user.state = 'accept';\n      return user.save();\n    })\n    .then(user => {\n      responseClient(res, 200, errorCode.ERROR_CODE_SUCCESS, `${username}已批准`);\n    })\n    .catch(error => {\n      console.log('acceptUser', error.message);\n      responseClient(res, 401, errorCode.ERROR_CODE_CLIENT, `批准用户失败`);\n    })\n}\n```\n\n其他用户管理操作的流程是类似的。\n\n以上所有的源代码都可以在[https://github.com/yinlijun2004/android_ota_system](https://github.com/yinlijun2004/android_ota_system)中找到。","source":"_posts/my-ota-tutorial-5.md","raw":"---\ntitle: 从零搭建Android OTA系统——用户管理规则实现\ndate: 2018-04-19 10:16:18\ntags:  [express, react, nodejs, antd]\ncategories: 从零搭建Android OTA系统\n---\n\nOTA系统提供两套API，一套用于普通的查询功能，比如以发布的版本列表，版本下载地址等，另一套提供管理功能，比如新建，编辑，删除等。\n\n管理功能API，需要区分用户类型，不同的用户有不同的权限，用户分为以下四类：\n\n- 系统管理员\n    - 批准用户注册申请\n    - 删除用户\n    - 重置用户密码\n    - 管理测试SN\n    - 管理Android版本\n    - 管理版本类别\n\n<!--more-->\n\n- 软件工程师\n    - 新建版本\n    - 修改版本\n    - 上传固件包\n    - 发布Alpha测试\n\n- 测试工程师\n    - 撤回Alpha测试\n    - 发布Beta测试\n\n- 运营工程师\n    - 撤回Beta测试\n    - 发布Release版本\n\n### 注册用户\n\n#### 前端注册请求\n\nsaga/homeSaga.js\n```javascript\nexport function* register (data) {\n    yield put({type:IndexActionTypes.FETCH_START});\n    try {\n        return yield call(puter, '/user', data)\n    } catch (error) {\n        yield put({type:IndexActionTypes.SET_MESSAGE,msgContent:'注册失败',msgType:0});\n    } finally {\n        yield put({type: IndexActionTypes.FETCH_END}); \n    }\n}\n```\n\n#### 后端处理注册请求\n\nroutes/user.js\n```javascript\n//注册\nrouter.put('/', validRequest.validUsernamePassword, user.register);\n```\nvalidRequest中间件用来校验用户名密码。\n\ncontroller/user.js\n```javascript\nexports.register = (req, res, next) => {\n  const {\n    type,\n    username,\n    password} = req.body;\n  var newUser = new User();\n  newUser.username = username;\n  newUser.password = newUser.encryptPassword(password);\n  newUser.type = type;\n  newUser.state = \"pending\";\n  \n  newUser.save()\n    .then(user => {\n      responseClient(res, 200, errorCode.ERROR_CODE_SUCCESS, \"注册成功，请联系管理员批准\");\n    })\n    .catch(err => {\n      console.log(err.message);\n      responseClient(res, 406, errorCode.ERROR_CODE_SERVER, err.message);\n    })\n}\n```\n创建用户时，初始状态为pending，存储密码用密文。\n\n\n### 批准用户\n\n批准用户需要管理员身份。\n\n#### 前端发送批准请求\nadminManagerUserSaga.js\n```javascript\nfunction* acceptUser(username) {\n    yield put({type: IndexActionTypes.FETCH_START});\n    try {\n        return yield call(post, `/user_manager/accept`, {username});\n    } catch (err) {\n        yield put({type: IndexActionTypes.SET_MESSAGE, msgContent: '网络请求错误', msgType: 0});\n    } finally {\n        yield put({type: IndexActionTypes.FETCH_END})\n    }\n}\n```\n\n#### 后端处理批准请求\nroutes/user_manager.js\n```javascript\n//批准用户\nrouter.post('/accept', validRequest.validUserType('admin'), user.acceptUser);\n```\n\ncontroller/user_manager.js\n```javascript\nexports.acceptUser = (req, res, next) => {\n  const {\n    username,\n  } = req.body;\n  \n  if(!username) {\n    responseClient(res, 401, errorCode.ERROR_CODE_CLIENT, \"未知用户名\");\n    return;\n  }\n  User.findOne({username: username}).exec()\n    .then(user => {\n      if(!user) {\n        throw new Error(`未知用户名:${username}`)\n      } else if(user.state === 'accept') {\n        return Promise.resolve(user);\n      }\n      user.state = 'accept';\n      return user.save();\n    })\n    .then(user => {\n      responseClient(res, 200, errorCode.ERROR_CODE_SUCCESS, `${username}已批准`);\n    })\n    .catch(error => {\n      console.log('acceptUser', error.message);\n      responseClient(res, 401, errorCode.ERROR_CODE_CLIENT, `批准用户失败`);\n    })\n}\n```\n\n其他用户管理操作的流程是类似的。\n\n以上所有的源代码都可以在[https://github.com/yinlijun2004/android_ota_system](https://github.com/yinlijun2004/android_ota_system)中找到。","slug":"my-ota-tutorial-5","published":1,"updated":"2019-01-03T02:48:56.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aaneg0014biuivuz4z33y","content":"<p>OTA系统提供两套API，一套用于普通的查询功能，比如以发布的版本列表，版本下载地址等，另一套提供管理功能，比如新建，编辑，删除等。</p>\n<p>管理功能API，需要区分用户类型，不同的用户有不同的权限，用户分为以下四类：</p>\n<ul>\n<li>系统管理员<ul>\n<li>批准用户注册申请</li>\n<li>删除用户</li>\n<li>重置用户密码</li>\n<li>管理测试SN</li>\n<li>管理Android版本</li>\n<li>管理版本类别</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>软件工程师</p>\n<ul>\n<li>新建版本</li>\n<li>修改版本</li>\n<li>上传固件包</li>\n<li>发布Alpha测试</li>\n</ul>\n</li>\n<li><p>测试工程师</p>\n<ul>\n<li>撤回Alpha测试</li>\n<li>发布Beta测试</li>\n</ul>\n</li>\n<li><p>运营工程师</p>\n<ul>\n<li>撤回Beta测试</li>\n<li>发布Release版本</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"注册用户\"><a href=\"#注册用户\" class=\"headerlink\" title=\"注册用户\"></a>注册用户</h3><h4 id=\"前端注册请求\"><a href=\"#前端注册请求\" class=\"headerlink\" title=\"前端注册请求\"></a>前端注册请求</h4><p>saga/homeSaga.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">register</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>:IndexActionTypes.FETCH_START&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> call(puter, <span class=\"string\">'/user'</span>, data)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>:IndexActionTypes.SET_MESSAGE,<span class=\"attr\">msgContent</span>:<span class=\"string\">'注册失败'</span>,<span class=\"attr\">msgType</span>:<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_END&#125;); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"后端处理注册请求\"><a href=\"#后端处理注册请求\" class=\"headerlink\" title=\"后端处理注册请求\"></a>后端处理注册请求</h4><p>routes/user.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注册</span></span><br><span class=\"line\">router.put(<span class=\"string\">'/'</span>, validRequest.validUsernamePassword, user.register);</span><br></pre></td></tr></table></figure></p>\n<p>validRequest中间件用来校验用户名密码。</p>\n<p>controller/user.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.register = <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    type,</span><br><span class=\"line\">    username,</span><br><span class=\"line\">    password&#125; = req.body;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newUser = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">  newUser.username = username;</span><br><span class=\"line\">  newUser.password = newUser.encryptPassword(password);</span><br><span class=\"line\">  newUser.type = type;</span><br><span class=\"line\">  newUser.state = <span class=\"string\">\"pending\"</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  newUser.save()</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">      responseClient(res, <span class=\"number\">200</span>, errorCode.ERROR_CODE_SUCCESS, <span class=\"string\">\"注册成功，请联系管理员批准\"</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(err.message);</span><br><span class=\"line\">      responseClient(res, <span class=\"number\">406</span>, errorCode.ERROR_CODE_SERVER, err.message);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>创建用户时，初始状态为pending，存储密码用密文。</p>\n<h3 id=\"批准用户\"><a href=\"#批准用户\" class=\"headerlink\" title=\"批准用户\"></a>批准用户</h3><p>批准用户需要管理员身份。</p>\n<h4 id=\"前端发送批准请求\"><a href=\"#前端发送批准请求\" class=\"headerlink\" title=\"前端发送批准请求\"></a>前端发送批准请求</h4><p>adminManagerUserSaga.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">acceptUser</span>(<span class=\"params\">username</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_START&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> call(post, <span class=\"string\">`/user_manager/accept`</span>, &#123;username&#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.SET_MESSAGE, <span class=\"attr\">msgContent</span>: <span class=\"string\">'网络请求错误'</span>, <span class=\"attr\">msgType</span>: <span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_END&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"后端处理批准请求\"><a href=\"#后端处理批准请求\" class=\"headerlink\" title=\"后端处理批准请求\"></a>后端处理批准请求</h4><p>routes/user_manager.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//批准用户</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/accept'</span>, validRequest.validUserType(<span class=\"string\">'admin'</span>), user.acceptUser);</span><br></pre></td></tr></table></figure></p>\n<p>controller/user_manager.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.acceptUser = <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    username,</span><br><span class=\"line\">  &#125; = req.body;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!username) &#123;</span><br><span class=\"line\">    responseClient(res, <span class=\"number\">401</span>, errorCode.ERROR_CODE_CLIENT, <span class=\"string\">\"未知用户名\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  User.findOne(&#123;<span class=\"attr\">username</span>: username&#125;).exec()</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!user) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`未知用户名:<span class=\"subst\">$&#123;username&#125;</span>`</span>)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(user.state === <span class=\"string\">'accept'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(user);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      user.state = <span class=\"string\">'accept'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> user.save();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">      responseClient(res, <span class=\"number\">200</span>, errorCode.ERROR_CODE_SUCCESS, <span class=\"string\">`<span class=\"subst\">$&#123;username&#125;</span>已批准`</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'acceptUser'</span>, error.message);</span><br><span class=\"line\">      responseClient(res, <span class=\"number\">401</span>, errorCode.ERROR_CODE_CLIENT, <span class=\"string\">`批准用户失败`</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其他用户管理操作的流程是类似的。</p>\n<p>以上所有的源代码都可以在<a href=\"https://github.com/yinlijun2004/android_ota_system\" target=\"_blank\" rel=\"noopener\">https://github.com/yinlijun2004/android_ota_system</a>中找到。</p>\n","site":{"data":{}},"excerpt":"<p>OTA系统提供两套API，一套用于普通的查询功能，比如以发布的版本列表，版本下载地址等，另一套提供管理功能，比如新建，编辑，删除等。</p>\n<p>管理功能API，需要区分用户类型，不同的用户有不同的权限，用户分为以下四类：</p>\n<ul>\n<li>系统管理员<ul>\n<li>批准用户注册申请</li>\n<li>删除用户</li>\n<li>重置用户密码</li>\n<li>管理测试SN</li>\n<li>管理Android版本</li>\n<li>管理版本类别</li>\n</ul>\n</li>\n</ul>","more":"<ul>\n<li><p>软件工程师</p>\n<ul>\n<li>新建版本</li>\n<li>修改版本</li>\n<li>上传固件包</li>\n<li>发布Alpha测试</li>\n</ul>\n</li>\n<li><p>测试工程师</p>\n<ul>\n<li>撤回Alpha测试</li>\n<li>发布Beta测试</li>\n</ul>\n</li>\n<li><p>运营工程师</p>\n<ul>\n<li>撤回Beta测试</li>\n<li>发布Release版本</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"注册用户\"><a href=\"#注册用户\" class=\"headerlink\" title=\"注册用户\"></a>注册用户</h3><h4 id=\"前端注册请求\"><a href=\"#前端注册请求\" class=\"headerlink\" title=\"前端注册请求\"></a>前端注册请求</h4><p>saga/homeSaga.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">register</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>:IndexActionTypes.FETCH_START&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> call(puter, <span class=\"string\">'/user'</span>, data)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>:IndexActionTypes.SET_MESSAGE,<span class=\"attr\">msgContent</span>:<span class=\"string\">'注册失败'</span>,<span class=\"attr\">msgType</span>:<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_END&#125;); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"后端处理注册请求\"><a href=\"#后端处理注册请求\" class=\"headerlink\" title=\"后端处理注册请求\"></a>后端处理注册请求</h4><p>routes/user.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注册</span></span><br><span class=\"line\">router.put(<span class=\"string\">'/'</span>, validRequest.validUsernamePassword, user.register);</span><br></pre></td></tr></table></figure></p>\n<p>validRequest中间件用来校验用户名密码。</p>\n<p>controller/user.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.register = <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    type,</span><br><span class=\"line\">    username,</span><br><span class=\"line\">    password&#125; = req.body;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newUser = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">  newUser.username = username;</span><br><span class=\"line\">  newUser.password = newUser.encryptPassword(password);</span><br><span class=\"line\">  newUser.type = type;</span><br><span class=\"line\">  newUser.state = <span class=\"string\">\"pending\"</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  newUser.save()</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">      responseClient(res, <span class=\"number\">200</span>, errorCode.ERROR_CODE_SUCCESS, <span class=\"string\">\"注册成功，请联系管理员批准\"</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(err.message);</span><br><span class=\"line\">      responseClient(res, <span class=\"number\">406</span>, errorCode.ERROR_CODE_SERVER, err.message);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>创建用户时，初始状态为pending，存储密码用密文。</p>\n<h3 id=\"批准用户\"><a href=\"#批准用户\" class=\"headerlink\" title=\"批准用户\"></a>批准用户</h3><p>批准用户需要管理员身份。</p>\n<h4 id=\"前端发送批准请求\"><a href=\"#前端发送批准请求\" class=\"headerlink\" title=\"前端发送批准请求\"></a>前端发送批准请求</h4><p>adminManagerUserSaga.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">acceptUser</span>(<span class=\"params\">username</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_START&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> call(post, <span class=\"string\">`/user_manager/accept`</span>, &#123;username&#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.SET_MESSAGE, <span class=\"attr\">msgContent</span>: <span class=\"string\">'网络请求错误'</span>, <span class=\"attr\">msgType</span>: <span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_END&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"后端处理批准请求\"><a href=\"#后端处理批准请求\" class=\"headerlink\" title=\"后端处理批准请求\"></a>后端处理批准请求</h4><p>routes/user_manager.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//批准用户</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/accept'</span>, validRequest.validUserType(<span class=\"string\">'admin'</span>), user.acceptUser);</span><br></pre></td></tr></table></figure></p>\n<p>controller/user_manager.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.acceptUser = <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    username,</span><br><span class=\"line\">  &#125; = req.body;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!username) &#123;</span><br><span class=\"line\">    responseClient(res, <span class=\"number\">401</span>, errorCode.ERROR_CODE_CLIENT, <span class=\"string\">\"未知用户名\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  User.findOne(&#123;<span class=\"attr\">username</span>: username&#125;).exec()</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!user) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`未知用户名:<span class=\"subst\">$&#123;username&#125;</span>`</span>)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(user.state === <span class=\"string\">'accept'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(user);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      user.state = <span class=\"string\">'accept'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> user.save();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">      responseClient(res, <span class=\"number\">200</span>, errorCode.ERROR_CODE_SUCCESS, <span class=\"string\">`<span class=\"subst\">$&#123;username&#125;</span>已批准`</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'acceptUser'</span>, error.message);</span><br><span class=\"line\">      responseClient(res, <span class=\"number\">401</span>, errorCode.ERROR_CODE_CLIENT, <span class=\"string\">`批准用户失败`</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其他用户管理操作的流程是类似的。</p>\n<p>以上所有的源代码都可以在<a href=\"https://github.com/yinlijun2004/android_ota_system\" target=\"_blank\" rel=\"noopener\">https://github.com/yinlijun2004/android_ota_system</a>中找到。</p>"},{"title":"从零搭建Android OTA系统——版本发布规则实现","date":"2018-04-19T01:32:37.000Z","_content":"\n版本包含两部分\n- 版本元信息\n存放在业务服务器上，存储版本号，版本类型，Android版本号等等。\n- 版本固件包 存放在七牛云服务器上。\n\n<!-- more -->\n\n总体框图如下：\n![](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/5e891902dcc45c5a8384d25d7779d5eb937fd0183a1fd67496650f84621404c5ea46a384b1d2b8836819fa09c44df7e0?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=OTA%E6%A1%86%E5%9B%BE.png&size=1024)\n\n\n发布版本规则，其实就是改变版本的状态，我将版本分为四个状态。\n- new 新建状态，可以上传固件包，编辑版本信息。\n- alpha Alpha状态，可以在后台配置支持alpha测试的SN号，对应的终端设备能收到升级提示。\n- beta Beta状态，可以在后台配置支持beta测试的SN号，对应的终端设备能收到升级提示。\n- Release状态，所有的设备都能收到升级提示。\n\n版本状态迁移：\n\n![版本状态迁移：](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/f8279f93bdf2d68e2d599d0498b747cfe83430bbd7161ce4a39268a1156af75ff42effdec511f08e0dc4d6489e58dbbe?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=firmware_process.png&size=1024)\n\n### 创建版本\n\n#### 前端上传版本信息\nadminManagerFirmwareSaga.js\n```javascript\nexport function* createFirmwareInfo(data) {\n  yield put({type: IndexActionTypes.FETCH_START});\n  try {\n    data.releaseNotes = JSON.stringify(data.releaseNotes);\n    return yield call(puter, '/firmware_manager/firmware', data);\n  } catch (error) {\n    //\n  } finally {\n    yield put({type: IndexActionTypes.FETCH_END});\n  }\n}\n```\n\n#### 后端处理新建版本\nroutes/firmware_manager.js\n```javascript\n//新建版本\nrouter.put('/firmware', \n    validRequest.validUserType('program'), firmwareManager.createFirmware);\n```\n这里用一个中间件过滤用户类型，只有program的用户才允许创建版本。\n\ncontroller/firwmare_manager.js\n```javascript\nexports.createFirmware = (req, res, next) => {\n  const {\n    firmwareCode, \n    firmwareDescription, \n    androidVersion, \n    firmwareClass,\n    releaseNotes,\n  } = req.body; \n  if(!firmwareCode || !firmwareDescription || !androidVersion || !firmwareClass || !releaseNotes) {\n    responseClient(res, 401, errorCode.ERROR_CODE_CLIENT, \"invalid param\");\n  }\n  let notes;\n  try {\n     notes = JSON.parse(releaseNotes);\n  } catch(err) {\n    console.log(err.message);\n    responseClient(res, 401, errorCode.ERROR_CODE_CLIENT, \"release notes parse failed\");\n    return;\n  }\n  Promise.all(\n    [\n      Firmware.findOne({firmwareClass: firmwareClass, firmwareCode: firmwareCode}).exec(),\n      Firmware.find({firmwareClass: firmwareClass}).exec()\n    ]).then(([newFirmware, allFirmwares]) => {\n      console.log(\"newFirmware:\", newFirmware, \"allFirmwares:\", allFirmwares);\n      if(newFirmware) {\n        throw new Error(`firmware code: ${firmwareCode} in class ${firmwareClass} already exsist!`);\n      }\n      console.log(\"release notes:\", notes);\n      let data = {\n        firmwareCode: firmwareCode,\n        firmwareDescription: firmwareDescription,\n        androidVersion: androidVersion,\n        firmwareClass: firmwareClass,\n        releaseNotes: notes,\n        firmwareState: \"new\",\n      };\n      if(allFirmwares && allFirmwares.length > 0) {\n        let diffPath = allFirmwares.filter(f => {\n          return firmwareUtils.compareFirmwareCode(firmwareCode, f.firmwareCode) > 0;\n        }).map(f => {\n          return {firmwareCode: f.firmwareCode, firmwareId: f._id};\n        })\n        data.diffPackagePath = diffPath;\n      }\n      firmwareUtils.assertFirmwareContent(data);\n      return new Firmware(data).save();\n    })\n    .then(firmware => {\n      responseClient(res, 200, errorCode.ERROR_CODE_SUCCESS, \"firmware created\");\n    })\n    .catch(error => {\n      console.log('firmware save error', error.message);\n      responseClient(res, 406, errorCode.ERROR_CODE_CLIENT, error.message);\n    })\n}\n```\n创建版本后，初始化版本状态为new。\n\n### 修改版本状态\n\n#### 前端发送请求\n```javascript\n\nfunction* firmwarePublishAlpha(id) {\n  yield put({type: IndexActionTypes.FETCH_START})\n  try {\n    return yield call(post, `/firmware_manager/${id}/alpha`);\n  } catch(error) {\n    //\n  } finally {\n    yield put({type: IndexActionTypes.FETCH_END});\n  }\n}\n\nfunction* firmwareReverseAlpha(id) {\n  yield put({type: IndexActionTypes.FETCH_START})\n  try {\n    return yield call(deleter, `/firmware_manager/${id}/alpha`);\n  } catch(error) {\n    //\n  } finally {\n    yield put({type: IndexActionTypes.FETCH_END});\n  }\n}\n\nfunction* firmwarePublishBeta(id) {\n  yield put({type: IndexActionTypes.FETCH_START})\n  try {\n    return yield call(post, `/firmware_manager/${id}/beta`);\n  } catch(error) {\n    //\n  } finally {\n    yield put({type: IndexActionTypes.FETCH_END});\n  }\n}\n\nfunction* firmwareReverseBeta(id) {\n  yield put({type: IndexActionTypes.FETCH_START})\n  try {\n    return yield call(deleter, `/firmware_manager/${id}/beta`);\n  } catch(error) {\n    //\n  } finally {\n    yield put({type: IndexActionTypes.FETCH_END});\n  }\n}\n\nfunction* firmwarePublishRelease(id) {\n  yield put({type: IndexActionTypes.FETCH_START})\n  try {\n    return yield call(post, `/firmware_manager/${id}/release`);\n  } catch(error) {\n    //\n  } finally {\n    yield put({type: IndexActionTypes.FETCH_END});\n  }\n}\n```\n接口设计遵循restful原则。\n\n#### 后端处理\n\nroutes/firwmare_manager.js\n```javascript\n//发布alpha测试\nrouter.post('/:id/alpha',\n    validRequest.validUserType('program'), firmwareManager.changeState(\"new\", \"alpha\"));\n\n//撤回alpha测试\nrouter.delete('/:id/alpha',\n    validRequest.validUserType('test'), firmwareManager.changeState(\"alpha\", \"new\"));\n\n//发布beta测试\nrouter.post('/:id/beta',\n    validRequest.validUserType('test'), firmwareManager.changeState(\"alpha\", \"beta\"));\n\n//撤回beta测试\nrouter.delete('/:id/beta',\n    validRequest.validUserType('operation'), firmwareManager.changeState(\"beta\", \"alpha\"));\n\n//发布release版本\nrouter.post('/:id/release',\n    validRequest.validUserType('operation'), firmwareManager.changeState(\"beta\", \"release\"));\n```\n上面的api接口，统一放在changeState里面做。\n\ncontroller/firwmare_manager.js\n```javascript\nexports.changeState = (prevState, nextState) => {\n  return (req, res, next) => {\n    const id = req.params.id;\n\n    Firmware.findById(id).exec() \n    .then(item => {\n      if(!item) {\n        throw new Error(`firmware id ${id} not found`);\n      }\n      if(item.firmwareState != prevState) {\n        throw new Error(`user has no permission change ${prevState} to ${nextState}`);\n      }\n      \n      if(prevState === \"new\" && (!item.fullPackagePath || item.fullPackagePath.length === 0)) {\n        throw new Error(`state change failed, full package not found`);\n      }\n      item.firmwareState = nextState;\n      item.save();\n    })\n    .then(item => {\n      responseClient(res, 200, errorCode.ERROR_CODE_SUCCESS, \"firmware publish success\");\n    })\n    .catch(error => {\n      responseClient(res, 404, errorCode.ERROR_CODE_SERVER, error.message);\n    })\n  } \n}\n```\n以上所有的源代码都可以在[https://github.com/yinlijun2004/android_ota_system](https://github.com/yinlijun2004/android_ota_system)中找到。","source":"_posts/my-ota-tutorial-4.md","raw":"---\ntitle: 从零搭建Android OTA系统——版本发布规则实现\ndate: 2018-04-19 09:32:37\ntags:  [express, react, nodejs, antd]\ncategories: 从零搭建Android OTA系统\n---\n\n版本包含两部分\n- 版本元信息\n存放在业务服务器上，存储版本号，版本类型，Android版本号等等。\n- 版本固件包 存放在七牛云服务器上。\n\n<!-- more -->\n\n总体框图如下：\n![](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/5e891902dcc45c5a8384d25d7779d5eb937fd0183a1fd67496650f84621404c5ea46a384b1d2b8836819fa09c44df7e0?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=OTA%E6%A1%86%E5%9B%BE.png&size=1024)\n\n\n发布版本规则，其实就是改变版本的状态，我将版本分为四个状态。\n- new 新建状态，可以上传固件包，编辑版本信息。\n- alpha Alpha状态，可以在后台配置支持alpha测试的SN号，对应的终端设备能收到升级提示。\n- beta Beta状态，可以在后台配置支持beta测试的SN号，对应的终端设备能收到升级提示。\n- Release状态，所有的设备都能收到升级提示。\n\n版本状态迁移：\n\n![版本状态迁移：](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/f8279f93bdf2d68e2d599d0498b747cfe83430bbd7161ce4a39268a1156af75ff42effdec511f08e0dc4d6489e58dbbe?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=firmware_process.png&size=1024)\n\n### 创建版本\n\n#### 前端上传版本信息\nadminManagerFirmwareSaga.js\n```javascript\nexport function* createFirmwareInfo(data) {\n  yield put({type: IndexActionTypes.FETCH_START});\n  try {\n    data.releaseNotes = JSON.stringify(data.releaseNotes);\n    return yield call(puter, '/firmware_manager/firmware', data);\n  } catch (error) {\n    //\n  } finally {\n    yield put({type: IndexActionTypes.FETCH_END});\n  }\n}\n```\n\n#### 后端处理新建版本\nroutes/firmware_manager.js\n```javascript\n//新建版本\nrouter.put('/firmware', \n    validRequest.validUserType('program'), firmwareManager.createFirmware);\n```\n这里用一个中间件过滤用户类型，只有program的用户才允许创建版本。\n\ncontroller/firwmare_manager.js\n```javascript\nexports.createFirmware = (req, res, next) => {\n  const {\n    firmwareCode, \n    firmwareDescription, \n    androidVersion, \n    firmwareClass,\n    releaseNotes,\n  } = req.body; \n  if(!firmwareCode || !firmwareDescription || !androidVersion || !firmwareClass || !releaseNotes) {\n    responseClient(res, 401, errorCode.ERROR_CODE_CLIENT, \"invalid param\");\n  }\n  let notes;\n  try {\n     notes = JSON.parse(releaseNotes);\n  } catch(err) {\n    console.log(err.message);\n    responseClient(res, 401, errorCode.ERROR_CODE_CLIENT, \"release notes parse failed\");\n    return;\n  }\n  Promise.all(\n    [\n      Firmware.findOne({firmwareClass: firmwareClass, firmwareCode: firmwareCode}).exec(),\n      Firmware.find({firmwareClass: firmwareClass}).exec()\n    ]).then(([newFirmware, allFirmwares]) => {\n      console.log(\"newFirmware:\", newFirmware, \"allFirmwares:\", allFirmwares);\n      if(newFirmware) {\n        throw new Error(`firmware code: ${firmwareCode} in class ${firmwareClass} already exsist!`);\n      }\n      console.log(\"release notes:\", notes);\n      let data = {\n        firmwareCode: firmwareCode,\n        firmwareDescription: firmwareDescription,\n        androidVersion: androidVersion,\n        firmwareClass: firmwareClass,\n        releaseNotes: notes,\n        firmwareState: \"new\",\n      };\n      if(allFirmwares && allFirmwares.length > 0) {\n        let diffPath = allFirmwares.filter(f => {\n          return firmwareUtils.compareFirmwareCode(firmwareCode, f.firmwareCode) > 0;\n        }).map(f => {\n          return {firmwareCode: f.firmwareCode, firmwareId: f._id};\n        })\n        data.diffPackagePath = diffPath;\n      }\n      firmwareUtils.assertFirmwareContent(data);\n      return new Firmware(data).save();\n    })\n    .then(firmware => {\n      responseClient(res, 200, errorCode.ERROR_CODE_SUCCESS, \"firmware created\");\n    })\n    .catch(error => {\n      console.log('firmware save error', error.message);\n      responseClient(res, 406, errorCode.ERROR_CODE_CLIENT, error.message);\n    })\n}\n```\n创建版本后，初始化版本状态为new。\n\n### 修改版本状态\n\n#### 前端发送请求\n```javascript\n\nfunction* firmwarePublishAlpha(id) {\n  yield put({type: IndexActionTypes.FETCH_START})\n  try {\n    return yield call(post, `/firmware_manager/${id}/alpha`);\n  } catch(error) {\n    //\n  } finally {\n    yield put({type: IndexActionTypes.FETCH_END});\n  }\n}\n\nfunction* firmwareReverseAlpha(id) {\n  yield put({type: IndexActionTypes.FETCH_START})\n  try {\n    return yield call(deleter, `/firmware_manager/${id}/alpha`);\n  } catch(error) {\n    //\n  } finally {\n    yield put({type: IndexActionTypes.FETCH_END});\n  }\n}\n\nfunction* firmwarePublishBeta(id) {\n  yield put({type: IndexActionTypes.FETCH_START})\n  try {\n    return yield call(post, `/firmware_manager/${id}/beta`);\n  } catch(error) {\n    //\n  } finally {\n    yield put({type: IndexActionTypes.FETCH_END});\n  }\n}\n\nfunction* firmwareReverseBeta(id) {\n  yield put({type: IndexActionTypes.FETCH_START})\n  try {\n    return yield call(deleter, `/firmware_manager/${id}/beta`);\n  } catch(error) {\n    //\n  } finally {\n    yield put({type: IndexActionTypes.FETCH_END});\n  }\n}\n\nfunction* firmwarePublishRelease(id) {\n  yield put({type: IndexActionTypes.FETCH_START})\n  try {\n    return yield call(post, `/firmware_manager/${id}/release`);\n  } catch(error) {\n    //\n  } finally {\n    yield put({type: IndexActionTypes.FETCH_END});\n  }\n}\n```\n接口设计遵循restful原则。\n\n#### 后端处理\n\nroutes/firwmare_manager.js\n```javascript\n//发布alpha测试\nrouter.post('/:id/alpha',\n    validRequest.validUserType('program'), firmwareManager.changeState(\"new\", \"alpha\"));\n\n//撤回alpha测试\nrouter.delete('/:id/alpha',\n    validRequest.validUserType('test'), firmwareManager.changeState(\"alpha\", \"new\"));\n\n//发布beta测试\nrouter.post('/:id/beta',\n    validRequest.validUserType('test'), firmwareManager.changeState(\"alpha\", \"beta\"));\n\n//撤回beta测试\nrouter.delete('/:id/beta',\n    validRequest.validUserType('operation'), firmwareManager.changeState(\"beta\", \"alpha\"));\n\n//发布release版本\nrouter.post('/:id/release',\n    validRequest.validUserType('operation'), firmwareManager.changeState(\"beta\", \"release\"));\n```\n上面的api接口，统一放在changeState里面做。\n\ncontroller/firwmare_manager.js\n```javascript\nexports.changeState = (prevState, nextState) => {\n  return (req, res, next) => {\n    const id = req.params.id;\n\n    Firmware.findById(id).exec() \n    .then(item => {\n      if(!item) {\n        throw new Error(`firmware id ${id} not found`);\n      }\n      if(item.firmwareState != prevState) {\n        throw new Error(`user has no permission change ${prevState} to ${nextState}`);\n      }\n      \n      if(prevState === \"new\" && (!item.fullPackagePath || item.fullPackagePath.length === 0)) {\n        throw new Error(`state change failed, full package not found`);\n      }\n      item.firmwareState = nextState;\n      item.save();\n    })\n    .then(item => {\n      responseClient(res, 200, errorCode.ERROR_CODE_SUCCESS, \"firmware publish success\");\n    })\n    .catch(error => {\n      responseClient(res, 404, errorCode.ERROR_CODE_SERVER, error.message);\n    })\n  } \n}\n```\n以上所有的源代码都可以在[https://github.com/yinlijun2004/android_ota_system](https://github.com/yinlijun2004/android_ota_system)中找到。","slug":"my-ota-tutorial-4","published":1,"updated":"2019-01-03T02:48:56.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aaneh0017biuin09m7ydw","content":"<p>版本包含两部分</p>\n<ul>\n<li>版本元信息<br>存放在业务服务器上，存储版本号，版本类型，Android版本号等等。</li>\n<li>版本固件包 存放在七牛云服务器上。</li>\n</ul>\n<a id=\"more\"></a>\n<p>总体框图如下：<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/5e891902dcc45c5a8384d25d7779d5eb937fd0183a1fd67496650f84621404c5ea46a384b1d2b8836819fa09c44df7e0?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=OTA%E6%A1%86%E5%9B%BE.png&amp;size=1024\" alt=\"\"></p>\n<p>发布版本规则，其实就是改变版本的状态，我将版本分为四个状态。</p>\n<ul>\n<li>new 新建状态，可以上传固件包，编辑版本信息。</li>\n<li>alpha Alpha状态，可以在后台配置支持alpha测试的SN号，对应的终端设备能收到升级提示。</li>\n<li>beta Beta状态，可以在后台配置支持beta测试的SN号，对应的终端设备能收到升级提示。</li>\n<li>Release状态，所有的设备都能收到升级提示。</li>\n</ul>\n<p>版本状态迁移：</p>\n<p><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/f8279f93bdf2d68e2d599d0498b747cfe83430bbd7161ce4a39268a1156af75ff42effdec511f08e0dc4d6489e58dbbe?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=firmware_process.png&amp;size=1024\" alt=\"版本状态迁移：\"></p>\n<h3 id=\"创建版本\"><a href=\"#创建版本\" class=\"headerlink\" title=\"创建版本\"></a>创建版本</h3><h4 id=\"前端上传版本信息\"><a href=\"#前端上传版本信息\" class=\"headerlink\" title=\"前端上传版本信息\"></a>前端上传版本信息</h4><p>adminManagerFirmwareSaga.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">createFirmwareInfo</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_START&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    data.releaseNotes = <span class=\"built_in\">JSON</span>.stringify(data.releaseNotes);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> call(puter, <span class=\"string\">'/firmware_manager/firmware'</span>, data);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_END&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"后端处理新建版本\"><a href=\"#后端处理新建版本\" class=\"headerlink\" title=\"后端处理新建版本\"></a>后端处理新建版本</h4><p>routes/firmware_manager.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//新建版本</span></span><br><span class=\"line\">router.put(<span class=\"string\">'/firmware'</span>, </span><br><span class=\"line\">    validRequest.validUserType(<span class=\"string\">'program'</span>), firmwareManager.createFirmware);</span><br></pre></td></tr></table></figure></p>\n<p>这里用一个中间件过滤用户类型，只有program的用户才允许创建版本。</p>\n<p>controller/firwmare_manager.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.createFirmware = <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    firmwareCode, </span><br><span class=\"line\">    firmwareDescription, </span><br><span class=\"line\">    androidVersion, </span><br><span class=\"line\">    firmwareClass,</span><br><span class=\"line\">    releaseNotes,</span><br><span class=\"line\">  &#125; = req.body; </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!firmwareCode || !firmwareDescription || !androidVersion || !firmwareClass || !releaseNotes) &#123;</span><br><span class=\"line\">    responseClient(res, <span class=\"number\">401</span>, errorCode.ERROR_CODE_CLIENT, <span class=\"string\">\"invalid param\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> notes;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">     notes = <span class=\"built_in\">JSON</span>.parse(releaseNotes);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err.message);</span><br><span class=\"line\">    responseClient(res, <span class=\"number\">401</span>, errorCode.ERROR_CODE_CLIENT, <span class=\"string\">\"release notes parse failed\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.all(</span><br><span class=\"line\">    [</span><br><span class=\"line\">      Firmware.findOne(&#123;<span class=\"attr\">firmwareClass</span>: firmwareClass, <span class=\"attr\">firmwareCode</span>: firmwareCode&#125;).exec(),</span><br><span class=\"line\">      Firmware.find(&#123;<span class=\"attr\">firmwareClass</span>: firmwareClass&#125;).exec()</span><br><span class=\"line\">    ]).then(<span class=\"function\">(<span class=\"params\">[newFirmware, allFirmwares]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"newFirmware:\"</span>, newFirmware, <span class=\"string\">\"allFirmwares:\"</span>, allFirmwares);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(newFirmware) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`firmware code: <span class=\"subst\">$&#123;firmwareCode&#125;</span> in class <span class=\"subst\">$&#123;firmwareClass&#125;</span> already exsist!`</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"release notes:\"</span>, notes);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> data = &#123;</span><br><span class=\"line\">        firmwareCode: firmwareCode,</span><br><span class=\"line\">        firmwareDescription: firmwareDescription,</span><br><span class=\"line\">        androidVersion: androidVersion,</span><br><span class=\"line\">        firmwareClass: firmwareClass,</span><br><span class=\"line\">        releaseNotes: notes,</span><br><span class=\"line\">        firmwareState: <span class=\"string\">\"new\"</span>,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(allFirmwares &amp;&amp; allFirmwares.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> diffPath = allFirmwares.filter(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> firmwareUtils.compareFirmwareCode(firmwareCode, f.firmwareCode) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;).map(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> &#123;<span class=\"attr\">firmwareCode</span>: f.firmwareCode, <span class=\"attr\">firmwareId</span>: f._id&#125;;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        data.diffPackagePath = diffPath;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      firmwareUtils.assertFirmwareContent(data);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Firmware(data).save();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">firmware</span> =&gt;</span> &#123;</span><br><span class=\"line\">      responseClient(res, <span class=\"number\">200</span>, errorCode.ERROR_CODE_SUCCESS, <span class=\"string\">\"firmware created\"</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'firmware save error'</span>, error.message);</span><br><span class=\"line\">      responseClient(res, <span class=\"number\">406</span>, errorCode.ERROR_CODE_CLIENT, error.message);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>创建版本后，初始化版本状态为new。</p>\n<h3 id=\"修改版本状态\"><a href=\"#修改版本状态\" class=\"headerlink\" title=\"修改版本状态\"></a>修改版本状态</h3><h4 id=\"前端发送请求\"><a href=\"#前端发送请求\" class=\"headerlink\" title=\"前端发送请求\"></a>前端发送请求</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">firmwarePublishAlpha</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_START&#125;)</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> call(post, <span class=\"string\">`/firmware_manager/<span class=\"subst\">$&#123;id&#125;</span>/alpha`</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(error) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_END&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">firmwareReverseAlpha</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_START&#125;)</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> call(deleter, <span class=\"string\">`/firmware_manager/<span class=\"subst\">$&#123;id&#125;</span>/alpha`</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(error) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_END&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">firmwarePublishBeta</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_START&#125;)</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> call(post, <span class=\"string\">`/firmware_manager/<span class=\"subst\">$&#123;id&#125;</span>/beta`</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(error) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_END&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">firmwareReverseBeta</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_START&#125;)</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> call(deleter, <span class=\"string\">`/firmware_manager/<span class=\"subst\">$&#123;id&#125;</span>/beta`</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(error) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_END&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">firmwarePublishRelease</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_START&#125;)</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> call(post, <span class=\"string\">`/firmware_manager/<span class=\"subst\">$&#123;id&#125;</span>/release`</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(error) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_END&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接口设计遵循restful原则。</p>\n<h4 id=\"后端处理\"><a href=\"#后端处理\" class=\"headerlink\" title=\"后端处理\"></a>后端处理</h4><p>routes/firwmare_manager.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//发布alpha测试</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/:id/alpha'</span>,</span><br><span class=\"line\">    validRequest.validUserType(<span class=\"string\">'program'</span>), firmwareManager.changeState(<span class=\"string\">\"new\"</span>, <span class=\"string\">\"alpha\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//撤回alpha测试</span></span><br><span class=\"line\">router.delete(<span class=\"string\">'/:id/alpha'</span>,</span><br><span class=\"line\">    validRequest.validUserType(<span class=\"string\">'test'</span>), firmwareManager.changeState(<span class=\"string\">\"alpha\"</span>, <span class=\"string\">\"new\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//发布beta测试</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/:id/beta'</span>,</span><br><span class=\"line\">    validRequest.validUserType(<span class=\"string\">'test'</span>), firmwareManager.changeState(<span class=\"string\">\"alpha\"</span>, <span class=\"string\">\"beta\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//撤回beta测试</span></span><br><span class=\"line\">router.delete(<span class=\"string\">'/:id/beta'</span>,</span><br><span class=\"line\">    validRequest.validUserType(<span class=\"string\">'operation'</span>), firmwareManager.changeState(<span class=\"string\">\"beta\"</span>, <span class=\"string\">\"alpha\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//发布release版本</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/:id/release'</span>,</span><br><span class=\"line\">    validRequest.validUserType(<span class=\"string\">'operation'</span>), firmwareManager.changeState(<span class=\"string\">\"beta\"</span>, <span class=\"string\">\"release\"</span>));</span><br></pre></td></tr></table></figure></p>\n<p>上面的api接口，统一放在changeState里面做。</p>\n<p>controller/firwmare_manager.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.changeState = <span class=\"function\">(<span class=\"params\">prevState, nextState</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = req.params.id;</span><br><span class=\"line\"></span><br><span class=\"line\">    Firmware.findById(id).exec() </span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!item) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`firmware id <span class=\"subst\">$&#123;id&#125;</span> not found`</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(item.firmwareState != prevState) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`user has no permission change <span class=\"subst\">$&#123;prevState&#125;</span> to <span class=\"subst\">$&#123;nextState&#125;</span>`</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(prevState === <span class=\"string\">\"new\"</span> &amp;&amp; (!item.fullPackagePath || item.fullPackagePath.length === <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`state change failed, full package not found`</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      item.firmwareState = nextState;</span><br><span class=\"line\">      item.save();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">      responseClient(res, <span class=\"number\">200</span>, errorCode.ERROR_CODE_SUCCESS, <span class=\"string\">\"firmware publish success\"</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">      responseClient(res, <span class=\"number\">404</span>, errorCode.ERROR_CODE_SERVER, error.message);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上所有的源代码都可以在<a href=\"https://github.com/yinlijun2004/android_ota_system\" target=\"_blank\" rel=\"noopener\">https://github.com/yinlijun2004/android_ota_system</a>中找到。</p>\n","site":{"data":{}},"excerpt":"<p>版本包含两部分</p>\n<ul>\n<li>版本元信息<br>存放在业务服务器上，存储版本号，版本类型，Android版本号等等。</li>\n<li>版本固件包 存放在七牛云服务器上。</li>\n</ul>","more":"<p>总体框图如下：<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/5e891902dcc45c5a8384d25d7779d5eb937fd0183a1fd67496650f84621404c5ea46a384b1d2b8836819fa09c44df7e0?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=OTA%E6%A1%86%E5%9B%BE.png&amp;size=1024\" alt=\"\"></p>\n<p>发布版本规则，其实就是改变版本的状态，我将版本分为四个状态。</p>\n<ul>\n<li>new 新建状态，可以上传固件包，编辑版本信息。</li>\n<li>alpha Alpha状态，可以在后台配置支持alpha测试的SN号，对应的终端设备能收到升级提示。</li>\n<li>beta Beta状态，可以在后台配置支持beta测试的SN号，对应的终端设备能收到升级提示。</li>\n<li>Release状态，所有的设备都能收到升级提示。</li>\n</ul>\n<p>版本状态迁移：</p>\n<p><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/f8279f93bdf2d68e2d599d0498b747cfe83430bbd7161ce4a39268a1156af75ff42effdec511f08e0dc4d6489e58dbbe?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=firmware_process.png&amp;size=1024\" alt=\"版本状态迁移：\"></p>\n<h3 id=\"创建版本\"><a href=\"#创建版本\" class=\"headerlink\" title=\"创建版本\"></a>创建版本</h3><h4 id=\"前端上传版本信息\"><a href=\"#前端上传版本信息\" class=\"headerlink\" title=\"前端上传版本信息\"></a>前端上传版本信息</h4><p>adminManagerFirmwareSaga.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">createFirmwareInfo</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_START&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    data.releaseNotes = <span class=\"built_in\">JSON</span>.stringify(data.releaseNotes);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> call(puter, <span class=\"string\">'/firmware_manager/firmware'</span>, data);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_END&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"后端处理新建版本\"><a href=\"#后端处理新建版本\" class=\"headerlink\" title=\"后端处理新建版本\"></a>后端处理新建版本</h4><p>routes/firmware_manager.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//新建版本</span></span><br><span class=\"line\">router.put(<span class=\"string\">'/firmware'</span>, </span><br><span class=\"line\">    validRequest.validUserType(<span class=\"string\">'program'</span>), firmwareManager.createFirmware);</span><br></pre></td></tr></table></figure></p>\n<p>这里用一个中间件过滤用户类型，只有program的用户才允许创建版本。</p>\n<p>controller/firwmare_manager.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.createFirmware = <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    firmwareCode, </span><br><span class=\"line\">    firmwareDescription, </span><br><span class=\"line\">    androidVersion, </span><br><span class=\"line\">    firmwareClass,</span><br><span class=\"line\">    releaseNotes,</span><br><span class=\"line\">  &#125; = req.body; </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!firmwareCode || !firmwareDescription || !androidVersion || !firmwareClass || !releaseNotes) &#123;</span><br><span class=\"line\">    responseClient(res, <span class=\"number\">401</span>, errorCode.ERROR_CODE_CLIENT, <span class=\"string\">\"invalid param\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> notes;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">     notes = <span class=\"built_in\">JSON</span>.parse(releaseNotes);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err.message);</span><br><span class=\"line\">    responseClient(res, <span class=\"number\">401</span>, errorCode.ERROR_CODE_CLIENT, <span class=\"string\">\"release notes parse failed\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.all(</span><br><span class=\"line\">    [</span><br><span class=\"line\">      Firmware.findOne(&#123;<span class=\"attr\">firmwareClass</span>: firmwareClass, <span class=\"attr\">firmwareCode</span>: firmwareCode&#125;).exec(),</span><br><span class=\"line\">      Firmware.find(&#123;<span class=\"attr\">firmwareClass</span>: firmwareClass&#125;).exec()</span><br><span class=\"line\">    ]).then(<span class=\"function\">(<span class=\"params\">[newFirmware, allFirmwares]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"newFirmware:\"</span>, newFirmware, <span class=\"string\">\"allFirmwares:\"</span>, allFirmwares);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(newFirmware) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`firmware code: <span class=\"subst\">$&#123;firmwareCode&#125;</span> in class <span class=\"subst\">$&#123;firmwareClass&#125;</span> already exsist!`</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"release notes:\"</span>, notes);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> data = &#123;</span><br><span class=\"line\">        firmwareCode: firmwareCode,</span><br><span class=\"line\">        firmwareDescription: firmwareDescription,</span><br><span class=\"line\">        androidVersion: androidVersion,</span><br><span class=\"line\">        firmwareClass: firmwareClass,</span><br><span class=\"line\">        releaseNotes: notes,</span><br><span class=\"line\">        firmwareState: <span class=\"string\">\"new\"</span>,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(allFirmwares &amp;&amp; allFirmwares.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> diffPath = allFirmwares.filter(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> firmwareUtils.compareFirmwareCode(firmwareCode, f.firmwareCode) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;).map(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> &#123;<span class=\"attr\">firmwareCode</span>: f.firmwareCode, <span class=\"attr\">firmwareId</span>: f._id&#125;;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        data.diffPackagePath = diffPath;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      firmwareUtils.assertFirmwareContent(data);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Firmware(data).save();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">firmware</span> =&gt;</span> &#123;</span><br><span class=\"line\">      responseClient(res, <span class=\"number\">200</span>, errorCode.ERROR_CODE_SUCCESS, <span class=\"string\">\"firmware created\"</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'firmware save error'</span>, error.message);</span><br><span class=\"line\">      responseClient(res, <span class=\"number\">406</span>, errorCode.ERROR_CODE_CLIENT, error.message);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>创建版本后，初始化版本状态为new。</p>\n<h3 id=\"修改版本状态\"><a href=\"#修改版本状态\" class=\"headerlink\" title=\"修改版本状态\"></a>修改版本状态</h3><h4 id=\"前端发送请求\"><a href=\"#前端发送请求\" class=\"headerlink\" title=\"前端发送请求\"></a>前端发送请求</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">firmwarePublishAlpha</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_START&#125;)</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> call(post, <span class=\"string\">`/firmware_manager/<span class=\"subst\">$&#123;id&#125;</span>/alpha`</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(error) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_END&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">firmwareReverseAlpha</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_START&#125;)</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> call(deleter, <span class=\"string\">`/firmware_manager/<span class=\"subst\">$&#123;id&#125;</span>/alpha`</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(error) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_END&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">firmwarePublishBeta</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_START&#125;)</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> call(post, <span class=\"string\">`/firmware_manager/<span class=\"subst\">$&#123;id&#125;</span>/beta`</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(error) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_END&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">firmwareReverseBeta</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_START&#125;)</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> call(deleter, <span class=\"string\">`/firmware_manager/<span class=\"subst\">$&#123;id&#125;</span>/beta`</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(error) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_END&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">firmwarePublishRelease</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_START&#125;)</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> call(post, <span class=\"string\">`/firmware_manager/<span class=\"subst\">$&#123;id&#125;</span>/release`</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(error) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> put(&#123;<span class=\"attr\">type</span>: IndexActionTypes.FETCH_END&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接口设计遵循restful原则。</p>\n<h4 id=\"后端处理\"><a href=\"#后端处理\" class=\"headerlink\" title=\"后端处理\"></a>后端处理</h4><p>routes/firwmare_manager.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//发布alpha测试</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/:id/alpha'</span>,</span><br><span class=\"line\">    validRequest.validUserType(<span class=\"string\">'program'</span>), firmwareManager.changeState(<span class=\"string\">\"new\"</span>, <span class=\"string\">\"alpha\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//撤回alpha测试</span></span><br><span class=\"line\">router.delete(<span class=\"string\">'/:id/alpha'</span>,</span><br><span class=\"line\">    validRequest.validUserType(<span class=\"string\">'test'</span>), firmwareManager.changeState(<span class=\"string\">\"alpha\"</span>, <span class=\"string\">\"new\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//发布beta测试</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/:id/beta'</span>,</span><br><span class=\"line\">    validRequest.validUserType(<span class=\"string\">'test'</span>), firmwareManager.changeState(<span class=\"string\">\"alpha\"</span>, <span class=\"string\">\"beta\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//撤回beta测试</span></span><br><span class=\"line\">router.delete(<span class=\"string\">'/:id/beta'</span>,</span><br><span class=\"line\">    validRequest.validUserType(<span class=\"string\">'operation'</span>), firmwareManager.changeState(<span class=\"string\">\"beta\"</span>, <span class=\"string\">\"alpha\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//发布release版本</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/:id/release'</span>,</span><br><span class=\"line\">    validRequest.validUserType(<span class=\"string\">'operation'</span>), firmwareManager.changeState(<span class=\"string\">\"beta\"</span>, <span class=\"string\">\"release\"</span>));</span><br></pre></td></tr></table></figure></p>\n<p>上面的api接口，统一放在changeState里面做。</p>\n<p>controller/firwmare_manager.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.changeState = <span class=\"function\">(<span class=\"params\">prevState, nextState</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = req.params.id;</span><br><span class=\"line\"></span><br><span class=\"line\">    Firmware.findById(id).exec() </span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!item) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`firmware id <span class=\"subst\">$&#123;id&#125;</span> not found`</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(item.firmwareState != prevState) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`user has no permission change <span class=\"subst\">$&#123;prevState&#125;</span> to <span class=\"subst\">$&#123;nextState&#125;</span>`</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(prevState === <span class=\"string\">\"new\"</span> &amp;&amp; (!item.fullPackagePath || item.fullPackagePath.length === <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`state change failed, full package not found`</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      item.firmwareState = nextState;</span><br><span class=\"line\">      item.save();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">      responseClient(res, <span class=\"number\">200</span>, errorCode.ERROR_CODE_SUCCESS, <span class=\"string\">\"firmware publish success\"</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">      responseClient(res, <span class=\"number\">404</span>, errorCode.ERROR_CODE_SERVER, error.message);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上所有的源代码都可以在<a href=\"https://github.com/yinlijun2004/android_ota_system\" target=\"_blank\" rel=\"noopener\">https://github.com/yinlijun2004/android_ota_system</a>中找到。</p>"},{"title":"从零搭建Android OTA系统——部署到阿里云ECS","date":"2018-03-20T11:55:31.000Z","_content":"\n本文介绍如何将整个ota系统部署到阿里云ECS上去，没有看过正规军是如何部署的，以下只是我的个人经验。\n\n### 创建远程git目录\n\n登陆阿里云ECS，创建一个bare仓库，存放ota_be代码。\n```bash \ngit init --bare ~/project/ota_server.git\n```\n\n创建post-receive文件，捕获git推送操作，克隆一份到服务器本地，作为运行仓库。\n```bash\ntouch ~/project/ota_server.git/hooks/post-receive\n```\n\n<!--more-->\n\n填入如下内容\n```bash\n#!/bin/bash -l\n\nGIT_REPO=/home/yinlijun/project/ota_server.git\nTMP_GIT_CLONE=/home/yinlijun/project/ota_server\n\nrm -rf ${TMP_GIT_CLONE}\ngit clone ${GIT_REPO} ${TMP_GIT_CLONE}\n```\n\n#### 本地部署\n在本地ota目录下，创建.gitignore文件\n```bash\necho ota_be_deploy >> .gitignore\n```\n这个文件是忽略我们要临时发布目录用的。\n\n#### 创建部署脚本\n\n```bash\ntouch deploy.sh\n```\ndeploy.sh脚本内容：\n```bash\n# 构建前端代码\ncd ota_fe;\nyarn build;\ncd ../\necho \"ota_fe build done...\"\n\n# 拷贝前端构建结果到后端代码\ncp ota_fe/build/* ota_be/public/ -rf \necho \"copy ota_fe build result done...\"\n\n# 从部署服务器clone一份代码\nif [ ! -d \"ota_be_deploy\" ]; then\n    git clone yinlijun@www.yinlijun.com:project/ota_server.git ./ota_be_deploy\n    echo \"clone remote ota_server done...\"\nfi\n\n# 将后端代码，拷贝到临时目录\ncp -rf ota_be/*  ./ota_be_deploy/\necho \"copy ota_be done...\"\n\n# 提交后端代码到远程master分支\ncd ota_be_deploy; \ngit add .;\ngit commit -m \"auto deploy server\"; \ngit push origin master;\ncd ../\necho \"deploy done...\"\n\n```\n运行上述脚本，就会将本地的代码，推送到服务器的仓库上去，同时，因为我们hook了推送操作，就会在服务器上更新运行代码。\n\n#### 启动服务\n\npm2启动服务\n```bash\npm2 start ~/project/ota_server/bin/www --name \"ota-server\"\n```\n\n添加nginx代理\n```bash\ntouch /etc/nginx/ota.conf\n```\n内容如下：\n```\nserver {\n    listen: 80;\n    server_name ota.yinlijun.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:3020;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host\n        proxy_cache_bapass $http_upgrade\n    }\n}\n```\n\n重启nginx\n```bash\nsudo /etc/init.d/nginx restart\n```\n\n#### 预览\n\n[http://ota.yinlijun.com/](http://ota.yinlijun.com/)","source":"_posts/my-ota-tutorial-7.md","raw":"---\ntitle: 从零搭建Android OTA系统——部署到阿里云ECS\ndate: 2018-3-20 19:55:31\ntags: [react, nodejs, ECS， nginx, express]\ncategories: 从零搭建Android OTA系统\n---\n\n本文介绍如何将整个ota系统部署到阿里云ECS上去，没有看过正规军是如何部署的，以下只是我的个人经验。\n\n### 创建远程git目录\n\n登陆阿里云ECS，创建一个bare仓库，存放ota_be代码。\n```bash \ngit init --bare ~/project/ota_server.git\n```\n\n创建post-receive文件，捕获git推送操作，克隆一份到服务器本地，作为运行仓库。\n```bash\ntouch ~/project/ota_server.git/hooks/post-receive\n```\n\n<!--more-->\n\n填入如下内容\n```bash\n#!/bin/bash -l\n\nGIT_REPO=/home/yinlijun/project/ota_server.git\nTMP_GIT_CLONE=/home/yinlijun/project/ota_server\n\nrm -rf ${TMP_GIT_CLONE}\ngit clone ${GIT_REPO} ${TMP_GIT_CLONE}\n```\n\n#### 本地部署\n在本地ota目录下，创建.gitignore文件\n```bash\necho ota_be_deploy >> .gitignore\n```\n这个文件是忽略我们要临时发布目录用的。\n\n#### 创建部署脚本\n\n```bash\ntouch deploy.sh\n```\ndeploy.sh脚本内容：\n```bash\n# 构建前端代码\ncd ota_fe;\nyarn build;\ncd ../\necho \"ota_fe build done...\"\n\n# 拷贝前端构建结果到后端代码\ncp ota_fe/build/* ota_be/public/ -rf \necho \"copy ota_fe build result done...\"\n\n# 从部署服务器clone一份代码\nif [ ! -d \"ota_be_deploy\" ]; then\n    git clone yinlijun@www.yinlijun.com:project/ota_server.git ./ota_be_deploy\n    echo \"clone remote ota_server done...\"\nfi\n\n# 将后端代码，拷贝到临时目录\ncp -rf ota_be/*  ./ota_be_deploy/\necho \"copy ota_be done...\"\n\n# 提交后端代码到远程master分支\ncd ota_be_deploy; \ngit add .;\ngit commit -m \"auto deploy server\"; \ngit push origin master;\ncd ../\necho \"deploy done...\"\n\n```\n运行上述脚本，就会将本地的代码，推送到服务器的仓库上去，同时，因为我们hook了推送操作，就会在服务器上更新运行代码。\n\n#### 启动服务\n\npm2启动服务\n```bash\npm2 start ~/project/ota_server/bin/www --name \"ota-server\"\n```\n\n添加nginx代理\n```bash\ntouch /etc/nginx/ota.conf\n```\n内容如下：\n```\nserver {\n    listen: 80;\n    server_name ota.yinlijun.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:3020;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host\n        proxy_cache_bapass $http_upgrade\n    }\n}\n```\n\n重启nginx\n```bash\nsudo /etc/init.d/nginx restart\n```\n\n#### 预览\n\n[http://ota.yinlijun.com/](http://ota.yinlijun.com/)","slug":"my-ota-tutorial-7","published":1,"updated":"2019-01-03T02:48:56.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aanei0019biui1lynpebm","content":"<p>本文介绍如何将整个ota系统部署到阿里云ECS上去，没有看过正规军是如何部署的，以下只是我的个人经验。</p>\n<h3 id=\"创建远程git目录\"><a href=\"#创建远程git目录\" class=\"headerlink\" title=\"创建远程git目录\"></a>创建远程git目录</h3><p>登陆阿里云ECS，创建一个bare仓库，存放ota_be代码。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init --bare ~/project/ota_server.git</span><br></pre></td></tr></table></figure></p>\n<p>创建post-receive文件，捕获git推送操作，克隆一份到服务器本地，作为运行仓库。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch ~/project/ota_server.git/hooks/post-receive</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>填入如下内容<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/bin/bash -l</span></span><br><span class=\"line\"></span><br><span class=\"line\">GIT_REPO=/home/yinlijun/project/ota_server.git</span><br><span class=\"line\">TMP_GIT_CLONE=/home/yinlijun/project/ota_server</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf <span class=\"variable\">$&#123;TMP_GIT_CLONE&#125;</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> <span class=\"variable\">$&#123;GIT_REPO&#125;</span> <span class=\"variable\">$&#123;TMP_GIT_CLONE&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"本地部署\"><a href=\"#本地部署\" class=\"headerlink\" title=\"本地部署\"></a>本地部署</h4><p>在本地ota目录下，创建.gitignore文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> ota_be_deploy &gt;&gt; .gitignore</span><br></pre></td></tr></table></figure></p>\n<p>这个文件是忽略我们要临时发布目录用的。</p>\n<h4 id=\"创建部署脚本\"><a href=\"#创建部署脚本\" class=\"headerlink\" title=\"创建部署脚本\"></a>创建部署脚本</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch deploy.sh</span><br></pre></td></tr></table></figure>\n<p>deploy.sh脚本内容：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 构建前端代码</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ota_fe;</span><br><span class=\"line\">yarn build;</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ../</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"ota_fe build done...\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拷贝前端构建结果到后端代码</span></span><br><span class=\"line\">cp ota_fe/build/* ota_be/public/ -rf </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"copy ota_fe build result done...\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从部署服务器clone一份代码</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -d <span class=\"string\">\"ota_be_deploy\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    git <span class=\"built_in\">clone</span> yinlijun@www.yinlijun.com:project/ota_server.git ./ota_be_deploy</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"clone remote ota_server done...\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将后端代码，拷贝到临时目录</span></span><br><span class=\"line\">cp -rf ota_be/*  ./ota_be_deploy/</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"copy ota_be done...\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交后端代码到远程master分支</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ota_be_deploy; </span><br><span class=\"line\">git add .;</span><br><span class=\"line\">git commit -m <span class=\"string\">\"auto deploy server\"</span>; </span><br><span class=\"line\">git push origin master;</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ../</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"deploy done...\"</span></span><br></pre></td></tr></table></figure></p>\n<p>运行上述脚本，就会将本地的代码，推送到服务器的仓库上去，同时，因为我们hook了推送操作，就会在服务器上更新运行代码。</p>\n<h4 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h4><p>pm2启动服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start ~/project/ota_server/bin/www --name <span class=\"string\">\"ota-server\"</span></span><br></pre></td></tr></table></figure></p>\n<p>添加nginx代理<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch /etc/nginx/ota.conf</span><br></pre></td></tr></table></figure></p>\n<p>内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen: 80;</span><br><span class=\"line\">    server_name ota.yinlijun.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:3020;</span><br><span class=\"line\">        proxy_http_version 1.1;</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">        proxy_set_header Connection &apos;upgrade&apos;;</span><br><span class=\"line\">        proxy_set_header Host $host</span><br><span class=\"line\">        proxy_cache_bapass $http_upgrade</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>重启nginx<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/nginx restart</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"预览\"><a href=\"#预览\" class=\"headerlink\" title=\"预览\"></a>预览</h4><p><a href=\"http://ota.yinlijun.com/\" target=\"_blank\" rel=\"noopener\">http://ota.yinlijun.com/</a></p>\n","site":{"data":{}},"excerpt":"<p>本文介绍如何将整个ota系统部署到阿里云ECS上去，没有看过正规军是如何部署的，以下只是我的个人经验。</p>\n<h3 id=\"创建远程git目录\"><a href=\"#创建远程git目录\" class=\"headerlink\" title=\"创建远程git目录\"></a>创建远程git目录</h3><p>登陆阿里云ECS，创建一个bare仓库，存放ota_be代码。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init --bare ~/project/ota_server.git</span><br></pre></td></tr></table></figure></p>\n<p>创建post-receive文件，捕获git推送操作，克隆一份到服务器本地，作为运行仓库。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch ~/project/ota_server.git/hooks/post-receive</span><br></pre></td></tr></table></figure></p>","more":"<p>填入如下内容<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/bin/bash -l</span></span><br><span class=\"line\"></span><br><span class=\"line\">GIT_REPO=/home/yinlijun/project/ota_server.git</span><br><span class=\"line\">TMP_GIT_CLONE=/home/yinlijun/project/ota_server</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf <span class=\"variable\">$&#123;TMP_GIT_CLONE&#125;</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> <span class=\"variable\">$&#123;GIT_REPO&#125;</span> <span class=\"variable\">$&#123;TMP_GIT_CLONE&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"本地部署\"><a href=\"#本地部署\" class=\"headerlink\" title=\"本地部署\"></a>本地部署</h4><p>在本地ota目录下，创建.gitignore文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> ota_be_deploy &gt;&gt; .gitignore</span><br></pre></td></tr></table></figure></p>\n<p>这个文件是忽略我们要临时发布目录用的。</p>\n<h4 id=\"创建部署脚本\"><a href=\"#创建部署脚本\" class=\"headerlink\" title=\"创建部署脚本\"></a>创建部署脚本</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch deploy.sh</span><br></pre></td></tr></table></figure>\n<p>deploy.sh脚本内容：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 构建前端代码</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ota_fe;</span><br><span class=\"line\">yarn build;</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ../</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"ota_fe build done...\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拷贝前端构建结果到后端代码</span></span><br><span class=\"line\">cp ota_fe/build/* ota_be/public/ -rf </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"copy ota_fe build result done...\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从部署服务器clone一份代码</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -d <span class=\"string\">\"ota_be_deploy\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    git <span class=\"built_in\">clone</span> yinlijun@www.yinlijun.com:project/ota_server.git ./ota_be_deploy</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"clone remote ota_server done...\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将后端代码，拷贝到临时目录</span></span><br><span class=\"line\">cp -rf ota_be/*  ./ota_be_deploy/</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"copy ota_be done...\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交后端代码到远程master分支</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ota_be_deploy; </span><br><span class=\"line\">git add .;</span><br><span class=\"line\">git commit -m <span class=\"string\">\"auto deploy server\"</span>; </span><br><span class=\"line\">git push origin master;</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ../</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"deploy done...\"</span></span><br></pre></td></tr></table></figure></p>\n<p>运行上述脚本，就会将本地的代码，推送到服务器的仓库上去，同时，因为我们hook了推送操作，就会在服务器上更新运行代码。</p>\n<h4 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h4><p>pm2启动服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start ~/project/ota_server/bin/www --name <span class=\"string\">\"ota-server\"</span></span><br></pre></td></tr></table></figure></p>\n<p>添加nginx代理<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch /etc/nginx/ota.conf</span><br></pre></td></tr></table></figure></p>\n<p>内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen: 80;</span><br><span class=\"line\">    server_name ota.yinlijun.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:3020;</span><br><span class=\"line\">        proxy_http_version 1.1;</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">        proxy_set_header Connection &apos;upgrade&apos;;</span><br><span class=\"line\">        proxy_set_header Host $host</span><br><span class=\"line\">        proxy_cache_bapass $http_upgrade</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>重启nginx<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/nginx restart</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"预览\"><a href=\"#预览\" class=\"headerlink\" title=\"预览\"></a>预览</h4><p><a href=\"http://ota.yinlijun.com/\" target=\"_blank\" rel=\"noopener\">http://ota.yinlijun.com/</a></p>"},{"title":"通过IP地址访问nginx服务","date":"2018-04-25T07:29:24.000Z","_content":"\n使用nginx设置反向代理的时候，如果没有域名，可以通过如下方式设置。\n\n#### 删除默认站点\n\n将/etc/nginx/sites-available/default的内容注释掉。\n\n将/etc/nginx/sites-enabled/default的内容注释掉。\n\n### 添加站点\n\n在/etc/nginx/conf.d/下创建一个配置，比如ota.conf，内容如下：\n<!-- more -->\n\n```json\nupstream ota_server {\n  server 127.0.0.1:3020;\n}\n\nserver {\n  listen 80 default_server;\n  listen [::]:80 default_server;\n  access_log /var/log/nginx/ota_server.log;\n\n  location / {\n    proxy_pass http://127.0.0.1:3020;\n    proxy_http_version 1.1;\n    root /home/otaserver/project/ota_sever/public;\n    index index.html;\n    proxy_set_header Host $http_host;\n    proxy_set_header X-Forwarded-For $remote_addr;\n  }\n}\n```\n\n这样，就能通过ip访问到ota_server这个服务了。","source":"_posts/nginx-access-ip.md","raw":"---\ntitle: 通过IP地址访问nginx服务\ndate: 2018-04-25 15:29:24\ntags: [nginx, nodejs]\n---\n\n使用nginx设置反向代理的时候，如果没有域名，可以通过如下方式设置。\n\n#### 删除默认站点\n\n将/etc/nginx/sites-available/default的内容注释掉。\n\n将/etc/nginx/sites-enabled/default的内容注释掉。\n\n### 添加站点\n\n在/etc/nginx/conf.d/下创建一个配置，比如ota.conf，内容如下：\n<!-- more -->\n\n```json\nupstream ota_server {\n  server 127.0.0.1:3020;\n}\n\nserver {\n  listen 80 default_server;\n  listen [::]:80 default_server;\n  access_log /var/log/nginx/ota_server.log;\n\n  location / {\n    proxy_pass http://127.0.0.1:3020;\n    proxy_http_version 1.1;\n    root /home/otaserver/project/ota_sever/public;\n    index index.html;\n    proxy_set_header Host $http_host;\n    proxy_set_header X-Forwarded-For $remote_addr;\n  }\n}\n```\n\n这样，就能通过ip访问到ota_server这个服务了。","slug":"nginx-access-ip","published":1,"updated":"2019-01-03T02:48:56.349Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aanej001bbiuirdaznprl","content":"<p>使用nginx设置反向代理的时候，如果没有域名，可以通过如下方式设置。</p>\n<h4 id=\"删除默认站点\"><a href=\"#删除默认站点\" class=\"headerlink\" title=\"删除默认站点\"></a>删除默认站点</h4><p>将/etc/nginx/sites-available/default的内容注释掉。</p>\n<p>将/etc/nginx/sites-enabled/default的内容注释掉。</p>\n<h3 id=\"添加站点\"><a href=\"#添加站点\" class=\"headerlink\" title=\"添加站点\"></a>添加站点</h3><p>在/etc/nginx/conf.d/下创建一个配置，比如ota.conf，内容如下：<br><a id=\"more\"></a></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream ota_server &#123;</span><br><span class=\"line\">  server 127.0.0.1:3020;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 80 default_server;</span><br><span class=\"line\">  listen [::]:80 default_server;</span><br><span class=\"line\">  access_log /var/log/nginx/ota_server.log;</span><br><span class=\"line\"></span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">    proxy_pass http://127.0.0.1:3020;</span><br><span class=\"line\">    proxy_http_version 1.1;</span><br><span class=\"line\">    root /home/otaserver/project/ota_sever/public;</span><br><span class=\"line\">    index index.html;</span><br><span class=\"line\">    proxy_set_header Host $http_host;</span><br><span class=\"line\">    proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样，就能通过ip访问到ota_server这个服务了。</p>\n","site":{"data":{}},"excerpt":"<p>使用nginx设置反向代理的时候，如果没有域名，可以通过如下方式设置。</p>\n<h4 id=\"删除默认站点\"><a href=\"#删除默认站点\" class=\"headerlink\" title=\"删除默认站点\"></a>删除默认站点</h4><p>将/etc/nginx/sites-available/default的内容注释掉。</p>\n<p>将/etc/nginx/sites-enabled/default的内容注释掉。</p>\n<h3 id=\"添加站点\"><a href=\"#添加站点\" class=\"headerlink\" title=\"添加站点\"></a>添加站点</h3><p>在/etc/nginx/conf.d/下创建一个配置，比如ota.conf，内容如下：<br></p>","more":"<p></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream ota_server &#123;</span><br><span class=\"line\">  server 127.0.0.1:3020;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 80 default_server;</span><br><span class=\"line\">  listen [::]:80 default_server;</span><br><span class=\"line\">  access_log /var/log/nginx/ota_server.log;</span><br><span class=\"line\"></span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">    proxy_pass http://127.0.0.1:3020;</span><br><span class=\"line\">    proxy_http_version 1.1;</span><br><span class=\"line\">    root /home/otaserver/project/ota_sever/public;</span><br><span class=\"line\">    index index.html;</span><br><span class=\"line\">    proxy_set_header Host $http_host;</span><br><span class=\"line\">    proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样，就能通过ip访问到ota_server这个服务了。</p>"},{"title":"从零搭建Android OTA系统——开篇","date":"2017-12-20T09:45:28.000Z","_content":"\n### 起因\n作为一个半路出家的码农，一个野生Android工程师，一直对<b>全栈</b>心怀憧憬，但未有行动。直到两年之前有机会开始接触javascript，写了一些前端的代码，加上nodejs社区这些年的蓬勃发展，我觉得这是一个机会。正如某位长者教导的:\n>人的一生当然要靠自我奋斗,当然也要考虑历史的进程。\n\n我觉得是时候了。\n\n这是一个完整的项目，也许耗时会比较长，因为上班时间还有工作要完成，但是我会尽力完成它，我的目标是达到可以商用的水平，而不是一个玩具。实现的过程的文章会贴在[本站](http://www.yinlijun.com)，代码将会托管到github [android ota system](https://github.com/yinlijun2004/android_ota_system)。\n\n<!--more-->\n\n### 目标\n到这个项目完结的时候，能实现如下功能。\n\n- 服务端\n  - 版本管理后台\n  - 用户管理后台\n- PC端\n  - 版本管理界面\n  - 用户操作界面\n- Android端\n  - 查询版本\n  - 下载版本\n  - 升级版本 \n\n\n### 我的技术背景\n\n语言方面\n- javascript 熟练度 30%\n\n框架\n- nodejs 熟练度 5%\n- react 熟练度 10%\n\n### 会使用到的库\n- react\n- express\n\n### 目录\n- {% post_link my-ota-tutorial-1 用户注册登录的后台实现 %}\n- {% post_link my-ota-tutorial-2 用户注册登录前端界面实现 %}\n- {% post_link my-ota-tutorial-3 七牛云存储接口实现 %}\n- {% post_link my-ota-tutorial-4 版本发布规则实现 %}\n- {% post_link my-ota-tutorial-5 用户管理规则实现 %}\n- {% post_link my-ota-tutorial-7 部署到阿里云ECS %}","source":"_posts/my-ota-tutorial.md","raw":"---\ntitle: 从零搭建Android OTA系统——开篇\ndate: 2017-12-20 17:45:28\ntags: [express, react, nodejs]\ncategories: 从零搭建Android OTA系统\n---\n\n### 起因\n作为一个半路出家的码农，一个野生Android工程师，一直对<b>全栈</b>心怀憧憬，但未有行动。直到两年之前有机会开始接触javascript，写了一些前端的代码，加上nodejs社区这些年的蓬勃发展，我觉得这是一个机会。正如某位长者教导的:\n>人的一生当然要靠自我奋斗,当然也要考虑历史的进程。\n\n我觉得是时候了。\n\n这是一个完整的项目，也许耗时会比较长，因为上班时间还有工作要完成，但是我会尽力完成它，我的目标是达到可以商用的水平，而不是一个玩具。实现的过程的文章会贴在[本站](http://www.yinlijun.com)，代码将会托管到github [android ota system](https://github.com/yinlijun2004/android_ota_system)。\n\n<!--more-->\n\n### 目标\n到这个项目完结的时候，能实现如下功能。\n\n- 服务端\n  - 版本管理后台\n  - 用户管理后台\n- PC端\n  - 版本管理界面\n  - 用户操作界面\n- Android端\n  - 查询版本\n  - 下载版本\n  - 升级版本 \n\n\n### 我的技术背景\n\n语言方面\n- javascript 熟练度 30%\n\n框架\n- nodejs 熟练度 5%\n- react 熟练度 10%\n\n### 会使用到的库\n- react\n- express\n\n### 目录\n- {% post_link my-ota-tutorial-1 用户注册登录的后台实现 %}\n- {% post_link my-ota-tutorial-2 用户注册登录前端界面实现 %}\n- {% post_link my-ota-tutorial-3 七牛云存储接口实现 %}\n- {% post_link my-ota-tutorial-4 版本发布规则实现 %}\n- {% post_link my-ota-tutorial-5 用户管理规则实现 %}\n- {% post_link my-ota-tutorial-7 部署到阿里云ECS %}","slug":"my-ota-tutorial","published":1,"updated":"2019-01-03T02:48:56.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aanel001fbiuid5xle71l","content":"<h3 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h3><p>作为一个半路出家的码农，一个野生Android工程师，一直对<b>全栈</b>心怀憧憬，但未有行动。直到两年之前有机会开始接触javascript，写了一些前端的代码，加上nodejs社区这些年的蓬勃发展，我觉得这是一个机会。正如某位长者教导的:</p>\n<blockquote>\n<p>人的一生当然要靠自我奋斗,当然也要考虑历史的进程。</p>\n</blockquote>\n<p>我觉得是时候了。</p>\n<p>这是一个完整的项目，也许耗时会比较长，因为上班时间还有工作要完成，但是我会尽力完成它，我的目标是达到可以商用的水平，而不是一个玩具。实现的过程的文章会贴在<a href=\"http://www.yinlijun.com\">本站</a>，代码将会托管到github <a href=\"https://github.com/yinlijun2004/android_ota_system\" target=\"_blank\" rel=\"noopener\">android ota system</a>。</p>\n<a id=\"more\"></a>\n<h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>到这个项目完结的时候，能实现如下功能。</p>\n<ul>\n<li>服务端<ul>\n<li>版本管理后台</li>\n<li>用户管理后台</li>\n</ul>\n</li>\n<li>PC端<ul>\n<li>版本管理界面</li>\n<li>用户操作界面</li>\n</ul>\n</li>\n<li>Android端<ul>\n<li>查询版本</li>\n<li>下载版本</li>\n<li>升级版本 </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"我的技术背景\"><a href=\"#我的技术背景\" class=\"headerlink\" title=\"我的技术背景\"></a>我的技术背景</h3><p>语言方面</p>\n<ul>\n<li>javascript 熟练度 30%</li>\n</ul>\n<p>框架</p>\n<ul>\n<li>nodejs 熟练度 5%</li>\n<li>react 熟练度 10%</li>\n</ul>\n<h3 id=\"会使用到的库\"><a href=\"#会使用到的库\" class=\"headerlink\" title=\"会使用到的库\"></a>会使用到的库</h3><ul>\n<li>react</li>\n<li>express</li>\n</ul>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li><a href=\"/2017/12/20/my-ota-tutorial-1/\" title=\"用户注册登录的后台实现\">用户注册登录的后台实现</a></li>\n<li><a href=\"/2018/04/09/my-ota-tutorial-2/\" title=\"用户注册登录前端界面实现\">用户注册登录前端界面实现</a></li>\n<li><a href=\"/2018/04/18/my-ota-tutorial-3/\" title=\"七牛云存储接口实现\">七牛云存储接口实现</a></li>\n<li><a href=\"/2018/04/19/my-ota-tutorial-4/\" title=\"版本发布规则实现\">版本发布规则实现</a></li>\n<li><a href=\"/2018/04/19/my-ota-tutorial-5/\" title=\"用户管理规则实现\">用户管理规则实现</a></li>\n<li><a href=\"/2018/03/20/my-ota-tutorial-7/\" title=\"部署到阿里云ECS\">部署到阿里云ECS</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h3><p>作为一个半路出家的码农，一个野生Android工程师，一直对<b>全栈</b>心怀憧憬，但未有行动。直到两年之前有机会开始接触javascript，写了一些前端的代码，加上nodejs社区这些年的蓬勃发展，我觉得这是一个机会。正如某位长者教导的:</p>\n<blockquote>\n<p>人的一生当然要靠自我奋斗,当然也要考虑历史的进程。</p>\n</blockquote>\n<p>我觉得是时候了。</p>\n<p>这是一个完整的项目，也许耗时会比较长，因为上班时间还有工作要完成，但是我会尽力完成它，我的目标是达到可以商用的水平，而不是一个玩具。实现的过程的文章会贴在<a href=\"http://www.yinlijun.com\">本站</a>，代码将会托管到github <a href=\"https://github.com/yinlijun2004/android_ota_system\" target=\"_blank\" rel=\"noopener\">android ota system</a>。</p>","more":"<h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>到这个项目完结的时候，能实现如下功能。</p>\n<ul>\n<li>服务端<ul>\n<li>版本管理后台</li>\n<li>用户管理后台</li>\n</ul>\n</li>\n<li>PC端<ul>\n<li>版本管理界面</li>\n<li>用户操作界面</li>\n</ul>\n</li>\n<li>Android端<ul>\n<li>查询版本</li>\n<li>下载版本</li>\n<li>升级版本 </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"我的技术背景\"><a href=\"#我的技术背景\" class=\"headerlink\" title=\"我的技术背景\"></a>我的技术背景</h3><p>语言方面</p>\n<ul>\n<li>javascript 熟练度 30%</li>\n</ul>\n<p>框架</p>\n<ul>\n<li>nodejs 熟练度 5%</li>\n<li>react 熟练度 10%</li>\n</ul>\n<h3 id=\"会使用到的库\"><a href=\"#会使用到的库\" class=\"headerlink\" title=\"会使用到的库\"></a>会使用到的库</h3><ul>\n<li>react</li>\n<li>express</li>\n</ul>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li><a href=\"/2017/12/20/my-ota-tutorial-1/\" title=\"用户注册登录的后台实现\">用户注册登录的后台实现</a></li>\n<li><a href=\"/2018/04/09/my-ota-tutorial-2/\" title=\"用户注册登录前端界面实现\">用户注册登录前端界面实现</a></li>\n<li><a href=\"/2018/04/18/my-ota-tutorial-3/\" title=\"七牛云存储接口实现\">七牛云存储接口实现</a></li>\n<li><a href=\"/2018/04/19/my-ota-tutorial-4/\" title=\"版本发布规则实现\">版本发布规则实现</a></li>\n<li><a href=\"/2018/04/19/my-ota-tutorial-5/\" title=\"用户管理规则实现\">用户管理规则实现</a></li>\n<li><a href=\"/2018/03/20/my-ota-tutorial-7/\" title=\"部署到阿里云ECS\">部署到阿里云ECS</a></li>\n</ul>"},{"title":"Windows下Ngrok工具的使用","date":"2018-03-24T02:09:26.000Z","_content":"\n最近在本机调试七牛云上传，碰到一个问题。七牛云存储完成上传操作后，会有一个回调操作，告诉服务器上传结果。\n\n>[https://developer.qiniu.com/kodo/sdk/1289/nodejs](https://developer.qiniu.com/kodo/sdk/1289/nodejs)\n```javascript\nvar options = {\n  scope: bucket,\n  callbackUrl: 'http://api.example.com/qiniu/upload/callback',\n  callbackBody: 'key=$(key)&hash=$(etag)&bucket=$(bucket)&fsize=$(fsize)&name=$(x:name)'\n}\nvar putPolicy = new qiniu.rs.PutPolicy(options);\nvar uploadToken=putPolicy.uploadToken(mac);\n```\n\n<!--more-->\n\n上面的<b>http://api.example.com</b>就是回调的url，在开发模式下肯定是指向本机的，而不是生产服务器。\n\n因此需要一个内网穿透的工具，在网上找到[Ngrok](https://www.ngrok.cc)。\n\nNgrok会生成一个指向你本机服务的隧道，隧道信息，包含一个三级域名（就是上面的回调url），本地端口（就是你的服务运行的端口），协议类型等信息。\n![](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/56d49defca68f6178c2aadc601ea157c78729113241118fa8f5471199a8e707a5a5ee24a8e08fb8e264665971dbf42db?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=QQ%E5%9B%BE%E7%89%8720180324102303.png&size=1024)\n\n隧道有免费的，也有付费的，但免费的貌似不稳定。\n\n然后在server端可以用环境变量区分回调的url。\n```javascript\nqiniuCallbackDomain: process.env.NODE_ENV === \"production\" ? 'http://test.xxx.com' :'http://prod.xx.com',\n```\n\nNgrok支持大部分的平台，我的是windows 64位，下载完[客户端](https://www.ngrok.cc/download.html)，解压，运行<b>Sunny-Ngrok启动工具.bat</b>，填入隧道ID，即可实现外网访问。\n","source":"_posts/ngrok-intro.md","raw":"---\ntitle: Windows下Ngrok工具的使用\ndate: 2018-03-24 10:09:26\ntags: [ngrok, nodjs]\n---\n\n最近在本机调试七牛云上传，碰到一个问题。七牛云存储完成上传操作后，会有一个回调操作，告诉服务器上传结果。\n\n>[https://developer.qiniu.com/kodo/sdk/1289/nodejs](https://developer.qiniu.com/kodo/sdk/1289/nodejs)\n```javascript\nvar options = {\n  scope: bucket,\n  callbackUrl: 'http://api.example.com/qiniu/upload/callback',\n  callbackBody: 'key=$(key)&hash=$(etag)&bucket=$(bucket)&fsize=$(fsize)&name=$(x:name)'\n}\nvar putPolicy = new qiniu.rs.PutPolicy(options);\nvar uploadToken=putPolicy.uploadToken(mac);\n```\n\n<!--more-->\n\n上面的<b>http://api.example.com</b>就是回调的url，在开发模式下肯定是指向本机的，而不是生产服务器。\n\n因此需要一个内网穿透的工具，在网上找到[Ngrok](https://www.ngrok.cc)。\n\nNgrok会生成一个指向你本机服务的隧道，隧道信息，包含一个三级域名（就是上面的回调url），本地端口（就是你的服务运行的端口），协议类型等信息。\n![](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/56d49defca68f6178c2aadc601ea157c78729113241118fa8f5471199a8e707a5a5ee24a8e08fb8e264665971dbf42db?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=QQ%E5%9B%BE%E7%89%8720180324102303.png&size=1024)\n\n隧道有免费的，也有付费的，但免费的貌似不稳定。\n\n然后在server端可以用环境变量区分回调的url。\n```javascript\nqiniuCallbackDomain: process.env.NODE_ENV === \"production\" ? 'http://test.xxx.com' :'http://prod.xx.com',\n```\n\nNgrok支持大部分的平台，我的是windows 64位，下载完[客户端](https://www.ngrok.cc/download.html)，解压，运行<b>Sunny-Ngrok启动工具.bat</b>，填入隧道ID，即可实现外网访问。\n","slug":"ngrok-intro","published":1,"updated":"2019-01-03T02:48:56.343Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aanem001gbiuit9rby7hx","content":"<p>最近在本机调试七牛云上传，碰到一个问题。七牛云存储完成上传操作后，会有一个回调操作，告诉服务器上传结果。</p>\n<blockquote>\n<p><a href=\"https://developer.qiniu.com/kodo/sdk/1289/nodejs\" target=\"_blank\" rel=\"noopener\">https://developer.qiniu.com/kodo/sdk/1289/nodejs</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\">  scope: bucket,</span><br><span class=\"line\">  callbackUrl: <span class=\"string\">'http://api.example.com/qiniu/upload/callback'</span>,</span><br><span class=\"line\">  callbackBody: <span class=\"string\">'key=$(key)&amp;hash=$(etag)&amp;bucket=$(bucket)&amp;fsize=$(fsize)&amp;name=$(x:name)'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> putPolicy = <span class=\"keyword\">new</span> qiniu.rs.PutPolicy(options);</span><br><span class=\"line\"><span class=\"keyword\">var</span> uploadToken=putPolicy.uploadToken(mac);</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>上面的<b><a href=\"http://api.example.com\" target=\"_blank\" rel=\"noopener\">http://api.example.com</a></b>就是回调的url，在开发模式下肯定是指向本机的，而不是生产服务器。</p>\n<p>因此需要一个内网穿透的工具，在网上找到<a href=\"https://www.ngrok.cc\" target=\"_blank\" rel=\"noopener\">Ngrok</a>。</p>\n<p>Ngrok会生成一个指向你本机服务的隧道，隧道信息，包含一个三级域名（就是上面的回调url），本地端口（就是你的服务运行的端口），协议类型等信息。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/56d49defca68f6178c2aadc601ea157c78729113241118fa8f5471199a8e707a5a5ee24a8e08fb8e264665971dbf42db?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=QQ%E5%9B%BE%E7%89%8720180324102303.png&amp;size=1024\" alt=\"\"></p>\n<p>隧道有免费的，也有付费的，但免费的貌似不稳定。</p>\n<p>然后在server端可以用环境变量区分回调的url。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qiniuCallbackDomain: process.env.NODE_ENV === <span class=\"string\">\"production\"</span> ? <span class=\"string\">'http://test.xxx.com'</span> :<span class=\"string\">'http://prod.xx.com'</span>,</span><br></pre></td></tr></table></figure></p>\n<p>Ngrok支持大部分的平台，我的是windows 64位，下载完<a href=\"https://www.ngrok.cc/download.html\" target=\"_blank\" rel=\"noopener\">客户端</a>，解压，运行<b>Sunny-Ngrok启动工具.bat</b>，填入隧道ID，即可实现外网访问。</p>\n","site":{"data":{}},"excerpt":"<p>最近在本机调试七牛云上传，碰到一个问题。七牛云存储完成上传操作后，会有一个回调操作，告诉服务器上传结果。</p>\n<blockquote>\n<p><a href=\"https://developer.qiniu.com/kodo/sdk/1289/nodejs\" target=\"_blank\" rel=\"noopener\">https://developer.qiniu.com/kodo/sdk/1289/nodejs</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\">  scope: bucket,</span><br><span class=\"line\">  callbackUrl: <span class=\"string\">'http://api.example.com/qiniu/upload/callback'</span>,</span><br><span class=\"line\">  callbackBody: <span class=\"string\">'key=$(key)&amp;hash=$(etag)&amp;bucket=$(bucket)&amp;fsize=$(fsize)&amp;name=$(x:name)'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> putPolicy = <span class=\"keyword\">new</span> qiniu.rs.PutPolicy(options);</span><br><span class=\"line\"><span class=\"keyword\">var</span> uploadToken=putPolicy.uploadToken(mac);</span><br></pre></td></tr></table></figure></p>\n</blockquote>","more":"<p>上面的<b><a href=\"http://api.example.com\" target=\"_blank\" rel=\"noopener\">http://api.example.com</a></b>就是回调的url，在开发模式下肯定是指向本机的，而不是生产服务器。</p>\n<p>因此需要一个内网穿透的工具，在网上找到<a href=\"https://www.ngrok.cc\" target=\"_blank\" rel=\"noopener\">Ngrok</a>。</p>\n<p>Ngrok会生成一个指向你本机服务的隧道，隧道信息，包含一个三级域名（就是上面的回调url），本地端口（就是你的服务运行的端口），协议类型等信息。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/56d49defca68f6178c2aadc601ea157c78729113241118fa8f5471199a8e707a5a5ee24a8e08fb8e264665971dbf42db?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=QQ%E5%9B%BE%E7%89%8720180324102303.png&amp;size=1024\" alt=\"\"></p>\n<p>隧道有免费的，也有付费的，但免费的貌似不稳定。</p>\n<p>然后在server端可以用环境变量区分回调的url。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qiniuCallbackDomain: process.env.NODE_ENV === <span class=\"string\">\"production\"</span> ? <span class=\"string\">'http://test.xxx.com'</span> :<span class=\"string\">'http://prod.xx.com'</span>,</span><br></pre></td></tr></table></figure></p>\n<p>Ngrok支持大部分的平台，我的是windows 64位，下载完<a href=\"https://www.ngrok.cc/download.html\" target=\"_blank\" rel=\"noopener\">客户端</a>，解压，运行<b>Sunny-Ngrok启动工具.bat</b>，填入隧道ID，即可实现外网访问。</p>"},{"title":"记录一款内网穿透工具[natapp]","date":"2019-04-18T09:13:32.000Z","_content":"\n### NATAPP\n这几天发现这款内网穿透工具，支持多平台，挺稳定的，但前提是要氪金，不氪金不稳定 - -， 价格大概9元/月。\n\n\n#### 下载地址\n\nhttps://natapp.cn/\n\n下载好以后，前往注册，购买隧道。\n\n会生成一个隧道token，隧道ID对应一个外网的域名和端口。\n\n这个域名和端口映射到你指定的域名和端口，一般映射到本机。\n\n\n#### 运行\n\n```bash\n./natapp -authtoken xxxxxxxxxxxxxxxxxxx\n```\n","source":"_posts/natapp-usage.md","raw":"---\ntitle: 记录一款内网穿透工具[natapp]\ndate: 2019-04-18 17:13:32\ntags:\n---\n\n### NATAPP\n这几天发现这款内网穿透工具，支持多平台，挺稳定的，但前提是要氪金，不氪金不稳定 - -， 价格大概9元/月。\n\n\n#### 下载地址\n\nhttps://natapp.cn/\n\n下载好以后，前往注册，购买隧道。\n\n会生成一个隧道token，隧道ID对应一个外网的域名和端口。\n\n这个域名和端口映射到你指定的域名和端口，一般映射到本机。\n\n\n#### 运行\n\n```bash\n./natapp -authtoken xxxxxxxxxxxxxxxxxxx\n```\n","slug":"natapp-usage","published":1,"updated":"2019-04-18T09:26:38.025Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aanen001kbiuik6g91wwe","content":"<h3 id=\"NATAPP\"><a href=\"#NATAPP\" class=\"headerlink\" title=\"NATAPP\"></a>NATAPP</h3><p>这几天发现这款内网穿透工具，支持多平台，挺稳定的，但前提是要氪金，不氪金不稳定 - -， 价格大概9元/月。</p>\n<h4 id=\"下载地址\"><a href=\"#下载地址\" class=\"headerlink\" title=\"下载地址\"></a>下载地址</h4><p><a href=\"https://natapp.cn/\" target=\"_blank\" rel=\"noopener\">https://natapp.cn/</a></p>\n<p>下载好以后，前往注册，购买隧道。</p>\n<p>会生成一个隧道token，隧道ID对应一个外网的域名和端口。</p>\n<p>这个域名和端口映射到你指定的域名和端口，一般映射到本机。</p>\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./natapp -authtoken xxxxxxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"NATAPP\"><a href=\"#NATAPP\" class=\"headerlink\" title=\"NATAPP\"></a>NATAPP</h3><p>这几天发现这款内网穿透工具，支持多平台，挺稳定的，但前提是要氪金，不氪金不稳定 - -， 价格大概9元/月。</p>\n<h4 id=\"下载地址\"><a href=\"#下载地址\" class=\"headerlink\" title=\"下载地址\"></a>下载地址</h4><p><a href=\"https://natapp.cn/\" target=\"_blank\" rel=\"noopener\">https://natapp.cn/</a></p>\n<p>下载好以后，前往注册，购买隧道。</p>\n<p>会生成一个隧道token，隧道ID对应一个外网的域名和端口。</p>\n<p>这个域名和端口映射到你指定的域名和端口，一般映射到本机。</p>\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./natapp -authtoken xxxxxxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure>\n"},{"title":"致已经过去的2018和已经到来的2019","date":"2018-12-31T18:37:15.000Z","_content":"\n随着一顿热腾腾的羊肉火锅，我的2018年已经成为了过去。这一晚，没看老罗蜻蜓点水的年度总结，也没看热闹的跨年晚会，陪着家人，静待时间流转，来到2019。\n\n过去的一年，工作上，没有多大的气色，虽然自己很拼，但是结果并不尽人意，人到而立之年，看淡了很多，不太计较得失，尽人事，听天命。毕竟，我是信命的人。\n\n<!-- more -->\n\n这一年最大得收获，就是我的宝贝女儿的到来，我猜前半生所有的坏运气，都在为这一刻做铺垫，在医院听到她的第一声啼哭，差点让我掉下泪来，感谢天感谢地，送我的女儿到我身边，当然最感谢的还是我夫人，坚强而隐忍，前一天刚交接完工作，第二天就进了产房。2018年最后一天，我陪夫人到楼下拿快递，夫人跟我说，她的人生已经圆满了，我感觉亦然。\n![Lovely Candy](lovely_candy.png \"Lovely Candy\")\n我为女儿起名一个沁字，我查了女儿的八字，命里缺水。毕竟，我是信命的人。希望女儿将来温柔如水，润物无声。\n\n这一年，不管是夫人还是母亲，都在为家里默默付出，在带小孩这件事上，我不用操心，而我陪他们得时间太少，我心生愧疚，而这种情况，2019年还将继续。\n\n新年总要立flag的，新一年的TODO List如下，2020年统一时间前来兑现。\n\n>工作学习方面\n\n- [本站](http://www.yinlijun.com)更新30篇以上文章（本篇不算），其中互联网产品分析20篇以上。\n- 完成2个以上个人koa项目。\n- 完成一个以上微信小程序项目。\n- 阅读超过20本以上纸质书。\n\n>生活方面\n\n- 办一张楼下健身卡，并且去10次以上。\n- 换一把茶轴机械键盘。\n- 给夫人买一步新款iPhone。\n- 手游氪金不超过1000¥。\n- 全家出省旅游一次。\n","source":"_posts/open-flag.md","raw":"---\ntitle: 致已经过去的2018和已经到来的2019\ndate: 2019-01-01 02:37:15\ntags: [个人计划和总结]\ncategories: 个人计划和总结\n---\n\n随着一顿热腾腾的羊肉火锅，我的2018年已经成为了过去。这一晚，没看老罗蜻蜓点水的年度总结，也没看热闹的跨年晚会，陪着家人，静待时间流转，来到2019。\n\n过去的一年，工作上，没有多大的气色，虽然自己很拼，但是结果并不尽人意，人到而立之年，看淡了很多，不太计较得失，尽人事，听天命。毕竟，我是信命的人。\n\n<!-- more -->\n\n这一年最大得收获，就是我的宝贝女儿的到来，我猜前半生所有的坏运气，都在为这一刻做铺垫，在医院听到她的第一声啼哭，差点让我掉下泪来，感谢天感谢地，送我的女儿到我身边，当然最感谢的还是我夫人，坚强而隐忍，前一天刚交接完工作，第二天就进了产房。2018年最后一天，我陪夫人到楼下拿快递，夫人跟我说，她的人生已经圆满了，我感觉亦然。\n![Lovely Candy](lovely_candy.png \"Lovely Candy\")\n我为女儿起名一个沁字，我查了女儿的八字，命里缺水。毕竟，我是信命的人。希望女儿将来温柔如水，润物无声。\n\n这一年，不管是夫人还是母亲，都在为家里默默付出，在带小孩这件事上，我不用操心，而我陪他们得时间太少，我心生愧疚，而这种情况，2019年还将继续。\n\n新年总要立flag的，新一年的TODO List如下，2020年统一时间前来兑现。\n\n>工作学习方面\n\n- [本站](http://www.yinlijun.com)更新30篇以上文章（本篇不算），其中互联网产品分析20篇以上。\n- 完成2个以上个人koa项目。\n- 完成一个以上微信小程序项目。\n- 阅读超过20本以上纸质书。\n\n>生活方面\n\n- 办一张楼下健身卡，并且去10次以上。\n- 换一把茶轴机械键盘。\n- 给夫人买一步新款iPhone。\n- 手游氪金不超过1000¥。\n- 全家出省旅游一次。\n","slug":"open-flag","published":1,"updated":"2019-01-03T02:48:56.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aaneo001nbiuiz4zgf08a","content":"<p>随着一顿热腾腾的羊肉火锅，我的2018年已经成为了过去。这一晚，没看老罗蜻蜓点水的年度总结，也没看热闹的跨年晚会，陪着家人，静待时间流转，来到2019。</p>\n<p>过去的一年，工作上，没有多大的气色，虽然自己很拼，但是结果并不尽人意，人到而立之年，看淡了很多，不太计较得失，尽人事，听天命。毕竟，我是信命的人。</p>\n<a id=\"more\"></a>\n<p>这一年最大得收获，就是我的宝贝女儿的到来，我猜前半生所有的坏运气，都在为这一刻做铺垫，在医院听到她的第一声啼哭，差点让我掉下泪来，感谢天感谢地，送我的女儿到我身边，当然最感谢的还是我夫人，坚强而隐忍，前一天刚交接完工作，第二天就进了产房。2018年最后一天，我陪夫人到楼下拿快递，夫人跟我说，她的人生已经圆满了，我感觉亦然。<br><img src=\"/2019/01/01/open-flag/lovely_candy.png\" alt=\"Lovely Candy\" title=\"Lovely Candy\"><br>我为女儿起名一个沁字，我查了女儿的八字，命里缺水。毕竟，我是信命的人。希望女儿将来温柔如水，润物无声。</p>\n<p>这一年，不管是夫人还是母亲，都在为家里默默付出，在带小孩这件事上，我不用操心，而我陪他们得时间太少，我心生愧疚，而这种情况，2019年还将继续。</p>\n<p>新年总要立flag的，新一年的TODO List如下，2020年统一时间前来兑现。</p>\n<blockquote>\n<p>工作学习方面</p>\n</blockquote>\n<ul>\n<li><a href=\"http://www.yinlijun.com\">本站</a>更新30篇以上文章（本篇不算），其中互联网产品分析20篇以上。</li>\n<li>完成2个以上个人koa项目。</li>\n<li>完成一个以上微信小程序项目。</li>\n<li>阅读超过20本以上纸质书。</li>\n</ul>\n<blockquote>\n<p>生活方面</p>\n</blockquote>\n<ul>\n<li>办一张楼下健身卡，并且去10次以上。</li>\n<li>换一把茶轴机械键盘。</li>\n<li>给夫人买一步新款iPhone。</li>\n<li>手游氪金不超过1000¥。</li>\n<li>全家出省旅游一次。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>随着一顿热腾腾的羊肉火锅，我的2018年已经成为了过去。这一晚，没看老罗蜻蜓点水的年度总结，也没看热闹的跨年晚会，陪着家人，静待时间流转，来到2019。</p>\n<p>过去的一年，工作上，没有多大的气色，虽然自己很拼，但是结果并不尽人意，人到而立之年，看淡了很多，不太计较得失，尽人事，听天命。毕竟，我是信命的人。</p>","more":"<p>这一年最大得收获，就是我的宝贝女儿的到来，我猜前半生所有的坏运气，都在为这一刻做铺垫，在医院听到她的第一声啼哭，差点让我掉下泪来，感谢天感谢地，送我的女儿到我身边，当然最感谢的还是我夫人，坚强而隐忍，前一天刚交接完工作，第二天就进了产房。2018年最后一天，我陪夫人到楼下拿快递，夫人跟我说，她的人生已经圆满了，我感觉亦然。<br><img src=\"/2019/01/01/open-flag/lovely_candy.png\" alt=\"Lovely Candy\" title=\"Lovely Candy\"><br>我为女儿起名一个沁字，我查了女儿的八字，命里缺水。毕竟，我是信命的人。希望女儿将来温柔如水，润物无声。</p>\n<p>这一年，不管是夫人还是母亲，都在为家里默默付出，在带小孩这件事上，我不用操心，而我陪他们得时间太少，我心生愧疚，而这种情况，2019年还将继续。</p>\n<p>新年总要立flag的，新一年的TODO List如下，2020年统一时间前来兑现。</p>\n<blockquote>\n<p>工作学习方面</p>\n</blockquote>\n<ul>\n<li><a href=\"http://www.yinlijun.com\">本站</a>更新30篇以上文章（本篇不算），其中互联网产品分析20篇以上。</li>\n<li>完成2个以上个人koa项目。</li>\n<li>完成一个以上微信小程序项目。</li>\n<li>阅读超过20本以上纸质书。</li>\n</ul>\n<blockquote>\n<p>生活方面</p>\n</blockquote>\n<ul>\n<li>办一张楼下健身卡，并且去10次以上。</li>\n<li>换一把茶轴机械键盘。</li>\n<li>给夫人买一步新款iPhone。</li>\n<li>手游氪金不超过1000¥。</li>\n<li>全家出省旅游一次。</li>\n</ul>"},{"title":"OTA用户使用指南","date":"2018-04-10T02:14:21.000Z","_content":"\n## 用户管理\n\n### 用户权限\n系统分为四类用户，分别是\n- 系统管理员\n    - 批准用户注册申请\n    - 删除用户\n    - 重置用户密码\n    - 管理测试SN\n    - 管理Android版本\n    - 管理版本类别\n\n<!--more-->\n\n- 软件工程师\n    - 新建版本\n    - 修改版本\n    - 上传固件包\n    - 发布Alpha测试\n\n- 测试工程师\n    - 撤回Alpha测试\n    - 发布Beta测试\n\n- 运营工程师\n    - 撤回Beta测试\n    - 发布Release版本\n\n#### 系统管理员权限\n- 批准用户注册申请 \n用户在OTA主界面注册成为OTA系统用户，注册时需要从以下列表选择一种身份：\n    - 软件工程师\n    - 测试工程师\n    - 运营工程师\n\n![](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/be617eb7472b662e17af2c693abf6022859fe84604c503b38480a183386139a99b110736f96a163c855f3285fc2760a6?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=1523346231%281%29.png&size=1024)\n\n管理员登录之后，在用户管理页面，可以批准或者删除用户的注册申请。\n![](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/27099809ab4a1b5194e22e59f458d34c927d7cc627fae348c9d3f1fe2b342abce0968f6c4c740a78cc51cece3d8a1189?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180410154736.png&size=1024)\n\n- 删除用户 用户离职之后，管理员可以选择删除用户。\n\n- 重置用户密码 用户忘记密码之后，管理员可以帮助用户重置用户密码。\n\n- 管理测试SN 管理员可以添加SN号，用来标识对应的版本类别，如果勾选了Alpha，则可以进行Alpha版本状态下的版本升级；如果勾选了Beta，则可以进行Beta版本状态下的版本升级。\n\n- 管理Android版本 管理员可以添加/删除Andriod版本，软件工程师可以从中选择一个版本。\n\n- 管理版本类别 管理员可以添加/删除版本类别，一个版本类别标识一类终端产品，OTA会选择同一版本类别的更高的版本进行升级。\n\n![](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/521e0ddaabd7cd53cdc0f5e1b4ff3864d74919bbe73f5682fa054c57b734ff14d81b3e1b0f2353339b9cf7f0c9d43f1b?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180410162612.png&size=1024)\n\n#### 软件工程师权限\n- 新建版本\n软件工程师将版本编译出来之后，新建一个版本，需要填写如下信息：\n    \n    - 版本类别\n    - 版本号\n    - 版本描述\n    - Android版本\n    - 更新记录\n\n![](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/b3331a73196a0d3d630155832b3bea3249e262bc3fccb5736bd39ce05a86181f065e320f8f140000cc6698dac00c3f73?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180410164617.png&size=1024)\n\n创建之后，跳转到版本列表界面\n![](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/8f8b4b1d6e83a323fcc830f362fd2f2e3b50aefe50a1c1ffd0c80b6367d0899df72c2ee4732bef8420f2cbd240d3e09f?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180410164917.png&size=1024)\n\n点击包管理，进入升级包上传界面\n![](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/45c9173a9a48fed2a8a1fe11c36abad36691e158957ca97f01a4acbc005144b515c043cb3069677c5f8e9c6616a22aaa?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180410165043.png&size=1024)\n\n上传完完整包和固件包。\n\n- 修改版本\n软件工程师可以在新建状态下更改版本信息，但是不能修改版本类别和版本号。\n\n- 发布Alpha测试\n上传完固件包之后，回到版本列表界面，发布alpha测试。如果某台终端被允许Alpha测试，则会收到该版本的更新提示。\n\n#### 测试工程师权限\n- 撤回Alpha测试 \n若测试工程师在测试过程中发现问题，可以撤回到新建状态，要求软件工程师重新上传固件版本。\n\n- 发布Beta测试\n若测试工程师在Alpha测试过程中没有发现问题，则发布Beta测试。\n\n#### 运营工程师权限\n- 撤回Beta测试\n如果测试过程中发现问题，可以由运营工程师撤回到Alpha测试状态，由测试工程师确认。\n\n- 发布Release版本\n如果Beta测试过程中发现问题，可以由运营工程师发布Release状态。\n\n### 版本状态说明\n版本的状态分为四个：\n- 新建状态 该状态下，可以修改版本信息，上传固件包。\n- Alpha测试状态 该状态下，支持Alpha测试的终端将会收到版本提示。\n- Beta测试状态 该状态下，支持Beta测试的终端将会收到版本提示。Beta测试状态与Alpha测试状态类似，Beta测试需要更多的终端设备验证。\n- Release状态 该状态下，所有终端将会收到版本提示。\n\n版本状态迁移：\n\n![版本状态迁移：](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/f8279f93bdf2d68e2d599d0498b747cfe83430bbd7161ce4a39268a1156af75ff42effdec511f08e0dc4d6489e58dbbe?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=firmware_process.png&size=1024)\n\n### 异常操作\n- 如果某台终端，升级了某个Alpha版本或Beta版本，但是该版本最后被撤回，没有发布到Release状态，如何升级到后续版本？\n\n    此时不能进行差分包升级了，需要进行OTA全包升级。\n\n### 使用注意事项\n- 上传固件包时，完整包是必选的。\n- 与历史版本的差分包是可选的，然后终端有限选择差分包进行OTA升级，如果没有查询到差分包，则下载完整包。\n\n","source":"_posts/ota-user-manual.md","raw":"---\ntitle: OTA用户使用指南\ndate: 2018-04-10 10:14:21\ntags:\n---\n\n## 用户管理\n\n### 用户权限\n系统分为四类用户，分别是\n- 系统管理员\n    - 批准用户注册申请\n    - 删除用户\n    - 重置用户密码\n    - 管理测试SN\n    - 管理Android版本\n    - 管理版本类别\n\n<!--more-->\n\n- 软件工程师\n    - 新建版本\n    - 修改版本\n    - 上传固件包\n    - 发布Alpha测试\n\n- 测试工程师\n    - 撤回Alpha测试\n    - 发布Beta测试\n\n- 运营工程师\n    - 撤回Beta测试\n    - 发布Release版本\n\n#### 系统管理员权限\n- 批准用户注册申请 \n用户在OTA主界面注册成为OTA系统用户，注册时需要从以下列表选择一种身份：\n    - 软件工程师\n    - 测试工程师\n    - 运营工程师\n\n![](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/be617eb7472b662e17af2c693abf6022859fe84604c503b38480a183386139a99b110736f96a163c855f3285fc2760a6?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=1523346231%281%29.png&size=1024)\n\n管理员登录之后，在用户管理页面，可以批准或者删除用户的注册申请。\n![](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/27099809ab4a1b5194e22e59f458d34c927d7cc627fae348c9d3f1fe2b342abce0968f6c4c740a78cc51cece3d8a1189?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180410154736.png&size=1024)\n\n- 删除用户 用户离职之后，管理员可以选择删除用户。\n\n- 重置用户密码 用户忘记密码之后，管理员可以帮助用户重置用户密码。\n\n- 管理测试SN 管理员可以添加SN号，用来标识对应的版本类别，如果勾选了Alpha，则可以进行Alpha版本状态下的版本升级；如果勾选了Beta，则可以进行Beta版本状态下的版本升级。\n\n- 管理Android版本 管理员可以添加/删除Andriod版本，软件工程师可以从中选择一个版本。\n\n- 管理版本类别 管理员可以添加/删除版本类别，一个版本类别标识一类终端产品，OTA会选择同一版本类别的更高的版本进行升级。\n\n![](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/521e0ddaabd7cd53cdc0f5e1b4ff3864d74919bbe73f5682fa054c57b734ff14d81b3e1b0f2353339b9cf7f0c9d43f1b?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180410162612.png&size=1024)\n\n#### 软件工程师权限\n- 新建版本\n软件工程师将版本编译出来之后，新建一个版本，需要填写如下信息：\n    \n    - 版本类别\n    - 版本号\n    - 版本描述\n    - Android版本\n    - 更新记录\n\n![](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/b3331a73196a0d3d630155832b3bea3249e262bc3fccb5736bd39ce05a86181f065e320f8f140000cc6698dac00c3f73?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180410164617.png&size=1024)\n\n创建之后，跳转到版本列表界面\n![](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/8f8b4b1d6e83a323fcc830f362fd2f2e3b50aefe50a1c1ffd0c80b6367d0899df72c2ee4732bef8420f2cbd240d3e09f?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180410164917.png&size=1024)\n\n点击包管理，进入升级包上传界面\n![](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/45c9173a9a48fed2a8a1fe11c36abad36691e158957ca97f01a4acbc005144b515c043cb3069677c5f8e9c6616a22aaa?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180410165043.png&size=1024)\n\n上传完完整包和固件包。\n\n- 修改版本\n软件工程师可以在新建状态下更改版本信息，但是不能修改版本类别和版本号。\n\n- 发布Alpha测试\n上传完固件包之后，回到版本列表界面，发布alpha测试。如果某台终端被允许Alpha测试，则会收到该版本的更新提示。\n\n#### 测试工程师权限\n- 撤回Alpha测试 \n若测试工程师在测试过程中发现问题，可以撤回到新建状态，要求软件工程师重新上传固件版本。\n\n- 发布Beta测试\n若测试工程师在Alpha测试过程中没有发现问题，则发布Beta测试。\n\n#### 运营工程师权限\n- 撤回Beta测试\n如果测试过程中发现问题，可以由运营工程师撤回到Alpha测试状态，由测试工程师确认。\n\n- 发布Release版本\n如果Beta测试过程中发现问题，可以由运营工程师发布Release状态。\n\n### 版本状态说明\n版本的状态分为四个：\n- 新建状态 该状态下，可以修改版本信息，上传固件包。\n- Alpha测试状态 该状态下，支持Alpha测试的终端将会收到版本提示。\n- Beta测试状态 该状态下，支持Beta测试的终端将会收到版本提示。Beta测试状态与Alpha测试状态类似，Beta测试需要更多的终端设备验证。\n- Release状态 该状态下，所有终端将会收到版本提示。\n\n版本状态迁移：\n\n![版本状态迁移：](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/f8279f93bdf2d68e2d599d0498b747cfe83430bbd7161ce4a39268a1156af75ff42effdec511f08e0dc4d6489e58dbbe?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=firmware_process.png&size=1024)\n\n### 异常操作\n- 如果某台终端，升级了某个Alpha版本或Beta版本，但是该版本最后被撤回，没有发布到Release状态，如何升级到后续版本？\n\n    此时不能进行差分包升级了，需要进行OTA全包升级。\n\n### 使用注意事项\n- 上传固件包时，完整包是必选的。\n- 与历史版本的差分包是可选的，然后终端有限选择差分包进行OTA升级，如果没有查询到差分包，则下载完整包。\n\n","slug":"ota-user-manual","published":1,"updated":"2019-01-03T02:48:56.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aanep001qbiui738d3dp8","content":"<h2 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h2><h3 id=\"用户权限\"><a href=\"#用户权限\" class=\"headerlink\" title=\"用户权限\"></a>用户权限</h3><p>系统分为四类用户，分别是</p>\n<ul>\n<li>系统管理员<ul>\n<li>批准用户注册申请</li>\n<li>删除用户</li>\n<li>重置用户密码</li>\n<li>管理测试SN</li>\n<li>管理Android版本</li>\n<li>管理版本类别</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>软件工程师</p>\n<ul>\n<li>新建版本</li>\n<li>修改版本</li>\n<li>上传固件包</li>\n<li>发布Alpha测试</li>\n</ul>\n</li>\n<li><p>测试工程师</p>\n<ul>\n<li>撤回Alpha测试</li>\n<li>发布Beta测试</li>\n</ul>\n</li>\n<li><p>运营工程师</p>\n<ul>\n<li>撤回Beta测试</li>\n<li>发布Release版本</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"系统管理员权限\"><a href=\"#系统管理员权限\" class=\"headerlink\" title=\"系统管理员权限\"></a>系统管理员权限</h4><ul>\n<li>批准用户注册申请<br>用户在OTA主界面注册成为OTA系统用户，注册时需要从以下列表选择一种身份：<ul>\n<li>软件工程师</li>\n<li>测试工程师</li>\n<li>运营工程师</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/be617eb7472b662e17af2c693abf6022859fe84604c503b38480a183386139a99b110736f96a163c855f3285fc2760a6?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=1523346231%281%29.png&amp;size=1024\" alt=\"\"></p>\n<p>管理员登录之后，在用户管理页面，可以批准或者删除用户的注册申请。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/27099809ab4a1b5194e22e59f458d34c927d7cc627fae348c9d3f1fe2b342abce0968f6c4c740a78cc51cece3d8a1189?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180410154736.png&amp;size=1024\" alt=\"\"></p>\n<ul>\n<li><p>删除用户 用户离职之后，管理员可以选择删除用户。</p>\n</li>\n<li><p>重置用户密码 用户忘记密码之后，管理员可以帮助用户重置用户密码。</p>\n</li>\n<li><p>管理测试SN 管理员可以添加SN号，用来标识对应的版本类别，如果勾选了Alpha，则可以进行Alpha版本状态下的版本升级；如果勾选了Beta，则可以进行Beta版本状态下的版本升级。</p>\n</li>\n<li><p>管理Android版本 管理员可以添加/删除Andriod版本，软件工程师可以从中选择一个版本。</p>\n</li>\n<li><p>管理版本类别 管理员可以添加/删除版本类别，一个版本类别标识一类终端产品，OTA会选择同一版本类别的更高的版本进行升级。</p>\n</li>\n</ul>\n<p><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/521e0ddaabd7cd53cdc0f5e1b4ff3864d74919bbe73f5682fa054c57b734ff14d81b3e1b0f2353339b9cf7f0c9d43f1b?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180410162612.png&amp;size=1024\" alt=\"\"></p>\n<h4 id=\"软件工程师权限\"><a href=\"#软件工程师权限\" class=\"headerlink\" title=\"软件工程师权限\"></a>软件工程师权限</h4><ul>\n<li><p>新建版本<br>软件工程师将版本编译出来之后，新建一个版本，需要填写如下信息：</p>\n<ul>\n<li>版本类别</li>\n<li>版本号</li>\n<li>版本描述</li>\n<li>Android版本</li>\n<li>更新记录</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/b3331a73196a0d3d630155832b3bea3249e262bc3fccb5736bd39ce05a86181f065e320f8f140000cc6698dac00c3f73?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180410164617.png&amp;size=1024\" alt=\"\"></p>\n<p>创建之后，跳转到版本列表界面<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/8f8b4b1d6e83a323fcc830f362fd2f2e3b50aefe50a1c1ffd0c80b6367d0899df72c2ee4732bef8420f2cbd240d3e09f?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180410164917.png&amp;size=1024\" alt=\"\"></p>\n<p>点击包管理，进入升级包上传界面<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/45c9173a9a48fed2a8a1fe11c36abad36691e158957ca97f01a4acbc005144b515c043cb3069677c5f8e9c6616a22aaa?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180410165043.png&amp;size=1024\" alt=\"\"></p>\n<p>上传完完整包和固件包。</p>\n<ul>\n<li><p>修改版本<br>软件工程师可以在新建状态下更改版本信息，但是不能修改版本类别和版本号。</p>\n</li>\n<li><p>发布Alpha测试<br>上传完固件包之后，回到版本列表界面，发布alpha测试。如果某台终端被允许Alpha测试，则会收到该版本的更新提示。</p>\n</li>\n</ul>\n<h4 id=\"测试工程师权限\"><a href=\"#测试工程师权限\" class=\"headerlink\" title=\"测试工程师权限\"></a>测试工程师权限</h4><ul>\n<li><p>撤回Alpha测试<br>若测试工程师在测试过程中发现问题，可以撤回到新建状态，要求软件工程师重新上传固件版本。</p>\n</li>\n<li><p>发布Beta测试<br>若测试工程师在Alpha测试过程中没有发现问题，则发布Beta测试。</p>\n</li>\n</ul>\n<h4 id=\"运营工程师权限\"><a href=\"#运营工程师权限\" class=\"headerlink\" title=\"运营工程师权限\"></a>运营工程师权限</h4><ul>\n<li><p>撤回Beta测试<br>如果测试过程中发现问题，可以由运营工程师撤回到Alpha测试状态，由测试工程师确认。</p>\n</li>\n<li><p>发布Release版本<br>如果Beta测试过程中发现问题，可以由运营工程师发布Release状态。</p>\n</li>\n</ul>\n<h3 id=\"版本状态说明\"><a href=\"#版本状态说明\" class=\"headerlink\" title=\"版本状态说明\"></a>版本状态说明</h3><p>版本的状态分为四个：</p>\n<ul>\n<li>新建状态 该状态下，可以修改版本信息，上传固件包。</li>\n<li>Alpha测试状态 该状态下，支持Alpha测试的终端将会收到版本提示。</li>\n<li>Beta测试状态 该状态下，支持Beta测试的终端将会收到版本提示。Beta测试状态与Alpha测试状态类似，Beta测试需要更多的终端设备验证。</li>\n<li>Release状态 该状态下，所有终端将会收到版本提示。</li>\n</ul>\n<p>版本状态迁移：</p>\n<p><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/f8279f93bdf2d68e2d599d0498b747cfe83430bbd7161ce4a39268a1156af75ff42effdec511f08e0dc4d6489e58dbbe?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=firmware_process.png&amp;size=1024\" alt=\"版本状态迁移：\"></p>\n<h3 id=\"异常操作\"><a href=\"#异常操作\" class=\"headerlink\" title=\"异常操作\"></a>异常操作</h3><ul>\n<li><p>如果某台终端，升级了某个Alpha版本或Beta版本，但是该版本最后被撤回，没有发布到Release状态，如何升级到后续版本？</p>\n<p>  此时不能进行差分包升级了，需要进行OTA全包升级。</p>\n</li>\n</ul>\n<h3 id=\"使用注意事项\"><a href=\"#使用注意事项\" class=\"headerlink\" title=\"使用注意事项\"></a>使用注意事项</h3><ul>\n<li>上传固件包时，完整包是必选的。</li>\n<li>与历史版本的差分包是可选的，然后终端有限选择差分包进行OTA升级，如果没有查询到差分包，则下载完整包。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h2><h3 id=\"用户权限\"><a href=\"#用户权限\" class=\"headerlink\" title=\"用户权限\"></a>用户权限</h3><p>系统分为四类用户，分别是</p>\n<ul>\n<li>系统管理员<ul>\n<li>批准用户注册申请</li>\n<li>删除用户</li>\n<li>重置用户密码</li>\n<li>管理测试SN</li>\n<li>管理Android版本</li>\n<li>管理版本类别</li>\n</ul>\n</li>\n</ul>","more":"<ul>\n<li><p>软件工程师</p>\n<ul>\n<li>新建版本</li>\n<li>修改版本</li>\n<li>上传固件包</li>\n<li>发布Alpha测试</li>\n</ul>\n</li>\n<li><p>测试工程师</p>\n<ul>\n<li>撤回Alpha测试</li>\n<li>发布Beta测试</li>\n</ul>\n</li>\n<li><p>运营工程师</p>\n<ul>\n<li>撤回Beta测试</li>\n<li>发布Release版本</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"系统管理员权限\"><a href=\"#系统管理员权限\" class=\"headerlink\" title=\"系统管理员权限\"></a>系统管理员权限</h4><ul>\n<li>批准用户注册申请<br>用户在OTA主界面注册成为OTA系统用户，注册时需要从以下列表选择一种身份：<ul>\n<li>软件工程师</li>\n<li>测试工程师</li>\n<li>运营工程师</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/be617eb7472b662e17af2c693abf6022859fe84604c503b38480a183386139a99b110736f96a163c855f3285fc2760a6?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=1523346231%281%29.png&amp;size=1024\" alt=\"\"></p>\n<p>管理员登录之后，在用户管理页面，可以批准或者删除用户的注册申请。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/27099809ab4a1b5194e22e59f458d34c927d7cc627fae348c9d3f1fe2b342abce0968f6c4c740a78cc51cece3d8a1189?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180410154736.png&amp;size=1024\" alt=\"\"></p>\n<ul>\n<li><p>删除用户 用户离职之后，管理员可以选择删除用户。</p>\n</li>\n<li><p>重置用户密码 用户忘记密码之后，管理员可以帮助用户重置用户密码。</p>\n</li>\n<li><p>管理测试SN 管理员可以添加SN号，用来标识对应的版本类别，如果勾选了Alpha，则可以进行Alpha版本状态下的版本升级；如果勾选了Beta，则可以进行Beta版本状态下的版本升级。</p>\n</li>\n<li><p>管理Android版本 管理员可以添加/删除Andriod版本，软件工程师可以从中选择一个版本。</p>\n</li>\n<li><p>管理版本类别 管理员可以添加/删除版本类别，一个版本类别标识一类终端产品，OTA会选择同一版本类别的更高的版本进行升级。</p>\n</li>\n</ul>\n<p><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/521e0ddaabd7cd53cdc0f5e1b4ff3864d74919bbe73f5682fa054c57b734ff14d81b3e1b0f2353339b9cf7f0c9d43f1b?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180410162612.png&amp;size=1024\" alt=\"\"></p>\n<h4 id=\"软件工程师权限\"><a href=\"#软件工程师权限\" class=\"headerlink\" title=\"软件工程师权限\"></a>软件工程师权限</h4><ul>\n<li><p>新建版本<br>软件工程师将版本编译出来之后，新建一个版本，需要填写如下信息：</p>\n<ul>\n<li>版本类别</li>\n<li>版本号</li>\n<li>版本描述</li>\n<li>Android版本</li>\n<li>更新记录</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/b3331a73196a0d3d630155832b3bea3249e262bc3fccb5736bd39ce05a86181f065e320f8f140000cc6698dac00c3f73?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180410164617.png&amp;size=1024\" alt=\"\"></p>\n<p>创建之后，跳转到版本列表界面<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/8f8b4b1d6e83a323fcc830f362fd2f2e3b50aefe50a1c1ffd0c80b6367d0899df72c2ee4732bef8420f2cbd240d3e09f?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180410164917.png&amp;size=1024\" alt=\"\"></p>\n<p>点击包管理，进入升级包上传界面<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/45c9173a9a48fed2a8a1fe11c36abad36691e158957ca97f01a4acbc005144b515c043cb3069677c5f8e9c6616a22aaa?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180410165043.png&amp;size=1024\" alt=\"\"></p>\n<p>上传完完整包和固件包。</p>\n<ul>\n<li><p>修改版本<br>软件工程师可以在新建状态下更改版本信息，但是不能修改版本类别和版本号。</p>\n</li>\n<li><p>发布Alpha测试<br>上传完固件包之后，回到版本列表界面，发布alpha测试。如果某台终端被允许Alpha测试，则会收到该版本的更新提示。</p>\n</li>\n</ul>\n<h4 id=\"测试工程师权限\"><a href=\"#测试工程师权限\" class=\"headerlink\" title=\"测试工程师权限\"></a>测试工程师权限</h4><ul>\n<li><p>撤回Alpha测试<br>若测试工程师在测试过程中发现问题，可以撤回到新建状态，要求软件工程师重新上传固件版本。</p>\n</li>\n<li><p>发布Beta测试<br>若测试工程师在Alpha测试过程中没有发现问题，则发布Beta测试。</p>\n</li>\n</ul>\n<h4 id=\"运营工程师权限\"><a href=\"#运营工程师权限\" class=\"headerlink\" title=\"运营工程师权限\"></a>运营工程师权限</h4><ul>\n<li><p>撤回Beta测试<br>如果测试过程中发现问题，可以由运营工程师撤回到Alpha测试状态，由测试工程师确认。</p>\n</li>\n<li><p>发布Release版本<br>如果Beta测试过程中发现问题，可以由运营工程师发布Release状态。</p>\n</li>\n</ul>\n<h3 id=\"版本状态说明\"><a href=\"#版本状态说明\" class=\"headerlink\" title=\"版本状态说明\"></a>版本状态说明</h3><p>版本的状态分为四个：</p>\n<ul>\n<li>新建状态 该状态下，可以修改版本信息，上传固件包。</li>\n<li>Alpha测试状态 该状态下，支持Alpha测试的终端将会收到版本提示。</li>\n<li>Beta测试状态 该状态下，支持Beta测试的终端将会收到版本提示。Beta测试状态与Alpha测试状态类似，Beta测试需要更多的终端设备验证。</li>\n<li>Release状态 该状态下，所有终端将会收到版本提示。</li>\n</ul>\n<p>版本状态迁移：</p>\n<p><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/f8279f93bdf2d68e2d599d0498b747cfe83430bbd7161ce4a39268a1156af75ff42effdec511f08e0dc4d6489e58dbbe?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=firmware_process.png&amp;size=1024\" alt=\"版本状态迁移：\"></p>\n<h3 id=\"异常操作\"><a href=\"#异常操作\" class=\"headerlink\" title=\"异常操作\"></a>异常操作</h3><ul>\n<li><p>如果某台终端，升级了某个Alpha版本或Beta版本，但是该版本最后被撤回，没有发布到Release状态，如何升级到后续版本？</p>\n<p>  此时不能进行差分包升级了，需要进行OTA全包升级。</p>\n</li>\n</ul>\n<h3 id=\"使用注意事项\"><a href=\"#使用注意事项\" class=\"headerlink\" title=\"使用注意事项\"></a>使用注意事项</h3><ul>\n<li>上传固件包时，完整包是必选的。</li>\n<li>与历史版本的差分包是可选的，然后终端有限选择差分包进行OTA升级，如果没有查询到差分包，则下载完整包。</li>\n</ul>"},{"title":"pm2启动参数加入环境变量","date":"2018-04-18T09:35:30.000Z","_content":"pm2用来管理nodejs应用的时候，可以简单的用命令行来启动，如:\n```bash\npm2 start ./ota_server/bin/www --name=ota-server\n```\n\n更常用的方法是将启动脚本配置成json，如:\n\n<!-- more -->\nstart.json\n```json\n{\n    app: [\n        {\n            name: \"ota-server\",\n            script: \"./ota_server/bin/www\",\n            watch: false,\n        }\n    ],\n}\n```\n\n如果你的项目package.json启动参数里面带了环境变量，比如：\n```json\n\"scripts\": {\n    \"start\"：\"cross-env NODE_ENV=production node ./bin/www\",\n    \"start-dev\": \"node ./bin/www\"\n}\n```\n\n这个时候可以在start.json里面加上相应的环境变量配置。\n\nstart.json\n```json\n{\n    app: [\n        {\n            name: \"ota-server\",\n            script: \"./ota_server/bin/www\",\n            watch: false,\n            env_prod: {\n                \"NODE_ENV\": \"production\",\n            },\n            env_dev: {\n                \"NODE_ENV\": \"development\",\n            }\n        }\n    ],\n}\n```\n\n然后用如下命令加入环境变量了：\n```bash\npm2 start start.json --env=prod\n```\n\n这样可以在代码里面这样应用环境变量：\n```javascript\n  domain: process.env.NODE_ENV === \"production\" ? 'http://ota.yinlijun.com' : 'http://yinlijun.viphk.ngrok.org',\n\n```","source":"_posts/pm2-load-environment.md","raw":"---\ntitle: pm2启动参数加入环境变量\ndate: 2018-04-18 17:35:30\ntags: [pm2, nodejs]\n---\npm2用来管理nodejs应用的时候，可以简单的用命令行来启动，如:\n```bash\npm2 start ./ota_server/bin/www --name=ota-server\n```\n\n更常用的方法是将启动脚本配置成json，如:\n\n<!-- more -->\nstart.json\n```json\n{\n    app: [\n        {\n            name: \"ota-server\",\n            script: \"./ota_server/bin/www\",\n            watch: false,\n        }\n    ],\n}\n```\n\n如果你的项目package.json启动参数里面带了环境变量，比如：\n```json\n\"scripts\": {\n    \"start\"：\"cross-env NODE_ENV=production node ./bin/www\",\n    \"start-dev\": \"node ./bin/www\"\n}\n```\n\n这个时候可以在start.json里面加上相应的环境变量配置。\n\nstart.json\n```json\n{\n    app: [\n        {\n            name: \"ota-server\",\n            script: \"./ota_server/bin/www\",\n            watch: false,\n            env_prod: {\n                \"NODE_ENV\": \"production\",\n            },\n            env_dev: {\n                \"NODE_ENV\": \"development\",\n            }\n        }\n    ],\n}\n```\n\n然后用如下命令加入环境变量了：\n```bash\npm2 start start.json --env=prod\n```\n\n这样可以在代码里面这样应用环境变量：\n```javascript\n  domain: process.env.NODE_ENV === \"production\" ? 'http://ota.yinlijun.com' : 'http://yinlijun.viphk.ngrok.org',\n\n```","slug":"pm2-load-environment","published":1,"updated":"2019-01-03T02:48:56.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aaneq001ubiuiydldmiwt","content":"<p>pm2用来管理nodejs应用的时候，可以简单的用命令行来启动，如:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start ./ota_server/bin/www --name=ota-server</span><br></pre></td></tr></table></figure></p>\n<p>更常用的方法是将启动脚本配置成json，如:</p>\n<a id=\"more\"></a>\n<p>start.json<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    app: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            name: \"ota-server\",</span><br><span class=\"line\">            script: \"./ota_server/bin/www\",</span><br><span class=\"line\">            watch: false,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果你的项目package.json启动参数里面带了环境变量，比如：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"start\"：\"cross-env NODE_ENV=production node ./bin/www\",</span><br><span class=\"line\">    \"start-dev\": \"node ./bin/www\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个时候可以在start.json里面加上相应的环境变量配置。</p>\n<p>start.json<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    app: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            name: \"ota-server\",</span><br><span class=\"line\">            script: \"./ota_server/bin/www\",</span><br><span class=\"line\">            watch: false,</span><br><span class=\"line\">            env_prod: &#123;</span><br><span class=\"line\">                \"NODE_ENV\": \"production\",</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            env_dev: &#123;</span><br><span class=\"line\">                \"NODE_ENV\": \"development\",</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后用如下命令加入环境变量了：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start start.json --env=prod</span><br></pre></td></tr></table></figure></p>\n<p>这样可以在代码里面这样应用环境变量：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">domain: process.env.NODE_ENV === <span class=\"string\">\"production\"</span> ? <span class=\"string\">'http://ota.yinlijun.com'</span> : <span class=\"string\">'http://yinlijun.viphk.ngrok.org'</span>,</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>pm2用来管理nodejs应用的时候，可以简单的用命令行来启动，如:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start ./ota_server/bin/www --name=ota-server</span><br></pre></td></tr></table></figure></p>\n<p>更常用的方法是将启动脚本配置成json，如:</p>","more":"<p>start.json<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    app: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            name: \"ota-server\",</span><br><span class=\"line\">            script: \"./ota_server/bin/www\",</span><br><span class=\"line\">            watch: false,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果你的项目package.json启动参数里面带了环境变量，比如：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"start\"：\"cross-env NODE_ENV=production node ./bin/www\",</span><br><span class=\"line\">    \"start-dev\": \"node ./bin/www\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个时候可以在start.json里面加上相应的环境变量配置。</p>\n<p>start.json<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    app: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            name: \"ota-server\",</span><br><span class=\"line\">            script: \"./ota_server/bin/www\",</span><br><span class=\"line\">            watch: false,</span><br><span class=\"line\">            env_prod: &#123;</span><br><span class=\"line\">                \"NODE_ENV\": \"production\",</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            env_dev: &#123;</span><br><span class=\"line\">                \"NODE_ENV\": \"development\",</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后用如下命令加入环境变量了：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start start.json --env=prod</span><br></pre></td></tr></table></figure></p>\n<p>这样可以在代码里面这样应用环境变量：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">domain: process.env.NODE_ENV === <span class=\"string\">\"production\"</span> ? <span class=\"string\">'http://ota.yinlijun.com'</span> : <span class=\"string\">'http://yinlijun.viphk.ngrok.org'</span>,</span><br></pre></td></tr></table></figure></p>"},{"title":"厉害的人是怎么分析问题的","date":"2019-04-03T09:02:07.000Z","_content":"\n最近看到一个话题《厉害的人是怎么分析问题的》，分析问题其实包含了几部分\n- 定位问题\n- 找出解决方案\n- 验证问题\n\n其中最重要最难的就是<b>定位问题</b>，最近刚好在工作中碰到一个复杂的问题，历经一个月的不断分析实验，终于找出了问题所在，确实走了很多弯路，于是自己做了一个复盘，在此总结一下。\n<!--more-->\n### 简化问题\n分析问题的第一步，就是简化问题，拿代码的bug来说，如果你写了一个库，库里面有很多的接口。这时候有个用户说，我用了你的库，你的库里面有个接口有问题。\n\n这个时候不推荐是直接拿用户的代码来测试，以为用户的代码里面，包含了用户自己的上下文和逻辑，最简单的办法，问用户传入的参数是什么，然后自己测试该接口，如果有问题，则可以定位到问题处在自己这里。\n\n如果单独测试接口没有出现问题，那么又有两种可能，一种是自己的接口调用的上下文有问题，比如某些接口有前置条件，而前置条件不满足，这是可以跟用户沟通接口调用的顺序，如果确实不满足，那也可以定位到问题。\n\n如果上面都没有问题，剩下一种可能，是用户自己代码的问题。\n\n不过现实情况可能要更复杂一些，比如，无法库作者和用户无法沟通，或者没有做实验的条件。分析问题的步骤大概如下：\n\n### 提取问题的变量\n变量，是问题上下文中的组成部分，而且是可以尝试改变的对象，对定位问题非常有用。对出现问题的场景进行分析，尤其对一切偶现的问题是非常重要的，变量包括了显式标准和隐式变量。\n\n- 显式变量\n\n    问题上下文中很容易找出，肉眼可见的变量。\n\n- 隐式变量\n\n    隐式变量是不可见的变量，有时需要专业人士才能找出来的变量。\n\n举个简单的例子来说:<b>我的手机在西乡家乐福有时候不能上网</b>，可以试着在这个简短的问题里面提取变量，\n\n#### 显式变量\n\n- 我的手机——设备\n- 西乡家乐福——地点\n- 上网——网络类型\n\n#### 隐含变量\n- SIM卡\n- APN\n- 基站\n\n\n### 找出变量的可能取值，并且保持单一变量原则\n\n- 设备\n    除了我的手机，可以用其他设备、比如别人的手机能不能上网等。\n\n- 地点\n    到别的地方看看能不能上网。\n\n- 上网\n    上网不行，上QQ行不行。\n\n- SIM卡\n    换张手机卡行不行。\n\n- APN\n    是不是APN设置有问题。\n\n- 基站\n    是不是这个地方基站有问题。\n\n\n保持单一变量，可以有效的简化问题的复杂度，更好的定位到问题。\n","source":"_posts/problem-anal.md","raw":"---\ntitle: 厉害的人是怎么分析问题的\ndate: 2019-04-03 17:02:07\ntags:\n---\n\n最近看到一个话题《厉害的人是怎么分析问题的》，分析问题其实包含了几部分\n- 定位问题\n- 找出解决方案\n- 验证问题\n\n其中最重要最难的就是<b>定位问题</b>，最近刚好在工作中碰到一个复杂的问题，历经一个月的不断分析实验，终于找出了问题所在，确实走了很多弯路，于是自己做了一个复盘，在此总结一下。\n<!--more-->\n### 简化问题\n分析问题的第一步，就是简化问题，拿代码的bug来说，如果你写了一个库，库里面有很多的接口。这时候有个用户说，我用了你的库，你的库里面有个接口有问题。\n\n这个时候不推荐是直接拿用户的代码来测试，以为用户的代码里面，包含了用户自己的上下文和逻辑，最简单的办法，问用户传入的参数是什么，然后自己测试该接口，如果有问题，则可以定位到问题处在自己这里。\n\n如果单独测试接口没有出现问题，那么又有两种可能，一种是自己的接口调用的上下文有问题，比如某些接口有前置条件，而前置条件不满足，这是可以跟用户沟通接口调用的顺序，如果确实不满足，那也可以定位到问题。\n\n如果上面都没有问题，剩下一种可能，是用户自己代码的问题。\n\n不过现实情况可能要更复杂一些，比如，无法库作者和用户无法沟通，或者没有做实验的条件。分析问题的步骤大概如下：\n\n### 提取问题的变量\n变量，是问题上下文中的组成部分，而且是可以尝试改变的对象，对定位问题非常有用。对出现问题的场景进行分析，尤其对一切偶现的问题是非常重要的，变量包括了显式标准和隐式变量。\n\n- 显式变量\n\n    问题上下文中很容易找出，肉眼可见的变量。\n\n- 隐式变量\n\n    隐式变量是不可见的变量，有时需要专业人士才能找出来的变量。\n\n举个简单的例子来说:<b>我的手机在西乡家乐福有时候不能上网</b>，可以试着在这个简短的问题里面提取变量，\n\n#### 显式变量\n\n- 我的手机——设备\n- 西乡家乐福——地点\n- 上网——网络类型\n\n#### 隐含变量\n- SIM卡\n- APN\n- 基站\n\n\n### 找出变量的可能取值，并且保持单一变量原则\n\n- 设备\n    除了我的手机，可以用其他设备、比如别人的手机能不能上网等。\n\n- 地点\n    到别的地方看看能不能上网。\n\n- 上网\n    上网不行，上QQ行不行。\n\n- SIM卡\n    换张手机卡行不行。\n\n- APN\n    是不是APN设置有问题。\n\n- 基站\n    是不是这个地方基站有问题。\n\n\n保持单一变量，可以有效的简化问题的复杂度，更好的定位到问题。\n","slug":"problem-anal","published":1,"updated":"2019-04-03T09:56:29.487Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aaner001xbiuiu415l4zl","content":"<p>最近看到一个话题《厉害的人是怎么分析问题的》，分析问题其实包含了几部分</p>\n<ul>\n<li>定位问题</li>\n<li>找出解决方案</li>\n<li>验证问题</li>\n</ul>\n<p>其中最重要最难的就是<b>定位问题</b>，最近刚好在工作中碰到一个复杂的问题，历经一个月的不断分析实验，终于找出了问题所在，确实走了很多弯路，于是自己做了一个复盘，在此总结一下。<br><a id=\"more\"></a></p>\n<h3 id=\"简化问题\"><a href=\"#简化问题\" class=\"headerlink\" title=\"简化问题\"></a>简化问题</h3><p>分析问题的第一步，就是简化问题，拿代码的bug来说，如果你写了一个库，库里面有很多的接口。这时候有个用户说，我用了你的库，你的库里面有个接口有问题。</p>\n<p>这个时候不推荐是直接拿用户的代码来测试，以为用户的代码里面，包含了用户自己的上下文和逻辑，最简单的办法，问用户传入的参数是什么，然后自己测试该接口，如果有问题，则可以定位到问题处在自己这里。</p>\n<p>如果单独测试接口没有出现问题，那么又有两种可能，一种是自己的接口调用的上下文有问题，比如某些接口有前置条件，而前置条件不满足，这是可以跟用户沟通接口调用的顺序，如果确实不满足，那也可以定位到问题。</p>\n<p>如果上面都没有问题，剩下一种可能，是用户自己代码的问题。</p>\n<p>不过现实情况可能要更复杂一些，比如，无法库作者和用户无法沟通，或者没有做实验的条件。分析问题的步骤大概如下：</p>\n<h3 id=\"提取问题的变量\"><a href=\"#提取问题的变量\" class=\"headerlink\" title=\"提取问题的变量\"></a>提取问题的变量</h3><p>变量，是问题上下文中的组成部分，而且是可以尝试改变的对象，对定位问题非常有用。对出现问题的场景进行分析，尤其对一切偶现的问题是非常重要的，变量包括了显式标准和隐式变量。</p>\n<ul>\n<li><p>显式变量</p>\n<p>  问题上下文中很容易找出，肉眼可见的变量。</p>\n</li>\n<li><p>隐式变量</p>\n<p>  隐式变量是不可见的变量，有时需要专业人士才能找出来的变量。</p>\n</li>\n</ul>\n<p>举个简单的例子来说:<b>我的手机在西乡家乐福有时候不能上网</b>，可以试着在这个简短的问题里面提取变量，</p>\n<h4 id=\"显式变量\"><a href=\"#显式变量\" class=\"headerlink\" title=\"显式变量\"></a>显式变量</h4><ul>\n<li>我的手机——设备</li>\n<li>西乡家乐福——地点</li>\n<li>上网——网络类型</li>\n</ul>\n<h4 id=\"隐含变量\"><a href=\"#隐含变量\" class=\"headerlink\" title=\"隐含变量\"></a>隐含变量</h4><ul>\n<li>SIM卡</li>\n<li>APN</li>\n<li>基站</li>\n</ul>\n<h3 id=\"找出变量的可能取值，并且保持单一变量原则\"><a href=\"#找出变量的可能取值，并且保持单一变量原则\" class=\"headerlink\" title=\"找出变量的可能取值，并且保持单一变量原则\"></a>找出变量的可能取值，并且保持单一变量原则</h3><ul>\n<li><p>设备<br>  除了我的手机，可以用其他设备、比如别人的手机能不能上网等。</p>\n</li>\n<li><p>地点<br>  到别的地方看看能不能上网。</p>\n</li>\n<li><p>上网<br>  上网不行，上QQ行不行。</p>\n</li>\n<li><p>SIM卡<br>  换张手机卡行不行。</p>\n</li>\n<li><p>APN<br>  是不是APN设置有问题。</p>\n</li>\n<li><p>基站<br>  是不是这个地方基站有问题。</p>\n</li>\n</ul>\n<p>保持单一变量，可以有效的简化问题的复杂度，更好的定位到问题。</p>\n","site":{"data":{}},"excerpt":"<p>最近看到一个话题《厉害的人是怎么分析问题的》，分析问题其实包含了几部分</p>\n<ul>\n<li>定位问题</li>\n<li>找出解决方案</li>\n<li>验证问题</li>\n</ul>\n<p>其中最重要最难的就是<b>定位问题</b>，最近刚好在工作中碰到一个复杂的问题，历经一个月的不断分析实验，终于找出了问题所在，确实走了很多弯路，于是自己做了一个复盘，在此总结一下。<br></p>","more":"<p></p>\n<h3 id=\"简化问题\"><a href=\"#简化问题\" class=\"headerlink\" title=\"简化问题\"></a>简化问题</h3><p>分析问题的第一步，就是简化问题，拿代码的bug来说，如果你写了一个库，库里面有很多的接口。这时候有个用户说，我用了你的库，你的库里面有个接口有问题。</p>\n<p>这个时候不推荐是直接拿用户的代码来测试，以为用户的代码里面，包含了用户自己的上下文和逻辑，最简单的办法，问用户传入的参数是什么，然后自己测试该接口，如果有问题，则可以定位到问题处在自己这里。</p>\n<p>如果单独测试接口没有出现问题，那么又有两种可能，一种是自己的接口调用的上下文有问题，比如某些接口有前置条件，而前置条件不满足，这是可以跟用户沟通接口调用的顺序，如果确实不满足，那也可以定位到问题。</p>\n<p>如果上面都没有问题，剩下一种可能，是用户自己代码的问题。</p>\n<p>不过现实情况可能要更复杂一些，比如，无法库作者和用户无法沟通，或者没有做实验的条件。分析问题的步骤大概如下：</p>\n<h3 id=\"提取问题的变量\"><a href=\"#提取问题的变量\" class=\"headerlink\" title=\"提取问题的变量\"></a>提取问题的变量</h3><p>变量，是问题上下文中的组成部分，而且是可以尝试改变的对象，对定位问题非常有用。对出现问题的场景进行分析，尤其对一切偶现的问题是非常重要的，变量包括了显式标准和隐式变量。</p>\n<ul>\n<li><p>显式变量</p>\n<p>  问题上下文中很容易找出，肉眼可见的变量。</p>\n</li>\n<li><p>隐式变量</p>\n<p>  隐式变量是不可见的变量，有时需要专业人士才能找出来的变量。</p>\n</li>\n</ul>\n<p>举个简单的例子来说:<b>我的手机在西乡家乐福有时候不能上网</b>，可以试着在这个简短的问题里面提取变量，</p>\n<h4 id=\"显式变量\"><a href=\"#显式变量\" class=\"headerlink\" title=\"显式变量\"></a>显式变量</h4><ul>\n<li>我的手机——设备</li>\n<li>西乡家乐福——地点</li>\n<li>上网——网络类型</li>\n</ul>\n<h4 id=\"隐含变量\"><a href=\"#隐含变量\" class=\"headerlink\" title=\"隐含变量\"></a>隐含变量</h4><ul>\n<li>SIM卡</li>\n<li>APN</li>\n<li>基站</li>\n</ul>\n<h3 id=\"找出变量的可能取值，并且保持单一变量原则\"><a href=\"#找出变量的可能取值，并且保持单一变量原则\" class=\"headerlink\" title=\"找出变量的可能取值，并且保持单一变量原则\"></a>找出变量的可能取值，并且保持单一变量原则</h3><ul>\n<li><p>设备<br>  除了我的手机，可以用其他设备、比如别人的手机能不能上网等。</p>\n</li>\n<li><p>地点<br>  到别的地方看看能不能上网。</p>\n</li>\n<li><p>上网<br>  上网不行，上QQ行不行。</p>\n</li>\n<li><p>SIM卡<br>  换张手机卡行不行。</p>\n</li>\n<li><p>APN<br>  是不是APN设置有问题。</p>\n</li>\n<li><p>基站<br>  是不是这个地方基站有问题。</p>\n</li>\n</ul>\n<p>保持单一变量，可以有效的简化问题的复杂度，更好的定位到问题。</p>"},{"title":"带进度条按钮的实现","date":"2018-04-20T11:34:08.000Z","_content":"\n写一个带进度条的按钮：[ProgressActionButton](https://github.com/yinlijun2004/ProgressActionButton)，支持外观定制。\n\n可以当单纯的进度条使用，也可以当单纯的按钮使用，还可以当带进度的按钮使用。\n\n主要难点就是实现椭圆按钮的绘制，思路就是，先绘制背景图片，再绘制前景图片，然后剪切一个圆角矩形出来。\n\n<!-- more -->\n\n```java\nprivate Bitmap drawRadiusBitmap(Bitmap bg, Bitmap fg, Rect rect, RectF rectF) {\n    Bitmap output = Bitmap.createBitmap(rect.width(), rect.height(), Bitmap.Config.ARGB_8888);\n    Canvas canvas = new Canvas(output);\n    int color = 0xff424242;\n    Paint paint = new Paint();\n    paint.setAntiAlias(true);\n    canvas.drawARGB(0, 0, 0, 0);\n    paint.setColor(color);\n\n    canvas.drawRoundRect(rectF, buttonRadius, buttonRadius, paint);\n    paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));\n    canvas.drawBitmap(bg, rect, rect, paint);\n    if(fg != null) {\n        Rect fgRect = new Rect(rect.left, rect.top, rect.left + (int) (rect.width() * progress / 100.0f), rect.bottom);\n        canvas.drawBitmap(fg, fgRect, fgRect, paint);\n    }\n\n    return output;\n}\n```\n\n支持定制属性：\n\n```xml\n<declare-styleable name=\"ProgressActionButton\">\n    <attr name=\"initBg\" format=\"reference\" />\n    <attr name=\"successBg\" format=\"reference\" />\n    <attr name=\"failBg\" format=\"reference\"/>\n    <attr name=\"progressBg\" format=\"reference\"/>\n    <attr name=\"progressFg\" format=\"reference\"/>\n    <attr name=\"disableBg\" format=\"reference\"/>\n    <attr name=\"buttonRadius\" format=\"dimension\"/>\n</declare-styleable>\n```\n\n用法：\n```xml\n<com.trendit.progressactionbutton.ProgressActionButton\n    android:id=\"@id/progress_bar\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"@dimen/progress_action_button_height\"\n    android:textSize=\"@dimen/progress_action_button_text_size\"\n    android:textColor=\"#DEFFFFFF\"\n    app:initBg=\"@drawable/default_progress_bg\"\n    />\n```\n","source":"_posts/progress-action-button-tutorial.md","raw":"---\ntitle: 带进度条按钮的实现\ndate: 2018-04-20 19:34:08\ntags: [android, button, progressbar]\n---\n\n写一个带进度条的按钮：[ProgressActionButton](https://github.com/yinlijun2004/ProgressActionButton)，支持外观定制。\n\n可以当单纯的进度条使用，也可以当单纯的按钮使用，还可以当带进度的按钮使用。\n\n主要难点就是实现椭圆按钮的绘制，思路就是，先绘制背景图片，再绘制前景图片，然后剪切一个圆角矩形出来。\n\n<!-- more -->\n\n```java\nprivate Bitmap drawRadiusBitmap(Bitmap bg, Bitmap fg, Rect rect, RectF rectF) {\n    Bitmap output = Bitmap.createBitmap(rect.width(), rect.height(), Bitmap.Config.ARGB_8888);\n    Canvas canvas = new Canvas(output);\n    int color = 0xff424242;\n    Paint paint = new Paint();\n    paint.setAntiAlias(true);\n    canvas.drawARGB(0, 0, 0, 0);\n    paint.setColor(color);\n\n    canvas.drawRoundRect(rectF, buttonRadius, buttonRadius, paint);\n    paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));\n    canvas.drawBitmap(bg, rect, rect, paint);\n    if(fg != null) {\n        Rect fgRect = new Rect(rect.left, rect.top, rect.left + (int) (rect.width() * progress / 100.0f), rect.bottom);\n        canvas.drawBitmap(fg, fgRect, fgRect, paint);\n    }\n\n    return output;\n}\n```\n\n支持定制属性：\n\n```xml\n<declare-styleable name=\"ProgressActionButton\">\n    <attr name=\"initBg\" format=\"reference\" />\n    <attr name=\"successBg\" format=\"reference\" />\n    <attr name=\"failBg\" format=\"reference\"/>\n    <attr name=\"progressBg\" format=\"reference\"/>\n    <attr name=\"progressFg\" format=\"reference\"/>\n    <attr name=\"disableBg\" format=\"reference\"/>\n    <attr name=\"buttonRadius\" format=\"dimension\"/>\n</declare-styleable>\n```\n\n用法：\n```xml\n<com.trendit.progressactionbutton.ProgressActionButton\n    android:id=\"@id/progress_bar\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"@dimen/progress_action_button_height\"\n    android:textSize=\"@dimen/progress_action_button_text_size\"\n    android:textColor=\"#DEFFFFFF\"\n    app:initBg=\"@drawable/default_progress_bg\"\n    />\n```\n","slug":"progress-action-button-tutorial","published":1,"updated":"2019-01-03T02:48:56.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aanet001zbiuih56yuxhq","content":"<p>写一个带进度条的按钮：<a href=\"https://github.com/yinlijun2004/ProgressActionButton\" target=\"_blank\" rel=\"noopener\">ProgressActionButton</a>，支持外观定制。</p>\n<p>可以当单纯的进度条使用，也可以当单纯的按钮使用，还可以当带进度的按钮使用。</p>\n<p>主要难点就是实现椭圆按钮的绘制，思路就是，先绘制背景图片，再绘制前景图片，然后剪切一个圆角矩形出来。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Bitmap <span class=\"title\">drawRadiusBitmap</span><span class=\"params\">(Bitmap bg, Bitmap fg, Rect rect, RectF rectF)</span> </span>&#123;</span><br><span class=\"line\">    Bitmap output = Bitmap.createBitmap(rect.width(), rect.height(), Bitmap.Config.ARGB_8888);</span><br><span class=\"line\">    Canvas canvas = <span class=\"keyword\">new</span> Canvas(output);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> color = <span class=\"number\">0xff424242</span>;</span><br><span class=\"line\">    Paint paint = <span class=\"keyword\">new</span> Paint();</span><br><span class=\"line\">    paint.setAntiAlias(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    canvas.drawARGB(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    paint.setColor(color);</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.drawRoundRect(rectF, buttonRadius, buttonRadius, paint);</span><br><span class=\"line\">    paint.setXfermode(<span class=\"keyword\">new</span> PorterDuffXfermode(PorterDuff.Mode.SRC_IN));</span><br><span class=\"line\">    canvas.drawBitmap(bg, rect, rect, paint);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fg != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        Rect fgRect = <span class=\"keyword\">new</span> Rect(rect.left, rect.top, rect.left + (<span class=\"keyword\">int</span>) (rect.width() * progress / <span class=\"number\">100.0f</span>), rect.bottom);</span><br><span class=\"line\">        canvas.drawBitmap(fg, fgRect, fgRect, paint);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> output;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>支持定制属性：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">declare-styleable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ProgressActionButton\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"initBg\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"reference\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"successBg\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"reference\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"failBg\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"reference\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"progressBg\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"reference\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"progressFg\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"reference\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"disableBg\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"reference\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"buttonRadius\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"dimension\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">declare-styleable</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>用法：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">com.trendit.progressactionbutton.ProgressActionButton</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@id/progress_bar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"@dimen/progress_action_button_height\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"@dimen/progress_action_button_text_size\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"#DEFFFFFF\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:initBg</span>=<span class=\"string\">\"@drawable/default_progress_bg\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>写一个带进度条的按钮：<a href=\"https://github.com/yinlijun2004/ProgressActionButton\" target=\"_blank\" rel=\"noopener\">ProgressActionButton</a>，支持外观定制。</p>\n<p>可以当单纯的进度条使用，也可以当单纯的按钮使用，还可以当带进度的按钮使用。</p>\n<p>主要难点就是实现椭圆按钮的绘制，思路就是，先绘制背景图片，再绘制前景图片，然后剪切一个圆角矩形出来。</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Bitmap <span class=\"title\">drawRadiusBitmap</span><span class=\"params\">(Bitmap bg, Bitmap fg, Rect rect, RectF rectF)</span> </span>&#123;</span><br><span class=\"line\">    Bitmap output = Bitmap.createBitmap(rect.width(), rect.height(), Bitmap.Config.ARGB_8888);</span><br><span class=\"line\">    Canvas canvas = <span class=\"keyword\">new</span> Canvas(output);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> color = <span class=\"number\">0xff424242</span>;</span><br><span class=\"line\">    Paint paint = <span class=\"keyword\">new</span> Paint();</span><br><span class=\"line\">    paint.setAntiAlias(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    canvas.drawARGB(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    paint.setColor(color);</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas.drawRoundRect(rectF, buttonRadius, buttonRadius, paint);</span><br><span class=\"line\">    paint.setXfermode(<span class=\"keyword\">new</span> PorterDuffXfermode(PorterDuff.Mode.SRC_IN));</span><br><span class=\"line\">    canvas.drawBitmap(bg, rect, rect, paint);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fg != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        Rect fgRect = <span class=\"keyword\">new</span> Rect(rect.left, rect.top, rect.left + (<span class=\"keyword\">int</span>) (rect.width() * progress / <span class=\"number\">100.0f</span>), rect.bottom);</span><br><span class=\"line\">        canvas.drawBitmap(fg, fgRect, fgRect, paint);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> output;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>支持定制属性：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">declare-styleable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ProgressActionButton\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"initBg\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"reference\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"successBg\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"reference\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"failBg\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"reference\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"progressBg\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"reference\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"progressFg\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"reference\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"disableBg\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"reference\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"buttonRadius\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"dimension\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">declare-styleable</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>用法：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">com.trendit.progressactionbutton.ProgressActionButton</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@id/progress_bar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"@dimen/progress_action_button_height\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"@dimen/progress_action_button_text_size\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"#DEFFFFFF\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:initBg</span>=<span class=\"string\">\"@drawable/default_progress_bg\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br></pre></td></tr></table></figure></p>"},{"title":"React组件生命周期","date":"2016-11-24T07:23:54.000Z","_content":"[原文链接](http://blog.flappyend.com/react-component-lifecycle/)\n\n## 实例化\n### 首次实例化\n\n- getDefaultProps\n- getInitialState\n- componentWillMount\n- render\n- componentDidMount\n\n<!--more-->\n\n### 实例化完成后的更新\n\ngetInitialState\ncomponentWillMount\nrender\ncomponentDidMount\n\n## 存在期\n\n### 组件已存在时的状态改变\n\n- componentWillReceiveProps\n- shouldComponentUpdate\n- componentWillUpdate\n- render\n- componentDidUpdate\n\n## 销毁&清理期\n- componentWillUnmount\n\n## 说明\n生命周期共提供了10个不同的API。\n\n1. getDefaultProps\n\n作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享。\n\n2. getInitialState\n\n作用于组件的实例，在实例创建时调用一次，用于初始化每个实例的state，此时可以访问this.props。\n\n3. componentWillMount\n\n在完成首次渲染之前调用，此时仍可以修改组件的state。\n\n4. render\n\n必选的方法，创建虚拟DOM，该方法具有特殊的规则：\n\n- 只能通过this.props和this.state访问数据\n- 可以返回null、false或任何React组件\n- 只能出现一个顶级组件（不能返回数组）\n- 不能改变组件的状态\n- 不能修改DOM的输出\n5. componentDidMount\n\n真实的DOM被渲染出来后调用，在该方法中可通过this.getDOMNode()访问到真实的DOM元素。此时已可以使用其他类库来操作这个DOM。\n\n*在服务端中，该方法不会被调用。*\n\n6. componentWillReceiveProps\n\n组件接收到新的props时调用，并将其作为参数nextProps使用，此时可以更改组件props及state。\n```javascript\n    componentWillReceiveProps: function(nextProps) {\n        if (nextProps.bool) {\n            this.setState({\n                bool: true\n            });\n        }\n    }\n```\n7. shouldComponentUpdate\n\n组件是否应当渲染新的props或state，返回false表示跳过后续的生命周期方法，通常不需要使用以避免出现bug。在出现应用的瓶颈时，可通过该方法进行适当的优化。\n\n*在首次渲染期间或者调用了forceUpdate方法后，该方法不会被调用*\n\n8. componentWillUpdate\n\n接收到新的props或者state后，进行渲染之前调用，此时不允许更新props或state。\n\n9. componentDidUpdate\n\n完成渲染新的props或者state后调用，此时可以访问到新的DOM元素。\n\n10. componentWillUnmount\n\n组件被移除之前被调用，可以用于做一些清理工作，在componentDidMount方法中添加的所有任务都需要在该方法中撤销，比如创建的定时器或添加的事件监听器。\n\n## 参考资料\n- React：引领未来的用户界面开发框架/寸志 范洪春 杨森 陈涌 译 -- 电子工业出版社\n- [Component Specs and Lifecycle190](https://facebook.github.io/react/docs/component-specs.html)","source":"_posts/react-lifecycle.md","raw":"---\ntitle: React组件生命周期\ndate: 2016-11-24 15:23:54\ntags: react\n---\n[原文链接](http://blog.flappyend.com/react-component-lifecycle/)\n\n## 实例化\n### 首次实例化\n\n- getDefaultProps\n- getInitialState\n- componentWillMount\n- render\n- componentDidMount\n\n<!--more-->\n\n### 实例化完成后的更新\n\ngetInitialState\ncomponentWillMount\nrender\ncomponentDidMount\n\n## 存在期\n\n### 组件已存在时的状态改变\n\n- componentWillReceiveProps\n- shouldComponentUpdate\n- componentWillUpdate\n- render\n- componentDidUpdate\n\n## 销毁&清理期\n- componentWillUnmount\n\n## 说明\n生命周期共提供了10个不同的API。\n\n1. getDefaultProps\n\n作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享。\n\n2. getInitialState\n\n作用于组件的实例，在实例创建时调用一次，用于初始化每个实例的state，此时可以访问this.props。\n\n3. componentWillMount\n\n在完成首次渲染之前调用，此时仍可以修改组件的state。\n\n4. render\n\n必选的方法，创建虚拟DOM，该方法具有特殊的规则：\n\n- 只能通过this.props和this.state访问数据\n- 可以返回null、false或任何React组件\n- 只能出现一个顶级组件（不能返回数组）\n- 不能改变组件的状态\n- 不能修改DOM的输出\n5. componentDidMount\n\n真实的DOM被渲染出来后调用，在该方法中可通过this.getDOMNode()访问到真实的DOM元素。此时已可以使用其他类库来操作这个DOM。\n\n*在服务端中，该方法不会被调用。*\n\n6. componentWillReceiveProps\n\n组件接收到新的props时调用，并将其作为参数nextProps使用，此时可以更改组件props及state。\n```javascript\n    componentWillReceiveProps: function(nextProps) {\n        if (nextProps.bool) {\n            this.setState({\n                bool: true\n            });\n        }\n    }\n```\n7. shouldComponentUpdate\n\n组件是否应当渲染新的props或state，返回false表示跳过后续的生命周期方法，通常不需要使用以避免出现bug。在出现应用的瓶颈时，可通过该方法进行适当的优化。\n\n*在首次渲染期间或者调用了forceUpdate方法后，该方法不会被调用*\n\n8. componentWillUpdate\n\n接收到新的props或者state后，进行渲染之前调用，此时不允许更新props或state。\n\n9. componentDidUpdate\n\n完成渲染新的props或者state后调用，此时可以访问到新的DOM元素。\n\n10. componentWillUnmount\n\n组件被移除之前被调用，可以用于做一些清理工作，在componentDidMount方法中添加的所有任务都需要在该方法中撤销，比如创建的定时器或添加的事件监听器。\n\n## 参考资料\n- React：引领未来的用户界面开发框架/寸志 范洪春 杨森 陈涌 译 -- 电子工业出版社\n- [Component Specs and Lifecycle190](https://facebook.github.io/react/docs/component-specs.html)","slug":"react-lifecycle","published":1,"updated":"2019-01-03T02:48:56.343Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aaneu0021biuiiyoswgoy","content":"<p><a href=\"http://blog.flappyend.com/react-component-lifecycle/\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<h2 id=\"实例化\"><a href=\"#实例化\" class=\"headerlink\" title=\"实例化\"></a>实例化</h2><h3 id=\"首次实例化\"><a href=\"#首次实例化\" class=\"headerlink\" title=\"首次实例化\"></a>首次实例化</h3><ul>\n<li>getDefaultProps</li>\n<li>getInitialState</li>\n<li>componentWillMount</li>\n<li>render</li>\n<li>componentDidMount</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"实例化完成后的更新\"><a href=\"#实例化完成后的更新\" class=\"headerlink\" title=\"实例化完成后的更新\"></a>实例化完成后的更新</h3><p>getInitialState<br>componentWillMount<br>render<br>componentDidMount</p>\n<h2 id=\"存在期\"><a href=\"#存在期\" class=\"headerlink\" title=\"存在期\"></a>存在期</h2><h3 id=\"组件已存在时的状态改变\"><a href=\"#组件已存在时的状态改变\" class=\"headerlink\" title=\"组件已存在时的状态改变\"></a>组件已存在时的状态改变</h3><ul>\n<li>componentWillReceiveProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n<li>render</li>\n<li>componentDidUpdate</li>\n</ul>\n<h2 id=\"销毁-amp-清理期\"><a href=\"#销毁-amp-清理期\" class=\"headerlink\" title=\"销毁&amp;清理期\"></a>销毁&amp;清理期</h2><ul>\n<li>componentWillUnmount</li>\n</ul>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>生命周期共提供了10个不同的API。</p>\n<ol>\n<li>getDefaultProps</li>\n</ol>\n<p>作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享。</p>\n<ol start=\"2\">\n<li>getInitialState</li>\n</ol>\n<p>作用于组件的实例，在实例创建时调用一次，用于初始化每个实例的state，此时可以访问this.props。</p>\n<ol start=\"3\">\n<li>componentWillMount</li>\n</ol>\n<p>在完成首次渲染之前调用，此时仍可以修改组件的state。</p>\n<ol start=\"4\">\n<li>render</li>\n</ol>\n<p>必选的方法，创建虚拟DOM，该方法具有特殊的规则：</p>\n<ul>\n<li>只能通过this.props和this.state访问数据</li>\n<li>可以返回null、false或任何React组件</li>\n<li>只能出现一个顶级组件（不能返回数组）</li>\n<li>不能改变组件的状态</li>\n<li>不能修改DOM的输出</li>\n</ul>\n<ol start=\"5\">\n<li>componentDidMount</li>\n</ol>\n<p>真实的DOM被渲染出来后调用，在该方法中可通过this.getDOMNode()访问到真实的DOM元素。此时已可以使用其他类库来操作这个DOM。</p>\n<p><em>在服务端中，该方法不会被调用。</em></p>\n<ol start=\"6\">\n<li>componentWillReceiveProps</li>\n</ol>\n<p>组件接收到新的props时调用，并将其作为参数nextProps使用，此时可以更改组件props及state。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentWillReceiveProps: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nextProps</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextProps.bool) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">            bool: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"7\">\n<li>shouldComponentUpdate</li>\n</ol>\n<p>组件是否应当渲染新的props或state，返回false表示跳过后续的生命周期方法，通常不需要使用以避免出现bug。在出现应用的瓶颈时，可通过该方法进行适当的优化。</p>\n<p><em>在首次渲染期间或者调用了forceUpdate方法后，该方法不会被调用</em></p>\n<ol start=\"8\">\n<li>componentWillUpdate</li>\n</ol>\n<p>接收到新的props或者state后，进行渲染之前调用，此时不允许更新props或state。</p>\n<ol start=\"9\">\n<li>componentDidUpdate</li>\n</ol>\n<p>完成渲染新的props或者state后调用，此时可以访问到新的DOM元素。</p>\n<ol start=\"10\">\n<li>componentWillUnmount</li>\n</ol>\n<p>组件被移除之前被调用，可以用于做一些清理工作，在componentDidMount方法中添加的所有任务都需要在该方法中撤销，比如创建的定时器或添加的事件监听器。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>React：引领未来的用户界面开发框架/寸志 范洪春 杨森 陈涌 译 – 电子工业出版社</li>\n<li><a href=\"https://facebook.github.io/react/docs/component-specs.html\" target=\"_blank\" rel=\"noopener\">Component Specs and Lifecycle190</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://blog.flappyend.com/react-component-lifecycle/\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<h2 id=\"实例化\"><a href=\"#实例化\" class=\"headerlink\" title=\"实例化\"></a>实例化</h2><h3 id=\"首次实例化\"><a href=\"#首次实例化\" class=\"headerlink\" title=\"首次实例化\"></a>首次实例化</h3><ul>\n<li>getDefaultProps</li>\n<li>getInitialState</li>\n<li>componentWillMount</li>\n<li>render</li>\n<li>componentDidMount</li>\n</ul>","more":"<h3 id=\"实例化完成后的更新\"><a href=\"#实例化完成后的更新\" class=\"headerlink\" title=\"实例化完成后的更新\"></a>实例化完成后的更新</h3><p>getInitialState<br>componentWillMount<br>render<br>componentDidMount</p>\n<h2 id=\"存在期\"><a href=\"#存在期\" class=\"headerlink\" title=\"存在期\"></a>存在期</h2><h3 id=\"组件已存在时的状态改变\"><a href=\"#组件已存在时的状态改变\" class=\"headerlink\" title=\"组件已存在时的状态改变\"></a>组件已存在时的状态改变</h3><ul>\n<li>componentWillReceiveProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n<li>render</li>\n<li>componentDidUpdate</li>\n</ul>\n<h2 id=\"销毁-amp-清理期\"><a href=\"#销毁-amp-清理期\" class=\"headerlink\" title=\"销毁&amp;清理期\"></a>销毁&amp;清理期</h2><ul>\n<li>componentWillUnmount</li>\n</ul>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>生命周期共提供了10个不同的API。</p>\n<ol>\n<li>getDefaultProps</li>\n</ol>\n<p>作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享。</p>\n<ol start=\"2\">\n<li>getInitialState</li>\n</ol>\n<p>作用于组件的实例，在实例创建时调用一次，用于初始化每个实例的state，此时可以访问this.props。</p>\n<ol start=\"3\">\n<li>componentWillMount</li>\n</ol>\n<p>在完成首次渲染之前调用，此时仍可以修改组件的state。</p>\n<ol start=\"4\">\n<li>render</li>\n</ol>\n<p>必选的方法，创建虚拟DOM，该方法具有特殊的规则：</p>\n<ul>\n<li>只能通过this.props和this.state访问数据</li>\n<li>可以返回null、false或任何React组件</li>\n<li>只能出现一个顶级组件（不能返回数组）</li>\n<li>不能改变组件的状态</li>\n<li>不能修改DOM的输出</li>\n</ul>\n<ol start=\"5\">\n<li>componentDidMount</li>\n</ol>\n<p>真实的DOM被渲染出来后调用，在该方法中可通过this.getDOMNode()访问到真实的DOM元素。此时已可以使用其他类库来操作这个DOM。</p>\n<p><em>在服务端中，该方法不会被调用。</em></p>\n<ol start=\"6\">\n<li>componentWillReceiveProps</li>\n</ol>\n<p>组件接收到新的props时调用，并将其作为参数nextProps使用，此时可以更改组件props及state。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentWillReceiveProps: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nextProps</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextProps.bool) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">            bool: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"7\">\n<li>shouldComponentUpdate</li>\n</ol>\n<p>组件是否应当渲染新的props或state，返回false表示跳过后续的生命周期方法，通常不需要使用以避免出现bug。在出现应用的瓶颈时，可通过该方法进行适当的优化。</p>\n<p><em>在首次渲染期间或者调用了forceUpdate方法后，该方法不会被调用</em></p>\n<ol start=\"8\">\n<li>componentWillUpdate</li>\n</ol>\n<p>接收到新的props或者state后，进行渲染之前调用，此时不允许更新props或state。</p>\n<ol start=\"9\">\n<li>componentDidUpdate</li>\n</ol>\n<p>完成渲染新的props或者state后调用，此时可以访问到新的DOM元素。</p>\n<ol start=\"10\">\n<li>componentWillUnmount</li>\n</ol>\n<p>组件被移除之前被调用，可以用于做一些清理工作，在componentDidMount方法中添加的所有任务都需要在该方法中撤销，比如创建的定时器或添加的事件监听器。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>React：引领未来的用户界面开发框架/寸志 范洪春 杨森 陈涌 译 – 电子工业出版社</li>\n<li><a href=\"https://facebook.github.io/react/docs/component-specs.html\" target=\"_blank\" rel=\"noopener\">Component Specs and Lifecycle190</a></li>\n</ul>"},{"title":"七牛存储空间别名创建","date":"2018-04-17T12:36:18.000Z","_content":"\n七牛的存储空间会提供一个默认的域名，用来访问里面的资源，但是这个域名使用是受限的，七牛会有如下提示：\n\n>测试域名\n>\n> 此类测试域名，限总流量，限单 IP 访问频率，限速，仅供测试使用，不能用于自定义域名的 CNAME 相关文档\n>\n> p71uhtys2.bkt.clouddn.com\n\n我们可以创建一个融合CDN加速域名指向这个空间。\n\n<!--more-->\n\n步骤如下：\n\n### 绑定域名\n在存储空间详情页面，点击立即绑定一个域名。\n![](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/5e9d840cd7942567816fd657772bfdbe28cd8d836eb51e630c0f3d8190e17406cff3244e7b2c7241768836c0ea7bc52f?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417204257.png&size=1024)\n\n进来之后，填写你要绑定的域名，和对应的存储空间。\n![](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/e17d5d729c824b0da89d182e7cc930735ece4e9ce6db44b5f81b268c715670598e07cf95b1f5ecb22f3e6052bdadd6f5?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417204544.png&size=1024)\n注意这个域名是要经过备案的，备案的经过我之前的文章{% post_link hexo-to-ali-ecs 部署HEXO博客到阿里云ECS %}有介绍过: 。\n\n其他的地方按需要填写，填写完之后拉到下面点创建按钮。\n\n然后会提示创建成功的消息。\n![](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/eaecffc8d117ed56fa2bf60a3e34017b538c25b556529d1f4d154609c76f740b5a6862e98a36b09feeb32e6e1c387ca8?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417204616.png&size=1024)\n\n然后再回去看，会看到CDN的状态变为等待CNAME。\n![](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/937e05f8155fb32f3193a7ad8ec7e131ba2637c5cebf6a3b6aeb2b2e995c5b461423102874ecb9e3cfe15957f30f20c8?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417205340.png&size=1024)\n\n### 添加域名解析\n因为我的域名是在阿里云申请的，需要到阿里云去填写域名解析信息。\n\n在云解析DNS界面，添加一条解析规则。\n![](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/2a13b25abc02dc6fe2ea0887557e72cf51918e4780c987217f2ece9dbfb83f3a6d2af12eb16e439c6e450601ade40159?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417205140.png&size=1024)\n\n记录值就填刚才的CNAME，主机记录就填二级域名。\n\n点击确认，等待十分钟，七牛那边的CDN状态就会变为成功。\n![](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/7c7094162ed066f451bfc9d7e12764a95a29ecd5e4b6ad3989008dacbc236df7f7394167c529aaf8b73bf01d326cd219?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417205804.png&size=1024)\n\n或者windows下可以用命令行查询解析是否成功。\n```bash\n$ nslookup -qt=mx qiniu.yinlijun.com\n▒▒Ȩ▒▒Ӧ▒▒:\n▒▒▒▒▒▒:  UnKnown\nAddress:  192.168.1.1\n\nqiniu.yinlijun.com      canonical name = qiniu.yinlijun.com.qiniudns.com\nqiniu.yinlijun.com.qiniudns.com canonical name = largeqiniu.b0.aicdn.com\nlargeqiniu.b0.aicdn.com canonical name = nm.aicdn.com\nnm.aicdn.com    canonical name = nm.ctn.aicdn.com\n\naicdn.com\n        primary name server = ns1.ialloc.com\n        responsible mail addr = wtzhu182.163.com\n        serial  = 2015102101\n        refresh = 3600 (1 hour)\n        retry   = 180 (3 mins)\n        expire  = 1209600 (14 days)\n        default TTL = 10800 (3 hours)\n```\n\n这样的话，可以在代码里面，用你自定义的域名，代替原先七牛提供的测试域名了。\n","source":"_posts/qiniu-create-bucket-cname.md","raw":"---\ntitle: 七牛存储空间别名创建\ndate: 2018-04-17 20:36:18\ntags: [qiniu, aliyun, ecs]\n---\n\n七牛的存储空间会提供一个默认的域名，用来访问里面的资源，但是这个域名使用是受限的，七牛会有如下提示：\n\n>测试域名\n>\n> 此类测试域名，限总流量，限单 IP 访问频率，限速，仅供测试使用，不能用于自定义域名的 CNAME 相关文档\n>\n> p71uhtys2.bkt.clouddn.com\n\n我们可以创建一个融合CDN加速域名指向这个空间。\n\n<!--more-->\n\n步骤如下：\n\n### 绑定域名\n在存储空间详情页面，点击立即绑定一个域名。\n![](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/5e9d840cd7942567816fd657772bfdbe28cd8d836eb51e630c0f3d8190e17406cff3244e7b2c7241768836c0ea7bc52f?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417204257.png&size=1024)\n\n进来之后，填写你要绑定的域名，和对应的存储空间。\n![](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/e17d5d729c824b0da89d182e7cc930735ece4e9ce6db44b5f81b268c715670598e07cf95b1f5ecb22f3e6052bdadd6f5?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417204544.png&size=1024)\n注意这个域名是要经过备案的，备案的经过我之前的文章{% post_link hexo-to-ali-ecs 部署HEXO博客到阿里云ECS %}有介绍过: 。\n\n其他的地方按需要填写，填写完之后拉到下面点创建按钮。\n\n然后会提示创建成功的消息。\n![](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/eaecffc8d117ed56fa2bf60a3e34017b538c25b556529d1f4d154609c76f740b5a6862e98a36b09feeb32e6e1c387ca8?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417204616.png&size=1024)\n\n然后再回去看，会看到CDN的状态变为等待CNAME。\n![](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/937e05f8155fb32f3193a7ad8ec7e131ba2637c5cebf6a3b6aeb2b2e995c5b461423102874ecb9e3cfe15957f30f20c8?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417205340.png&size=1024)\n\n### 添加域名解析\n因为我的域名是在阿里云申请的，需要到阿里云去填写域名解析信息。\n\n在云解析DNS界面，添加一条解析规则。\n![](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/2a13b25abc02dc6fe2ea0887557e72cf51918e4780c987217f2ece9dbfb83f3a6d2af12eb16e439c6e450601ade40159?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417205140.png&size=1024)\n\n记录值就填刚才的CNAME，主机记录就填二级域名。\n\n点击确认，等待十分钟，七牛那边的CDN状态就会变为成功。\n![](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/7c7094162ed066f451bfc9d7e12764a95a29ecd5e4b6ad3989008dacbc236df7f7394167c529aaf8b73bf01d326cd219?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417205804.png&size=1024)\n\n或者windows下可以用命令行查询解析是否成功。\n```bash\n$ nslookup -qt=mx qiniu.yinlijun.com\n▒▒Ȩ▒▒Ӧ▒▒:\n▒▒▒▒▒▒:  UnKnown\nAddress:  192.168.1.1\n\nqiniu.yinlijun.com      canonical name = qiniu.yinlijun.com.qiniudns.com\nqiniu.yinlijun.com.qiniudns.com canonical name = largeqiniu.b0.aicdn.com\nlargeqiniu.b0.aicdn.com canonical name = nm.aicdn.com\nnm.aicdn.com    canonical name = nm.ctn.aicdn.com\n\naicdn.com\n        primary name server = ns1.ialloc.com\n        responsible mail addr = wtzhu182.163.com\n        serial  = 2015102101\n        refresh = 3600 (1 hour)\n        retry   = 180 (3 mins)\n        expire  = 1209600 (14 days)\n        default TTL = 10800 (3 hours)\n```\n\n这样的话，可以在代码里面，用你自定义的域名，代替原先七牛提供的测试域名了。\n","slug":"qiniu-create-bucket-cname","published":1,"updated":"2019-01-03T02:48:56.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aanev0022biuia5cfrgvz","content":"<p>七牛的存储空间会提供一个默认的域名，用来访问里面的资源，但是这个域名使用是受限的，七牛会有如下提示：</p>\n<blockquote>\n<p>测试域名</p>\n<p>此类测试域名，限总流量，限单 IP 访问频率，限速，仅供测试使用，不能用于自定义域名的 CNAME 相关文档</p>\n<p>p71uhtys2.bkt.clouddn.com</p>\n</blockquote>\n<p>我们可以创建一个融合CDN加速域名指向这个空间。</p>\n<a id=\"more\"></a>\n<p>步骤如下：</p>\n<h3 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h3><p>在存储空间详情页面，点击立即绑定一个域名。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/5e9d840cd7942567816fd657772bfdbe28cd8d836eb51e630c0f3d8190e17406cff3244e7b2c7241768836c0ea7bc52f?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417204257.png&amp;size=1024\" alt=\"\"></p>\n<p>进来之后，填写你要绑定的域名，和对应的存储空间。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/e17d5d729c824b0da89d182e7cc930735ece4e9ce6db44b5f81b268c715670598e07cf95b1f5ecb22f3e6052bdadd6f5?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417204544.png&amp;size=1024\" alt=\"\"><br>注意这个域名是要经过备案的，备案的经过我之前的文章<a href=\"/2017/12/18/hexo-to-ali-ecs/\" title=\"部署HEXO博客到阿里云ECS\">部署HEXO博客到阿里云ECS</a>有介绍过: 。</p>\n<p>其他的地方按需要填写，填写完之后拉到下面点创建按钮。</p>\n<p>然后会提示创建成功的消息。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/eaecffc8d117ed56fa2bf60a3e34017b538c25b556529d1f4d154609c76f740b5a6862e98a36b09feeb32e6e1c387ca8?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417204616.png&amp;size=1024\" alt=\"\"></p>\n<p>然后再回去看，会看到CDN的状态变为等待CNAME。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/937e05f8155fb32f3193a7ad8ec7e131ba2637c5cebf6a3b6aeb2b2e995c5b461423102874ecb9e3cfe15957f30f20c8?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417205340.png&amp;size=1024\" alt=\"\"></p>\n<h3 id=\"添加域名解析\"><a href=\"#添加域名解析\" class=\"headerlink\" title=\"添加域名解析\"></a>添加域名解析</h3><p>因为我的域名是在阿里云申请的，需要到阿里云去填写域名解析信息。</p>\n<p>在云解析DNS界面，添加一条解析规则。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/2a13b25abc02dc6fe2ea0887557e72cf51918e4780c987217f2ece9dbfb83f3a6d2af12eb16e439c6e450601ade40159?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417205140.png&amp;size=1024\" alt=\"\"></p>\n<p>记录值就填刚才的CNAME，主机记录就填二级域名。</p>\n<p>点击确认，等待十分钟，七牛那边的CDN状态就会变为成功。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/7c7094162ed066f451bfc9d7e12764a95a29ecd5e4b6ad3989008dacbc236df7f7394167c529aaf8b73bf01d326cd219?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417205804.png&amp;size=1024\" alt=\"\"></p>\n<p>或者windows下可以用命令行查询解析是否成功。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nslookup -qt=mx qiniu.yinlijun.com</span><br><span class=\"line\">▒▒Ȩ▒▒Ӧ▒▒:</span><br><span class=\"line\">▒▒▒▒▒▒:  UnKnown</span><br><span class=\"line\">Address:  192.168.1.1</span><br><span class=\"line\"></span><br><span class=\"line\">qiniu.yinlijun.com      canonical name = qiniu.yinlijun.com.qiniudns.com</span><br><span class=\"line\">qiniu.yinlijun.com.qiniudns.com canonical name = largeqiniu.b0.aicdn.com</span><br><span class=\"line\">largeqiniu.b0.aicdn.com canonical name = nm.aicdn.com</span><br><span class=\"line\">nm.aicdn.com    canonical name = nm.ctn.aicdn.com</span><br><span class=\"line\"></span><br><span class=\"line\">aicdn.com</span><br><span class=\"line\">        primary name server = ns1.ialloc.com</span><br><span class=\"line\">        responsible mail addr = wtzhu182.163.com</span><br><span class=\"line\">        serial  = 2015102101</span><br><span class=\"line\">        refresh = 3600 (1 hour)</span><br><span class=\"line\">        retry   = 180 (3 mins)</span><br><span class=\"line\">        expire  = 1209600 (14 days)</span><br><span class=\"line\">        default TTL = 10800 (3 hours)</span><br></pre></td></tr></table></figure></p>\n<p>这样的话，可以在代码里面，用你自定义的域名，代替原先七牛提供的测试域名了。</p>\n","site":{"data":{}},"excerpt":"<p>七牛的存储空间会提供一个默认的域名，用来访问里面的资源，但是这个域名使用是受限的，七牛会有如下提示：</p>\n<blockquote>\n<p>测试域名</p>\n<p>此类测试域名，限总流量，限单 IP 访问频率，限速，仅供测试使用，不能用于自定义域名的 CNAME 相关文档</p>\n<p>p71uhtys2.bkt.clouddn.com</p>\n</blockquote>\n<p>我们可以创建一个融合CDN加速域名指向这个空间。</p>","more":"<p>步骤如下：</p>\n<h3 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h3><p>在存储空间详情页面，点击立即绑定一个域名。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/5e9d840cd7942567816fd657772bfdbe28cd8d836eb51e630c0f3d8190e17406cff3244e7b2c7241768836c0ea7bc52f?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417204257.png&amp;size=1024\" alt=\"\"></p>\n<p>进来之后，填写你要绑定的域名，和对应的存储空间。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/e17d5d729c824b0da89d182e7cc930735ece4e9ce6db44b5f81b268c715670598e07cf95b1f5ecb22f3e6052bdadd6f5?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417204544.png&amp;size=1024\" alt=\"\"><br>注意这个域名是要经过备案的，备案的经过我之前的文章<a href=\"/2017/12/18/hexo-to-ali-ecs/\" title=\"部署HEXO博客到阿里云ECS\">部署HEXO博客到阿里云ECS</a>有介绍过: 。</p>\n<p>其他的地方按需要填写，填写完之后拉到下面点创建按钮。</p>\n<p>然后会提示创建成功的消息。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/eaecffc8d117ed56fa2bf60a3e34017b538c25b556529d1f4d154609c76f740b5a6862e98a36b09feeb32e6e1c387ca8?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417204616.png&amp;size=1024\" alt=\"\"></p>\n<p>然后再回去看，会看到CDN的状态变为等待CNAME。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/937e05f8155fb32f3193a7ad8ec7e131ba2637c5cebf6a3b6aeb2b2e995c5b461423102874ecb9e3cfe15957f30f20c8?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417205340.png&amp;size=1024\" alt=\"\"></p>\n<h3 id=\"添加域名解析\"><a href=\"#添加域名解析\" class=\"headerlink\" title=\"添加域名解析\"></a>添加域名解析</h3><p>因为我的域名是在阿里云申请的，需要到阿里云去填写域名解析信息。</p>\n<p>在云解析DNS界面，添加一条解析规则。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/2a13b25abc02dc6fe2ea0887557e72cf51918e4780c987217f2ece9dbfb83f3a6d2af12eb16e439c6e450601ade40159?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417205140.png&amp;size=1024\" alt=\"\"></p>\n<p>记录值就填刚才的CNAME，主机记录就填二级域名。</p>\n<p>点击确认，等待十分钟，七牛那边的CDN状态就会变为成功。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/7c7094162ed066f451bfc9d7e12764a95a29ecd5e4b6ad3989008dacbc236df7f7394167c529aaf8b73bf01d326cd219?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417205804.png&amp;size=1024\" alt=\"\"></p>\n<p>或者windows下可以用命令行查询解析是否成功。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nslookup -qt=mx qiniu.yinlijun.com</span><br><span class=\"line\">▒▒Ȩ▒▒Ӧ▒▒:</span><br><span class=\"line\">▒▒▒▒▒▒:  UnKnown</span><br><span class=\"line\">Address:  192.168.1.1</span><br><span class=\"line\"></span><br><span class=\"line\">qiniu.yinlijun.com      canonical name = qiniu.yinlijun.com.qiniudns.com</span><br><span class=\"line\">qiniu.yinlijun.com.qiniudns.com canonical name = largeqiniu.b0.aicdn.com</span><br><span class=\"line\">largeqiniu.b0.aicdn.com canonical name = nm.aicdn.com</span><br><span class=\"line\">nm.aicdn.com    canonical name = nm.ctn.aicdn.com</span><br><span class=\"line\"></span><br><span class=\"line\">aicdn.com</span><br><span class=\"line\">        primary name server = ns1.ialloc.com</span><br><span class=\"line\">        responsible mail addr = wtzhu182.163.com</span><br><span class=\"line\">        serial  = 2015102101</span><br><span class=\"line\">        refresh = 3600 (1 hour)</span><br><span class=\"line\">        retry   = 180 (3 mins)</span><br><span class=\"line\">        expire  = 1209600 (14 days)</span><br><span class=\"line\">        default TTL = 10800 (3 hours)</span><br></pre></td></tr></table></figure></p>\n<p>这样的话，可以在代码里面，用你自定义的域名，代替原先七牛提供的测试域名了。</p>"},{"title":"BrowserRouter-react router 4.0.0 api中文文档","date":"2016-11-24T06:54:00.000Z","_content":"[原文链接](https://react-router.now.sh/BrowserRouter)\n\n<font size='6em'>&lt;BrowserRouter&gt;</font>\n\n保持你的界面与浏览器历史记录保持同步。\n```html5\n<BrowserRouter>\n  <App/>\n</BrowserRouter>\n```\n<!--more-->\n\n<font color='#FF0000'>basename</font>\n\n所有路由的根URL，如果你的应用处于服务端的子目录, 你可以设置这个值为该子目录。\n\n```html5\n<BrowserRouter basename=\"/calendar\" />\n\n// 假设Link标签如下所示：\n<Link to=\"/today\"/>\n// 那么超链接指向 \"/calendar/today\"\n</BrowserRouter>\n```\n<font size='6em'>&lt;/BrowserRouter&gt;</font>\n","source":"_posts/react-router-4-0-0-api-BrowserRouter.md","raw":"---\ntitle: BrowserRouter-react router 4.0.0 api中文文档\ndate: 2016-11-24 14:54:00\ntags: [react, react-router, 翻译文档]\ncategories: react router 4.0.0 api中文文档\n---\n[原文链接](https://react-router.now.sh/BrowserRouter)\n\n<font size='6em'>&lt;BrowserRouter&gt;</font>\n\n保持你的界面与浏览器历史记录保持同步。\n```html5\n<BrowserRouter>\n  <App/>\n</BrowserRouter>\n```\n<!--more-->\n\n<font color='#FF0000'>basename</font>\n\n所有路由的根URL，如果你的应用处于服务端的子目录, 你可以设置这个值为该子目录。\n\n```html5\n<BrowserRouter basename=\"/calendar\" />\n\n// 假设Link标签如下所示：\n<Link to=\"/today\"/>\n// 那么超链接指向 \"/calendar/today\"\n</BrowserRouter>\n```\n<font size='6em'>&lt;/BrowserRouter&gt;</font>\n","slug":"react-router-4-0-0-api-BrowserRouter","published":1,"updated":"2019-01-03T02:48:56.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aanew0025biui3kepjv8u","content":"<p><a href=\"https://react-router.now.sh/BrowserRouter\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<font size=\"6em\">&lt;BrowserRouter&gt;</font>\n\n<p>保持你的界面与浏览器历史记录保持同步。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;BrowserRouter&gt;</span><br><span class=\"line\">  &lt;App/&gt;</span><br><span class=\"line\">&lt;/BrowserRouter&gt;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<font color=\"#FF0000\">basename</font>\n\n<p>所有路由的根URL，如果你的应用处于服务端的子目录, 你可以设置这个值为该子目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;BrowserRouter basename=&quot;/calendar&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 假设Link标签如下所示：</span><br><span class=\"line\">&lt;Link to=&quot;/today&quot;/&gt;</span><br><span class=\"line\">// 那么超链接指向 &quot;/calendar/today&quot;</span><br><span class=\"line\">&lt;/BrowserRouter&gt;</span><br></pre></td></tr></table></figure>\n<font size=\"6em\">&lt;/BrowserRouter&gt;</font>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://react-router.now.sh/BrowserRouter\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<font size=\"6em\">&lt;BrowserRouter&gt;</font>\n\n<p>保持你的界面与浏览器历史记录保持同步。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;BrowserRouter&gt;</span><br><span class=\"line\">  &lt;App/&gt;</span><br><span class=\"line\">&lt;/BrowserRouter&gt;</span><br></pre></td></tr></table></figure></p>","more":"<font color=\"#FF0000\">basename</font>\n\n<p>所有路由的根URL，如果你的应用处于服务端的子目录, 你可以设置这个值为该子目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;BrowserRouter basename=&quot;/calendar&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 假设Link标签如下所示：</span><br><span class=\"line\">&lt;Link to=&quot;/today&quot;/&gt;</span><br><span class=\"line\">// 那么超链接指向 &quot;/calendar/today&quot;</span><br><span class=\"line\">&lt;/BrowserRouter&gt;</span><br></pre></td></tr></table></figure>\n<font size=\"6em\">&lt;/BrowserRouter&gt;</font>"},{"title":"Match-react router 4.0.0 api中文文档","date":"2016-11-25T05:05:50.000Z","_content":"[原文链接](https://react-router.now.sh/Match)\n\n<font size='1em'>&lt;Match&gt;</font>\n\n匹配到地址(location)时进行UI渲染\n\n### <font color='red'>pattern: string</font>\n\n任何[path-to-regexp](https://www.npmjs.com/package/path-to-regexp)可以理解的URL模式表达式\n```html\n<Match pattern=\"/users/:id\" component={User}/>\n```\n<!--more-->\n\n### <font color='red'>exactly: bool</font>\n\n当为true时，只有模式表达式严格匹配时，才算匹配上。\n\n| pattern |\tlocation.pathname | exactly? | matches? |\n| --- | :---: | :----: | :----: |\n| /foo | /foo/bar |\tyes |\tno\n| /foo | /foo/bar |\tno | yes\n```html\n<Match pattern=\"/foo\" exactly component={Foo}/>\n```\n\n### <font color='red'>location</font>\n\n如果你不想匹配上下文(context)中的地址(location)时，你可以传入一个location参数来替代。\n```html\n<Match pattern=\"/foo\" location={{ pathname: '/foo' }}/>\n```\n\n### <font color='red'>component</font>\n当匹配到地址时渲染的React组件，渲染该组件时，会传入如下属性(props)：\n- pattern: (string) 匹配表达式.\n- pathname: (string) 匹配后的路径.\n- isExact: (bool) 是否严格匹配 (v. partial).\n- location: 匹配到的location对象.\n- params: 根据匹配模式解析出来的参数\n\n如下所示：\n```javascript\nclass User extends React.Component {\n    render() {\n        const {params, pattern, pathname, isExact, location} = this.props;\n        return (<div>\n            <h2>User</h2>\n            <div>\n                location:{JSON.stringify(location)}\n                <br />\n                pattern:{pattern}\n                <br />\n                pathname:{pathname}\n                <br />\n                isExact:{isExact ? \"true\" : \"false\"}\n                <br />\n                params:{JSON.stringify(params, null, 2)}\n                <br />\n            </div>\n        </div>)\n    }\n}\n\n<Match pattern=\"/:user\" component={User}/>\n```\n效果如下\n```\nlocation:{\"pathname\":\"/kim\",\"search\":\"\",\"hash\":\"\",\"state\":null,\"query\":null,\"key\":\"a21zge\"}\npattern:/:user\npathname:/kim\nisExact:true\nparams:{ \"user\": \"kim\" }\n```\n\n### <font color='red'>render: func</font>\n\n相对于直接渲染一个组件，你可以之间传一个渲染函数，该函数被调用时，会传入组件一样的参数。\n\n这相当于提供了一种内联(inline rendering)渲染方式，或者对Match的封装(wrapping)。\n```javascript\n// 非常方便的内联渲染\n<Match pattern=\"/home\" render={() => <div>Home</div>}/>\n\n// 对Match进行封装\nconst MatchWithFade = ({ component:Component, ...rest }) => (\n  <Match {...rest} render={(matchProps) => (\n    <FadeIn>\n      <Component {...matchProps}/>\n    </FadeIn>\n  )}/>\n)\n\n<MatchWithFade pattern=\"/cool\" component={Something}/>\n```\n### <font color='red'>children: func</font>\n\n有时你可能需要根据匹配与否进行不同的渲染，这时，你可以使用children属性，它的类型为function，\n它的表现有点象render函数，但是有以下不同：\n \n(1) 不管有没有匹配上都会被调用。 \n\n(2) 回传递一个matched属性表示有没有被匹配上。\n\nIt seems unlikely you’ll need this for anything besides animating when a component transitions from matching to not matching and back, but who knows?\n\n```javascript\n<Match children={({ matched, ...rest}) => (\n  {/* 因为Animate 总是能被渲染，所以你可以利用组件的生命周期(lifecycle)来实现动画。*/}\n  <Animate>\n    {matched && (\n      <Something {...rest}/>\n    )}\n  </Animate>\n)}/>\n```\n<font size='6em'>&lt;/Match&gt;</font>","source":"_posts/react-router-4-0-0-api-Match.md","raw":"---\ntitle: Match-react router 4.0.0 api中文文档\ndate: 2016-11-25 13:05:50\ntags: [react, react-router, 翻译文档]\ncategories: react router 4.0.0 api中文文档\n---\n[原文链接](https://react-router.now.sh/Match)\n\n<font size='1em'>&lt;Match&gt;</font>\n\n匹配到地址(location)时进行UI渲染\n\n### <font color='red'>pattern: string</font>\n\n任何[path-to-regexp](https://www.npmjs.com/package/path-to-regexp)可以理解的URL模式表达式\n```html\n<Match pattern=\"/users/:id\" component={User}/>\n```\n<!--more-->\n\n### <font color='red'>exactly: bool</font>\n\n当为true时，只有模式表达式严格匹配时，才算匹配上。\n\n| pattern |\tlocation.pathname | exactly? | matches? |\n| --- | :---: | :----: | :----: |\n| /foo | /foo/bar |\tyes |\tno\n| /foo | /foo/bar |\tno | yes\n```html\n<Match pattern=\"/foo\" exactly component={Foo}/>\n```\n\n### <font color='red'>location</font>\n\n如果你不想匹配上下文(context)中的地址(location)时，你可以传入一个location参数来替代。\n```html\n<Match pattern=\"/foo\" location={{ pathname: '/foo' }}/>\n```\n\n### <font color='red'>component</font>\n当匹配到地址时渲染的React组件，渲染该组件时，会传入如下属性(props)：\n- pattern: (string) 匹配表达式.\n- pathname: (string) 匹配后的路径.\n- isExact: (bool) 是否严格匹配 (v. partial).\n- location: 匹配到的location对象.\n- params: 根据匹配模式解析出来的参数\n\n如下所示：\n```javascript\nclass User extends React.Component {\n    render() {\n        const {params, pattern, pathname, isExact, location} = this.props;\n        return (<div>\n            <h2>User</h2>\n            <div>\n                location:{JSON.stringify(location)}\n                <br />\n                pattern:{pattern}\n                <br />\n                pathname:{pathname}\n                <br />\n                isExact:{isExact ? \"true\" : \"false\"}\n                <br />\n                params:{JSON.stringify(params, null, 2)}\n                <br />\n            </div>\n        </div>)\n    }\n}\n\n<Match pattern=\"/:user\" component={User}/>\n```\n效果如下\n```\nlocation:{\"pathname\":\"/kim\",\"search\":\"\",\"hash\":\"\",\"state\":null,\"query\":null,\"key\":\"a21zge\"}\npattern:/:user\npathname:/kim\nisExact:true\nparams:{ \"user\": \"kim\" }\n```\n\n### <font color='red'>render: func</font>\n\n相对于直接渲染一个组件，你可以之间传一个渲染函数，该函数被调用时，会传入组件一样的参数。\n\n这相当于提供了一种内联(inline rendering)渲染方式，或者对Match的封装(wrapping)。\n```javascript\n// 非常方便的内联渲染\n<Match pattern=\"/home\" render={() => <div>Home</div>}/>\n\n// 对Match进行封装\nconst MatchWithFade = ({ component:Component, ...rest }) => (\n  <Match {...rest} render={(matchProps) => (\n    <FadeIn>\n      <Component {...matchProps}/>\n    </FadeIn>\n  )}/>\n)\n\n<MatchWithFade pattern=\"/cool\" component={Something}/>\n```\n### <font color='red'>children: func</font>\n\n有时你可能需要根据匹配与否进行不同的渲染，这时，你可以使用children属性，它的类型为function，\n它的表现有点象render函数，但是有以下不同：\n \n(1) 不管有没有匹配上都会被调用。 \n\n(2) 回传递一个matched属性表示有没有被匹配上。\n\nIt seems unlikely you’ll need this for anything besides animating when a component transitions from matching to not matching and back, but who knows?\n\n```javascript\n<Match children={({ matched, ...rest}) => (\n  {/* 因为Animate 总是能被渲染，所以你可以利用组件的生命周期(lifecycle)来实现动画。*/}\n  <Animate>\n    {matched && (\n      <Something {...rest}/>\n    )}\n  </Animate>\n)}/>\n```\n<font size='6em'>&lt;/Match&gt;</font>","slug":"react-router-4-0-0-api-Match","published":1,"updated":"2019-01-03T02:48:56.344Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aanew0027biuidxn7npm2","content":"<p><a href=\"https://react-router.now.sh/Match\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<font size=\"1em\">&lt;Match&gt;</font>\n\n<p>匹配到地址(location)时进行UI渲染</p>\n<h3 id=\"pattern-string\"><a href=\"#pattern-string\" class=\"headerlink\" title=\"pattern: string\"></a><font color=\"red\">pattern: string</font></h3><p>任何<a href=\"https://www.npmjs.com/package/path-to-regexp\" target=\"_blank\" rel=\"noopener\">path-to-regexp</a>可以理解的URL模式表达式<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Match</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/users/:id\"</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;User&#125;/</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"exactly-bool\"><a href=\"#exactly-bool\" class=\"headerlink\" title=\"exactly: bool\"></a><font color=\"red\">exactly: bool</font></h3><p>当为true时，只有模式表达式严格匹配时，才算匹配上。</p>\n<table>\n<thead>\n<tr>\n<th>pattern</th>\n<th style=\"text-align:center\">location.pathname</th>\n<th style=\"text-align:center\">exactly?</th>\n<th style=\"text-align:center\">matches?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/foo</td>\n<td style=\"text-align:center\">/foo/bar</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">no</td>\n</tr>\n<tr>\n<td>/foo</td>\n<td style=\"text-align:center\">/foo/bar</td>\n<td style=\"text-align:center\">no</td>\n<td style=\"text-align:center\">yes</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Match</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/foo\"</span> <span class=\"attr\">exactly</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Foo&#125;/</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a><font color=\"red\">location</font></h3><p>如果你不想匹配上下文(context)中的地址(location)时，你可以传入一个location参数来替代。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Match</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/foo\"</span> <span class=\"attr\">location</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">pathname:</span> '/<span class=\"attr\">foo</span>' &#125;&#125;/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"component\"><a href=\"#component\" class=\"headerlink\" title=\"component\"></a><font color=\"red\">component</font></h3><p>当匹配到地址时渲染的React组件，渲染该组件时，会传入如下属性(props)：</p>\n<ul>\n<li>pattern: (string) 匹配表达式.</li>\n<li>pathname: (string) 匹配后的路径.</li>\n<li>isExact: (bool) 是否严格匹配 (v. partial).</li>\n<li>location: 匹配到的location对象.</li>\n<li>params: 根据匹配模式解析出来的参数</li>\n</ul>\n<p>如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123;params, pattern, pathname, isExact, location&#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>User<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                location:&#123;JSON.stringify(location)&#125;</span><br><span class=\"line\">                &lt;br /&gt;</span><br><span class=\"line\">                pattern:&#123;pattern&#125;</span><br><span class=\"line\">                &lt;br /&gt;</span><br><span class=\"line\">                pathname:&#123;pathname&#125;</span><br><span class=\"line\">                &lt;br /&gt;</span><br><span class=\"line\">                isExact:&#123;isExact ? \"true\" : \"false\"&#125;</span><br><span class=\"line\">                &lt;br /&gt;</span><br><span class=\"line\">                params:&#123;JSON.stringify(params, null, 2)&#125;</span><br><span class=\"line\">                &lt;br /&gt;</span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Match pattern=<span class=\"string\">\"/:user\"</span> component=&#123;User&#125;/&gt;</span><br></pre></td></tr></table></figure></p>\n<p>效果如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location:&#123;&quot;pathname&quot;:&quot;/kim&quot;,&quot;search&quot;:&quot;&quot;,&quot;hash&quot;:&quot;&quot;,&quot;state&quot;:null,&quot;query&quot;:null,&quot;key&quot;:&quot;a21zge&quot;&#125;</span><br><span class=\"line\">pattern:/:user</span><br><span class=\"line\">pathname:/kim</span><br><span class=\"line\">isExact:true</span><br><span class=\"line\">params:&#123; &quot;user&quot;: &quot;kim&quot; &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"render-func\"><a href=\"#render-func\" class=\"headerlink\" title=\"render: func\"></a><font color=\"red\">render: func</font></h3><p>相对于直接渲染一个组件，你可以之间传一个渲染函数，该函数被调用时，会传入组件一样的参数。</p>\n<p>这相当于提供了一种内联(inline rendering)渲染方式，或者对Match的封装(wrapping)。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 非常方便的内联渲染</span></span><br><span class=\"line\">&lt;Match pattern=<span class=\"string\">\"/home\"</span> render=&#123;() =&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>&#125;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对Match进行封装</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> MatchWithFade = <span class=\"function\">(<span class=\"params\">&#123; component:Component, ...rest &#125;</span>) =&gt;</span> (</span><br><span class=\"line\">  &lt;Match &#123;...rest&#125; render=&#123;(matchProps) =&gt; (</span><br><span class=\"line\">    &lt;FadeIn&gt;</span><br><span class=\"line\">      &lt;Component &#123;...matchProps&#125;/&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/FadeIn&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )&#125;/</span>&gt;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;MatchWithFade pattern=<span class=\"string\">\"/cool\"</span> component=&#123;Something&#125;/&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"children-func\"><a href=\"#children-func\" class=\"headerlink\" title=\"children: func\"></a><font color=\"red\">children: func</font></h3><p>有时你可能需要根据匹配与否进行不同的渲染，这时，你可以使用children属性，它的类型为function，<br>它的表现有点象render函数，但是有以下不同：</p>\n<p>(1) 不管有没有匹配上都会被调用。 </p>\n<p>(2) 回传递一个matched属性表示有没有被匹配上。</p>\n<p>It seems unlikely you’ll need this for anything besides animating when a component transitions from matching to not matching and back, but who knows?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Match children=&#123;(&#123; matched, ...rest&#125;) =&gt; (</span><br><span class=\"line\">  &#123;<span class=\"comment\">/* 因为Animate 总是能被渲染，所以你可以利用组件的生命周期(lifecycle)来实现动画。*/</span>&#125;</span><br><span class=\"line\">  &lt;Animate&gt;</span><br><span class=\"line\">    &#123;matched &amp;&amp; (</span><br><span class=\"line\">      &lt;Something &#123;...rest&#125;/&gt;</span><br><span class=\"line\">    )&#125;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Animate&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">)&#125;/</span>&gt;</span><br></pre></td></tr></table></figure>\n<font size=\"6em\">&lt;/Match&gt;</font>","site":{"data":{}},"excerpt":"<p><a href=\"https://react-router.now.sh/Match\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<font size=\"1em\">&lt;Match&gt;</font>\n\n<p>匹配到地址(location)时进行UI渲染</p>\n<h3 id=\"pattern-string\"><a href=\"#pattern-string\" class=\"headerlink\" title=\"pattern: string\"></a><font color=\"red\">pattern: string</font></h3><p>任何<a href=\"https://www.npmjs.com/package/path-to-regexp\" target=\"_blank\" rel=\"noopener\">path-to-regexp</a>可以理解的URL模式表达式<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Match</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/users/:id\"</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;User&#125;/</span>&gt;</span></span><br></pre></td></tr></table></figure></p>","more":"<h3 id=\"exactly-bool\"><a href=\"#exactly-bool\" class=\"headerlink\" title=\"exactly: bool\"></a><font color=\"red\">exactly: bool</font></h3><p>当为true时，只有模式表达式严格匹配时，才算匹配上。</p>\n<table>\n<thead>\n<tr>\n<th>pattern</th>\n<th style=\"text-align:center\">location.pathname</th>\n<th style=\"text-align:center\">exactly?</th>\n<th style=\"text-align:center\">matches?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/foo</td>\n<td style=\"text-align:center\">/foo/bar</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">no</td>\n</tr>\n<tr>\n<td>/foo</td>\n<td style=\"text-align:center\">/foo/bar</td>\n<td style=\"text-align:center\">no</td>\n<td style=\"text-align:center\">yes</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Match</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/foo\"</span> <span class=\"attr\">exactly</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Foo&#125;/</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a><font color=\"red\">location</font></h3><p>如果你不想匹配上下文(context)中的地址(location)时，你可以传入一个location参数来替代。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Match</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/foo\"</span> <span class=\"attr\">location</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">pathname:</span> '/<span class=\"attr\">foo</span>' &#125;&#125;/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"component\"><a href=\"#component\" class=\"headerlink\" title=\"component\"></a><font color=\"red\">component</font></h3><p>当匹配到地址时渲染的React组件，渲染该组件时，会传入如下属性(props)：</p>\n<ul>\n<li>pattern: (string) 匹配表达式.</li>\n<li>pathname: (string) 匹配后的路径.</li>\n<li>isExact: (bool) 是否严格匹配 (v. partial).</li>\n<li>location: 匹配到的location对象.</li>\n<li>params: 根据匹配模式解析出来的参数</li>\n</ul>\n<p>如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123;params, pattern, pathname, isExact, location&#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>User<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                location:&#123;JSON.stringify(location)&#125;</span><br><span class=\"line\">                &lt;br /&gt;</span><br><span class=\"line\">                pattern:&#123;pattern&#125;</span><br><span class=\"line\">                &lt;br /&gt;</span><br><span class=\"line\">                pathname:&#123;pathname&#125;</span><br><span class=\"line\">                &lt;br /&gt;</span><br><span class=\"line\">                isExact:&#123;isExact ? \"true\" : \"false\"&#125;</span><br><span class=\"line\">                &lt;br /&gt;</span><br><span class=\"line\">                params:&#123;JSON.stringify(params, null, 2)&#125;</span><br><span class=\"line\">                &lt;br /&gt;</span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Match pattern=<span class=\"string\">\"/:user\"</span> component=&#123;User&#125;/&gt;</span><br></pre></td></tr></table></figure></p>\n<p>效果如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location:&#123;&quot;pathname&quot;:&quot;/kim&quot;,&quot;search&quot;:&quot;&quot;,&quot;hash&quot;:&quot;&quot;,&quot;state&quot;:null,&quot;query&quot;:null,&quot;key&quot;:&quot;a21zge&quot;&#125;</span><br><span class=\"line\">pattern:/:user</span><br><span class=\"line\">pathname:/kim</span><br><span class=\"line\">isExact:true</span><br><span class=\"line\">params:&#123; &quot;user&quot;: &quot;kim&quot; &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"render-func\"><a href=\"#render-func\" class=\"headerlink\" title=\"render: func\"></a><font color=\"red\">render: func</font></h3><p>相对于直接渲染一个组件，你可以之间传一个渲染函数，该函数被调用时，会传入组件一样的参数。</p>\n<p>这相当于提供了一种内联(inline rendering)渲染方式，或者对Match的封装(wrapping)。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 非常方便的内联渲染</span></span><br><span class=\"line\">&lt;Match pattern=<span class=\"string\">\"/home\"</span> render=&#123;() =&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>&#125;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对Match进行封装</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> MatchWithFade = <span class=\"function\">(<span class=\"params\">&#123; component:Component, ...rest &#125;</span>) =&gt;</span> (</span><br><span class=\"line\">  &lt;Match &#123;...rest&#125; render=&#123;(matchProps) =&gt; (</span><br><span class=\"line\">    &lt;FadeIn&gt;</span><br><span class=\"line\">      &lt;Component &#123;...matchProps&#125;/&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/FadeIn&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )&#125;/</span>&gt;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;MatchWithFade pattern=<span class=\"string\">\"/cool\"</span> component=&#123;Something&#125;/&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"children-func\"><a href=\"#children-func\" class=\"headerlink\" title=\"children: func\"></a><font color=\"red\">children: func</font></h3><p>有时你可能需要根据匹配与否进行不同的渲染，这时，你可以使用children属性，它的类型为function，<br>它的表现有点象render函数，但是有以下不同：</p>\n<p>(1) 不管有没有匹配上都会被调用。 </p>\n<p>(2) 回传递一个matched属性表示有没有被匹配上。</p>\n<p>It seems unlikely you’ll need this for anything besides animating when a component transitions from matching to not matching and back, but who knows?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Match children=&#123;(&#123; matched, ...rest&#125;) =&gt; (</span><br><span class=\"line\">  &#123;<span class=\"comment\">/* 因为Animate 总是能被渲染，所以你可以利用组件的生命周期(lifecycle)来实现动画。*/</span>&#125;</span><br><span class=\"line\">  &lt;Animate&gt;</span><br><span class=\"line\">    &#123;matched &amp;&amp; (</span><br><span class=\"line\">      &lt;Something &#123;...rest&#125;/&gt;</span><br><span class=\"line\">    )&#125;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Animate&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">)&#125;/</span>&gt;</span><br></pre></td></tr></table></figure>\n<font size=\"6em\">&lt;/Match&gt;</font>"},{"title":"Link-react router 4.0.0 api中文文档","date":"2016-11-29T06:18:08.000Z","_content":"\n[原文链接](https://react-router.now.sh/Link)\n\n<font size='6em'>&lt;Link&gt;</font>\n\n为你的应用提供可以声明的，可访问的导航功能。\n```javascript\n<Link to=\"/about\" activeClassName=\"active\">\n  About\n</Link>\n```\n\n<font color='red'>children: node | func</font>\n\nLink组件可以接受一个函数作为子控件，使得允许你使用自定义的组件渲染Link对象。\n\n<!-- more -->\n\n子控件函数的参数是一个对象，包含如下属性：\n- isActive: (bool) 当前链接是否激活\n- location: 传递给Link的链接\n- href: (string) 路由的url\n- onClick: (func) dom的onClick处理函数\n- transition: (func) 它是router.transitionTo的快捷方式，代表Link对象的to属性。\n```javascript\n<Link to=\"/courses\">{\n  ({isActive, location, href, onClick, transition}) => \n    <RaisedButton label=\"Courses\" onClick={onClick} primary={isActive} href={href} />\n}</Link>\n```\n\n<font color='red'>to: string | object</font>\n\n链接的描述。\n```\n<Link to=\"/courses\"/>\n<Link to={{\n  pathname: '/courses',\n  query: { sort: 'name' },\n  state: { fromDashboard: true }\n}}/>\n```\n\n<font color='red'>activeStyle: object</font>\n\n当链接匹配到<font color='grey' size='5em'>**to**</font>属性时的样式对象。它会和tyle对象合并之后生效。\n```\n<Link\n  to=\"/courses\"\n  style={{ color: 'blue', background: 'gray' }}\n  activeStyle={{ color: 'red' }}\n/>\n// 总是有灰色背景\n// 链接为/foo时字体为blue\n// 为/courses为red(激活状态)\n```\n\n<font color='red'>activeClassName: string</font>\n\n当匹配到链接时，生效的className。\n```javascript\n<Link\n  to=\"/courses\"\n  className=\"course-link\"\n  activeClassName=\"active\"\n/>\n// will always have \"course-link\"\n// at /courses it will be \"course-link active\"\n```\n\n<font color='red'>activeOnlyWhenExact: bool</font>\n\n为true时, 只有当严格匹配，activeClassName和activeStyle才会生效。\n\n```\n<Link to=\"/courses\" activeOnlyWhenExact activeClassName=\"active\"/>\n// /courses 被激活\n// /courses/123 不被激活\n```\n\n<font color='red'>isActive: func</font>\n\n允许自定义当前链接是否被激活，激活时返回true，否则返回false。\n```javascript\n<Link\n  to=\"/\"\n  activeStyle={{ color: 'red' }}\n  isActive={(location) => (\n    // 只有当没有query字段时被激活\n    !Object.keys(location.query).length\n  )}\n/>\n\n<Link\n  to=\"/courses\"\n  activeStyle={{ color: 'red' }}\n  isActive={(location, props) => (\n    // 匹配到\"/courses\" 或者 \"/course/123\"被激活\n    // 尽管这不是真正意义上的被激活, it is\n    // theoretically for the sake of a navigation menu\n    location.pathname.match(/course(s)?/)\n  )}\n/>\n```\n<font color='red'>location</font>\n\n如果你不想使用上下文中的location, 可以传递一个location的属性作为替代，这在链接比较深的redux应用中很有用。\n```\n<Match pattern=\"/foo\" location={this.props.location}/>\n```\n<font size='6em'>&lt;/Link&gt;</font>","source":"_posts/react-router-4-0-0-api-Link.md","raw":"---\ntitle: Link-react router 4.0.0 api中文文档\ntags:\n  - react\n  - react-router\n  - 翻译文档\ncategories: react router 4.0.0 api中文文档\ndate: 2016-11-29 14:18:08\n---\n\n[原文链接](https://react-router.now.sh/Link)\n\n<font size='6em'>&lt;Link&gt;</font>\n\n为你的应用提供可以声明的，可访问的导航功能。\n```javascript\n<Link to=\"/about\" activeClassName=\"active\">\n  About\n</Link>\n```\n\n<font color='red'>children: node | func</font>\n\nLink组件可以接受一个函数作为子控件，使得允许你使用自定义的组件渲染Link对象。\n\n<!-- more -->\n\n子控件函数的参数是一个对象，包含如下属性：\n- isActive: (bool) 当前链接是否激活\n- location: 传递给Link的链接\n- href: (string) 路由的url\n- onClick: (func) dom的onClick处理函数\n- transition: (func) 它是router.transitionTo的快捷方式，代表Link对象的to属性。\n```javascript\n<Link to=\"/courses\">{\n  ({isActive, location, href, onClick, transition}) => \n    <RaisedButton label=\"Courses\" onClick={onClick} primary={isActive} href={href} />\n}</Link>\n```\n\n<font color='red'>to: string | object</font>\n\n链接的描述。\n```\n<Link to=\"/courses\"/>\n<Link to={{\n  pathname: '/courses',\n  query: { sort: 'name' },\n  state: { fromDashboard: true }\n}}/>\n```\n\n<font color='red'>activeStyle: object</font>\n\n当链接匹配到<font color='grey' size='5em'>**to**</font>属性时的样式对象。它会和tyle对象合并之后生效。\n```\n<Link\n  to=\"/courses\"\n  style={{ color: 'blue', background: 'gray' }}\n  activeStyle={{ color: 'red' }}\n/>\n// 总是有灰色背景\n// 链接为/foo时字体为blue\n// 为/courses为red(激活状态)\n```\n\n<font color='red'>activeClassName: string</font>\n\n当匹配到链接时，生效的className。\n```javascript\n<Link\n  to=\"/courses\"\n  className=\"course-link\"\n  activeClassName=\"active\"\n/>\n// will always have \"course-link\"\n// at /courses it will be \"course-link active\"\n```\n\n<font color='red'>activeOnlyWhenExact: bool</font>\n\n为true时, 只有当严格匹配，activeClassName和activeStyle才会生效。\n\n```\n<Link to=\"/courses\" activeOnlyWhenExact activeClassName=\"active\"/>\n// /courses 被激活\n// /courses/123 不被激活\n```\n\n<font color='red'>isActive: func</font>\n\n允许自定义当前链接是否被激活，激活时返回true，否则返回false。\n```javascript\n<Link\n  to=\"/\"\n  activeStyle={{ color: 'red' }}\n  isActive={(location) => (\n    // 只有当没有query字段时被激活\n    !Object.keys(location.query).length\n  )}\n/>\n\n<Link\n  to=\"/courses\"\n  activeStyle={{ color: 'red' }}\n  isActive={(location, props) => (\n    // 匹配到\"/courses\" 或者 \"/course/123\"被激活\n    // 尽管这不是真正意义上的被激活, it is\n    // theoretically for the sake of a navigation menu\n    location.pathname.match(/course(s)?/)\n  )}\n/>\n```\n<font color='red'>location</font>\n\n如果你不想使用上下文中的location, 可以传递一个location的属性作为替代，这在链接比较深的redux应用中很有用。\n```\n<Match pattern=\"/foo\" location={this.props.location}/>\n```\n<font size='6em'>&lt;/Link&gt;</font>","slug":"react-router-4-0-0-api-Link","published":1,"updated":"2019-01-03T02:48:56.343Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aaney002abiuik1pl7yvk","content":"<p><a href=\"https://react-router.now.sh/Link\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<font size=\"6em\">&lt;Link&gt;</font>\n\n<p>为你的应用提供可以声明的，可访问的导航功能。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Link to=<span class=\"string\">\"/about\"</span> activeClassName=<span class=\"string\">\"active\"</span>&gt;</span><br><span class=\"line\">  About</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Link&gt;</span></span><br></pre></td></tr></table></figure></p>\n<font color=\"red\">children: node | func</font>\n\n<p>Link组件可以接受一个函数作为子控件，使得允许你使用自定义的组件渲染Link对象。</p>\n<a id=\"more\"></a>\n<p>子控件函数的参数是一个对象，包含如下属性：</p>\n<ul>\n<li>isActive: (bool) 当前链接是否激活</li>\n<li>location: 传递给Link的链接</li>\n<li>href: (string) 路由的url</li>\n<li>onClick: (func) dom的onClick处理函数</li>\n<li>transition: (func) 它是router.transitionTo的快捷方式，代表Link对象的to属性。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Link to=<span class=\"string\">\"/courses\"</span>&gt;&#123;</span><br><span class=\"line\">  (&#123;isActive, location, href, onClick, transition&#125;) =&gt; </span><br><span class=\"line\">    &lt;RaisedButton label=<span class=\"string\">\"Courses\"</span> onClick=&#123;onClick&#125; primary=&#123;isActive&#125; href=&#123;href&#125; /&gt;</span><br><span class=\"line\">&#125;&lt;<span class=\"regexp\">/Link&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<font color=\"red\">to: string | object</font>\n\n<p>链接的描述。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Link to=&quot;/courses&quot;/&gt;</span><br><span class=\"line\">&lt;Link to=&#123;&#123;</span><br><span class=\"line\">  pathname: &apos;/courses&apos;,</span><br><span class=\"line\">  query: &#123; sort: &apos;name&apos; &#125;,</span><br><span class=\"line\">  state: &#123; fromDashboard: true &#125;</span><br><span class=\"line\">&#125;&#125;/&gt;</span><br></pre></td></tr></table></figure></p>\n<font color=\"red\">activeStyle: object</font>\n\n<p>当链接匹配到<font color=\"grey\" size=\"5em\"><strong>to</strong></font>属性时的样式对象。它会和tyle对象合并之后生效。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Link</span><br><span class=\"line\">  to=&quot;/courses&quot;</span><br><span class=\"line\">  style=&#123;&#123; color: &apos;blue&apos;, background: &apos;gray&apos; &#125;&#125;</span><br><span class=\"line\">  activeStyle=&#123;&#123; color: &apos;red&apos; &#125;&#125;</span><br><span class=\"line\">/&gt;</span><br><span class=\"line\">// 总是有灰色背景</span><br><span class=\"line\">// 链接为/foo时字体为blue</span><br><span class=\"line\">// 为/courses为red(激活状态)</span><br></pre></td></tr></table></figure></p>\n<font color=\"red\">activeClassName: string</font>\n\n<p>当匹配到链接时，生效的className。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Link</span><br><span class=\"line\">  to=<span class=\"string\">\"/courses\"</span></span><br><span class=\"line\">  className=<span class=\"string\">\"course-link\"</span></span><br><span class=\"line\">  activeClassName=<span class=\"string\">\"active\"</span></span><br><span class=\"line\">/&gt;</span><br><span class=\"line\"><span class=\"comment\">// will always have \"course-link\"</span></span><br><span class=\"line\"><span class=\"comment\">// at /courses it will be \"course-link active\"</span></span><br></pre></td></tr></table></figure></p>\n<font color=\"red\">activeOnlyWhenExact: bool</font>\n\n<p>为true时, 只有当严格匹配，activeClassName和activeStyle才会生效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Link to=&quot;/courses&quot; activeOnlyWhenExact activeClassName=&quot;active&quot;/&gt;</span><br><span class=\"line\">// /courses 被激活</span><br><span class=\"line\">// /courses/123 不被激活</span><br></pre></td></tr></table></figure>\n<font color=\"red\">isActive: func</font>\n\n<p>允许自定义当前链接是否被激活，激活时返回true，否则返回false。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Link</span><br><span class=\"line\">  to=<span class=\"string\">\"/\"</span></span><br><span class=\"line\">  activeStyle=&#123;&#123; <span class=\"attr\">color</span>: <span class=\"string\">'red'</span> &#125;&#125;</span><br><span class=\"line\">  isActive=&#123;(location) =&gt; (</span><br><span class=\"line\">    <span class=\"comment\">// 只有当没有query字段时被激活</span></span><br><span class=\"line\">    !<span class=\"built_in\">Object</span>.keys(location.query).length</span><br><span class=\"line\">  )&#125;</span><br><span class=\"line\">/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Link</span><br><span class=\"line\">  to=<span class=\"string\">\"/courses\"</span></span><br><span class=\"line\">  activeStyle=&#123;&#123; <span class=\"attr\">color</span>: <span class=\"string\">'red'</span> &#125;&#125;</span><br><span class=\"line\">  isActive=&#123;(location, props) =&gt; (</span><br><span class=\"line\">    <span class=\"comment\">// 匹配到\"/courses\" 或者 \"/course/123\"被激活</span></span><br><span class=\"line\">    <span class=\"comment\">// 尽管这不是真正意义上的被激活, it is</span></span><br><span class=\"line\">    <span class=\"comment\">// theoretically for the sake of a navigation menu</span></span><br><span class=\"line\">    location.pathname.match(<span class=\"regexp\">/course(s)?/</span>)</span><br><span class=\"line\">  )&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure></p>\n<font color=\"red\">location</font>\n\n<p>如果你不想使用上下文中的location, 可以传递一个location的属性作为替代，这在链接比较深的redux应用中很有用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Match pattern=&quot;/foo&quot; location=&#123;this.props.location&#125;/&gt;</span><br></pre></td></tr></table></figure></p>\n<font size=\"6em\">&lt;/Link&gt;</font>","site":{"data":{}},"excerpt":"<p><a href=\"https://react-router.now.sh/Link\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<font size=\"6em\">&lt;Link&gt;</font>\n\n<p>为你的应用提供可以声明的，可访问的导航功能。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Link to=<span class=\"string\">\"/about\"</span> activeClassName=<span class=\"string\">\"active\"</span>&gt;</span><br><span class=\"line\">  About</span><br><span class=\"line\">&lt;<span class=\"regexp\">/Link&gt;</span></span><br></pre></td></tr></table></figure></p>\n<font color=\"red\">children: node | func</font>\n\n<p>Link组件可以接受一个函数作为子控件，使得允许你使用自定义的组件渲染Link对象。</p>","more":"<p>子控件函数的参数是一个对象，包含如下属性：</p>\n<ul>\n<li>isActive: (bool) 当前链接是否激活</li>\n<li>location: 传递给Link的链接</li>\n<li>href: (string) 路由的url</li>\n<li>onClick: (func) dom的onClick处理函数</li>\n<li>transition: (func) 它是router.transitionTo的快捷方式，代表Link对象的to属性。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Link to=<span class=\"string\">\"/courses\"</span>&gt;&#123;</span><br><span class=\"line\">  (&#123;isActive, location, href, onClick, transition&#125;) =&gt; </span><br><span class=\"line\">    &lt;RaisedButton label=<span class=\"string\">\"Courses\"</span> onClick=&#123;onClick&#125; primary=&#123;isActive&#125; href=&#123;href&#125; /&gt;</span><br><span class=\"line\">&#125;&lt;<span class=\"regexp\">/Link&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<font color=\"red\">to: string | object</font>\n\n<p>链接的描述。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Link to=&quot;/courses&quot;/&gt;</span><br><span class=\"line\">&lt;Link to=&#123;&#123;</span><br><span class=\"line\">  pathname: &apos;/courses&apos;,</span><br><span class=\"line\">  query: &#123; sort: &apos;name&apos; &#125;,</span><br><span class=\"line\">  state: &#123; fromDashboard: true &#125;</span><br><span class=\"line\">&#125;&#125;/&gt;</span><br></pre></td></tr></table></figure></p>\n<font color=\"red\">activeStyle: object</font>\n\n<p>当链接匹配到<font color=\"grey\" size=\"5em\"><strong>to</strong></font>属性时的样式对象。它会和tyle对象合并之后生效。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Link</span><br><span class=\"line\">  to=&quot;/courses&quot;</span><br><span class=\"line\">  style=&#123;&#123; color: &apos;blue&apos;, background: &apos;gray&apos; &#125;&#125;</span><br><span class=\"line\">  activeStyle=&#123;&#123; color: &apos;red&apos; &#125;&#125;</span><br><span class=\"line\">/&gt;</span><br><span class=\"line\">// 总是有灰色背景</span><br><span class=\"line\">// 链接为/foo时字体为blue</span><br><span class=\"line\">// 为/courses为red(激活状态)</span><br></pre></td></tr></table></figure></p>\n<font color=\"red\">activeClassName: string</font>\n\n<p>当匹配到链接时，生效的className。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Link</span><br><span class=\"line\">  to=<span class=\"string\">\"/courses\"</span></span><br><span class=\"line\">  className=<span class=\"string\">\"course-link\"</span></span><br><span class=\"line\">  activeClassName=<span class=\"string\">\"active\"</span></span><br><span class=\"line\">/&gt;</span><br><span class=\"line\"><span class=\"comment\">// will always have \"course-link\"</span></span><br><span class=\"line\"><span class=\"comment\">// at /courses it will be \"course-link active\"</span></span><br></pre></td></tr></table></figure></p>\n<font color=\"red\">activeOnlyWhenExact: bool</font>\n\n<p>为true时, 只有当严格匹配，activeClassName和activeStyle才会生效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Link to=&quot;/courses&quot; activeOnlyWhenExact activeClassName=&quot;active&quot;/&gt;</span><br><span class=\"line\">// /courses 被激活</span><br><span class=\"line\">// /courses/123 不被激活</span><br></pre></td></tr></table></figure>\n<font color=\"red\">isActive: func</font>\n\n<p>允许自定义当前链接是否被激活，激活时返回true，否则返回false。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Link</span><br><span class=\"line\">  to=<span class=\"string\">\"/\"</span></span><br><span class=\"line\">  activeStyle=&#123;&#123; <span class=\"attr\">color</span>: <span class=\"string\">'red'</span> &#125;&#125;</span><br><span class=\"line\">  isActive=&#123;(location) =&gt; (</span><br><span class=\"line\">    <span class=\"comment\">// 只有当没有query字段时被激活</span></span><br><span class=\"line\">    !<span class=\"built_in\">Object</span>.keys(location.query).length</span><br><span class=\"line\">  )&#125;</span><br><span class=\"line\">/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Link</span><br><span class=\"line\">  to=<span class=\"string\">\"/courses\"</span></span><br><span class=\"line\">  activeStyle=&#123;&#123; <span class=\"attr\">color</span>: <span class=\"string\">'red'</span> &#125;&#125;</span><br><span class=\"line\">  isActive=&#123;(location, props) =&gt; (</span><br><span class=\"line\">    <span class=\"comment\">// 匹配到\"/courses\" 或者 \"/course/123\"被激活</span></span><br><span class=\"line\">    <span class=\"comment\">// 尽管这不是真正意义上的被激活, it is</span></span><br><span class=\"line\">    <span class=\"comment\">// theoretically for the sake of a navigation menu</span></span><br><span class=\"line\">    location.pathname.match(<span class=\"regexp\">/course(s)?/</span>)</span><br><span class=\"line\">  )&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure></p>\n<font color=\"red\">location</font>\n\n<p>如果你不想使用上下文中的location, 可以传递一个location的属性作为替代，这在链接比较深的redux应用中很有用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Match pattern=&quot;/foo&quot; location=&#123;this.props.location&#125;/&gt;</span><br></pre></td></tr></table></figure></p>\n<font size=\"6em\">&lt;/Link&gt;</font>"},{"title":"Miss-react router 4.0.0 api中文文档","date":"2016-11-29T05:55:49.000Z","_content":"[原文链接](https://react-router.now.sh/Miss)\n\n<font size='6em'>&lt;Miss&gt;</font>\n\n当没有匹配到当前的地址时，将会渲染Miss。\n```javascript\nconst App = () => (\n  <Router>\n    <Match pattern=\"/foo\"/>\n    <Match pattern=\"/bar\"/>\n    <Miss component={NoMatch}/>\n  </Router>\n)\n\nconst NoMatch = ({ location }) => (\n  <div>Nothing matched {location.pathname}.</div>\n)\n```\n<!-- more -->\n### <font color='red'>component</font>\n跟Match一样的，表示将要渲染的组建，但是不同的是只有location一个prop传进去。\n```\n<Miss component={NoMatch}/>\n```\n### <font color=red>render: func</font>\n\n跟Match一样的，可以提供一个渲染函数，同样，也只有location一个prop传进去。\n```\n<Miss render={({ location }) => (\n  <div>Nothing matched {location.pathname}.</div>\n)}/>\n```\n<font size='6em'>&lt;/Miss&gt;<font>","source":"_posts/react-router-4-0-0-api-Miss.md","raw":"---\ntitle: Miss-react router 4.0.0 api中文文档\ndate: 2016-11-29 13:55:49\ntags: [react, react-router, 翻译文档]\ncategories: react router 4.0.0 api中文文档\n---\n[原文链接](https://react-router.now.sh/Miss)\n\n<font size='6em'>&lt;Miss&gt;</font>\n\n当没有匹配到当前的地址时，将会渲染Miss。\n```javascript\nconst App = () => (\n  <Router>\n    <Match pattern=\"/foo\"/>\n    <Match pattern=\"/bar\"/>\n    <Miss component={NoMatch}/>\n  </Router>\n)\n\nconst NoMatch = ({ location }) => (\n  <div>Nothing matched {location.pathname}.</div>\n)\n```\n<!-- more -->\n### <font color='red'>component</font>\n跟Match一样的，表示将要渲染的组建，但是不同的是只有location一个prop传进去。\n```\n<Miss component={NoMatch}/>\n```\n### <font color=red>render: func</font>\n\n跟Match一样的，可以提供一个渲染函数，同样，也只有location一个prop传进去。\n```\n<Miss render={({ location }) => (\n  <div>Nothing matched {location.pathname}.</div>\n)}/>\n```\n<font size='6em'>&lt;/Miss&gt;<font>","slug":"react-router-4-0-0-api-Miss","published":1,"updated":"2019-01-03T02:48:56.348Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aanez002cbiuig6bek9yu","content":"<p><a href=\"https://react-router.now.sh/Miss\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<font size=\"6em\">&lt;Miss&gt;</font>\n\n<p>当没有匹配到当前的地址时，将会渲染Miss。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (</span><br><span class=\"line\">  &lt;Router&gt;</span><br><span class=\"line\">    &lt;Match pattern=<span class=\"string\">\"/foo\"</span>/&gt;</span><br><span class=\"line\">    &lt;Match pattern=<span class=\"string\">\"/bar\"</span>/&gt;</span><br><span class=\"line\">    &lt;Miss component=&#123;NoMatch&#125;/&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Router&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">)</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const NoMatch = (&#123; location &#125;) =&gt; (</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;div&gt;Nothing matched &#123;location.pathname&#125;.&lt;/</span>div&gt;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"component\"><a href=\"#component\" class=\"headerlink\" title=\"component\"></a><font color=\"red\">component</font></h3><p>跟Match一样的，表示将要渲染的组建，但是不同的是只有location一个prop传进去。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Miss component=&#123;NoMatch&#125;/&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"render-func\"><a href=\"#render-func\" class=\"headerlink\" title=\"render: func\"></a><font color=\"red\">render: func</font></h3><p>跟Match一样的，可以提供一个渲染函数，同样，也只有location一个prop传进去。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Miss render=&#123;(&#123; location &#125;) =&gt; (</span><br><span class=\"line\">  &lt;div&gt;Nothing matched &#123;location.pathname&#125;.&lt;/div&gt;</span><br><span class=\"line\">)&#125;/&gt;</span><br></pre></td></tr></table></figure></p>\n<p><font size=\"6em\">&lt;/Miss&gt;<font></font></font></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://react-router.now.sh/Miss\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<font size=\"6em\">&lt;Miss&gt;</font>\n\n<p>当没有匹配到当前的地址时，将会渲染Miss。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (</span><br><span class=\"line\">  &lt;Router&gt;</span><br><span class=\"line\">    &lt;Match pattern=<span class=\"string\">\"/foo\"</span>/&gt;</span><br><span class=\"line\">    &lt;Match pattern=<span class=\"string\">\"/bar\"</span>/&gt;</span><br><span class=\"line\">    &lt;Miss component=&#123;NoMatch&#125;/&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Router&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">)</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const NoMatch = (&#123; location &#125;) =&gt; (</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;div&gt;Nothing matched &#123;location.pathname&#125;.&lt;/</span>div&gt;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>","more":"<h3 id=\"component\"><a href=\"#component\" class=\"headerlink\" title=\"component\"></a><font color=\"red\">component</font></h3><p>跟Match一样的，表示将要渲染的组建，但是不同的是只有location一个prop传进去。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Miss component=&#123;NoMatch&#125;/&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"render-func\"><a href=\"#render-func\" class=\"headerlink\" title=\"render: func\"></a><font color=\"red\">render: func</font></h3><p>跟Match一样的，可以提供一个渲染函数，同样，也只有location一个prop传进去。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Miss render=&#123;(&#123; location &#125;) =&gt; (</span><br><span class=\"line\">  &lt;div&gt;Nothing matched &#123;location.pathname&#125;.&lt;/div&gt;</span><br><span class=\"line\">)&#125;/&gt;</span><br></pre></td></tr></table></figure></p>\n<p><font size=\"6em\">&lt;/Miss&gt;<font></font></font></p>"},{"title":"BrowserRouter-react router 4.0.0 api中文文档","date":"2016-11-24T06:54:00.000Z","catagarys":"react router 4.0.0 api中文文档","_content":"\n\n[原文链接](https://react-router.now.sh/BrowserRouter)\n\n<font size='5em'>&lt;BrowserRouter&gt;</font>\n\n保持你的界面与浏览器历史记录保持同步。\n```html5\n<BrowserRouter>\n  <App/>\n</BrowserRouter>\n```\n<!--more-->\n\n<font color='#FF0000'>basename</font>\n\n所有路由的根URL，如果你的应用处于服务端的子目录, 你可以设置这个值为该子目录。\n\n```html5\n<BrowserRouter basename=\"/calendar\" />\n\n// 假设Link标签如下所示：\n<Link to=\"/today\"/>\n// 那么超链接指向 \"/calendar/today\"\n</BrowserRouter>\n```\n<font size='5em'>&lt;/BrowserRouter&gt;</font>\n","source":"_posts/react-router-4-0-0-api.md","raw":"---\ntitle: BrowserRouter-react router 4.0.0 api中文文档\ndate: 2016-11-24 14:54:00\ntags: [react, react-router, 翻译文档]\ncatagarys: react router 4.0.0 api中文文档\n---\n\n\n[原文链接](https://react-router.now.sh/BrowserRouter)\n\n<font size='5em'>&lt;BrowserRouter&gt;</font>\n\n保持你的界面与浏览器历史记录保持同步。\n```html5\n<BrowserRouter>\n  <App/>\n</BrowserRouter>\n```\n<!--more-->\n\n<font color='#FF0000'>basename</font>\n\n所有路由的根URL，如果你的应用处于服务端的子目录, 你可以设置这个值为该子目录。\n\n```html5\n<BrowserRouter basename=\"/calendar\" />\n\n// 假设Link标签如下所示：\n<Link to=\"/today\"/>\n// 那么超链接指向 \"/calendar/today\"\n</BrowserRouter>\n```\n<font size='5em'>&lt;/BrowserRouter&gt;</font>\n","slug":"react-router-4-0-0-api","published":1,"updated":"2019-01-03T02:48:56.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aanf0002dbiuipi7eiqs9","content":"<p><a href=\"https://react-router.now.sh/BrowserRouter\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<font size=\"5em\">&lt;BrowserRouter&gt;</font>\n\n<p>保持你的界面与浏览器历史记录保持同步。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;BrowserRouter&gt;</span><br><span class=\"line\">  &lt;App/&gt;</span><br><span class=\"line\">&lt;/BrowserRouter&gt;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<font color=\"#FF0000\">basename</font>\n\n<p>所有路由的根URL，如果你的应用处于服务端的子目录, 你可以设置这个值为该子目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;BrowserRouter basename=&quot;/calendar&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 假设Link标签如下所示：</span><br><span class=\"line\">&lt;Link to=&quot;/today&quot;/&gt;</span><br><span class=\"line\">// 那么超链接指向 &quot;/calendar/today&quot;</span><br><span class=\"line\">&lt;/BrowserRouter&gt;</span><br></pre></td></tr></table></figure>\n<font size=\"5em\">&lt;/BrowserRouter&gt;</font>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://react-router.now.sh/BrowserRouter\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<font size=\"5em\">&lt;BrowserRouter&gt;</font>\n\n<p>保持你的界面与浏览器历史记录保持同步。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;BrowserRouter&gt;</span><br><span class=\"line\">  &lt;App/&gt;</span><br><span class=\"line\">&lt;/BrowserRouter&gt;</span><br></pre></td></tr></table></figure></p>","more":"<font color=\"#FF0000\">basename</font>\n\n<p>所有路由的根URL，如果你的应用处于服务端的子目录, 你可以设置这个值为该子目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;BrowserRouter basename=&quot;/calendar&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 假设Link标签如下所示：</span><br><span class=\"line\">&lt;Link to=&quot;/today&quot;/&gt;</span><br><span class=\"line\">// 那么超链接指向 &quot;/calendar/today&quot;</span><br><span class=\"line\">&lt;/BrowserRouter&gt;</span><br></pre></td></tr></table></figure>\n<font size=\"5em\">&lt;/BrowserRouter&gt;</font>"},{"title":"NavigationPrompt-react router 4.0.0 api中文文档","date":"2016-12-02T11:16:00.000Z","_content":"<font size=\"6em\">&lt;NavigationPrompt&gt;</font>\n\n当你的应用进入一个状态，但是需要防止用户从当前状态离开时（比如填了一半的表单），渲染出一个导航确认（NavigationPrompt）。\n```\n{formIsHalfFilledOut && (\n  <NavigationPrompt message=\"Are you sure you want to leave?\"/>\n)}\n```\n### <font color=\"red\">message: string</font>\n\n<!-- more -->\n\n当用户试图从当前状态离开时显示的信息。\n```\n<NavigationPrompt message=\"Are you sure you want to leave?\"/>\n```\n### <font color=\"red\">message: func</font>\n\n这个函数返回一个提示用户跳转的信息，如果返回true，则允许跳转，函数的参数是用户将要跳转的下一个链接，\n```\n<NavigationPrompt message={(location) => (\n  `Are you sure you want to go to ${location.pathname}?`\n)}/>\n```\n### <font color=\"red\">when: bool</font>\nwhen是一个逻辑变量，为true时，将显示message内容的弹窗，为false时，直接跳转。\n\n<NavigationPrompt when={formIsHalfFilledOut} message=\"Are you sure?\"/>\n<font size=\"6em\">&lt;/NavigationPrompt&gt;</font>\n\n","source":"_posts/react-router-4-0-0-api-NavigationPrompt.md","raw":"---\ntitle: NavigationPrompt-react router 4.0.0 api中文文档\ndate: 2016-12-02 19:16:00\ntags: [react, react-router, 翻译文档]\ncategories: react router 4.0.0 api中文文档\n---\n<font size=\"6em\">&lt;NavigationPrompt&gt;</font>\n\n当你的应用进入一个状态，但是需要防止用户从当前状态离开时（比如填了一半的表单），渲染出一个导航确认（NavigationPrompt）。\n```\n{formIsHalfFilledOut && (\n  <NavigationPrompt message=\"Are you sure you want to leave?\"/>\n)}\n```\n### <font color=\"red\">message: string</font>\n\n<!-- more -->\n\n当用户试图从当前状态离开时显示的信息。\n```\n<NavigationPrompt message=\"Are you sure you want to leave?\"/>\n```\n### <font color=\"red\">message: func</font>\n\n这个函数返回一个提示用户跳转的信息，如果返回true，则允许跳转，函数的参数是用户将要跳转的下一个链接，\n```\n<NavigationPrompt message={(location) => (\n  `Are you sure you want to go to ${location.pathname}?`\n)}/>\n```\n### <font color=\"red\">when: bool</font>\nwhen是一个逻辑变量，为true时，将显示message内容的弹窗，为false时，直接跳转。\n\n<NavigationPrompt when={formIsHalfFilledOut} message=\"Are you sure?\"/>\n<font size=\"6em\">&lt;/NavigationPrompt&gt;</font>\n\n","slug":"react-router-4-0-0-api-NavigationPrompt","published":1,"updated":"2019-01-03T02:48:56.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aanf1002gbiuinlrh7gtg","content":"<font size=\"6em\">&lt;NavigationPrompt&gt;</font>\n\n<p>当你的应用进入一个状态，但是需要防止用户从当前状态离开时（比如填了一半的表单），渲染出一个导航确认（NavigationPrompt）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;formIsHalfFilledOut &amp;&amp; (</span><br><span class=\"line\">  &lt;NavigationPrompt message=&quot;Are you sure you want to leave?&quot;/&gt;</span><br><span class=\"line\">)&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"message-string\"><a href=\"#message-string\" class=\"headerlink\" title=\"message: string\"></a><font color=\"red\">message: string</font></h3><a id=\"more\"></a>\n<p>当用户试图从当前状态离开时显示的信息。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;NavigationPrompt message=&quot;Are you sure you want to leave?&quot;/&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"message-func\"><a href=\"#message-func\" class=\"headerlink\" title=\"message: func\"></a><font color=\"red\">message: func</font></h3><p>这个函数返回一个提示用户跳转的信息，如果返回true，则允许跳转，函数的参数是用户将要跳转的下一个链接，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;NavigationPrompt message=&#123;(location) =&gt; (</span><br><span class=\"line\">  `Are you sure you want to go to $&#123;location.pathname&#125;?`</span><br><span class=\"line\">)&#125;/&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"when-bool\"><a href=\"#when-bool\" class=\"headerlink\" title=\"when: bool\"></a><font color=\"red\">when: bool</font></h3><p>when是一个逻辑变量，为true时，将显示message内容的弹窗，为false时，直接跳转。</p>\n<p><navigationprompt when=\"{formIsHalfFilledOut}\" message=\"Are you sure?\"></navigationprompt></p>\n<font size=\"6em\">&lt;/NavigationPrompt&gt;</font>\n\n","site":{"data":{}},"excerpt":"<font size=\"6em\">&lt;NavigationPrompt&gt;</font>\n\n<p>当你的应用进入一个状态，但是需要防止用户从当前状态离开时（比如填了一半的表单），渲染出一个导航确认（NavigationPrompt）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;formIsHalfFilledOut &amp;&amp; (</span><br><span class=\"line\">  &lt;NavigationPrompt message=&quot;Are you sure you want to leave?&quot;/&gt;</span><br><span class=\"line\">)&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"message-string\"><a href=\"#message-string\" class=\"headerlink\" title=\"message: string\"></a><font color=\"red\">message: string</font></h3>","more":"<p>当用户试图从当前状态离开时显示的信息。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;NavigationPrompt message=&quot;Are you sure you want to leave?&quot;/&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"message-func\"><a href=\"#message-func\" class=\"headerlink\" title=\"message: func\"></a><font color=\"red\">message: func</font></h3><p>这个函数返回一个提示用户跳转的信息，如果返回true，则允许跳转，函数的参数是用户将要跳转的下一个链接，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;NavigationPrompt message=&#123;(location) =&gt; (</span><br><span class=\"line\">  `Are you sure you want to go to $&#123;location.pathname&#125;?`</span><br><span class=\"line\">)&#125;/&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"when-bool\"><a href=\"#when-bool\" class=\"headerlink\" title=\"when: bool\"></a><font color=\"red\">when: bool</font></h3><p>when是一个逻辑变量，为true时，将显示message内容的弹窗，为false时，直接跳转。</p>\n<p><navigationprompt when=\"{formIsHalfFilledOut}\" message=\"Are you sure?\"></navigationprompt></p>\n<font size=\"6em\">&lt;/NavigationPrompt&gt;</font>"},{"title":"AWS Ubuntu 18.04准备Spring Boot运行环境。","date":"2019-06-21T12:03:44.000Z","_content":"\n安装nginx软件包:\n```bash\nsudo apt update\nsudo apt install nginx\n```\n\n查看nginx的运行状态:\n```bash\nsudo systemctl status nginx\n```\n\n安装mysql软件包:\n```bash\nsudo apt-get install mysql-server\n```\n这个命令会让你输入root的密码，记住这个密码，如果你安装的版本是5.7，没让输入密码，请本文参考最下方方法。\n```bash\nsudo apt install mysql-client\nsudo apt install libmysqlclient-dev\n```\n<!-- more -->\n查看mysql安装结果:\n```bash\nsudo netstat -tap | grep mysql\n```\n输出如下:\n```bash\ntcp        0      0 localhost:mysql         *:*                     LISTEN      22144/mysqld    \n```\n\n修改默认字符集为utf8\n在/etc/mysql/my.cnf加上如下配置\n```\n[mysqld]\nbind-address            = 0.0.0.0\ncharacter_set_server=utf8\ncollation_server=utf8_general_ci\n```\n\n安装redis软件包\n```bash\nsudo apt-get install redis-server\n```\n检查安装结果:\n```bash\nps -aux|grep redis\n```\n\n安装jdk\n```bash\nsudo apt-get install openjdk-8-jdk openjdk-8-jdk-headless\nsudo apt-get install openjfx openjfx-source\n```\n\n\n准备AWS EBS，并且将mysql挂载到新盘。\n```bash\nubuntu@ip-172-31-40-13:~$ sudo fdisk -l\nDisk /dev/nvme0n1: 10 GiB, 10737418240 bytes, 20971520 sectors\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisklabel type: dos\nDisk identifier: 0x1e7ee857\n\nDevice         Boot Start      End  Sectors Size Id Type\n/dev/nvme0n1p1 *     2048 20971486 20969439  10G 83 Linux\n\n\nDisk /dev/nvme1n1: 20 GiB, 21474836480 bytes, 41943040 sectors\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\n\n```\n格式化设备\n```bash\nubuntu@ip-172-31-40-13:~$ sudo mkfs.ext4 /dev/nvme1n1\nmke2fs 1.42.13 (17-May-2015)\nCreating filesystem with 5242880 4k blocks and 1310720 inodes\nFilesystem UUID: 3dc4c546-58ae-423c-84d2-894d26ed7512\nSuperblock backups stored on blocks: \n\t32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, \n\t4096000\n\nAllocating group tables: done                            \nWriting inode tables: done                            \nCreating journal (32768 blocks): done\nWriting superblocks and filesystem accounting information:        \ndone\n```\n\n挂载磁盘\n```bash\nubuntu@ip-172-31-40-13:~$ mkdir mysql\nubuntu@ip-172-31-40-13:~$ sudo mount /dev/nvme1n1 mysql\n```\n\n如果需要取消挂载\n```bash\nubuntu@ip-172-31-40-13:~$ sudo umount mysql\n```\n查看挂载结果\n```bash\nubuntu@ip-172-31-40-13:~$ df -h\nFilesystem      Size  Used Avail Use% Mounted on\nudev            3.9G     0  3.9G   0% /dev\ntmpfs           789M  8.8M  780M   2% /run\n/dev/nvme0n1p1  9.7G  2.2G  7.5G  23% /\ntmpfs           3.9G     0  3.9G   0% /dev/shm\ntmpfs           5.0M     0  5.0M   0% /run/lock\ntmpfs           3.9G     0  3.9G   0% /sys/fs/cgroup\n/dev/loop0       90M   90M     0 100% /snap/core/6818\n/dev/loop1       18M   18M     0 100% /snap/amazon-ssm-agent/1335\n/dev/loop2       89M   89M     0 100% /snap/core/7169\n/dev/nvme1n1     20G   44M   19G   1% /home/ubuntu/mysql\ntmpfs           789M     0  789M   0% /run/user/1000\n```\n\n但是这个时候重启，挂载磁盘会消失，因此，需要设置启动时挂载。\n\n查看/etc/fstab文件\n```bash\nubuntu@ip-172-31-40-13:~$ cat /etc/fstab\nLABEL=cloudimg-rootfs\t/\t ext4\tdefaults,discard\t0 0\n```\n可以很明显的看到文件有6列。\n第1列是设备名或者卷标\n\n第2列是挂载点（也就是挂载目录）\n\n第3列是所要挂载设备的文件系统或者文件系统类型\n\n第4列是挂载选项，通常使用defaults就可以\n\n第5列设置是否使用dump备份，置0为不备份，置1，2为备份，但2的备份重要性比1小\n\n第6列设置是否开机的时候使用fsck检验所挂载的磁盘，置0为不检验，置1，2为检验，但置2盘比置1的盘晚检验。\n\n增加一行“/dev/nvme1n1       /home/ubuntu/mysql        ext4    defaults        1       1”\n```bash\nubuntu@ip-172-31-40-13:~$ cat /etc/fstab\n/dev/nvme1n1       /home/ubuntu/mysql        ext4    defaults        1       1\nLABEL=cloudimg-rootfs\t/\t ext4\tdefaults,discard\t0 0\n```\n\nmysql迁移到新盘\n\n把MySQL服务进程停掉：\n```bash\nubuntu@ip-172-31-40-13:~$ mysqladmin -u root -p shutdown\nEnter password: \n```\n\n把/var/lib/mysql整个目录移到/home/data\n```bash\nsudo mv /var/lib/mysql　/home/ubuntu/mysql\n```\n这样吧数据库都移到了新盘\n\n为原来的mysql目录建立软连接，这样可以省去修改配置的。\n```bash\nsudo ln -s /home/ubuntu/mysql/mysql/ /var/lib/mysql\n```\n修改/var/lib/mysql所属用户和组\n```bash\nsudo chown -h mysql:mysql /var/lib/mysql\n```\n\n重启mysql服务\n```bash\nsudo /etc/init.d/mysql start\n```\n\n这个时候发现重启不成功，需要修改安全配置文件\n```\nsudo vim /etc/apparmor.d/usr.sbin.mysqld\n```\n添加如下两行\n```bash\n/home/ubuntu/mysql/mysql/ r,\n/home/ubuntu/mysql/mysql/** rwk,\n```\n重新载入配置文件\n```bash\nsudo service apparmor reload\n```\n\n启动 mysql\n```bash\nsudo /etc/init.d/mysql start\n```\n重新启动mysql，正常。\n\n\n---\n\n## MySQL 5.7 重设默认密码的方法\n\n如果安装mysql-server时，没有让输入密码，请按照如下步骤，修改默认root密码\n\n\n```\nsudo cat /etc/mysql/debian.cnf\n```\n会输入如下内容\n```\n# Automatically generated for Debian scripts. DO NOT TOUCH!\n[client]\nhost     = localhost\nuser     = debian-sys-maint\npassword = XwSXXXXLXXXXLR15\nsocket   = /var/run/mysqld/mysqld.sock\n[mysql_upgrade]\nhost     = localhost\nuser     = debian-sys-maint\npassword = XwSXXXXLXXXXLR15\nsocket   = /var/run/mysqld/mysqld.sock\n```\n其中debian-sys-maint和XwSXXXXLXXXXLR15是默认的用户名和随机密码，用这个用户名密码登录。\n```\nmysql -udebian-sys-maint -pXwSXXXXLXXXXLR15\n```\n\n按如下方式修改默认root密码\n```\nubuntu@ip-111-31-27-111:~$ mysql -udebian-sys-maint -pXwSXXXXLXXXXLR15\nmysql: [Warning] Using a password on the command line interface can be insecure.\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 6\nServer version: 5.7.27-0ubuntu0.18.04.1 (Ubuntu)\n\nCopyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n4 rows in set (0.00 sec)\n\nmysql> use mysql;\nReading table information for completion of table and column names\nYou can turn off this feature to get a quicker startup with -A\n\nDatabase changed\nmysql> update user set authentication_string=PASSWORD('xxxxxxxxxxx') where User='root';\nQuery OK, 1 row affected, 1 warning (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 1\n\nmysql> update user set plugin=\"mysql_native_password\";\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 4  Changed: 1  Warnings: 0\n\nmysql> flush privileges; \nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> quit;\nBye\n\n```\n这样，就可以用root和新密码登录了。\n```\nubuntu@ip-111-31-27-111:~$ sudo /etc/init.d/mysql stop\n[ ok ] Stopping mysql (via systemctl): mysql.service.\nubuntu@ip-111-31-27-111:~$ sudo /etc/init.d/mysql start\n[ ok ] Starting mysql (via systemctl): mysql.service.\nubuntu@ip-111-31-27-111:~$ mysql -u root -p\nEnter password: \nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 2\nServer version: 5.7.27-0ubuntu0.18.04.1 (Ubuntu)\n\nCopyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql> exit\nBye\n\n```","source":"_posts/spring-boot-nginx-prepare.md","raw":"---\ntitle: AWS Ubuntu 18.04准备Spring Boot运行环境。\ndate: 2019-06-21 20:03:44\ntags: [AWS, Linux, Spring Boot]\n---\n\n安装nginx软件包:\n```bash\nsudo apt update\nsudo apt install nginx\n```\n\n查看nginx的运行状态:\n```bash\nsudo systemctl status nginx\n```\n\n安装mysql软件包:\n```bash\nsudo apt-get install mysql-server\n```\n这个命令会让你输入root的密码，记住这个密码，如果你安装的版本是5.7，没让输入密码，请本文参考最下方方法。\n```bash\nsudo apt install mysql-client\nsudo apt install libmysqlclient-dev\n```\n<!-- more -->\n查看mysql安装结果:\n```bash\nsudo netstat -tap | grep mysql\n```\n输出如下:\n```bash\ntcp        0      0 localhost:mysql         *:*                     LISTEN      22144/mysqld    \n```\n\n修改默认字符集为utf8\n在/etc/mysql/my.cnf加上如下配置\n```\n[mysqld]\nbind-address            = 0.0.0.0\ncharacter_set_server=utf8\ncollation_server=utf8_general_ci\n```\n\n安装redis软件包\n```bash\nsudo apt-get install redis-server\n```\n检查安装结果:\n```bash\nps -aux|grep redis\n```\n\n安装jdk\n```bash\nsudo apt-get install openjdk-8-jdk openjdk-8-jdk-headless\nsudo apt-get install openjfx openjfx-source\n```\n\n\n准备AWS EBS，并且将mysql挂载到新盘。\n```bash\nubuntu@ip-172-31-40-13:~$ sudo fdisk -l\nDisk /dev/nvme0n1: 10 GiB, 10737418240 bytes, 20971520 sectors\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisklabel type: dos\nDisk identifier: 0x1e7ee857\n\nDevice         Boot Start      End  Sectors Size Id Type\n/dev/nvme0n1p1 *     2048 20971486 20969439  10G 83 Linux\n\n\nDisk /dev/nvme1n1: 20 GiB, 21474836480 bytes, 41943040 sectors\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\n\n```\n格式化设备\n```bash\nubuntu@ip-172-31-40-13:~$ sudo mkfs.ext4 /dev/nvme1n1\nmke2fs 1.42.13 (17-May-2015)\nCreating filesystem with 5242880 4k blocks and 1310720 inodes\nFilesystem UUID: 3dc4c546-58ae-423c-84d2-894d26ed7512\nSuperblock backups stored on blocks: \n\t32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, \n\t4096000\n\nAllocating group tables: done                            \nWriting inode tables: done                            \nCreating journal (32768 blocks): done\nWriting superblocks and filesystem accounting information:        \ndone\n```\n\n挂载磁盘\n```bash\nubuntu@ip-172-31-40-13:~$ mkdir mysql\nubuntu@ip-172-31-40-13:~$ sudo mount /dev/nvme1n1 mysql\n```\n\n如果需要取消挂载\n```bash\nubuntu@ip-172-31-40-13:~$ sudo umount mysql\n```\n查看挂载结果\n```bash\nubuntu@ip-172-31-40-13:~$ df -h\nFilesystem      Size  Used Avail Use% Mounted on\nudev            3.9G     0  3.9G   0% /dev\ntmpfs           789M  8.8M  780M   2% /run\n/dev/nvme0n1p1  9.7G  2.2G  7.5G  23% /\ntmpfs           3.9G     0  3.9G   0% /dev/shm\ntmpfs           5.0M     0  5.0M   0% /run/lock\ntmpfs           3.9G     0  3.9G   0% /sys/fs/cgroup\n/dev/loop0       90M   90M     0 100% /snap/core/6818\n/dev/loop1       18M   18M     0 100% /snap/amazon-ssm-agent/1335\n/dev/loop2       89M   89M     0 100% /snap/core/7169\n/dev/nvme1n1     20G   44M   19G   1% /home/ubuntu/mysql\ntmpfs           789M     0  789M   0% /run/user/1000\n```\n\n但是这个时候重启，挂载磁盘会消失，因此，需要设置启动时挂载。\n\n查看/etc/fstab文件\n```bash\nubuntu@ip-172-31-40-13:~$ cat /etc/fstab\nLABEL=cloudimg-rootfs\t/\t ext4\tdefaults,discard\t0 0\n```\n可以很明显的看到文件有6列。\n第1列是设备名或者卷标\n\n第2列是挂载点（也就是挂载目录）\n\n第3列是所要挂载设备的文件系统或者文件系统类型\n\n第4列是挂载选项，通常使用defaults就可以\n\n第5列设置是否使用dump备份，置0为不备份，置1，2为备份，但2的备份重要性比1小\n\n第6列设置是否开机的时候使用fsck检验所挂载的磁盘，置0为不检验，置1，2为检验，但置2盘比置1的盘晚检验。\n\n增加一行“/dev/nvme1n1       /home/ubuntu/mysql        ext4    defaults        1       1”\n```bash\nubuntu@ip-172-31-40-13:~$ cat /etc/fstab\n/dev/nvme1n1       /home/ubuntu/mysql        ext4    defaults        1       1\nLABEL=cloudimg-rootfs\t/\t ext4\tdefaults,discard\t0 0\n```\n\nmysql迁移到新盘\n\n把MySQL服务进程停掉：\n```bash\nubuntu@ip-172-31-40-13:~$ mysqladmin -u root -p shutdown\nEnter password: \n```\n\n把/var/lib/mysql整个目录移到/home/data\n```bash\nsudo mv /var/lib/mysql　/home/ubuntu/mysql\n```\n这样吧数据库都移到了新盘\n\n为原来的mysql目录建立软连接，这样可以省去修改配置的。\n```bash\nsudo ln -s /home/ubuntu/mysql/mysql/ /var/lib/mysql\n```\n修改/var/lib/mysql所属用户和组\n```bash\nsudo chown -h mysql:mysql /var/lib/mysql\n```\n\n重启mysql服务\n```bash\nsudo /etc/init.d/mysql start\n```\n\n这个时候发现重启不成功，需要修改安全配置文件\n```\nsudo vim /etc/apparmor.d/usr.sbin.mysqld\n```\n添加如下两行\n```bash\n/home/ubuntu/mysql/mysql/ r,\n/home/ubuntu/mysql/mysql/** rwk,\n```\n重新载入配置文件\n```bash\nsudo service apparmor reload\n```\n\n启动 mysql\n```bash\nsudo /etc/init.d/mysql start\n```\n重新启动mysql，正常。\n\n\n---\n\n## MySQL 5.7 重设默认密码的方法\n\n如果安装mysql-server时，没有让输入密码，请按照如下步骤，修改默认root密码\n\n\n```\nsudo cat /etc/mysql/debian.cnf\n```\n会输入如下内容\n```\n# Automatically generated for Debian scripts. DO NOT TOUCH!\n[client]\nhost     = localhost\nuser     = debian-sys-maint\npassword = XwSXXXXLXXXXLR15\nsocket   = /var/run/mysqld/mysqld.sock\n[mysql_upgrade]\nhost     = localhost\nuser     = debian-sys-maint\npassword = XwSXXXXLXXXXLR15\nsocket   = /var/run/mysqld/mysqld.sock\n```\n其中debian-sys-maint和XwSXXXXLXXXXLR15是默认的用户名和随机密码，用这个用户名密码登录。\n```\nmysql -udebian-sys-maint -pXwSXXXXLXXXXLR15\n```\n\n按如下方式修改默认root密码\n```\nubuntu@ip-111-31-27-111:~$ mysql -udebian-sys-maint -pXwSXXXXLXXXXLR15\nmysql: [Warning] Using a password on the command line interface can be insecure.\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 6\nServer version: 5.7.27-0ubuntu0.18.04.1 (Ubuntu)\n\nCopyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n4 rows in set (0.00 sec)\n\nmysql> use mysql;\nReading table information for completion of table and column names\nYou can turn off this feature to get a quicker startup with -A\n\nDatabase changed\nmysql> update user set authentication_string=PASSWORD('xxxxxxxxxxx') where User='root';\nQuery OK, 1 row affected, 1 warning (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 1\n\nmysql> update user set plugin=\"mysql_native_password\";\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 4  Changed: 1  Warnings: 0\n\nmysql> flush privileges; \nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> quit;\nBye\n\n```\n这样，就可以用root和新密码登录了。\n```\nubuntu@ip-111-31-27-111:~$ sudo /etc/init.d/mysql stop\n[ ok ] Stopping mysql (via systemctl): mysql.service.\nubuntu@ip-111-31-27-111:~$ sudo /etc/init.d/mysql start\n[ ok ] Starting mysql (via systemctl): mysql.service.\nubuntu@ip-111-31-27-111:~$ mysql -u root -p\nEnter password: \nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 2\nServer version: 5.7.27-0ubuntu0.18.04.1 (Ubuntu)\n\nCopyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql> exit\nBye\n\n```","slug":"spring-boot-nginx-prepare","published":1,"updated":"2019-08-09T15:48:45.609Z","_id":"cjz4aanf2002ibiui8ccw5j1a","comments":1,"layout":"post","photos":[],"link":"","content":"<p>安装nginx软件包:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install nginx</span><br></pre></td></tr></table></figure></p>\n<p>查看nginx的运行状态:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl status nginx</span><br></pre></td></tr></table></figure></p>\n<p>安装mysql软件包:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure></p>\n<p>这个命令会让你输入root的密码，记住这个密码，如果你安装的版本是5.7，没让输入密码，请本文参考最下方方法。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install mysql-client</span><br><span class=\"line\">sudo apt install libmysqlclient-dev</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>查看mysql安装结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo netstat -tap | grep mysql</span><br></pre></td></tr></table></figure></p>\n<p>输出如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcp        0      0 localhost:mysql         *:*                     LISTEN      22144/mysqld</span><br></pre></td></tr></table></figure></p>\n<p>修改默认字符集为utf8<br>在/etc/mysql/my.cnf加上如下配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">bind-address            = 0.0.0.0</span><br><span class=\"line\">character_set_server=utf8</span><br><span class=\"line\">collation_server=utf8_general_ci</span><br></pre></td></tr></table></figure></p>\n<p>安装redis软件包<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install redis-server</span><br></pre></td></tr></table></figure></p>\n<p>检查安装结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -aux|grep redis</span><br></pre></td></tr></table></figure></p>\n<p>安装jdk<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install openjdk-8-jdk openjdk-8-jdk-headless</span><br><span class=\"line\">sudo apt-get install openjfx openjfx-source</span><br></pre></td></tr></table></figure></p>\n<p>准备AWS EBS，并且将mysql挂载到新盘。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu@ip-172-31-40-13:~$ sudo fdisk -l</span><br><span class=\"line\">Disk /dev/nvme0n1: 10 GiB, 10737418240 bytes, 20971520 sectors</span><br><span class=\"line\">Units: sectors of 1 * 512 = 512 bytes</span><br><span class=\"line\">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class=\"line\">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class=\"line\">Disklabel <span class=\"built_in\">type</span>: dos</span><br><span class=\"line\">Disk identifier: 0x1e7ee857</span><br><span class=\"line\"></span><br><span class=\"line\">Device         Boot Start      End  Sectors Size Id Type</span><br><span class=\"line\">/dev/nvme0n1p1 *     2048 20971486 20969439  10G 83 Linux</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Disk /dev/nvme1n1: 20 GiB, 21474836480 bytes, 41943040 sectors</span><br><span class=\"line\">Units: sectors of 1 * 512 = 512 bytes</span><br><span class=\"line\">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class=\"line\">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br></pre></td></tr></table></figure></p>\n<p>格式化设备<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu@ip-172-31-40-13:~$ sudo mkfs.ext4 /dev/nvme1n1</span><br><span class=\"line\">mke2fs 1.42.13 (17-May-2015)</span><br><span class=\"line\">Creating filesystem with 5242880 4k blocks and 1310720 inodes</span><br><span class=\"line\">Filesystem UUID: 3dc4c546-58ae-423c-84d2-894d26ed7512</span><br><span class=\"line\">Superblock backups stored on blocks: </span><br><span class=\"line\">\t32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, </span><br><span class=\"line\">\t4096000</span><br><span class=\"line\"></span><br><span class=\"line\">Allocating group tables: <span class=\"keyword\">done</span>                            </span><br><span class=\"line\">Writing inode tables: <span class=\"keyword\">done</span>                            </span><br><span class=\"line\">Creating journal (32768 blocks): <span class=\"keyword\">done</span></span><br><span class=\"line\">Writing superblocks and filesystem accounting information:        </span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>挂载磁盘<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu@ip-172-31-40-13:~$ mkdir mysql</span><br><span class=\"line\">ubuntu@ip-172-31-40-13:~$ sudo mount /dev/nvme1n1 mysql</span><br></pre></td></tr></table></figure></p>\n<p>如果需要取消挂载<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu@ip-172-31-40-13:~$ sudo umount mysql</span><br></pre></td></tr></table></figure></p>\n<p>查看挂载结果<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu@ip-172-31-40-13:~$ df -h</span><br><span class=\"line\">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class=\"line\">udev            3.9G     0  3.9G   0% /dev</span><br><span class=\"line\">tmpfs           789M  8.8M  780M   2% /run</span><br><span class=\"line\">/dev/nvme0n1p1  9.7G  2.2G  7.5G  23% /</span><br><span class=\"line\">tmpfs           3.9G     0  3.9G   0% /dev/shm</span><br><span class=\"line\">tmpfs           5.0M     0  5.0M   0% /run/lock</span><br><span class=\"line\">tmpfs           3.9G     0  3.9G   0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/loop0       90M   90M     0 100% /snap/core/6818</span><br><span class=\"line\">/dev/loop1       18M   18M     0 100% /snap/amazon-ssm-agent/1335</span><br><span class=\"line\">/dev/loop2       89M   89M     0 100% /snap/core/7169</span><br><span class=\"line\">/dev/nvme1n1     20G   44M   19G   1% /home/ubuntu/mysql</span><br><span class=\"line\">tmpfs           789M     0  789M   0% /run/user/1000</span><br></pre></td></tr></table></figure></p>\n<p>但是这个时候重启，挂载磁盘会消失，因此，需要设置启动时挂载。</p>\n<p>查看/etc/fstab文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu@ip-172-31-40-13:~$ cat /etc/fstab</span><br><span class=\"line\">LABEL=cloudimg-rootfs\t/\t ext4\tdefaults,discard\t0 0</span><br></pre></td></tr></table></figure></p>\n<p>可以很明显的看到文件有6列。<br>第1列是设备名或者卷标</p>\n<p>第2列是挂载点（也就是挂载目录）</p>\n<p>第3列是所要挂载设备的文件系统或者文件系统类型</p>\n<p>第4列是挂载选项，通常使用defaults就可以</p>\n<p>第5列设置是否使用dump备份，置0为不备份，置1，2为备份，但2的备份重要性比1小</p>\n<p>第6列设置是否开机的时候使用fsck检验所挂载的磁盘，置0为不检验，置1，2为检验，但置2盘比置1的盘晚检验。</p>\n<p>增加一行“/dev/nvme1n1       /home/ubuntu/mysql        ext4    defaults        1       1”<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu@ip-172-31-40-13:~$ cat /etc/fstab</span><br><span class=\"line\">/dev/nvme1n1       /home/ubuntu/mysql        ext4    defaults        1       1</span><br><span class=\"line\">LABEL=cloudimg-rootfs\t/\t ext4\tdefaults,discard\t0 0</span><br></pre></td></tr></table></figure></p>\n<p>mysql迁移到新盘</p>\n<p>把MySQL服务进程停掉：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu@ip-172-31-40-13:~$ mysqladmin -u root -p shutdown</span><br><span class=\"line\">Enter password:</span><br></pre></td></tr></table></figure></p>\n<p>把/var/lib/mysql整个目录移到/home/data<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mv /var/lib/mysql　/home/ubuntu/mysql</span><br></pre></td></tr></table></figure></p>\n<p>这样吧数据库都移到了新盘</p>\n<p>为原来的mysql目录建立软连接，这样可以省去修改配置的。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /home/ubuntu/mysql/mysql/ /var/lib/mysql</span><br></pre></td></tr></table></figure></p>\n<p>修改/var/lib/mysql所属用户和组<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown -h mysql:mysql /var/lib/mysql</span><br></pre></td></tr></table></figure></p>\n<p>重启mysql服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/mysql start</span><br></pre></td></tr></table></figure></p>\n<p>这个时候发现重启不成功，需要修改安全配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/apparmor.d/usr.sbin.mysqld</span><br></pre></td></tr></table></figure></p>\n<p>添加如下两行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/ubuntu/mysql/mysql/ r,</span><br><span class=\"line\">/home/ubuntu/mysql/mysql/** rwk,</span><br></pre></td></tr></table></figure></p>\n<p>重新载入配置文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service apparmor reload</span><br></pre></td></tr></table></figure></p>\n<p>启动 mysql<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/mysql start</span><br></pre></td></tr></table></figure></p>\n<p>重新启动mysql，正常。</p>\n<hr>\n<h2 id=\"MySQL-5-7-重设默认密码的方法\"><a href=\"#MySQL-5-7-重设默认密码的方法\" class=\"headerlink\" title=\"MySQL 5.7 重设默认密码的方法\"></a>MySQL 5.7 重设默认密码的方法</h2><p>如果安装mysql-server时，没有让输入密码，请按照如下步骤，修改默认root密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cat /etc/mysql/debian.cnf</span><br></pre></td></tr></table></figure>\n<p>会输入如下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Automatically generated for Debian scripts. DO NOT TOUCH!</span><br><span class=\"line\">[client]</span><br><span class=\"line\">host     = localhost</span><br><span class=\"line\">user     = debian-sys-maint</span><br><span class=\"line\">password = XwSXXXXLXXXXLR15</span><br><span class=\"line\">socket   = /var/run/mysqld/mysqld.sock</span><br><span class=\"line\">[mysql_upgrade]</span><br><span class=\"line\">host     = localhost</span><br><span class=\"line\">user     = debian-sys-maint</span><br><span class=\"line\">password = XwSXXXXLXXXXLR15</span><br><span class=\"line\">socket   = /var/run/mysqld/mysqld.sock</span><br></pre></td></tr></table></figure></p>\n<p>其中debian-sys-maint和XwSXXXXLXXXXLR15是默认的用户名和随机密码，用这个用户名密码登录。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -udebian-sys-maint -pXwSXXXXLXXXXLR15</span><br></pre></td></tr></table></figure></p>\n<p>按如下方式修改默认root密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu@ip-111-31-27-111:~$ mysql -udebian-sys-maint -pXwSXXXXLXXXXLR15</span><br><span class=\"line\">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class=\"line\">Welcome to the MySQL monitor.  Commands end with ; or \\g.</span><br><span class=\"line\">Your MySQL connection id is 6</span><br><span class=\"line\">Server version: 5.7.27-0ubuntu0.18.04.1 (Ubuntu)</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class=\"line\"></span><br><span class=\"line\">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class=\"line\">affiliates. Other names may be trademarks of their respective</span><br><span class=\"line\">owners.</span><br><span class=\"line\"></span><br><span class=\"line\">Type &apos;help;&apos; or &apos;\\h&apos; for help. Type &apos;\\c&apos; to clear the current input statement.</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| Database           |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| information_schema |</span><br><span class=\"line\">| mysql              |</span><br><span class=\"line\">| performance_schema |</span><br><span class=\"line\">| sys                |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">4 rows in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; use mysql;</span><br><span class=\"line\">Reading table information for completion of table and column names</span><br><span class=\"line\">You can turn off this feature to get a quicker startup with -A</span><br><span class=\"line\"></span><br><span class=\"line\">Database changed</span><br><span class=\"line\">mysql&gt; update user set authentication_string=PASSWORD(&apos;xxxxxxxxxxx&apos;) where User=&apos;root&apos;;</span><br><span class=\"line\">Query OK, 1 row affected, 1 warning (0.00 sec)</span><br><span class=\"line\">Rows matched: 1  Changed: 1  Warnings: 1</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; update user set plugin=&quot;mysql_native_password&quot;;</span><br><span class=\"line\">Query OK, 1 row affected (0.00 sec)</span><br><span class=\"line\">Rows matched: 4  Changed: 1  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; flush privileges; </span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; quit;</span><br><span class=\"line\">Bye</span><br></pre></td></tr></table></figure></p>\n<p>这样，就可以用root和新密码登录了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu@ip-111-31-27-111:~$ sudo /etc/init.d/mysql stop</span><br><span class=\"line\">[ ok ] Stopping mysql (via systemctl): mysql.service.</span><br><span class=\"line\">ubuntu@ip-111-31-27-111:~$ sudo /etc/init.d/mysql start</span><br><span class=\"line\">[ ok ] Starting mysql (via systemctl): mysql.service.</span><br><span class=\"line\">ubuntu@ip-111-31-27-111:~$ mysql -u root -p</span><br><span class=\"line\">Enter password: </span><br><span class=\"line\">Welcome to the MySQL monitor.  Commands end with ; or \\g.</span><br><span class=\"line\">Your MySQL connection id is 2</span><br><span class=\"line\">Server version: 5.7.27-0ubuntu0.18.04.1 (Ubuntu)</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class=\"line\"></span><br><span class=\"line\">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class=\"line\">affiliates. Other names may be trademarks of their respective</span><br><span class=\"line\">owners.</span><br><span class=\"line\"></span><br><span class=\"line\">Type &apos;help;&apos; or &apos;\\h&apos; for help. Type &apos;\\c&apos; to clear the current input statement.</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; exit</span><br><span class=\"line\">Bye</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>安装nginx软件包:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install nginx</span><br></pre></td></tr></table></figure></p>\n<p>查看nginx的运行状态:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl status nginx</span><br></pre></td></tr></table></figure></p>\n<p>安装mysql软件包:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure></p>\n<p>这个命令会让你输入root的密码，记住这个密码，如果你安装的版本是5.7，没让输入密码，请本文参考最下方方法。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install mysql-client</span><br><span class=\"line\">sudo apt install libmysqlclient-dev</span><br></pre></td></tr></table></figure></p>","more":"<p>查看mysql安装结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo netstat -tap | grep mysql</span><br></pre></td></tr></table></figure></p>\n<p>输出如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcp        0      0 localhost:mysql         *:*                     LISTEN      22144/mysqld</span><br></pre></td></tr></table></figure></p>\n<p>修改默认字符集为utf8<br>在/etc/mysql/my.cnf加上如下配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">bind-address            = 0.0.0.0</span><br><span class=\"line\">character_set_server=utf8</span><br><span class=\"line\">collation_server=utf8_general_ci</span><br></pre></td></tr></table></figure></p>\n<p>安装redis软件包<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install redis-server</span><br></pre></td></tr></table></figure></p>\n<p>检查安装结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -aux|grep redis</span><br></pre></td></tr></table></figure></p>\n<p>安装jdk<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install openjdk-8-jdk openjdk-8-jdk-headless</span><br><span class=\"line\">sudo apt-get install openjfx openjfx-source</span><br></pre></td></tr></table></figure></p>\n<p>准备AWS EBS，并且将mysql挂载到新盘。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu@ip-172-31-40-13:~$ sudo fdisk -l</span><br><span class=\"line\">Disk /dev/nvme0n1: 10 GiB, 10737418240 bytes, 20971520 sectors</span><br><span class=\"line\">Units: sectors of 1 * 512 = 512 bytes</span><br><span class=\"line\">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class=\"line\">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class=\"line\">Disklabel <span class=\"built_in\">type</span>: dos</span><br><span class=\"line\">Disk identifier: 0x1e7ee857</span><br><span class=\"line\"></span><br><span class=\"line\">Device         Boot Start      End  Sectors Size Id Type</span><br><span class=\"line\">/dev/nvme0n1p1 *     2048 20971486 20969439  10G 83 Linux</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Disk /dev/nvme1n1: 20 GiB, 21474836480 bytes, 41943040 sectors</span><br><span class=\"line\">Units: sectors of 1 * 512 = 512 bytes</span><br><span class=\"line\">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class=\"line\">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br></pre></td></tr></table></figure></p>\n<p>格式化设备<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu@ip-172-31-40-13:~$ sudo mkfs.ext4 /dev/nvme1n1</span><br><span class=\"line\">mke2fs 1.42.13 (17-May-2015)</span><br><span class=\"line\">Creating filesystem with 5242880 4k blocks and 1310720 inodes</span><br><span class=\"line\">Filesystem UUID: 3dc4c546-58ae-423c-84d2-894d26ed7512</span><br><span class=\"line\">Superblock backups stored on blocks: </span><br><span class=\"line\">\t32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, </span><br><span class=\"line\">\t4096000</span><br><span class=\"line\"></span><br><span class=\"line\">Allocating group tables: <span class=\"keyword\">done</span>                            </span><br><span class=\"line\">Writing inode tables: <span class=\"keyword\">done</span>                            </span><br><span class=\"line\">Creating journal (32768 blocks): <span class=\"keyword\">done</span></span><br><span class=\"line\">Writing superblocks and filesystem accounting information:        </span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>挂载磁盘<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu@ip-172-31-40-13:~$ mkdir mysql</span><br><span class=\"line\">ubuntu@ip-172-31-40-13:~$ sudo mount /dev/nvme1n1 mysql</span><br></pre></td></tr></table></figure></p>\n<p>如果需要取消挂载<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu@ip-172-31-40-13:~$ sudo umount mysql</span><br></pre></td></tr></table></figure></p>\n<p>查看挂载结果<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu@ip-172-31-40-13:~$ df -h</span><br><span class=\"line\">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class=\"line\">udev            3.9G     0  3.9G   0% /dev</span><br><span class=\"line\">tmpfs           789M  8.8M  780M   2% /run</span><br><span class=\"line\">/dev/nvme0n1p1  9.7G  2.2G  7.5G  23% /</span><br><span class=\"line\">tmpfs           3.9G     0  3.9G   0% /dev/shm</span><br><span class=\"line\">tmpfs           5.0M     0  5.0M   0% /run/lock</span><br><span class=\"line\">tmpfs           3.9G     0  3.9G   0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/loop0       90M   90M     0 100% /snap/core/6818</span><br><span class=\"line\">/dev/loop1       18M   18M     0 100% /snap/amazon-ssm-agent/1335</span><br><span class=\"line\">/dev/loop2       89M   89M     0 100% /snap/core/7169</span><br><span class=\"line\">/dev/nvme1n1     20G   44M   19G   1% /home/ubuntu/mysql</span><br><span class=\"line\">tmpfs           789M     0  789M   0% /run/user/1000</span><br></pre></td></tr></table></figure></p>\n<p>但是这个时候重启，挂载磁盘会消失，因此，需要设置启动时挂载。</p>\n<p>查看/etc/fstab文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu@ip-172-31-40-13:~$ cat /etc/fstab</span><br><span class=\"line\">LABEL=cloudimg-rootfs\t/\t ext4\tdefaults,discard\t0 0</span><br></pre></td></tr></table></figure></p>\n<p>可以很明显的看到文件有6列。<br>第1列是设备名或者卷标</p>\n<p>第2列是挂载点（也就是挂载目录）</p>\n<p>第3列是所要挂载设备的文件系统或者文件系统类型</p>\n<p>第4列是挂载选项，通常使用defaults就可以</p>\n<p>第5列设置是否使用dump备份，置0为不备份，置1，2为备份，但2的备份重要性比1小</p>\n<p>第6列设置是否开机的时候使用fsck检验所挂载的磁盘，置0为不检验，置1，2为检验，但置2盘比置1的盘晚检验。</p>\n<p>增加一行“/dev/nvme1n1       /home/ubuntu/mysql        ext4    defaults        1       1”<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu@ip-172-31-40-13:~$ cat /etc/fstab</span><br><span class=\"line\">/dev/nvme1n1       /home/ubuntu/mysql        ext4    defaults        1       1</span><br><span class=\"line\">LABEL=cloudimg-rootfs\t/\t ext4\tdefaults,discard\t0 0</span><br></pre></td></tr></table></figure></p>\n<p>mysql迁移到新盘</p>\n<p>把MySQL服务进程停掉：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu@ip-172-31-40-13:~$ mysqladmin -u root -p shutdown</span><br><span class=\"line\">Enter password:</span><br></pre></td></tr></table></figure></p>\n<p>把/var/lib/mysql整个目录移到/home/data<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mv /var/lib/mysql　/home/ubuntu/mysql</span><br></pre></td></tr></table></figure></p>\n<p>这样吧数据库都移到了新盘</p>\n<p>为原来的mysql目录建立软连接，这样可以省去修改配置的。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /home/ubuntu/mysql/mysql/ /var/lib/mysql</span><br></pre></td></tr></table></figure></p>\n<p>修改/var/lib/mysql所属用户和组<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown -h mysql:mysql /var/lib/mysql</span><br></pre></td></tr></table></figure></p>\n<p>重启mysql服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/mysql start</span><br></pre></td></tr></table></figure></p>\n<p>这个时候发现重启不成功，需要修改安全配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/apparmor.d/usr.sbin.mysqld</span><br></pre></td></tr></table></figure></p>\n<p>添加如下两行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/home/ubuntu/mysql/mysql/ r,</span><br><span class=\"line\">/home/ubuntu/mysql/mysql/** rwk,</span><br></pre></td></tr></table></figure></p>\n<p>重新载入配置文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service apparmor reload</span><br></pre></td></tr></table></figure></p>\n<p>启动 mysql<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/mysql start</span><br></pre></td></tr></table></figure></p>\n<p>重新启动mysql，正常。</p>\n<hr>\n<h2 id=\"MySQL-5-7-重设默认密码的方法\"><a href=\"#MySQL-5-7-重设默认密码的方法\" class=\"headerlink\" title=\"MySQL 5.7 重设默认密码的方法\"></a>MySQL 5.7 重设默认密码的方法</h2><p>如果安装mysql-server时，没有让输入密码，请按照如下步骤，修改默认root密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cat /etc/mysql/debian.cnf</span><br></pre></td></tr></table></figure>\n<p>会输入如下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Automatically generated for Debian scripts. DO NOT TOUCH!</span><br><span class=\"line\">[client]</span><br><span class=\"line\">host     = localhost</span><br><span class=\"line\">user     = debian-sys-maint</span><br><span class=\"line\">password = XwSXXXXLXXXXLR15</span><br><span class=\"line\">socket   = /var/run/mysqld/mysqld.sock</span><br><span class=\"line\">[mysql_upgrade]</span><br><span class=\"line\">host     = localhost</span><br><span class=\"line\">user     = debian-sys-maint</span><br><span class=\"line\">password = XwSXXXXLXXXXLR15</span><br><span class=\"line\">socket   = /var/run/mysqld/mysqld.sock</span><br></pre></td></tr></table></figure></p>\n<p>其中debian-sys-maint和XwSXXXXLXXXXLR15是默认的用户名和随机密码，用这个用户名密码登录。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -udebian-sys-maint -pXwSXXXXLXXXXLR15</span><br></pre></td></tr></table></figure></p>\n<p>按如下方式修改默认root密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu@ip-111-31-27-111:~$ mysql -udebian-sys-maint -pXwSXXXXLXXXXLR15</span><br><span class=\"line\">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class=\"line\">Welcome to the MySQL monitor.  Commands end with ; or \\g.</span><br><span class=\"line\">Your MySQL connection id is 6</span><br><span class=\"line\">Server version: 5.7.27-0ubuntu0.18.04.1 (Ubuntu)</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class=\"line\"></span><br><span class=\"line\">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class=\"line\">affiliates. Other names may be trademarks of their respective</span><br><span class=\"line\">owners.</span><br><span class=\"line\"></span><br><span class=\"line\">Type &apos;help;&apos; or &apos;\\h&apos; for help. Type &apos;\\c&apos; to clear the current input statement.</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| Database           |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| information_schema |</span><br><span class=\"line\">| mysql              |</span><br><span class=\"line\">| performance_schema |</span><br><span class=\"line\">| sys                |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">4 rows in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; use mysql;</span><br><span class=\"line\">Reading table information for completion of table and column names</span><br><span class=\"line\">You can turn off this feature to get a quicker startup with -A</span><br><span class=\"line\"></span><br><span class=\"line\">Database changed</span><br><span class=\"line\">mysql&gt; update user set authentication_string=PASSWORD(&apos;xxxxxxxxxxx&apos;) where User=&apos;root&apos;;</span><br><span class=\"line\">Query OK, 1 row affected, 1 warning (0.00 sec)</span><br><span class=\"line\">Rows matched: 1  Changed: 1  Warnings: 1</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; update user set plugin=&quot;mysql_native_password&quot;;</span><br><span class=\"line\">Query OK, 1 row affected (0.00 sec)</span><br><span class=\"line\">Rows matched: 4  Changed: 1  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; flush privileges; </span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; quit;</span><br><span class=\"line\">Bye</span><br></pre></td></tr></table></figure></p>\n<p>这样，就可以用root和新密码登录了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu@ip-111-31-27-111:~$ sudo /etc/init.d/mysql stop</span><br><span class=\"line\">[ ok ] Stopping mysql (via systemctl): mysql.service.</span><br><span class=\"line\">ubuntu@ip-111-31-27-111:~$ sudo /etc/init.d/mysql start</span><br><span class=\"line\">[ ok ] Starting mysql (via systemctl): mysql.service.</span><br><span class=\"line\">ubuntu@ip-111-31-27-111:~$ mysql -u root -p</span><br><span class=\"line\">Enter password: </span><br><span class=\"line\">Welcome to the MySQL monitor.  Commands end with ; or \\g.</span><br><span class=\"line\">Your MySQL connection id is 2</span><br><span class=\"line\">Server version: 5.7.27-0ubuntu0.18.04.1 (Ubuntu)</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class=\"line\"></span><br><span class=\"line\">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class=\"line\">affiliates. Other names may be trademarks of their respective</span><br><span class=\"line\">owners.</span><br><span class=\"line\"></span><br><span class=\"line\">Type &apos;help;&apos; or &apos;\\h&apos; for help. Type &apos;\\c&apos; to clear the current input statement.</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; exit</span><br><span class=\"line\">Bye</span><br></pre></td></tr></table></figure></p>"},{"title":"android native代码debug开关","date":"2018-04-26T10:06:18.000Z","_content":"\n调试本地代码的时候，有时候要加上一些log，特别是一些关键路径，但是生产的时候又不需要打印，有几个办法。\n\n### 宏定义实现\n\n```c\n#ifdef DEBUG\nLOGD(\"i am a log\");\n#endif\n```\n\n这种方法有个不好的地方是，程序一旦编译完了，就不能加修改了，特别是user版本出了状况，因为system分区是只读的。\n\n<!-- more -->\n### 用动态开关\n\n用动态开关量，也有两种方法，一种是给出接口，给上一级打开或者关闭这个开关。\n\n#### 提供开关接口\n```c\nstatic int enable_log = 0;\n\nvoid set_enable_log(int enable) {\n    enable_log = enable;\n}\n\nint is_log_enable() {\n    return enable_log;\n}\n```\n在需要加log的地方写：\n```c\nif(is_log_enable()) {\n    LOGD(\"i am a log\");\n}\n```\n这种方法，适用于上层控制开关的方式，比如说只有经过远程授权才允许打印的log。\n\n#### android的属性控制开关\n\n利用属性来控制log开关时，最好可以在user版本的shell下使用，这对属性名称有讲究。\n\n查看系统代码 system/core/init/property_service.c，有关属性权限的限制。\n```c\nstruct {\n    const char *prefix;\n    unsigned int uid;\n    unsigned int gid;\n} property_perms[] = {\n    ...\n    {\"debug.\",  AID_SHELL,  0},\n    ...\n}\n```\n可以看出， adb shell只能对debug.开始的属性有读写权限，所以属性名不能随意写。\n\n设置完属性之后，可以在代码里面读取该属性值。\n```c\n#define DEBUG_PROP_NAME \"debug.log_switch\"\n\nchar debug_info[PROPERTY_VALUE_MAX];\n\nint is_log_enable() {\n    memset(debug_info, 0, PROPERTY_VALUE_MAX);\n    propery_get(DEBUG_PROP_NAME, debug_info);\n\n    return !strcmp(debug_info, \"on\");\n}\n```\n然后在需要打log的地方写\n```c\nif(is_log_enable()) {\n    LOGD(\"i am a log\");\n}\n```\n\n以上代码纯手打，没有经过编译，可能会有编译错误，仅提供一种log开关的思路。","source":"_posts/switch-native-debug-on-off.md","raw":"---\ntitle: android native代码debug开关\ndate: 2018-04-26 18:06:18\ntags: [android, debug, c/c++]\n---\n\n调试本地代码的时候，有时候要加上一些log，特别是一些关键路径，但是生产的时候又不需要打印，有几个办法。\n\n### 宏定义实现\n\n```c\n#ifdef DEBUG\nLOGD(\"i am a log\");\n#endif\n```\n\n这种方法有个不好的地方是，程序一旦编译完了，就不能加修改了，特别是user版本出了状况，因为system分区是只读的。\n\n<!-- more -->\n### 用动态开关\n\n用动态开关量，也有两种方法，一种是给出接口，给上一级打开或者关闭这个开关。\n\n#### 提供开关接口\n```c\nstatic int enable_log = 0;\n\nvoid set_enable_log(int enable) {\n    enable_log = enable;\n}\n\nint is_log_enable() {\n    return enable_log;\n}\n```\n在需要加log的地方写：\n```c\nif(is_log_enable()) {\n    LOGD(\"i am a log\");\n}\n```\n这种方法，适用于上层控制开关的方式，比如说只有经过远程授权才允许打印的log。\n\n#### android的属性控制开关\n\n利用属性来控制log开关时，最好可以在user版本的shell下使用，这对属性名称有讲究。\n\n查看系统代码 system/core/init/property_service.c，有关属性权限的限制。\n```c\nstruct {\n    const char *prefix;\n    unsigned int uid;\n    unsigned int gid;\n} property_perms[] = {\n    ...\n    {\"debug.\",  AID_SHELL,  0},\n    ...\n}\n```\n可以看出， adb shell只能对debug.开始的属性有读写权限，所以属性名不能随意写。\n\n设置完属性之后，可以在代码里面读取该属性值。\n```c\n#define DEBUG_PROP_NAME \"debug.log_switch\"\n\nchar debug_info[PROPERTY_VALUE_MAX];\n\nint is_log_enable() {\n    memset(debug_info, 0, PROPERTY_VALUE_MAX);\n    propery_get(DEBUG_PROP_NAME, debug_info);\n\n    return !strcmp(debug_info, \"on\");\n}\n```\n然后在需要打log的地方写\n```c\nif(is_log_enable()) {\n    LOGD(\"i am a log\");\n}\n```\n\n以上代码纯手打，没有经过编译，可能会有编译错误，仅提供一种log开关的思路。","slug":"switch-native-debug-on-off","published":1,"updated":"2019-01-03T02:48:56.348Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aanf4002nbiui0byci7on","content":"<p>调试本地代码的时候，有时候要加上一些log，特别是一些关键路径，但是生产的时候又不需要打印，有几个办法。</p>\n<h3 id=\"宏定义实现\"><a href=\"#宏定义实现\" class=\"headerlink\" title=\"宏定义实现\"></a>宏定义实现</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> DEBUG</span></span><br><span class=\"line\">LOGD(<span class=\"string\">\"i am a log\"</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>这种方法有个不好的地方是，程序一旦编译完了，就不能加修改了，特别是user版本出了状况，因为system分区是只读的。</p>\n<a id=\"more\"></a>\n<h3 id=\"用动态开关\"><a href=\"#用动态开关\" class=\"headerlink\" title=\"用动态开关\"></a>用动态开关</h3><p>用动态开关量，也有两种方法，一种是给出接口，给上一级打开或者关闭这个开关。</p>\n<h4 id=\"提供开关接口\"><a href=\"#提供开关接口\" class=\"headerlink\" title=\"提供开关接口\"></a>提供开关接口</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> enable_log = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">set_enable_log</span><span class=\"params\">(<span class=\"keyword\">int</span> enable)</span> </span>&#123;</span><br><span class=\"line\">    enable_log = enable;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">is_log_enable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> enable_log;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在需要加log的地方写：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(is_log_enable()) &#123;</span><br><span class=\"line\">    LOGD(<span class=\"string\">\"i am a log\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方法，适用于上层控制开关的方式，比如说只有经过远程授权才允许打印的log。</p>\n<h4 id=\"android的属性控制开关\"><a href=\"#android的属性控制开关\" class=\"headerlink\" title=\"android的属性控制开关\"></a>android的属性控制开关</h4><p>利用属性来控制log开关时，最好可以在user版本的shell下使用，这对属性名称有讲究。</p>\n<p>查看系统代码 system/core/init/property_service.c，有关属性权限的限制。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *prefix;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> uid;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> gid;</span><br><span class=\"line\">&#125; property_perms[] = &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#123;<span class=\"string\">\"debug.\"</span>,  AID_SHELL,  <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看出， adb shell只能对debug.开始的属性有读写权限，所以属性名不能随意写。</p>\n<p>设置完属性之后，可以在代码里面读取该属性值。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DEBUG_PROP_NAME <span class=\"meta-string\">\"debug.log_switch\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> debug_info[PROPERTY_VALUE_MAX];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">is_log_enable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(debug_info, <span class=\"number\">0</span>, PROPERTY_VALUE_MAX);</span><br><span class=\"line\">    propery_get(DEBUG_PROP_NAME, debug_info);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !<span class=\"built_in\">strcmp</span>(debug_info, <span class=\"string\">\"on\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后在需要打log的地方写<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(is_log_enable()) &#123;</span><br><span class=\"line\">    LOGD(<span class=\"string\">\"i am a log\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上代码纯手打，没有经过编译，可能会有编译错误，仅提供一种log开关的思路。</p>\n","site":{"data":{}},"excerpt":"<p>调试本地代码的时候，有时候要加上一些log，特别是一些关键路径，但是生产的时候又不需要打印，有几个办法。</p>\n<h3 id=\"宏定义实现\"><a href=\"#宏定义实现\" class=\"headerlink\" title=\"宏定义实现\"></a>宏定义实现</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> DEBUG</span></span><br><span class=\"line\">LOGD(<span class=\"string\">\"i am a log\"</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>这种方法有个不好的地方是，程序一旦编译完了，就不能加修改了，特别是user版本出了状况，因为system分区是只读的。</p>","more":"<h3 id=\"用动态开关\"><a href=\"#用动态开关\" class=\"headerlink\" title=\"用动态开关\"></a>用动态开关</h3><p>用动态开关量，也有两种方法，一种是给出接口，给上一级打开或者关闭这个开关。</p>\n<h4 id=\"提供开关接口\"><a href=\"#提供开关接口\" class=\"headerlink\" title=\"提供开关接口\"></a>提供开关接口</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> enable_log = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">set_enable_log</span><span class=\"params\">(<span class=\"keyword\">int</span> enable)</span> </span>&#123;</span><br><span class=\"line\">    enable_log = enable;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">is_log_enable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> enable_log;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在需要加log的地方写：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(is_log_enable()) &#123;</span><br><span class=\"line\">    LOGD(<span class=\"string\">\"i am a log\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方法，适用于上层控制开关的方式，比如说只有经过远程授权才允许打印的log。</p>\n<h4 id=\"android的属性控制开关\"><a href=\"#android的属性控制开关\" class=\"headerlink\" title=\"android的属性控制开关\"></a>android的属性控制开关</h4><p>利用属性来控制log开关时，最好可以在user版本的shell下使用，这对属性名称有讲究。</p>\n<p>查看系统代码 system/core/init/property_service.c，有关属性权限的限制。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *prefix;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> uid;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> gid;</span><br><span class=\"line\">&#125; property_perms[] = &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#123;<span class=\"string\">\"debug.\"</span>,  AID_SHELL,  <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看出， adb shell只能对debug.开始的属性有读写权限，所以属性名不能随意写。</p>\n<p>设置完属性之后，可以在代码里面读取该属性值。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DEBUG_PROP_NAME <span class=\"meta-string\">\"debug.log_switch\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> debug_info[PROPERTY_VALUE_MAX];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">is_log_enable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(debug_info, <span class=\"number\">0</span>, PROPERTY_VALUE_MAX);</span><br><span class=\"line\">    propery_get(DEBUG_PROP_NAME, debug_info);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !<span class=\"built_in\">strcmp</span>(debug_info, <span class=\"string\">\"on\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后在需要打log的地方写<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(is_log_enable()) &#123;</span><br><span class=\"line\">    LOGD(<span class=\"string\">\"i am a log\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上代码纯手打，没有经过编译，可能会有编译错误，仅提供一种log开关的思路。</p>"},{"title":"如何将react项目部署到spring boot项目","date":"2019-06-19T09:50:19.000Z","_content":"\n现在主流的开发方式是前后端分离，前端只管界面开发，后端只提供rest api接口，那如何将react构建好的网页部署到spring boot项目呢。\n\n首先，在spring boot项目的pom.xml里面要加入构建的插件。\n```xml\n<plugin>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-maven-plugin</artifactId>\n</plugin>\n<plugin>\n    <groupId>com.github.eirslett</groupId>\n    <artifactId>frontend-maven-plugin</artifactId>\n    <version>1.6</version>\n    <configuration>\n        <workingDirectory>[前端项目路径]</workingDirectory>\n        <installDirectory>target</installDirectory>\n    </configuration>\n    <executions>\n        <execution>\n            <id>install node and npm</id>\n            <goals>\n                <goal>install-node-and-npm</goal>\n            </goals>\n            <configuration>\n                <nodeVersion>v8.11.3</nodeVersion>\n                <npmVersion>5.6.0</npmVersion>\n            </configuration>\n        </execution>\n        <execution>\n            <id>npm install</id>\n            <goals>\n                <goal>npm</goal>\n            </goals>\n            <configuration>\n                <arguments>install</arguments>\n            </configuration>\n        </execution>\n        <execution>\n            <id>build front end</id>\n            <goals>\n                <goal>npm</goal>\n            </goals>\n            <configuration>\n                <arguments>[前端构建脚本]</arguments>\n            </configuration>\n        </execution>\n    </executions>\n</plugin>\n<plugin>\n    <artifactId>maven-antrun-plugin</artifactId>\n    <executions>\n        <execution>\n            <phase>generate-resources</phase>\n            <configuration>\n                <target>\n                    <copy todir=\"${project.build.directory}/classes/static\">\n                        <fileset dir=\"[前端构建结果路径]\" />\n                    </copy>\n                </target>\n            </configuration>\n            <goals>\n                <goal>run</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```\n\n上面有三个地方要注意：\n```\n<workingDirectory>[前端项目路径]</workingDirectory>\n```\n这里<b>前端项目路径</b>填你自己的前端路径。\n\n```\n<arguments>[前端构建脚本]</arguments>\n```\n<b>前端构建脚本</b>，填你前段项目的package.json下的构建脚本就行了，比如说'run build'\n\n```\n<fileset dir=\"[前端构建结果路径]\" />\n```\n这里的<b>前端构建结果路径</b>，填前端构建结果的路径，一般在<b>前端项目路径</b>下。\n\n\n然后，在spring boot目录下，执行命令：\n```bash\nmvn clean install\n```\n这条命令，会将前端项目构建好，并且将构建结果拷贝到spring boot的target/classes/static下面。\n\n然后运行spring boot项目，就能看到react项目可以渲染出来了。\n\n如果你的react是多页应用，并且又用了shiro等权限框架，可能要配置一下匿名访问的路径了，因为请求网页的路径，会要求登录。需要在application.yml里面修改shiro配置：\n```\n  shiro:\n    anonUrl: /**/*.html,/css/**,/js/**,/fonts/**,/img/**\n```\n","source":"_posts/react-spring-boot.md","raw":"---\ntitle: 如何将react项目部署到spring boot项目\ndate: 2019-06-19 17:50:19\ntags: react, spring boot\n---\n\n现在主流的开发方式是前后端分离，前端只管界面开发，后端只提供rest api接口，那如何将react构建好的网页部署到spring boot项目呢。\n\n首先，在spring boot项目的pom.xml里面要加入构建的插件。\n```xml\n<plugin>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-maven-plugin</artifactId>\n</plugin>\n<plugin>\n    <groupId>com.github.eirslett</groupId>\n    <artifactId>frontend-maven-plugin</artifactId>\n    <version>1.6</version>\n    <configuration>\n        <workingDirectory>[前端项目路径]</workingDirectory>\n        <installDirectory>target</installDirectory>\n    </configuration>\n    <executions>\n        <execution>\n            <id>install node and npm</id>\n            <goals>\n                <goal>install-node-and-npm</goal>\n            </goals>\n            <configuration>\n                <nodeVersion>v8.11.3</nodeVersion>\n                <npmVersion>5.6.0</npmVersion>\n            </configuration>\n        </execution>\n        <execution>\n            <id>npm install</id>\n            <goals>\n                <goal>npm</goal>\n            </goals>\n            <configuration>\n                <arguments>install</arguments>\n            </configuration>\n        </execution>\n        <execution>\n            <id>build front end</id>\n            <goals>\n                <goal>npm</goal>\n            </goals>\n            <configuration>\n                <arguments>[前端构建脚本]</arguments>\n            </configuration>\n        </execution>\n    </executions>\n</plugin>\n<plugin>\n    <artifactId>maven-antrun-plugin</artifactId>\n    <executions>\n        <execution>\n            <phase>generate-resources</phase>\n            <configuration>\n                <target>\n                    <copy todir=\"${project.build.directory}/classes/static\">\n                        <fileset dir=\"[前端构建结果路径]\" />\n                    </copy>\n                </target>\n            </configuration>\n            <goals>\n                <goal>run</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```\n\n上面有三个地方要注意：\n```\n<workingDirectory>[前端项目路径]</workingDirectory>\n```\n这里<b>前端项目路径</b>填你自己的前端路径。\n\n```\n<arguments>[前端构建脚本]</arguments>\n```\n<b>前端构建脚本</b>，填你前段项目的package.json下的构建脚本就行了，比如说'run build'\n\n```\n<fileset dir=\"[前端构建结果路径]\" />\n```\n这里的<b>前端构建结果路径</b>，填前端构建结果的路径，一般在<b>前端项目路径</b>下。\n\n\n然后，在spring boot目录下，执行命令：\n```bash\nmvn clean install\n```\n这条命令，会将前端项目构建好，并且将构建结果拷贝到spring boot的target/classes/static下面。\n\n然后运行spring boot项目，就能看到react项目可以渲染出来了。\n\n如果你的react是多页应用，并且又用了shiro等权限框架，可能要配置一下匿名访问的路径了，因为请求网页的路径，会要求登录。需要在application.yml里面修改shiro配置：\n```\n  shiro:\n    anonUrl: /**/*.html,/css/**,/js/**,/fonts/**,/img/**\n```\n","slug":"react-spring-boot","published":1,"updated":"2019-06-19T10:16:57.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aanf5002pbiui47i7k5pl","content":"<p>现在主流的开发方式是前后端分离，前端只管界面开发，后端只提供rest api接口，那如何将react构建好的网页部署到spring boot项目呢。</p>\n<p>首先，在spring boot项目的pom.xml里面要加入构建的插件。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.eirslett<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>frontend-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">workingDirectory</span>&gt;</span>[前端项目路径]<span class=\"tag\">&lt;/<span class=\"name\">workingDirectory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">installDirectory</span>&gt;</span>target<span class=\"tag\">&lt;/<span class=\"name\">installDirectory</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>install node and npm<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>install-node-and-npm<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">nodeVersion</span>&gt;</span>v8.11.3<span class=\"tag\">&lt;/<span class=\"name\">nodeVersion</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">npmVersion</span>&gt;</span>5.6.0<span class=\"tag\">&lt;/<span class=\"name\">npmVersion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>npm install<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>npm<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">arguments</span>&gt;</span>install<span class=\"tag\">&lt;/<span class=\"name\">arguments</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>build front end<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>npm<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">arguments</span>&gt;</span>[前端构建脚本]<span class=\"tag\">&lt;/<span class=\"name\">arguments</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-antrun-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>generate-resources<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">copy</span> <span class=\"attr\">todir</span>=<span class=\"string\">\"$&#123;project.build.directory&#125;/classes/static\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"[前端构建结果路径]\"</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">copy</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>run<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>上面有三个地方要注意：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;workingDirectory&gt;[前端项目路径]&lt;/workingDirectory&gt;</span><br></pre></td></tr></table></figure></p>\n<p>这里<b>前端项目路径</b>填你自己的前端路径。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;arguments&gt;[前端构建脚本]&lt;/arguments&gt;</span><br></pre></td></tr></table></figure>\n<p><b>前端构建脚本</b>，填你前段项目的package.json下的构建脚本就行了，比如说’run build’</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;fileset dir=&quot;[前端构建结果路径]&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<p>这里的<b>前端构建结果路径</b>，填前端构建结果的路径，一般在<b>前端项目路径</b>下。</p>\n<p>然后，在spring boot目录下，执行命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean install</span><br></pre></td></tr></table></figure></p>\n<p>这条命令，会将前端项目构建好，并且将构建结果拷贝到spring boot的target/classes/static下面。</p>\n<p>然后运行spring boot项目，就能看到react项目可以渲染出来了。</p>\n<p>如果你的react是多页应用，并且又用了shiro等权限框架，可能要配置一下匿名访问的路径了，因为请求网页的路径，会要求登录。需要在application.yml里面修改shiro配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shiro:</span><br><span class=\"line\">  anonUrl: /**/*.html,/css/**,/js/**,/fonts/**,/img/**</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>现在主流的开发方式是前后端分离，前端只管界面开发，后端只提供rest api接口，那如何将react构建好的网页部署到spring boot项目呢。</p>\n<p>首先，在spring boot项目的pom.xml里面要加入构建的插件。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.eirslett<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>frontend-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">workingDirectory</span>&gt;</span>[前端项目路径]<span class=\"tag\">&lt;/<span class=\"name\">workingDirectory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">installDirectory</span>&gt;</span>target<span class=\"tag\">&lt;/<span class=\"name\">installDirectory</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>install node and npm<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>install-node-and-npm<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">nodeVersion</span>&gt;</span>v8.11.3<span class=\"tag\">&lt;/<span class=\"name\">nodeVersion</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">npmVersion</span>&gt;</span>5.6.0<span class=\"tag\">&lt;/<span class=\"name\">npmVersion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>npm install<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>npm<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">arguments</span>&gt;</span>install<span class=\"tag\">&lt;/<span class=\"name\">arguments</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>build front end<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>npm<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">arguments</span>&gt;</span>[前端构建脚本]<span class=\"tag\">&lt;/<span class=\"name\">arguments</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-antrun-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>generate-resources<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">copy</span> <span class=\"attr\">todir</span>=<span class=\"string\">\"$&#123;project.build.directory&#125;/classes/static\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">fileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"[前端构建结果路径]\"</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">copy</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>run<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>上面有三个地方要注意：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;workingDirectory&gt;[前端项目路径]&lt;/workingDirectory&gt;</span><br></pre></td></tr></table></figure></p>\n<p>这里<b>前端项目路径</b>填你自己的前端路径。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;arguments&gt;[前端构建脚本]&lt;/arguments&gt;</span><br></pre></td></tr></table></figure>\n<p><b>前端构建脚本</b>，填你前段项目的package.json下的构建脚本就行了，比如说’run build’</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;fileset dir=&quot;[前端构建结果路径]&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<p>这里的<b>前端构建结果路径</b>，填前端构建结果的路径，一般在<b>前端项目路径</b>下。</p>\n<p>然后，在spring boot目录下，执行命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean install</span><br></pre></td></tr></table></figure></p>\n<p>这条命令，会将前端项目构建好，并且将构建结果拷贝到spring boot的target/classes/static下面。</p>\n<p>然后运行spring boot项目，就能看到react项目可以渲染出来了。</p>\n<p>如果你的react是多页应用，并且又用了shiro等权限框架，可能要配置一下匿名访问的路径了，因为请求网页的路径，会要求登录。需要在application.yml里面修改shiro配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shiro:</span><br><span class=\"line\">  anonUrl: /**/*.html,/css/**,/js/**,/fonts/**,/img/**</span><br></pre></td></tr></table></figure></p>\n"},{"title":"ubuntu利用update-alternatives配置java","date":"2016-11-15T11:32:21.000Z","_content":"\n利用Android Studio开发，经常会碰到JDK版本的切换问题，安装好新版本的[jdk](http://www.oracle.com/technetwork/java/javase/downloads/index.html)之后，需要先配置到可选项。\n```bash\nyinlijun@sj:~$ sudo update-alternatives --install /usr/bin/java java /opt/jdk1.8.0_101/bin/java 100\nupdate-alternatives: 警告: /etc/alternatives/java has been changed (manually or by a script); switching to manual updates only\nyinlijun@sj:~$ sudo update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_101/bin/javac 100\n```\n\n<!--more-->\n\n然后，选择默认的JDK版本：\n```bash\nyinlijun@sj:~$ sudo update-alternatives --config java\n有 3 个候选项可用于替换 java (提供 /usr/bin/java)。\n\n  选择       路径                                          优先级  状态\n------------------------------------------------------------\n  0            /opt/jdk1.6.0_37/bin/java                        10000     自动模式\n  1            /opt/jdk1.6.0_37/bin/java                        10000     手动模式\n  2            /opt/jdk1.8.0_101/bin/java                       100       手动模式\n  3            /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java   1051      手动模式\n\n要维持当前值[*]请按回车键，或者键入选择的编号：2\nupdate-alternatives: using /opt/jdk1.8.0_101/bin/java to provide /usr/bin/java (java) in 手动模式\nyinlijun@sj:~$ sudo update-alternatives --config javac\n有 3 个候选项可用于替换 javac (提供 /usr/bin/javac)。\n\n  选择       路径                                       优先级  状态\n------------------------------------------------------------\n  0            /opt/jdk1.6.0_37/bin/javac                    10000     自动模式\n  1            /opt/jdk1.6.0_37/bin/javac                    10000     手动模式\n  2            /opt/jdk1.8.0_101/bin/javac                   100       手动模式\n* 3            /usr/lib/jvm/java-7-openjdk-amd64/bin/javac   1051      手动模式\n\n要维持当前值[*]请按回车键，或者键入选择的编号：2\n```\n","source":"_posts/ubuntu利用update-alternatives配置java.md","raw":"---\ntitle: ubuntu利用update-alternatives配置java\ndate: 2016-11-15 19:32:21\ntags: [ubuntu, update-alternatives]\n---\n\n利用Android Studio开发，经常会碰到JDK版本的切换问题，安装好新版本的[jdk](http://www.oracle.com/technetwork/java/javase/downloads/index.html)之后，需要先配置到可选项。\n```bash\nyinlijun@sj:~$ sudo update-alternatives --install /usr/bin/java java /opt/jdk1.8.0_101/bin/java 100\nupdate-alternatives: 警告: /etc/alternatives/java has been changed (manually or by a script); switching to manual updates only\nyinlijun@sj:~$ sudo update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_101/bin/javac 100\n```\n\n<!--more-->\n\n然后，选择默认的JDK版本：\n```bash\nyinlijun@sj:~$ sudo update-alternatives --config java\n有 3 个候选项可用于替换 java (提供 /usr/bin/java)。\n\n  选择       路径                                          优先级  状态\n------------------------------------------------------------\n  0            /opt/jdk1.6.0_37/bin/java                        10000     自动模式\n  1            /opt/jdk1.6.0_37/bin/java                        10000     手动模式\n  2            /opt/jdk1.8.0_101/bin/java                       100       手动模式\n  3            /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java   1051      手动模式\n\n要维持当前值[*]请按回车键，或者键入选择的编号：2\nupdate-alternatives: using /opt/jdk1.8.0_101/bin/java to provide /usr/bin/java (java) in 手动模式\nyinlijun@sj:~$ sudo update-alternatives --config javac\n有 3 个候选项可用于替换 javac (提供 /usr/bin/javac)。\n\n  选择       路径                                       优先级  状态\n------------------------------------------------------------\n  0            /opt/jdk1.6.0_37/bin/javac                    10000     自动模式\n  1            /opt/jdk1.6.0_37/bin/javac                    10000     手动模式\n  2            /opt/jdk1.8.0_101/bin/javac                   100       手动模式\n* 3            /usr/lib/jvm/java-7-openjdk-amd64/bin/javac   1051      手动模式\n\n要维持当前值[*]请按回车键，或者键入选择的编号：2\n```\n","slug":"ubuntu利用update-alternatives配置java","published":1,"updated":"2019-01-03T02:48:56.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aanf7002sbiuilm6ss4tu","content":"<p>利用Android Studio开发，经常会碰到JDK版本的切换问题，安装好新版本的<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">jdk</a>之后，需要先配置到可选项。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yinlijun@sj:~$ sudo update-alternatives --install /usr/bin/java java /opt/jdk1.8.0_101/bin/java 100</span><br><span class=\"line\">update-alternatives: 警告: /etc/alternatives/java has been changed (manually or by a script); switching to manual updates only</span><br><span class=\"line\">yinlijun@sj:~$ sudo update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_101/bin/javac 100</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>然后，选择默认的JDK版本：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yinlijun@sj:~$ sudo update-alternatives --config java</span><br><span class=\"line\">有 3 个候选项可用于替换 java (提供 /usr/bin/java)。</span><br><span class=\"line\"></span><br><span class=\"line\">  选择       路径                                          优先级  状态</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">  0            /opt/jdk1.6.0_37/bin/java                        10000     自动模式</span><br><span class=\"line\">  1            /opt/jdk1.6.0_37/bin/java                        10000     手动模式</span><br><span class=\"line\">  2            /opt/jdk1.8.0_101/bin/java                       100       手动模式</span><br><span class=\"line\">  3            /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java   1051      手动模式</span><br><span class=\"line\"></span><br><span class=\"line\">要维持当前值[*]请按回车键，或者键入选择的编号：2</span><br><span class=\"line\">update-alternatives: using /opt/jdk1.8.0_101/bin/java to provide /usr/bin/java (java) <span class=\"keyword\">in</span> 手动模式</span><br><span class=\"line\">yinlijun@sj:~$ sudo update-alternatives --config javac</span><br><span class=\"line\">有 3 个候选项可用于替换 javac (提供 /usr/bin/javac)。</span><br><span class=\"line\"></span><br><span class=\"line\">  选择       路径                                       优先级  状态</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">  0            /opt/jdk1.6.0_37/bin/javac                    10000     自动模式</span><br><span class=\"line\">  1            /opt/jdk1.6.0_37/bin/javac                    10000     手动模式</span><br><span class=\"line\">  2            /opt/jdk1.8.0_101/bin/javac                   100       手动模式</span><br><span class=\"line\">* 3            /usr/lib/jvm/java-7-openjdk-amd64/bin/javac   1051      手动模式</span><br><span class=\"line\"></span><br><span class=\"line\">要维持当前值[*]请按回车键，或者键入选择的编号：2</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>利用Android Studio开发，经常会碰到JDK版本的切换问题，安装好新版本的<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">jdk</a>之后，需要先配置到可选项。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yinlijun@sj:~$ sudo update-alternatives --install /usr/bin/java java /opt/jdk1.8.0_101/bin/java 100</span><br><span class=\"line\">update-alternatives: 警告: /etc/alternatives/java has been changed (manually or by a script); switching to manual updates only</span><br><span class=\"line\">yinlijun@sj:~$ sudo update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_101/bin/javac 100</span><br></pre></td></tr></table></figure></p>","more":"<p>然后，选择默认的JDK版本：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yinlijun@sj:~$ sudo update-alternatives --config java</span><br><span class=\"line\">有 3 个候选项可用于替换 java (提供 /usr/bin/java)。</span><br><span class=\"line\"></span><br><span class=\"line\">  选择       路径                                          优先级  状态</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">  0            /opt/jdk1.6.0_37/bin/java                        10000     自动模式</span><br><span class=\"line\">  1            /opt/jdk1.6.0_37/bin/java                        10000     手动模式</span><br><span class=\"line\">  2            /opt/jdk1.8.0_101/bin/java                       100       手动模式</span><br><span class=\"line\">  3            /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java   1051      手动模式</span><br><span class=\"line\"></span><br><span class=\"line\">要维持当前值[*]请按回车键，或者键入选择的编号：2</span><br><span class=\"line\">update-alternatives: using /opt/jdk1.8.0_101/bin/java to provide /usr/bin/java (java) <span class=\"keyword\">in</span> 手动模式</span><br><span class=\"line\">yinlijun@sj:~$ sudo update-alternatives --config javac</span><br><span class=\"line\">有 3 个候选项可用于替换 javac (提供 /usr/bin/javac)。</span><br><span class=\"line\"></span><br><span class=\"line\">  选择       路径                                       优先级  状态</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">  0            /opt/jdk1.6.0_37/bin/javac                    10000     自动模式</span><br><span class=\"line\">  1            /opt/jdk1.6.0_37/bin/javac                    10000     手动模式</span><br><span class=\"line\">  2            /opt/jdk1.8.0_101/bin/javac                   100       手动模式</span><br><span class=\"line\">* 3            /usr/lib/jvm/java-7-openjdk-amd64/bin/javac   1051      手动模式</span><br><span class=\"line\"></span><br><span class=\"line\">要维持当前值[*]请按回车键，或者键入选择的编号：2</span><br></pre></td></tr></table></figure></p>"},{"title":"ubuntu编译android 6.0源代码环境搭建","date":"2016-11-16T01:04:37.000Z","_content":"\n\n## 安装jdk\n```bash\nsudo apt-get install openjdk-7-jdk openjdk-7-jre \n```\n如果之前系统是其他版本的JDK，需要把环境变量切换过来。\n\n<!--more-->\n\njdk版本错误会导致编译错误，如\n```\nprebuilts/sdk/api/23.txt:41822: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)\nprebuilts/sdk/api/23.txt:41823: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(MarginLayoutParams)\nprebuilts/sdk/api/23.txt:41824: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)\nprebuilts/sdk/api/23.txt:42895: error 9: Removed public constructor java.io.ObjectInputStream.GetField.ObjectInputStream.GetField()\nprebuilts/sdk/api/23.txt:42955: error 9: Removed public constructor java.io.ObjectOutputStream.PutField.ObjectOutputStream.PutField()\nprebuilts/sdk/api/23.txt:43623: error 9: Removed public constructor java.lang.Character.Subset.Character.Subset(String)\nprebuilts/sdk/api/23.txt:46730: error 9: Removed public constructor java.nio.channels.Pipe.SinkChannel.Pipe.SinkChannel(SelectorProvider)\nprebuilts/sdk/api/23.txt:46735: error 9: Removed public constructor java.nio.channels.Pipe.SourceChannel.Pipe.SourceChannel(SelectorProvider)\nprebuilts/sdk/api/23.txt:47370: error 9: Removed public constructor java.security.KeyStore.Builder.KeyStore.Builder()\nprebuilts/sdk/api/23.txt:47379: error 9: Removed public constructor java.security.KeyStore.CallbackHandlerProtection.KeyStore.CallbackHandlerProtection(CallbackHandler)\nprebuilts/sdk/api/23.txt:47391: error 9: Removed public constructor java.security.KeyStore.PasswordProtection.KeyStore.PasswordProtection(char)\n```\n\n## 安装其他工具包\n```bash\nsudo apt-get install git gitg gnupg flex bison gperf build-essential  zip curl libc6-dev  libncurses5-dev:i386 x11proto-core-dev  libx11-dev:i386 libreadline6-dev:i386   libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown\tlibxml2-utils xsltproc zlib1g-dev:i386 libarchive-zip-perl \n```\n\n","source":"_posts/ubuntu编译android源代码环境搭建.md","raw":"---\ntitle: ubuntu编译android 6.0源代码环境搭建\ntags:\n  - ubuntu\n  - android\n  - 环境搭建\ndate: 2016-11-16 09:04:37\n---\n\n\n## 安装jdk\n```bash\nsudo apt-get install openjdk-7-jdk openjdk-7-jre \n```\n如果之前系统是其他版本的JDK，需要把环境变量切换过来。\n\n<!--more-->\n\njdk版本错误会导致编译错误，如\n```\nprebuilts/sdk/api/23.txt:41822: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)\nprebuilts/sdk/api/23.txt:41823: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(MarginLayoutParams)\nprebuilts/sdk/api/23.txt:41824: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)\nprebuilts/sdk/api/23.txt:42895: error 9: Removed public constructor java.io.ObjectInputStream.GetField.ObjectInputStream.GetField()\nprebuilts/sdk/api/23.txt:42955: error 9: Removed public constructor java.io.ObjectOutputStream.PutField.ObjectOutputStream.PutField()\nprebuilts/sdk/api/23.txt:43623: error 9: Removed public constructor java.lang.Character.Subset.Character.Subset(String)\nprebuilts/sdk/api/23.txt:46730: error 9: Removed public constructor java.nio.channels.Pipe.SinkChannel.Pipe.SinkChannel(SelectorProvider)\nprebuilts/sdk/api/23.txt:46735: error 9: Removed public constructor java.nio.channels.Pipe.SourceChannel.Pipe.SourceChannel(SelectorProvider)\nprebuilts/sdk/api/23.txt:47370: error 9: Removed public constructor java.security.KeyStore.Builder.KeyStore.Builder()\nprebuilts/sdk/api/23.txt:47379: error 9: Removed public constructor java.security.KeyStore.CallbackHandlerProtection.KeyStore.CallbackHandlerProtection(CallbackHandler)\nprebuilts/sdk/api/23.txt:47391: error 9: Removed public constructor java.security.KeyStore.PasswordProtection.KeyStore.PasswordProtection(char)\n```\n\n## 安装其他工具包\n```bash\nsudo apt-get install git gitg gnupg flex bison gperf build-essential  zip curl libc6-dev  libncurses5-dev:i386 x11proto-core-dev  libx11-dev:i386 libreadline6-dev:i386   libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown\tlibxml2-utils xsltproc zlib1g-dev:i386 libarchive-zip-perl \n```\n\n","slug":"ubuntu编译android源代码环境搭建","published":1,"updated":"2019-01-03T02:48:56.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aanf8002vbiui8h7kp4rq","content":"<h2 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install openjdk-7-jdk openjdk-7-jre</span><br></pre></td></tr></table></figure>\n<p>如果之前系统是其他版本的JDK，需要把环境变量切换过来。</p>\n<a id=\"more\"></a>\n<p>jdk版本错误会导致编译错误，如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prebuilts/sdk/api/23.txt:41822: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)</span><br><span class=\"line\">prebuilts/sdk/api/23.txt:41823: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(MarginLayoutParams)</span><br><span class=\"line\">prebuilts/sdk/api/23.txt:41824: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)</span><br><span class=\"line\">prebuilts/sdk/api/23.txt:42895: error 9: Removed public constructor java.io.ObjectInputStream.GetField.ObjectInputStream.GetField()</span><br><span class=\"line\">prebuilts/sdk/api/23.txt:42955: error 9: Removed public constructor java.io.ObjectOutputStream.PutField.ObjectOutputStream.PutField()</span><br><span class=\"line\">prebuilts/sdk/api/23.txt:43623: error 9: Removed public constructor java.lang.Character.Subset.Character.Subset(String)</span><br><span class=\"line\">prebuilts/sdk/api/23.txt:46730: error 9: Removed public constructor java.nio.channels.Pipe.SinkChannel.Pipe.SinkChannel(SelectorProvider)</span><br><span class=\"line\">prebuilts/sdk/api/23.txt:46735: error 9: Removed public constructor java.nio.channels.Pipe.SourceChannel.Pipe.SourceChannel(SelectorProvider)</span><br><span class=\"line\">prebuilts/sdk/api/23.txt:47370: error 9: Removed public constructor java.security.KeyStore.Builder.KeyStore.Builder()</span><br><span class=\"line\">prebuilts/sdk/api/23.txt:47379: error 9: Removed public constructor java.security.KeyStore.CallbackHandlerProtection.KeyStore.CallbackHandlerProtection(CallbackHandler)</span><br><span class=\"line\">prebuilts/sdk/api/23.txt:47391: error 9: Removed public constructor java.security.KeyStore.PasswordProtection.KeyStore.PasswordProtection(char)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装其他工具包\"><a href=\"#安装其他工具包\" class=\"headerlink\" title=\"安装其他工具包\"></a>安装其他工具包</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git gitg gnupg flex bison gperf build-essential  zip curl libc6-dev  libncurses5-dev:i386 x11proto-core-dev  libx11-dev:i386 libreadline6-dev:i386   libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown\tlibxml2-utils xsltproc zlib1g-dev:i386 libarchive-zip-perl</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install openjdk-7-jdk openjdk-7-jre</span><br></pre></td></tr></table></figure>\n<p>如果之前系统是其他版本的JDK，需要把环境变量切换过来。</p>","more":"<p>jdk版本错误会导致编译错误，如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prebuilts/sdk/api/23.txt:41822: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)</span><br><span class=\"line\">prebuilts/sdk/api/23.txt:41823: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(MarginLayoutParams)</span><br><span class=\"line\">prebuilts/sdk/api/23.txt:41824: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)</span><br><span class=\"line\">prebuilts/sdk/api/23.txt:42895: error 9: Removed public constructor java.io.ObjectInputStream.GetField.ObjectInputStream.GetField()</span><br><span class=\"line\">prebuilts/sdk/api/23.txt:42955: error 9: Removed public constructor java.io.ObjectOutputStream.PutField.ObjectOutputStream.PutField()</span><br><span class=\"line\">prebuilts/sdk/api/23.txt:43623: error 9: Removed public constructor java.lang.Character.Subset.Character.Subset(String)</span><br><span class=\"line\">prebuilts/sdk/api/23.txt:46730: error 9: Removed public constructor java.nio.channels.Pipe.SinkChannel.Pipe.SinkChannel(SelectorProvider)</span><br><span class=\"line\">prebuilts/sdk/api/23.txt:46735: error 9: Removed public constructor java.nio.channels.Pipe.SourceChannel.Pipe.SourceChannel(SelectorProvider)</span><br><span class=\"line\">prebuilts/sdk/api/23.txt:47370: error 9: Removed public constructor java.security.KeyStore.Builder.KeyStore.Builder()</span><br><span class=\"line\">prebuilts/sdk/api/23.txt:47379: error 9: Removed public constructor java.security.KeyStore.CallbackHandlerProtection.KeyStore.CallbackHandlerProtection(CallbackHandler)</span><br><span class=\"line\">prebuilts/sdk/api/23.txt:47391: error 9: Removed public constructor java.security.KeyStore.PasswordProtection.KeyStore.PasswordProtection(char)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装其他工具包\"><a href=\"#安装其他工具包\" class=\"headerlink\" title=\"安装其他工具包\"></a>安装其他工具包</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git gitg gnupg flex bison gperf build-essential  zip curl libc6-dev  libncurses5-dev:i386 x11proto-core-dev  libx11-dev:i386 libreadline6-dev:i386   libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown\tlibxml2-utils xsltproc zlib1g-dev:i386 libarchive-zip-perl</span><br></pre></td></tr></table></figure>"},{"title":"windows下文件路径太深，无法删除解决办法","date":"2016-11-08T10:02:04.000Z","_content":"\nwindows下npm开发时，有时候node_modules/下的目录嵌套太深，导致无法删除项目。\n\nnpm社区贡献了一个工具[windows-node-deps-deleter](https://www.npmjs.com/package/windows-node-deps-deleter)可供删除这样的目录。\n\n<!--more-->\n\n```\nE:\\vscode>npm install -g windows-node-deps-deleter\nC:\\Users\\xx\\AppData\\Roaming\\npm\\wnddel -> C:\\Users\\xx\\AppData\\Roaming\\npm\\no\nde_modules\\windows-node-deps-deleter\\wnddel.js\nwindows-node-deps-deleter@0.1.1 C:\\Users\\xx\\AppData\\Roaming\\npm\\node_modules\\w\nindows-node-deps-deleter\n└── fs-extra@0.13.0 (ncp@1.0.1, jsonfile@2.4.0, rimraf@2.5.4)\n\nE:\\vscode>wnddel react-todo-list\nDeleting \"react-todo-list\" ...\n\"react-todo-list\" deleted.\n```\n\n参考：[windows-node-deps-delete](https://www.npmjs.com/package/windows-node-deps-deleter#readme)\n","source":"_posts/windows下文件路径太深，无法删除解决办法.md","raw":"---\ntitle: windows下文件路径太深，无法删除解决办法\ndate: 2016-11-8 18:02:04\ntags: [windows, npm]\n---\n\nwindows下npm开发时，有时候node_modules/下的目录嵌套太深，导致无法删除项目。\n\nnpm社区贡献了一个工具[windows-node-deps-deleter](https://www.npmjs.com/package/windows-node-deps-deleter)可供删除这样的目录。\n\n<!--more-->\n\n```\nE:\\vscode>npm install -g windows-node-deps-deleter\nC:\\Users\\xx\\AppData\\Roaming\\npm\\wnddel -> C:\\Users\\xx\\AppData\\Roaming\\npm\\no\nde_modules\\windows-node-deps-deleter\\wnddel.js\nwindows-node-deps-deleter@0.1.1 C:\\Users\\xx\\AppData\\Roaming\\npm\\node_modules\\w\nindows-node-deps-deleter\n└── fs-extra@0.13.0 (ncp@1.0.1, jsonfile@2.4.0, rimraf@2.5.4)\n\nE:\\vscode>wnddel react-todo-list\nDeleting \"react-todo-list\" ...\n\"react-todo-list\" deleted.\n```\n\n参考：[windows-node-deps-delete](https://www.npmjs.com/package/windows-node-deps-deleter#readme)\n","slug":"windows下文件路径太深，无法删除解决办法","published":1,"updated":"2019-01-03T02:48:56.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aanfa002zbiui7dld2mkm","content":"<p>windows下npm开发时，有时候node_modules/下的目录嵌套太深，导致无法删除项目。</p>\n<p>npm社区贡献了一个工具<a href=\"https://www.npmjs.com/package/windows-node-deps-deleter\" target=\"_blank\" rel=\"noopener\">windows-node-deps-deleter</a>可供删除这样的目录。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E:\\vscode&gt;npm install -g windows-node-deps-deleter</span><br><span class=\"line\">C:\\Users\\xx\\AppData\\Roaming\\npm\\wnddel -&gt; C:\\Users\\xx\\AppData\\Roaming\\npm\\no</span><br><span class=\"line\">de_modules\\windows-node-deps-deleter\\wnddel.js</span><br><span class=\"line\">windows-node-deps-deleter@0.1.1 C:\\Users\\xx\\AppData\\Roaming\\npm\\node_modules\\w</span><br><span class=\"line\">indows-node-deps-deleter</span><br><span class=\"line\">└── fs-extra@0.13.0 (ncp@1.0.1, jsonfile@2.4.0, rimraf@2.5.4)</span><br><span class=\"line\"></span><br><span class=\"line\">E:\\vscode&gt;wnddel react-todo-list</span><br><span class=\"line\">Deleting &quot;react-todo-list&quot; ...</span><br><span class=\"line\">&quot;react-todo-list&quot; deleted.</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://www.npmjs.com/package/windows-node-deps-deleter#readme\" target=\"_blank\" rel=\"noopener\">windows-node-deps-delete</a></p>\n","site":{"data":{}},"excerpt":"<p>windows下npm开发时，有时候node_modules/下的目录嵌套太深，导致无法删除项目。</p>\n<p>npm社区贡献了一个工具<a href=\"https://www.npmjs.com/package/windows-node-deps-deleter\" target=\"_blank\" rel=\"noopener\">windows-node-deps-deleter</a>可供删除这样的目录。</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E:\\vscode&gt;npm install -g windows-node-deps-deleter</span><br><span class=\"line\">C:\\Users\\xx\\AppData\\Roaming\\npm\\wnddel -&gt; C:\\Users\\xx\\AppData\\Roaming\\npm\\no</span><br><span class=\"line\">de_modules\\windows-node-deps-deleter\\wnddel.js</span><br><span class=\"line\">windows-node-deps-deleter@0.1.1 C:\\Users\\xx\\AppData\\Roaming\\npm\\node_modules\\w</span><br><span class=\"line\">indows-node-deps-deleter</span><br><span class=\"line\">└── fs-extra@0.13.0 (ncp@1.0.1, jsonfile@2.4.0, rimraf@2.5.4)</span><br><span class=\"line\"></span><br><span class=\"line\">E:\\vscode&gt;wnddel react-todo-list</span><br><span class=\"line\">Deleting &quot;react-todo-list&quot; ...</span><br><span class=\"line\">&quot;react-todo-list&quot; deleted.</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://www.npmjs.com/package/windows-node-deps-deleter#readme\" target=\"_blank\" rel=\"noopener\">windows-node-deps-delete</a></p>"},{"title":"windows配置mongdb记录","date":"2016-11-09T09:55:51.000Z","_content":"\n刚给windows电脑配置了mongdb记录一下。\n\n- 前往[官网](https://www.mongodb.com/download-center)下载合适的安装包，我选择的是msi安装包，也可以选择下载zip包。\n\n- 运行msi安装包（默认安装在C盘，没找到在哪里可以修改盘符）。\n\n- 在D:\\下创建好相关文件夹\n![这里写图片描述](http://img.blog.csdn.net/20161109194149759)\n\n<!--more-->\n\n- 打开命令提示符，进入到mongodb安装文件夹下的bin目录\n![这里写图片描述](http://img.blog.csdn.net/20161109194331090)\n\n- 输入如下命令，注册MongoDB服务 \n\n```bash\n mongod.exe --logpath D:\\MongoDB\\data\\log\\MongoDB.log --logappend --dbpath D:\\MongoDB\\data\\db --directoryperdb --storageEngin=mmappv1 --serviceName MongoDB --install\n```\n\n![这里写图片描述](http://img.blog.csdn.net/20161109194436279)\n\n- 启动MongoDB服务\n\n```bash\n net start MongoDB\n```\n\n![这里写图片描述](http://img.blog.csdn.net/20161109194520874)\n","source":"_posts/windows配置mongdb记录.md","raw":"---\ntitle: windows配置mongdb记录\ndate: 2016-11-9 17:55:51\ntags: [windows, mongodb]\n---\n\n刚给windows电脑配置了mongdb记录一下。\n\n- 前往[官网](https://www.mongodb.com/download-center)下载合适的安装包，我选择的是msi安装包，也可以选择下载zip包。\n\n- 运行msi安装包（默认安装在C盘，没找到在哪里可以修改盘符）。\n\n- 在D:\\下创建好相关文件夹\n![这里写图片描述](http://img.blog.csdn.net/20161109194149759)\n\n<!--more-->\n\n- 打开命令提示符，进入到mongodb安装文件夹下的bin目录\n![这里写图片描述](http://img.blog.csdn.net/20161109194331090)\n\n- 输入如下命令，注册MongoDB服务 \n\n```bash\n mongod.exe --logpath D:\\MongoDB\\data\\log\\MongoDB.log --logappend --dbpath D:\\MongoDB\\data\\db --directoryperdb --storageEngin=mmappv1 --serviceName MongoDB --install\n```\n\n![这里写图片描述](http://img.blog.csdn.net/20161109194436279)\n\n- 启动MongoDB服务\n\n```bash\n net start MongoDB\n```\n\n![这里写图片描述](http://img.blog.csdn.net/20161109194520874)\n","slug":"windows配置mongdb记录","published":1,"updated":"2019-01-03T02:48:56.344Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aanfb0031biuivfccginh","content":"<p>刚给windows电脑配置了mongdb记录一下。</p>\n<ul>\n<li><p>前往<a href=\"https://www.mongodb.com/download-center\" target=\"_blank\" rel=\"noopener\">官网</a>下载合适的安装包，我选择的是msi安装包，也可以选择下载zip包。</p>\n</li>\n<li><p>运行msi安装包（默认安装在C盘，没找到在哪里可以修改盘符）。</p>\n</li>\n<li><p>在D:\\下创建好相关文件夹<br><img src=\"http://img.blog.csdn.net/20161109194149759\" alt=\"这里写图片描述\"></p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>打开命令提示符，进入到mongodb安装文件夹下的bin目录<br><img src=\"http://img.blog.csdn.net/20161109194331090\" alt=\"这里写图片描述\"></p>\n</li>\n<li><p>输入如下命令，注册MongoDB服务 </p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod.exe --logpath D:\\MongoDB\\data\\<span class=\"built_in\">log</span>\\MongoDB.log --logappend --dbpath D:\\MongoDB\\data\\db --directoryperdb --storageEngin=mmappv1 --serviceName MongoDB --install</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161109194436279\" alt=\"这里写图片描述\"></p>\n<ul>\n<li>启动MongoDB服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net start MongoDB</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161109194520874\" alt=\"这里写图片描述\"></p>\n","site":{"data":{}},"excerpt":"<p>刚给windows电脑配置了mongdb记录一下。</p>\n<ul>\n<li><p>前往<a href=\"https://www.mongodb.com/download-center\" target=\"_blank\" rel=\"noopener\">官网</a>下载合适的安装包，我选择的是msi安装包，也可以选择下载zip包。</p>\n</li>\n<li><p>运行msi安装包（默认安装在C盘，没找到在哪里可以修改盘符）。</p>\n</li>\n<li><p>在D:\\下创建好相关文件夹<br><img src=\"http://img.blog.csdn.net/20161109194149759\" alt=\"这里写图片描述\"></p>\n</li>\n</ul>","more":"<ul>\n<li><p>打开命令提示符，进入到mongodb安装文件夹下的bin目录<br><img src=\"http://img.blog.csdn.net/20161109194331090\" alt=\"这里写图片描述\"></p>\n</li>\n<li><p>输入如下命令，注册MongoDB服务 </p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod.exe --logpath D:\\MongoDB\\data\\<span class=\"built_in\">log</span>\\MongoDB.log --logappend --dbpath D:\\MongoDB\\data\\db --directoryperdb --storageEngin=mmappv1 --serviceName MongoDB --install</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161109194436279\" alt=\"这里写图片描述\"></p>\n<ul>\n<li>启动MongoDB服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net start MongoDB</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161109194520874\" alt=\"这里写图片描述\"></p>"},{"title":"ubuntu 16.04 编译android填坑记录","date":"2018-04-26T09:05:30.000Z","_content":"\n实在受不了ubuntu 12.04了，于是更新到了16.04，但是重新编译android ASOP的时候出了一些状况，在此记录一下。\n\n#### java丢失\n\n重新安装openJDK 8\n\n```bash\nsudo apt-get install openjdk-8-jre\nsudo apt-get install openjdk-8-jdk-headless\n```\n<!-- more -->\n\n不要安装openJDK 9，会报错。\n\n#### make版本变成了4.1\n\n编译的时候报错:\n```\nbuild/core/prebuilt.mk:91: *** recipe commences before first target. Stop.\n```\n\n这是因为make版本错误，下载make v3.81代码编译。打开 [http://ftp.gnu.org/gnu/make/](http://ftp.gnu.org/gnu/make/)\n\n选择make-3.81.tar.gz下载，执行解压、编译、安装步骤：\n```\ntar zxvf make-3.81.tar.gz\ncd make-3.81\nsudo ./configure \nsudo make \nsudo make install\n```\n\n执行完以后，重新开一个终端，检查make版本。\n```\nmake -v\n```\n成功就会提示\n```\nGNU Make 3.81\nCopyright (C) 2006  Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.\nThere is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A\nPARTICULAR PURPOSE.\n```\n\n","source":"_posts/ubuntu-16-04-android-compile.md","raw":"---\ntitle: ubuntu 16.04 编译android填坑记录\ndate: 2018-04-26 17:05:30\ntags: [ubuntu, android, jdk, make]\n---\n\n实在受不了ubuntu 12.04了，于是更新到了16.04，但是重新编译android ASOP的时候出了一些状况，在此记录一下。\n\n#### java丢失\n\n重新安装openJDK 8\n\n```bash\nsudo apt-get install openjdk-8-jre\nsudo apt-get install openjdk-8-jdk-headless\n```\n<!-- more -->\n\n不要安装openJDK 9，会报错。\n\n#### make版本变成了4.1\n\n编译的时候报错:\n```\nbuild/core/prebuilt.mk:91: *** recipe commences before first target. Stop.\n```\n\n这是因为make版本错误，下载make v3.81代码编译。打开 [http://ftp.gnu.org/gnu/make/](http://ftp.gnu.org/gnu/make/)\n\n选择make-3.81.tar.gz下载，执行解压、编译、安装步骤：\n```\ntar zxvf make-3.81.tar.gz\ncd make-3.81\nsudo ./configure \nsudo make \nsudo make install\n```\n\n执行完以后，重新开一个终端，检查make版本。\n```\nmake -v\n```\n成功就会提示\n```\nGNU Make 3.81\nCopyright (C) 2006  Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.\nThere is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A\nPARTICULAR PURPOSE.\n```\n\n","slug":"ubuntu-16-04-android-compile","published":1,"updated":"2019-01-03T02:48:56.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aanfc0034biui6f60l3vc","content":"<p>实在受不了ubuntu 12.04了，于是更新到了16.04，但是重新编译android ASOP的时候出了一些状况，在此记录一下。</p>\n<h4 id=\"java丢失\"><a href=\"#java丢失\" class=\"headerlink\" title=\"java丢失\"></a>java丢失</h4><p>重新安装openJDK 8</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install openjdk-8-jre</span><br><span class=\"line\">sudo apt-get install openjdk-8-jdk-headless</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>不要安装openJDK 9，会报错。</p>\n<h4 id=\"make版本变成了4-1\"><a href=\"#make版本变成了4-1\" class=\"headerlink\" title=\"make版本变成了4.1\"></a>make版本变成了4.1</h4><p>编译的时候报错:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">build/core/prebuilt.mk:91: *** recipe commences before first target. Stop.</span><br></pre></td></tr></table></figure></p>\n<p>这是因为make版本错误，下载make v3.81代码编译。打开 <a href=\"http://ftp.gnu.org/gnu/make/\" target=\"_blank\" rel=\"noopener\">http://ftp.gnu.org/gnu/make/</a></p>\n<p>选择make-3.81.tar.gz下载，执行解压、编译、安装步骤：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf make-3.81.tar.gz</span><br><span class=\"line\">cd make-3.81</span><br><span class=\"line\">sudo ./configure </span><br><span class=\"line\">sudo make </span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure></p>\n<p>执行完以后，重新开一个终端，检查make版本。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make -v</span><br></pre></td></tr></table></figure></p>\n<p>成功就会提示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GNU Make 3.81</span><br><span class=\"line\">Copyright (C) 2006  Free Software Foundation, Inc.</span><br><span class=\"line\">This is free software; see the source for copying conditions.</span><br><span class=\"line\">There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A</span><br><span class=\"line\">PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>实在受不了ubuntu 12.04了，于是更新到了16.04，但是重新编译android ASOP的时候出了一些状况，在此记录一下。</p>\n<h4 id=\"java丢失\"><a href=\"#java丢失\" class=\"headerlink\" title=\"java丢失\"></a>java丢失</h4><p>重新安装openJDK 8</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install openjdk-8-jre</span><br><span class=\"line\">sudo apt-get install openjdk-8-jdk-headless</span><br></pre></td></tr></table></figure>","more":"<p>不要安装openJDK 9，会报错。</p>\n<h4 id=\"make版本变成了4-1\"><a href=\"#make版本变成了4-1\" class=\"headerlink\" title=\"make版本变成了4.1\"></a>make版本变成了4.1</h4><p>编译的时候报错:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">build/core/prebuilt.mk:91: *** recipe commences before first target. Stop.</span><br></pre></td></tr></table></figure></p>\n<p>这是因为make版本错误，下载make v3.81代码编译。打开 <a href=\"http://ftp.gnu.org/gnu/make/\" target=\"_blank\" rel=\"noopener\">http://ftp.gnu.org/gnu/make/</a></p>\n<p>选择make-3.81.tar.gz下载，执行解压、编译、安装步骤：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf make-3.81.tar.gz</span><br><span class=\"line\">cd make-3.81</span><br><span class=\"line\">sudo ./configure </span><br><span class=\"line\">sudo make </span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure></p>\n<p>执行完以后，重新开一个终端，检查make版本。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make -v</span><br></pre></td></tr></table></figure></p>\n<p>成功就会提示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GNU Make 3.81</span><br><span class=\"line\">Copyright (C) 2006  Free Software Foundation, Inc.</span><br><span class=\"line\">This is free software; see the source for copying conditions.</span><br><span class=\"line\">There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A</span><br><span class=\"line\">PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure></p>"},{"title":"CSS权威值南-笔记","date":"2016-09-06T10:04:19.000Z","_content":"\n## 第一章 css和文档\n\n-  文档内定义样式\n\n        <style type=\"text/css\">\n            @import url(sheet2.css)\n            h1 {color: maroon;}\n        </style>\n\n-   引入css文件\n\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"sheet1.css\" media=\"all\" />\n\n<!--more-->\n\n## 第二章 选择器\n\n- ID选择器和指定id的属性选择器不是一回事，h1#page-title和h1[id=\"page-title\"]之间有差别。\n- p.warning和p[class~=\"warning\"]是等价的，但是p[class=\"warning\"]匹配只有一个class的p元素。\n\n    - 类似的还有[foo^=\"bar\"] 选择foo属性值以bar开头的所有元素\n    - [foo$=\"bar\"] 选择foo属性值以bar结尾的所有元素\n    - [foo*=\"bar\"] 选择foo属性值中含有bar子串的所有元素\n\n- 后代选择器中，两个元素之间的层次间隔可以是无限的，如果想匹配直接相连的父子元素，可以使用子结合符\">\"\n\n- 兄弟元素选择器 h1 +  p {margin-top: 0}\n\n- 伪类选择器，伪类的顺序很重要 link-visited-focus-hover-active\n\n    - 连接伪类\n        - :link 未访问的超连接\n        - :visited  已访问的超连接\n\n    - 动态伪类\n        - :focus 拥有焦点的元素（可以接受键盘输入或者能已某种方式激活的元素）\n        - :hover 鼠标指针悬停的元素\n        - :active 用户输入激活的元素\n\n    - 静态伪类\n        - :first-child 第一个子元素\n        - :first-letter 第一个字母\n        - :first-line 第一行\n        - :lang(fr) 根据语言选择\n    - :first-letter和:first-line只能用于标记或段落之类的块元素，不能用于超连接等行内元素。\n\n## 第三章 结构和层叠\n\n- 选择器的特殊性\n\n    - 给定的各个ID属性值，加0，1，0，0\n\n    - 给形的各个类的属性值，属性选择或者伪类，加0，0，1，0\n\n    - 给定的各个元素和伪元素加0，0，0，1\n\n    - 结合符和通配选择器对特属性没有任何贡献\n\n- 样式继承\n\n    - 文本颜色可被继承\n    - border不能被继承，一般的大多数框模型属性不能被继承（包括外边框，内边距，背景和边框）\n\n    - 继承的值没有特殊性，连0特殊性都没有p(61)，因此需要避免不加区别的使用通配选择器。\n\n- 层叠权重大小顺序\n\n    - 读者的重要声明\n\n    - 创作人员的重要声明\n\n    - 创作人员的正常声明\n\n    - 读者的正常声明\n\n    - 用户代理声明\n\n## 第四章 值和单位\n\n- 颜色表示\n\n    - 命名颜色 {color: gray;}\n\n    - 函数式RGB {color: rgb(100%, 50%, 50%);}，或者{color: rgb(52, 95, 153);}\n\n    - 十六进制RGB {color: #ff0000;} 如果3组各自成对，可以简写#f00，相当于#ff0000\n- WEB安全颜色\n    - RGB百分表示法，能被20整除的颜色，如rgb(60, 40, 120)\n\n    - 十六进制，使用00，33，66，99，cc，ff，如#99ffcc\n\n- 长度单位\n\n    - 绝对长度单位 在打印文档的样式表时更为有用，Web设计中不使用绝对长度单位。\n\n        - 英寸 (in)\n\n        - 厘米(cm) 1in = 2.54cm\n\n        - 毫米(mm) 1in = 25.4mm\n\n        - 点(pt) 1in = 72pt\n\n        - 派卡(pc)  1pc = 12pt, 6pc = 1in\n\n    - 相对长度单位\n        - em (em-height) 1em定义未一种给定字体的font-size的值，随元素的不同而不同，国外最常用，也是未来的趋势，更容易适配移动端。\n        - ex (x-height) 1ex定位未一种给定字体的小写x的高度，不同字体ex的值不同。\n        - px像素\n\n## 第五章 字体\ncss定义了5中通用字体\n\n- Serif 成比例的有上下短线的字体\n- Sans-serif 成比例的，没有上下短线\n- Monospace 不成比例，通常用于模拟打字机打出的问题\n- Cursive  手写体\n- Fantasy 无法用任何特征来定义的字体\n\n特定字体：如Times，Verdana, Helvetica, Arial等，每一种特定的字体都会落入上述通用系列中。\n\n- font-family 如h1 {font-family: Georgia, serif}, Georgia是特定字体，serif是通用字体。\n- font-weight\n    - normal\n    - bold\n    - bolder\n    - lighter\n    - 100/200/300/400/500/600/700/800/900\n- font-size\n    - xx-small/x-small/small/medium/large/x-large/xx-large/smaller/larger\n    - &lt;length>/&lt;percentage>\n- font-style字体风格\n    - italic/oblique/normal/inherit\n- font-variant 字体变形\n    - small-caps 首字母大写\n    - normal\n    - inherit\n\n## 第六章 文本属性\n\n- text-indent 首行缩进\n    - &lt;length> 如：p {text-indent: 3em}\n    - &lt;percentag> 相对于父元素宽度\n    - inhert\n- text-align 水平对齐\n    - left\n    - right\n    - center\n    - justify 两端对齐，在打印领域很常见\n    - inherit\n- line-height 行高，定义了基线之间的距离，而不是字体大小，可以控制行间距。行间距=行高-字体大小\n    - &lt;length>\n    - &lt;percentage>\n    - &lt;number>\n    - normal\n    - inherit\n- vertical-align 行内元素和表单元格的垂直方向对齐\n    - base-line 基线对齐，元素的底端和副元素的基线对齐\n    - sub/super 上标/下标，相对于基线升高/降低\n    -  bottom 元素行内框的底端和行框的底端对齐\n    - text-bottom 元素行内框的底端和文本的底端对齐\n    - top 与bottom相反\n    - text-top 与text-bottom相反\n    - middle 居中对齐\n    - &lt;percentage>\n    - &lt;length>\n    - inherit\n- word-spacing 字间隔\n    - &lt;length>\n    - normal\n    - inherit\n- letter-spacing 字母间隔\n    - &lt;length>\n    - normal\n    - inherit\n- text-transform\n    - uppercase 全大写\n    - lowercase 全小写\n    - capitalize 单词首字母大写\n    - none\n    - inherit\n- text-decoration 文字效果\n    - none\n    - underline 下划线\n    - overline 上划线\n    - line-through 中划线\n    - blink\n    - inherit\n- text-shadow\n    - none\n\n    - 颜色值和三个长度值 text-shadow: silver 2px 2px 2px;\n- white-space\n    - normal 合并空白符，忽略换行符，允许自动换行。\n    - nowrap 合并空白符，忽略换行符号，不允许自动换行。\n    - pre 保留空白符号，保留换行符号，不允许自动换行。\n    - pre-wrap 保留空白符，保留换行符，允许自动换行。\n    - pre-line 合并空白符，保留换行符，允许自动换行。\n    - inherit\n- direction 文本方向\n    - ltr\n    - rtl\n    - inherit\n\n## 第七章 基本视觉格式化\n\n水平格式化\n七大水平属性\n\n- margin-left\n- border-left\n- padding-left\n- width\n- padding-right\n- border-right\n- maring-right\n\n这7个属性值加起来就是元素包含块的宽度，这往往是副元素的width值。\nwidth就是左内边距到右内边距的距离。\n这7个属性中，只有3个属性可以设置为auto: margin-left, width, margin-right，可以用auto弥补实际值和所需总和的差距。如果三个值都为非auto的某个值，这些格式化属性过分受限，此时会强制设置margin-right为auto.\n不止一个auto的情况：\n\n-  margin-left和margin-right为auto，此时元素居中，与text-align:center的区别，text-align只应用块级元素的内联内容，并不能使元素居中。\n- margin-left和width为auto，此时margin-left为0，width会填满剩余包块。\n- margin-right和width为auto，此时margin-right为0，width填满剩余包块。\n- margin-left和margin-right和width都为auto，此时margin-left和margin-right都为0,width会填满包块。这种情况和默认是相同的。\n\n水平外边距不会合并，父元素的内边距，边距和外边距可能影响子元素。\n\n负外边距\n   负外边距时，  会使得内容宽度超出包块，因为根据等式父包块width=7大水平之和，margin-left或margin-right为负时，width要增大。\n\n垂直格式化\n如果元素的内容的高度，大于元素框的高度，用户代理的具体行为将取决于overflow属性。\n垂直格式化的七大属性\n\n- margin-top\n- border-top\n- padding-top\n- height\n- padding-bottom\n- border-bottom\n- margin-bottom\n\n这7个属性值的值和必须等于含块的height，其中，3个值可以设置为auto，margin-top，height，margin-bottom，如果margin-top或margin-bottom设置为auto则自动计算0，这就是为什么不容易设置元素为垂直居中，这与水平时不一样的。对于定位元素，上下边距为auto时，处理不同。\n\n如果没有显式声明包含块的height，百分数高度为重置为auto，如果块级中场元素的height设置为auto，显示时的高度将恰好足以包含其内联内容。\n如果块级正常流元素高度设置为auto，而且只有块级子元素，其默认高度将是从最高块级子元素的外边框边界到最低块级子元素外边框边界之间的距离。\n不过，如果块级元素有padding或者border，则高度则是最高子元素的上外边距到其最低子元素的下外边距边界之间的距离。\n\n合并垂直外边距\n垂直合并只引用与外边距，不会应用于内边距和边框。\n负的下外边距会使段落看上去向下拉，负的上边会使段落看上去向上拉。\n\n## 第八章 内边距、边框和外边距\n\n- border-style\n    - none\n    - hidden\n    - dotted\n    - dashed\n    - solid\n    - double\n    - groove\n    - ridge\n    - inset\n    - outset\n\n- 设置多个边框样式 p.asize {boder-style:  solid dashed dotted solid;}\n- boder-top-style/boder-right-style/border-bottom-style/border-left-style 单独设置边框样式\n- border-width边框宽度\n    - thin\n    - medium\n    - thick\n    - &lt;length>\n- border-top-width/border-right-width/border-bottom-width/border-left-width单独设置宽度\n- boder-color边框颜色\n    - &lt;color>\n    - transparent 透明\n- border-top-color/border-right-color/border-bottom-color/border-left-color单独设置颜色\n- border-top/boder-right/border-bottom/border-left单独设置边框\n    - [&lt;border-width>] [&lt;border-style>][boder-color]\n- border 全局边框，应用到四条边\n    - [&lt;border-width>] [&lt;border-style>][boder-color]\n\n对于只包含文本的行，能改变行间距离的属性只有line-height, font-size和vertical-align。\n行内元素使用正左右外边距，可以多出来水平空间，负的左右外边距会使行内元素与其他内容重叠。\n行内元素的边框，不会改变行高。\n行内元素使用正的左右边框可以多出来水平空间。\n\n- padding 内边距\n    - &lt;length>\n    - &lt;percentage>\n\n行内非替换元素使用左右内边距时，可以多出来水平空间，而上下边距不会改变行高。\n可以想图像使用内边距,外边距，边框时，它可以改变行高，也可以水平方向留出距离。\n\n- background-color 背景元素\n    - &lt;color>\n    - transparent\n- background-image 如body {background-image: url(bg23.gif)}\n    - &lt;uri>\n    - none\n- background-repeat 有方向的重复\n    - repeat\n    - repeat-x\n    - repeat-y\n    - no-repeat\n- background-position 背景定位\n    - &lt;percentage>\n    - &lt;length>\n    - left/center/right/top/bottom\n\nbackground-position单个关键字等价\ncenter: cener center\ntop: top center或者center top\nbottom: bottom center或者center bottom\nleft: left center 或者center left\nright: right center 或者center right\n\n- background-attachment\n    - scroll 跟随文档滚动\n    - fixed 不跟随文档滚动\n\n- background 简写属性\n    - &lt;background-color> || &lt;background-image> || &lt;backgroud-repeat> || &lt;background-attachment> || &lt;background-position>\n\n## 第十章 浮动和定位\n\n- float\n    - left\n    - right\n    - none\n\n浮动元素会从文档的正常流中删除，它还是会影响布局。其他内容会环绕元素，浮动元素的外边距不会合并\n\n- position\n    - static 默认 块元素生成一个矩形框，行内元素创建一个或多个行框，置于父元素中\n    - relative 元素偏移某个距离，元素仍保持未定位前的形状，它原本占据的空间仍保留\n    - absolute 元素框从文档流中完全删除，并相对于其包含块定位。\n    - fixed 元素的表现类似于absolute，不过，其包含块是视窗本身。\n\n- 偏移属性，在position为relative,absolute和fixed时，可以设置偏移属性top right bottom left\n    - &lt;length>\n    - &lt;percentage>\n    - auto 初始值\n\n包含块\n\n根元素的包含块，由用户代理建立，即html元素或body元素\n对于一个非根元素，如果其position时relative或static，包含块则由最近的块级框，表单元格或行内块祖先框的内容边界构成。\n对于一个非根元素，如果其position时absolute，包含块则由最近的position值不是static的祖先元素。\n\n- overflow\n    - visible\n    - hidden\n    - scroll\n    - auto\n","source":"_posts/CSS-The-Definitive-Guide.md","raw":"---\ntitle: CSS权威值南-笔记\ndate: 2016-9-6 18:04:19\ntags: css\n---\n\n## 第一章 css和文档\n\n-  文档内定义样式\n\n        <style type=\"text/css\">\n            @import url(sheet2.css)\n            h1 {color: maroon;}\n        </style>\n\n-   引入css文件\n\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"sheet1.css\" media=\"all\" />\n\n<!--more-->\n\n## 第二章 选择器\n\n- ID选择器和指定id的属性选择器不是一回事，h1#page-title和h1[id=\"page-title\"]之间有差别。\n- p.warning和p[class~=\"warning\"]是等价的，但是p[class=\"warning\"]匹配只有一个class的p元素。\n\n    - 类似的还有[foo^=\"bar\"] 选择foo属性值以bar开头的所有元素\n    - [foo$=\"bar\"] 选择foo属性值以bar结尾的所有元素\n    - [foo*=\"bar\"] 选择foo属性值中含有bar子串的所有元素\n\n- 后代选择器中，两个元素之间的层次间隔可以是无限的，如果想匹配直接相连的父子元素，可以使用子结合符\">\"\n\n- 兄弟元素选择器 h1 +  p {margin-top: 0}\n\n- 伪类选择器，伪类的顺序很重要 link-visited-focus-hover-active\n\n    - 连接伪类\n        - :link 未访问的超连接\n        - :visited  已访问的超连接\n\n    - 动态伪类\n        - :focus 拥有焦点的元素（可以接受键盘输入或者能已某种方式激活的元素）\n        - :hover 鼠标指针悬停的元素\n        - :active 用户输入激活的元素\n\n    - 静态伪类\n        - :first-child 第一个子元素\n        - :first-letter 第一个字母\n        - :first-line 第一行\n        - :lang(fr) 根据语言选择\n    - :first-letter和:first-line只能用于标记或段落之类的块元素，不能用于超连接等行内元素。\n\n## 第三章 结构和层叠\n\n- 选择器的特殊性\n\n    - 给定的各个ID属性值，加0，1，0，0\n\n    - 给形的各个类的属性值，属性选择或者伪类，加0，0，1，0\n\n    - 给定的各个元素和伪元素加0，0，0，1\n\n    - 结合符和通配选择器对特属性没有任何贡献\n\n- 样式继承\n\n    - 文本颜色可被继承\n    - border不能被继承，一般的大多数框模型属性不能被继承（包括外边框，内边距，背景和边框）\n\n    - 继承的值没有特殊性，连0特殊性都没有p(61)，因此需要避免不加区别的使用通配选择器。\n\n- 层叠权重大小顺序\n\n    - 读者的重要声明\n\n    - 创作人员的重要声明\n\n    - 创作人员的正常声明\n\n    - 读者的正常声明\n\n    - 用户代理声明\n\n## 第四章 值和单位\n\n- 颜色表示\n\n    - 命名颜色 {color: gray;}\n\n    - 函数式RGB {color: rgb(100%, 50%, 50%);}，或者{color: rgb(52, 95, 153);}\n\n    - 十六进制RGB {color: #ff0000;} 如果3组各自成对，可以简写#f00，相当于#ff0000\n- WEB安全颜色\n    - RGB百分表示法，能被20整除的颜色，如rgb(60, 40, 120)\n\n    - 十六进制，使用00，33，66，99，cc，ff，如#99ffcc\n\n- 长度单位\n\n    - 绝对长度单位 在打印文档的样式表时更为有用，Web设计中不使用绝对长度单位。\n\n        - 英寸 (in)\n\n        - 厘米(cm) 1in = 2.54cm\n\n        - 毫米(mm) 1in = 25.4mm\n\n        - 点(pt) 1in = 72pt\n\n        - 派卡(pc)  1pc = 12pt, 6pc = 1in\n\n    - 相对长度单位\n        - em (em-height) 1em定义未一种给定字体的font-size的值，随元素的不同而不同，国外最常用，也是未来的趋势，更容易适配移动端。\n        - ex (x-height) 1ex定位未一种给定字体的小写x的高度，不同字体ex的值不同。\n        - px像素\n\n## 第五章 字体\ncss定义了5中通用字体\n\n- Serif 成比例的有上下短线的字体\n- Sans-serif 成比例的，没有上下短线\n- Monospace 不成比例，通常用于模拟打字机打出的问题\n- Cursive  手写体\n- Fantasy 无法用任何特征来定义的字体\n\n特定字体：如Times，Verdana, Helvetica, Arial等，每一种特定的字体都会落入上述通用系列中。\n\n- font-family 如h1 {font-family: Georgia, serif}, Georgia是特定字体，serif是通用字体。\n- font-weight\n    - normal\n    - bold\n    - bolder\n    - lighter\n    - 100/200/300/400/500/600/700/800/900\n- font-size\n    - xx-small/x-small/small/medium/large/x-large/xx-large/smaller/larger\n    - &lt;length>/&lt;percentage>\n- font-style字体风格\n    - italic/oblique/normal/inherit\n- font-variant 字体变形\n    - small-caps 首字母大写\n    - normal\n    - inherit\n\n## 第六章 文本属性\n\n- text-indent 首行缩进\n    - &lt;length> 如：p {text-indent: 3em}\n    - &lt;percentag> 相对于父元素宽度\n    - inhert\n- text-align 水平对齐\n    - left\n    - right\n    - center\n    - justify 两端对齐，在打印领域很常见\n    - inherit\n- line-height 行高，定义了基线之间的距离，而不是字体大小，可以控制行间距。行间距=行高-字体大小\n    - &lt;length>\n    - &lt;percentage>\n    - &lt;number>\n    - normal\n    - inherit\n- vertical-align 行内元素和表单元格的垂直方向对齐\n    - base-line 基线对齐，元素的底端和副元素的基线对齐\n    - sub/super 上标/下标，相对于基线升高/降低\n    -  bottom 元素行内框的底端和行框的底端对齐\n    - text-bottom 元素行内框的底端和文本的底端对齐\n    - top 与bottom相反\n    - text-top 与text-bottom相反\n    - middle 居中对齐\n    - &lt;percentage>\n    - &lt;length>\n    - inherit\n- word-spacing 字间隔\n    - &lt;length>\n    - normal\n    - inherit\n- letter-spacing 字母间隔\n    - &lt;length>\n    - normal\n    - inherit\n- text-transform\n    - uppercase 全大写\n    - lowercase 全小写\n    - capitalize 单词首字母大写\n    - none\n    - inherit\n- text-decoration 文字效果\n    - none\n    - underline 下划线\n    - overline 上划线\n    - line-through 中划线\n    - blink\n    - inherit\n- text-shadow\n    - none\n\n    - 颜色值和三个长度值 text-shadow: silver 2px 2px 2px;\n- white-space\n    - normal 合并空白符，忽略换行符，允许自动换行。\n    - nowrap 合并空白符，忽略换行符号，不允许自动换行。\n    - pre 保留空白符号，保留换行符号，不允许自动换行。\n    - pre-wrap 保留空白符，保留换行符，允许自动换行。\n    - pre-line 合并空白符，保留换行符，允许自动换行。\n    - inherit\n- direction 文本方向\n    - ltr\n    - rtl\n    - inherit\n\n## 第七章 基本视觉格式化\n\n水平格式化\n七大水平属性\n\n- margin-left\n- border-left\n- padding-left\n- width\n- padding-right\n- border-right\n- maring-right\n\n这7个属性值加起来就是元素包含块的宽度，这往往是副元素的width值。\nwidth就是左内边距到右内边距的距离。\n这7个属性中，只有3个属性可以设置为auto: margin-left, width, margin-right，可以用auto弥补实际值和所需总和的差距。如果三个值都为非auto的某个值，这些格式化属性过分受限，此时会强制设置margin-right为auto.\n不止一个auto的情况：\n\n-  margin-left和margin-right为auto，此时元素居中，与text-align:center的区别，text-align只应用块级元素的内联内容，并不能使元素居中。\n- margin-left和width为auto，此时margin-left为0，width会填满剩余包块。\n- margin-right和width为auto，此时margin-right为0，width填满剩余包块。\n- margin-left和margin-right和width都为auto，此时margin-left和margin-right都为0,width会填满包块。这种情况和默认是相同的。\n\n水平外边距不会合并，父元素的内边距，边距和外边距可能影响子元素。\n\n负外边距\n   负外边距时，  会使得内容宽度超出包块，因为根据等式父包块width=7大水平之和，margin-left或margin-right为负时，width要增大。\n\n垂直格式化\n如果元素的内容的高度，大于元素框的高度，用户代理的具体行为将取决于overflow属性。\n垂直格式化的七大属性\n\n- margin-top\n- border-top\n- padding-top\n- height\n- padding-bottom\n- border-bottom\n- margin-bottom\n\n这7个属性值的值和必须等于含块的height，其中，3个值可以设置为auto，margin-top，height，margin-bottom，如果margin-top或margin-bottom设置为auto则自动计算0，这就是为什么不容易设置元素为垂直居中，这与水平时不一样的。对于定位元素，上下边距为auto时，处理不同。\n\n如果没有显式声明包含块的height，百分数高度为重置为auto，如果块级中场元素的height设置为auto，显示时的高度将恰好足以包含其内联内容。\n如果块级正常流元素高度设置为auto，而且只有块级子元素，其默认高度将是从最高块级子元素的外边框边界到最低块级子元素外边框边界之间的距离。\n不过，如果块级元素有padding或者border，则高度则是最高子元素的上外边距到其最低子元素的下外边距边界之间的距离。\n\n合并垂直外边距\n垂直合并只引用与外边距，不会应用于内边距和边框。\n负的下外边距会使段落看上去向下拉，负的上边会使段落看上去向上拉。\n\n## 第八章 内边距、边框和外边距\n\n- border-style\n    - none\n    - hidden\n    - dotted\n    - dashed\n    - solid\n    - double\n    - groove\n    - ridge\n    - inset\n    - outset\n\n- 设置多个边框样式 p.asize {boder-style:  solid dashed dotted solid;}\n- boder-top-style/boder-right-style/border-bottom-style/border-left-style 单独设置边框样式\n- border-width边框宽度\n    - thin\n    - medium\n    - thick\n    - &lt;length>\n- border-top-width/border-right-width/border-bottom-width/border-left-width单独设置宽度\n- boder-color边框颜色\n    - &lt;color>\n    - transparent 透明\n- border-top-color/border-right-color/border-bottom-color/border-left-color单独设置颜色\n- border-top/boder-right/border-bottom/border-left单独设置边框\n    - [&lt;border-width>] [&lt;border-style>][boder-color]\n- border 全局边框，应用到四条边\n    - [&lt;border-width>] [&lt;border-style>][boder-color]\n\n对于只包含文本的行，能改变行间距离的属性只有line-height, font-size和vertical-align。\n行内元素使用正左右外边距，可以多出来水平空间，负的左右外边距会使行内元素与其他内容重叠。\n行内元素的边框，不会改变行高。\n行内元素使用正的左右边框可以多出来水平空间。\n\n- padding 内边距\n    - &lt;length>\n    - &lt;percentage>\n\n行内非替换元素使用左右内边距时，可以多出来水平空间，而上下边距不会改变行高。\n可以想图像使用内边距,外边距，边框时，它可以改变行高，也可以水平方向留出距离。\n\n- background-color 背景元素\n    - &lt;color>\n    - transparent\n- background-image 如body {background-image: url(bg23.gif)}\n    - &lt;uri>\n    - none\n- background-repeat 有方向的重复\n    - repeat\n    - repeat-x\n    - repeat-y\n    - no-repeat\n- background-position 背景定位\n    - &lt;percentage>\n    - &lt;length>\n    - left/center/right/top/bottom\n\nbackground-position单个关键字等价\ncenter: cener center\ntop: top center或者center top\nbottom: bottom center或者center bottom\nleft: left center 或者center left\nright: right center 或者center right\n\n- background-attachment\n    - scroll 跟随文档滚动\n    - fixed 不跟随文档滚动\n\n- background 简写属性\n    - &lt;background-color> || &lt;background-image> || &lt;backgroud-repeat> || &lt;background-attachment> || &lt;background-position>\n\n## 第十章 浮动和定位\n\n- float\n    - left\n    - right\n    - none\n\n浮动元素会从文档的正常流中删除，它还是会影响布局。其他内容会环绕元素，浮动元素的外边距不会合并\n\n- position\n    - static 默认 块元素生成一个矩形框，行内元素创建一个或多个行框，置于父元素中\n    - relative 元素偏移某个距离，元素仍保持未定位前的形状，它原本占据的空间仍保留\n    - absolute 元素框从文档流中完全删除，并相对于其包含块定位。\n    - fixed 元素的表现类似于absolute，不过，其包含块是视窗本身。\n\n- 偏移属性，在position为relative,absolute和fixed时，可以设置偏移属性top right bottom left\n    - &lt;length>\n    - &lt;percentage>\n    - auto 初始值\n\n包含块\n\n根元素的包含块，由用户代理建立，即html元素或body元素\n对于一个非根元素，如果其position时relative或static，包含块则由最近的块级框，表单元格或行内块祖先框的内容边界构成。\n对于一个非根元素，如果其position时absolute，包含块则由最近的position值不是static的祖先元素。\n\n- overflow\n    - visible\n    - hidden\n    - scroll\n    - auto\n","slug":"CSS-The-Definitive-Guide","published":1,"updated":"2019-01-03T02:48:56.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aankc0077biuicrwb07xy","content":"<h2 id=\"第一章-css和文档\"><a href=\"#第一章-css和文档\" class=\"headerlink\" title=\"第一章 css和文档\"></a>第一章 css和文档</h2><ul>\n<li><p>文档内定义样式</p>\n<pre><code>&lt;style type=&quot;text/css&quot;&gt;\n    @import url(sheet2.css)\n    h1 {color: maroon;}\n&lt;/style&gt;\n</code></pre></li>\n<li><p>引入css文件</p>\n<pre><code>&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;sheet1.css&quot; media=&quot;all&quot; /&gt;\n</code></pre></li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"第二章-选择器\"><a href=\"#第二章-选择器\" class=\"headerlink\" title=\"第二章 选择器\"></a>第二章 选择器</h2><ul>\n<li>ID选择器和指定id的属性选择器不是一回事，h1#page-title和h1[id=”page-title”]之间有差别。</li>\n<li><p>p.warning和p[class~=”warning”]是等价的，但是p[class=”warning”]匹配只有一个class的p元素。</p>\n<ul>\n<li>类似的还有[foo^=”bar”] 选择foo属性值以bar开头的所有元素</li>\n<li>[foo$=”bar”] 选择foo属性值以bar结尾的所有元素</li>\n<li>[foo*=”bar”] 选择foo属性值中含有bar子串的所有元素</li>\n</ul>\n</li>\n<li><p>后代选择器中，两个元素之间的层次间隔可以是无限的，如果想匹配直接相连的父子元素，可以使用子结合符”&gt;”</p>\n</li>\n<li><p>兄弟元素选择器 h1 +  p {margin-top: 0}</p>\n</li>\n<li><p>伪类选择器，伪类的顺序很重要 link-visited-focus-hover-active</p>\n<ul>\n<li><p>连接伪类</p>\n<ul>\n<li>:link 未访问的超连接</li>\n<li>:visited  已访问的超连接</li>\n</ul>\n</li>\n<li><p>动态伪类</p>\n<ul>\n<li>:focus 拥有焦点的元素（可以接受键盘输入或者能已某种方式激活的元素）</li>\n<li>:hover 鼠标指针悬停的元素</li>\n<li>:active 用户输入激活的元素</li>\n</ul>\n</li>\n<li><p>静态伪类</p>\n<ul>\n<li>:first-child 第一个子元素</li>\n<li>:first-letter 第一个字母</li>\n<li>:first-line 第一行</li>\n<li>:lang(fr) 根据语言选择</li>\n</ul>\n</li>\n<li>:first-letter和:first-line只能用于标记或段落之类的块元素，不能用于超连接等行内元素。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三章-结构和层叠\"><a href=\"#第三章-结构和层叠\" class=\"headerlink\" title=\"第三章 结构和层叠\"></a>第三章 结构和层叠</h2><ul>\n<li><p>选择器的特殊性</p>\n<ul>\n<li><p>给定的各个ID属性值，加0，1，0，0</p>\n</li>\n<li><p>给形的各个类的属性值，属性选择或者伪类，加0，0，1，0</p>\n</li>\n<li><p>给定的各个元素和伪元素加0，0，0，1</p>\n</li>\n<li><p>结合符和通配选择器对特属性没有任何贡献</p>\n</li>\n</ul>\n</li>\n<li><p>样式继承</p>\n<ul>\n<li>文本颜色可被继承</li>\n<li><p>border不能被继承，一般的大多数框模型属性不能被继承（包括外边框，内边距，背景和边框）</p>\n</li>\n<li><p>继承的值没有特殊性，连0特殊性都没有p(61)，因此需要避免不加区别的使用通配选择器。</p>\n</li>\n</ul>\n</li>\n<li><p>层叠权重大小顺序</p>\n<ul>\n<li><p>读者的重要声明</p>\n</li>\n<li><p>创作人员的重要声明</p>\n</li>\n<li><p>创作人员的正常声明</p>\n</li>\n<li><p>读者的正常声明</p>\n</li>\n<li><p>用户代理声明</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第四章-值和单位\"><a href=\"#第四章-值和单位\" class=\"headerlink\" title=\"第四章 值和单位\"></a>第四章 值和单位</h2><ul>\n<li><p>颜色表示</p>\n<ul>\n<li><p>命名颜色 {color: gray;}</p>\n</li>\n<li><p>函数式RGB {color: rgb(100%, 50%, 50%);}，或者{color: rgb(52, 95, 153);}</p>\n</li>\n<li><p>十六进制RGB {color: #ff0000;} 如果3组各自成对，可以简写#f00，相当于#ff0000</p>\n</li>\n</ul>\n</li>\n<li><p>WEB安全颜色</p>\n<ul>\n<li><p>RGB百分表示法，能被20整除的颜色，如rgb(60, 40, 120)</p>\n</li>\n<li><p>十六进制，使用00，33，66，99，cc，ff，如#99ffcc</p>\n</li>\n</ul>\n</li>\n<li><p>长度单位</p>\n<ul>\n<li><p>绝对长度单位 在打印文档的样式表时更为有用，Web设计中不使用绝对长度单位。</p>\n<ul>\n<li><p>英寸 (in)</p>\n</li>\n<li><p>厘米(cm) 1in = 2.54cm</p>\n</li>\n<li><p>毫米(mm) 1in = 25.4mm</p>\n</li>\n<li><p>点(pt) 1in = 72pt</p>\n</li>\n<li><p>派卡(pc)  1pc = 12pt, 6pc = 1in</p>\n</li>\n</ul>\n</li>\n<li><p>相对长度单位</p>\n<ul>\n<li>em (em-height) 1em定义未一种给定字体的font-size的值，随元素的不同而不同，国外最常用，也是未来的趋势，更容易适配移动端。</li>\n<li>ex (x-height) 1ex定位未一种给定字体的小写x的高度，不同字体ex的值不同。</li>\n<li>px像素</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第五章-字体\"><a href=\"#第五章-字体\" class=\"headerlink\" title=\"第五章 字体\"></a>第五章 字体</h2><p>css定义了5中通用字体</p>\n<ul>\n<li>Serif 成比例的有上下短线的字体</li>\n<li>Sans-serif 成比例的，没有上下短线</li>\n<li>Monospace 不成比例，通常用于模拟打字机打出的问题</li>\n<li>Cursive  手写体</li>\n<li>Fantasy 无法用任何特征来定义的字体</li>\n</ul>\n<p>特定字体：如Times，Verdana, Helvetica, Arial等，每一种特定的字体都会落入上述通用系列中。</p>\n<ul>\n<li>font-family 如h1 {font-family: Georgia, serif}, Georgia是特定字体，serif是通用字体。</li>\n<li>font-weight<ul>\n<li>normal</li>\n<li>bold</li>\n<li>bolder</li>\n<li>lighter</li>\n<li>100/200/300/400/500/600/700/800/900</li>\n</ul>\n</li>\n<li>font-size<ul>\n<li>xx-small/x-small/small/medium/large/x-large/xx-large/smaller/larger</li>\n<li>&lt;length&gt;/&lt;percentage&gt;</li>\n</ul>\n</li>\n<li>font-style字体风格<ul>\n<li>italic/oblique/normal/inherit</li>\n</ul>\n</li>\n<li>font-variant 字体变形<ul>\n<li>small-caps 首字母大写</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第六章-文本属性\"><a href=\"#第六章-文本属性\" class=\"headerlink\" title=\"第六章 文本属性\"></a>第六章 文本属性</h2><ul>\n<li>text-indent 首行缩进<ul>\n<li>&lt;length&gt; 如：p {text-indent: 3em}</li>\n<li>&lt;percentag&gt; 相对于父元素宽度</li>\n<li>inhert</li>\n</ul>\n</li>\n<li>text-align 水平对齐<ul>\n<li>left</li>\n<li>right</li>\n<li>center</li>\n<li>justify 两端对齐，在打印领域很常见</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>line-height 行高，定义了基线之间的距离，而不是字体大小，可以控制行间距。行间距=行高-字体大小<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n<li>&lt;number&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>vertical-align 行内元素和表单元格的垂直方向对齐<ul>\n<li>base-line 基线对齐，元素的底端和副元素的基线对齐</li>\n<li>sub/super 上标/下标，相对于基线升高/降低</li>\n<li>bottom 元素行内框的底端和行框的底端对齐</li>\n<li>text-bottom 元素行内框的底端和文本的底端对齐</li>\n<li>top 与bottom相反</li>\n<li>text-top 与text-bottom相反</li>\n<li>middle 居中对齐</li>\n<li>&lt;percentage&gt;</li>\n<li>&lt;length&gt;</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>word-spacing 字间隔<ul>\n<li>&lt;length&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>letter-spacing 字母间隔<ul>\n<li>&lt;length&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>text-transform<ul>\n<li>uppercase 全大写</li>\n<li>lowercase 全小写</li>\n<li>capitalize 单词首字母大写</li>\n<li>none</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>text-decoration 文字效果<ul>\n<li>none</li>\n<li>underline 下划线</li>\n<li>overline 上划线</li>\n<li>line-through 中划线</li>\n<li>blink</li>\n<li>inherit</li>\n</ul>\n</li>\n<li><p>text-shadow</p>\n<ul>\n<li><p>none</p>\n</li>\n<li><p>颜色值和三个长度值 text-shadow: silver 2px 2px 2px;</p>\n</li>\n</ul>\n</li>\n<li>white-space<ul>\n<li>normal 合并空白符，忽略换行符，允许自动换行。</li>\n<li>nowrap 合并空白符，忽略换行符号，不允许自动换行。</li>\n<li>pre 保留空白符号，保留换行符号，不允许自动换行。</li>\n<li>pre-wrap 保留空白符，保留换行符，允许自动换行。</li>\n<li>pre-line 合并空白符，保留换行符，允许自动换行。</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>direction 文本方向<ul>\n<li>ltr</li>\n<li>rtl</li>\n<li>inherit</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第七章-基本视觉格式化\"><a href=\"#第七章-基本视觉格式化\" class=\"headerlink\" title=\"第七章 基本视觉格式化\"></a>第七章 基本视觉格式化</h2><p>水平格式化<br>七大水平属性</p>\n<ul>\n<li>margin-left</li>\n<li>border-left</li>\n<li>padding-left</li>\n<li>width</li>\n<li>padding-right</li>\n<li>border-right</li>\n<li>maring-right</li>\n</ul>\n<p>这7个属性值加起来就是元素包含块的宽度，这往往是副元素的width值。<br>width就是左内边距到右内边距的距离。<br>这7个属性中，只有3个属性可以设置为auto: margin-left, width, margin-right，可以用auto弥补实际值和所需总和的差距。如果三个值都为非auto的某个值，这些格式化属性过分受限，此时会强制设置margin-right为auto.<br>不止一个auto的情况：</p>\n<ul>\n<li>margin-left和margin-right为auto，此时元素居中，与text-align:center的区别，text-align只应用块级元素的内联内容，并不能使元素居中。</li>\n<li>margin-left和width为auto，此时margin-left为0，width会填满剩余包块。</li>\n<li>margin-right和width为auto，此时margin-right为0，width填满剩余包块。</li>\n<li>margin-left和margin-right和width都为auto，此时margin-left和margin-right都为0,width会填满包块。这种情况和默认是相同的。</li>\n</ul>\n<p>水平外边距不会合并，父元素的内边距，边距和外边距可能影响子元素。</p>\n<p>负外边距<br>   负外边距时，  会使得内容宽度超出包块，因为根据等式父包块width=7大水平之和，margin-left或margin-right为负时，width要增大。</p>\n<p>垂直格式化<br>如果元素的内容的高度，大于元素框的高度，用户代理的具体行为将取决于overflow属性。<br>垂直格式化的七大属性</p>\n<ul>\n<li>margin-top</li>\n<li>border-top</li>\n<li>padding-top</li>\n<li>height</li>\n<li>padding-bottom</li>\n<li>border-bottom</li>\n<li>margin-bottom</li>\n</ul>\n<p>这7个属性值的值和必须等于含块的height，其中，3个值可以设置为auto，margin-top，height，margin-bottom，如果margin-top或margin-bottom设置为auto则自动计算0，这就是为什么不容易设置元素为垂直居中，这与水平时不一样的。对于定位元素，上下边距为auto时，处理不同。</p>\n<p>如果没有显式声明包含块的height，百分数高度为重置为auto，如果块级中场元素的height设置为auto，显示时的高度将恰好足以包含其内联内容。<br>如果块级正常流元素高度设置为auto，而且只有块级子元素，其默认高度将是从最高块级子元素的外边框边界到最低块级子元素外边框边界之间的距离。<br>不过，如果块级元素有padding或者border，则高度则是最高子元素的上外边距到其最低子元素的下外边距边界之间的距离。</p>\n<p>合并垂直外边距<br>垂直合并只引用与外边距，不会应用于内边距和边框。<br>负的下外边距会使段落看上去向下拉，负的上边会使段落看上去向上拉。</p>\n<h2 id=\"第八章-内边距、边框和外边距\"><a href=\"#第八章-内边距、边框和外边距\" class=\"headerlink\" title=\"第八章 内边距、边框和外边距\"></a>第八章 内边距、边框和外边距</h2><ul>\n<li><p>border-style</p>\n<ul>\n<li>none</li>\n<li>hidden</li>\n<li>dotted</li>\n<li>dashed</li>\n<li>solid</li>\n<li>double</li>\n<li>groove</li>\n<li>ridge</li>\n<li>inset</li>\n<li>outset</li>\n</ul>\n</li>\n<li><p>设置多个边框样式 p.asize {boder-style:  solid dashed dotted solid;}</p>\n</li>\n<li>boder-top-style/boder-right-style/border-bottom-style/border-left-style 单独设置边框样式</li>\n<li>border-width边框宽度<ul>\n<li>thin</li>\n<li>medium</li>\n<li>thick</li>\n<li>&lt;length&gt;</li>\n</ul>\n</li>\n<li>border-top-width/border-right-width/border-bottom-width/border-left-width单独设置宽度</li>\n<li>boder-color边框颜色<ul>\n<li>&lt;color&gt;</li>\n<li>transparent 透明</li>\n</ul>\n</li>\n<li>border-top-color/border-right-color/border-bottom-color/border-left-color单独设置颜色</li>\n<li>border-top/boder-right/border-bottom/border-left单独设置边框<ul>\n<li>[&lt;border-width&gt;] [&lt;border-style&gt;][boder-color]</li>\n</ul>\n</li>\n<li>border 全局边框，应用到四条边<ul>\n<li>[&lt;border-width&gt;] [&lt;border-style&gt;][boder-color]</li>\n</ul>\n</li>\n</ul>\n<p>对于只包含文本的行，能改变行间距离的属性只有line-height, font-size和vertical-align。<br>行内元素使用正左右外边距，可以多出来水平空间，负的左右外边距会使行内元素与其他内容重叠。<br>行内元素的边框，不会改变行高。<br>行内元素使用正的左右边框可以多出来水平空间。</p>\n<ul>\n<li>padding 内边距<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n</ul>\n</li>\n</ul>\n<p>行内非替换元素使用左右内边距时，可以多出来水平空间，而上下边距不会改变行高。<br>可以想图像使用内边距,外边距，边框时，它可以改变行高，也可以水平方向留出距离。</p>\n<ul>\n<li>background-color 背景元素<ul>\n<li>&lt;color&gt;</li>\n<li>transparent</li>\n</ul>\n</li>\n<li>background-image 如body {background-image: url(bg23.gif)}<ul>\n<li>&lt;uri&gt;</li>\n<li>none</li>\n</ul>\n</li>\n<li>background-repeat 有方向的重复<ul>\n<li>repeat</li>\n<li>repeat-x</li>\n<li>repeat-y</li>\n<li>no-repeat</li>\n</ul>\n</li>\n<li>background-position 背景定位<ul>\n<li>&lt;percentage&gt;</li>\n<li>&lt;length&gt;</li>\n<li>left/center/right/top/bottom</li>\n</ul>\n</li>\n</ul>\n<p>background-position单个关键字等价<br>center: cener center<br>top: top center或者center top<br>bottom: bottom center或者center bottom<br>left: left center 或者center left<br>right: right center 或者center right</p>\n<ul>\n<li><p>background-attachment</p>\n<ul>\n<li>scroll 跟随文档滚动</li>\n<li>fixed 不跟随文档滚动</li>\n</ul>\n</li>\n<li><p>background 简写属性</p>\n<ul>\n<li>&lt;background-color&gt; || &lt;background-image&gt; || &lt;backgroud-repeat&gt; || &lt;background-attachment&gt; || &lt;background-position&gt;</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第十章-浮动和定位\"><a href=\"#第十章-浮动和定位\" class=\"headerlink\" title=\"第十章 浮动和定位\"></a>第十章 浮动和定位</h2><ul>\n<li>float<ul>\n<li>left</li>\n<li>right</li>\n<li>none</li>\n</ul>\n</li>\n</ul>\n<p>浮动元素会从文档的正常流中删除，它还是会影响布局。其他内容会环绕元素，浮动元素的外边距不会合并</p>\n<ul>\n<li><p>position</p>\n<ul>\n<li>static 默认 块元素生成一个矩形框，行内元素创建一个或多个行框，置于父元素中</li>\n<li>relative 元素偏移某个距离，元素仍保持未定位前的形状，它原本占据的空间仍保留</li>\n<li>absolute 元素框从文档流中完全删除，并相对于其包含块定位。</li>\n<li>fixed 元素的表现类似于absolute，不过，其包含块是视窗本身。</li>\n</ul>\n</li>\n<li><p>偏移属性，在position为relative,absolute和fixed时，可以设置偏移属性top right bottom left</p>\n<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n<li>auto 初始值</li>\n</ul>\n</li>\n</ul>\n<p>包含块</p>\n<p>根元素的包含块，由用户代理建立，即html元素或body元素<br>对于一个非根元素，如果其position时relative或static，包含块则由最近的块级框，表单元格或行内块祖先框的内容边界构成。<br>对于一个非根元素，如果其position时absolute，包含块则由最近的position值不是static的祖先元素。</p>\n<ul>\n<li>overflow<ul>\n<li>visible</li>\n<li>hidden</li>\n<li>scroll</li>\n<li>auto</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"第一章-css和文档\"><a href=\"#第一章-css和文档\" class=\"headerlink\" title=\"第一章 css和文档\"></a>第一章 css和文档</h2><ul>\n<li><p>文档内定义样式</p>\n<pre><code>&lt;style type=&quot;text/css&quot;&gt;\n    @import url(sheet2.css)\n    h1 {color: maroon;}\n&lt;/style&gt;\n</code></pre></li>\n<li><p>引入css文件</p>\n<pre><code>&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;sheet1.css&quot; media=&quot;all&quot; /&gt;\n</code></pre></li>\n</ul>","more":"<h2 id=\"第二章-选择器\"><a href=\"#第二章-选择器\" class=\"headerlink\" title=\"第二章 选择器\"></a>第二章 选择器</h2><ul>\n<li>ID选择器和指定id的属性选择器不是一回事，h1#page-title和h1[id=”page-title”]之间有差别。</li>\n<li><p>p.warning和p[class~=”warning”]是等价的，但是p[class=”warning”]匹配只有一个class的p元素。</p>\n<ul>\n<li>类似的还有[foo^=”bar”] 选择foo属性值以bar开头的所有元素</li>\n<li>[foo$=”bar”] 选择foo属性值以bar结尾的所有元素</li>\n<li>[foo*=”bar”] 选择foo属性值中含有bar子串的所有元素</li>\n</ul>\n</li>\n<li><p>后代选择器中，两个元素之间的层次间隔可以是无限的，如果想匹配直接相连的父子元素，可以使用子结合符”&gt;”</p>\n</li>\n<li><p>兄弟元素选择器 h1 +  p {margin-top: 0}</p>\n</li>\n<li><p>伪类选择器，伪类的顺序很重要 link-visited-focus-hover-active</p>\n<ul>\n<li><p>连接伪类</p>\n<ul>\n<li>:link 未访问的超连接</li>\n<li>:visited  已访问的超连接</li>\n</ul>\n</li>\n<li><p>动态伪类</p>\n<ul>\n<li>:focus 拥有焦点的元素（可以接受键盘输入或者能已某种方式激活的元素）</li>\n<li>:hover 鼠标指针悬停的元素</li>\n<li>:active 用户输入激活的元素</li>\n</ul>\n</li>\n<li><p>静态伪类</p>\n<ul>\n<li>:first-child 第一个子元素</li>\n<li>:first-letter 第一个字母</li>\n<li>:first-line 第一行</li>\n<li>:lang(fr) 根据语言选择</li>\n</ul>\n</li>\n<li>:first-letter和:first-line只能用于标记或段落之类的块元素，不能用于超连接等行内元素。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三章-结构和层叠\"><a href=\"#第三章-结构和层叠\" class=\"headerlink\" title=\"第三章 结构和层叠\"></a>第三章 结构和层叠</h2><ul>\n<li><p>选择器的特殊性</p>\n<ul>\n<li><p>给定的各个ID属性值，加0，1，0，0</p>\n</li>\n<li><p>给形的各个类的属性值，属性选择或者伪类，加0，0，1，0</p>\n</li>\n<li><p>给定的各个元素和伪元素加0，0，0，1</p>\n</li>\n<li><p>结合符和通配选择器对特属性没有任何贡献</p>\n</li>\n</ul>\n</li>\n<li><p>样式继承</p>\n<ul>\n<li>文本颜色可被继承</li>\n<li><p>border不能被继承，一般的大多数框模型属性不能被继承（包括外边框，内边距，背景和边框）</p>\n</li>\n<li><p>继承的值没有特殊性，连0特殊性都没有p(61)，因此需要避免不加区别的使用通配选择器。</p>\n</li>\n</ul>\n</li>\n<li><p>层叠权重大小顺序</p>\n<ul>\n<li><p>读者的重要声明</p>\n</li>\n<li><p>创作人员的重要声明</p>\n</li>\n<li><p>创作人员的正常声明</p>\n</li>\n<li><p>读者的正常声明</p>\n</li>\n<li><p>用户代理声明</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第四章-值和单位\"><a href=\"#第四章-值和单位\" class=\"headerlink\" title=\"第四章 值和单位\"></a>第四章 值和单位</h2><ul>\n<li><p>颜色表示</p>\n<ul>\n<li><p>命名颜色 {color: gray;}</p>\n</li>\n<li><p>函数式RGB {color: rgb(100%, 50%, 50%);}，或者{color: rgb(52, 95, 153);}</p>\n</li>\n<li><p>十六进制RGB {color: #ff0000;} 如果3组各自成对，可以简写#f00，相当于#ff0000</p>\n</li>\n</ul>\n</li>\n<li><p>WEB安全颜色</p>\n<ul>\n<li><p>RGB百分表示法，能被20整除的颜色，如rgb(60, 40, 120)</p>\n</li>\n<li><p>十六进制，使用00，33，66，99，cc，ff，如#99ffcc</p>\n</li>\n</ul>\n</li>\n<li><p>长度单位</p>\n<ul>\n<li><p>绝对长度单位 在打印文档的样式表时更为有用，Web设计中不使用绝对长度单位。</p>\n<ul>\n<li><p>英寸 (in)</p>\n</li>\n<li><p>厘米(cm) 1in = 2.54cm</p>\n</li>\n<li><p>毫米(mm) 1in = 25.4mm</p>\n</li>\n<li><p>点(pt) 1in = 72pt</p>\n</li>\n<li><p>派卡(pc)  1pc = 12pt, 6pc = 1in</p>\n</li>\n</ul>\n</li>\n<li><p>相对长度单位</p>\n<ul>\n<li>em (em-height) 1em定义未一种给定字体的font-size的值，随元素的不同而不同，国外最常用，也是未来的趋势，更容易适配移动端。</li>\n<li>ex (x-height) 1ex定位未一种给定字体的小写x的高度，不同字体ex的值不同。</li>\n<li>px像素</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第五章-字体\"><a href=\"#第五章-字体\" class=\"headerlink\" title=\"第五章 字体\"></a>第五章 字体</h2><p>css定义了5中通用字体</p>\n<ul>\n<li>Serif 成比例的有上下短线的字体</li>\n<li>Sans-serif 成比例的，没有上下短线</li>\n<li>Monospace 不成比例，通常用于模拟打字机打出的问题</li>\n<li>Cursive  手写体</li>\n<li>Fantasy 无法用任何特征来定义的字体</li>\n</ul>\n<p>特定字体：如Times，Verdana, Helvetica, Arial等，每一种特定的字体都会落入上述通用系列中。</p>\n<ul>\n<li>font-family 如h1 {font-family: Georgia, serif}, Georgia是特定字体，serif是通用字体。</li>\n<li>font-weight<ul>\n<li>normal</li>\n<li>bold</li>\n<li>bolder</li>\n<li>lighter</li>\n<li>100/200/300/400/500/600/700/800/900</li>\n</ul>\n</li>\n<li>font-size<ul>\n<li>xx-small/x-small/small/medium/large/x-large/xx-large/smaller/larger</li>\n<li>&lt;length&gt;/&lt;percentage&gt;</li>\n</ul>\n</li>\n<li>font-style字体风格<ul>\n<li>italic/oblique/normal/inherit</li>\n</ul>\n</li>\n<li>font-variant 字体变形<ul>\n<li>small-caps 首字母大写</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第六章-文本属性\"><a href=\"#第六章-文本属性\" class=\"headerlink\" title=\"第六章 文本属性\"></a>第六章 文本属性</h2><ul>\n<li>text-indent 首行缩进<ul>\n<li>&lt;length&gt; 如：p {text-indent: 3em}</li>\n<li>&lt;percentag&gt; 相对于父元素宽度</li>\n<li>inhert</li>\n</ul>\n</li>\n<li>text-align 水平对齐<ul>\n<li>left</li>\n<li>right</li>\n<li>center</li>\n<li>justify 两端对齐，在打印领域很常见</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>line-height 行高，定义了基线之间的距离，而不是字体大小，可以控制行间距。行间距=行高-字体大小<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n<li>&lt;number&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>vertical-align 行内元素和表单元格的垂直方向对齐<ul>\n<li>base-line 基线对齐，元素的底端和副元素的基线对齐</li>\n<li>sub/super 上标/下标，相对于基线升高/降低</li>\n<li>bottom 元素行内框的底端和行框的底端对齐</li>\n<li>text-bottom 元素行内框的底端和文本的底端对齐</li>\n<li>top 与bottom相反</li>\n<li>text-top 与text-bottom相反</li>\n<li>middle 居中对齐</li>\n<li>&lt;percentage&gt;</li>\n<li>&lt;length&gt;</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>word-spacing 字间隔<ul>\n<li>&lt;length&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>letter-spacing 字母间隔<ul>\n<li>&lt;length&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>text-transform<ul>\n<li>uppercase 全大写</li>\n<li>lowercase 全小写</li>\n<li>capitalize 单词首字母大写</li>\n<li>none</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>text-decoration 文字效果<ul>\n<li>none</li>\n<li>underline 下划线</li>\n<li>overline 上划线</li>\n<li>line-through 中划线</li>\n<li>blink</li>\n<li>inherit</li>\n</ul>\n</li>\n<li><p>text-shadow</p>\n<ul>\n<li><p>none</p>\n</li>\n<li><p>颜色值和三个长度值 text-shadow: silver 2px 2px 2px;</p>\n</li>\n</ul>\n</li>\n<li>white-space<ul>\n<li>normal 合并空白符，忽略换行符，允许自动换行。</li>\n<li>nowrap 合并空白符，忽略换行符号，不允许自动换行。</li>\n<li>pre 保留空白符号，保留换行符号，不允许自动换行。</li>\n<li>pre-wrap 保留空白符，保留换行符，允许自动换行。</li>\n<li>pre-line 合并空白符，保留换行符，允许自动换行。</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>direction 文本方向<ul>\n<li>ltr</li>\n<li>rtl</li>\n<li>inherit</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第七章-基本视觉格式化\"><a href=\"#第七章-基本视觉格式化\" class=\"headerlink\" title=\"第七章 基本视觉格式化\"></a>第七章 基本视觉格式化</h2><p>水平格式化<br>七大水平属性</p>\n<ul>\n<li>margin-left</li>\n<li>border-left</li>\n<li>padding-left</li>\n<li>width</li>\n<li>padding-right</li>\n<li>border-right</li>\n<li>maring-right</li>\n</ul>\n<p>这7个属性值加起来就是元素包含块的宽度，这往往是副元素的width值。<br>width就是左内边距到右内边距的距离。<br>这7个属性中，只有3个属性可以设置为auto: margin-left, width, margin-right，可以用auto弥补实际值和所需总和的差距。如果三个值都为非auto的某个值，这些格式化属性过分受限，此时会强制设置margin-right为auto.<br>不止一个auto的情况：</p>\n<ul>\n<li>margin-left和margin-right为auto，此时元素居中，与text-align:center的区别，text-align只应用块级元素的内联内容，并不能使元素居中。</li>\n<li>margin-left和width为auto，此时margin-left为0，width会填满剩余包块。</li>\n<li>margin-right和width为auto，此时margin-right为0，width填满剩余包块。</li>\n<li>margin-left和margin-right和width都为auto，此时margin-left和margin-right都为0,width会填满包块。这种情况和默认是相同的。</li>\n</ul>\n<p>水平外边距不会合并，父元素的内边距，边距和外边距可能影响子元素。</p>\n<p>负外边距<br>   负外边距时，  会使得内容宽度超出包块，因为根据等式父包块width=7大水平之和，margin-left或margin-right为负时，width要增大。</p>\n<p>垂直格式化<br>如果元素的内容的高度，大于元素框的高度，用户代理的具体行为将取决于overflow属性。<br>垂直格式化的七大属性</p>\n<ul>\n<li>margin-top</li>\n<li>border-top</li>\n<li>padding-top</li>\n<li>height</li>\n<li>padding-bottom</li>\n<li>border-bottom</li>\n<li>margin-bottom</li>\n</ul>\n<p>这7个属性值的值和必须等于含块的height，其中，3个值可以设置为auto，margin-top，height，margin-bottom，如果margin-top或margin-bottom设置为auto则自动计算0，这就是为什么不容易设置元素为垂直居中，这与水平时不一样的。对于定位元素，上下边距为auto时，处理不同。</p>\n<p>如果没有显式声明包含块的height，百分数高度为重置为auto，如果块级中场元素的height设置为auto，显示时的高度将恰好足以包含其内联内容。<br>如果块级正常流元素高度设置为auto，而且只有块级子元素，其默认高度将是从最高块级子元素的外边框边界到最低块级子元素外边框边界之间的距离。<br>不过，如果块级元素有padding或者border，则高度则是最高子元素的上外边距到其最低子元素的下外边距边界之间的距离。</p>\n<p>合并垂直外边距<br>垂直合并只引用与外边距，不会应用于内边距和边框。<br>负的下外边距会使段落看上去向下拉，负的上边会使段落看上去向上拉。</p>\n<h2 id=\"第八章-内边距、边框和外边距\"><a href=\"#第八章-内边距、边框和外边距\" class=\"headerlink\" title=\"第八章 内边距、边框和外边距\"></a>第八章 内边距、边框和外边距</h2><ul>\n<li><p>border-style</p>\n<ul>\n<li>none</li>\n<li>hidden</li>\n<li>dotted</li>\n<li>dashed</li>\n<li>solid</li>\n<li>double</li>\n<li>groove</li>\n<li>ridge</li>\n<li>inset</li>\n<li>outset</li>\n</ul>\n</li>\n<li><p>设置多个边框样式 p.asize {boder-style:  solid dashed dotted solid;}</p>\n</li>\n<li>boder-top-style/boder-right-style/border-bottom-style/border-left-style 单独设置边框样式</li>\n<li>border-width边框宽度<ul>\n<li>thin</li>\n<li>medium</li>\n<li>thick</li>\n<li>&lt;length&gt;</li>\n</ul>\n</li>\n<li>border-top-width/border-right-width/border-bottom-width/border-left-width单独设置宽度</li>\n<li>boder-color边框颜色<ul>\n<li>&lt;color&gt;</li>\n<li>transparent 透明</li>\n</ul>\n</li>\n<li>border-top-color/border-right-color/border-bottom-color/border-left-color单独设置颜色</li>\n<li>border-top/boder-right/border-bottom/border-left单独设置边框<ul>\n<li>[&lt;border-width&gt;] [&lt;border-style&gt;][boder-color]</li>\n</ul>\n</li>\n<li>border 全局边框，应用到四条边<ul>\n<li>[&lt;border-width&gt;] [&lt;border-style&gt;][boder-color]</li>\n</ul>\n</li>\n</ul>\n<p>对于只包含文本的行，能改变行间距离的属性只有line-height, font-size和vertical-align。<br>行内元素使用正左右外边距，可以多出来水平空间，负的左右外边距会使行内元素与其他内容重叠。<br>行内元素的边框，不会改变行高。<br>行内元素使用正的左右边框可以多出来水平空间。</p>\n<ul>\n<li>padding 内边距<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n</ul>\n</li>\n</ul>\n<p>行内非替换元素使用左右内边距时，可以多出来水平空间，而上下边距不会改变行高。<br>可以想图像使用内边距,外边距，边框时，它可以改变行高，也可以水平方向留出距离。</p>\n<ul>\n<li>background-color 背景元素<ul>\n<li>&lt;color&gt;</li>\n<li>transparent</li>\n</ul>\n</li>\n<li>background-image 如body {background-image: url(bg23.gif)}<ul>\n<li>&lt;uri&gt;</li>\n<li>none</li>\n</ul>\n</li>\n<li>background-repeat 有方向的重复<ul>\n<li>repeat</li>\n<li>repeat-x</li>\n<li>repeat-y</li>\n<li>no-repeat</li>\n</ul>\n</li>\n<li>background-position 背景定位<ul>\n<li>&lt;percentage&gt;</li>\n<li>&lt;length&gt;</li>\n<li>left/center/right/top/bottom</li>\n</ul>\n</li>\n</ul>\n<p>background-position单个关键字等价<br>center: cener center<br>top: top center或者center top<br>bottom: bottom center或者center bottom<br>left: left center 或者center left<br>right: right center 或者center right</p>\n<ul>\n<li><p>background-attachment</p>\n<ul>\n<li>scroll 跟随文档滚动</li>\n<li>fixed 不跟随文档滚动</li>\n</ul>\n</li>\n<li><p>background 简写属性</p>\n<ul>\n<li>&lt;background-color&gt; || &lt;background-image&gt; || &lt;backgroud-repeat&gt; || &lt;background-attachment&gt; || &lt;background-position&gt;</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第十章-浮动和定位\"><a href=\"#第十章-浮动和定位\" class=\"headerlink\" title=\"第十章 浮动和定位\"></a>第十章 浮动和定位</h2><ul>\n<li>float<ul>\n<li>left</li>\n<li>right</li>\n<li>none</li>\n</ul>\n</li>\n</ul>\n<p>浮动元素会从文档的正常流中删除，它还是会影响布局。其他内容会环绕元素，浮动元素的外边距不会合并</p>\n<ul>\n<li><p>position</p>\n<ul>\n<li>static 默认 块元素生成一个矩形框，行内元素创建一个或多个行框，置于父元素中</li>\n<li>relative 元素偏移某个距离，元素仍保持未定位前的形状，它原本占据的空间仍保留</li>\n<li>absolute 元素框从文档流中完全删除，并相对于其包含块定位。</li>\n<li>fixed 元素的表现类似于absolute，不过，其包含块是视窗本身。</li>\n</ul>\n</li>\n<li><p>偏移属性，在position为relative,absolute和fixed时，可以设置偏移属性top right bottom left</p>\n<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n<li>auto 初始值</li>\n</ul>\n</li>\n</ul>\n<p>包含块</p>\n<p>根元素的包含块，由用户代理建立，即html元素或body元素<br>对于一个非根元素，如果其position时relative或static，包含块则由最近的块级框，表单元格或行内块祖先框的内容边界构成。<br>对于一个非根元素，如果其position时absolute，包含块则由最近的position值不是static的祖先元素。</p>\n<ul>\n<li>overflow<ul>\n<li>visible</li>\n<li>hidden</li>\n<li>scroll</li>\n<li>auto</li>\n</ul>\n</li>\n</ul>"},{"title":"kotlin初探","date":"2017-05-25T04:33:34.000Z","_content":"\n最近google推出了新的Android开发语言[kotlin](http://kotlinlang.org/)，花了点时间了解一下皮毛。\n\n在[kotlin](http://kotlinlang.org/)官网上的资料还是比较丰富的，提供了一个在线的[编辑器](https://try.kotlinlang.org/#/Examples/Hello,%20world!/Simplest%20version/Simplest%20version.kt)，可以写一些小的程序片段。另外提供了一个代码翻译的工具，可以直接将java代码片段翻译成kotlin。\n\n<!--more-->\n\n例如以下java代码：\n```java\n class Greeting {\n\tprivate String greeting;\n\tpublic Greeting(String g) {\n\t\tgreeting = g;\n\t}\n\tpublic void sayHello(String you) {\n\t\tSystem.out.println(greeting + \" \" + you);\n\t}\n\tpublic static void main(String[] argv) {\n\t\tGreeting greeting = new Greeting(\"Hello\");\n\t\tgreeting.sayHello(argv[0]);\n\t}\n}\n```\n对应的kotlin代码如下：\n\n```kotlin\ninternal class Greeting(g:String) {\n  private val greeting:String\n  init{\n    greeting = g\n  }\n  fun sayHello(you:String) {\n    println(greeting + \" \" + you)\n  }\n  companion object {\n    @JvmStatic fun main(argv:Array<String>) {\n      val greeting = Greeting(\"Hello\")\n      greeting.sayHello(argv[0])\n    }\n  }\n}\n```\n\n## 语法\nkotlin语法很多特性都有javascript ES6的影子，比如字符串模板，解构赋值，箭头函数，元编程。\n\n### 包定义。\n包定义必需位于源文件的顶端，格式如下\n```kotlin\npackage my.demo\n\nimport java.util.*\n\n// ...\n```\n这个跟java是一样的。\n\n### 函数\n#### 定义两个Int类型参数的求和函数 \n```kotlin \nfun sum(a: Int, b: Int): Int {\n    return a + b\n}\n```\n上面的函数可以有更简单的表达式写法\n#### 定义表达式函数\n可以看出表达式函数的返回值是自动推断的。\n```kotlin\nfun sum(a: Int, b: Int) = a + b\n```\n### 定义空返回值函数\n```kotlin\nfun printSum(a: Int, b: Int): Unit {\n    println(\"sum of $a and $b is ${a + b}\")\n}\n```\n其中<b>Unit</b>可以省略\n```kotlin\nfun printSum(a: Int, b: Int): {\n    println(\"sum of $a and $b is ${a + b}\")\n}\n```\n参见[函数](http://kotlinlang.org/docs/reference/functions.html)\n\n### 局部变量\n#### 定义常量（只允许赋值一次）\n```kotlin\nval a: Int = 1  // 立即赋值\nval b = 2   // 类型推断，为`Int`\nval c: Int  // 如果没有给出初始化的值，需要给出变量类型\nc = 3       // 延迟赋值\n```\n\n#### 定义变量\n```kotlin\nvar x = 5 // 类型推断\nx += 1\n```\n参见[属性和域](http://kotlinlang.org/docs/reference/properties.html)\n\n\n### 注释\nkotlin的注释跟java是一样的，支持行和块两种注释方式：\n```\n// This is an end-of-line comment\n\n/* This is a block comment\n   on multiple lines. */\n```\n跟java不一样的是，kotlin的块注释是可以嵌套的。\n```kotlin\n/*\n *This is a block comment\n *  on multiple lines\n /* This is a nested block comment.*/\n *This is a block comment\n *  on multiple lines\n */\n```\n参见[注释](http://kotlinlang.org/docs/reference/kotlin-doc.html)\n\n### 字符串模板\n```kotlin\nvar a = 1\n// 简单的字符串模板：\nval s1 = \"a is $a\" \n\na = 2\n// 任意表达式的模板：\nval s2 = \"${s1.replace(\"is\", \"was\")}, but now is $a\"\n```\n参见[字符串模板](http://kotlinlang.org/docs/reference/basic-types.html#string-templates)\n\n### 条件表达式\nkotlin没有三目运算符，取而代之的是条件表达式。\n\n例如一个常规的求最大值函数\n```kotlin\nfun maxOf(a: Int, b: Int): Int {\n    if(a > b) {\n        return a\n    } else {\n        return b\n    }\n}\n```\n假如用条件表达式可以这样写\n```kotlin\nfun maxOf(a: Int, b: Int) = if(a > b) a else b\n```\n参见[if表达式](http://kotlinlang.org/docs/reference/control-flow.html#if-expression)\n\n### 使用nullable和判断null\n如果一个值可能是null的话必须显示的标记出来，如\n如果<b>str</b>转换成<b>Int</b>失败，返回<b>null</b>:\n```kotlin\nfun parseInt(str: String): Int? {\n    //...\n}\n```\n使用返回nullable的函数。\n```kotlin\nfun printProduct(arg1: String, arg2: String) {\n    val x = parseInt(arg1)\n    val y = parseInt(arg2)\n    if(x != null && y != null) {\n        println(x * y)\n    } else {\n        println(\"'$arg1' 或者 '$arg2' 不是数字\")\n    }\n}\n```\n参见[安全的null](http://kotlinlang.org/docs/reference/null-safety.html)\n\n### 类型检查和自动转换\n这个操作用来检查一个对象的类型，局部变量或者属性经过判断之后，不用再显示的转换了，例如。\n\n```kotlin\nfun getStringLength(obj: Any): Int? {\n    if(obj is String) {\n        //obj在这个分支内自动转为\"String\"类型\n        return obj.length\n    }\n    //在上面的类型检查分支之外，类型仍然为\"Any\"\n    return null\n}\n```\n另一种方式\n```kotlin\nfun getStringLength(obj: Any): Int? {\n    if(obj !is String) {\n        return null\n    }\n    return obj.length\n}\n```\n甚至可以这样\n```kotlin\nfun getStringLength(obj: Any): Int? {\n    //obj在&&右侧自动转换为String类型\n    if(obj is String && obj.length > 0) {\n        return obj.length\n    }\n    return null\n}\n```\n参见[类](http://kotlinlang.org/docs/reference/classes.html)和[类型转换](http://kotlinlang.org/docs/reference/typecasts.html)\n\n### for循环\n```kotlin\nval items = listOf(\"apple\", \"banana\", \"kiwi\")\nfor(item in items) {\n    println(item)\n}\n```\n或者\n```kotlin\nval items = listOf(\"apple\", \"banana\", \"kiwi\")\nfor(i in items.indices) {\n    println(\"item at $i is ${item[i]}\")\n}\n```\n参见[for循环](http://kotlinlang.org/docs/reference/control-flow.html#for-loops)\n\n### while循环\n```kotlin\nval items = listOf(\"apple\", \"banana\", \"kiwi\")\nvar i = 0\nwhile(i < items.size) {\n    println(\"item at $i is ${item[i]}\")\n    i++\n}\n```\n参见[while循环](http://kotlinlang.org/docs/reference/control-flow.html#while-loops)\n\n### when表达式\nwhen通常用来代替switch和多个if else，且功能强大的多。如\n```kotlin\nfun describe(obj: Any): String = \nwhen(obj) {\n    1 -> \"One\"\n    \"Hello\" -> \"Greeting\"\n    is Long -> \"Long\"\n    !is String -> \"Not a String\"\n    else -> \"Unknow\"\n}\n```\n参见[when表达式](http://kotlinlang.org/docs/reference/control-flow.html#when-expression)\n\n### 使用范围表达式(<b>..</b>)\n#### 用in运算符检查一个数字是否在一个范围内。\n```kotlin\nval x = 10\nval y = 9\n//这是个闭区间,1和y+1都算进去。\nif(x in 1..y+1) {\n    println(\"fits in range\")\n}\n```\n#### 检查一个数字是否超出范围\n```kotlin\nval list = listOf(\"a\", \"b\", \"c\")\nif(-1 !in 0..list.lastIndex) {\n    println(\"-1 is out of range\")\n} \nif(list.size !is list.indices) {\n    println(\"list size is out of valid list indices range too\")\n}\n```\n#### 遍历一个范围\n```kotlin\nfor(x in 1..5) {\n    print(x)\n}\n```\n\n#### 使用步进遍历范围\n```kotlin\nfor(x in 1..10 step 2) {\n    print(x)\n}\nfor(x in 9 downTo 0 step 3) {\n    print(x)\n}\n```\n参见[范围](http://kotlinlang.org/docs/reference/ranges.html)\n\n### 集合\n遍历一个集合\n```kotlin\nfor (item in items) {\n    println(item)\n}\n```\n\n使用in操作判断集合是否含有某元素，如\n```kotlin\nfun main(args: Array<String>) {\n    val items = setOf(\"apple\", \"banana\", \"kiwi\")\n    when {\n        \"orange\" in items -> println(\"juicy\")\n        \"apple\" in items -> println(\"apple is fine too\")\n    }\n}\n```\n上述代码输出\n```\napple is fine too\n```\n\n使用lambda表达式过滤map集合\n```kotlin\nfun main(args: Array<String>) {\n    val fruits = listOf(\"banana\", \"avocado\", \"apple\", \"kiwi\")\n    fruits\n    .filter { it.startsWith(\"a\") }\n    .sortedBy { it }\n    .map { it.toUpperCase() }\n    .forEach { println(it) }\n}\n```\n上述代码输出\n```\nAPPLE\nAVOCADO\n```\n参见[高阶函数和lambda](http://kotlinlang.org/docs/reference/lambdas.html)\n\n## 习题\n#### 数组求和\n```kotlin\n/*\n * Your task is to implement the sum() function so that it computes the sum of\n * all elements in the given array a.\n */\npackage sum\n\nfun sum(a: IntArray): Int {\n    var s = 0\n    for(n in a) {\n        s += n\n    }\n    return s\n}\n```\n\n#### 求数组最大值索引\n```kotlin\n/*\n * Your task is to implement the indexOfMax() function so that it returns\n * the index of the largest element in the array, or null if the array is empty.\n */\npackage maxindex\n\nfun indexOfMax(a: IntArray): Int? {\n\tif(a.size == 0) {\n        return null\n    }\n    var m = Integer.MIN_VALUE\n    var ret = -1\n    for(i in a.indices) {\n        if(a[i] >= m) {\n            m = a[i]\n            ret = i;\n        }\n    } \n    return ret\n}\n\n```\n\n#### 这是求个什么？自己看解释吧\n```kotlin\n/*\n * Any array may be viewed as a number of \"runs\" of equal numbers.\n * For example, the following array has two runs:\n *   1, 1, 1, 2, 2\n * Three 1's in a row form the first run, and two 2's form the second.\n * This array has two runs of length one:\n *   3, 4\n * And this one has five runs:\n *   1, 0, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0\n * Your task is to implement the runs() function so that it returns the number\n * of runs in the given array.\n */\npackage runs\n\nfun runs(a: IntArray): Int {\n    if(a.size == 0) {\n        return 0\n    }\n    var ret = 1\n    var cur = a[0]\n    for(n in a) {\n    \tif(n != cur) {\n            ++ret\n            cur = n\n        }\n    }\n    return ret\n}\n```\n\n#### 求是否是回文字符串\n```kotlin\n/*\n * Your task is to implement a palindrome test.\n *\n * A string is called a palindrome when it reads the same way left-to-right\n * and right-to-left.\n *\n * See http://en.wikipedia.org/wiki/Palindrome\n */\npackage palindrome\n\nfun isPalindrome(s: String): Boolean {\n    if(s.length < 2) {\n        return true\n    }\n    var len = s.length / 2\n    for(i in 0..len - 1) {\n        if(s[i] != s[s.length - i - 1]) {\n            return false\n        }\n    }\n    return true\n}\n```\n\n#### 求落单数字\n```kotlin\n/*\n * Think of a perfect world where everybody has a soulmate.\n * Now, the real world is imperfect: there is exactly one number in the array\n * that does not have a pair. A pair is an element with the same value.\n * For example in this array:\n *   1, 2, 1, 2\n * every number has a pair, but in this one:\n *   1, 1, 1\n * one of the ones is lonely.\n *\n * Your task is to implement the findPairless() function so that it finds the\n * lonely number and returns it.\n *\n * A hint: there's a solution that looks at each element only once and uses no\n * data structures like collections or trees.\n */\npackage pairless\n\nfun findPairless(a: IntArray): Int {\n    // Write your solution here\n    var map = hashMapOf<Int, Int>();\n    for(n in a) {\n        var i = map.get(n)\n        \n        map.put(n, if(i == null) 1 else i + 1)\n    }\n    \n    for((k, v) in map) {\n        if(v % 2 == 1) {\n            return k\n        }\n    }\n    return 0\n}\n\n```","source":"_posts/kotlin-sample.md","raw":"---\ntitle: kotlin初探\ndate: 2017-05-25 12:33:34\ntags: [android, java, kotlin]\n---\n\n最近google推出了新的Android开发语言[kotlin](http://kotlinlang.org/)，花了点时间了解一下皮毛。\n\n在[kotlin](http://kotlinlang.org/)官网上的资料还是比较丰富的，提供了一个在线的[编辑器](https://try.kotlinlang.org/#/Examples/Hello,%20world!/Simplest%20version/Simplest%20version.kt)，可以写一些小的程序片段。另外提供了一个代码翻译的工具，可以直接将java代码片段翻译成kotlin。\n\n<!--more-->\n\n例如以下java代码：\n```java\n class Greeting {\n\tprivate String greeting;\n\tpublic Greeting(String g) {\n\t\tgreeting = g;\n\t}\n\tpublic void sayHello(String you) {\n\t\tSystem.out.println(greeting + \" \" + you);\n\t}\n\tpublic static void main(String[] argv) {\n\t\tGreeting greeting = new Greeting(\"Hello\");\n\t\tgreeting.sayHello(argv[0]);\n\t}\n}\n```\n对应的kotlin代码如下：\n\n```kotlin\ninternal class Greeting(g:String) {\n  private val greeting:String\n  init{\n    greeting = g\n  }\n  fun sayHello(you:String) {\n    println(greeting + \" \" + you)\n  }\n  companion object {\n    @JvmStatic fun main(argv:Array<String>) {\n      val greeting = Greeting(\"Hello\")\n      greeting.sayHello(argv[0])\n    }\n  }\n}\n```\n\n## 语法\nkotlin语法很多特性都有javascript ES6的影子，比如字符串模板，解构赋值，箭头函数，元编程。\n\n### 包定义。\n包定义必需位于源文件的顶端，格式如下\n```kotlin\npackage my.demo\n\nimport java.util.*\n\n// ...\n```\n这个跟java是一样的。\n\n### 函数\n#### 定义两个Int类型参数的求和函数 \n```kotlin \nfun sum(a: Int, b: Int): Int {\n    return a + b\n}\n```\n上面的函数可以有更简单的表达式写法\n#### 定义表达式函数\n可以看出表达式函数的返回值是自动推断的。\n```kotlin\nfun sum(a: Int, b: Int) = a + b\n```\n### 定义空返回值函数\n```kotlin\nfun printSum(a: Int, b: Int): Unit {\n    println(\"sum of $a and $b is ${a + b}\")\n}\n```\n其中<b>Unit</b>可以省略\n```kotlin\nfun printSum(a: Int, b: Int): {\n    println(\"sum of $a and $b is ${a + b}\")\n}\n```\n参见[函数](http://kotlinlang.org/docs/reference/functions.html)\n\n### 局部变量\n#### 定义常量（只允许赋值一次）\n```kotlin\nval a: Int = 1  // 立即赋值\nval b = 2   // 类型推断，为`Int`\nval c: Int  // 如果没有给出初始化的值，需要给出变量类型\nc = 3       // 延迟赋值\n```\n\n#### 定义变量\n```kotlin\nvar x = 5 // 类型推断\nx += 1\n```\n参见[属性和域](http://kotlinlang.org/docs/reference/properties.html)\n\n\n### 注释\nkotlin的注释跟java是一样的，支持行和块两种注释方式：\n```\n// This is an end-of-line comment\n\n/* This is a block comment\n   on multiple lines. */\n```\n跟java不一样的是，kotlin的块注释是可以嵌套的。\n```kotlin\n/*\n *This is a block comment\n *  on multiple lines\n /* This is a nested block comment.*/\n *This is a block comment\n *  on multiple lines\n */\n```\n参见[注释](http://kotlinlang.org/docs/reference/kotlin-doc.html)\n\n### 字符串模板\n```kotlin\nvar a = 1\n// 简单的字符串模板：\nval s1 = \"a is $a\" \n\na = 2\n// 任意表达式的模板：\nval s2 = \"${s1.replace(\"is\", \"was\")}, but now is $a\"\n```\n参见[字符串模板](http://kotlinlang.org/docs/reference/basic-types.html#string-templates)\n\n### 条件表达式\nkotlin没有三目运算符，取而代之的是条件表达式。\n\n例如一个常规的求最大值函数\n```kotlin\nfun maxOf(a: Int, b: Int): Int {\n    if(a > b) {\n        return a\n    } else {\n        return b\n    }\n}\n```\n假如用条件表达式可以这样写\n```kotlin\nfun maxOf(a: Int, b: Int) = if(a > b) a else b\n```\n参见[if表达式](http://kotlinlang.org/docs/reference/control-flow.html#if-expression)\n\n### 使用nullable和判断null\n如果一个值可能是null的话必须显示的标记出来，如\n如果<b>str</b>转换成<b>Int</b>失败，返回<b>null</b>:\n```kotlin\nfun parseInt(str: String): Int? {\n    //...\n}\n```\n使用返回nullable的函数。\n```kotlin\nfun printProduct(arg1: String, arg2: String) {\n    val x = parseInt(arg1)\n    val y = parseInt(arg2)\n    if(x != null && y != null) {\n        println(x * y)\n    } else {\n        println(\"'$arg1' 或者 '$arg2' 不是数字\")\n    }\n}\n```\n参见[安全的null](http://kotlinlang.org/docs/reference/null-safety.html)\n\n### 类型检查和自动转换\n这个操作用来检查一个对象的类型，局部变量或者属性经过判断之后，不用再显示的转换了，例如。\n\n```kotlin\nfun getStringLength(obj: Any): Int? {\n    if(obj is String) {\n        //obj在这个分支内自动转为\"String\"类型\n        return obj.length\n    }\n    //在上面的类型检查分支之外，类型仍然为\"Any\"\n    return null\n}\n```\n另一种方式\n```kotlin\nfun getStringLength(obj: Any): Int? {\n    if(obj !is String) {\n        return null\n    }\n    return obj.length\n}\n```\n甚至可以这样\n```kotlin\nfun getStringLength(obj: Any): Int? {\n    //obj在&&右侧自动转换为String类型\n    if(obj is String && obj.length > 0) {\n        return obj.length\n    }\n    return null\n}\n```\n参见[类](http://kotlinlang.org/docs/reference/classes.html)和[类型转换](http://kotlinlang.org/docs/reference/typecasts.html)\n\n### for循环\n```kotlin\nval items = listOf(\"apple\", \"banana\", \"kiwi\")\nfor(item in items) {\n    println(item)\n}\n```\n或者\n```kotlin\nval items = listOf(\"apple\", \"banana\", \"kiwi\")\nfor(i in items.indices) {\n    println(\"item at $i is ${item[i]}\")\n}\n```\n参见[for循环](http://kotlinlang.org/docs/reference/control-flow.html#for-loops)\n\n### while循环\n```kotlin\nval items = listOf(\"apple\", \"banana\", \"kiwi\")\nvar i = 0\nwhile(i < items.size) {\n    println(\"item at $i is ${item[i]}\")\n    i++\n}\n```\n参见[while循环](http://kotlinlang.org/docs/reference/control-flow.html#while-loops)\n\n### when表达式\nwhen通常用来代替switch和多个if else，且功能强大的多。如\n```kotlin\nfun describe(obj: Any): String = \nwhen(obj) {\n    1 -> \"One\"\n    \"Hello\" -> \"Greeting\"\n    is Long -> \"Long\"\n    !is String -> \"Not a String\"\n    else -> \"Unknow\"\n}\n```\n参见[when表达式](http://kotlinlang.org/docs/reference/control-flow.html#when-expression)\n\n### 使用范围表达式(<b>..</b>)\n#### 用in运算符检查一个数字是否在一个范围内。\n```kotlin\nval x = 10\nval y = 9\n//这是个闭区间,1和y+1都算进去。\nif(x in 1..y+1) {\n    println(\"fits in range\")\n}\n```\n#### 检查一个数字是否超出范围\n```kotlin\nval list = listOf(\"a\", \"b\", \"c\")\nif(-1 !in 0..list.lastIndex) {\n    println(\"-1 is out of range\")\n} \nif(list.size !is list.indices) {\n    println(\"list size is out of valid list indices range too\")\n}\n```\n#### 遍历一个范围\n```kotlin\nfor(x in 1..5) {\n    print(x)\n}\n```\n\n#### 使用步进遍历范围\n```kotlin\nfor(x in 1..10 step 2) {\n    print(x)\n}\nfor(x in 9 downTo 0 step 3) {\n    print(x)\n}\n```\n参见[范围](http://kotlinlang.org/docs/reference/ranges.html)\n\n### 集合\n遍历一个集合\n```kotlin\nfor (item in items) {\n    println(item)\n}\n```\n\n使用in操作判断集合是否含有某元素，如\n```kotlin\nfun main(args: Array<String>) {\n    val items = setOf(\"apple\", \"banana\", \"kiwi\")\n    when {\n        \"orange\" in items -> println(\"juicy\")\n        \"apple\" in items -> println(\"apple is fine too\")\n    }\n}\n```\n上述代码输出\n```\napple is fine too\n```\n\n使用lambda表达式过滤map集合\n```kotlin\nfun main(args: Array<String>) {\n    val fruits = listOf(\"banana\", \"avocado\", \"apple\", \"kiwi\")\n    fruits\n    .filter { it.startsWith(\"a\") }\n    .sortedBy { it }\n    .map { it.toUpperCase() }\n    .forEach { println(it) }\n}\n```\n上述代码输出\n```\nAPPLE\nAVOCADO\n```\n参见[高阶函数和lambda](http://kotlinlang.org/docs/reference/lambdas.html)\n\n## 习题\n#### 数组求和\n```kotlin\n/*\n * Your task is to implement the sum() function so that it computes the sum of\n * all elements in the given array a.\n */\npackage sum\n\nfun sum(a: IntArray): Int {\n    var s = 0\n    for(n in a) {\n        s += n\n    }\n    return s\n}\n```\n\n#### 求数组最大值索引\n```kotlin\n/*\n * Your task is to implement the indexOfMax() function so that it returns\n * the index of the largest element in the array, or null if the array is empty.\n */\npackage maxindex\n\nfun indexOfMax(a: IntArray): Int? {\n\tif(a.size == 0) {\n        return null\n    }\n    var m = Integer.MIN_VALUE\n    var ret = -1\n    for(i in a.indices) {\n        if(a[i] >= m) {\n            m = a[i]\n            ret = i;\n        }\n    } \n    return ret\n}\n\n```\n\n#### 这是求个什么？自己看解释吧\n```kotlin\n/*\n * Any array may be viewed as a number of \"runs\" of equal numbers.\n * For example, the following array has two runs:\n *   1, 1, 1, 2, 2\n * Three 1's in a row form the first run, and two 2's form the second.\n * This array has two runs of length one:\n *   3, 4\n * And this one has five runs:\n *   1, 0, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0\n * Your task is to implement the runs() function so that it returns the number\n * of runs in the given array.\n */\npackage runs\n\nfun runs(a: IntArray): Int {\n    if(a.size == 0) {\n        return 0\n    }\n    var ret = 1\n    var cur = a[0]\n    for(n in a) {\n    \tif(n != cur) {\n            ++ret\n            cur = n\n        }\n    }\n    return ret\n}\n```\n\n#### 求是否是回文字符串\n```kotlin\n/*\n * Your task is to implement a palindrome test.\n *\n * A string is called a palindrome when it reads the same way left-to-right\n * and right-to-left.\n *\n * See http://en.wikipedia.org/wiki/Palindrome\n */\npackage palindrome\n\nfun isPalindrome(s: String): Boolean {\n    if(s.length < 2) {\n        return true\n    }\n    var len = s.length / 2\n    for(i in 0..len - 1) {\n        if(s[i] != s[s.length - i - 1]) {\n            return false\n        }\n    }\n    return true\n}\n```\n\n#### 求落单数字\n```kotlin\n/*\n * Think of a perfect world where everybody has a soulmate.\n * Now, the real world is imperfect: there is exactly one number in the array\n * that does not have a pair. A pair is an element with the same value.\n * For example in this array:\n *   1, 2, 1, 2\n * every number has a pair, but in this one:\n *   1, 1, 1\n * one of the ones is lonely.\n *\n * Your task is to implement the findPairless() function so that it finds the\n * lonely number and returns it.\n *\n * A hint: there's a solution that looks at each element only once and uses no\n * data structures like collections or trees.\n */\npackage pairless\n\nfun findPairless(a: IntArray): Int {\n    // Write your solution here\n    var map = hashMapOf<Int, Int>();\n    for(n in a) {\n        var i = map.get(n)\n        \n        map.put(n, if(i == null) 1 else i + 1)\n    }\n    \n    for((k, v) in map) {\n        if(v % 2 == 1) {\n            return k\n        }\n    }\n    return 0\n}\n\n```","slug":"kotlin-sample","published":1,"updated":"2019-01-03T02:48:56.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aankg0079biui1h5053p0","content":"<p>最近google推出了新的Android开发语言<a href=\"http://kotlinlang.org/\" target=\"_blank\" rel=\"noopener\">kotlin</a>，花了点时间了解一下皮毛。</p>\n<p>在<a href=\"http://kotlinlang.org/\" target=\"_blank\" rel=\"noopener\">kotlin</a>官网上的资料还是比较丰富的，提供了一个在线的<a href=\"https://try.kotlinlang.org/#/Examples/Hello,%20world!/Simplest%20version/Simplest%20version.kt\" target=\"_blank\" rel=\"noopener\">编辑器</a>，可以写一些小的程序片段。另外提供了一个代码翻译的工具，可以直接将java代码片段翻译成kotlin。</p>\n<a id=\"more\"></a>\n<p>例如以下java代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeting</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String greeting;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Greeting</span><span class=\"params\">(String g)</span> </span>&#123;</span><br><span class=\"line\">\t\tgreeting = g;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">(String you)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(greeting + <span class=\"string\">\" \"</span> + you);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] argv)</span> </span>&#123;</span><br><span class=\"line\">\t\tGreeting greeting = <span class=\"keyword\">new</span> Greeting(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">\t\tgreeting.sayHello(argv[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对应的kotlin代码如下：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeting</span></span>(g:String) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> greeting:String</span><br><span class=\"line\">  <span class=\"keyword\">init</span>&#123;</span><br><span class=\"line\">    greeting = g</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sayHello</span><span class=\"params\">(you:<span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    println(greeting + <span class=\"string\">\" \"</span> + you)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@JvmStatic</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(argv:<span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">val</span> greeting = Greeting(<span class=\"string\">\"Hello\"</span>)</span><br><span class=\"line\">      greeting.sayHello(argv[<span class=\"number\">0</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>kotlin语法很多特性都有javascript ES6的影子，比如字符串模板，解构赋值，箭头函数，元编程。</p>\n<h3 id=\"包定义。\"><a href=\"#包定义。\" class=\"headerlink\" title=\"包定义。\"></a>包定义。</h3><p>包定义必需位于源文件的顶端，格式如下<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> my.demo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure></p>\n<p>这个跟java是一样的。</p>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><h4 id=\"定义两个Int类型参数的求和函数\"><a href=\"#定义两个Int类型参数的求和函数\" class=\"headerlink\" title=\"定义两个Int类型参数的求和函数\"></a>定义两个Int类型参数的求和函数</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sum</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的函数可以有更简单的表达式写法</p>\n<h4 id=\"定义表达式函数\"><a href=\"#定义表达式函数\" class=\"headerlink\" title=\"定义表达式函数\"></a>定义表达式函数</h4><p>可以看出表达式函数的返回值是自动推断的。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sum</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span> = a + b</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"定义空返回值函数\"><a href=\"#定义空返回值函数\" class=\"headerlink\" title=\"定义空返回值函数\"></a>定义空返回值函数</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printSum</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Unit</span> &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"sum of <span class=\"variable\">$a</span> and <span class=\"variable\">$b</span> is <span class=\"subst\">$&#123;a + b&#125;</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中<b>Unit</b>可以省略<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printSum</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span>: &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"sum of <span class=\"variable\">$a</span> and <span class=\"variable\">$b</span> is <span class=\"subst\">$&#123;a + b&#125;</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/functions.html\" target=\"_blank\" rel=\"noopener\">函数</a></p>\n<h3 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h3><h4 id=\"定义常量（只允许赋值一次）\"><a href=\"#定义常量（只允许赋值一次）\" class=\"headerlink\" title=\"定义常量（只允许赋值一次）\"></a>定义常量（只允许赋值一次）</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> a: <span class=\"built_in\">Int</span> = <span class=\"number\">1</span>  <span class=\"comment\">// 立即赋值</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> b = <span class=\"number\">2</span>   <span class=\"comment\">// 类型推断，为`Int`</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> c: <span class=\"built_in\">Int</span>  <span class=\"comment\">// 如果没有给出初始化的值，需要给出变量类型</span></span><br><span class=\"line\">c = <span class=\"number\">3</span>       <span class=\"comment\">// 延迟赋值</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"定义变量\"><a href=\"#定义变量\" class=\"headerlink\" title=\"定义变量\"></a>定义变量</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">5</span> <span class=\"comment\">// 类型推断</span></span><br><span class=\"line\">x += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/properties.html\" target=\"_blank\" rel=\"noopener\">属性和域</a></p>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>kotlin的注释跟java是一样的，支持行和块两种注释方式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// This is an end-of-line comment</span><br><span class=\"line\"></span><br><span class=\"line\">/* This is a block comment</span><br><span class=\"line\">   on multiple lines. */</span><br></pre></td></tr></table></figure></p>\n<p>跟java不一样的是，kotlin的块注释是可以嵌套的。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *This is a block comment</span></span><br><span class=\"line\"><span class=\"comment\"> *  on multiple lines</span></span><br><span class=\"line\"><span class=\"comment\"> /* This is a nested block comment.*/</span></span><br><span class=\"line\"> *This <span class=\"keyword\">is</span> a block comment</span><br><span class=\"line\"> *  on multiple lines</span><br><span class=\"line\"> */</span><br></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/kotlin-doc.html\" target=\"_blank\" rel=\"noopener\">注释</a></p>\n<h3 id=\"字符串模板\"><a href=\"#字符串模板\" class=\"headerlink\" title=\"字符串模板\"></a>字符串模板</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">// 简单的字符串模板：</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> s1 = <span class=\"string\">\"a is <span class=\"variable\">$a</span>\"</span> </span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\">// 任意表达式的模板：</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> s2 = <span class=\"string\">\"<span class=\"subst\">$&#123;s1.replace(\"is\", \"was\")&#125;</span>, but now is <span class=\"variable\">$a</span>\"</span></span><br></pre></td></tr></table></figure>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/basic-types.html#string-templates\" target=\"_blank\" rel=\"noopener\">字符串模板</a></p>\n<h3 id=\"条件表达式\"><a href=\"#条件表达式\" class=\"headerlink\" title=\"条件表达式\"></a>条件表达式</h3><p>kotlin没有三目运算符，取而代之的是条件表达式。</p>\n<p>例如一个常规的求最大值函数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">maxOf</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a &gt; b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>假如用条件表达式可以这样写<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">maxOf</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span> = <span class=\"keyword\">if</span>(a &gt; b) a <span class=\"keyword\">else</span> b</span><br></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/control-flow.html#if-expression\" target=\"_blank\" rel=\"noopener\">if表达式</a></p>\n<h3 id=\"使用nullable和判断null\"><a href=\"#使用nullable和判断null\" class=\"headerlink\" title=\"使用nullable和判断null\"></a>使用nullable和判断null</h3><p>如果一个值可能是null的话必须显示的标记出来，如<br>如果<b>str</b>转换成<b>Int</b>失败，返回<b>null</b>:<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">parseInt</span><span class=\"params\">(str: <span class=\"type\">String</span>)</span></span>: <span class=\"built_in\">Int</span>? &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用返回nullable的函数。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printProduct</span><span class=\"params\">(arg1: <span class=\"type\">String</span>, arg2: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> x = parseInt(arg1)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> y = parseInt(arg2)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x != <span class=\"literal\">null</span> &amp;&amp; y != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        println(x * y)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"'<span class=\"variable\">$arg1</span>' 或者 '<span class=\"variable\">$arg2</span>' 不是数字\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/null-safety.html\" target=\"_blank\" rel=\"noopener\">安全的null</a></p>\n<h3 id=\"类型检查和自动转换\"><a href=\"#类型检查和自动转换\" class=\"headerlink\" title=\"类型检查和自动转换\"></a>类型检查和自动转换</h3><p>这个操作用来检查一个对象的类型，局部变量或者属性经过判断之后，不用再显示的转换了，例如。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getStringLength</span><span class=\"params\">(obj: <span class=\"type\">Any</span>)</span></span>: <span class=\"built_in\">Int</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj <span class=\"keyword\">is</span> String) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//obj在这个分支内自动转为\"String\"类型</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj.length</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//在上面的类型检查分支之外，类型仍然为\"Any\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另一种方式<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getStringLength</span><span class=\"params\">(obj: <span class=\"type\">Any</span>)</span></span>: <span class=\"built_in\">Int</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj !<span class=\"keyword\">is</span> String) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj.length</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>甚至可以这样<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getStringLength</span><span class=\"params\">(obj: <span class=\"type\">Any</span>)</span></span>: <span class=\"built_in\">Int</span>? &#123;</span><br><span class=\"line\">    <span class=\"comment\">//obj在&amp;&amp;右侧自动转换为String类型</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj <span class=\"keyword\">is</span> String &amp;&amp; obj.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj.length</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/classes.html\" target=\"_blank\" rel=\"noopener\">类</a>和<a href=\"http://kotlinlang.org/docs/reference/typecasts.html\" target=\"_blank\" rel=\"noopener\">类型转换</a></p>\n<h3 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> items = listOf(<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"banana\"</span>, <span class=\"string\">\"kiwi\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span>(item <span class=\"keyword\">in</span> items) &#123;</span><br><span class=\"line\">    println(item)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> items = listOf(<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"banana\"</span>, <span class=\"string\">\"kiwi\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> items.indices) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"item at <span class=\"variable\">$i</span> is <span class=\"subst\">$&#123;item[i]&#125;</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/control-flow.html#for-loops\" target=\"_blank\" rel=\"noopener\">for循环</a></p>\n<h3 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> items = listOf(<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"banana\"</span>, <span class=\"string\">\"kiwi\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(i &lt; items.size) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"item at <span class=\"variable\">$i</span> is <span class=\"subst\">$&#123;item[i]&#125;</span>\"</span>)</span><br><span class=\"line\">    i++</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/control-flow.html#while-loops\" target=\"_blank\" rel=\"noopener\">while循环</a></p>\n<h3 id=\"when表达式\"><a href=\"#when表达式\" class=\"headerlink\" title=\"when表达式\"></a>when表达式</h3><p>when通常用来代替switch和多个if else，且功能强大的多。如<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">describe</span><span class=\"params\">(obj: <span class=\"type\">Any</span>)</span></span>: String = </span><br><span class=\"line\"><span class=\"keyword\">when</span>(obj) &#123;</span><br><span class=\"line\">    <span class=\"number\">1</span> -&gt; <span class=\"string\">\"One\"</span></span><br><span class=\"line\">    <span class=\"string\">\"Hello\"</span> -&gt; <span class=\"string\">\"Greeting\"</span></span><br><span class=\"line\">    <span class=\"keyword\">is</span> <span class=\"built_in\">Long</span> -&gt; <span class=\"string\">\"Long\"</span></span><br><span class=\"line\">    !<span class=\"keyword\">is</span> String -&gt; <span class=\"string\">\"Not a String\"</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> -&gt; <span class=\"string\">\"Unknow\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/control-flow.html#when-expression\" target=\"_blank\" rel=\"noopener\">when表达式</a></p>\n<h3 id=\"使用范围表达式\"><a href=\"#使用范围表达式\" class=\"headerlink\" title=\"使用范围表达式(..)\"></a>使用范围表达式(<b>..</b>)</h3><h4 id=\"用in运算符检查一个数字是否在一个范围内。\"><a href=\"#用in运算符检查一个数字是否在一个范围内。\" class=\"headerlink\" title=\"用in运算符检查一个数字是否在一个范围内。\"></a>用in运算符检查一个数字是否在一个范围内。</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> x = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> y = <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"comment\">//这是个闭区间,1和y+1都算进去。</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(x <span class=\"keyword\">in</span> <span class=\"number\">1</span>..y+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"fits in range\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"检查一个数字是否超出范围\"><a href=\"#检查一个数字是否超出范围\" class=\"headerlink\" title=\"检查一个数字是否超出范围\"></a>检查一个数字是否超出范围</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list = listOf(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span>(-<span class=\"number\">1</span> !<span class=\"keyword\">in</span> <span class=\"number\">0</span>..list.lastIndex) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"-1 is out of range\"</span>)</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">if</span>(list.size !<span class=\"keyword\">is</span> list.indices) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"list size is out of valid list indices range too\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"遍历一个范围\"><a href=\"#遍历一个范围\" class=\"headerlink\" title=\"遍历一个范围\"></a>遍历一个范围</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(x <span class=\"keyword\">in</span> <span class=\"number\">1</span>..<span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用步进遍历范围\"><a href=\"#使用步进遍历范围\" class=\"headerlink\" title=\"使用步进遍历范围\"></a>使用步进遍历范围</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(x <span class=\"keyword\">in</span> <span class=\"number\">1</span>..<span class=\"number\">10</span> step <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(x <span class=\"keyword\">in</span> <span class=\"number\">9</span> downTo <span class=\"number\">0</span> step <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/ranges.html\" target=\"_blank\" rel=\"noopener\">范围</a></p>\n<h3 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h3><p>遍历一个集合<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (item <span class=\"keyword\">in</span> items) &#123;</span><br><span class=\"line\">    println(item)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用in操作判断集合是否含有某元素，如<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> items = setOf(<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"banana\"</span>, <span class=\"string\">\"kiwi\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">when</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">\"orange\"</span> <span class=\"keyword\">in</span> items -&gt; println(<span class=\"string\">\"juicy\"</span>)</span><br><span class=\"line\">        <span class=\"string\">\"apple\"</span> <span class=\"keyword\">in</span> items -&gt; println(<span class=\"string\">\"apple is fine too\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上述代码输出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apple is fine too</span><br></pre></td></tr></table></figure></p>\n<p>使用lambda表达式过滤map集合<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> fruits = listOf(<span class=\"string\">\"banana\"</span>, <span class=\"string\">\"avocado\"</span>, <span class=\"string\">\"apple\"</span>, <span class=\"string\">\"kiwi\"</span>)</span><br><span class=\"line\">    fruits</span><br><span class=\"line\">    .filter &#123; it.startsWith(<span class=\"string\">\"a\"</span>) &#125;</span><br><span class=\"line\">    .sortedBy &#123; it &#125;</span><br><span class=\"line\">    .map &#123; it.toUpperCase() &#125;</span><br><span class=\"line\">    .forEach &#123; println(it) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上述代码输出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APPLE</span><br><span class=\"line\">AVOCADO</span><br></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/lambdas.html\" target=\"_blank\" rel=\"noopener\">高阶函数和lambda</a></p>\n<h2 id=\"习题\"><a href=\"#习题\" class=\"headerlink\" title=\"习题\"></a>习题</h2><h4 id=\"数组求和\"><a href=\"#数组求和\" class=\"headerlink\" title=\"数组求和\"></a>数组求和</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Your task is to implement the sum() function so that it computes the sum of</span></span><br><span class=\"line\"><span class=\"comment\"> * all elements in the given array a.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> sum</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sum</span><span class=\"params\">(a: <span class=\"type\">IntArray</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(n <span class=\"keyword\">in</span> a) &#123;</span><br><span class=\"line\">        s += n</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"求数组最大值索引\"><a href=\"#求数组最大值索引\" class=\"headerlink\" title=\"求数组最大值索引\"></a>求数组最大值索引</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Your task is to implement the indexOfMax() function so that it returns</span></span><br><span class=\"line\"><span class=\"comment\"> * the index of the largest element in the array, or null if the array is empty.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> maxindex</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">indexOfMax</span><span class=\"params\">(a: <span class=\"type\">IntArray</span>)</span></span>: <span class=\"built_in\">Int</span>? &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a.size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> m = Integer.MIN_VALUE</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret = -<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> a.indices) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i] &gt;= m) &#123;</span><br><span class=\"line\">            m = a[i]</span><br><span class=\"line\">            ret = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"这是求个什么？自己看解释吧\"><a href=\"#这是求个什么？自己看解释吧\" class=\"headerlink\" title=\"这是求个什么？自己看解释吧\"></a>这是求个什么？自己看解释吧</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Any array may be viewed as a number of \"runs\" of equal numbers.</span></span><br><span class=\"line\"><span class=\"comment\"> * For example, the following array has two runs:</span></span><br><span class=\"line\"><span class=\"comment\"> *   1, 1, 1, 2, 2</span></span><br><span class=\"line\"><span class=\"comment\"> * Three 1's in a row form the first run, and two 2's form the second.</span></span><br><span class=\"line\"><span class=\"comment\"> * This array has two runs of length one:</span></span><br><span class=\"line\"><span class=\"comment\"> *   3, 4</span></span><br><span class=\"line\"><span class=\"comment\"> * And this one has five runs:</span></span><br><span class=\"line\"><span class=\"comment\"> *   1, 0, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0</span></span><br><span class=\"line\"><span class=\"comment\"> * Your task is to implement the runs() function so that it returns the number</span></span><br><span class=\"line\"><span class=\"comment\"> * of runs in the given array.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> runs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">runs</span><span class=\"params\">(a: <span class=\"type\">IntArray</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cur = a[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(n <span class=\"keyword\">in</span> a) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(n != cur) &#123;</span><br><span class=\"line\">            ++ret</span><br><span class=\"line\">            cur = n</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"求是否是回文字符串\"><a href=\"#求是否是回文字符串\" class=\"headerlink\" title=\"求是否是回文字符串\"></a>求是否是回文字符串</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Your task is to implement a palindrome test.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * A string is called a palindrome when it reads the same way left-to-right</span></span><br><span class=\"line\"><span class=\"comment\"> * and right-to-left.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * See http://en.wikipedia.org/wiki/Palindrome</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> palindrome</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(s: <span class=\"type\">String</span>)</span></span>: <span class=\"built_in\">Boolean</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s.length &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = s.length / <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">0</span>..len - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] != s[s.length - i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"求落单数字\"><a href=\"#求落单数字\" class=\"headerlink\" title=\"求落单数字\"></a>求落单数字</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Think of a perfect world where everybody has a soulmate.</span></span><br><span class=\"line\"><span class=\"comment\"> * Now, the real world is imperfect: there is exactly one number in the array</span></span><br><span class=\"line\"><span class=\"comment\"> * that does not have a pair. A pair is an element with the same value.</span></span><br><span class=\"line\"><span class=\"comment\"> * For example in this array:</span></span><br><span class=\"line\"><span class=\"comment\"> *   1, 2, 1, 2</span></span><br><span class=\"line\"><span class=\"comment\"> * every number has a pair, but in this one:</span></span><br><span class=\"line\"><span class=\"comment\"> *   1, 1, 1</span></span><br><span class=\"line\"><span class=\"comment\"> * one of the ones is lonely.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Your task is to implement the findPairless() function so that it finds the</span></span><br><span class=\"line\"><span class=\"comment\"> * lonely number and returns it.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * A hint: there's a solution that looks at each element only once and uses no</span></span><br><span class=\"line\"><span class=\"comment\"> * data structures like collections or trees.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> pairless</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">findPairless</span><span class=\"params\">(a: <span class=\"type\">IntArray</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Write your solution here</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> map = hashMapOf&lt;<span class=\"built_in\">Int</span>, <span class=\"built_in\">Int</span>&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(n <span class=\"keyword\">in</span> a) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = map.<span class=\"keyword\">get</span>(n)</span><br><span class=\"line\">        </span><br><span class=\"line\">        map.put(n, <span class=\"keyword\">if</span>(i == <span class=\"literal\">null</span>) <span class=\"number\">1</span> <span class=\"keyword\">else</span> i + <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>((k, v) <span class=\"keyword\">in</span> map) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v % <span class=\"number\">2</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> k</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>最近google推出了新的Android开发语言<a href=\"http://kotlinlang.org/\" target=\"_blank\" rel=\"noopener\">kotlin</a>，花了点时间了解一下皮毛。</p>\n<p>在<a href=\"http://kotlinlang.org/\" target=\"_blank\" rel=\"noopener\">kotlin</a>官网上的资料还是比较丰富的，提供了一个在线的<a href=\"https://try.kotlinlang.org/#/Examples/Hello,%20world!/Simplest%20version/Simplest%20version.kt\" target=\"_blank\" rel=\"noopener\">编辑器</a>，可以写一些小的程序片段。另外提供了一个代码翻译的工具，可以直接将java代码片段翻译成kotlin。</p>","more":"<p>例如以下java代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeting</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String greeting;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Greeting</span><span class=\"params\">(String g)</span> </span>&#123;</span><br><span class=\"line\">\t\tgreeting = g;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">(String you)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(greeting + <span class=\"string\">\" \"</span> + you);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] argv)</span> </span>&#123;</span><br><span class=\"line\">\t\tGreeting greeting = <span class=\"keyword\">new</span> Greeting(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">\t\tgreeting.sayHello(argv[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对应的kotlin代码如下：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeting</span></span>(g:String) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> greeting:String</span><br><span class=\"line\">  <span class=\"keyword\">init</span>&#123;</span><br><span class=\"line\">    greeting = g</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sayHello</span><span class=\"params\">(you:<span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    println(greeting + <span class=\"string\">\" \"</span> + you)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@JvmStatic</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(argv:<span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">val</span> greeting = Greeting(<span class=\"string\">\"Hello\"</span>)</span><br><span class=\"line\">      greeting.sayHello(argv[<span class=\"number\">0</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>kotlin语法很多特性都有javascript ES6的影子，比如字符串模板，解构赋值，箭头函数，元编程。</p>\n<h3 id=\"包定义。\"><a href=\"#包定义。\" class=\"headerlink\" title=\"包定义。\"></a>包定义。</h3><p>包定义必需位于源文件的顶端，格式如下<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> my.demo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure></p>\n<p>这个跟java是一样的。</p>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><h4 id=\"定义两个Int类型参数的求和函数\"><a href=\"#定义两个Int类型参数的求和函数\" class=\"headerlink\" title=\"定义两个Int类型参数的求和函数\"></a>定义两个Int类型参数的求和函数</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sum</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的函数可以有更简单的表达式写法</p>\n<h4 id=\"定义表达式函数\"><a href=\"#定义表达式函数\" class=\"headerlink\" title=\"定义表达式函数\"></a>定义表达式函数</h4><p>可以看出表达式函数的返回值是自动推断的。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sum</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span> = a + b</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"定义空返回值函数\"><a href=\"#定义空返回值函数\" class=\"headerlink\" title=\"定义空返回值函数\"></a>定义空返回值函数</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printSum</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Unit</span> &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"sum of <span class=\"variable\">$a</span> and <span class=\"variable\">$b</span> is <span class=\"subst\">$&#123;a + b&#125;</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中<b>Unit</b>可以省略<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printSum</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span>: &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"sum of <span class=\"variable\">$a</span> and <span class=\"variable\">$b</span> is <span class=\"subst\">$&#123;a + b&#125;</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/functions.html\" target=\"_blank\" rel=\"noopener\">函数</a></p>\n<h3 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h3><h4 id=\"定义常量（只允许赋值一次）\"><a href=\"#定义常量（只允许赋值一次）\" class=\"headerlink\" title=\"定义常量（只允许赋值一次）\"></a>定义常量（只允许赋值一次）</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> a: <span class=\"built_in\">Int</span> = <span class=\"number\">1</span>  <span class=\"comment\">// 立即赋值</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> b = <span class=\"number\">2</span>   <span class=\"comment\">// 类型推断，为`Int`</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> c: <span class=\"built_in\">Int</span>  <span class=\"comment\">// 如果没有给出初始化的值，需要给出变量类型</span></span><br><span class=\"line\">c = <span class=\"number\">3</span>       <span class=\"comment\">// 延迟赋值</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"定义变量\"><a href=\"#定义变量\" class=\"headerlink\" title=\"定义变量\"></a>定义变量</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">5</span> <span class=\"comment\">// 类型推断</span></span><br><span class=\"line\">x += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/properties.html\" target=\"_blank\" rel=\"noopener\">属性和域</a></p>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>kotlin的注释跟java是一样的，支持行和块两种注释方式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// This is an end-of-line comment</span><br><span class=\"line\"></span><br><span class=\"line\">/* This is a block comment</span><br><span class=\"line\">   on multiple lines. */</span><br></pre></td></tr></table></figure></p>\n<p>跟java不一样的是，kotlin的块注释是可以嵌套的。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *This is a block comment</span></span><br><span class=\"line\"><span class=\"comment\"> *  on multiple lines</span></span><br><span class=\"line\"><span class=\"comment\"> /* This is a nested block comment.*/</span></span><br><span class=\"line\"> *This <span class=\"keyword\">is</span> a block comment</span><br><span class=\"line\"> *  on multiple lines</span><br><span class=\"line\"> */</span><br></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/kotlin-doc.html\" target=\"_blank\" rel=\"noopener\">注释</a></p>\n<h3 id=\"字符串模板\"><a href=\"#字符串模板\" class=\"headerlink\" title=\"字符串模板\"></a>字符串模板</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">// 简单的字符串模板：</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> s1 = <span class=\"string\">\"a is <span class=\"variable\">$a</span>\"</span> </span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\">// 任意表达式的模板：</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> s2 = <span class=\"string\">\"<span class=\"subst\">$&#123;s1.replace(\"is\", \"was\")&#125;</span>, but now is <span class=\"variable\">$a</span>\"</span></span><br></pre></td></tr></table></figure>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/basic-types.html#string-templates\" target=\"_blank\" rel=\"noopener\">字符串模板</a></p>\n<h3 id=\"条件表达式\"><a href=\"#条件表达式\" class=\"headerlink\" title=\"条件表达式\"></a>条件表达式</h3><p>kotlin没有三目运算符，取而代之的是条件表达式。</p>\n<p>例如一个常规的求最大值函数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">maxOf</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a &gt; b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>假如用条件表达式可以这样写<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">maxOf</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span> = <span class=\"keyword\">if</span>(a &gt; b) a <span class=\"keyword\">else</span> b</span><br></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/control-flow.html#if-expression\" target=\"_blank\" rel=\"noopener\">if表达式</a></p>\n<h3 id=\"使用nullable和判断null\"><a href=\"#使用nullable和判断null\" class=\"headerlink\" title=\"使用nullable和判断null\"></a>使用nullable和判断null</h3><p>如果一个值可能是null的话必须显示的标记出来，如<br>如果<b>str</b>转换成<b>Int</b>失败，返回<b>null</b>:<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">parseInt</span><span class=\"params\">(str: <span class=\"type\">String</span>)</span></span>: <span class=\"built_in\">Int</span>? &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用返回nullable的函数。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printProduct</span><span class=\"params\">(arg1: <span class=\"type\">String</span>, arg2: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> x = parseInt(arg1)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> y = parseInt(arg2)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x != <span class=\"literal\">null</span> &amp;&amp; y != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        println(x * y)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"'<span class=\"variable\">$arg1</span>' 或者 '<span class=\"variable\">$arg2</span>' 不是数字\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/null-safety.html\" target=\"_blank\" rel=\"noopener\">安全的null</a></p>\n<h3 id=\"类型检查和自动转换\"><a href=\"#类型检查和自动转换\" class=\"headerlink\" title=\"类型检查和自动转换\"></a>类型检查和自动转换</h3><p>这个操作用来检查一个对象的类型，局部变量或者属性经过判断之后，不用再显示的转换了，例如。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getStringLength</span><span class=\"params\">(obj: <span class=\"type\">Any</span>)</span></span>: <span class=\"built_in\">Int</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj <span class=\"keyword\">is</span> String) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//obj在这个分支内自动转为\"String\"类型</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj.length</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//在上面的类型检查分支之外，类型仍然为\"Any\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另一种方式<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getStringLength</span><span class=\"params\">(obj: <span class=\"type\">Any</span>)</span></span>: <span class=\"built_in\">Int</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj !<span class=\"keyword\">is</span> String) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj.length</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>甚至可以这样<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getStringLength</span><span class=\"params\">(obj: <span class=\"type\">Any</span>)</span></span>: <span class=\"built_in\">Int</span>? &#123;</span><br><span class=\"line\">    <span class=\"comment\">//obj在&amp;&amp;右侧自动转换为String类型</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj <span class=\"keyword\">is</span> String &amp;&amp; obj.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj.length</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/classes.html\" target=\"_blank\" rel=\"noopener\">类</a>和<a href=\"http://kotlinlang.org/docs/reference/typecasts.html\" target=\"_blank\" rel=\"noopener\">类型转换</a></p>\n<h3 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> items = listOf(<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"banana\"</span>, <span class=\"string\">\"kiwi\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span>(item <span class=\"keyword\">in</span> items) &#123;</span><br><span class=\"line\">    println(item)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> items = listOf(<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"banana\"</span>, <span class=\"string\">\"kiwi\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> items.indices) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"item at <span class=\"variable\">$i</span> is <span class=\"subst\">$&#123;item[i]&#125;</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/control-flow.html#for-loops\" target=\"_blank\" rel=\"noopener\">for循环</a></p>\n<h3 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> items = listOf(<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"banana\"</span>, <span class=\"string\">\"kiwi\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(i &lt; items.size) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"item at <span class=\"variable\">$i</span> is <span class=\"subst\">$&#123;item[i]&#125;</span>\"</span>)</span><br><span class=\"line\">    i++</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/control-flow.html#while-loops\" target=\"_blank\" rel=\"noopener\">while循环</a></p>\n<h3 id=\"when表达式\"><a href=\"#when表达式\" class=\"headerlink\" title=\"when表达式\"></a>when表达式</h3><p>when通常用来代替switch和多个if else，且功能强大的多。如<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">describe</span><span class=\"params\">(obj: <span class=\"type\">Any</span>)</span></span>: String = </span><br><span class=\"line\"><span class=\"keyword\">when</span>(obj) &#123;</span><br><span class=\"line\">    <span class=\"number\">1</span> -&gt; <span class=\"string\">\"One\"</span></span><br><span class=\"line\">    <span class=\"string\">\"Hello\"</span> -&gt; <span class=\"string\">\"Greeting\"</span></span><br><span class=\"line\">    <span class=\"keyword\">is</span> <span class=\"built_in\">Long</span> -&gt; <span class=\"string\">\"Long\"</span></span><br><span class=\"line\">    !<span class=\"keyword\">is</span> String -&gt; <span class=\"string\">\"Not a String\"</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> -&gt; <span class=\"string\">\"Unknow\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/control-flow.html#when-expression\" target=\"_blank\" rel=\"noopener\">when表达式</a></p>\n<h3 id=\"使用范围表达式\"><a href=\"#使用范围表达式\" class=\"headerlink\" title=\"使用范围表达式(..)\"></a>使用范围表达式(<b>..</b>)</h3><h4 id=\"用in运算符检查一个数字是否在一个范围内。\"><a href=\"#用in运算符检查一个数字是否在一个范围内。\" class=\"headerlink\" title=\"用in运算符检查一个数字是否在一个范围内。\"></a>用in运算符检查一个数字是否在一个范围内。</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> x = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> y = <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"comment\">//这是个闭区间,1和y+1都算进去。</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(x <span class=\"keyword\">in</span> <span class=\"number\">1</span>..y+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"fits in range\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"检查一个数字是否超出范围\"><a href=\"#检查一个数字是否超出范围\" class=\"headerlink\" title=\"检查一个数字是否超出范围\"></a>检查一个数字是否超出范围</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> list = listOf(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span>(-<span class=\"number\">1</span> !<span class=\"keyword\">in</span> <span class=\"number\">0</span>..list.lastIndex) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"-1 is out of range\"</span>)</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">if</span>(list.size !<span class=\"keyword\">is</span> list.indices) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"list size is out of valid list indices range too\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"遍历一个范围\"><a href=\"#遍历一个范围\" class=\"headerlink\" title=\"遍历一个范围\"></a>遍历一个范围</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(x <span class=\"keyword\">in</span> <span class=\"number\">1</span>..<span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用步进遍历范围\"><a href=\"#使用步进遍历范围\" class=\"headerlink\" title=\"使用步进遍历范围\"></a>使用步进遍历范围</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(x <span class=\"keyword\">in</span> <span class=\"number\">1</span>..<span class=\"number\">10</span> step <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(x <span class=\"keyword\">in</span> <span class=\"number\">9</span> downTo <span class=\"number\">0</span> step <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/ranges.html\" target=\"_blank\" rel=\"noopener\">范围</a></p>\n<h3 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h3><p>遍历一个集合<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (item <span class=\"keyword\">in</span> items) &#123;</span><br><span class=\"line\">    println(item)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用in操作判断集合是否含有某元素，如<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> items = setOf(<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"banana\"</span>, <span class=\"string\">\"kiwi\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">when</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">\"orange\"</span> <span class=\"keyword\">in</span> items -&gt; println(<span class=\"string\">\"juicy\"</span>)</span><br><span class=\"line\">        <span class=\"string\">\"apple\"</span> <span class=\"keyword\">in</span> items -&gt; println(<span class=\"string\">\"apple is fine too\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上述代码输出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apple is fine too</span><br></pre></td></tr></table></figure></p>\n<p>使用lambda表达式过滤map集合<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> fruits = listOf(<span class=\"string\">\"banana\"</span>, <span class=\"string\">\"avocado\"</span>, <span class=\"string\">\"apple\"</span>, <span class=\"string\">\"kiwi\"</span>)</span><br><span class=\"line\">    fruits</span><br><span class=\"line\">    .filter &#123; it.startsWith(<span class=\"string\">\"a\"</span>) &#125;</span><br><span class=\"line\">    .sortedBy &#123; it &#125;</span><br><span class=\"line\">    .map &#123; it.toUpperCase() &#125;</span><br><span class=\"line\">    .forEach &#123; println(it) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上述代码输出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APPLE</span><br><span class=\"line\">AVOCADO</span><br></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/lambdas.html\" target=\"_blank\" rel=\"noopener\">高阶函数和lambda</a></p>\n<h2 id=\"习题\"><a href=\"#习题\" class=\"headerlink\" title=\"习题\"></a>习题</h2><h4 id=\"数组求和\"><a href=\"#数组求和\" class=\"headerlink\" title=\"数组求和\"></a>数组求和</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Your task is to implement the sum() function so that it computes the sum of</span></span><br><span class=\"line\"><span class=\"comment\"> * all elements in the given array a.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> sum</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sum</span><span class=\"params\">(a: <span class=\"type\">IntArray</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(n <span class=\"keyword\">in</span> a) &#123;</span><br><span class=\"line\">        s += n</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"求数组最大值索引\"><a href=\"#求数组最大值索引\" class=\"headerlink\" title=\"求数组最大值索引\"></a>求数组最大值索引</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Your task is to implement the indexOfMax() function so that it returns</span></span><br><span class=\"line\"><span class=\"comment\"> * the index of the largest element in the array, or null if the array is empty.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> maxindex</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">indexOfMax</span><span class=\"params\">(a: <span class=\"type\">IntArray</span>)</span></span>: <span class=\"built_in\">Int</span>? &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a.size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> m = Integer.MIN_VALUE</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret = -<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> a.indices) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i] &gt;= m) &#123;</span><br><span class=\"line\">            m = a[i]</span><br><span class=\"line\">            ret = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"这是求个什么？自己看解释吧\"><a href=\"#这是求个什么？自己看解释吧\" class=\"headerlink\" title=\"这是求个什么？自己看解释吧\"></a>这是求个什么？自己看解释吧</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Any array may be viewed as a number of \"runs\" of equal numbers.</span></span><br><span class=\"line\"><span class=\"comment\"> * For example, the following array has two runs:</span></span><br><span class=\"line\"><span class=\"comment\"> *   1, 1, 1, 2, 2</span></span><br><span class=\"line\"><span class=\"comment\"> * Three 1's in a row form the first run, and two 2's form the second.</span></span><br><span class=\"line\"><span class=\"comment\"> * This array has two runs of length one:</span></span><br><span class=\"line\"><span class=\"comment\"> *   3, 4</span></span><br><span class=\"line\"><span class=\"comment\"> * And this one has five runs:</span></span><br><span class=\"line\"><span class=\"comment\"> *   1, 0, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0</span></span><br><span class=\"line\"><span class=\"comment\"> * Your task is to implement the runs() function so that it returns the number</span></span><br><span class=\"line\"><span class=\"comment\"> * of runs in the given array.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> runs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">runs</span><span class=\"params\">(a: <span class=\"type\">IntArray</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cur = a[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(n <span class=\"keyword\">in</span> a) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(n != cur) &#123;</span><br><span class=\"line\">            ++ret</span><br><span class=\"line\">            cur = n</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"求是否是回文字符串\"><a href=\"#求是否是回文字符串\" class=\"headerlink\" title=\"求是否是回文字符串\"></a>求是否是回文字符串</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Your task is to implement a palindrome test.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * A string is called a palindrome when it reads the same way left-to-right</span></span><br><span class=\"line\"><span class=\"comment\"> * and right-to-left.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * See http://en.wikipedia.org/wiki/Palindrome</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> palindrome</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(s: <span class=\"type\">String</span>)</span></span>: <span class=\"built_in\">Boolean</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s.length &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = s.length / <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">0</span>..len - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] != s[s.length - i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"求落单数字\"><a href=\"#求落单数字\" class=\"headerlink\" title=\"求落单数字\"></a>求落单数字</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Think of a perfect world where everybody has a soulmate.</span></span><br><span class=\"line\"><span class=\"comment\"> * Now, the real world is imperfect: there is exactly one number in the array</span></span><br><span class=\"line\"><span class=\"comment\"> * that does not have a pair. A pair is an element with the same value.</span></span><br><span class=\"line\"><span class=\"comment\"> * For example in this array:</span></span><br><span class=\"line\"><span class=\"comment\"> *   1, 2, 1, 2</span></span><br><span class=\"line\"><span class=\"comment\"> * every number has a pair, but in this one:</span></span><br><span class=\"line\"><span class=\"comment\"> *   1, 1, 1</span></span><br><span class=\"line\"><span class=\"comment\"> * one of the ones is lonely.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Your task is to implement the findPairless() function so that it finds the</span></span><br><span class=\"line\"><span class=\"comment\"> * lonely number and returns it.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * A hint: there's a solution that looks at each element only once and uses no</span></span><br><span class=\"line\"><span class=\"comment\"> * data structures like collections or trees.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> pairless</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">findPairless</span><span class=\"params\">(a: <span class=\"type\">IntArray</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Write your solution here</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> map = hashMapOf&lt;<span class=\"built_in\">Int</span>, <span class=\"built_in\">Int</span>&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(n <span class=\"keyword\">in</span> a) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = map.<span class=\"keyword\">get</span>(n)</span><br><span class=\"line\">        </span><br><span class=\"line\">        map.put(n, <span class=\"keyword\">if</span>(i == <span class=\"literal\">null</span>) <span class=\"number\">1</span> <span class=\"keyword\">else</span> i + <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>((k, v) <span class=\"keyword\">in</span> map) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v % <span class=\"number\">2</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> k</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"从零搭建Android OTA系统——创建后端项目","date":"2017-12-20T10:23:04.000Z","_content":"\n本文实现简单的服务端的注册，登录功能，暂时不实现前端界面，用curl模拟前端请求。\n\n### 创建后端项目\n``` bash\nexpress ota_be\n```\n\n#### 目录结构\nmodel存放数据库代码，routes存放路由代码，controller存放处理代码，middleware存放中间件代码。\n```\n├─app.js\n├─config.js\n├─model/\n├─routes/\n├─controller/\n├─middleware/\n```\n\n<!--more-->\n\n### 用户注册\n\n#### 实现用户集合\n创建model/user.js，目前只保存username和password，其中username唯一。\n``` javascript\nvar mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\n\nvar UserSchema = new Schema({\n  username: {\n    type: String,\n    unique: true,\n  },\n  password: {\n    type: String, \n  },\n})\nmongoose.model('User', UserSchema);\n```\n\n创建model/index.js，连接数据库。\n``` javascript\nvar mongoose = require('mongoose');\nvar config = require('../config');\n\nmongoose.connect(config.mongodb, {\n  server: {poolSize: 20},\n  useMongoClient: true,\n}, err => {\n  if(err) {\n    console.error(\"connect to %s failed\", config.mongodb, err\n    .message);\n    process.exit(-1);\n  } \n});\n\nrequire('./user');\n\nexports.User = mongoose.model('User');\n```\n\n#### 路由实现\n创建routes/user.js。\n这里的路由，都分发到控制器的user实现功能。\n\n```javascript\nvar express = require('express');\nvar user = require('../controller/user');\nvar router = express.Router();\nvar passport = require('passport');\n\nrouter.post('/user/register',  user.register);\n\nmodule.exports = router;\n```\n\n创建routes/index.js，引入路由文件。\n```` javascript\nvar express = require('express');\nvar router = express.Router();\nvar user = require('./user');\n\nrouter.use(user);\n\nmodule.exports = router;\n````\n\n修改app.js\n\n```javascript\nvar router = require('./routes');\nvar app = express();\n//...\napp.use('/', router);\n```\n#### 实现注册操作\n创建controller/user.js。\n用户密码需要利用bcyptsjs加密，不存储明文密码。\n\n```javascript\nvar Model = require('../model');\nvar User = Model.User;\nvar bcrypt = require('bcryptjs')\n\nvalidUserRequest = body => {\n  //TODO 更详细校验\n  if(!body.username || !body.password) {\n      return {code: -1, message: \"valid param\"};\n  }\n  return null;\n}\n\nexports.register = (req, res, next) => {\n  var error = validUserRequest(req.body);\n  if(error) {\n    res.status(400).send(error);\n    return;\n  }\n  const {username, password} = req.body;\n  bcrypt.hash(password, 10)\n    .then(hash => {\n      var user = new User({\n        username: username,\n        password: hash\n      });\n      return user.save()\n    })\n    .then(user => {\n      res.json({code: 0, message: \"create user success\"});\n    })\n    .catch(err => {\n      res.status(406).send({code: -1, message: err.message});\n    })\n}\n\n```\n\n#### 运行\n因为用到了mongoose库，需要本地先启用mongod服务，端口需要跟config.js中的一致。\nconfig.js\n``` javascript\nvar config = {\n  mongodb: 'mongodb://127.0.0.1:50000/ota_server',\n}\n\nmodule.exports = config;\n```\n然后启动应用。\n``` bash\nyarn start\n```\n\n#### 测试注册接口\n在终端里面用如下指令模拟注册请求。\n``` bash\n$ curl -d \"username=yinlijun&password=123456\" \"http://127.0.0.1:3020/user/register\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    75  100    42  100    33    168    132 --:--:-- --:--:-- --:--:--   168{\"code\":0,\"message\":\"create user success\"}\n```\n\n利用mongo客户端打开集合，查看集合数据，插入成功。\n``` bash\n$ mongo mongodb://127.0.0.1:50000\nMongoDB shell version v3.4.9\nconnecting to: mongodb://127.0.0.1:50000\nMongoDB server version: 3.4.9\n\n$ use ota_server\nswitched to db ota_server\n\n$ db.users.find()\n{ \"_id\" : ObjectId(\"5a3b61b1db2e604ebca6dfc4\"), \"username\" : \"yinlijun\", \"password\" : \"$2a$10$Zc33sn8Zj1kJslfTTXM0deFNUjVMJyWk.tMsuh.aaLtZEFUSedLQW\", \"__v\" : 0 }\n```\n\n再次注册同名用户，报错。\n``` bash\n$ curl -d \"username=yinlijun&password=123456\" \"http://127.0.0.1:3020/user/register\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   158  100   125  100    33   1344    354 --:--:-- --:--:-- --:--:--  1344{\"code\":-1,\"message\":\"E11000 duplicate key error collection: ota_server.users index: username_1 dup key: { : \\\"yinlijun\\\" }\"}\n```\n\n### 用户登录\n\n#### 路由实现\n添加路由routes/user.js\n``` javascript\nrouter.post('/user/login', user.login);\n```\n\n#### 实现登录操作\n在controller/user.js中添加如下代码，校验用户名和密码，校验密码用到了bcrypt.compareSync。\n\n然后生成cookie发到前端。\n\n``` javascript\nexports.login = (req, res, next) => {\n  let {username, password} = req.body;\n  User.findOne({username: username})\n    .then(user => {\n      if(!user) {\n        res.status(400).send({code: -1, message:\"invalid username or password\"});\n        return;\n      }\n      if(!bcrypt.compareSync(password, user.password)) {\n        res.status(400).send({code: -1, message:\"invalid username or password\"});\n        return;\n      }\n      genCookie(user, res);    \n      res.send({code:0, message:\"登录成功\"});\n    })\n};\n\ngenCookie = (user, res) => {\n  var token = user._id + '$$$';\n  var opts = {\n    path: '/',\n    maxAge: config.session_age,\n    httpOnly: true,\n  };\n  res.cookie(config.cookie_name, token);\n}\n```\n\n这里可以看到有个重复调用的validUserRequest函数，可以做成一个middleware。\n\n创建middleware/validRequest.js。\n``` javascript\nexports.validUsernamePassword = (req, res, next) => {\n  //TODO 更详细校验\n  let {username, password} = req.body;\n  if(!username || !password) {\n      res.status(400).send({code: -1, message: \"valid param\"});\n      return;\n  }\n  next();\n}\n```\n然后修改routes/user.js\n``` javascript\nvar validRequest = require('../middleware/validRequest');\n\nrouter.post('/user/register', validRequest.validUsernamePassword, user.register);\n\nrouter.post('/user/login', validRequest.validUsernamePassword, user.login);\n```\n\n把controller/user.js的register中validUserRequest调用去掉。\n\n测试一下这个middleware：\n```` bash\n $ curl -d \"username=yinlijun&password=\" \"http://127.0.0.1:3020/user/register\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    62  100    35  100    27   1093    843 --:--:-- --:--:-- --:--:--  1093{\"code\":-1,\"message\":\"valid param\"}\n````\n\n#### 测试登录接口\n输入错误的用户名:\n``` bash\n$ curl -d \"username=liudehua&password=123456\" \"http://127.0.0.1:3020/user/login\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    85  100    52  100    33   1106    702 --:--:-- --:--:-- --:--:--  1106{\"code\":-1,\"message\":\"invalid username or password\"}\n```\n输入错误密码：\n```bash\n$ curl -d \"username=yinlijun&password=654321\" \"http://127.0.0.1:3020/user/login\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    85  100    52  100    33    553    351 --:--:-- --:--:-- --:--:--   553{\"code\":-1,\"message\":\"invalid username or password\"}\n```\n输入正确的用户名密码:\n```\n$ curl -d \"username=yinlijun&password=123456\" \"http://127.0.0.1:3020/user/login\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    68  100    35  100    33    372    351 --:--:-- --:--:-- --:--:--   372{\"code\":0,\"message\":\"登录成功\"}\n```\n\n### 利用passport校验登录功能。\n社区里面有个passport的组件，可以用来实现校验登录功能。\n\n#### 封装passport中间件\n创建middleware/passport.js，封装passport模块。\n\n将校验密码的操作挪到passport中，校验成功之后用户信息将会保存到req.user。\n```javascript\nvar passport = require('passport');\nvar User = require('../model').User;\nvar LocalStrategy = require('passport-local').Strategy;\n\npassport.use('local.login', new LocalStrategy((username, password, done) => {\n  User.findOne({username: username})\n    .exec()\n    .then(user => {\n      if(!user) {\n        return done(null, false, {code: -1, message: \"invalid username or password\"});\n      } \n      if(!user.validPassword(password)) {\n        return done(null, false, {code: -1, message: \"invalid username or password\"});\n      } \n      return done(null, user);\n    })\n    .catch(err => {\n      done(null, false, {code: -1, message: err.message});\n    })\n}))\n\npassport.serializeUser((user, done) => {\n  done(null, user._id);\n});\n\npassport.deserializeUser((id, done) => {\n  User.findById(id)\n    .exec()\n    .then(user => {\n      done(null, user);\n    })\n    .catch(err => {\n      done(null, false, {code: -1, message: err.message});\n    })\n})\n\nmodule.exports = passport;\n```\n\n#### 重新实现登录操作\n修改controller/user.js的login函数，去掉验证用户名密码的代码。\n```javascript\nexports.login = (req, res, next) => {\n  const user = req.user;\n  genCookie(user, res);    \n  res.send({code:0, message:\"login success\"});\n};\n```\n在middleware/validRequest.js添加一个校验中间件\n```javascript\nexports.validByPassport = (req, res, next) => {\n    passport.authenticate('local.login', {\n      failureMessage: 'invalid username or password',\n    })(req,  res, next);\n}\n```\n\n#### 修改路由\n修改router/user.js路由\n```javascript\nrouter.post('/user/login', validRequest.validByPassport, user.login);\n```\n这样，用户登录就会走passport的校验流程。\n\n### 退出功能\n主要是清除cookie，controller/user.js中添加代码。\n``` javascript\nexports.logout = (req, res, next) => {\n  clearCookie(res);\n  res.send({code:0, message:\"exit success\"});\n}\n\nclearCookie = (res) => {\n  res.clearCookie(config.cookie_name, {path: '/'});\n}\n```\n\n测试\n``` \n$ curl \"http://127.0.0.1:3020/user/logout\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    35  100    35    0     0   2187      0 --:--:-- --:--:-- --:--:--  2187{\"code\":0,\"message\":\"exit success\"}\n```","source":"_posts/my-ota-tutorial-1.md","raw":"---\ntitle: 从零搭建Android OTA系统——创建后端项目\ndate: 2017-12-20 18:23:04\ntags: [express, react, nodejs]\ncategories: 从零搭建Android OTA系统\n---\n\n本文实现简单的服务端的注册，登录功能，暂时不实现前端界面，用curl模拟前端请求。\n\n### 创建后端项目\n``` bash\nexpress ota_be\n```\n\n#### 目录结构\nmodel存放数据库代码，routes存放路由代码，controller存放处理代码，middleware存放中间件代码。\n```\n├─app.js\n├─config.js\n├─model/\n├─routes/\n├─controller/\n├─middleware/\n```\n\n<!--more-->\n\n### 用户注册\n\n#### 实现用户集合\n创建model/user.js，目前只保存username和password，其中username唯一。\n``` javascript\nvar mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\n\nvar UserSchema = new Schema({\n  username: {\n    type: String,\n    unique: true,\n  },\n  password: {\n    type: String, \n  },\n})\nmongoose.model('User', UserSchema);\n```\n\n创建model/index.js，连接数据库。\n``` javascript\nvar mongoose = require('mongoose');\nvar config = require('../config');\n\nmongoose.connect(config.mongodb, {\n  server: {poolSize: 20},\n  useMongoClient: true,\n}, err => {\n  if(err) {\n    console.error(\"connect to %s failed\", config.mongodb, err\n    .message);\n    process.exit(-1);\n  } \n});\n\nrequire('./user');\n\nexports.User = mongoose.model('User');\n```\n\n#### 路由实现\n创建routes/user.js。\n这里的路由，都分发到控制器的user实现功能。\n\n```javascript\nvar express = require('express');\nvar user = require('../controller/user');\nvar router = express.Router();\nvar passport = require('passport');\n\nrouter.post('/user/register',  user.register);\n\nmodule.exports = router;\n```\n\n创建routes/index.js，引入路由文件。\n```` javascript\nvar express = require('express');\nvar router = express.Router();\nvar user = require('./user');\n\nrouter.use(user);\n\nmodule.exports = router;\n````\n\n修改app.js\n\n```javascript\nvar router = require('./routes');\nvar app = express();\n//...\napp.use('/', router);\n```\n#### 实现注册操作\n创建controller/user.js。\n用户密码需要利用bcyptsjs加密，不存储明文密码。\n\n```javascript\nvar Model = require('../model');\nvar User = Model.User;\nvar bcrypt = require('bcryptjs')\n\nvalidUserRequest = body => {\n  //TODO 更详细校验\n  if(!body.username || !body.password) {\n      return {code: -1, message: \"valid param\"};\n  }\n  return null;\n}\n\nexports.register = (req, res, next) => {\n  var error = validUserRequest(req.body);\n  if(error) {\n    res.status(400).send(error);\n    return;\n  }\n  const {username, password} = req.body;\n  bcrypt.hash(password, 10)\n    .then(hash => {\n      var user = new User({\n        username: username,\n        password: hash\n      });\n      return user.save()\n    })\n    .then(user => {\n      res.json({code: 0, message: \"create user success\"});\n    })\n    .catch(err => {\n      res.status(406).send({code: -1, message: err.message});\n    })\n}\n\n```\n\n#### 运行\n因为用到了mongoose库，需要本地先启用mongod服务，端口需要跟config.js中的一致。\nconfig.js\n``` javascript\nvar config = {\n  mongodb: 'mongodb://127.0.0.1:50000/ota_server',\n}\n\nmodule.exports = config;\n```\n然后启动应用。\n``` bash\nyarn start\n```\n\n#### 测试注册接口\n在终端里面用如下指令模拟注册请求。\n``` bash\n$ curl -d \"username=yinlijun&password=123456\" \"http://127.0.0.1:3020/user/register\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    75  100    42  100    33    168    132 --:--:-- --:--:-- --:--:--   168{\"code\":0,\"message\":\"create user success\"}\n```\n\n利用mongo客户端打开集合，查看集合数据，插入成功。\n``` bash\n$ mongo mongodb://127.0.0.1:50000\nMongoDB shell version v3.4.9\nconnecting to: mongodb://127.0.0.1:50000\nMongoDB server version: 3.4.9\n\n$ use ota_server\nswitched to db ota_server\n\n$ db.users.find()\n{ \"_id\" : ObjectId(\"5a3b61b1db2e604ebca6dfc4\"), \"username\" : \"yinlijun\", \"password\" : \"$2a$10$Zc33sn8Zj1kJslfTTXM0deFNUjVMJyWk.tMsuh.aaLtZEFUSedLQW\", \"__v\" : 0 }\n```\n\n再次注册同名用户，报错。\n``` bash\n$ curl -d \"username=yinlijun&password=123456\" \"http://127.0.0.1:3020/user/register\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   158  100   125  100    33   1344    354 --:--:-- --:--:-- --:--:--  1344{\"code\":-1,\"message\":\"E11000 duplicate key error collection: ota_server.users index: username_1 dup key: { : \\\"yinlijun\\\" }\"}\n```\n\n### 用户登录\n\n#### 路由实现\n添加路由routes/user.js\n``` javascript\nrouter.post('/user/login', user.login);\n```\n\n#### 实现登录操作\n在controller/user.js中添加如下代码，校验用户名和密码，校验密码用到了bcrypt.compareSync。\n\n然后生成cookie发到前端。\n\n``` javascript\nexports.login = (req, res, next) => {\n  let {username, password} = req.body;\n  User.findOne({username: username})\n    .then(user => {\n      if(!user) {\n        res.status(400).send({code: -1, message:\"invalid username or password\"});\n        return;\n      }\n      if(!bcrypt.compareSync(password, user.password)) {\n        res.status(400).send({code: -1, message:\"invalid username or password\"});\n        return;\n      }\n      genCookie(user, res);    \n      res.send({code:0, message:\"登录成功\"});\n    })\n};\n\ngenCookie = (user, res) => {\n  var token = user._id + '$$$';\n  var opts = {\n    path: '/',\n    maxAge: config.session_age,\n    httpOnly: true,\n  };\n  res.cookie(config.cookie_name, token);\n}\n```\n\n这里可以看到有个重复调用的validUserRequest函数，可以做成一个middleware。\n\n创建middleware/validRequest.js。\n``` javascript\nexports.validUsernamePassword = (req, res, next) => {\n  //TODO 更详细校验\n  let {username, password} = req.body;\n  if(!username || !password) {\n      res.status(400).send({code: -1, message: \"valid param\"});\n      return;\n  }\n  next();\n}\n```\n然后修改routes/user.js\n``` javascript\nvar validRequest = require('../middleware/validRequest');\n\nrouter.post('/user/register', validRequest.validUsernamePassword, user.register);\n\nrouter.post('/user/login', validRequest.validUsernamePassword, user.login);\n```\n\n把controller/user.js的register中validUserRequest调用去掉。\n\n测试一下这个middleware：\n```` bash\n $ curl -d \"username=yinlijun&password=\" \"http://127.0.0.1:3020/user/register\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    62  100    35  100    27   1093    843 --:--:-- --:--:-- --:--:--  1093{\"code\":-1,\"message\":\"valid param\"}\n````\n\n#### 测试登录接口\n输入错误的用户名:\n``` bash\n$ curl -d \"username=liudehua&password=123456\" \"http://127.0.0.1:3020/user/login\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    85  100    52  100    33   1106    702 --:--:-- --:--:-- --:--:--  1106{\"code\":-1,\"message\":\"invalid username or password\"}\n```\n输入错误密码：\n```bash\n$ curl -d \"username=yinlijun&password=654321\" \"http://127.0.0.1:3020/user/login\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    85  100    52  100    33    553    351 --:--:-- --:--:-- --:--:--   553{\"code\":-1,\"message\":\"invalid username or password\"}\n```\n输入正确的用户名密码:\n```\n$ curl -d \"username=yinlijun&password=123456\" \"http://127.0.0.1:3020/user/login\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    68  100    35  100    33    372    351 --:--:-- --:--:-- --:--:--   372{\"code\":0,\"message\":\"登录成功\"}\n```\n\n### 利用passport校验登录功能。\n社区里面有个passport的组件，可以用来实现校验登录功能。\n\n#### 封装passport中间件\n创建middleware/passport.js，封装passport模块。\n\n将校验密码的操作挪到passport中，校验成功之后用户信息将会保存到req.user。\n```javascript\nvar passport = require('passport');\nvar User = require('../model').User;\nvar LocalStrategy = require('passport-local').Strategy;\n\npassport.use('local.login', new LocalStrategy((username, password, done) => {\n  User.findOne({username: username})\n    .exec()\n    .then(user => {\n      if(!user) {\n        return done(null, false, {code: -1, message: \"invalid username or password\"});\n      } \n      if(!user.validPassword(password)) {\n        return done(null, false, {code: -1, message: \"invalid username or password\"});\n      } \n      return done(null, user);\n    })\n    .catch(err => {\n      done(null, false, {code: -1, message: err.message});\n    })\n}))\n\npassport.serializeUser((user, done) => {\n  done(null, user._id);\n});\n\npassport.deserializeUser((id, done) => {\n  User.findById(id)\n    .exec()\n    .then(user => {\n      done(null, user);\n    })\n    .catch(err => {\n      done(null, false, {code: -1, message: err.message});\n    })\n})\n\nmodule.exports = passport;\n```\n\n#### 重新实现登录操作\n修改controller/user.js的login函数，去掉验证用户名密码的代码。\n```javascript\nexports.login = (req, res, next) => {\n  const user = req.user;\n  genCookie(user, res);    \n  res.send({code:0, message:\"login success\"});\n};\n```\n在middleware/validRequest.js添加一个校验中间件\n```javascript\nexports.validByPassport = (req, res, next) => {\n    passport.authenticate('local.login', {\n      failureMessage: 'invalid username or password',\n    })(req,  res, next);\n}\n```\n\n#### 修改路由\n修改router/user.js路由\n```javascript\nrouter.post('/user/login', validRequest.validByPassport, user.login);\n```\n这样，用户登录就会走passport的校验流程。\n\n### 退出功能\n主要是清除cookie，controller/user.js中添加代码。\n``` javascript\nexports.logout = (req, res, next) => {\n  clearCookie(res);\n  res.send({code:0, message:\"exit success\"});\n}\n\nclearCookie = (res) => {\n  res.clearCookie(config.cookie_name, {path: '/'});\n}\n```\n\n测试\n``` \n$ curl \"http://127.0.0.1:3020/user/logout\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    35  100    35    0     0   2187      0 --:--:-- --:--:-- --:--:--  2187{\"code\":0,\"message\":\"exit success\"}\n```","slug":"my-ota-tutorial-1","published":1,"updated":"2019-01-03T02:48:56.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aanki007bbiuijhw5ee86","content":"<p>本文实现简单的服务端的注册，登录功能，暂时不实现前端界面，用curl模拟前端请求。</p>\n<h3 id=\"创建后端项目\"><a href=\"#创建后端项目\" class=\"headerlink\" title=\"创建后端项目\"></a>创建后端项目</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">express ota_be</span><br></pre></td></tr></table></figure>\n<h4 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h4><p>model存放数据库代码，routes存放路由代码，controller存放处理代码，middleware存放中间件代码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├─app.js</span><br><span class=\"line\">├─config.js</span><br><span class=\"line\">├─model/</span><br><span class=\"line\">├─routes/</span><br><span class=\"line\">├─controller/</span><br><span class=\"line\">├─middleware/</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"用户注册\"><a href=\"#用户注册\" class=\"headerlink\" title=\"用户注册\"></a>用户注册</h3><h4 id=\"实现用户集合\"><a href=\"#实现用户集合\" class=\"headerlink\" title=\"实现用户集合\"></a>实现用户集合</h4><p>创建model/user.js，目前只保存username和password，其中username唯一。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> Schema = mongoose.Schema;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> UserSchema = <span class=\"keyword\">new</span> Schema(&#123;</span><br><span class=\"line\">  username: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    unique: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  password: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">String</span>, </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">mongoose.model(<span class=\"string\">'User'</span>, UserSchema);</span><br></pre></td></tr></table></figure></p>\n<p>创建model/index.js，连接数据库。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.connect(config.mongodb, &#123;</span><br><span class=\"line\">  server: &#123;<span class=\"attr\">poolSize</span>: <span class=\"number\">20</span>&#125;,</span><br><span class=\"line\">  useMongoClient: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;, err =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">\"connect to %s failed\"</span>, config.mongodb, err</span><br><span class=\"line\">    .message);</span><br><span class=\"line\">    process.exit(<span class=\"number\">-1</span>);</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./user'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">exports.User = mongoose.model(<span class=\"string\">'User'</span>);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"路由实现\"><a href=\"#路由实现\" class=\"headerlink\" title=\"路由实现\"></a>路由实现</h4><p>创建routes/user.js。<br>这里的路由，都分发到控制器的user实现功能。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"built_in\">require</span>(<span class=\"string\">'../controller/user'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</span><br><span class=\"line\"><span class=\"keyword\">var</span> passport = <span class=\"built_in\">require</span>(<span class=\"string\">'passport'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/user/register'</span>,  user.register);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n<p>创建routes/index.js，引入路由文件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</span><br><span class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"built_in\">require</span>(<span class=\"string\">'./user'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">router.use(user);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure></p>\n<p>修改app.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\">app.use(<span class=\"string\">'/'</span>, router);</span><br></pre></td></tr></table></figure>\n<h4 id=\"实现注册操作\"><a href=\"#实现注册操作\" class=\"headerlink\" title=\"实现注册操作\"></a>实现注册操作</h4><p>创建controller/user.js。<br>用户密码需要利用bcyptsjs加密，不存储明文密码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Model = <span class=\"built_in\">require</span>(<span class=\"string\">'../model'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> User = Model.User;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bcrypt = <span class=\"built_in\">require</span>(<span class=\"string\">'bcryptjs'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">validUserRequest = <span class=\"function\"><span class=\"params\">body</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//TODO 更详细校验</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!body.username || !body.password) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;<span class=\"attr\">code</span>: <span class=\"number\">-1</span>, <span class=\"attr\">message</span>: <span class=\"string\">\"valid param\"</span>&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.register = <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> error = validUserRequest(req.body);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(error) &#123;</span><br><span class=\"line\">    res.status(<span class=\"number\">400</span>).send(error);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;username, password&#125; = req.body;</span><br><span class=\"line\">  bcrypt.hash(password, <span class=\"number\">10</span>)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">hash</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> User(&#123;</span><br><span class=\"line\">        username: username,</span><br><span class=\"line\">        password: hash</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> user.save()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">      res.json(&#123;<span class=\"attr\">code</span>: <span class=\"number\">0</span>, <span class=\"attr\">message</span>: <span class=\"string\">\"create user success\"</span>&#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">      res.status(<span class=\"number\">406</span>).send(&#123;<span class=\"attr\">code</span>: <span class=\"number\">-1</span>, <span class=\"attr\">message</span>: err.message&#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><p>因为用到了mongoose库，需要本地先启用mongod服务，端口需要跟config.js中的一致。<br>config.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> config = &#123;</span><br><span class=\"line\">  mongodb: <span class=\"string\">'mongodb://127.0.0.1:50000/ota_server'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = config;</span><br></pre></td></tr></table></figure></p>\n<p>然后启动应用。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn start</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"测试注册接口\"><a href=\"#测试注册接口\" class=\"headerlink\" title=\"测试注册接口\"></a>测试注册接口</h4><p>在终端里面用如下指令模拟注册请求。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -d <span class=\"string\">\"username=yinlijun&amp;password=123456\"</span> <span class=\"string\">\"http://127.0.0.1:3020/user/register\"</span></span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">100    75  100    42  100    33    168    132 --:--:-- --:--:-- --:--:--   168&#123;<span class=\"string\">\"code\"</span>:0,<span class=\"string\">\"message\"</span>:<span class=\"string\">\"create user success\"</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>利用mongo客户端打开集合，查看集合数据，插入成功。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mongo mongodb://127.0.0.1:50000</span><br><span class=\"line\">MongoDB shell version v3.4.9</span><br><span class=\"line\">connecting to: mongodb://127.0.0.1:50000</span><br><span class=\"line\">MongoDB server version: 3.4.9</span><br><span class=\"line\"></span><br><span class=\"line\">$ use ota_server</span><br><span class=\"line\">switched to db ota_server</span><br><span class=\"line\"></span><br><span class=\"line\">$ db.users.find()</span><br><span class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5a3b61b1db2e604ebca6dfc4\"</span>), <span class=\"string\">\"username\"</span> : <span class=\"string\">\"yinlijun\"</span>, <span class=\"string\">\"password\"</span> : <span class=\"string\">\"<span class=\"variable\">$2a</span><span class=\"variable\">$10</span><span class=\"variable\">$Zc33sn8Zj1kJslfTTXM0deFNUjVMJyWk</span>.tMsuh.aaLtZEFUSedLQW\"</span>, <span class=\"string\">\"__v\"</span> : 0 &#125;</span><br></pre></td></tr></table></figure></p>\n<p>再次注册同名用户，报错。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -d <span class=\"string\">\"username=yinlijun&amp;password=123456\"</span> <span class=\"string\">\"http://127.0.0.1:3020/user/register\"</span></span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">100   158  100   125  100    33   1344    354 --:--:-- --:--:-- --:--:--  1344&#123;<span class=\"string\">\"code\"</span>:-1,<span class=\"string\">\"message\"</span>:<span class=\"string\">\"E11000 duplicate key error collection: ota_server.users index: username_1 dup key: &#123; : \\\"yinlijun\\\" &#125;\"</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"用户登录\"><a href=\"#用户登录\" class=\"headerlink\" title=\"用户登录\"></a>用户登录</h3><h4 id=\"路由实现-1\"><a href=\"#路由实现-1\" class=\"headerlink\" title=\"路由实现\"></a>路由实现</h4><p>添加路由routes/user.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.post(<span class=\"string\">'/user/login'</span>, user.login);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"实现登录操作\"><a href=\"#实现登录操作\" class=\"headerlink\" title=\"实现登录操作\"></a>实现登录操作</h4><p>在controller/user.js中添加如下代码，校验用户名和密码，校验密码用到了bcrypt.compareSync。</p>\n<p>然后生成cookie发到前端。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.login = <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> &#123;username, password&#125; = req.body;</span><br><span class=\"line\">  User.findOne(&#123;<span class=\"attr\">username</span>: username&#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!user) &#123;</span><br><span class=\"line\">        res.status(<span class=\"number\">400</span>).send(&#123;<span class=\"attr\">code</span>: <span class=\"number\">-1</span>, <span class=\"attr\">message</span>:<span class=\"string\">\"invalid username or password\"</span>&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!bcrypt.compareSync(password, user.password)) &#123;</span><br><span class=\"line\">        res.status(<span class=\"number\">400</span>).send(&#123;<span class=\"attr\">code</span>: <span class=\"number\">-1</span>, <span class=\"attr\">message</span>:<span class=\"string\">\"invalid username or password\"</span>&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      genCookie(user, res);    </span><br><span class=\"line\">      res.send(&#123;<span class=\"attr\">code</span>:<span class=\"number\">0</span>, <span class=\"attr\">message</span>:<span class=\"string\">\"登录成功\"</span>&#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">genCookie = <span class=\"function\">(<span class=\"params\">user, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> token = user._id + <span class=\"string\">'$$$'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> opts = &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">    maxAge: config.session_age,</span><br><span class=\"line\">    httpOnly: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  res.cookie(config.cookie_name, token);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里可以看到有个重复调用的validUserRequest函数，可以做成一个middleware。</p>\n<p>创建middleware/validRequest.js。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.validUsernamePassword = <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//TODO 更详细校验</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> &#123;username, password&#125; = req.body;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!username || !password) &#123;</span><br><span class=\"line\">      res.status(<span class=\"number\">400</span>).send(&#123;<span class=\"attr\">code</span>: <span class=\"number\">-1</span>, <span class=\"attr\">message</span>: <span class=\"string\">\"valid param\"</span>&#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后修改routes/user.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> validRequest = <span class=\"built_in\">require</span>(<span class=\"string\">'../middleware/validRequest'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/user/register'</span>, validRequest.validUsernamePassword, user.register);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/user/login'</span>, validRequest.validUsernamePassword, user.login);</span><br></pre></td></tr></table></figure></p>\n<p>把controller/user.js的register中validUserRequest调用去掉。</p>\n<p>测试一下这个middleware：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> $ curl -d <span class=\"string\">\"username=yinlijun&amp;password=\"</span> <span class=\"string\">\"http://127.0.0.1:3020/user/register\"</span></span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">100    62  100    35  100    27   1093    843 --:--:-- --:--:-- --:--:--  1093&#123;<span class=\"string\">\"code\"</span>:-1,<span class=\"string\">\"message\"</span>:<span class=\"string\">\"valid param\"</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"测试登录接口\"><a href=\"#测试登录接口\" class=\"headerlink\" title=\"测试登录接口\"></a>测试登录接口</h4><p>输入错误的用户名:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -d <span class=\"string\">\"username=liudehua&amp;password=123456\"</span> <span class=\"string\">\"http://127.0.0.1:3020/user/login\"</span></span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">100    85  100    52  100    33   1106    702 --:--:-- --:--:-- --:--:--  1106&#123;<span class=\"string\">\"code\"</span>:-1,<span class=\"string\">\"message\"</span>:<span class=\"string\">\"invalid username or password\"</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输入错误密码：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -d <span class=\"string\">\"username=yinlijun&amp;password=654321\"</span> <span class=\"string\">\"http://127.0.0.1:3020/user/login\"</span></span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">100    85  100    52  100    33    553    351 --:--:-- --:--:-- --:--:--   553&#123;<span class=\"string\">\"code\"</span>:-1,<span class=\"string\">\"message\"</span>:<span class=\"string\">\"invalid username or password\"</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输入正确的用户名密码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -d &quot;username=yinlijun&amp;password=123456&quot; &quot;http://127.0.0.1:3020/user/login&quot;</span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">100    68  100    35  100    33    372    351 --:--:-- --:--:-- --:--:--   372&#123;&quot;code&quot;:0,&quot;message&quot;:&quot;登录成功&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"利用passport校验登录功能。\"><a href=\"#利用passport校验登录功能。\" class=\"headerlink\" title=\"利用passport校验登录功能。\"></a>利用passport校验登录功能。</h3><p>社区里面有个passport的组件，可以用来实现校验登录功能。</p>\n<h4 id=\"封装passport中间件\"><a href=\"#封装passport中间件\" class=\"headerlink\" title=\"封装passport中间件\"></a>封装passport中间件</h4><p>创建middleware/passport.js，封装passport模块。</p>\n<p>将校验密码的操作挪到passport中，校验成功之后用户信息将会保存到req.user。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> passport = <span class=\"built_in\">require</span>(<span class=\"string\">'passport'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> User = <span class=\"built_in\">require</span>(<span class=\"string\">'../model'</span>).User;</span><br><span class=\"line\"><span class=\"keyword\">var</span> LocalStrategy = <span class=\"built_in\">require</span>(<span class=\"string\">'passport-local'</span>).Strategy;</span><br><span class=\"line\"></span><br><span class=\"line\">passport.use(<span class=\"string\">'local.login'</span>, <span class=\"keyword\">new</span> LocalStrategy(<span class=\"function\">(<span class=\"params\">username, password, done</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  User.findOne(&#123;<span class=\"attr\">username</span>: username&#125;)</span><br><span class=\"line\">    .exec()</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!user) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> done(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>, &#123;<span class=\"attr\">code</span>: <span class=\"number\">-1</span>, <span class=\"attr\">message</span>: <span class=\"string\">\"invalid username or password\"</span>&#125;);</span><br><span class=\"line\">      &#125; </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!user.validPassword(password)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> done(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>, &#123;<span class=\"attr\">code</span>: <span class=\"number\">-1</span>, <span class=\"attr\">message</span>: <span class=\"string\">\"invalid username or password\"</span>&#125;);</span><br><span class=\"line\">      &#125; </span><br><span class=\"line\">      <span class=\"keyword\">return</span> done(<span class=\"literal\">null</span>, user);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">      done(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>, &#123;<span class=\"attr\">code</span>: <span class=\"number\">-1</span>, <span class=\"attr\">message</span>: err.message&#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">passport.serializeUser(<span class=\"function\">(<span class=\"params\">user, done</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  done(<span class=\"literal\">null</span>, user._id);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">passport.deserializeUser(<span class=\"function\">(<span class=\"params\">id, done</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  User.findById(id)</span><br><span class=\"line\">    .exec()</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">      done(<span class=\"literal\">null</span>, user);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">      done(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>, &#123;<span class=\"attr\">code</span>: <span class=\"number\">-1</span>, <span class=\"attr\">message</span>: err.message&#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = passport;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"重新实现登录操作\"><a href=\"#重新实现登录操作\" class=\"headerlink\" title=\"重新实现登录操作\"></a>重新实现登录操作</h4><p>修改controller/user.js的login函数，去掉验证用户名密码的代码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.login = <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> user = req.user;</span><br><span class=\"line\">  genCookie(user, res);    </span><br><span class=\"line\">  res.send(&#123;<span class=\"attr\">code</span>:<span class=\"number\">0</span>, <span class=\"attr\">message</span>:<span class=\"string\">\"login success\"</span>&#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>在middleware/validRequest.js添加一个校验中间件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.validByPassport = <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    passport.authenticate(<span class=\"string\">'local.login'</span>, &#123;</span><br><span class=\"line\">      failureMessage: <span class=\"string\">'invalid username or password'</span>,</span><br><span class=\"line\">    &#125;)(req,  res, next);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"修改路由\"><a href=\"#修改路由\" class=\"headerlink\" title=\"修改路由\"></a>修改路由</h4><p>修改router/user.js路由<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.post(<span class=\"string\">'/user/login'</span>, validRequest.validByPassport, user.login);</span><br></pre></td></tr></table></figure></p>\n<p>这样，用户登录就会走passport的校验流程。</p>\n<h3 id=\"退出功能\"><a href=\"#退出功能\" class=\"headerlink\" title=\"退出功能\"></a>退出功能</h3><p>主要是清除cookie，controller/user.js中添加代码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.logout = <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  clearCookie(res);</span><br><span class=\"line\">  res.send(&#123;<span class=\"attr\">code</span>:<span class=\"number\">0</span>, <span class=\"attr\">message</span>:<span class=\"string\">\"exit success\"</span>&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">clearCookie = <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  res.clearCookie(config.cookie_name, &#123;<span class=\"attr\">path</span>: <span class=\"string\">'/'</span>&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>测试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl &quot;http://127.0.0.1:3020/user/logout&quot;</span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">100    35  100    35    0     0   2187      0 --:--:-- --:--:-- --:--:--  2187&#123;&quot;code&quot;:0,&quot;message&quot;:&quot;exit success&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>本文实现简单的服务端的注册，登录功能，暂时不实现前端界面，用curl模拟前端请求。</p>\n<h3 id=\"创建后端项目\"><a href=\"#创建后端项目\" class=\"headerlink\" title=\"创建后端项目\"></a>创建后端项目</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">express ota_be</span><br></pre></td></tr></table></figure>\n<h4 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h4><p>model存放数据库代码，routes存放路由代码，controller存放处理代码，middleware存放中间件代码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├─app.js</span><br><span class=\"line\">├─config.js</span><br><span class=\"line\">├─model/</span><br><span class=\"line\">├─routes/</span><br><span class=\"line\">├─controller/</span><br><span class=\"line\">├─middleware/</span><br></pre></td></tr></table></figure></p>","more":"<h3 id=\"用户注册\"><a href=\"#用户注册\" class=\"headerlink\" title=\"用户注册\"></a>用户注册</h3><h4 id=\"实现用户集合\"><a href=\"#实现用户集合\" class=\"headerlink\" title=\"实现用户集合\"></a>实现用户集合</h4><p>创建model/user.js，目前只保存username和password，其中username唯一。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> Schema = mongoose.Schema;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> UserSchema = <span class=\"keyword\">new</span> Schema(&#123;</span><br><span class=\"line\">  username: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    unique: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  password: &#123;</span><br><span class=\"line\">    type: <span class=\"built_in\">String</span>, </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">mongoose.model(<span class=\"string\">'User'</span>, UserSchema);</span><br></pre></td></tr></table></figure></p>\n<p>创建model/index.js，连接数据库。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.connect(config.mongodb, &#123;</span><br><span class=\"line\">  server: &#123;<span class=\"attr\">poolSize</span>: <span class=\"number\">20</span>&#125;,</span><br><span class=\"line\">  useMongoClient: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;, err =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">\"connect to %s failed\"</span>, config.mongodb, err</span><br><span class=\"line\">    .message);</span><br><span class=\"line\">    process.exit(<span class=\"number\">-1</span>);</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./user'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">exports.User = mongoose.model(<span class=\"string\">'User'</span>);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"路由实现\"><a href=\"#路由实现\" class=\"headerlink\" title=\"路由实现\"></a>路由实现</h4><p>创建routes/user.js。<br>这里的路由，都分发到控制器的user实现功能。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"built_in\">require</span>(<span class=\"string\">'../controller/user'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</span><br><span class=\"line\"><span class=\"keyword\">var</span> passport = <span class=\"built_in\">require</span>(<span class=\"string\">'passport'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/user/register'</span>,  user.register);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n<p>创建routes/index.js，引入路由文件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</span><br><span class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"built_in\">require</span>(<span class=\"string\">'./user'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">router.use(user);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure></p>\n<p>修改app.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\">app.use(<span class=\"string\">'/'</span>, router);</span><br></pre></td></tr></table></figure>\n<h4 id=\"实现注册操作\"><a href=\"#实现注册操作\" class=\"headerlink\" title=\"实现注册操作\"></a>实现注册操作</h4><p>创建controller/user.js。<br>用户密码需要利用bcyptsjs加密，不存储明文密码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Model = <span class=\"built_in\">require</span>(<span class=\"string\">'../model'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> User = Model.User;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bcrypt = <span class=\"built_in\">require</span>(<span class=\"string\">'bcryptjs'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">validUserRequest = <span class=\"function\"><span class=\"params\">body</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//TODO 更详细校验</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!body.username || !body.password) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;<span class=\"attr\">code</span>: <span class=\"number\">-1</span>, <span class=\"attr\">message</span>: <span class=\"string\">\"valid param\"</span>&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.register = <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> error = validUserRequest(req.body);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(error) &#123;</span><br><span class=\"line\">    res.status(<span class=\"number\">400</span>).send(error);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;username, password&#125; = req.body;</span><br><span class=\"line\">  bcrypt.hash(password, <span class=\"number\">10</span>)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">hash</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> User(&#123;</span><br><span class=\"line\">        username: username,</span><br><span class=\"line\">        password: hash</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> user.save()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">      res.json(&#123;<span class=\"attr\">code</span>: <span class=\"number\">0</span>, <span class=\"attr\">message</span>: <span class=\"string\">\"create user success\"</span>&#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">      res.status(<span class=\"number\">406</span>).send(&#123;<span class=\"attr\">code</span>: <span class=\"number\">-1</span>, <span class=\"attr\">message</span>: err.message&#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><p>因为用到了mongoose库，需要本地先启用mongod服务，端口需要跟config.js中的一致。<br>config.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> config = &#123;</span><br><span class=\"line\">  mongodb: <span class=\"string\">'mongodb://127.0.0.1:50000/ota_server'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = config;</span><br></pre></td></tr></table></figure></p>\n<p>然后启动应用。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn start</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"测试注册接口\"><a href=\"#测试注册接口\" class=\"headerlink\" title=\"测试注册接口\"></a>测试注册接口</h4><p>在终端里面用如下指令模拟注册请求。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -d <span class=\"string\">\"username=yinlijun&amp;password=123456\"</span> <span class=\"string\">\"http://127.0.0.1:3020/user/register\"</span></span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">100    75  100    42  100    33    168    132 --:--:-- --:--:-- --:--:--   168&#123;<span class=\"string\">\"code\"</span>:0,<span class=\"string\">\"message\"</span>:<span class=\"string\">\"create user success\"</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>利用mongo客户端打开集合，查看集合数据，插入成功。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mongo mongodb://127.0.0.1:50000</span><br><span class=\"line\">MongoDB shell version v3.4.9</span><br><span class=\"line\">connecting to: mongodb://127.0.0.1:50000</span><br><span class=\"line\">MongoDB server version: 3.4.9</span><br><span class=\"line\"></span><br><span class=\"line\">$ use ota_server</span><br><span class=\"line\">switched to db ota_server</span><br><span class=\"line\"></span><br><span class=\"line\">$ db.users.find()</span><br><span class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5a3b61b1db2e604ebca6dfc4\"</span>), <span class=\"string\">\"username\"</span> : <span class=\"string\">\"yinlijun\"</span>, <span class=\"string\">\"password\"</span> : <span class=\"string\">\"<span class=\"variable\">$2a</span><span class=\"variable\">$10</span><span class=\"variable\">$Zc33sn8Zj1kJslfTTXM0deFNUjVMJyWk</span>.tMsuh.aaLtZEFUSedLQW\"</span>, <span class=\"string\">\"__v\"</span> : 0 &#125;</span><br></pre></td></tr></table></figure></p>\n<p>再次注册同名用户，报错。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -d <span class=\"string\">\"username=yinlijun&amp;password=123456\"</span> <span class=\"string\">\"http://127.0.0.1:3020/user/register\"</span></span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">100   158  100   125  100    33   1344    354 --:--:-- --:--:-- --:--:--  1344&#123;<span class=\"string\">\"code\"</span>:-1,<span class=\"string\">\"message\"</span>:<span class=\"string\">\"E11000 duplicate key error collection: ota_server.users index: username_1 dup key: &#123; : \\\"yinlijun\\\" &#125;\"</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"用户登录\"><a href=\"#用户登录\" class=\"headerlink\" title=\"用户登录\"></a>用户登录</h3><h4 id=\"路由实现-1\"><a href=\"#路由实现-1\" class=\"headerlink\" title=\"路由实现\"></a>路由实现</h4><p>添加路由routes/user.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.post(<span class=\"string\">'/user/login'</span>, user.login);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"实现登录操作\"><a href=\"#实现登录操作\" class=\"headerlink\" title=\"实现登录操作\"></a>实现登录操作</h4><p>在controller/user.js中添加如下代码，校验用户名和密码，校验密码用到了bcrypt.compareSync。</p>\n<p>然后生成cookie发到前端。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.login = <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> &#123;username, password&#125; = req.body;</span><br><span class=\"line\">  User.findOne(&#123;<span class=\"attr\">username</span>: username&#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!user) &#123;</span><br><span class=\"line\">        res.status(<span class=\"number\">400</span>).send(&#123;<span class=\"attr\">code</span>: <span class=\"number\">-1</span>, <span class=\"attr\">message</span>:<span class=\"string\">\"invalid username or password\"</span>&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!bcrypt.compareSync(password, user.password)) &#123;</span><br><span class=\"line\">        res.status(<span class=\"number\">400</span>).send(&#123;<span class=\"attr\">code</span>: <span class=\"number\">-1</span>, <span class=\"attr\">message</span>:<span class=\"string\">\"invalid username or password\"</span>&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      genCookie(user, res);    </span><br><span class=\"line\">      res.send(&#123;<span class=\"attr\">code</span>:<span class=\"number\">0</span>, <span class=\"attr\">message</span>:<span class=\"string\">\"登录成功\"</span>&#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">genCookie = <span class=\"function\">(<span class=\"params\">user, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> token = user._id + <span class=\"string\">'$$$'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> opts = &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">    maxAge: config.session_age,</span><br><span class=\"line\">    httpOnly: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  res.cookie(config.cookie_name, token);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里可以看到有个重复调用的validUserRequest函数，可以做成一个middleware。</p>\n<p>创建middleware/validRequest.js。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.validUsernamePassword = <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//TODO 更详细校验</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> &#123;username, password&#125; = req.body;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!username || !password) &#123;</span><br><span class=\"line\">      res.status(<span class=\"number\">400</span>).send(&#123;<span class=\"attr\">code</span>: <span class=\"number\">-1</span>, <span class=\"attr\">message</span>: <span class=\"string\">\"valid param\"</span>&#125;);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后修改routes/user.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> validRequest = <span class=\"built_in\">require</span>(<span class=\"string\">'../middleware/validRequest'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/user/register'</span>, validRequest.validUsernamePassword, user.register);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/user/login'</span>, validRequest.validUsernamePassword, user.login);</span><br></pre></td></tr></table></figure></p>\n<p>把controller/user.js的register中validUserRequest调用去掉。</p>\n<p>测试一下这个middleware：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> $ curl -d <span class=\"string\">\"username=yinlijun&amp;password=\"</span> <span class=\"string\">\"http://127.0.0.1:3020/user/register\"</span></span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">100    62  100    35  100    27   1093    843 --:--:-- --:--:-- --:--:--  1093&#123;<span class=\"string\">\"code\"</span>:-1,<span class=\"string\">\"message\"</span>:<span class=\"string\">\"valid param\"</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"测试登录接口\"><a href=\"#测试登录接口\" class=\"headerlink\" title=\"测试登录接口\"></a>测试登录接口</h4><p>输入错误的用户名:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -d <span class=\"string\">\"username=liudehua&amp;password=123456\"</span> <span class=\"string\">\"http://127.0.0.1:3020/user/login\"</span></span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">100    85  100    52  100    33   1106    702 --:--:-- --:--:-- --:--:--  1106&#123;<span class=\"string\">\"code\"</span>:-1,<span class=\"string\">\"message\"</span>:<span class=\"string\">\"invalid username or password\"</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输入错误密码：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -d <span class=\"string\">\"username=yinlijun&amp;password=654321\"</span> <span class=\"string\">\"http://127.0.0.1:3020/user/login\"</span></span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">100    85  100    52  100    33    553    351 --:--:-- --:--:-- --:--:--   553&#123;<span class=\"string\">\"code\"</span>:-1,<span class=\"string\">\"message\"</span>:<span class=\"string\">\"invalid username or password\"</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输入正确的用户名密码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -d &quot;username=yinlijun&amp;password=123456&quot; &quot;http://127.0.0.1:3020/user/login&quot;</span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">100    68  100    35  100    33    372    351 --:--:-- --:--:-- --:--:--   372&#123;&quot;code&quot;:0,&quot;message&quot;:&quot;登录成功&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"利用passport校验登录功能。\"><a href=\"#利用passport校验登录功能。\" class=\"headerlink\" title=\"利用passport校验登录功能。\"></a>利用passport校验登录功能。</h3><p>社区里面有个passport的组件，可以用来实现校验登录功能。</p>\n<h4 id=\"封装passport中间件\"><a href=\"#封装passport中间件\" class=\"headerlink\" title=\"封装passport中间件\"></a>封装passport中间件</h4><p>创建middleware/passport.js，封装passport模块。</p>\n<p>将校验密码的操作挪到passport中，校验成功之后用户信息将会保存到req.user。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> passport = <span class=\"built_in\">require</span>(<span class=\"string\">'passport'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> User = <span class=\"built_in\">require</span>(<span class=\"string\">'../model'</span>).User;</span><br><span class=\"line\"><span class=\"keyword\">var</span> LocalStrategy = <span class=\"built_in\">require</span>(<span class=\"string\">'passport-local'</span>).Strategy;</span><br><span class=\"line\"></span><br><span class=\"line\">passport.use(<span class=\"string\">'local.login'</span>, <span class=\"keyword\">new</span> LocalStrategy(<span class=\"function\">(<span class=\"params\">username, password, done</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  User.findOne(&#123;<span class=\"attr\">username</span>: username&#125;)</span><br><span class=\"line\">    .exec()</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!user) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> done(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>, &#123;<span class=\"attr\">code</span>: <span class=\"number\">-1</span>, <span class=\"attr\">message</span>: <span class=\"string\">\"invalid username or password\"</span>&#125;);</span><br><span class=\"line\">      &#125; </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!user.validPassword(password)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> done(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>, &#123;<span class=\"attr\">code</span>: <span class=\"number\">-1</span>, <span class=\"attr\">message</span>: <span class=\"string\">\"invalid username or password\"</span>&#125;);</span><br><span class=\"line\">      &#125; </span><br><span class=\"line\">      <span class=\"keyword\">return</span> done(<span class=\"literal\">null</span>, user);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">      done(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>, &#123;<span class=\"attr\">code</span>: <span class=\"number\">-1</span>, <span class=\"attr\">message</span>: err.message&#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">passport.serializeUser(<span class=\"function\">(<span class=\"params\">user, done</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  done(<span class=\"literal\">null</span>, user._id);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">passport.deserializeUser(<span class=\"function\">(<span class=\"params\">id, done</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  User.findById(id)</span><br><span class=\"line\">    .exec()</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">      done(<span class=\"literal\">null</span>, user);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">      done(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>, &#123;<span class=\"attr\">code</span>: <span class=\"number\">-1</span>, <span class=\"attr\">message</span>: err.message&#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = passport;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"重新实现登录操作\"><a href=\"#重新实现登录操作\" class=\"headerlink\" title=\"重新实现登录操作\"></a>重新实现登录操作</h4><p>修改controller/user.js的login函数，去掉验证用户名密码的代码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.login = <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> user = req.user;</span><br><span class=\"line\">  genCookie(user, res);    </span><br><span class=\"line\">  res.send(&#123;<span class=\"attr\">code</span>:<span class=\"number\">0</span>, <span class=\"attr\">message</span>:<span class=\"string\">\"login success\"</span>&#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>在middleware/validRequest.js添加一个校验中间件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.validByPassport = <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    passport.authenticate(<span class=\"string\">'local.login'</span>, &#123;</span><br><span class=\"line\">      failureMessage: <span class=\"string\">'invalid username or password'</span>,</span><br><span class=\"line\">    &#125;)(req,  res, next);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"修改路由\"><a href=\"#修改路由\" class=\"headerlink\" title=\"修改路由\"></a>修改路由</h4><p>修改router/user.js路由<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.post(<span class=\"string\">'/user/login'</span>, validRequest.validByPassport, user.login);</span><br></pre></td></tr></table></figure></p>\n<p>这样，用户登录就会走passport的校验流程。</p>\n<h3 id=\"退出功能\"><a href=\"#退出功能\" class=\"headerlink\" title=\"退出功能\"></a>退出功能</h3><p>主要是清除cookie，controller/user.js中添加代码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.logout = <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  clearCookie(res);</span><br><span class=\"line\">  res.send(&#123;<span class=\"attr\">code</span>:<span class=\"number\">0</span>, <span class=\"attr\">message</span>:<span class=\"string\">\"exit success\"</span>&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">clearCookie = <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  res.clearCookie(config.cookie_name, &#123;<span class=\"attr\">path</span>: <span class=\"string\">'/'</span>&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>测试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl &quot;http://127.0.0.1:3020/user/logout&quot;</span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">100    35  100    35    0     0   2187      0 --:--:-- --:--:-- --:--:--  2187&#123;&quot;code&quot;:0,&quot;message&quot;:&quot;exit success&quot;&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"从零搭建Android OTA系统——七牛云存储接口实现","date":"2018-04-18T07:34:06.000Z","_content":"\n我们的OTA的固件存放在七牛，需要用到他们的一些SDK。\n- [Nodejs sdk](https://developer.qiniu.com/kodo/sdk/1289/nodejs)\n- [js sdk](https://developer.qiniu.com/kodo/sdk/1283/javascript)\n- [Android sdk](https://developer.qiniu.com/kodo/sdk/1236/android) \n\n### 上传流程\n\n<!-- more -->\n\n#### 客户端请求生成上传凭证\n\nadminManagerFirmwareSaga.js\n```javascript\nfunction* getUpToken(tokenInfo) {\n    return yield call(get, `/firmware_manager/${tokenInfo.curFirmwareId}/uptoken`, {prevFirmwareId: tokenInfo.prevFirmwareId});\n}\n```\n\n#### 服务端路由返回上传凭证\nroutes/firwmare_manager.js\n```javascript\nrouter.get('/:id/uptoken',\n    validRequest.validUserType('program'), firmwareManager.createUploadToken);\n```\n\ncontroller/firmware_manager.js\n```javascript\nexports.createUploadToken = (req, res, next) => {\n  const {\n    prevFirmwareId,\n  } = req.query;\n  const id = req.params.id;\n  Firmware.findById(id).exec() \n    .then(item => {\n      if(!item) {\n        throw new Error(`firmware id ${id} not found`);\n      }\n      const isFullPackage = !prevFirmwareId;\n      const options = {\n          expires: 36000,\n          callbackUrl: `${config.domain}/api/firmware_manager/${item._id}/notify_package_uploaded`,\n      };\n      \n      const { _id, firmwareClass } = item;\n      const currentFirmwareCode = item.firmwareCode;\n\n      if(isFullPackage) {\n        const path = `${firmwareClass}/${currentFirmwareCode}/${currentFirmwareCode}.zip`;\n        options.scope = `${qiniuConfig.bucketFirmware}:${path}`;\n        options.callbackBody = `{\"currentFirmwareCode\": \"${currentFirmwareCode}\", \"hash\":\"$(etag)\"}`;\n        options.callbackBodyType= 'application/json';\n        const token = qiniu.createUptoken(qiniuConfig.bucketFirmware, path, options);\n\n        responseClient(res, 200, errorCode.ERROR_CODE_SUCCESS, \"create upload token success\", {token: token, key: path});\n      } else {\n        //diff package\n        Firmware.findById(prevFirmwareId).exec()\n          .then(item => {\n            if(!item) {\n              throw new Error(`previous firmware id ${prevFirmwareId} not found`);\n            }\n            if(item.firmwareClass !== item.firmwareClass) {\n              throw new Error(`firmware class not match`);\n            }\n            const prevFirmwareCode = item.firmwareCode;\n            const path = `${firmwareClass}/${currentFirmwareCode}/diff_${currentFirmwareCode}_${prevFirmwareCode}.zip`;\n            options.scope = `${qiniuConfig.bucketFirmware}:${path}`;\n            options.callbackBody =`{\"prevFirmwareCode\": \"${prevFirmwareCode}\", \"hash\":\"$(etag)\"}`;\n            options.callbackBodyType = 'application/json'\n            const token = qiniu.createUptoken(qiniuConfig.bucketFirmware, path, options);\n\n            responseClient(res, 200, errorCode.ERROR_CODE_SUCCESS, \n                    \"create upload token success\", {token: token, key: path}, options);\n          });\n      }\n    })\n    .catch(error => {\n      responseClient(res, 406, errorCode.ERROR_CODE_SERVER, error.message);\n    })\n}\n```\n根据prevFirmwareId参数是否存在，判断是否是全包还是差分包，两者的路径不同，最后调用封装的qiniu api接口。\ncallbackBody是七牛的回调请求参数，etag用来保存文件的hash，用来Android客户端校验固件完整性用的。\n\nqiniu_proxy.js\n```javascript\nvar qiniu = require('qiniu');\nvar qiniuConfig = require('../config').qiniuConfig;\n\nconst accessKey = qiniuConfig.accessKey;\nconst secretKey = qiniuConfig.secretKey;\n\nqiniu.conf.ACCESS_KEY = accessKey;\nqiniu.conf.SECRET_KEY = secretKey;\nconst mac = new qiniu.auth.digest.Mac(accessKey, secretKey);\nvar config = new qiniu.conf.Config();\nvar bucketManager = new qiniu.rs.BucketManager(mac, config);\n\nexports.createUptoken = (bucket, key, options) => {\n  if(!key) {\n    throw new Exception(\"empty key\");\n  }\n  if(!bucket) {\n    throw new Exception(\"empty bucket\");\n  }\n  var keyToOverwrite = key;\n  options = options || {\n      scope: bucket + \":\" + keyToOverwrite,\n  }\n  var putPolicy = new qiniu.rs.PutPolicy(options);\n  const token = putPolicy.uploadToken(mac);\n\n  return token;\n}\n\nconst getDomainByBucketName = (bucket) => {\n  const buckets = qiniuConfig.buckets;\n  for(let item of buckets) {\n    if(item.name === bucket) {\n      return item.domain;\n    }\n  }\n}\n\nexports.createPrivateDownloadUrl = (bucket, key) => {\n  const privateDomain = getDomainByBucketName(bucket);\n  if(privateDomain) {\n    const deadline = parseInt(Date.now() / 1000) + 3600; // 1小时过期\n    const privateDownloadUrl = bucketManager.privateDownloadUrl(privateDomain, key, deadline);\n\n    return privateDownloadUrl;\n  }\n}\n\nexports.createPublicDownloadUrl = (bucket, key) => {\n  const publicDomain = getDomainByBucketName(bucket);\n  if(publicDomain) {\n    const publicDownloadUrl = bucketManager.publicDownloadUrl(privateDomain, key);\n\n    return publicDownloadUrl;\n  }\n}\n```\n#### 前端上传固件\nFileUploader.js\n```javascript\nuploadFirmwarePackage(file, key, uptoken) {\n    var observer = {\n    next: function (res) {\n        this.setState({uploading: true, status:'active', percent: Math.floor(res.total.percent)})\n    }.bind(this),\n    error: function (err) {\n        console.log(\"upload err\", err);\n        this.setState({uploading: false, status:'exception', token: null});\n    }.bind(this),\n    complete: function () {\n        this.setState({key: undefined, uploading: false, status:'success', fileList: [], token: null});\n        this.props.onUploadSuccess();\n    }.bind(this)\n    };\n    startUploadFirmwarePackage(file, key, uptoken, observer);\n}\n```\nFileUploader是个React组件，将上传状态放在组件内部，本来想放在saga里面统一管理，但是发现generate跟七牛上传observer回调函数搞不通。\n\nqiniuApi.js\n```javascript\nexport function startUploadFirmwarePackage(file, key, uptoken, observer) {\n  let observable = qiniu.upload(file, key, uptoken, putExtra, config);\n  observable.subscribe(observer);\n}\n```\n\n#### 服务器处理上传通知\n七牛上传完之后，会给业务服务器发一个成功的请求，将固件信息在保存到数据库中。\n\ncontroller/firmware_manager.js\n```javascript\nexports.notifyPackageUploaded = (req, res, next) => {\n  const id = req.params.id;\n  const {\n    prevFirmwareCode,\n    hash,\n  } = req.body;\n  \n  Firmware.findById(id).exec()\n    .then(item => {\n      if(!item) {\n        throw new Error(`firmware id ${id} not found`);\n      }\n      const firmwareClass  = item.firmwareClass;\n      const currentFirmwareCode = item.firmwareCode;\n      const isFullPackage = !prevFirmwareCode;\n      if(isFullPackage) {\n        //full package uploaded notification\n        item.fullPackagePath = {\n          firmwarePath: `${firmwareClass}/${currentFirmwareCode}/${currentFirmwareCode}.zip`,\n          packageHash: hash,\n        }\n        return item.save();\n      } else {\n        //diff package uploaded notification\n        const path = `${firmwareClass}/${currentFirmwareCode}/diff_${currentFirmwareCode}_${prevFirmwareCode}.zip`;\n        const package = item.diffPackagePath.find(p => {\n          return p.firmwareCode === prevFirmwareCode;\n        });\n        if(package) {\n          //override original path\n          package.firmwarePath = path;\n          package.packageHash = hash;\n        } else {\n          item.diffPackagePath.push({firmwareCode: prevFirmwareCode, firmwarePath: path, packageHash: hash});\n        }\n        return item.save();\n      }\n    })\n    .then(item => {\n        responseClient(res, 200, errorCode.ERROR_CODE_SUCCESS, \"upload success\");\n    }) \n    .catch(error => {\n      console.log(\"error\", error.message);\n      responseClient(res, 500, errorCode.ERROR_CODE_SERVER, error.message);\n    });\n}\n```\n\n\n### 客户端下载流程\n\n#### 获取下载凭证\nroutes/firmware_common.js\n```javascript\nrouter.get('/firmware', firmwareCommon.getDownloadUrl);\n```\n\ncontroller/firmware_common.js\n```javascript\nexports.getDownloadUrl = (req, res, next) => {\n  const { \n    firmwareClass, \n    currentFirmwareCode,\n    targetFirmwareCode\n  } = req.query;\n  //console.log(\"getDownloadUrl\", req.body);\n  if(!firmwareClass || !targetFirmwareCode) {\n    responseClient(res, 404, errorCode.ERROR_CODE_CLIENT, `invalid firmware class or target firmware code`);\n    return;\n  }\n  \n  Firmware.findOne({firmwareClass: firmwareClass, firmwareCode: targetFirmwareCode}).exec()\n    .then(item => {\n      if(!item) {\n        throw new Error(`${targetFirmwareCode} for class ${firmwareClass} not found`);\n      }\n      \n      //first try diff package download\n      let diffPackage;\n      if(currentFirmwareCode) {\n        diffPackage = item.diffPackagePath.find(p => {\n          if(firmwareUtils.compareFirmwareCode(p.firmwareCode, currentFirmwareCode) === 0) {\n            //bingo! found it\n            return p;\n          }\n        })\n      }\n      if(diffPackage && diffPackage.firmwarePath) {\n        //ok make a download url\n        const url = qiniu.createPrivateDownloadUrl(qiniuConfig.bucketFirmware, diffPackage.firmwarePath);\n        //console.log(\"diffpackage\", \"key\", diffPackage.firmwarePath, \"hash\", diffPackage.packageHash, \"url\", url);\n        responseClient(res, 200, errorCode.ERROR_CODE_SUCCESS, \"found url success\", {url: url, hash: diffPackage.packageHash});  \n      } else {\n        //no diff package, try full package download\n        if(!item.fullPackagePath) {\n          throw new Error(`${targetFirmwareCode} package for class ${firmwareClass} not found, may be has not uploaded`);\n        }\n        let key = item.fullPackagePath.firmwarePath;\n        let hash = item.fullPackagePath.packageHash;\n        const url = qiniu.createPrivateDownloadUrl(qiniuConfig.bucketFirmware, key);\n        //console.log(\"fullpackage\", \"key\", key, \"hash\", hash, \"url\", url);\n        responseClient(res, 200, errorCode.ERROR_CODE_SUCCESS, \"found url success\", {url: url, hash: hash});\n      }\n    })\n    .catch(error => {\n      responseClient(res, 404, errorCode.ERROR_CODE_CLIENT, error.message);\n    })\n}\n```\n\n#### Android下载\n```java\npublic void downloadFirmware(final String filePath, final Subscriber<Integer> subscriber) {\n    if(downloadListener != null) {\n        downloadListener.onStartDownload();\n    }\n    setUpdateState(UpdateStateManager.STATE_DOWNLOADING);\n    Map<String, String> params = OtaParamFactory.createDownloadFirmwareParam(mContext);\n    otaServerApi.getDownloadUtl(params)\n            .subscribeOn(Schedulers.io())\n            .map(new Func1<VersionDownloadUrl, String>() {\n                @Override\n                public String call(VersionDownloadUrl url) {\n                    mFirmwareManager.savePackageHash(url.getData().getHash());\n                    return url.getData().getUrl();\n                }\n            })\n            .flatMap(new Func1<String, rx.Observable<ResponseBody>>() {\n                @Override\n                public rx.Observable<ResponseBody> call(String url) {\n                    return qiniuServiceApi.downloadFirmware(url);\n                }\n            })\n              .subscribeOn(Schedulers.io())\n              .unsubscribeOn(Schedulers.io())\n              .map(new Func1<ResponseBody, String>() {\n                  @Override\n                  public String call(ResponseBody responseBody) {\n                      saveToDisk(responseBody, filePath);\n                      return mPackagePath;\n                  }\n              })\n              .observeOn(Schedulers.io())\n              .map(new Func1<String, Integer>() {\n                @Override\n                public Integer call(String path) {\n                    setUpdateState(UpdateStateManager.STATE_VERIFYING);\n                    int result = checkPackageHash();\n                    if(result != Util.OTAresult.CHECK_OK) {\n                        return result;\n                    }\n                    return checkUpdagePackage(path);\n                }\n              })\n              .observeOn(AndroidSchedulers.mainThread())\n              .subscribe(new Subscriber<Integer>() {\n                  @Override\n                  public void onCompleted() {\n                      subscriber.onCompleted();\n                  }\n\n                  @Override\n                  public void onError(Throwable e) {\n                      setUpdateState(UpdateStateManager.STATE_FAIL);\n                      subscriber.onError(e);\n                  }\n\n                  @Override\n                  public void onNext(Integer result) {\n                      if(result == Util.OTAresult.CHECK_OK) {\n                          if(downloadListener != null) {\n                              downloadListener.onFinishDownload();\n                          }\n                          setUpdateState(UpdateStateManager.STATE_READY);\n                      } else {\n                          if(downloadListener != null) {\n                              downloadListener.onFail(\"download fail code:\" + result);\n                          }\n                          setUpdateState(UpdateStateManager.STATE_FAIL);\n                      }\n                      subscriber.onNext(result);\n                  }\n              });\n}\n```\n\n#### 比较Hash值\n\nEtag是七牛Android SDK提供的工具类，用来计算hash，之前我们在业务服务器要求七牛回传etag值，在这里比较两者是否相等。\n\n```javascript\nprivate Integer checkPackageHash() {\n    try {\n        String tag = Etag.file(mPackagePath);\n        String originTag = mFirmwareManager.getPackageHash();\n        if(tag != null && tag.equals(originTag)) {\n            return Util.OTAresult.CHECK_OK;\n        }\n        return Util.OTAresult.ERROR_OTA_FILE;\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return Util.OTAresult.ERROR_OTA_FILE;\n}\n```\n\n以上所有的源代码都可以在[https://github.com/yinlijun2004/android_ota_system](https://github.com/yinlijun2004/android_ota_system)中找到。","source":"_posts/my-ota-tutorial-3.md","raw":"---\ntitle: 从零搭建Android OTA系统——七牛云存储接口实现\ndate: 2018-04-18 15:34:06\ntags:  [express, react, nodejs, antd]\ncategories: 从零搭建Android OTA系统\n---\n\n我们的OTA的固件存放在七牛，需要用到他们的一些SDK。\n- [Nodejs sdk](https://developer.qiniu.com/kodo/sdk/1289/nodejs)\n- [js sdk](https://developer.qiniu.com/kodo/sdk/1283/javascript)\n- [Android sdk](https://developer.qiniu.com/kodo/sdk/1236/android) \n\n### 上传流程\n\n<!-- more -->\n\n#### 客户端请求生成上传凭证\n\nadminManagerFirmwareSaga.js\n```javascript\nfunction* getUpToken(tokenInfo) {\n    return yield call(get, `/firmware_manager/${tokenInfo.curFirmwareId}/uptoken`, {prevFirmwareId: tokenInfo.prevFirmwareId});\n}\n```\n\n#### 服务端路由返回上传凭证\nroutes/firwmare_manager.js\n```javascript\nrouter.get('/:id/uptoken',\n    validRequest.validUserType('program'), firmwareManager.createUploadToken);\n```\n\ncontroller/firmware_manager.js\n```javascript\nexports.createUploadToken = (req, res, next) => {\n  const {\n    prevFirmwareId,\n  } = req.query;\n  const id = req.params.id;\n  Firmware.findById(id).exec() \n    .then(item => {\n      if(!item) {\n        throw new Error(`firmware id ${id} not found`);\n      }\n      const isFullPackage = !prevFirmwareId;\n      const options = {\n          expires: 36000,\n          callbackUrl: `${config.domain}/api/firmware_manager/${item._id}/notify_package_uploaded`,\n      };\n      \n      const { _id, firmwareClass } = item;\n      const currentFirmwareCode = item.firmwareCode;\n\n      if(isFullPackage) {\n        const path = `${firmwareClass}/${currentFirmwareCode}/${currentFirmwareCode}.zip`;\n        options.scope = `${qiniuConfig.bucketFirmware}:${path}`;\n        options.callbackBody = `{\"currentFirmwareCode\": \"${currentFirmwareCode}\", \"hash\":\"$(etag)\"}`;\n        options.callbackBodyType= 'application/json';\n        const token = qiniu.createUptoken(qiniuConfig.bucketFirmware, path, options);\n\n        responseClient(res, 200, errorCode.ERROR_CODE_SUCCESS, \"create upload token success\", {token: token, key: path});\n      } else {\n        //diff package\n        Firmware.findById(prevFirmwareId).exec()\n          .then(item => {\n            if(!item) {\n              throw new Error(`previous firmware id ${prevFirmwareId} not found`);\n            }\n            if(item.firmwareClass !== item.firmwareClass) {\n              throw new Error(`firmware class not match`);\n            }\n            const prevFirmwareCode = item.firmwareCode;\n            const path = `${firmwareClass}/${currentFirmwareCode}/diff_${currentFirmwareCode}_${prevFirmwareCode}.zip`;\n            options.scope = `${qiniuConfig.bucketFirmware}:${path}`;\n            options.callbackBody =`{\"prevFirmwareCode\": \"${prevFirmwareCode}\", \"hash\":\"$(etag)\"}`;\n            options.callbackBodyType = 'application/json'\n            const token = qiniu.createUptoken(qiniuConfig.bucketFirmware, path, options);\n\n            responseClient(res, 200, errorCode.ERROR_CODE_SUCCESS, \n                    \"create upload token success\", {token: token, key: path}, options);\n          });\n      }\n    })\n    .catch(error => {\n      responseClient(res, 406, errorCode.ERROR_CODE_SERVER, error.message);\n    })\n}\n```\n根据prevFirmwareId参数是否存在，判断是否是全包还是差分包，两者的路径不同，最后调用封装的qiniu api接口。\ncallbackBody是七牛的回调请求参数，etag用来保存文件的hash，用来Android客户端校验固件完整性用的。\n\nqiniu_proxy.js\n```javascript\nvar qiniu = require('qiniu');\nvar qiniuConfig = require('../config').qiniuConfig;\n\nconst accessKey = qiniuConfig.accessKey;\nconst secretKey = qiniuConfig.secretKey;\n\nqiniu.conf.ACCESS_KEY = accessKey;\nqiniu.conf.SECRET_KEY = secretKey;\nconst mac = new qiniu.auth.digest.Mac(accessKey, secretKey);\nvar config = new qiniu.conf.Config();\nvar bucketManager = new qiniu.rs.BucketManager(mac, config);\n\nexports.createUptoken = (bucket, key, options) => {\n  if(!key) {\n    throw new Exception(\"empty key\");\n  }\n  if(!bucket) {\n    throw new Exception(\"empty bucket\");\n  }\n  var keyToOverwrite = key;\n  options = options || {\n      scope: bucket + \":\" + keyToOverwrite,\n  }\n  var putPolicy = new qiniu.rs.PutPolicy(options);\n  const token = putPolicy.uploadToken(mac);\n\n  return token;\n}\n\nconst getDomainByBucketName = (bucket) => {\n  const buckets = qiniuConfig.buckets;\n  for(let item of buckets) {\n    if(item.name === bucket) {\n      return item.domain;\n    }\n  }\n}\n\nexports.createPrivateDownloadUrl = (bucket, key) => {\n  const privateDomain = getDomainByBucketName(bucket);\n  if(privateDomain) {\n    const deadline = parseInt(Date.now() / 1000) + 3600; // 1小时过期\n    const privateDownloadUrl = bucketManager.privateDownloadUrl(privateDomain, key, deadline);\n\n    return privateDownloadUrl;\n  }\n}\n\nexports.createPublicDownloadUrl = (bucket, key) => {\n  const publicDomain = getDomainByBucketName(bucket);\n  if(publicDomain) {\n    const publicDownloadUrl = bucketManager.publicDownloadUrl(privateDomain, key);\n\n    return publicDownloadUrl;\n  }\n}\n```\n#### 前端上传固件\nFileUploader.js\n```javascript\nuploadFirmwarePackage(file, key, uptoken) {\n    var observer = {\n    next: function (res) {\n        this.setState({uploading: true, status:'active', percent: Math.floor(res.total.percent)})\n    }.bind(this),\n    error: function (err) {\n        console.log(\"upload err\", err);\n        this.setState({uploading: false, status:'exception', token: null});\n    }.bind(this),\n    complete: function () {\n        this.setState({key: undefined, uploading: false, status:'success', fileList: [], token: null});\n        this.props.onUploadSuccess();\n    }.bind(this)\n    };\n    startUploadFirmwarePackage(file, key, uptoken, observer);\n}\n```\nFileUploader是个React组件，将上传状态放在组件内部，本来想放在saga里面统一管理，但是发现generate跟七牛上传observer回调函数搞不通。\n\nqiniuApi.js\n```javascript\nexport function startUploadFirmwarePackage(file, key, uptoken, observer) {\n  let observable = qiniu.upload(file, key, uptoken, putExtra, config);\n  observable.subscribe(observer);\n}\n```\n\n#### 服务器处理上传通知\n七牛上传完之后，会给业务服务器发一个成功的请求，将固件信息在保存到数据库中。\n\ncontroller/firmware_manager.js\n```javascript\nexports.notifyPackageUploaded = (req, res, next) => {\n  const id = req.params.id;\n  const {\n    prevFirmwareCode,\n    hash,\n  } = req.body;\n  \n  Firmware.findById(id).exec()\n    .then(item => {\n      if(!item) {\n        throw new Error(`firmware id ${id} not found`);\n      }\n      const firmwareClass  = item.firmwareClass;\n      const currentFirmwareCode = item.firmwareCode;\n      const isFullPackage = !prevFirmwareCode;\n      if(isFullPackage) {\n        //full package uploaded notification\n        item.fullPackagePath = {\n          firmwarePath: `${firmwareClass}/${currentFirmwareCode}/${currentFirmwareCode}.zip`,\n          packageHash: hash,\n        }\n        return item.save();\n      } else {\n        //diff package uploaded notification\n        const path = `${firmwareClass}/${currentFirmwareCode}/diff_${currentFirmwareCode}_${prevFirmwareCode}.zip`;\n        const package = item.diffPackagePath.find(p => {\n          return p.firmwareCode === prevFirmwareCode;\n        });\n        if(package) {\n          //override original path\n          package.firmwarePath = path;\n          package.packageHash = hash;\n        } else {\n          item.diffPackagePath.push({firmwareCode: prevFirmwareCode, firmwarePath: path, packageHash: hash});\n        }\n        return item.save();\n      }\n    })\n    .then(item => {\n        responseClient(res, 200, errorCode.ERROR_CODE_SUCCESS, \"upload success\");\n    }) \n    .catch(error => {\n      console.log(\"error\", error.message);\n      responseClient(res, 500, errorCode.ERROR_CODE_SERVER, error.message);\n    });\n}\n```\n\n\n### 客户端下载流程\n\n#### 获取下载凭证\nroutes/firmware_common.js\n```javascript\nrouter.get('/firmware', firmwareCommon.getDownloadUrl);\n```\n\ncontroller/firmware_common.js\n```javascript\nexports.getDownloadUrl = (req, res, next) => {\n  const { \n    firmwareClass, \n    currentFirmwareCode,\n    targetFirmwareCode\n  } = req.query;\n  //console.log(\"getDownloadUrl\", req.body);\n  if(!firmwareClass || !targetFirmwareCode) {\n    responseClient(res, 404, errorCode.ERROR_CODE_CLIENT, `invalid firmware class or target firmware code`);\n    return;\n  }\n  \n  Firmware.findOne({firmwareClass: firmwareClass, firmwareCode: targetFirmwareCode}).exec()\n    .then(item => {\n      if(!item) {\n        throw new Error(`${targetFirmwareCode} for class ${firmwareClass} not found`);\n      }\n      \n      //first try diff package download\n      let diffPackage;\n      if(currentFirmwareCode) {\n        diffPackage = item.diffPackagePath.find(p => {\n          if(firmwareUtils.compareFirmwareCode(p.firmwareCode, currentFirmwareCode) === 0) {\n            //bingo! found it\n            return p;\n          }\n        })\n      }\n      if(diffPackage && diffPackage.firmwarePath) {\n        //ok make a download url\n        const url = qiniu.createPrivateDownloadUrl(qiniuConfig.bucketFirmware, diffPackage.firmwarePath);\n        //console.log(\"diffpackage\", \"key\", diffPackage.firmwarePath, \"hash\", diffPackage.packageHash, \"url\", url);\n        responseClient(res, 200, errorCode.ERROR_CODE_SUCCESS, \"found url success\", {url: url, hash: diffPackage.packageHash});  \n      } else {\n        //no diff package, try full package download\n        if(!item.fullPackagePath) {\n          throw new Error(`${targetFirmwareCode} package for class ${firmwareClass} not found, may be has not uploaded`);\n        }\n        let key = item.fullPackagePath.firmwarePath;\n        let hash = item.fullPackagePath.packageHash;\n        const url = qiniu.createPrivateDownloadUrl(qiniuConfig.bucketFirmware, key);\n        //console.log(\"fullpackage\", \"key\", key, \"hash\", hash, \"url\", url);\n        responseClient(res, 200, errorCode.ERROR_CODE_SUCCESS, \"found url success\", {url: url, hash: hash});\n      }\n    })\n    .catch(error => {\n      responseClient(res, 404, errorCode.ERROR_CODE_CLIENT, error.message);\n    })\n}\n```\n\n#### Android下载\n```java\npublic void downloadFirmware(final String filePath, final Subscriber<Integer> subscriber) {\n    if(downloadListener != null) {\n        downloadListener.onStartDownload();\n    }\n    setUpdateState(UpdateStateManager.STATE_DOWNLOADING);\n    Map<String, String> params = OtaParamFactory.createDownloadFirmwareParam(mContext);\n    otaServerApi.getDownloadUtl(params)\n            .subscribeOn(Schedulers.io())\n            .map(new Func1<VersionDownloadUrl, String>() {\n                @Override\n                public String call(VersionDownloadUrl url) {\n                    mFirmwareManager.savePackageHash(url.getData().getHash());\n                    return url.getData().getUrl();\n                }\n            })\n            .flatMap(new Func1<String, rx.Observable<ResponseBody>>() {\n                @Override\n                public rx.Observable<ResponseBody> call(String url) {\n                    return qiniuServiceApi.downloadFirmware(url);\n                }\n            })\n              .subscribeOn(Schedulers.io())\n              .unsubscribeOn(Schedulers.io())\n              .map(new Func1<ResponseBody, String>() {\n                  @Override\n                  public String call(ResponseBody responseBody) {\n                      saveToDisk(responseBody, filePath);\n                      return mPackagePath;\n                  }\n              })\n              .observeOn(Schedulers.io())\n              .map(new Func1<String, Integer>() {\n                @Override\n                public Integer call(String path) {\n                    setUpdateState(UpdateStateManager.STATE_VERIFYING);\n                    int result = checkPackageHash();\n                    if(result != Util.OTAresult.CHECK_OK) {\n                        return result;\n                    }\n                    return checkUpdagePackage(path);\n                }\n              })\n              .observeOn(AndroidSchedulers.mainThread())\n              .subscribe(new Subscriber<Integer>() {\n                  @Override\n                  public void onCompleted() {\n                      subscriber.onCompleted();\n                  }\n\n                  @Override\n                  public void onError(Throwable e) {\n                      setUpdateState(UpdateStateManager.STATE_FAIL);\n                      subscriber.onError(e);\n                  }\n\n                  @Override\n                  public void onNext(Integer result) {\n                      if(result == Util.OTAresult.CHECK_OK) {\n                          if(downloadListener != null) {\n                              downloadListener.onFinishDownload();\n                          }\n                          setUpdateState(UpdateStateManager.STATE_READY);\n                      } else {\n                          if(downloadListener != null) {\n                              downloadListener.onFail(\"download fail code:\" + result);\n                          }\n                          setUpdateState(UpdateStateManager.STATE_FAIL);\n                      }\n                      subscriber.onNext(result);\n                  }\n              });\n}\n```\n\n#### 比较Hash值\n\nEtag是七牛Android SDK提供的工具类，用来计算hash，之前我们在业务服务器要求七牛回传etag值，在这里比较两者是否相等。\n\n```javascript\nprivate Integer checkPackageHash() {\n    try {\n        String tag = Etag.file(mPackagePath);\n        String originTag = mFirmwareManager.getPackageHash();\n        if(tag != null && tag.equals(originTag)) {\n            return Util.OTAresult.CHECK_OK;\n        }\n        return Util.OTAresult.ERROR_OTA_FILE;\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return Util.OTAresult.ERROR_OTA_FILE;\n}\n```\n\n以上所有的源代码都可以在[https://github.com/yinlijun2004/android_ota_system](https://github.com/yinlijun2004/android_ota_system)中找到。","slug":"my-ota-tutorial-3","published":1,"updated":"2019-01-03T02:48:56.348Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aankk007dbiuis1s0erq9","content":"<p>我们的OTA的固件存放在七牛，需要用到他们的一些SDK。</p>\n<ul>\n<li><a href=\"https://developer.qiniu.com/kodo/sdk/1289/nodejs\" target=\"_blank\" rel=\"noopener\">Nodejs sdk</a></li>\n<li><a href=\"https://developer.qiniu.com/kodo/sdk/1283/javascript\" target=\"_blank\" rel=\"noopener\">js sdk</a></li>\n<li><a href=\"https://developer.qiniu.com/kodo/sdk/1236/android\" target=\"_blank\" rel=\"noopener\">Android sdk</a> </li>\n</ul>\n<h3 id=\"上传流程\"><a href=\"#上传流程\" class=\"headerlink\" title=\"上传流程\"></a>上传流程</h3><a id=\"more\"></a>\n<h4 id=\"客户端请求生成上传凭证\"><a href=\"#客户端请求生成上传凭证\" class=\"headerlink\" title=\"客户端请求生成上传凭证\"></a>客户端请求生成上传凭证</h4><p>adminManagerFirmwareSaga.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">getUpToken</span>(<span class=\"params\">tokenInfo</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> call(get, <span class=\"string\">`/firmware_manager/<span class=\"subst\">$&#123;tokenInfo.curFirmwareId&#125;</span>/uptoken`</span>, &#123;<span class=\"attr\">prevFirmwareId</span>: tokenInfo.prevFirmwareId&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"服务端路由返回上传凭证\"><a href=\"#服务端路由返回上传凭证\" class=\"headerlink\" title=\"服务端路由返回上传凭证\"></a>服务端路由返回上传凭证</h4><p>routes/firwmare_manager.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/:id/uptoken'</span>,</span><br><span class=\"line\">    validRequest.validUserType(<span class=\"string\">'program'</span>), firmwareManager.createUploadToken);</span><br></pre></td></tr></table></figure></p>\n<p>controller/firmware_manager.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.createUploadToken = <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    prevFirmwareId,</span><br><span class=\"line\">  &#125; = req.query;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> id = req.params.id;</span><br><span class=\"line\">  Firmware.findById(id).exec() </span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!item) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`firmware id <span class=\"subst\">$&#123;id&#125;</span> not found`</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> isFullPackage = !prevFirmwareId;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">          expires: <span class=\"number\">36000</span>,</span><br><span class=\"line\">          callbackUrl: <span class=\"string\">`<span class=\"subst\">$&#123;config.domain&#125;</span>/api/firmware_manager/<span class=\"subst\">$&#123;item._id&#125;</span>/notify_package_uploaded`</span>,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; _id, firmwareClass &#125; = item;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> currentFirmwareCode = item.firmwareCode;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(isFullPackage) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> path = <span class=\"string\">`<span class=\"subst\">$&#123;firmwareClass&#125;</span>/<span class=\"subst\">$&#123;currentFirmwareCode&#125;</span>/<span class=\"subst\">$&#123;currentFirmwareCode&#125;</span>.zip`</span>;</span><br><span class=\"line\">        options.scope = <span class=\"string\">`<span class=\"subst\">$&#123;qiniuConfig.bucketFirmware&#125;</span>:<span class=\"subst\">$&#123;path&#125;</span>`</span>;</span><br><span class=\"line\">        options.callbackBody = <span class=\"string\">`&#123;\"currentFirmwareCode\": \"<span class=\"subst\">$&#123;currentFirmwareCode&#125;</span>\", \"hash\":\"$(etag)\"&#125;`</span>;</span><br><span class=\"line\">        options.callbackBodyType= <span class=\"string\">'application/json'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> token = qiniu.createUptoken(qiniuConfig.bucketFirmware, path, options);</span><br><span class=\"line\"></span><br><span class=\"line\">        responseClient(res, <span class=\"number\">200</span>, errorCode.ERROR_CODE_SUCCESS, <span class=\"string\">\"create upload token success\"</span>, &#123;<span class=\"attr\">token</span>: token, <span class=\"attr\">key</span>: path&#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//diff package</span></span><br><span class=\"line\">        Firmware.findById(prevFirmwareId).exec()</span><br><span class=\"line\">          .then(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!item) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`previous firmware id <span class=\"subst\">$&#123;prevFirmwareId&#125;</span> not found`</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(item.firmwareClass !== item.firmwareClass) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`firmware class not match`</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> prevFirmwareCode = item.firmwareCode;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> path = <span class=\"string\">`<span class=\"subst\">$&#123;firmwareClass&#125;</span>/<span class=\"subst\">$&#123;currentFirmwareCode&#125;</span>/diff_<span class=\"subst\">$&#123;currentFirmwareCode&#125;</span>_<span class=\"subst\">$&#123;prevFirmwareCode&#125;</span>.zip`</span>;</span><br><span class=\"line\">            options.scope = <span class=\"string\">`<span class=\"subst\">$&#123;qiniuConfig.bucketFirmware&#125;</span>:<span class=\"subst\">$&#123;path&#125;</span>`</span>;</span><br><span class=\"line\">            options.callbackBody =<span class=\"string\">`&#123;\"prevFirmwareCode\": \"<span class=\"subst\">$&#123;prevFirmwareCode&#125;</span>\", \"hash\":\"$(etag)\"&#125;`</span>;</span><br><span class=\"line\">            options.callbackBodyType = <span class=\"string\">'application/json'</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> token = qiniu.createUptoken(qiniuConfig.bucketFirmware, path, options);</span><br><span class=\"line\"></span><br><span class=\"line\">            responseClient(res, <span class=\"number\">200</span>, errorCode.ERROR_CODE_SUCCESS, </span><br><span class=\"line\">                    <span class=\"string\">\"create upload token success\"</span>, &#123;<span class=\"attr\">token</span>: token, <span class=\"attr\">key</span>: path&#125;, options);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">      responseClient(res, <span class=\"number\">406</span>, errorCode.ERROR_CODE_SERVER, error.message);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>根据prevFirmwareId参数是否存在，判断是否是全包还是差分包，两者的路径不同，最后调用封装的qiniu api接口。<br>callbackBody是七牛的回调请求参数，etag用来保存文件的hash，用来Android客户端校验固件完整性用的。</p>\n<p>qiniu_proxy.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> qiniu = <span class=\"built_in\">require</span>(<span class=\"string\">'qiniu'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> qiniuConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>).qiniuConfig;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> accessKey = qiniuConfig.accessKey;</span><br><span class=\"line\"><span class=\"keyword\">const</span> secretKey = qiniuConfig.secretKey;</span><br><span class=\"line\"></span><br><span class=\"line\">qiniu.conf.ACCESS_KEY = accessKey;</span><br><span class=\"line\">qiniu.conf.SECRET_KEY = secretKey;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mac = <span class=\"keyword\">new</span> qiniu.auth.digest.Mac(accessKey, secretKey);</span><br><span class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"keyword\">new</span> qiniu.conf.Config();</span><br><span class=\"line\"><span class=\"keyword\">var</span> bucketManager = <span class=\"keyword\">new</span> qiniu.rs.BucketManager(mac, config);</span><br><span class=\"line\"></span><br><span class=\"line\">exports.createUptoken = <span class=\"function\">(<span class=\"params\">bucket, key, options</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"empty key\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!bucket) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"empty bucket\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> keyToOverwrite = key;</span><br><span class=\"line\">  options = options || &#123;</span><br><span class=\"line\">      scope: bucket + <span class=\"string\">\":\"</span> + keyToOverwrite,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> putPolicy = <span class=\"keyword\">new</span> qiniu.rs.PutPolicy(options);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> token = putPolicy.uploadToken(mac);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getDomainByBucketName = <span class=\"function\">(<span class=\"params\">bucket</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> buckets = qiniuConfig.buckets;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> buckets) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(item.name === bucket) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> item.domain;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.createPrivateDownloadUrl = <span class=\"function\">(<span class=\"params\">bucket, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> privateDomain = getDomainByBucketName(bucket);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(privateDomain) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> deadline = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Date</span>.now() / <span class=\"number\">1000</span>) + <span class=\"number\">3600</span>; <span class=\"comment\">// 1小时过期</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> privateDownloadUrl = bucketManager.privateDownloadUrl(privateDomain, key, deadline);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> privateDownloadUrl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.createPublicDownloadUrl = <span class=\"function\">(<span class=\"params\">bucket, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> publicDomain = getDomainByBucketName(bucket);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(publicDomain) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> publicDownloadUrl = bucketManager.publicDownloadUrl(privateDomain, key);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> publicDownloadUrl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"前端上传固件\"><a href=\"#前端上传固件\" class=\"headerlink\" title=\"前端上传固件\"></a>前端上传固件</h4><p>FileUploader.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uploadFirmwarePackage(file, key, uptoken) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> observer = &#123;</span><br><span class=\"line\">    next: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">uploading</span>: <span class=\"literal\">true</span>, <span class=\"attr\">status</span>:<span class=\"string\">'active'</span>, <span class=\"attr\">percent</span>: <span class=\"built_in\">Math</span>.floor(res.total.percent)&#125;)</span><br><span class=\"line\">    &#125;.bind(<span class=\"keyword\">this</span>),</span><br><span class=\"line\">    error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"upload err\"</span>, err);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">uploading</span>: <span class=\"literal\">false</span>, <span class=\"attr\">status</span>:<span class=\"string\">'exception'</span>, <span class=\"attr\">token</span>: <span class=\"literal\">null</span>&#125;);</span><br><span class=\"line\">    &#125;.bind(<span class=\"keyword\">this</span>),</span><br><span class=\"line\">    complete: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">key</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">uploading</span>: <span class=\"literal\">false</span>, <span class=\"attr\">status</span>:<span class=\"string\">'success'</span>, <span class=\"attr\">fileList</span>: [], <span class=\"attr\">token</span>: <span class=\"literal\">null</span>&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.props.onUploadSuccess();</span><br><span class=\"line\">    &#125;.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    startUploadFirmwarePackage(file, key, uptoken, observer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>FileUploader是个React组件，将上传状态放在组件内部，本来想放在saga里面统一管理，但是发现generate跟七牛上传observer回调函数搞不通。</p>\n<p>qiniuApi.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startUploadFirmwarePackage</span>(<span class=\"params\">file, key, uptoken, observer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> observable = qiniu.upload(file, key, uptoken, putExtra, config);</span><br><span class=\"line\">  observable.subscribe(observer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"服务器处理上传通知\"><a href=\"#服务器处理上传通知\" class=\"headerlink\" title=\"服务器处理上传通知\"></a>服务器处理上传通知</h4><p>七牛上传完之后，会给业务服务器发一个成功的请求，将固件信息在保存到数据库中。</p>\n<p>controller/firmware_manager.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.notifyPackageUploaded = <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> id = req.params.id;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    prevFirmwareCode,</span><br><span class=\"line\">    hash,</span><br><span class=\"line\">  &#125; = req.body;</span><br><span class=\"line\">  </span><br><span class=\"line\">  Firmware.findById(id).exec()</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!item) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`firmware id <span class=\"subst\">$&#123;id&#125;</span> not found`</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> firmwareClass  = item.firmwareClass;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> currentFirmwareCode = item.firmwareCode;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> isFullPackage = !prevFirmwareCode;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(isFullPackage) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//full package uploaded notification</span></span><br><span class=\"line\">        item.fullPackagePath = &#123;</span><br><span class=\"line\">          firmwarePath: <span class=\"string\">`<span class=\"subst\">$&#123;firmwareClass&#125;</span>/<span class=\"subst\">$&#123;currentFirmwareCode&#125;</span>/<span class=\"subst\">$&#123;currentFirmwareCode&#125;</span>.zip`</span>,</span><br><span class=\"line\">          packageHash: hash,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item.save();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//diff package uploaded notification</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> path = <span class=\"string\">`<span class=\"subst\">$&#123;firmwareClass&#125;</span>/<span class=\"subst\">$&#123;currentFirmwareCode&#125;</span>/diff_<span class=\"subst\">$&#123;currentFirmwareCode&#125;</span>_<span class=\"subst\">$&#123;prevFirmwareCode&#125;</span>.zip`</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> package = item.diffPackagePath.find(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> p.firmwareCode === prevFirmwareCode;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(package) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//override original path</span></span><br><span class=\"line\">          package.firmwarePath = path;</span><br><span class=\"line\">          package.packageHash = hash;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          item.diffPackagePath.push(&#123;<span class=\"attr\">firmwareCode</span>: prevFirmwareCode, <span class=\"attr\">firmwarePath</span>: path, <span class=\"attr\">packageHash</span>: hash&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item.save();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        responseClient(res, <span class=\"number\">200</span>, errorCode.ERROR_CODE_SUCCESS, <span class=\"string\">\"upload success\"</span>);</span><br><span class=\"line\">    &#125;) </span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"error\"</span>, error.message);</span><br><span class=\"line\">      responseClient(res, <span class=\"number\">500</span>, errorCode.ERROR_CODE_SERVER, error.message);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"客户端下载流程\"><a href=\"#客户端下载流程\" class=\"headerlink\" title=\"客户端下载流程\"></a>客户端下载流程</h3><h4 id=\"获取下载凭证\"><a href=\"#获取下载凭证\" class=\"headerlink\" title=\"获取下载凭证\"></a>获取下载凭证</h4><p>routes/firmware_common.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/firmware'</span>, firmwareCommon.getDownloadUrl);</span><br></pre></td></tr></table></figure></p>\n<p>controller/firmware_common.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.getDownloadUrl = <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; </span><br><span class=\"line\">    firmwareClass, </span><br><span class=\"line\">    currentFirmwareCode,</span><br><span class=\"line\">    targetFirmwareCode</span><br><span class=\"line\">  &#125; = req.query;</span><br><span class=\"line\">  <span class=\"comment\">//console.log(\"getDownloadUrl\", req.body);</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!firmwareClass || !targetFirmwareCode) &#123;</span><br><span class=\"line\">    responseClient(res, <span class=\"number\">404</span>, errorCode.ERROR_CODE_CLIENT, <span class=\"string\">`invalid firmware class or target firmware code`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  Firmware.findOne(&#123;<span class=\"attr\">firmwareClass</span>: firmwareClass, <span class=\"attr\">firmwareCode</span>: targetFirmwareCode&#125;).exec()</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!item) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`<span class=\"subst\">$&#123;targetFirmwareCode&#125;</span> for class <span class=\"subst\">$&#123;firmwareClass&#125;</span> not found`</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">//first try diff package download</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> diffPackage;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(currentFirmwareCode) &#123;</span><br><span class=\"line\">        diffPackage = item.diffPackagePath.find(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(firmwareUtils.compareFirmwareCode(p.firmwareCode, currentFirmwareCode) === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//bingo! found it</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(diffPackage &amp;&amp; diffPackage.firmwarePath) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//ok make a download url</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> url = qiniu.createPrivateDownloadUrl(qiniuConfig.bucketFirmware, diffPackage.firmwarePath);</span><br><span class=\"line\">        <span class=\"comment\">//console.log(\"diffpackage\", \"key\", diffPackage.firmwarePath, \"hash\", diffPackage.packageHash, \"url\", url);</span></span><br><span class=\"line\">        responseClient(res, <span class=\"number\">200</span>, errorCode.ERROR_CODE_SUCCESS, <span class=\"string\">\"found url success\"</span>, &#123;<span class=\"attr\">url</span>: url, <span class=\"attr\">hash</span>: diffPackage.packageHash&#125;);  </span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//no diff package, try full package download</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!item.fullPackagePath) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`<span class=\"subst\">$&#123;targetFirmwareCode&#125;</span> package for class <span class=\"subst\">$&#123;firmwareClass&#125;</span> not found, may be has not uploaded`</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> key = item.fullPackagePath.firmwarePath;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> hash = item.fullPackagePath.packageHash;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> url = qiniu.createPrivateDownloadUrl(qiniuConfig.bucketFirmware, key);</span><br><span class=\"line\">        <span class=\"comment\">//console.log(\"fullpackage\", \"key\", key, \"hash\", hash, \"url\", url);</span></span><br><span class=\"line\">        responseClient(res, <span class=\"number\">200</span>, errorCode.ERROR_CODE_SUCCESS, <span class=\"string\">\"found url success\"</span>, &#123;<span class=\"attr\">url</span>: url, <span class=\"attr\">hash</span>: hash&#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">      responseClient(res, <span class=\"number\">404</span>, errorCode.ERROR_CODE_CLIENT, error.message);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Android下载\"><a href=\"#Android下载\" class=\"headerlink\" title=\"Android下载\"></a>Android下载</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">downloadFirmware</span><span class=\"params\">(<span class=\"keyword\">final</span> String filePath, <span class=\"keyword\">final</span> Subscriber&lt;Integer&gt; subscriber)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(downloadListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        downloadListener.onStartDownload();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setUpdateState(UpdateStateManager.STATE_DOWNLOADING);</span><br><span class=\"line\">    Map&lt;String, String&gt; params = OtaParamFactory.createDownloadFirmwareParam(mContext);</span><br><span class=\"line\">    otaServerApi.getDownloadUtl(params)</span><br><span class=\"line\">            .subscribeOn(Schedulers.io())</span><br><span class=\"line\">            .map(<span class=\"keyword\">new</span> Func1&lt;VersionDownloadUrl, String&gt;() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">call</span><span class=\"params\">(VersionDownloadUrl url)</span> </span>&#123;</span><br><span class=\"line\">                    mFirmwareManager.savePackageHash(url.getData().getHash());</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> url.getData().getUrl();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .flatMap(<span class=\"keyword\">new</span> Func1&lt;String, rx.Observable&lt;ResponseBody&gt;&gt;() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> rx.<span class=\"function\">Observable&lt;ResponseBody&gt; <span class=\"title\">call</span><span class=\"params\">(String url)</span> </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> qiniuServiceApi.downloadFirmware(url);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">              .subscribeOn(Schedulers.io())</span><br><span class=\"line\">              .unsubscribeOn(Schedulers.io())</span><br><span class=\"line\">              .map(<span class=\"keyword\">new</span> Func1&lt;ResponseBody, String&gt;() &#123;</span><br><span class=\"line\">                  <span class=\"meta\">@Override</span></span><br><span class=\"line\">                  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">call</span><span class=\"params\">(ResponseBody responseBody)</span> </span>&#123;</span><br><span class=\"line\">                      saveToDisk(responseBody, filePath);</span><br><span class=\"line\">                      <span class=\"keyword\">return</span> mPackagePath;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;)</span><br><span class=\"line\">              .observeOn(Schedulers.io())</span><br><span class=\"line\">              .map(<span class=\"keyword\">new</span> Func1&lt;String, Integer&gt;() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">call</span><span class=\"params\">(String path)</span> </span>&#123;</span><br><span class=\"line\">                    setUpdateState(UpdateStateManager.STATE_VERIFYING);</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> result = checkPackageHash();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(result != Util.OTAresult.CHECK_OK) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> checkUpdagePackage(path);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;)</span><br><span class=\"line\">              .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">              .subscribe(<span class=\"keyword\">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class=\"line\">                  <span class=\"meta\">@Override</span></span><br><span class=\"line\">                  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                      subscriber.onCompleted();</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                  <span class=\"meta\">@Override</span></span><br><span class=\"line\">                  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</span><br><span class=\"line\">                      setUpdateState(UpdateStateManager.STATE_FAIL);</span><br><span class=\"line\">                      subscriber.onError(e);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                  <span class=\"meta\">@Override</span></span><br><span class=\"line\">                  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(Integer result)</span> </span>&#123;</span><br><span class=\"line\">                      <span class=\"keyword\">if</span>(result == Util.OTAresult.CHECK_OK) &#123;</span><br><span class=\"line\">                          <span class=\"keyword\">if</span>(downloadListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                              downloadListener.onFinishDownload();</span><br><span class=\"line\">                          &#125;</span><br><span class=\"line\">                          setUpdateState(UpdateStateManager.STATE_READY);</span><br><span class=\"line\">                      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                          <span class=\"keyword\">if</span>(downloadListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                              downloadListener.onFail(<span class=\"string\">\"download fail code:\"</span> + result);</span><br><span class=\"line\">                          &#125;</span><br><span class=\"line\">                          setUpdateState(UpdateStateManager.STATE_FAIL);</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                      subscriber.onNext(result);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"比较Hash值\"><a href=\"#比较Hash值\" class=\"headerlink\" title=\"比较Hash值\"></a>比较Hash值</h4><p>Etag是七牛Android SDK提供的工具类，用来计算hash，之前我们在业务服务器要求七牛回传etag值，在这里比较两者是否相等。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private Integer checkPackageHash() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">String</span> tag = Etag.file(mPackagePath);</span><br><span class=\"line\">        <span class=\"built_in\">String</span> originTag = mFirmwareManager.getPackageHash();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tag != <span class=\"literal\">null</span> &amp;&amp; tag.equals(originTag)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Util.OTAresult.CHECK_OK;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Util.OTAresult.ERROR_OTA_FILE;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Util.OTAresult.ERROR_OTA_FILE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上所有的源代码都可以在<a href=\"https://github.com/yinlijun2004/android_ota_system\" target=\"_blank\" rel=\"noopener\">https://github.com/yinlijun2004/android_ota_system</a>中找到。</p>\n","site":{"data":{}},"excerpt":"<p>我们的OTA的固件存放在七牛，需要用到他们的一些SDK。</p>\n<ul>\n<li><a href=\"https://developer.qiniu.com/kodo/sdk/1289/nodejs\" target=\"_blank\" rel=\"noopener\">Nodejs sdk</a></li>\n<li><a href=\"https://developer.qiniu.com/kodo/sdk/1283/javascript\" target=\"_blank\" rel=\"noopener\">js sdk</a></li>\n<li><a href=\"https://developer.qiniu.com/kodo/sdk/1236/android\" target=\"_blank\" rel=\"noopener\">Android sdk</a> </li>\n</ul>\n<h3 id=\"上传流程\"><a href=\"#上传流程\" class=\"headerlink\" title=\"上传流程\"></a>上传流程</h3>","more":"<h4 id=\"客户端请求生成上传凭证\"><a href=\"#客户端请求生成上传凭证\" class=\"headerlink\" title=\"客户端请求生成上传凭证\"></a>客户端请求生成上传凭证</h4><p>adminManagerFirmwareSaga.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">getUpToken</span>(<span class=\"params\">tokenInfo</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> call(get, <span class=\"string\">`/firmware_manager/<span class=\"subst\">$&#123;tokenInfo.curFirmwareId&#125;</span>/uptoken`</span>, &#123;<span class=\"attr\">prevFirmwareId</span>: tokenInfo.prevFirmwareId&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"服务端路由返回上传凭证\"><a href=\"#服务端路由返回上传凭证\" class=\"headerlink\" title=\"服务端路由返回上传凭证\"></a>服务端路由返回上传凭证</h4><p>routes/firwmare_manager.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/:id/uptoken'</span>,</span><br><span class=\"line\">    validRequest.validUserType(<span class=\"string\">'program'</span>), firmwareManager.createUploadToken);</span><br></pre></td></tr></table></figure></p>\n<p>controller/firmware_manager.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.createUploadToken = <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    prevFirmwareId,</span><br><span class=\"line\">  &#125; = req.query;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> id = req.params.id;</span><br><span class=\"line\">  Firmware.findById(id).exec() </span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!item) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`firmware id <span class=\"subst\">$&#123;id&#125;</span> not found`</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> isFullPackage = !prevFirmwareId;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">          expires: <span class=\"number\">36000</span>,</span><br><span class=\"line\">          callbackUrl: <span class=\"string\">`<span class=\"subst\">$&#123;config.domain&#125;</span>/api/firmware_manager/<span class=\"subst\">$&#123;item._id&#125;</span>/notify_package_uploaded`</span>,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; _id, firmwareClass &#125; = item;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> currentFirmwareCode = item.firmwareCode;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(isFullPackage) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> path = <span class=\"string\">`<span class=\"subst\">$&#123;firmwareClass&#125;</span>/<span class=\"subst\">$&#123;currentFirmwareCode&#125;</span>/<span class=\"subst\">$&#123;currentFirmwareCode&#125;</span>.zip`</span>;</span><br><span class=\"line\">        options.scope = <span class=\"string\">`<span class=\"subst\">$&#123;qiniuConfig.bucketFirmware&#125;</span>:<span class=\"subst\">$&#123;path&#125;</span>`</span>;</span><br><span class=\"line\">        options.callbackBody = <span class=\"string\">`&#123;\"currentFirmwareCode\": \"<span class=\"subst\">$&#123;currentFirmwareCode&#125;</span>\", \"hash\":\"$(etag)\"&#125;`</span>;</span><br><span class=\"line\">        options.callbackBodyType= <span class=\"string\">'application/json'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> token = qiniu.createUptoken(qiniuConfig.bucketFirmware, path, options);</span><br><span class=\"line\"></span><br><span class=\"line\">        responseClient(res, <span class=\"number\">200</span>, errorCode.ERROR_CODE_SUCCESS, <span class=\"string\">\"create upload token success\"</span>, &#123;<span class=\"attr\">token</span>: token, <span class=\"attr\">key</span>: path&#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//diff package</span></span><br><span class=\"line\">        Firmware.findById(prevFirmwareId).exec()</span><br><span class=\"line\">          .then(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!item) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`previous firmware id <span class=\"subst\">$&#123;prevFirmwareId&#125;</span> not found`</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(item.firmwareClass !== item.firmwareClass) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`firmware class not match`</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> prevFirmwareCode = item.firmwareCode;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> path = <span class=\"string\">`<span class=\"subst\">$&#123;firmwareClass&#125;</span>/<span class=\"subst\">$&#123;currentFirmwareCode&#125;</span>/diff_<span class=\"subst\">$&#123;currentFirmwareCode&#125;</span>_<span class=\"subst\">$&#123;prevFirmwareCode&#125;</span>.zip`</span>;</span><br><span class=\"line\">            options.scope = <span class=\"string\">`<span class=\"subst\">$&#123;qiniuConfig.bucketFirmware&#125;</span>:<span class=\"subst\">$&#123;path&#125;</span>`</span>;</span><br><span class=\"line\">            options.callbackBody =<span class=\"string\">`&#123;\"prevFirmwareCode\": \"<span class=\"subst\">$&#123;prevFirmwareCode&#125;</span>\", \"hash\":\"$(etag)\"&#125;`</span>;</span><br><span class=\"line\">            options.callbackBodyType = <span class=\"string\">'application/json'</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> token = qiniu.createUptoken(qiniuConfig.bucketFirmware, path, options);</span><br><span class=\"line\"></span><br><span class=\"line\">            responseClient(res, <span class=\"number\">200</span>, errorCode.ERROR_CODE_SUCCESS, </span><br><span class=\"line\">                    <span class=\"string\">\"create upload token success\"</span>, &#123;<span class=\"attr\">token</span>: token, <span class=\"attr\">key</span>: path&#125;, options);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">      responseClient(res, <span class=\"number\">406</span>, errorCode.ERROR_CODE_SERVER, error.message);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>根据prevFirmwareId参数是否存在，判断是否是全包还是差分包，两者的路径不同，最后调用封装的qiniu api接口。<br>callbackBody是七牛的回调请求参数，etag用来保存文件的hash，用来Android客户端校验固件完整性用的。</p>\n<p>qiniu_proxy.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> qiniu = <span class=\"built_in\">require</span>(<span class=\"string\">'qiniu'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> qiniuConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>).qiniuConfig;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> accessKey = qiniuConfig.accessKey;</span><br><span class=\"line\"><span class=\"keyword\">const</span> secretKey = qiniuConfig.secretKey;</span><br><span class=\"line\"></span><br><span class=\"line\">qiniu.conf.ACCESS_KEY = accessKey;</span><br><span class=\"line\">qiniu.conf.SECRET_KEY = secretKey;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mac = <span class=\"keyword\">new</span> qiniu.auth.digest.Mac(accessKey, secretKey);</span><br><span class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"keyword\">new</span> qiniu.conf.Config();</span><br><span class=\"line\"><span class=\"keyword\">var</span> bucketManager = <span class=\"keyword\">new</span> qiniu.rs.BucketManager(mac, config);</span><br><span class=\"line\"></span><br><span class=\"line\">exports.createUptoken = <span class=\"function\">(<span class=\"params\">bucket, key, options</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"empty key\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!bucket) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"empty bucket\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> keyToOverwrite = key;</span><br><span class=\"line\">  options = options || &#123;</span><br><span class=\"line\">      scope: bucket + <span class=\"string\">\":\"</span> + keyToOverwrite,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> putPolicy = <span class=\"keyword\">new</span> qiniu.rs.PutPolicy(options);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> token = putPolicy.uploadToken(mac);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getDomainByBucketName = <span class=\"function\">(<span class=\"params\">bucket</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> buckets = qiniuConfig.buckets;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> buckets) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(item.name === bucket) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> item.domain;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.createPrivateDownloadUrl = <span class=\"function\">(<span class=\"params\">bucket, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> privateDomain = getDomainByBucketName(bucket);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(privateDomain) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> deadline = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Date</span>.now() / <span class=\"number\">1000</span>) + <span class=\"number\">3600</span>; <span class=\"comment\">// 1小时过期</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> privateDownloadUrl = bucketManager.privateDownloadUrl(privateDomain, key, deadline);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> privateDownloadUrl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.createPublicDownloadUrl = <span class=\"function\">(<span class=\"params\">bucket, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> publicDomain = getDomainByBucketName(bucket);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(publicDomain) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> publicDownloadUrl = bucketManager.publicDownloadUrl(privateDomain, key);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> publicDownloadUrl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"前端上传固件\"><a href=\"#前端上传固件\" class=\"headerlink\" title=\"前端上传固件\"></a>前端上传固件</h4><p>FileUploader.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uploadFirmwarePackage(file, key, uptoken) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> observer = &#123;</span><br><span class=\"line\">    next: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">uploading</span>: <span class=\"literal\">true</span>, <span class=\"attr\">status</span>:<span class=\"string\">'active'</span>, <span class=\"attr\">percent</span>: <span class=\"built_in\">Math</span>.floor(res.total.percent)&#125;)</span><br><span class=\"line\">    &#125;.bind(<span class=\"keyword\">this</span>),</span><br><span class=\"line\">    error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"upload err\"</span>, err);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">uploading</span>: <span class=\"literal\">false</span>, <span class=\"attr\">status</span>:<span class=\"string\">'exception'</span>, <span class=\"attr\">token</span>: <span class=\"literal\">null</span>&#125;);</span><br><span class=\"line\">    &#125;.bind(<span class=\"keyword\">this</span>),</span><br><span class=\"line\">    complete: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">key</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">uploading</span>: <span class=\"literal\">false</span>, <span class=\"attr\">status</span>:<span class=\"string\">'success'</span>, <span class=\"attr\">fileList</span>: [], <span class=\"attr\">token</span>: <span class=\"literal\">null</span>&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.props.onUploadSuccess();</span><br><span class=\"line\">    &#125;.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    startUploadFirmwarePackage(file, key, uptoken, observer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>FileUploader是个React组件，将上传状态放在组件内部，本来想放在saga里面统一管理，但是发现generate跟七牛上传observer回调函数搞不通。</p>\n<p>qiniuApi.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startUploadFirmwarePackage</span>(<span class=\"params\">file, key, uptoken, observer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> observable = qiniu.upload(file, key, uptoken, putExtra, config);</span><br><span class=\"line\">  observable.subscribe(observer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"服务器处理上传通知\"><a href=\"#服务器处理上传通知\" class=\"headerlink\" title=\"服务器处理上传通知\"></a>服务器处理上传通知</h4><p>七牛上传完之后，会给业务服务器发一个成功的请求，将固件信息在保存到数据库中。</p>\n<p>controller/firmware_manager.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.notifyPackageUploaded = <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> id = req.params.id;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    prevFirmwareCode,</span><br><span class=\"line\">    hash,</span><br><span class=\"line\">  &#125; = req.body;</span><br><span class=\"line\">  </span><br><span class=\"line\">  Firmware.findById(id).exec()</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!item) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`firmware id <span class=\"subst\">$&#123;id&#125;</span> not found`</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> firmwareClass  = item.firmwareClass;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> currentFirmwareCode = item.firmwareCode;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> isFullPackage = !prevFirmwareCode;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(isFullPackage) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//full package uploaded notification</span></span><br><span class=\"line\">        item.fullPackagePath = &#123;</span><br><span class=\"line\">          firmwarePath: <span class=\"string\">`<span class=\"subst\">$&#123;firmwareClass&#125;</span>/<span class=\"subst\">$&#123;currentFirmwareCode&#125;</span>/<span class=\"subst\">$&#123;currentFirmwareCode&#125;</span>.zip`</span>,</span><br><span class=\"line\">          packageHash: hash,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item.save();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//diff package uploaded notification</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> path = <span class=\"string\">`<span class=\"subst\">$&#123;firmwareClass&#125;</span>/<span class=\"subst\">$&#123;currentFirmwareCode&#125;</span>/diff_<span class=\"subst\">$&#123;currentFirmwareCode&#125;</span>_<span class=\"subst\">$&#123;prevFirmwareCode&#125;</span>.zip`</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> package = item.diffPackagePath.find(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> p.firmwareCode === prevFirmwareCode;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(package) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//override original path</span></span><br><span class=\"line\">          package.firmwarePath = path;</span><br><span class=\"line\">          package.packageHash = hash;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          item.diffPackagePath.push(&#123;<span class=\"attr\">firmwareCode</span>: prevFirmwareCode, <span class=\"attr\">firmwarePath</span>: path, <span class=\"attr\">packageHash</span>: hash&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item.save();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        responseClient(res, <span class=\"number\">200</span>, errorCode.ERROR_CODE_SUCCESS, <span class=\"string\">\"upload success\"</span>);</span><br><span class=\"line\">    &#125;) </span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"error\"</span>, error.message);</span><br><span class=\"line\">      responseClient(res, <span class=\"number\">500</span>, errorCode.ERROR_CODE_SERVER, error.message);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"客户端下载流程\"><a href=\"#客户端下载流程\" class=\"headerlink\" title=\"客户端下载流程\"></a>客户端下载流程</h3><h4 id=\"获取下载凭证\"><a href=\"#获取下载凭证\" class=\"headerlink\" title=\"获取下载凭证\"></a>获取下载凭证</h4><p>routes/firmware_common.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/firmware'</span>, firmwareCommon.getDownloadUrl);</span><br></pre></td></tr></table></figure></p>\n<p>controller/firmware_common.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.getDownloadUrl = <span class=\"function\">(<span class=\"params\">req, res, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; </span><br><span class=\"line\">    firmwareClass, </span><br><span class=\"line\">    currentFirmwareCode,</span><br><span class=\"line\">    targetFirmwareCode</span><br><span class=\"line\">  &#125; = req.query;</span><br><span class=\"line\">  <span class=\"comment\">//console.log(\"getDownloadUrl\", req.body);</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!firmwareClass || !targetFirmwareCode) &#123;</span><br><span class=\"line\">    responseClient(res, <span class=\"number\">404</span>, errorCode.ERROR_CODE_CLIENT, <span class=\"string\">`invalid firmware class or target firmware code`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  Firmware.findOne(&#123;<span class=\"attr\">firmwareClass</span>: firmwareClass, <span class=\"attr\">firmwareCode</span>: targetFirmwareCode&#125;).exec()</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!item) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`<span class=\"subst\">$&#123;targetFirmwareCode&#125;</span> for class <span class=\"subst\">$&#123;firmwareClass&#125;</span> not found`</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">//first try diff package download</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> diffPackage;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(currentFirmwareCode) &#123;</span><br><span class=\"line\">        diffPackage = item.diffPackagePath.find(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(firmwareUtils.compareFirmwareCode(p.firmwareCode, currentFirmwareCode) === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//bingo! found it</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(diffPackage &amp;&amp; diffPackage.firmwarePath) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//ok make a download url</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> url = qiniu.createPrivateDownloadUrl(qiniuConfig.bucketFirmware, diffPackage.firmwarePath);</span><br><span class=\"line\">        <span class=\"comment\">//console.log(\"diffpackage\", \"key\", diffPackage.firmwarePath, \"hash\", diffPackage.packageHash, \"url\", url);</span></span><br><span class=\"line\">        responseClient(res, <span class=\"number\">200</span>, errorCode.ERROR_CODE_SUCCESS, <span class=\"string\">\"found url success\"</span>, &#123;<span class=\"attr\">url</span>: url, <span class=\"attr\">hash</span>: diffPackage.packageHash&#125;);  </span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//no diff package, try full package download</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!item.fullPackagePath) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`<span class=\"subst\">$&#123;targetFirmwareCode&#125;</span> package for class <span class=\"subst\">$&#123;firmwareClass&#125;</span> not found, may be has not uploaded`</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> key = item.fullPackagePath.firmwarePath;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> hash = item.fullPackagePath.packageHash;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> url = qiniu.createPrivateDownloadUrl(qiniuConfig.bucketFirmware, key);</span><br><span class=\"line\">        <span class=\"comment\">//console.log(\"fullpackage\", \"key\", key, \"hash\", hash, \"url\", url);</span></span><br><span class=\"line\">        responseClient(res, <span class=\"number\">200</span>, errorCode.ERROR_CODE_SUCCESS, <span class=\"string\">\"found url success\"</span>, &#123;<span class=\"attr\">url</span>: url, <span class=\"attr\">hash</span>: hash&#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">      responseClient(res, <span class=\"number\">404</span>, errorCode.ERROR_CODE_CLIENT, error.message);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Android下载\"><a href=\"#Android下载\" class=\"headerlink\" title=\"Android下载\"></a>Android下载</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">downloadFirmware</span><span class=\"params\">(<span class=\"keyword\">final</span> String filePath, <span class=\"keyword\">final</span> Subscriber&lt;Integer&gt; subscriber)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(downloadListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        downloadListener.onStartDownload();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setUpdateState(UpdateStateManager.STATE_DOWNLOADING);</span><br><span class=\"line\">    Map&lt;String, String&gt; params = OtaParamFactory.createDownloadFirmwareParam(mContext);</span><br><span class=\"line\">    otaServerApi.getDownloadUtl(params)</span><br><span class=\"line\">            .subscribeOn(Schedulers.io())</span><br><span class=\"line\">            .map(<span class=\"keyword\">new</span> Func1&lt;VersionDownloadUrl, String&gt;() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">call</span><span class=\"params\">(VersionDownloadUrl url)</span> </span>&#123;</span><br><span class=\"line\">                    mFirmwareManager.savePackageHash(url.getData().getHash());</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> url.getData().getUrl();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .flatMap(<span class=\"keyword\">new</span> Func1&lt;String, rx.Observable&lt;ResponseBody&gt;&gt;() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> rx.<span class=\"function\">Observable&lt;ResponseBody&gt; <span class=\"title\">call</span><span class=\"params\">(String url)</span> </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> qiniuServiceApi.downloadFirmware(url);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">              .subscribeOn(Schedulers.io())</span><br><span class=\"line\">              .unsubscribeOn(Schedulers.io())</span><br><span class=\"line\">              .map(<span class=\"keyword\">new</span> Func1&lt;ResponseBody, String&gt;() &#123;</span><br><span class=\"line\">                  <span class=\"meta\">@Override</span></span><br><span class=\"line\">                  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">call</span><span class=\"params\">(ResponseBody responseBody)</span> </span>&#123;</span><br><span class=\"line\">                      saveToDisk(responseBody, filePath);</span><br><span class=\"line\">                      <span class=\"keyword\">return</span> mPackagePath;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;)</span><br><span class=\"line\">              .observeOn(Schedulers.io())</span><br><span class=\"line\">              .map(<span class=\"keyword\">new</span> Func1&lt;String, Integer&gt;() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">call</span><span class=\"params\">(String path)</span> </span>&#123;</span><br><span class=\"line\">                    setUpdateState(UpdateStateManager.STATE_VERIFYING);</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> result = checkPackageHash();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(result != Util.OTAresult.CHECK_OK) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> checkUpdagePackage(path);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;)</span><br><span class=\"line\">              .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">              .subscribe(<span class=\"keyword\">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class=\"line\">                  <span class=\"meta\">@Override</span></span><br><span class=\"line\">                  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                      subscriber.onCompleted();</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                  <span class=\"meta\">@Override</span></span><br><span class=\"line\">                  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</span><br><span class=\"line\">                      setUpdateState(UpdateStateManager.STATE_FAIL);</span><br><span class=\"line\">                      subscriber.onError(e);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                  <span class=\"meta\">@Override</span></span><br><span class=\"line\">                  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(Integer result)</span> </span>&#123;</span><br><span class=\"line\">                      <span class=\"keyword\">if</span>(result == Util.OTAresult.CHECK_OK) &#123;</span><br><span class=\"line\">                          <span class=\"keyword\">if</span>(downloadListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                              downloadListener.onFinishDownload();</span><br><span class=\"line\">                          &#125;</span><br><span class=\"line\">                          setUpdateState(UpdateStateManager.STATE_READY);</span><br><span class=\"line\">                      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                          <span class=\"keyword\">if</span>(downloadListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                              downloadListener.onFail(<span class=\"string\">\"download fail code:\"</span> + result);</span><br><span class=\"line\">                          &#125;</span><br><span class=\"line\">                          setUpdateState(UpdateStateManager.STATE_FAIL);</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                      subscriber.onNext(result);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"比较Hash值\"><a href=\"#比较Hash值\" class=\"headerlink\" title=\"比较Hash值\"></a>比较Hash值</h4><p>Etag是七牛Android SDK提供的工具类，用来计算hash，之前我们在业务服务器要求七牛回传etag值，在这里比较两者是否相等。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private Integer checkPackageHash() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">String</span> tag = Etag.file(mPackagePath);</span><br><span class=\"line\">        <span class=\"built_in\">String</span> originTag = mFirmwareManager.getPackageHash();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tag != <span class=\"literal\">null</span> &amp;&amp; tag.equals(originTag)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Util.OTAresult.CHECK_OK;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Util.OTAresult.ERROR_OTA_FILE;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Util.OTAresult.ERROR_OTA_FILE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上所有的源代码都可以在<a href=\"https://github.com/yinlijun2004/android_ota_system\" target=\"_blank\" rel=\"noopener\">https://github.com/yinlijun2004/android_ota_system</a>中找到。</p>"},{"title":"《新喜剧之王》《疯狂的外星人》是烂片吗","date":"2019-03-24T08:57:23.000Z","_content":"\n今天下午在家连着看了两部电影《新喜剧之王》、《疯狂的外星人》，都非常好看，给五颗星。\n\n可惜这么好看的两部电影，并不被某些精英人士买账。在某瓣上，评分分别是\n<!--more-->\n![喜剧之王](xjzw/db_xjzw_score.jpg)\n![疯狂的外星人](xjzw/db_fkdwxr_score.png)\n\n某乎上网友的评价，一堆人在教周星驰导怎么选角，怎么导戏。还有一堆人在教宁浩导演怎么拍一部'好莱坞'式的科幻大片。\n\n周星驰的电影上映时都会低估，如同当年的《大话西游》、《功夫》、《西游降魔篇》，当时被人吐槽的最严重的电影，后来都成了经典。<b>周星驰的作品，往往是超前于电影上映的时代的。</b>《新喜剧之王》讲了一个全新的、关于自我的故事，正如如梦在电影里说\"只管做自己，不要管别人怎么讲\"。周导都改变了，你们还在指望看另一部《喜剧之王》？\n\n《疯狂的外星人》对霉国人极尽讽刺，让某些精英人士非常不爽，这是民族主义的自嗨？很明显不是，这是一个鄙视链的问题，中国人训练猴子，霉国人鄙视中国人，外星人不鸟霉国人，等到外星人成了猴子，就得靠我们的酒文化了，民族的不但是世界的，而且可以是宇宙的，这完全是宁导在实践习大大制度自信文化自信嘛。","source":"_posts/xjzw.md","raw":"---\ntitle: 《新喜剧之王》《疯狂的外星人》是烂片吗\ndate: 2019-03-24 16:57:23\ntags:\n---\n\n今天下午在家连着看了两部电影《新喜剧之王》、《疯狂的外星人》，都非常好看，给五颗星。\n\n可惜这么好看的两部电影，并不被某些精英人士买账。在某瓣上，评分分别是\n<!--more-->\n![喜剧之王](xjzw/db_xjzw_score.jpg)\n![疯狂的外星人](xjzw/db_fkdwxr_score.png)\n\n某乎上网友的评价，一堆人在教周星驰导怎么选角，怎么导戏。还有一堆人在教宁浩导演怎么拍一部'好莱坞'式的科幻大片。\n\n周星驰的电影上映时都会低估，如同当年的《大话西游》、《功夫》、《西游降魔篇》，当时被人吐槽的最严重的电影，后来都成了经典。<b>周星驰的作品，往往是超前于电影上映的时代的。</b>《新喜剧之王》讲了一个全新的、关于自我的故事，正如如梦在电影里说\"只管做自己，不要管别人怎么讲\"。周导都改变了，你们还在指望看另一部《喜剧之王》？\n\n《疯狂的外星人》对霉国人极尽讽刺，让某些精英人士非常不爽，这是民族主义的自嗨？很明显不是，这是一个鄙视链的问题，中国人训练猴子，霉国人鄙视中国人，外星人不鸟霉国人，等到外星人成了猴子，就得靠我们的酒文化了，民族的不但是世界的，而且可以是宇宙的，这完全是宁导在实践习大大制度自信文化自信嘛。","slug":"xjzw","published":1,"updated":"2019-04-03T08:58:47.790Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aankl007fbiuiieviza65","content":"<p>今天下午在家连着看了两部电影《新喜剧之王》、《疯狂的外星人》，都非常好看，给五颗星。</p>\n<p>可惜这么好看的两部电影，并不被某些精英人士买账。在某瓣上，评分分别是<br><a id=\"more\"></a><br><img src=\"/2019/03/24/xjzw/db_xjzw_score.jpg\" alt=\"喜剧之王\"><br><img src=\"/2019/03/24/xjzw/db_fkdwxr_score.png\" alt=\"疯狂的外星人\"></p>\n<p>某乎上网友的评价，一堆人在教周星驰导怎么选角，怎么导戏。还有一堆人在教宁浩导演怎么拍一部’好莱坞’式的科幻大片。</p>\n<p>周星驰的电影上映时都会低估，如同当年的《大话西游》、《功夫》、《西游降魔篇》，当时被人吐槽的最严重的电影，后来都成了经典。<b>周星驰的作品，往往是超前于电影上映的时代的。</b>《新喜剧之王》讲了一个全新的、关于自我的故事，正如如梦在电影里说”只管做自己，不要管别人怎么讲”。周导都改变了，你们还在指望看另一部《喜剧之王》？</p>\n<p>《疯狂的外星人》对霉国人极尽讽刺，让某些精英人士非常不爽，这是民族主义的自嗨？很明显不是，这是一个鄙视链的问题，中国人训练猴子，霉国人鄙视中国人，外星人不鸟霉国人，等到外星人成了猴子，就得靠我们的酒文化了，民族的不但是世界的，而且可以是宇宙的，这完全是宁导在实践习大大制度自信文化自信嘛。</p>\n","site":{"data":{}},"excerpt":"<p>今天下午在家连着看了两部电影《新喜剧之王》、《疯狂的外星人》，都非常好看，给五颗星。</p>\n<p>可惜这么好看的两部电影，并不被某些精英人士买账。在某瓣上，评分分别是<br></p>","more":"<br><img src=\"/2019/03/24/xjzw/db_xjzw_score.jpg\" alt=\"喜剧之王\"><br><img src=\"/2019/03/24/xjzw/db_fkdwxr_score.png\" alt=\"疯狂的外星人\"><p></p>\n<p>某乎上网友的评价，一堆人在教周星驰导怎么选角，怎么导戏。还有一堆人在教宁浩导演怎么拍一部’好莱坞’式的科幻大片。</p>\n<p>周星驰的电影上映时都会低估，如同当年的《大话西游》、《功夫》、《西游降魔篇》，当时被人吐槽的最严重的电影，后来都成了经典。<b>周星驰的作品，往往是超前于电影上映的时代的。</b>《新喜剧之王》讲了一个全新的、关于自我的故事，正如如梦在电影里说”只管做自己，不要管别人怎么讲”。周导都改变了，你们还在指望看另一部《喜剧之王》？</p>\n<p>《疯狂的外星人》对霉国人极尽讽刺，让某些精英人士非常不爽，这是民族主义的自嗨？很明显不是，这是一个鄙视链的问题，中国人训练猴子，霉国人鄙视中国人，外星人不鸟霉国人，等到外星人成了猴子，就得靠我们的酒文化了，民族的不但是世界的，而且可以是宇宙的，这完全是宁导在实践习大大制度自信文化自信嘛。</p>"},{"title":"https双向验证功能的实现","date":"2016-11-28T00:51:23.000Z","_content":"本文介绍一个简单echo服务器的实现，服务端用nodejs，客户端用android。\n\n## <font size='6em'>用openssl一系列证书</font>\n\n### <font size='5em'>生成自己的CA根证书</font>\n\n#### <font size='4em'>生成跟证书私钥ca.key</font>\n```\n$ openssl genrsa -des3 -out ca.key 1024\n```\n#### <font size='4em'>生成X.509证书签名请求文件ca.csr</font>\n在生成ca.csr的过程中，会让输入一些组织信息等。\n```\n$ openssl req -new -key ca.key -out ca.csr \n```\n<!-- more --> \n\n输出如下\n```\nEnter pass phrase for ca.key:\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:CN\nState or Province Name (full name) [Some-State]:GuangDong\nLocality Name (eg, city) []:ShenZhen\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:IBoxPay\nOrganizational Unit Name (eg, section) []:IBoxPay\nCommon Name (e.g. server FQDN or YOUR name) []:\nEmail Address []:admin@iboxpay.com\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []:\nAn optional company name []:\n```\n\n#### <font size='4em'>生成X.509格式的CA根证书ca.crt</font>\n```\n$ openssl x509 -req -days 365 -in ca.csr -out ca.crt -signkey ca.key\n```\n输出如下\n```\nSignature ok\nsubject=/C=CN/ST=GuangDong/L=ShenZhen/O=IBoxPay/OU=IBoxPay/emailAddress=admin@iboxpay.com\nGetting Private key\nEnter pass phrase for ca.key:\n```\n\n### <font size='5em'>生成服务端的证书</font>\n\n#### <font size='4em'>生成服务端私钥文件 server.key</font>\n```\n$ openssl genrsa -des3 -out server.key 1024\n```\n#### <font size='4em'>服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server.csr</font>\n这一步需要填写一个组织信息，不要跟根证书的组织的一样。另外Common Name填一个自己的域名（如果没有实际的域名也可以写，后面在/etc/hosts映射一个，我写的就是yinlijun.com），不要填localhost，android会报错。\n```\nopenssl req -new -key server.key -out server.csr\n```\n输出如下\n```\nEnter pass phrase for server.key:\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:CN\nState or Province Name (full name) [Some-State]:GuangDong\nLocality Name (eg, city) []:ShenZhen\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:yinlijun\nOrganizational Unit Name (eg, section) []:yinlijun\nCommon Name (e.g. server FQDN or YOUR name) []:yinlijun.com\nEmail Address []:admin@yinlijun.com\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []: \n```\n\n#### <font size='4em'>删除私钥的密码，这一步非常**重要**，一定要执行,否则会影响后面的步骤。</font>\n```\n$ cp server.key server.key.passphrase\n$ openssl rsa -in server.key.passphrase -out server.key\n```\n输出如下\n```\nEnter pass phrase for server.key.passphrase:\nwriting RSA key\n```\n#### <font size='4em'>签发服务器证书server.crt：</font>\n```\nopenssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt\n```\n输出如下：\n```\nSignature ok\nsubject=/C=CN/ST=GuangDong/L=ShenZhen/O=yinlijun/OU=yinlijun/CN=yinlijun.com/emailAddress=admin@yinlijun.com\nGetting Private key\n```\n到现在为止，你目录下的文件应该有：\n```\nls -la\ntotal 36\ndrwxr-xr-x  2 user user 4096 Sep  5 16:19 .\ndrwxr-xr-x 12 user user 4096 Sep  5 16:09 ..\n-rw-r--r--  1 user user  757 Sep  5 16:12 ca.crt\n-rw-r--r--  1 user user  603 Sep  5 16:10 ca.csr\n-rw-r--r--  1 user user  963 Sep  5 16:09 ca.key\n-rw-r--r--  1 user user  757 Sep  5 16:19 server.crt\n-rw-r--r--  1 user user  603 Sep  5 16:16 server.csr\n-rw-r--r--  1 user user  887 Sep  5 16:18 server.key\n-rw-r--r--  1 user user  951 Sep  5 16:17 server.key.passphrase\n```\n\n#### 生成之后察看服务器证书信息。\n```\nopenssl x509 -in server.crt -text -noout\n```\n\n#### 生成服务器的pfx文件，这个文件node服务器要用到。\n```\nopenssl pkcs12 -export -in server.crt -inkey server.key -certfile ca.crt -out server.pfx\n```\n输出如下\n```\nEnter Export Password:\nVerifying - Enter Export Password:\n```\n#### 生成服务端的p12文件。，这个是为了生成服务端bks文件用的\n```\nopenssl pkcs12 -export -clcerts -in server.crt -inkey server.key -out server.p12\n```\n### 下载一个bcprov-jdk16-141.jar，也是为了生成服务端bks文件要用到的。\n```\n下载地址：[http://www.java2s.com/Code/JarDownload/bcprov/bcprov-jdk16-141.jar.zip](http://www.java2s.com/Code/JarDownload/bcprov/bcprov-jdk16-141.jar.zip)\n```\n### 生成服务端的bks文件，这个android程序要用到\n```\nkeytool -importkeystore -srckeystore server.p12 -srcstoretype pkcs12 -destkeystore server.bks -deststoretype bks -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath bcprov-jdk16-141.jar\n```\n输出如下\n```\n输入目标密钥库口令:  \n再次输入新密码: \n输入源密钥库口令:  \n已成功导入别名 1 项。\n已完成导入命令: 1 项成功导入，0 项失败或取消\n```\n因为要进行双向验证，还需要生成客户端证书。\n#### 生成客户端密钥\n```\nopenssl genrsa -des3 -out client.key 1024\n```\n#### 生成客户端证书请求签名文件\n```\nopenssl req -new -out client.csr -key client.key\n```\n输出如下\n```\nEnter pass phrase for client.key:\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:CN\nState or Province Name (full name) [Some-State]:GuangDong \nLocality Name (eg, city) []:ShenZhen\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:ruochen\nOrganizational Unit Name (eg, section) []:ruochen\nCommon Name (e.g. server FQDN or YOUR name) []:\nEmail Address []:admin@ruochen.com\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []:\nAn optional company name []:\n```\n\n#### 创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。\n```\nopenssl x509 -req -in client.csr -out client.cert -signkey client.key -CA ca.crt -CAkey ca.key -CAcreateserial -days 3650\n```\n输入如下\n```\nSignature ok\nsubject=/C=CN/ST=GuangDong/L=ShenZhen/O=ruochen/OU=ruochen/emailAddress=admin@ruochen.com\nGetting Private key\nEnter pass phrase for client.key:\nGetting CA Private Key\nEnter pass phrase for ca.key:\nyinlijun@yinlijun:~/personal_github/echo-https-server/keys$ ls\nca.crt  ca.csr  ca.key  ca.srl  client.cert  client.csr  client.key  server.crt  server.csr  server.key  server.key.passphrase  server.pfx\nyinlijun@yinlijun:~/personal_github/echo-https-server/keys$ openssl pkcs12 -export -clcerts -in client.cert -inkey client.key -out client.p12\nEnter pass phrase for client.key:\nEnter Export Password:\nVerifying - Enter Export Password:\n```\n\n#### 生成浏览器支持的p12文件\n```\nopenssl pkcs12 -export -clcerts -in client.cert -inkey client.key -out client.p12\n```\n#### 将客户端证书文件client.crt和客户端证书密钥文件client.key合并成客户端证书安装包client.pfx\n```\nopenssl pkcs12 -export -in client.crt -inkey client.key -out client.pfx\n```\n\n以上的文件我只用到了一部分，应该有替代关系，具体我也搞不清楚:)。 不同的实现方式有用到不同的文件。\n我的android客户端用到了\n- server.bks\n- client.p12\n\n看了网上的一些例子，好像server.bks可以用server.crt替代。\n\nnode用到了\n- server.pfx\n\n察看node的文档，server.pfx可以用server.crt和server.key替代。\n\n\n## 服务端（nodejs）的代码\n```javascript\nvar https =require('https'), fs = require('fs');\n\nvar options = {\n    key: fs.readFileSync('./keys/server.key'),\n    cert: fs.readFileSync('./keys/server.crt'),\n};\n\nvar app = express();\nvar server = https.createServer(options, app);\nserver.listen(443, function() {\n    console.log('Https server listening on port ' + 443);\n});\n```\n\n## android应用自有证书的验证方式\n将服务端证书拷贝到app资源目录下，一般是<project_dir>/assets/server.crt\n\n### 方法一：直接根据server.crt初始化TrustManagerFactory\n```java\n    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n    InputStream caInput = new BufferedInputStream(getAssets().open(\"server.crt\"));\n    final Certificate ca;\n    try {\n        ca = cf.generateCertificate(caInput);\n        Log.i(TAG, \"ca=\" + ((X509Certificate) ca).getSubjectDN());\n        Log.i(TAG, \"key=\" + ((X509Certificate) ca).getPublicKey());\n    } finally {\n        caInput.close();\n    }\n\n    String keyStoreType = KeyStore.getDefaultType();\n    Log.d(TAG, \"keystore type:\" + keyStoreType);\n    KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n    keyStore.load(null, null);\n    keyStore.setCertificateEntry(\"cert\", ca);\n\n    String tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();\n    Log.d(TAG, \"tmfAlgorithm:\" + tmfAlgorithm);\n    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(tmfAlgorithm);\n    trustManagerFactory.init(keyStore);\n\n    mSSLContext = SSLContext.getInstance(\"TLS\");\n    mSSLContext.init(null, trustManagerFactory.getTrustManagers(), null);\n\n    URL url = new URL(\"https://yinlijun.com\");\n    HttpsURLConnection urlConnection =\n            (HttpsURLConnection)url.openConnection();\n    urlConnection.setSSLSocketFactory(mSSLContext.getSocketFactory());\n    InputStream in = urlConnection.getInputStream();\n    copyInputStreamToOutputStream(in, System.out);\n} catch (CertificateException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n} catch (NoSuchAlgorithmException e) {\n    e.printStackTrace();\n} catch (KeyManagementException e) {\n    e.printStackTrace();\n} catch (KeyStoreException e) {\n    e.printStackTrace();\n}\n```\ncopyInputStreamToOutputStream方法如下：\n\n```java\n    private void copyInputStreamToOutputStream(InputStream in, PrintStream out) throws IOException {\n        byte[] buffer = new byte[1024];\n        int c = 0;\n        while ((c = in.read(buffer)) != -1) {\n            out.write(buffer, 0, c);\n        }\n    }\n```\n\n### 方法二 \n\n```java\n    try {\n        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n        InputStream caInput = new BufferedInputStream(getAssets().open(\"server.crt\"));\n        final Certificate ca;\n        try {\n            ca = cf.generateCertificate(caInput);\n            Log.i(\"Longer\", \"ca=\" + ((X509Certificate) ca).getSubjectDN());\n            Log.i(\"Longer\", \"key=\" + ((X509Certificate) ca).getPublicKey());\n        } finally {\n            caInput.close();\n        }\n\n        // Create an SSLContext that uses our TrustManager\n        SSLContext context = SSLContext.getInstance(\"TLSv1\",\"AndroidOpenSSL\");\n        context.init(null, new TrustManager[]{\n                new X509TrustManager() {\n                    @Override\n                    public void checkClientTrusted(X509Certificate[] chain,\n                                                    String authType)\n                            throws CertificateException {\n\n                    }\n\n                    @Override\n                    public void checkServerTrusted(X509Certificate[] chain,\n                                                    String authType)\n                            throws CertificateException {\n                        for (X509Certificate cert : chain) {\n\n                            // Make sure that it hasn't expired.\n                            cert.checkValidity();\n\n                            // Verify the certificate's public key chain.\n                            try {\n                                cert.verify(((X509Certificate) ca).getPublicKey());\n                            } catch (NoSuchAlgorithmException e) {\n                                e.printStackTrace();\n                            } catch (InvalidKeyException e) {\n                                e.printStackTrace();\n                            } catch (NoSuchProviderException e) {\n                                e.printStackTrace();\n                            } catch (SignatureException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                    }\n\n                    @Override\n                    public X509Certificate[] getAcceptedIssuers() {\n                        return new X509Certificate[0];\n                    }\n                }\n        }, null);\n\n        URL url = new URL(\"https://yinlijun.com/\");\n        HttpsURLConnection urlConnection =\n                (HttpsURLConnection)url.openConnection();\n        urlConnection.setSSLSocketFactory(context.getSocketFactory());\n        InputStream in = urlConnection.getInputStream();\n        copyInputStreamToOutputStream(in, System.out);\n```\n\n\n## 双向认证\n单向验证只能验证服务器，如果服务器也想对客户端进行验证，即所谓（双向验证），需要在连接是一起发送客户端证书。\n\n### 双向认证，服务器代码\n```javascript\nconst tls = require('tls');\nconst fs = require('fs');\n\nconst options = {\n  pfx: fs.readFileSync('./server.pfx'),\n  passphrase: \"123456\",\n  // This is necessary only if using the client certificate authentication.\n  requestCert: true,\n  rejectUnauthorized: true //如果接受也非认证链接，可以删除此行。\n};\n//需要双向认证才需要配置requestCert为true。\nconst server = tls.createServer(options, (socket) => {\n  console.log('server connected',\n              socket.authorized ? 'authorized' : 'unauthorized');\n  socket.setEncoding('utf8');\n  socket.on('data', (data) => {\n      console.log(data);\n      socket.write(data);\n  });\n  socket.on('end', (socket) => {\n    console.log(\"socket closed\");\n  });\n});\nserver.listen(8000, () => {\n  console.log('server bound');\n});\n\n```\n### 双向认证，android的代码，实现方式一\n\nserver.pfx和client.p12放到<project_dir>/assets/目录下\n```java\n    try {\n        KeyStore trustStore = KeyStore.getInstance(\"bks\");\n        InputStream tsIn = getResources().getAssets().open(\"server.bks\");\n\n        KeyStore keyStore = KeyStore.getInstance(\"PKCS12\");\n        InputStream ksIn = getResources().getAssets().open(\"client.p12\");\n\n        try {\n            keyStore.load(ksIn, \"123456\".toCharArray());\n            trustStore.load(tsIn, \"123456\".toCharArray());\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                ksIn.close();\n            } catch (Exception ignore) {\n            }\n            try {\n                tsIn.close();\n            } catch (Exception ignore) {\n            }\n        }\n        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(\"X509\");\n        keyManagerFactory.init(keyStore, \"123456\".toCharArray());\n        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n        trustManagerFactory.init(trustStore);\n        mSSLContext = SSLContext.getInstance(\"TLS\");\n        mSSLContext.init(null, trustManagerFactory.getTrustManagers(), null);\n\n        mSSLSocket = (SSLSocket) mSSLContext.getSocketFactory().createSocket(\"yinlijun.com\", 8000);\n        mSSLSocket.startHandshake();\n        //...\n    } catch (IOException e) {\n        e.printStackTrace();\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (KeyManagementException e) {\n        e.printStackTrace();\n    } catch (KeyStoreException e) {\n        e.printStackTrace();\n    } catch (UnrecoverableKeyException e) {\n        e.printStackTrace();\n    }\n\n```\n\n### 双向认证，android的代码，实现方式2，用server.crt替代server.bks\n\nserver.crt和client.p12放到<project_dir>/assets/目录下\n\n```java\n    try {\n        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n        InputStream caInput = new BufferedInputStream(getAssets().open(\"server.crt\"));\n        final Certificate ca;\n        try {\n            ca = cf.generateCertificate(caInput);\n            Log.i(\"Longer\", \"ca=\" + ((X509Certificate) ca).getSubjectDN());\n            Log.i(\"Longer\", \"key=\" + ((X509Certificate) ca).getPublicKey());\n        } finally {\n            caInput.close();\n        }\n\n        KeyStore keyStore = KeyStore.getInstance(\"PKCS12\");\n        InputStream ksIn = getResources().getAssets().open(\"client.p12\");\n\n        try {\n            keyStore.load(ksIn, \"123456\".toCharArray());\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                ksIn.close();\n            } catch (Exception ignore) {\n            }\n        }\n        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(\"X509\");\n        keyManagerFactory.init(keyStore, \"123456\".toCharArray());\n\n        // Create an SSLContext that uses our TrustManager\n        SSLContext context = SSLContext.getInstance(\"TLSv1\",\"AndroidOpenSSL\");\n        context.init(keyManagerFactory.getKeyManagers(), new TrustManager[]{\n                new X509TrustManager() {\n                    @Override\n                    public void checkClientTrusted(X509Certificate[] chain,\n                                                    String authType)\n                            throws CertificateException {\n\n                    }\n\n                    @Override\n                    public void checkServerTrusted(X509Certificate[] chain,\n                                                    String authType)\n                            throws CertificateException {\n                        for (X509Certificate cert : chain) {\n\n                            // Make sure that it hasn't expired.\n                            cert.checkValidity();\n\n                            // Verify the certificate's public key chain.\n                            try {\n                                cert.verify(((X509Certificate) ca).getPublicKey());\n                            } catch (NoSuchAlgorithmException e) {\n                                e.printStackTrace();\n                            } catch (InvalidKeyException e) {\n                                e.printStackTrace();\n                            } catch (NoSuchProviderException e) {\n                                e.printStackTrace();\n                            } catch (SignatureException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                    }\n\n                    @Override\n                    public X509Certificate[] getAcceptedIssuers() {\n                        return new X509Certificate[0];\n                    }\n                }\n        }, null);\n        //...\n```\n\n项目地址：\n\n## 参考文档\n- [How to generate self-signed certificate for usage in Express4 or Node.js HTTP](https://matoski.com/article/node-express-generate-ssl/)\n- [SSL证书生成方法](http://blog.csdn.net/fyang2007/article/details/6180361)\n- [Android安全开发之安全使用HTTPS](https://zhuanlan.zhihu.com/p/22816331)\n- [通过 HTTPS 和 SSL 确保安全](https://developer.android.com/training/articles/security-ssl.html#nogotofail) (要翻墙)\n- [https://nodejs.org/api/tls.html](https://nodejs.org/api/tls.html)\n- [https://gist.github.com/Frank-Zhu/41e21a00df26d63cd38d](https://gist.github.com/Frank-Zhu/41e21a00df26d63cd38d)\n","source":"_posts/android-https-verify-ways.md","raw":"---\ntitle: https双向验证功能的实现\ndate: 2016-11-28 08:51:23\ntags: [android, nodejs, https, openssl]\n---\n本文介绍一个简单echo服务器的实现，服务端用nodejs，客户端用android。\n\n## <font size='6em'>用openssl一系列证书</font>\n\n### <font size='5em'>生成自己的CA根证书</font>\n\n#### <font size='4em'>生成跟证书私钥ca.key</font>\n```\n$ openssl genrsa -des3 -out ca.key 1024\n```\n#### <font size='4em'>生成X.509证书签名请求文件ca.csr</font>\n在生成ca.csr的过程中，会让输入一些组织信息等。\n```\n$ openssl req -new -key ca.key -out ca.csr \n```\n<!-- more --> \n\n输出如下\n```\nEnter pass phrase for ca.key:\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:CN\nState or Province Name (full name) [Some-State]:GuangDong\nLocality Name (eg, city) []:ShenZhen\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:IBoxPay\nOrganizational Unit Name (eg, section) []:IBoxPay\nCommon Name (e.g. server FQDN or YOUR name) []:\nEmail Address []:admin@iboxpay.com\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []:\nAn optional company name []:\n```\n\n#### <font size='4em'>生成X.509格式的CA根证书ca.crt</font>\n```\n$ openssl x509 -req -days 365 -in ca.csr -out ca.crt -signkey ca.key\n```\n输出如下\n```\nSignature ok\nsubject=/C=CN/ST=GuangDong/L=ShenZhen/O=IBoxPay/OU=IBoxPay/emailAddress=admin@iboxpay.com\nGetting Private key\nEnter pass phrase for ca.key:\n```\n\n### <font size='5em'>生成服务端的证书</font>\n\n#### <font size='4em'>生成服务端私钥文件 server.key</font>\n```\n$ openssl genrsa -des3 -out server.key 1024\n```\n#### <font size='4em'>服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server.csr</font>\n这一步需要填写一个组织信息，不要跟根证书的组织的一样。另外Common Name填一个自己的域名（如果没有实际的域名也可以写，后面在/etc/hosts映射一个，我写的就是yinlijun.com），不要填localhost，android会报错。\n```\nopenssl req -new -key server.key -out server.csr\n```\n输出如下\n```\nEnter pass phrase for server.key:\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:CN\nState or Province Name (full name) [Some-State]:GuangDong\nLocality Name (eg, city) []:ShenZhen\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:yinlijun\nOrganizational Unit Name (eg, section) []:yinlijun\nCommon Name (e.g. server FQDN or YOUR name) []:yinlijun.com\nEmail Address []:admin@yinlijun.com\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []: \n```\n\n#### <font size='4em'>删除私钥的密码，这一步非常**重要**，一定要执行,否则会影响后面的步骤。</font>\n```\n$ cp server.key server.key.passphrase\n$ openssl rsa -in server.key.passphrase -out server.key\n```\n输出如下\n```\nEnter pass phrase for server.key.passphrase:\nwriting RSA key\n```\n#### <font size='4em'>签发服务器证书server.crt：</font>\n```\nopenssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt\n```\n输出如下：\n```\nSignature ok\nsubject=/C=CN/ST=GuangDong/L=ShenZhen/O=yinlijun/OU=yinlijun/CN=yinlijun.com/emailAddress=admin@yinlijun.com\nGetting Private key\n```\n到现在为止，你目录下的文件应该有：\n```\nls -la\ntotal 36\ndrwxr-xr-x  2 user user 4096 Sep  5 16:19 .\ndrwxr-xr-x 12 user user 4096 Sep  5 16:09 ..\n-rw-r--r--  1 user user  757 Sep  5 16:12 ca.crt\n-rw-r--r--  1 user user  603 Sep  5 16:10 ca.csr\n-rw-r--r--  1 user user  963 Sep  5 16:09 ca.key\n-rw-r--r--  1 user user  757 Sep  5 16:19 server.crt\n-rw-r--r--  1 user user  603 Sep  5 16:16 server.csr\n-rw-r--r--  1 user user  887 Sep  5 16:18 server.key\n-rw-r--r--  1 user user  951 Sep  5 16:17 server.key.passphrase\n```\n\n#### 生成之后察看服务器证书信息。\n```\nopenssl x509 -in server.crt -text -noout\n```\n\n#### 生成服务器的pfx文件，这个文件node服务器要用到。\n```\nopenssl pkcs12 -export -in server.crt -inkey server.key -certfile ca.crt -out server.pfx\n```\n输出如下\n```\nEnter Export Password:\nVerifying - Enter Export Password:\n```\n#### 生成服务端的p12文件。，这个是为了生成服务端bks文件用的\n```\nopenssl pkcs12 -export -clcerts -in server.crt -inkey server.key -out server.p12\n```\n### 下载一个bcprov-jdk16-141.jar，也是为了生成服务端bks文件要用到的。\n```\n下载地址：[http://www.java2s.com/Code/JarDownload/bcprov/bcprov-jdk16-141.jar.zip](http://www.java2s.com/Code/JarDownload/bcprov/bcprov-jdk16-141.jar.zip)\n```\n### 生成服务端的bks文件，这个android程序要用到\n```\nkeytool -importkeystore -srckeystore server.p12 -srcstoretype pkcs12 -destkeystore server.bks -deststoretype bks -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath bcprov-jdk16-141.jar\n```\n输出如下\n```\n输入目标密钥库口令:  \n再次输入新密码: \n输入源密钥库口令:  \n已成功导入别名 1 项。\n已完成导入命令: 1 项成功导入，0 项失败或取消\n```\n因为要进行双向验证，还需要生成客户端证书。\n#### 生成客户端密钥\n```\nopenssl genrsa -des3 -out client.key 1024\n```\n#### 生成客户端证书请求签名文件\n```\nopenssl req -new -out client.csr -key client.key\n```\n输出如下\n```\nEnter pass phrase for client.key:\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:CN\nState or Province Name (full name) [Some-State]:GuangDong \nLocality Name (eg, city) []:ShenZhen\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:ruochen\nOrganizational Unit Name (eg, section) []:ruochen\nCommon Name (e.g. server FQDN or YOUR name) []:\nEmail Address []:admin@ruochen.com\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []:\nAn optional company name []:\n```\n\n#### 创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。\n```\nopenssl x509 -req -in client.csr -out client.cert -signkey client.key -CA ca.crt -CAkey ca.key -CAcreateserial -days 3650\n```\n输入如下\n```\nSignature ok\nsubject=/C=CN/ST=GuangDong/L=ShenZhen/O=ruochen/OU=ruochen/emailAddress=admin@ruochen.com\nGetting Private key\nEnter pass phrase for client.key:\nGetting CA Private Key\nEnter pass phrase for ca.key:\nyinlijun@yinlijun:~/personal_github/echo-https-server/keys$ ls\nca.crt  ca.csr  ca.key  ca.srl  client.cert  client.csr  client.key  server.crt  server.csr  server.key  server.key.passphrase  server.pfx\nyinlijun@yinlijun:~/personal_github/echo-https-server/keys$ openssl pkcs12 -export -clcerts -in client.cert -inkey client.key -out client.p12\nEnter pass phrase for client.key:\nEnter Export Password:\nVerifying - Enter Export Password:\n```\n\n#### 生成浏览器支持的p12文件\n```\nopenssl pkcs12 -export -clcerts -in client.cert -inkey client.key -out client.p12\n```\n#### 将客户端证书文件client.crt和客户端证书密钥文件client.key合并成客户端证书安装包client.pfx\n```\nopenssl pkcs12 -export -in client.crt -inkey client.key -out client.pfx\n```\n\n以上的文件我只用到了一部分，应该有替代关系，具体我也搞不清楚:)。 不同的实现方式有用到不同的文件。\n我的android客户端用到了\n- server.bks\n- client.p12\n\n看了网上的一些例子，好像server.bks可以用server.crt替代。\n\nnode用到了\n- server.pfx\n\n察看node的文档，server.pfx可以用server.crt和server.key替代。\n\n\n## 服务端（nodejs）的代码\n```javascript\nvar https =require('https'), fs = require('fs');\n\nvar options = {\n    key: fs.readFileSync('./keys/server.key'),\n    cert: fs.readFileSync('./keys/server.crt'),\n};\n\nvar app = express();\nvar server = https.createServer(options, app);\nserver.listen(443, function() {\n    console.log('Https server listening on port ' + 443);\n});\n```\n\n## android应用自有证书的验证方式\n将服务端证书拷贝到app资源目录下，一般是<project_dir>/assets/server.crt\n\n### 方法一：直接根据server.crt初始化TrustManagerFactory\n```java\n    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n    InputStream caInput = new BufferedInputStream(getAssets().open(\"server.crt\"));\n    final Certificate ca;\n    try {\n        ca = cf.generateCertificate(caInput);\n        Log.i(TAG, \"ca=\" + ((X509Certificate) ca).getSubjectDN());\n        Log.i(TAG, \"key=\" + ((X509Certificate) ca).getPublicKey());\n    } finally {\n        caInput.close();\n    }\n\n    String keyStoreType = KeyStore.getDefaultType();\n    Log.d(TAG, \"keystore type:\" + keyStoreType);\n    KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n    keyStore.load(null, null);\n    keyStore.setCertificateEntry(\"cert\", ca);\n\n    String tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();\n    Log.d(TAG, \"tmfAlgorithm:\" + tmfAlgorithm);\n    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(tmfAlgorithm);\n    trustManagerFactory.init(keyStore);\n\n    mSSLContext = SSLContext.getInstance(\"TLS\");\n    mSSLContext.init(null, trustManagerFactory.getTrustManagers(), null);\n\n    URL url = new URL(\"https://yinlijun.com\");\n    HttpsURLConnection urlConnection =\n            (HttpsURLConnection)url.openConnection();\n    urlConnection.setSSLSocketFactory(mSSLContext.getSocketFactory());\n    InputStream in = urlConnection.getInputStream();\n    copyInputStreamToOutputStream(in, System.out);\n} catch (CertificateException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n} catch (NoSuchAlgorithmException e) {\n    e.printStackTrace();\n} catch (KeyManagementException e) {\n    e.printStackTrace();\n} catch (KeyStoreException e) {\n    e.printStackTrace();\n}\n```\ncopyInputStreamToOutputStream方法如下：\n\n```java\n    private void copyInputStreamToOutputStream(InputStream in, PrintStream out) throws IOException {\n        byte[] buffer = new byte[1024];\n        int c = 0;\n        while ((c = in.read(buffer)) != -1) {\n            out.write(buffer, 0, c);\n        }\n    }\n```\n\n### 方法二 \n\n```java\n    try {\n        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n        InputStream caInput = new BufferedInputStream(getAssets().open(\"server.crt\"));\n        final Certificate ca;\n        try {\n            ca = cf.generateCertificate(caInput);\n            Log.i(\"Longer\", \"ca=\" + ((X509Certificate) ca).getSubjectDN());\n            Log.i(\"Longer\", \"key=\" + ((X509Certificate) ca).getPublicKey());\n        } finally {\n            caInput.close();\n        }\n\n        // Create an SSLContext that uses our TrustManager\n        SSLContext context = SSLContext.getInstance(\"TLSv1\",\"AndroidOpenSSL\");\n        context.init(null, new TrustManager[]{\n                new X509TrustManager() {\n                    @Override\n                    public void checkClientTrusted(X509Certificate[] chain,\n                                                    String authType)\n                            throws CertificateException {\n\n                    }\n\n                    @Override\n                    public void checkServerTrusted(X509Certificate[] chain,\n                                                    String authType)\n                            throws CertificateException {\n                        for (X509Certificate cert : chain) {\n\n                            // Make sure that it hasn't expired.\n                            cert.checkValidity();\n\n                            // Verify the certificate's public key chain.\n                            try {\n                                cert.verify(((X509Certificate) ca).getPublicKey());\n                            } catch (NoSuchAlgorithmException e) {\n                                e.printStackTrace();\n                            } catch (InvalidKeyException e) {\n                                e.printStackTrace();\n                            } catch (NoSuchProviderException e) {\n                                e.printStackTrace();\n                            } catch (SignatureException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                    }\n\n                    @Override\n                    public X509Certificate[] getAcceptedIssuers() {\n                        return new X509Certificate[0];\n                    }\n                }\n        }, null);\n\n        URL url = new URL(\"https://yinlijun.com/\");\n        HttpsURLConnection urlConnection =\n                (HttpsURLConnection)url.openConnection();\n        urlConnection.setSSLSocketFactory(context.getSocketFactory());\n        InputStream in = urlConnection.getInputStream();\n        copyInputStreamToOutputStream(in, System.out);\n```\n\n\n## 双向认证\n单向验证只能验证服务器，如果服务器也想对客户端进行验证，即所谓（双向验证），需要在连接是一起发送客户端证书。\n\n### 双向认证，服务器代码\n```javascript\nconst tls = require('tls');\nconst fs = require('fs');\n\nconst options = {\n  pfx: fs.readFileSync('./server.pfx'),\n  passphrase: \"123456\",\n  // This is necessary only if using the client certificate authentication.\n  requestCert: true,\n  rejectUnauthorized: true //如果接受也非认证链接，可以删除此行。\n};\n//需要双向认证才需要配置requestCert为true。\nconst server = tls.createServer(options, (socket) => {\n  console.log('server connected',\n              socket.authorized ? 'authorized' : 'unauthorized');\n  socket.setEncoding('utf8');\n  socket.on('data', (data) => {\n      console.log(data);\n      socket.write(data);\n  });\n  socket.on('end', (socket) => {\n    console.log(\"socket closed\");\n  });\n});\nserver.listen(8000, () => {\n  console.log('server bound');\n});\n\n```\n### 双向认证，android的代码，实现方式一\n\nserver.pfx和client.p12放到<project_dir>/assets/目录下\n```java\n    try {\n        KeyStore trustStore = KeyStore.getInstance(\"bks\");\n        InputStream tsIn = getResources().getAssets().open(\"server.bks\");\n\n        KeyStore keyStore = KeyStore.getInstance(\"PKCS12\");\n        InputStream ksIn = getResources().getAssets().open(\"client.p12\");\n\n        try {\n            keyStore.load(ksIn, \"123456\".toCharArray());\n            trustStore.load(tsIn, \"123456\".toCharArray());\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                ksIn.close();\n            } catch (Exception ignore) {\n            }\n            try {\n                tsIn.close();\n            } catch (Exception ignore) {\n            }\n        }\n        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(\"X509\");\n        keyManagerFactory.init(keyStore, \"123456\".toCharArray());\n        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n        trustManagerFactory.init(trustStore);\n        mSSLContext = SSLContext.getInstance(\"TLS\");\n        mSSLContext.init(null, trustManagerFactory.getTrustManagers(), null);\n\n        mSSLSocket = (SSLSocket) mSSLContext.getSocketFactory().createSocket(\"yinlijun.com\", 8000);\n        mSSLSocket.startHandshake();\n        //...\n    } catch (IOException e) {\n        e.printStackTrace();\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (KeyManagementException e) {\n        e.printStackTrace();\n    } catch (KeyStoreException e) {\n        e.printStackTrace();\n    } catch (UnrecoverableKeyException e) {\n        e.printStackTrace();\n    }\n\n```\n\n### 双向认证，android的代码，实现方式2，用server.crt替代server.bks\n\nserver.crt和client.p12放到<project_dir>/assets/目录下\n\n```java\n    try {\n        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n        InputStream caInput = new BufferedInputStream(getAssets().open(\"server.crt\"));\n        final Certificate ca;\n        try {\n            ca = cf.generateCertificate(caInput);\n            Log.i(\"Longer\", \"ca=\" + ((X509Certificate) ca).getSubjectDN());\n            Log.i(\"Longer\", \"key=\" + ((X509Certificate) ca).getPublicKey());\n        } finally {\n            caInput.close();\n        }\n\n        KeyStore keyStore = KeyStore.getInstance(\"PKCS12\");\n        InputStream ksIn = getResources().getAssets().open(\"client.p12\");\n\n        try {\n            keyStore.load(ksIn, \"123456\".toCharArray());\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                ksIn.close();\n            } catch (Exception ignore) {\n            }\n        }\n        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(\"X509\");\n        keyManagerFactory.init(keyStore, \"123456\".toCharArray());\n\n        // Create an SSLContext that uses our TrustManager\n        SSLContext context = SSLContext.getInstance(\"TLSv1\",\"AndroidOpenSSL\");\n        context.init(keyManagerFactory.getKeyManagers(), new TrustManager[]{\n                new X509TrustManager() {\n                    @Override\n                    public void checkClientTrusted(X509Certificate[] chain,\n                                                    String authType)\n                            throws CertificateException {\n\n                    }\n\n                    @Override\n                    public void checkServerTrusted(X509Certificate[] chain,\n                                                    String authType)\n                            throws CertificateException {\n                        for (X509Certificate cert : chain) {\n\n                            // Make sure that it hasn't expired.\n                            cert.checkValidity();\n\n                            // Verify the certificate's public key chain.\n                            try {\n                                cert.verify(((X509Certificate) ca).getPublicKey());\n                            } catch (NoSuchAlgorithmException e) {\n                                e.printStackTrace();\n                            } catch (InvalidKeyException e) {\n                                e.printStackTrace();\n                            } catch (NoSuchProviderException e) {\n                                e.printStackTrace();\n                            } catch (SignatureException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                    }\n\n                    @Override\n                    public X509Certificate[] getAcceptedIssuers() {\n                        return new X509Certificate[0];\n                    }\n                }\n        }, null);\n        //...\n```\n\n项目地址：\n\n## 参考文档\n- [How to generate self-signed certificate for usage in Express4 or Node.js HTTP](https://matoski.com/article/node-express-generate-ssl/)\n- [SSL证书生成方法](http://blog.csdn.net/fyang2007/article/details/6180361)\n- [Android安全开发之安全使用HTTPS](https://zhuanlan.zhihu.com/p/22816331)\n- [通过 HTTPS 和 SSL 确保安全](https://developer.android.com/training/articles/security-ssl.html#nogotofail) (要翻墙)\n- [https://nodejs.org/api/tls.html](https://nodejs.org/api/tls.html)\n- [https://gist.github.com/Frank-Zhu/41e21a00df26d63cd38d](https://gist.github.com/Frank-Zhu/41e21a00df26d63cd38d)\n","slug":"android-https-verify-ways","published":1,"updated":"2019-01-03T02:48:56.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz4aanlr007rbiuiv3bkcuj8","content":"<p>本文介绍一个简单echo服务器的实现，服务端用nodejs，客户端用android。</p>\n<h2 id=\"用openssl一系列证书\"><a href=\"#用openssl一系列证书\" class=\"headerlink\" title=\"用openssl一系列证书\"></a><font size=\"6em\">用openssl一系列证书</font></h2><h3 id=\"生成自己的CA根证书\"><a href=\"#生成自己的CA根证书\" class=\"headerlink\" title=\"生成自己的CA根证书\"></a><font size=\"5em\">生成自己的CA根证书</font></h3><h4 id=\"生成跟证书私钥ca-key\"><a href=\"#生成跟证书私钥ca-key\" class=\"headerlink\" title=\"生成跟证书私钥ca.key\"></a><font size=\"4em\">生成跟证书私钥ca.key</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ openssl genrsa -des3 -out ca.key 1024</span><br></pre></td></tr></table></figure>\n<h4 id=\"生成X-509证书签名请求文件ca-csr\"><a href=\"#生成X-509证书签名请求文件ca-csr\" class=\"headerlink\" title=\"生成X.509证书签名请求文件ca.csr\"></a><font size=\"4em\">生成X.509证书签名请求文件ca.csr</font></h4><p>在生成ca.csr的过程中，会让输入一些组织信息等。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ openssl req -new -key ca.key -out ca.csr</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a> \n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter pass phrase for ca.key:</span><br><span class=\"line\">You are about to be asked to enter information that will be incorporated</span><br><span class=\"line\">into your certificate request.</span><br><span class=\"line\">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class=\"line\">There are quite a few fields but you can leave some blank</span><br><span class=\"line\">For some fields there will be a default value,</span><br><span class=\"line\">If you enter &apos;.&apos;, the field will be left blank.</span><br><span class=\"line\">-----</span><br><span class=\"line\">Country Name (2 letter code) [AU]:CN</span><br><span class=\"line\">State or Province Name (full name) [Some-State]:GuangDong</span><br><span class=\"line\">Locality Name (eg, city) []:ShenZhen</span><br><span class=\"line\">Organization Name (eg, company) [Internet Widgits Pty Ltd]:IBoxPay</span><br><span class=\"line\">Organizational Unit Name (eg, section) []:IBoxPay</span><br><span class=\"line\">Common Name (e.g. server FQDN or YOUR name) []:</span><br><span class=\"line\">Email Address []:admin@iboxpay.com</span><br><span class=\"line\"></span><br><span class=\"line\">Please enter the following &apos;extra&apos; attributes</span><br><span class=\"line\">to be sent with your certificate request</span><br><span class=\"line\">A challenge password []:</span><br><span class=\"line\">An optional company name []:</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"生成X-509格式的CA根证书ca-crt\"><a href=\"#生成X-509格式的CA根证书ca-crt\" class=\"headerlink\" title=\"生成X.509格式的CA根证书ca.crt\"></a><font size=\"4em\">生成X.509格式的CA根证书ca.crt</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ openssl x509 -req -days 365 -in ca.csr -out ca.crt -signkey ca.key</span><br></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Signature ok</span><br><span class=\"line\">subject=/C=CN/ST=GuangDong/L=ShenZhen/O=IBoxPay/OU=IBoxPay/emailAddress=admin@iboxpay.com</span><br><span class=\"line\">Getting Private key</span><br><span class=\"line\">Enter pass phrase for ca.key:</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"生成服务端的证书\"><a href=\"#生成服务端的证书\" class=\"headerlink\" title=\"生成服务端的证书\"></a><font size=\"5em\">生成服务端的证书</font></h3><h4 id=\"生成服务端私钥文件-server-key\"><a href=\"#生成服务端私钥文件-server-key\" class=\"headerlink\" title=\"生成服务端私钥文件 server.key\"></a><font size=\"4em\">生成服务端私钥文件 server.key</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ openssl genrsa -des3 -out server.key 1024</span><br></pre></td></tr></table></figure>\n<h4 id=\"服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server-csr\"><a href=\"#服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server-csr\" class=\"headerlink\" title=\"服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server.csr\"></a><font size=\"4em\">服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server.csr</font></h4><p>这一步需要填写一个组织信息，不要跟根证书的组织的一样。另外Common Name填一个自己的域名（如果没有实际的域名也可以写，后面在/etc/hosts映射一个，我写的就是yinlijun.com），不要填localhost，android会报错。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -key server.key -out server.csr</span><br></pre></td></tr></table></figure></p>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter pass phrase for server.key:</span><br><span class=\"line\">You are about to be asked to enter information that will be incorporated</span><br><span class=\"line\">into your certificate request.</span><br><span class=\"line\">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class=\"line\">There are quite a few fields but you can leave some blank</span><br><span class=\"line\">For some fields there will be a default value,</span><br><span class=\"line\">If you enter &apos;.&apos;, the field will be left blank.</span><br><span class=\"line\">-----</span><br><span class=\"line\">Country Name (2 letter code) [AU]:CN</span><br><span class=\"line\">State or Province Name (full name) [Some-State]:GuangDong</span><br><span class=\"line\">Locality Name (eg, city) []:ShenZhen</span><br><span class=\"line\">Organization Name (eg, company) [Internet Widgits Pty Ltd]:yinlijun</span><br><span class=\"line\">Organizational Unit Name (eg, section) []:yinlijun</span><br><span class=\"line\">Common Name (e.g. server FQDN or YOUR name) []:yinlijun.com</span><br><span class=\"line\">Email Address []:admin@yinlijun.com</span><br><span class=\"line\"></span><br><span class=\"line\">Please enter the following &apos;extra&apos; attributes</span><br><span class=\"line\">to be sent with your certificate request</span><br><span class=\"line\">A challenge password []:</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"删除私钥的密码，这一步非常重要，一定要执行-否则会影响后面的步骤。\"><a href=\"#删除私钥的密码，这一步非常重要，一定要执行-否则会影响后面的步骤。\" class=\"headerlink\" title=\"删除私钥的密码，这一步非常重要，一定要执行,否则会影响后面的步骤。\"></a><font size=\"4em\">删除私钥的密码，这一步非常<strong>重要</strong>，一定要执行,否则会影响后面的步骤。</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cp server.key server.key.passphrase</span><br><span class=\"line\">$ openssl rsa -in server.key.passphrase -out server.key</span><br></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter pass phrase for server.key.passphrase:</span><br><span class=\"line\">writing RSA key</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"签发服务器证书server-crt：\"><a href=\"#签发服务器证书server-crt：\" class=\"headerlink\" title=\"签发服务器证书server.crt：\"></a><font size=\"4em\">签发服务器证书server.crt：</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt</span><br></pre></td></tr></table></figure>\n<p>输出如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Signature ok</span><br><span class=\"line\">subject=/C=CN/ST=GuangDong/L=ShenZhen/O=yinlijun/OU=yinlijun/CN=yinlijun.com/emailAddress=admin@yinlijun.com</span><br><span class=\"line\">Getting Private key</span><br></pre></td></tr></table></figure></p>\n<p>到现在为止，你目录下的文件应该有：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -la</span><br><span class=\"line\">total 36</span><br><span class=\"line\">drwxr-xr-x  2 user user 4096 Sep  5 16:19 .</span><br><span class=\"line\">drwxr-xr-x 12 user user 4096 Sep  5 16:09 ..</span><br><span class=\"line\">-rw-r--r--  1 user user  757 Sep  5 16:12 ca.crt</span><br><span class=\"line\">-rw-r--r--  1 user user  603 Sep  5 16:10 ca.csr</span><br><span class=\"line\">-rw-r--r--  1 user user  963 Sep  5 16:09 ca.key</span><br><span class=\"line\">-rw-r--r--  1 user user  757 Sep  5 16:19 server.crt</span><br><span class=\"line\">-rw-r--r--  1 user user  603 Sep  5 16:16 server.csr</span><br><span class=\"line\">-rw-r--r--  1 user user  887 Sep  5 16:18 server.key</span><br><span class=\"line\">-rw-r--r--  1 user user  951 Sep  5 16:17 server.key.passphrase</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"生成之后察看服务器证书信息。\"><a href=\"#生成之后察看服务器证书信息。\" class=\"headerlink\" title=\"生成之后察看服务器证书信息。\"></a>生成之后察看服务器证书信息。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -in server.crt -text -noout</span><br></pre></td></tr></table></figure>\n<h4 id=\"生成服务器的pfx文件，这个文件node服务器要用到。\"><a href=\"#生成服务器的pfx文件，这个文件node服务器要用到。\" class=\"headerlink\" title=\"生成服务器的pfx文件，这个文件node服务器要用到。\"></a>生成服务器的pfx文件，这个文件node服务器要用到。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -export -in server.crt -inkey server.key -certfile ca.crt -out server.pfx</span><br></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter Export Password:</span><br><span class=\"line\">Verifying - Enter Export Password:</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"生成服务端的p12文件。，这个是为了生成服务端bks文件用的\"><a href=\"#生成服务端的p12文件。，这个是为了生成服务端bks文件用的\" class=\"headerlink\" title=\"生成服务端的p12文件。，这个是为了生成服务端bks文件用的\"></a>生成服务端的p12文件。，这个是为了生成服务端bks文件用的</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -export -clcerts -in server.crt -inkey server.key -out server.p12</span><br></pre></td></tr></table></figure>\n<h3 id=\"下载一个bcprov-jdk16-141-jar，也是为了生成服务端bks文件要用到的。\"><a href=\"#下载一个bcprov-jdk16-141-jar，也是为了生成服务端bks文件要用到的。\" class=\"headerlink\" title=\"下载一个bcprov-jdk16-141.jar，也是为了生成服务端bks文件要用到的。\"></a>下载一个bcprov-jdk16-141.jar，也是为了生成服务端bks文件要用到的。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载地址：[http://www.java2s.com/Code/JarDownload/bcprov/bcprov-jdk16-141.jar.zip](http://www.java2s.com/Code/JarDownload/bcprov/bcprov-jdk16-141.jar.zip)</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成服务端的bks文件，这个android程序要用到\"><a href=\"#生成服务端的bks文件，这个android程序要用到\" class=\"headerlink\" title=\"生成服务端的bks文件，这个android程序要用到\"></a>生成服务端的bks文件，这个android程序要用到</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -importkeystore -srckeystore server.p12 -srcstoretype pkcs12 -destkeystore server.bks -deststoretype bks -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath bcprov-jdk16-141.jar</span><br></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入目标密钥库口令:  </span><br><span class=\"line\">再次输入新密码: </span><br><span class=\"line\">输入源密钥库口令:  </span><br><span class=\"line\">已成功导入别名 1 项。</span><br><span class=\"line\">已完成导入命令: 1 项成功导入，0 项失败或取消</span><br></pre></td></tr></table></figure></p>\n<p>因为要进行双向验证，还需要生成客户端证书。</p>\n<h4 id=\"生成客户端密钥\"><a href=\"#生成客户端密钥\" class=\"headerlink\" title=\"生成客户端密钥\"></a>生成客户端密钥</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -des3 -out client.key 1024</span><br></pre></td></tr></table></figure>\n<h4 id=\"生成客户端证书请求签名文件\"><a href=\"#生成客户端证书请求签名文件\" class=\"headerlink\" title=\"生成客户端证书请求签名文件\"></a>生成客户端证书请求签名文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -out client.csr -key client.key</span><br></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter pass phrase for client.key:</span><br><span class=\"line\">You are about to be asked to enter information that will be incorporated</span><br><span class=\"line\">into your certificate request.</span><br><span class=\"line\">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class=\"line\">There are quite a few fields but you can leave some blank</span><br><span class=\"line\">For some fields there will be a default value,</span><br><span class=\"line\">If you enter &apos;.&apos;, the field will be left blank.</span><br><span class=\"line\">-----</span><br><span class=\"line\">Country Name (2 letter code) [AU]:CN</span><br><span class=\"line\">State or Province Name (full name) [Some-State]:GuangDong </span><br><span class=\"line\">Locality Name (eg, city) []:ShenZhen</span><br><span class=\"line\">Organization Name (eg, company) [Internet Widgits Pty Ltd]:ruochen</span><br><span class=\"line\">Organizational Unit Name (eg, section) []:ruochen</span><br><span class=\"line\">Common Name (e.g. server FQDN or YOUR name) []:</span><br><span class=\"line\">Email Address []:admin@ruochen.com</span><br><span class=\"line\"></span><br><span class=\"line\">Please enter the following &apos;extra&apos; attributes</span><br><span class=\"line\">to be sent with your certificate request</span><br><span class=\"line\">A challenge password []:</span><br><span class=\"line\">An optional company name []:</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。\"><a href=\"#创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。\" class=\"headerlink\" title=\"创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。\"></a>创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -in client.csr -out client.cert -signkey client.key -CA ca.crt -CAkey ca.key -CAcreateserial -days 3650</span><br></pre></td></tr></table></figure>\n<p>输入如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Signature ok</span><br><span class=\"line\">subject=/C=CN/ST=GuangDong/L=ShenZhen/O=ruochen/OU=ruochen/emailAddress=admin@ruochen.com</span><br><span class=\"line\">Getting Private key</span><br><span class=\"line\">Enter pass phrase for client.key:</span><br><span class=\"line\">Getting CA Private Key</span><br><span class=\"line\">Enter pass phrase for ca.key:</span><br><span class=\"line\">yinlijun@yinlijun:~/personal_github/echo-https-server/keys$ ls</span><br><span class=\"line\">ca.crt  ca.csr  ca.key  ca.srl  client.cert  client.csr  client.key  server.crt  server.csr  server.key  server.key.passphrase  server.pfx</span><br><span class=\"line\">yinlijun@yinlijun:~/personal_github/echo-https-server/keys$ openssl pkcs12 -export -clcerts -in client.cert -inkey client.key -out client.p12</span><br><span class=\"line\">Enter pass phrase for client.key:</span><br><span class=\"line\">Enter Export Password:</span><br><span class=\"line\">Verifying - Enter Export Password:</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"生成浏览器支持的p12文件\"><a href=\"#生成浏览器支持的p12文件\" class=\"headerlink\" title=\"生成浏览器支持的p12文件\"></a>生成浏览器支持的p12文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -export -clcerts -in client.cert -inkey client.key -out client.p12</span><br></pre></td></tr></table></figure>\n<h4 id=\"将客户端证书文件client-crt和客户端证书密钥文件client-key合并成客户端证书安装包client-pfx\"><a href=\"#将客户端证书文件client-crt和客户端证书密钥文件client-key合并成客户端证书安装包client-pfx\" class=\"headerlink\" title=\"将客户端证书文件client.crt和客户端证书密钥文件client.key合并成客户端证书安装包client.pfx\"></a>将客户端证书文件client.crt和客户端证书密钥文件client.key合并成客户端证书安装包client.pfx</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -export -in client.crt -inkey client.key -out client.pfx</span><br></pre></td></tr></table></figure>\n<p>以上的文件我只用到了一部分，应该有替代关系，具体我也搞不清楚:)。 不同的实现方式有用到不同的文件。<br>我的android客户端用到了</p>\n<ul>\n<li>server.bks</li>\n<li>client.p12</li>\n</ul>\n<p>看了网上的一些例子，好像server.bks可以用server.crt替代。</p>\n<p>node用到了</p>\n<ul>\n<li>server.pfx</li>\n</ul>\n<p>察看node的文档，server.pfx可以用server.crt和server.key替代。</p>\n<h2 id=\"服务端（nodejs）的代码\"><a href=\"#服务端（nodejs）的代码\" class=\"headerlink\" title=\"服务端（nodejs）的代码\"></a>服务端（nodejs）的代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> https =<span class=\"built_in\">require</span>(<span class=\"string\">'https'</span>), fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\">    key: fs.readFileSync(<span class=\"string\">'./keys/server.key'</span>),</span><br><span class=\"line\">    cert: fs.readFileSync(<span class=\"string\">'./keys/server.crt'</span>),</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"><span class=\"keyword\">var</span> server = https.createServer(options, app);</span><br><span class=\"line\">server.listen(<span class=\"number\">443</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Https server listening on port '</span> + <span class=\"number\">443</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"android应用自有证书的验证方式\"><a href=\"#android应用自有证书的验证方式\" class=\"headerlink\" title=\"android应用自有证书的验证方式\"></a>android应用自有证书的验证方式</h2><p>将服务端证书拷贝到app资源目录下，一般是&lt;project_dir&gt;/assets/server.crt</p>\n<h3 id=\"方法一：直接根据server-crt初始化TrustManagerFactory\"><a href=\"#方法一：直接根据server-crt初始化TrustManagerFactory\" class=\"headerlink\" title=\"方法一：直接根据server.crt初始化TrustManagerFactory\"></a>方法一：直接根据server.crt初始化TrustManagerFactory</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    CertificateFactory cf = CertificateFactory.getInstance(<span class=\"string\">\"X.509\"</span>);</span><br><span class=\"line\">    InputStream caInput = <span class=\"keyword\">new</span> BufferedInputStream(getAssets().open(<span class=\"string\">\"server.crt\"</span>));</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Certificate ca;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ca = cf.generateCertificate(caInput);</span><br><span class=\"line\">        Log.i(TAG, <span class=\"string\">\"ca=\"</span> + ((X509Certificate) ca).getSubjectDN());</span><br><span class=\"line\">        Log.i(TAG, <span class=\"string\">\"key=\"</span> + ((X509Certificate) ca).getPublicKey());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        caInput.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    String keyStoreType = KeyStore.getDefaultType();</span><br><span class=\"line\">    Log.d(TAG, <span class=\"string\">\"keystore type:\"</span> + keyStoreType);</span><br><span class=\"line\">    KeyStore keyStore = KeyStore.getInstance(keyStoreType);</span><br><span class=\"line\">    keyStore.load(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    keyStore.setCertificateEntry(<span class=\"string\">\"cert\"</span>, ca);</span><br><span class=\"line\"></span><br><span class=\"line\">    String tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();</span><br><span class=\"line\">    Log.d(TAG, <span class=\"string\">\"tmfAlgorithm:\"</span> + tmfAlgorithm);</span><br><span class=\"line\">    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(tmfAlgorithm);</span><br><span class=\"line\">    trustManagerFactory.init(keyStore);</span><br><span class=\"line\"></span><br><span class=\"line\">    mSSLContext = SSLContext.getInstance(<span class=\"string\">\"TLS\"</span>);</span><br><span class=\"line\">    mSSLContext.init(<span class=\"keyword\">null</span>, trustManagerFactory.getTrustManagers(), <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    URL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"https://yinlijun.com\"</span>);</span><br><span class=\"line\">    HttpsURLConnection urlConnection =</span><br><span class=\"line\">            (HttpsURLConnection)url.openConnection();</span><br><span class=\"line\">    urlConnection.setSSLSocketFactory(mSSLContext.getSocketFactory());</span><br><span class=\"line\">    InputStream in = urlConnection.getInputStream();</span><br><span class=\"line\">    copyInputStreamToOutputStream(in, System.out);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (CertificateException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (KeyManagementException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (KeyStoreException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>copyInputStreamToOutputStream方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">copyInputStreamToOutputStream</span><span class=\"params\">(InputStream in, PrintStream out)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((c = in.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        out.write(buffer, <span class=\"number\">0</span>, c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    CertificateFactory cf = CertificateFactory.getInstance(<span class=\"string\">\"X.509\"</span>);</span><br><span class=\"line\">    InputStream caInput = <span class=\"keyword\">new</span> BufferedInputStream(getAssets().open(<span class=\"string\">\"server.crt\"</span>));</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Certificate ca;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ca = cf.generateCertificate(caInput);</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Longer\"</span>, <span class=\"string\">\"ca=\"</span> + ((X509Certificate) ca).getSubjectDN());</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Longer\"</span>, <span class=\"string\">\"key=\"</span> + ((X509Certificate) ca).getPublicKey());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        caInput.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Create an SSLContext that uses our TrustManager</span></span><br><span class=\"line\">    SSLContext context = SSLContext.getInstance(<span class=\"string\">\"TLSv1\"</span>,<span class=\"string\">\"AndroidOpenSSL\"</span>);</span><br><span class=\"line\">    context.init(<span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> TrustManager[]&#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> X509TrustManager() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkClientTrusted</span><span class=\"params\">(X509Certificate[] chain,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                                String authType)</span></span></span><br><span class=\"line\"><span class=\"function\">                        <span class=\"keyword\">throws</span> CertificateException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkServerTrusted</span><span class=\"params\">(X509Certificate[] chain,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                                String authType)</span></span></span><br><span class=\"line\"><span class=\"function\">                        <span class=\"keyword\">throws</span> CertificateException </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (X509Certificate cert : chain) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// Make sure that it hasn't expired.</span></span><br><span class=\"line\">                        cert.checkValidity();</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// Verify the certificate's public key chain.</span></span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            cert.verify(((X509Certificate) ca).getPublicKey());</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">                            e.printStackTrace();</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (InvalidKeyException e) &#123;</span><br><span class=\"line\">                            e.printStackTrace();</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (NoSuchProviderException e) &#123;</span><br><span class=\"line\">                            e.printStackTrace();</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (SignatureException e) &#123;</span><br><span class=\"line\">                            e.printStackTrace();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> X509Certificate[<span class=\"number\">0</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    URL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"https://yinlijun.com/\"</span>);</span><br><span class=\"line\">    HttpsURLConnection urlConnection =</span><br><span class=\"line\">            (HttpsURLConnection)url.openConnection();</span><br><span class=\"line\">    urlConnection.setSSLSocketFactory(context.getSocketFactory());</span><br><span class=\"line\">    InputStream in = urlConnection.getInputStream();</span><br><span class=\"line\">    copyInputStreamToOutputStream(in, System.out);</span><br></pre></td></tr></table></figure>\n<h2 id=\"双向认证\"><a href=\"#双向认证\" class=\"headerlink\" title=\"双向认证\"></a>双向认证</h2><p>单向验证只能验证服务器，如果服务器也想对客户端进行验证，即所谓（双向验证），需要在连接是一起发送客户端证书。</p>\n<h3 id=\"双向认证，服务器代码\"><a href=\"#双向认证，服务器代码\" class=\"headerlink\" title=\"双向认证，服务器代码\"></a>双向认证，服务器代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> tls = <span class=\"built_in\">require</span>(<span class=\"string\">'tls'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">  pfx: fs.readFileSync(<span class=\"string\">'./server.pfx'</span>),</span><br><span class=\"line\">  passphrase: <span class=\"string\">\"123456\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// This is necessary only if using the client certificate authentication.</span></span><br><span class=\"line\">  requestCert: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  rejectUnauthorized: <span class=\"literal\">true</span> <span class=\"comment\">//如果接受也非认证链接，可以删除此行。</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//需要双向认证才需要配置requestCert为true。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = tls.createServer(options, (socket) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'server connected'</span>,</span><br><span class=\"line\">              socket.authorized ? <span class=\"string\">'authorized'</span> : <span class=\"string\">'unauthorized'</span>);</span><br><span class=\"line\">  socket.setEncoding(<span class=\"string\">'utf8'</span>);</span><br><span class=\"line\">  socket.on(<span class=\"string\">'data'</span>, (data) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">      socket.write(data);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  socket.on(<span class=\"string\">'end'</span>, (socket) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"socket closed\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(<span class=\"number\">8000</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'server bound'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"双向认证，android的代码，实现方式一\"><a href=\"#双向认证，android的代码，实现方式一\" class=\"headerlink\" title=\"双向认证，android的代码，实现方式一\"></a>双向认证，android的代码，实现方式一</h3><p>server.pfx和client.p12放到&lt;project_dir&gt;/assets/目录下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    KeyStore trustStore = KeyStore.getInstance(<span class=\"string\">\"bks\"</span>);</span><br><span class=\"line\">    InputStream tsIn = getResources().getAssets().open(<span class=\"string\">\"server.bks\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    KeyStore keyStore = KeyStore.getInstance(<span class=\"string\">\"PKCS12\"</span>);</span><br><span class=\"line\">    InputStream ksIn = getResources().getAssets().open(<span class=\"string\">\"client.p12\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        keyStore.load(ksIn, <span class=\"string\">\"123456\"</span>.toCharArray());</span><br><span class=\"line\">        trustStore.load(tsIn, <span class=\"string\">\"123456\"</span>.toCharArray());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ksIn.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ignore) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            tsIn.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ignore) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(<span class=\"string\">\"X509\"</span>);</span><br><span class=\"line\">    keyManagerFactory.init(keyStore, <span class=\"string\">\"123456\"</span>.toCharArray());</span><br><span class=\"line\">    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());</span><br><span class=\"line\">    trustManagerFactory.init(trustStore);</span><br><span class=\"line\">    mSSLContext = SSLContext.getInstance(<span class=\"string\">\"TLS\"</span>);</span><br><span class=\"line\">    mSSLContext.init(<span class=\"keyword\">null</span>, trustManagerFactory.getTrustManagers(), <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    mSSLSocket = (SSLSocket) mSSLContext.getSocketFactory().createSocket(<span class=\"string\">\"yinlijun.com\"</span>, <span class=\"number\">8000</span>);</span><br><span class=\"line\">    mSSLSocket.startHandshake();</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (KeyManagementException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (KeyStoreException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (UnrecoverableKeyException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"双向认证，android的代码，实现方式2，用server-crt替代server-bks\"><a href=\"#双向认证，android的代码，实现方式2，用server-crt替代server-bks\" class=\"headerlink\" title=\"双向认证，android的代码，实现方式2，用server.crt替代server.bks\"></a>双向认证，android的代码，实现方式2，用server.crt替代server.bks</h3><p>server.crt和client.p12放到&lt;project_dir&gt;/assets/目录下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    CertificateFactory cf = CertificateFactory.getInstance(<span class=\"string\">\"X.509\"</span>);</span><br><span class=\"line\">    InputStream caInput = <span class=\"keyword\">new</span> BufferedInputStream(getAssets().open(<span class=\"string\">\"server.crt\"</span>));</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Certificate ca;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ca = cf.generateCertificate(caInput);</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Longer\"</span>, <span class=\"string\">\"ca=\"</span> + ((X509Certificate) ca).getSubjectDN());</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Longer\"</span>, <span class=\"string\">\"key=\"</span> + ((X509Certificate) ca).getPublicKey());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        caInput.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    KeyStore keyStore = KeyStore.getInstance(<span class=\"string\">\"PKCS12\"</span>);</span><br><span class=\"line\">    InputStream ksIn = getResources().getAssets().open(<span class=\"string\">\"client.p12\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        keyStore.load(ksIn, <span class=\"string\">\"123456\"</span>.toCharArray());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ksIn.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ignore) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(<span class=\"string\">\"X509\"</span>);</span><br><span class=\"line\">    keyManagerFactory.init(keyStore, <span class=\"string\">\"123456\"</span>.toCharArray());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Create an SSLContext that uses our TrustManager</span></span><br><span class=\"line\">    SSLContext context = SSLContext.getInstance(<span class=\"string\">\"TLSv1\"</span>,<span class=\"string\">\"AndroidOpenSSL\"</span>);</span><br><span class=\"line\">    context.init(keyManagerFactory.getKeyManagers(), <span class=\"keyword\">new</span> TrustManager[]&#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> X509TrustManager() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkClientTrusted</span><span class=\"params\">(X509Certificate[] chain,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                                String authType)</span></span></span><br><span class=\"line\"><span class=\"function\">                        <span class=\"keyword\">throws</span> CertificateException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkServerTrusted</span><span class=\"params\">(X509Certificate[] chain,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                                String authType)</span></span></span><br><span class=\"line\"><span class=\"function\">                        <span class=\"keyword\">throws</span> CertificateException </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (X509Certificate cert : chain) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// Make sure that it hasn't expired.</span></span><br><span class=\"line\">                        cert.checkValidity();</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// Verify the certificate's public key chain.</span></span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            cert.verify(((X509Certificate) ca).getPublicKey());</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">                            e.printStackTrace();</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (InvalidKeyException e) &#123;</span><br><span class=\"line\">                            e.printStackTrace();</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (NoSuchProviderException e) &#123;</span><br><span class=\"line\">                            e.printStackTrace();</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (SignatureException e) &#123;</span><br><span class=\"line\">                            e.printStackTrace();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> X509Certificate[<span class=\"number\">0</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n<p>项目地址：</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><a href=\"https://matoski.com/article/node-express-generate-ssl/\" target=\"_blank\" rel=\"noopener\">How to generate self-signed certificate for usage in Express4 or Node.js HTTP</a></li>\n<li><a href=\"http://blog.csdn.net/fyang2007/article/details/6180361\" target=\"_blank\" rel=\"noopener\">SSL证书生成方法</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/22816331\" target=\"_blank\" rel=\"noopener\">Android安全开发之安全使用HTTPS</a></li>\n<li><a href=\"https://developer.android.com/training/articles/security-ssl.html#nogotofail\" target=\"_blank\" rel=\"noopener\">通过 HTTPS 和 SSL 确保安全</a> (要翻墙)</li>\n<li><a href=\"https://nodejs.org/api/tls.html\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/api/tls.html</a></li>\n<li><a href=\"https://gist.github.com/Frank-Zhu/41e21a00df26d63cd38d\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/Frank-Zhu/41e21a00df26d63cd38d</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>本文介绍一个简单echo服务器的实现，服务端用nodejs，客户端用android。</p>\n<h2 id=\"用openssl一系列证书\"><a href=\"#用openssl一系列证书\" class=\"headerlink\" title=\"用openssl一系列证书\"></a><font size=\"6em\">用openssl一系列证书</font></h2><h3 id=\"生成自己的CA根证书\"><a href=\"#生成自己的CA根证书\" class=\"headerlink\" title=\"生成自己的CA根证书\"></a><font size=\"5em\">生成自己的CA根证书</font></h3><h4 id=\"生成跟证书私钥ca-key\"><a href=\"#生成跟证书私钥ca-key\" class=\"headerlink\" title=\"生成跟证书私钥ca.key\"></a><font size=\"4em\">生成跟证书私钥ca.key</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ openssl genrsa -des3 -out ca.key 1024</span><br></pre></td></tr></table></figure>\n<h4 id=\"生成X-509证书签名请求文件ca-csr\"><a href=\"#生成X-509证书签名请求文件ca-csr\" class=\"headerlink\" title=\"生成X.509证书签名请求文件ca.csr\"></a><font size=\"4em\">生成X.509证书签名请求文件ca.csr</font></h4><p>在生成ca.csr的过程中，会让输入一些组织信息等。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ openssl req -new -key ca.key -out ca.csr</span><br></pre></td></tr></table></figure></p>","more":"<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter pass phrase for ca.key:</span><br><span class=\"line\">You are about to be asked to enter information that will be incorporated</span><br><span class=\"line\">into your certificate request.</span><br><span class=\"line\">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class=\"line\">There are quite a few fields but you can leave some blank</span><br><span class=\"line\">For some fields there will be a default value,</span><br><span class=\"line\">If you enter &apos;.&apos;, the field will be left blank.</span><br><span class=\"line\">-----</span><br><span class=\"line\">Country Name (2 letter code) [AU]:CN</span><br><span class=\"line\">State or Province Name (full name) [Some-State]:GuangDong</span><br><span class=\"line\">Locality Name (eg, city) []:ShenZhen</span><br><span class=\"line\">Organization Name (eg, company) [Internet Widgits Pty Ltd]:IBoxPay</span><br><span class=\"line\">Organizational Unit Name (eg, section) []:IBoxPay</span><br><span class=\"line\">Common Name (e.g. server FQDN or YOUR name) []:</span><br><span class=\"line\">Email Address []:admin@iboxpay.com</span><br><span class=\"line\"></span><br><span class=\"line\">Please enter the following &apos;extra&apos; attributes</span><br><span class=\"line\">to be sent with your certificate request</span><br><span class=\"line\">A challenge password []:</span><br><span class=\"line\">An optional company name []:</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"生成X-509格式的CA根证书ca-crt\"><a href=\"#生成X-509格式的CA根证书ca-crt\" class=\"headerlink\" title=\"生成X.509格式的CA根证书ca.crt\"></a><font size=\"4em\">生成X.509格式的CA根证书ca.crt</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ openssl x509 -req -days 365 -in ca.csr -out ca.crt -signkey ca.key</span><br></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Signature ok</span><br><span class=\"line\">subject=/C=CN/ST=GuangDong/L=ShenZhen/O=IBoxPay/OU=IBoxPay/emailAddress=admin@iboxpay.com</span><br><span class=\"line\">Getting Private key</span><br><span class=\"line\">Enter pass phrase for ca.key:</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"生成服务端的证书\"><a href=\"#生成服务端的证书\" class=\"headerlink\" title=\"生成服务端的证书\"></a><font size=\"5em\">生成服务端的证书</font></h3><h4 id=\"生成服务端私钥文件-server-key\"><a href=\"#生成服务端私钥文件-server-key\" class=\"headerlink\" title=\"生成服务端私钥文件 server.key\"></a><font size=\"4em\">生成服务端私钥文件 server.key</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ openssl genrsa -des3 -out server.key 1024</span><br></pre></td></tr></table></figure>\n<h4 id=\"服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server-csr\"><a href=\"#服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server-csr\" class=\"headerlink\" title=\"服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server.csr\"></a><font size=\"4em\">服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server.csr</font></h4><p>这一步需要填写一个组织信息，不要跟根证书的组织的一样。另外Common Name填一个自己的域名（如果没有实际的域名也可以写，后面在/etc/hosts映射一个，我写的就是yinlijun.com），不要填localhost，android会报错。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -key server.key -out server.csr</span><br></pre></td></tr></table></figure></p>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter pass phrase for server.key:</span><br><span class=\"line\">You are about to be asked to enter information that will be incorporated</span><br><span class=\"line\">into your certificate request.</span><br><span class=\"line\">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class=\"line\">There are quite a few fields but you can leave some blank</span><br><span class=\"line\">For some fields there will be a default value,</span><br><span class=\"line\">If you enter &apos;.&apos;, the field will be left blank.</span><br><span class=\"line\">-----</span><br><span class=\"line\">Country Name (2 letter code) [AU]:CN</span><br><span class=\"line\">State or Province Name (full name) [Some-State]:GuangDong</span><br><span class=\"line\">Locality Name (eg, city) []:ShenZhen</span><br><span class=\"line\">Organization Name (eg, company) [Internet Widgits Pty Ltd]:yinlijun</span><br><span class=\"line\">Organizational Unit Name (eg, section) []:yinlijun</span><br><span class=\"line\">Common Name (e.g. server FQDN or YOUR name) []:yinlijun.com</span><br><span class=\"line\">Email Address []:admin@yinlijun.com</span><br><span class=\"line\"></span><br><span class=\"line\">Please enter the following &apos;extra&apos; attributes</span><br><span class=\"line\">to be sent with your certificate request</span><br><span class=\"line\">A challenge password []:</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"删除私钥的密码，这一步非常重要，一定要执行-否则会影响后面的步骤。\"><a href=\"#删除私钥的密码，这一步非常重要，一定要执行-否则会影响后面的步骤。\" class=\"headerlink\" title=\"删除私钥的密码，这一步非常重要，一定要执行,否则会影响后面的步骤。\"></a><font size=\"4em\">删除私钥的密码，这一步非常<strong>重要</strong>，一定要执行,否则会影响后面的步骤。</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cp server.key server.key.passphrase</span><br><span class=\"line\">$ openssl rsa -in server.key.passphrase -out server.key</span><br></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter pass phrase for server.key.passphrase:</span><br><span class=\"line\">writing RSA key</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"签发服务器证书server-crt：\"><a href=\"#签发服务器证书server-crt：\" class=\"headerlink\" title=\"签发服务器证书server.crt：\"></a><font size=\"4em\">签发服务器证书server.crt：</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt</span><br></pre></td></tr></table></figure>\n<p>输出如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Signature ok</span><br><span class=\"line\">subject=/C=CN/ST=GuangDong/L=ShenZhen/O=yinlijun/OU=yinlijun/CN=yinlijun.com/emailAddress=admin@yinlijun.com</span><br><span class=\"line\">Getting Private key</span><br></pre></td></tr></table></figure></p>\n<p>到现在为止，你目录下的文件应该有：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -la</span><br><span class=\"line\">total 36</span><br><span class=\"line\">drwxr-xr-x  2 user user 4096 Sep  5 16:19 .</span><br><span class=\"line\">drwxr-xr-x 12 user user 4096 Sep  5 16:09 ..</span><br><span class=\"line\">-rw-r--r--  1 user user  757 Sep  5 16:12 ca.crt</span><br><span class=\"line\">-rw-r--r--  1 user user  603 Sep  5 16:10 ca.csr</span><br><span class=\"line\">-rw-r--r--  1 user user  963 Sep  5 16:09 ca.key</span><br><span class=\"line\">-rw-r--r--  1 user user  757 Sep  5 16:19 server.crt</span><br><span class=\"line\">-rw-r--r--  1 user user  603 Sep  5 16:16 server.csr</span><br><span class=\"line\">-rw-r--r--  1 user user  887 Sep  5 16:18 server.key</span><br><span class=\"line\">-rw-r--r--  1 user user  951 Sep  5 16:17 server.key.passphrase</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"生成之后察看服务器证书信息。\"><a href=\"#生成之后察看服务器证书信息。\" class=\"headerlink\" title=\"生成之后察看服务器证书信息。\"></a>生成之后察看服务器证书信息。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -in server.crt -text -noout</span><br></pre></td></tr></table></figure>\n<h4 id=\"生成服务器的pfx文件，这个文件node服务器要用到。\"><a href=\"#生成服务器的pfx文件，这个文件node服务器要用到。\" class=\"headerlink\" title=\"生成服务器的pfx文件，这个文件node服务器要用到。\"></a>生成服务器的pfx文件，这个文件node服务器要用到。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -export -in server.crt -inkey server.key -certfile ca.crt -out server.pfx</span><br></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter Export Password:</span><br><span class=\"line\">Verifying - Enter Export Password:</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"生成服务端的p12文件。，这个是为了生成服务端bks文件用的\"><a href=\"#生成服务端的p12文件。，这个是为了生成服务端bks文件用的\" class=\"headerlink\" title=\"生成服务端的p12文件。，这个是为了生成服务端bks文件用的\"></a>生成服务端的p12文件。，这个是为了生成服务端bks文件用的</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -export -clcerts -in server.crt -inkey server.key -out server.p12</span><br></pre></td></tr></table></figure>\n<h3 id=\"下载一个bcprov-jdk16-141-jar，也是为了生成服务端bks文件要用到的。\"><a href=\"#下载一个bcprov-jdk16-141-jar，也是为了生成服务端bks文件要用到的。\" class=\"headerlink\" title=\"下载一个bcprov-jdk16-141.jar，也是为了生成服务端bks文件要用到的。\"></a>下载一个bcprov-jdk16-141.jar，也是为了生成服务端bks文件要用到的。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载地址：[http://www.java2s.com/Code/JarDownload/bcprov/bcprov-jdk16-141.jar.zip](http://www.java2s.com/Code/JarDownload/bcprov/bcprov-jdk16-141.jar.zip)</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成服务端的bks文件，这个android程序要用到\"><a href=\"#生成服务端的bks文件，这个android程序要用到\" class=\"headerlink\" title=\"生成服务端的bks文件，这个android程序要用到\"></a>生成服务端的bks文件，这个android程序要用到</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -importkeystore -srckeystore server.p12 -srcstoretype pkcs12 -destkeystore server.bks -deststoretype bks -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath bcprov-jdk16-141.jar</span><br></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入目标密钥库口令:  </span><br><span class=\"line\">再次输入新密码: </span><br><span class=\"line\">输入源密钥库口令:  </span><br><span class=\"line\">已成功导入别名 1 项。</span><br><span class=\"line\">已完成导入命令: 1 项成功导入，0 项失败或取消</span><br></pre></td></tr></table></figure></p>\n<p>因为要进行双向验证，还需要生成客户端证书。</p>\n<h4 id=\"生成客户端密钥\"><a href=\"#生成客户端密钥\" class=\"headerlink\" title=\"生成客户端密钥\"></a>生成客户端密钥</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -des3 -out client.key 1024</span><br></pre></td></tr></table></figure>\n<h4 id=\"生成客户端证书请求签名文件\"><a href=\"#生成客户端证书请求签名文件\" class=\"headerlink\" title=\"生成客户端证书请求签名文件\"></a>生成客户端证书请求签名文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -out client.csr -key client.key</span><br></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter pass phrase for client.key:</span><br><span class=\"line\">You are about to be asked to enter information that will be incorporated</span><br><span class=\"line\">into your certificate request.</span><br><span class=\"line\">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class=\"line\">There are quite a few fields but you can leave some blank</span><br><span class=\"line\">For some fields there will be a default value,</span><br><span class=\"line\">If you enter &apos;.&apos;, the field will be left blank.</span><br><span class=\"line\">-----</span><br><span class=\"line\">Country Name (2 letter code) [AU]:CN</span><br><span class=\"line\">State or Province Name (full name) [Some-State]:GuangDong </span><br><span class=\"line\">Locality Name (eg, city) []:ShenZhen</span><br><span class=\"line\">Organization Name (eg, company) [Internet Widgits Pty Ltd]:ruochen</span><br><span class=\"line\">Organizational Unit Name (eg, section) []:ruochen</span><br><span class=\"line\">Common Name (e.g. server FQDN or YOUR name) []:</span><br><span class=\"line\">Email Address []:admin@ruochen.com</span><br><span class=\"line\"></span><br><span class=\"line\">Please enter the following &apos;extra&apos; attributes</span><br><span class=\"line\">to be sent with your certificate request</span><br><span class=\"line\">A challenge password []:</span><br><span class=\"line\">An optional company name []:</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。\"><a href=\"#创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。\" class=\"headerlink\" title=\"创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。\"></a>创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -in client.csr -out client.cert -signkey client.key -CA ca.crt -CAkey ca.key -CAcreateserial -days 3650</span><br></pre></td></tr></table></figure>\n<p>输入如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Signature ok</span><br><span class=\"line\">subject=/C=CN/ST=GuangDong/L=ShenZhen/O=ruochen/OU=ruochen/emailAddress=admin@ruochen.com</span><br><span class=\"line\">Getting Private key</span><br><span class=\"line\">Enter pass phrase for client.key:</span><br><span class=\"line\">Getting CA Private Key</span><br><span class=\"line\">Enter pass phrase for ca.key:</span><br><span class=\"line\">yinlijun@yinlijun:~/personal_github/echo-https-server/keys$ ls</span><br><span class=\"line\">ca.crt  ca.csr  ca.key  ca.srl  client.cert  client.csr  client.key  server.crt  server.csr  server.key  server.key.passphrase  server.pfx</span><br><span class=\"line\">yinlijun@yinlijun:~/personal_github/echo-https-server/keys$ openssl pkcs12 -export -clcerts -in client.cert -inkey client.key -out client.p12</span><br><span class=\"line\">Enter pass phrase for client.key:</span><br><span class=\"line\">Enter Export Password:</span><br><span class=\"line\">Verifying - Enter Export Password:</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"生成浏览器支持的p12文件\"><a href=\"#生成浏览器支持的p12文件\" class=\"headerlink\" title=\"生成浏览器支持的p12文件\"></a>生成浏览器支持的p12文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -export -clcerts -in client.cert -inkey client.key -out client.p12</span><br></pre></td></tr></table></figure>\n<h4 id=\"将客户端证书文件client-crt和客户端证书密钥文件client-key合并成客户端证书安装包client-pfx\"><a href=\"#将客户端证书文件client-crt和客户端证书密钥文件client-key合并成客户端证书安装包client-pfx\" class=\"headerlink\" title=\"将客户端证书文件client.crt和客户端证书密钥文件client.key合并成客户端证书安装包client.pfx\"></a>将客户端证书文件client.crt和客户端证书密钥文件client.key合并成客户端证书安装包client.pfx</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -export -in client.crt -inkey client.key -out client.pfx</span><br></pre></td></tr></table></figure>\n<p>以上的文件我只用到了一部分，应该有替代关系，具体我也搞不清楚:)。 不同的实现方式有用到不同的文件。<br>我的android客户端用到了</p>\n<ul>\n<li>server.bks</li>\n<li>client.p12</li>\n</ul>\n<p>看了网上的一些例子，好像server.bks可以用server.crt替代。</p>\n<p>node用到了</p>\n<ul>\n<li>server.pfx</li>\n</ul>\n<p>察看node的文档，server.pfx可以用server.crt和server.key替代。</p>\n<h2 id=\"服务端（nodejs）的代码\"><a href=\"#服务端（nodejs）的代码\" class=\"headerlink\" title=\"服务端（nodejs）的代码\"></a>服务端（nodejs）的代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> https =<span class=\"built_in\">require</span>(<span class=\"string\">'https'</span>), fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\">    key: fs.readFileSync(<span class=\"string\">'./keys/server.key'</span>),</span><br><span class=\"line\">    cert: fs.readFileSync(<span class=\"string\">'./keys/server.crt'</span>),</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"><span class=\"keyword\">var</span> server = https.createServer(options, app);</span><br><span class=\"line\">server.listen(<span class=\"number\">443</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Https server listening on port '</span> + <span class=\"number\">443</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"android应用自有证书的验证方式\"><a href=\"#android应用自有证书的验证方式\" class=\"headerlink\" title=\"android应用自有证书的验证方式\"></a>android应用自有证书的验证方式</h2><p>将服务端证书拷贝到app资源目录下，一般是&lt;project_dir&gt;/assets/server.crt</p>\n<h3 id=\"方法一：直接根据server-crt初始化TrustManagerFactory\"><a href=\"#方法一：直接根据server-crt初始化TrustManagerFactory\" class=\"headerlink\" title=\"方法一：直接根据server.crt初始化TrustManagerFactory\"></a>方法一：直接根据server.crt初始化TrustManagerFactory</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    CertificateFactory cf = CertificateFactory.getInstance(<span class=\"string\">\"X.509\"</span>);</span><br><span class=\"line\">    InputStream caInput = <span class=\"keyword\">new</span> BufferedInputStream(getAssets().open(<span class=\"string\">\"server.crt\"</span>));</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Certificate ca;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ca = cf.generateCertificate(caInput);</span><br><span class=\"line\">        Log.i(TAG, <span class=\"string\">\"ca=\"</span> + ((X509Certificate) ca).getSubjectDN());</span><br><span class=\"line\">        Log.i(TAG, <span class=\"string\">\"key=\"</span> + ((X509Certificate) ca).getPublicKey());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        caInput.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    String keyStoreType = KeyStore.getDefaultType();</span><br><span class=\"line\">    Log.d(TAG, <span class=\"string\">\"keystore type:\"</span> + keyStoreType);</span><br><span class=\"line\">    KeyStore keyStore = KeyStore.getInstance(keyStoreType);</span><br><span class=\"line\">    keyStore.load(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    keyStore.setCertificateEntry(<span class=\"string\">\"cert\"</span>, ca);</span><br><span class=\"line\"></span><br><span class=\"line\">    String tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();</span><br><span class=\"line\">    Log.d(TAG, <span class=\"string\">\"tmfAlgorithm:\"</span> + tmfAlgorithm);</span><br><span class=\"line\">    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(tmfAlgorithm);</span><br><span class=\"line\">    trustManagerFactory.init(keyStore);</span><br><span class=\"line\"></span><br><span class=\"line\">    mSSLContext = SSLContext.getInstance(<span class=\"string\">\"TLS\"</span>);</span><br><span class=\"line\">    mSSLContext.init(<span class=\"keyword\">null</span>, trustManagerFactory.getTrustManagers(), <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    URL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"https://yinlijun.com\"</span>);</span><br><span class=\"line\">    HttpsURLConnection urlConnection =</span><br><span class=\"line\">            (HttpsURLConnection)url.openConnection();</span><br><span class=\"line\">    urlConnection.setSSLSocketFactory(mSSLContext.getSocketFactory());</span><br><span class=\"line\">    InputStream in = urlConnection.getInputStream();</span><br><span class=\"line\">    copyInputStreamToOutputStream(in, System.out);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (CertificateException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (KeyManagementException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (KeyStoreException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>copyInputStreamToOutputStream方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">copyInputStreamToOutputStream</span><span class=\"params\">(InputStream in, PrintStream out)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((c = in.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        out.write(buffer, <span class=\"number\">0</span>, c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    CertificateFactory cf = CertificateFactory.getInstance(<span class=\"string\">\"X.509\"</span>);</span><br><span class=\"line\">    InputStream caInput = <span class=\"keyword\">new</span> BufferedInputStream(getAssets().open(<span class=\"string\">\"server.crt\"</span>));</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Certificate ca;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ca = cf.generateCertificate(caInput);</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Longer\"</span>, <span class=\"string\">\"ca=\"</span> + ((X509Certificate) ca).getSubjectDN());</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Longer\"</span>, <span class=\"string\">\"key=\"</span> + ((X509Certificate) ca).getPublicKey());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        caInput.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Create an SSLContext that uses our TrustManager</span></span><br><span class=\"line\">    SSLContext context = SSLContext.getInstance(<span class=\"string\">\"TLSv1\"</span>,<span class=\"string\">\"AndroidOpenSSL\"</span>);</span><br><span class=\"line\">    context.init(<span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> TrustManager[]&#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> X509TrustManager() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkClientTrusted</span><span class=\"params\">(X509Certificate[] chain,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                                String authType)</span></span></span><br><span class=\"line\"><span class=\"function\">                        <span class=\"keyword\">throws</span> CertificateException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkServerTrusted</span><span class=\"params\">(X509Certificate[] chain,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                                String authType)</span></span></span><br><span class=\"line\"><span class=\"function\">                        <span class=\"keyword\">throws</span> CertificateException </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (X509Certificate cert : chain) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// Make sure that it hasn't expired.</span></span><br><span class=\"line\">                        cert.checkValidity();</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// Verify the certificate's public key chain.</span></span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            cert.verify(((X509Certificate) ca).getPublicKey());</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">                            e.printStackTrace();</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (InvalidKeyException e) &#123;</span><br><span class=\"line\">                            e.printStackTrace();</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (NoSuchProviderException e) &#123;</span><br><span class=\"line\">                            e.printStackTrace();</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (SignatureException e) &#123;</span><br><span class=\"line\">                            e.printStackTrace();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> X509Certificate[<span class=\"number\">0</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    URL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"https://yinlijun.com/\"</span>);</span><br><span class=\"line\">    HttpsURLConnection urlConnection =</span><br><span class=\"line\">            (HttpsURLConnection)url.openConnection();</span><br><span class=\"line\">    urlConnection.setSSLSocketFactory(context.getSocketFactory());</span><br><span class=\"line\">    InputStream in = urlConnection.getInputStream();</span><br><span class=\"line\">    copyInputStreamToOutputStream(in, System.out);</span><br></pre></td></tr></table></figure>\n<h2 id=\"双向认证\"><a href=\"#双向认证\" class=\"headerlink\" title=\"双向认证\"></a>双向认证</h2><p>单向验证只能验证服务器，如果服务器也想对客户端进行验证，即所谓（双向验证），需要在连接是一起发送客户端证书。</p>\n<h3 id=\"双向认证，服务器代码\"><a href=\"#双向认证，服务器代码\" class=\"headerlink\" title=\"双向认证，服务器代码\"></a>双向认证，服务器代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> tls = <span class=\"built_in\">require</span>(<span class=\"string\">'tls'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">  pfx: fs.readFileSync(<span class=\"string\">'./server.pfx'</span>),</span><br><span class=\"line\">  passphrase: <span class=\"string\">\"123456\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// This is necessary only if using the client certificate authentication.</span></span><br><span class=\"line\">  requestCert: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  rejectUnauthorized: <span class=\"literal\">true</span> <span class=\"comment\">//如果接受也非认证链接，可以删除此行。</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//需要双向认证才需要配置requestCert为true。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = tls.createServer(options, (socket) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'server connected'</span>,</span><br><span class=\"line\">              socket.authorized ? <span class=\"string\">'authorized'</span> : <span class=\"string\">'unauthorized'</span>);</span><br><span class=\"line\">  socket.setEncoding(<span class=\"string\">'utf8'</span>);</span><br><span class=\"line\">  socket.on(<span class=\"string\">'data'</span>, (data) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">      socket.write(data);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  socket.on(<span class=\"string\">'end'</span>, (socket) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"socket closed\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(<span class=\"number\">8000</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'server bound'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"双向认证，android的代码，实现方式一\"><a href=\"#双向认证，android的代码，实现方式一\" class=\"headerlink\" title=\"双向认证，android的代码，实现方式一\"></a>双向认证，android的代码，实现方式一</h3><p>server.pfx和client.p12放到&lt;project_dir&gt;/assets/目录下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    KeyStore trustStore = KeyStore.getInstance(<span class=\"string\">\"bks\"</span>);</span><br><span class=\"line\">    InputStream tsIn = getResources().getAssets().open(<span class=\"string\">\"server.bks\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    KeyStore keyStore = KeyStore.getInstance(<span class=\"string\">\"PKCS12\"</span>);</span><br><span class=\"line\">    InputStream ksIn = getResources().getAssets().open(<span class=\"string\">\"client.p12\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        keyStore.load(ksIn, <span class=\"string\">\"123456\"</span>.toCharArray());</span><br><span class=\"line\">        trustStore.load(tsIn, <span class=\"string\">\"123456\"</span>.toCharArray());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ksIn.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ignore) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            tsIn.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ignore) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(<span class=\"string\">\"X509\"</span>);</span><br><span class=\"line\">    keyManagerFactory.init(keyStore, <span class=\"string\">\"123456\"</span>.toCharArray());</span><br><span class=\"line\">    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());</span><br><span class=\"line\">    trustManagerFactory.init(trustStore);</span><br><span class=\"line\">    mSSLContext = SSLContext.getInstance(<span class=\"string\">\"TLS\"</span>);</span><br><span class=\"line\">    mSSLContext.init(<span class=\"keyword\">null</span>, trustManagerFactory.getTrustManagers(), <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    mSSLSocket = (SSLSocket) mSSLContext.getSocketFactory().createSocket(<span class=\"string\">\"yinlijun.com\"</span>, <span class=\"number\">8000</span>);</span><br><span class=\"line\">    mSSLSocket.startHandshake();</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (KeyManagementException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (KeyStoreException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (UnrecoverableKeyException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"双向认证，android的代码，实现方式2，用server-crt替代server-bks\"><a href=\"#双向认证，android的代码，实现方式2，用server-crt替代server-bks\" class=\"headerlink\" title=\"双向认证，android的代码，实现方式2，用server.crt替代server.bks\"></a>双向认证，android的代码，实现方式2，用server.crt替代server.bks</h3><p>server.crt和client.p12放到&lt;project_dir&gt;/assets/目录下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    CertificateFactory cf = CertificateFactory.getInstance(<span class=\"string\">\"X.509\"</span>);</span><br><span class=\"line\">    InputStream caInput = <span class=\"keyword\">new</span> BufferedInputStream(getAssets().open(<span class=\"string\">\"server.crt\"</span>));</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Certificate ca;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ca = cf.generateCertificate(caInput);</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Longer\"</span>, <span class=\"string\">\"ca=\"</span> + ((X509Certificate) ca).getSubjectDN());</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"Longer\"</span>, <span class=\"string\">\"key=\"</span> + ((X509Certificate) ca).getPublicKey());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        caInput.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    KeyStore keyStore = KeyStore.getInstance(<span class=\"string\">\"PKCS12\"</span>);</span><br><span class=\"line\">    InputStream ksIn = getResources().getAssets().open(<span class=\"string\">\"client.p12\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        keyStore.load(ksIn, <span class=\"string\">\"123456\"</span>.toCharArray());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ksIn.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ignore) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(<span class=\"string\">\"X509\"</span>);</span><br><span class=\"line\">    keyManagerFactory.init(keyStore, <span class=\"string\">\"123456\"</span>.toCharArray());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Create an SSLContext that uses our TrustManager</span></span><br><span class=\"line\">    SSLContext context = SSLContext.getInstance(<span class=\"string\">\"TLSv1\"</span>,<span class=\"string\">\"AndroidOpenSSL\"</span>);</span><br><span class=\"line\">    context.init(keyManagerFactory.getKeyManagers(), <span class=\"keyword\">new</span> TrustManager[]&#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> X509TrustManager() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkClientTrusted</span><span class=\"params\">(X509Certificate[] chain,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                                String authType)</span></span></span><br><span class=\"line\"><span class=\"function\">                        <span class=\"keyword\">throws</span> CertificateException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkServerTrusted</span><span class=\"params\">(X509Certificate[] chain,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                                String authType)</span></span></span><br><span class=\"line\"><span class=\"function\">                        <span class=\"keyword\">throws</span> CertificateException </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (X509Certificate cert : chain) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// Make sure that it hasn't expired.</span></span><br><span class=\"line\">                        cert.checkValidity();</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// Verify the certificate's public key chain.</span></span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            cert.verify(((X509Certificate) ca).getPublicKey());</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">                            e.printStackTrace();</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (InvalidKeyException e) &#123;</span><br><span class=\"line\">                            e.printStackTrace();</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (NoSuchProviderException e) &#123;</span><br><span class=\"line\">                            e.printStackTrace();</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (SignatureException e) &#123;</span><br><span class=\"line\">                            e.printStackTrace();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> X509Certificate[<span class=\"number\">0</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n<p>项目地址：</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><a href=\"https://matoski.com/article/node-express-generate-ssl/\" target=\"_blank\" rel=\"noopener\">How to generate self-signed certificate for usage in Express4 or Node.js HTTP</a></li>\n<li><a href=\"http://blog.csdn.net/fyang2007/article/details/6180361\" target=\"_blank\" rel=\"noopener\">SSL证书生成方法</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/22816331\" target=\"_blank\" rel=\"noopener\">Android安全开发之安全使用HTTPS</a></li>\n<li><a href=\"https://developer.android.com/training/articles/security-ssl.html#nogotofail\" target=\"_blank\" rel=\"noopener\">通过 HTTPS 和 SSL 确保安全</a> (要翻墙)</li>\n<li><a href=\"https://nodejs.org/api/tls.html\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/api/tls.html</a></li>\n<li><a href=\"https://gist.github.com/Frank-Zhu/41e21a00df26d63cd38d\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/Frank-Zhu/41e21a00df26d63cd38d</a></li>\n</ul>"}],"PostAsset":[{"_id":"source/_posts/bluecoffee/1.jpeg","slug":"1.jpeg","post":"cjz4aandd0009biui657dl3ok","modified":0,"renderable":0},{"_id":"source/_posts/bluecoffee/6.jpeg","slug":"6.jpeg","post":"cjz4aandd0009biui657dl3ok","modified":0,"renderable":0},{"_id":"source/_posts/bluecoffee/7.jpeg","slug":"7.jpeg","post":"cjz4aandd0009biui657dl3ok","modified":0,"renderable":0},{"_id":"source/_posts/bluecoffee/8.jpeg","slug":"8.jpeg","post":"cjz4aandd0009biui657dl3ok","modified":0,"renderable":0},{"_id":"source/_posts/bluecoffee/5.jpeg","slug":"5.jpeg","post":"cjz4aandd0009biui657dl3ok","modified":0,"renderable":0},{"_id":"source/_posts/open-flag/lovely_candy.png","slug":"lovely_candy.png","post":"cjz4aaneo001nbiuiz4zgf08a","modified":0,"renderable":0},{"_id":"source/_posts/bluecoffee/2.jpeg","slug":"2.jpeg","post":"cjz4aandd0009biui657dl3ok","modified":0,"renderable":0},{"_id":"source/_posts/bluecoffee/3.jpeg","slug":"3.jpeg","post":"cjz4aandd0009biui657dl3ok","modified":0,"renderable":0},{"_id":"source/_posts/bluecoffee/4.jpeg","slug":"4.jpeg","post":"cjz4aandd0009biui657dl3ok","modified":0,"renderable":0},{"_id":"source/_posts/xjzw/db_fkdwxr_score.png","slug":"db_fkdwxr_score.png","post":"cjz4aankl007fbiuiieviza65","modified":0,"renderable":0},{"_id":"source/_posts/xjzw/db_xjzw_score.jpg","slug":"db_xjzw_score.jpg","post":"cjz4aankl007fbiuiieviza65","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjz4aandd0009biui657dl3ok","category_id":"cjz4aandj000dbiuisey3zwq1","_id":"cjz4aandt000obiui59r5ccxr"},{"post_id":"cjz4aanei0019biui1lynpebm","category_id":"cjz4aaneh0015biuiul3g0nrb","_id":"cjz4aanem001hbiuiz7wmfjfo"},{"post_id":"cjz4aaneg0013biui1jmg0uqv","category_id":"cjz4aaneh0015biuiul3g0nrb","_id":"cjz4aaneo001lbiuibw9j2llo"},{"post_id":"cjz4aanel001fbiuid5xle71l","category_id":"cjz4aaneh0015biuiul3g0nrb","_id":"cjz4aanep001obiuiro8eks4u"},{"post_id":"cjz4aaneg0014biuivuz4z33y","category_id":"cjz4aaneh0015biuiul3g0nrb","_id":"cjz4aaneq001rbiuiyhiytlct"},{"post_id":"cjz4aaneh0017biuin09m7ydw","category_id":"cjz4aaneh0015biuiul3g0nrb","_id":"cjz4aaner001vbiuii03jimgl"},{"post_id":"cjz4aaneo001nbiuiz4zgf08a","category_id":"cjz4aaneq001tbiui29dql753","_id":"cjz4aanev0023biuipl4r4bdi"},{"post_id":"cjz4aanez002cbiuig6bek9yu","category_id":"cjz4aanex0029biuimdrgm1ef","_id":"cjz4aanf3002jbiui0tq997vt"},{"post_id":"cjz4aanew0025biui3kepjv8u","category_id":"cjz4aanex0029biuimdrgm1ef","_id":"cjz4aanf5002obiuirxwh8i7d"},{"post_id":"cjz4aanf1002gbiuinlrh7gtg","category_id":"cjz4aanex0029biuimdrgm1ef","_id":"cjz4aanf6002qbiuihhkqd0n3"},{"post_id":"cjz4aanew0027biuidxn7npm2","category_id":"cjz4aanex0029biuimdrgm1ef","_id":"cjz4aanf8002tbiuifcac5r4f"},{"post_id":"cjz4aaney002abiuik1pl7yvk","category_id":"cjz4aanex0029biuimdrgm1ef","_id":"cjz4aanf9002wbiuio4rdhdnl"},{"post_id":"cjz4aanki007bbiuijhw5ee86","category_id":"cjz4aaneh0015biuiul3g0nrb","_id":"cjz4aankm007hbiuibbelhmcf"},{"post_id":"cjz4aankk007dbiuis1s0erq9","category_id":"cjz4aaneh0015biuiul3g0nrb","_id":"cjz4aankm007jbiuifkqv7xm3"}],"PostTag":[{"post_id":"cjz4aand00001biui5jvgfqqg","tag_id":"cjz4aand60003biuim5vk19n7","_id":"cjz4aandh000cbiui7w78rf4y"},{"post_id":"cjz4aand00001biui5jvgfqqg","tag_id":"cjz4aandb0007biuis02y471v","_id":"cjz4aandk000fbiui9j50wli0"},{"post_id":"cjz4aand40002biui9l24fi05","tag_id":"cjz4aandf000abiuimhr24un5","_id":"cjz4aandm000ibiui516o76fm"},{"post_id":"cjz4aand80004biui4lsg9rqi","tag_id":"cjz4aandl000gbiuikq710eqz","_id":"cjz4aands000mbiuia547mp44"},{"post_id":"cjz4aand90005biui92ktj187","tag_id":"cjz4aando000kbiuio8htk7ds","_id":"cjz4aaned000vbiuisih5mx35"},{"post_id":"cjz4aand90005biui92ktj187","tag_id":"cjz4aandy000qbiui3af72xib","_id":"cjz4aaned000xbiuipwow1grj"},{"post_id":"cjz4aanda0006biuintt75udl","tag_id":"cjz4aandy000qbiui3af72xib","_id":"cjz4aanee0010biui273pyx23"},{"post_id":"cjz4aandb0008biui127xulx5","tag_id":"cjz4aaned000ybiui3lw6bna5","_id":"cjz4aanei0018biuigpuq5owi"},{"post_id":"cjz4aandb0008biui127xulx5","tag_id":"cjz4aanef0012biuislnt5zbp","_id":"cjz4aanej001abiuiyh5adlyc"},{"post_id":"cjz4aandd0009biui657dl3ok","tag_id":"cjz4aaneh0016biuimi367lsv","_id":"cjz4aanel001ebiui2brtbtw2"},{"post_id":"cjz4aandf000bbiui9a44h85j","tag_id":"cjz4aanek001dbiuix9wjgv5v","_id":"cjz4aaneo001mbiuis3lzmnwv"},{"post_id":"cjz4aandj000ebiuisn2gs9wf","tag_id":"cjz4aanek001dbiuix9wjgv5v","_id":"cjz4aaneq001sbiuiuba04hod"},{"post_id":"cjz4aandl000hbiui5ihe5j27","tag_id":"cjz4aanek001dbiuix9wjgv5v","_id":"cjz4aanes001ybiuiupymy2tr"},{"post_id":"cjz4aandn000jbiuin8ft8ub0","tag_id":"cjz4aaner001wbiuiidf1jqxo","_id":"cjz4aanew0026biui4o8xrbm2"},{"post_id":"cjz4aandn000jbiuin8ft8ub0","tag_id":"cjz4aaneu0020biuipqnj1jv1","_id":"cjz4aanex0028biuihj1iwl1t"},{"post_id":"cjz4aando000lbiui1nputuds","tag_id":"cjz4aanev0024biuie4nes5o6","_id":"cjz4aanf2002hbiuit6fv5x85"},{"post_id":"cjz4aando000lbiui1nputuds","tag_id":"cjz4aaney002bbiuiuvrtwudc","_id":"cjz4aanf3002lbiuiu3vfflmb"},{"post_id":"cjz4aandt000nbiuiuu9d0qwy","tag_id":"cjz4aandy000qbiui3af72xib","_id":"cjz4aanf8002ubiuigxhvhv7s"},{"post_id":"cjz4aandt000nbiuiuu9d0qwy","tag_id":"cjz4aanf3002mbiui4vma0rpb","_id":"cjz4aanf9002xbiuiu5co76ws"},{"post_id":"cjz4aandt000nbiuiuu9d0qwy","tag_id":"cjz4aando000kbiuio8htk7ds","_id":"cjz4aanfb0030biui0zudna4v"},{"post_id":"cjz4aandx000pbiuij89u7dvq","tag_id":"cjz4aanev0024biuie4nes5o6","_id":"cjz4aanfc0032biuimviqvvca"},{"post_id":"cjz4aane5000rbiuibwutmk48","tag_id":"cjz4aanfa002ybiuieaib5aq6","_id":"cjz4aanfe0037biuihkx6da0s"},{"post_id":"cjz4aane5000rbiuibwutmk48","tag_id":"cjz4aanfc0033biuicm2ii90x","_id":"cjz4aanfe0038biuidrtw7soy"},{"post_id":"cjz4aane5000rbiuibwutmk48","tag_id":"cjz4aanev0024biuie4nes5o6","_id":"cjz4aanff003abiuilauglgoo"},{"post_id":"cjz4aane9000sbiuitdg0bmd4","tag_id":"cjz4aanfe0036biuim8kugfgv","_id":"cjz4aanff003cbiui8ycl8i6z"},{"post_id":"cjz4aane9000sbiuitdg0bmd4","tag_id":"cjz4aanfe0039biuiowk8sggu","_id":"cjz4aanff003dbiuijj4os80o"},{"post_id":"cjz4aaned000wbiuijcqg96a3","tag_id":"cjz4aanff003bbiuijqxx5n1k","_id":"cjz4aanfg003fbiuitkkh4whj"},{"post_id":"cjz4aanee000zbiuink46rtl4","tag_id":"cjz4aanf3002mbiui4vma0rpb","_id":"cjz4aanfg003hbiuibhrycknc"},{"post_id":"cjz4aanee000zbiuink46rtl4","tag_id":"cjz4aando000kbiuio8htk7ds","_id":"cjz4aanfg003ibiuiyin7vh25"},{"post_id":"cjz4aaneg0013biui1jmg0uqv","tag_id":"cjz4aanfg003gbiuirouzcv4p","_id":"cjz4aanfi003nbiui6r3h1jdc"},{"post_id":"cjz4aaneg0013biui1jmg0uqv","tag_id":"cjz4aanfg003jbiuie62mvik2","_id":"cjz4aanfi003obiui2d569kqh"},{"post_id":"cjz4aaneg0013biui1jmg0uqv","tag_id":"cjz4aanfh003kbiui4sz0lgtc","_id":"cjz4aanfj003qbiuio5j5e2zp"},{"post_id":"cjz4aaneg0013biui1jmg0uqv","tag_id":"cjz4aanfh003lbiui6ayar3rb","_id":"cjz4aanfj003rbiuid99o20hk"},{"post_id":"cjz4aaneg0014biuivuz4z33y","tag_id":"cjz4aanfg003gbiuirouzcv4p","_id":"cjz4aanfk003vbiuijjn0hu3r"},{"post_id":"cjz4aaneg0014biuivuz4z33y","tag_id":"cjz4aanfg003jbiuie62mvik2","_id":"cjz4aanfl003wbiuizpdzfirp"},{"post_id":"cjz4aaneg0014biuivuz4z33y","tag_id":"cjz4aanfh003kbiui4sz0lgtc","_id":"cjz4aanfl003ybiuixhbf8ax1"},{"post_id":"cjz4aaneg0014biuivuz4z33y","tag_id":"cjz4aanfh003lbiui6ayar3rb","_id":"cjz4aanfl003zbiuicylowhp6"},{"post_id":"cjz4aaneh0017biuin09m7ydw","tag_id":"cjz4aanfg003gbiuirouzcv4p","_id":"cjz4aanfm0043biuietmtcvgc"},{"post_id":"cjz4aaneh0017biuin09m7ydw","tag_id":"cjz4aanfg003jbiuie62mvik2","_id":"cjz4aanfm0044biuin6n31je8"},{"post_id":"cjz4aaneh0017biuin09m7ydw","tag_id":"cjz4aanfh003kbiui4sz0lgtc","_id":"cjz4aanfn0046biuim6hgrves"},{"post_id":"cjz4aaneh0017biuin09m7ydw","tag_id":"cjz4aanfh003lbiui6ayar3rb","_id":"cjz4aanfn0047biuis5sx02ft"},{"post_id":"cjz4aanei0019biui1lynpebm","tag_id":"cjz4aanfg003jbiuie62mvik2","_id":"cjz4aanfo004bbiui424i16cl"},{"post_id":"cjz4aanei0019biui1lynpebm","tag_id":"cjz4aanfh003kbiui4sz0lgtc","_id":"cjz4aanfo004cbiuixfucwukl"},{"post_id":"cjz4aanei0019biui1lynpebm","tag_id":"cjz4aanfn0048biuidjrzh9xm","_id":"cjz4aanfo004ebiuiuepm75n5"},{"post_id":"cjz4aanei0019biui1lynpebm","tag_id":"cjz4aanfg003gbiuirouzcv4p","_id":"cjz4aanfo004fbiui6gg1nfcx"},{"post_id":"cjz4aanej001bbiuirdaznprl","tag_id":"cjz4aanfn004abiuiy8fbcnsl","_id":"cjz4aanfp004hbiuibc0wobk5"},{"post_id":"cjz4aanej001bbiuirdaznprl","tag_id":"cjz4aanfh003kbiui4sz0lgtc","_id":"cjz4aanfp004ibiui6b05bcly"},{"post_id":"cjz4aanel001fbiuid5xle71l","tag_id":"cjz4aanfg003gbiuirouzcv4p","_id":"cjz4aanfq004mbiui58gcfyt6"},{"post_id":"cjz4aanel001fbiuid5xle71l","tag_id":"cjz4aanfg003jbiuie62mvik2","_id":"cjz4aanfq004nbiui9tvdc4i0"},{"post_id":"cjz4aanel001fbiuid5xle71l","tag_id":"cjz4aanfh003kbiui4sz0lgtc","_id":"cjz4aanfq004pbiuifqdb85ou"},{"post_id":"cjz4aanem001gbiuit9rby7hx","tag_id":"cjz4aanfp004lbiuik8t3gmxq","_id":"cjz4aanfq004rbiuitun2gfnv"},{"post_id":"cjz4aanem001gbiuit9rby7hx","tag_id":"cjz4aanfq004obiuiv4jrjllg","_id":"cjz4aanfq004sbiuihayykwoi"},{"post_id":"cjz4aaneo001nbiuiz4zgf08a","tag_id":"cjz4aanfq004qbiui7le1o9vb","_id":"cjz4aanfq004ubiuiw0xax8lm"},{"post_id":"cjz4aaneq001ubiuiydldmiwt","tag_id":"cjz4aanfq004tbiuimq1ftf7t","_id":"cjz4aanfs004xbiuimniixbh4"},{"post_id":"cjz4aaneq001ubiuiydldmiwt","tag_id":"cjz4aanfh003kbiui4sz0lgtc","_id":"cjz4aanfs004ybiuihcl6ww80"},{"post_id":"cjz4aanet001zbiuih56yuxhq","tag_id":"cjz4aandy000qbiui3af72xib","_id":"cjz4aanfs0051biuincbhg4yo"},{"post_id":"cjz4aanet001zbiuih56yuxhq","tag_id":"cjz4aanfr004wbiui5zekdvmp","_id":"cjz4aanfs0052biuirj75ysta"},{"post_id":"cjz4aanet001zbiuih56yuxhq","tag_id":"cjz4aanfs004zbiui2slh109b","_id":"cjz4aanft0054biuid0szd5d0"},{"post_id":"cjz4aaneu0021biuiiyoswgoy","tag_id":"cjz4aanfg003jbiuie62mvik2","_id":"cjz4aanft0055biuihwztglr1"},{"post_id":"cjz4aanev0022biuia5cfrgvz","tag_id":"cjz4aanfs0053biuifyhh7jl9","_id":"cjz4aanft0058biuii79c68ky"},{"post_id":"cjz4aanev0022biuia5cfrgvz","tag_id":"cjz4aanft0056biuitxsqipb1","_id":"cjz4aanfu0059biui4umd9f27"},{"post_id":"cjz4aanev0022biuia5cfrgvz","tag_id":"cjz4aandb0007biuis02y471v","_id":"cjz4aanfu005bbiuitdx0hdre"},{"post_id":"cjz4aanew0025biui3kepjv8u","tag_id":"cjz4aanfg003jbiuie62mvik2","_id":"cjz4aanfv005ebiui72ahat92"},{"post_id":"cjz4aanew0025biui3kepjv8u","tag_id":"cjz4aanfu005abiuirz79ilvi","_id":"cjz4aanfv005fbiuiqc6jjo0k"},{"post_id":"cjz4aanew0025biui3kepjv8u","tag_id":"cjz4aanfu005cbiui6rbkxhxd","_id":"cjz4aanfw005hbiui1o97rie0"},{"post_id":"cjz4aanew0027biuidxn7npm2","tag_id":"cjz4aanfg003jbiuie62mvik2","_id":"cjz4aanfx005kbiuimjl73uet"},{"post_id":"cjz4aanew0027biuidxn7npm2","tag_id":"cjz4aanfu005abiuirz79ilvi","_id":"cjz4aanfx005lbiuiwyne23qx"},{"post_id":"cjz4aanew0027biuidxn7npm2","tag_id":"cjz4aanfu005cbiui6rbkxhxd","_id":"cjz4aanfy005nbiuiymj8lt6t"},{"post_id":"cjz4aaney002abiuik1pl7yvk","tag_id":"cjz4aanfg003jbiuie62mvik2","_id":"cjz4aanfy005qbiui59y7iaac"},{"post_id":"cjz4aaney002abiuik1pl7yvk","tag_id":"cjz4aanfu005abiuirz79ilvi","_id":"cjz4aanfy005rbiuiewf9593u"},{"post_id":"cjz4aaney002abiuik1pl7yvk","tag_id":"cjz4aanfu005cbiui6rbkxhxd","_id":"cjz4aanfz005tbiuif3zotumn"},{"post_id":"cjz4aanez002cbiuig6bek9yu","tag_id":"cjz4aanfg003jbiuie62mvik2","_id":"cjz4aang0005wbiuiwi87r7kf"},{"post_id":"cjz4aanez002cbiuig6bek9yu","tag_id":"cjz4aanfu005abiuirz79ilvi","_id":"cjz4aang0005xbiuiulfk2z4j"},{"post_id":"cjz4aanez002cbiuig6bek9yu","tag_id":"cjz4aanfu005cbiui6rbkxhxd","_id":"cjz4aang0005zbiui8vtsq98v"},{"post_id":"cjz4aanf0002dbiuipi7eiqs9","tag_id":"cjz4aanfg003jbiuie62mvik2","_id":"cjz4aang10062biuizaktuly8"},{"post_id":"cjz4aanf0002dbiuipi7eiqs9","tag_id":"cjz4aanfu005abiuirz79ilvi","_id":"cjz4aang10063biuimp11l2ou"},{"post_id":"cjz4aanf0002dbiuipi7eiqs9","tag_id":"cjz4aanfu005cbiui6rbkxhxd","_id":"cjz4aang20065biui4dxj1lau"},{"post_id":"cjz4aanf1002gbiuinlrh7gtg","tag_id":"cjz4aanfg003jbiuie62mvik2","_id":"cjz4aang20068biuiij8dhphu"},{"post_id":"cjz4aanf1002gbiuinlrh7gtg","tag_id":"cjz4aanfu005abiuirz79ilvi","_id":"cjz4aang20069biuiybzsghio"},{"post_id":"cjz4aanf1002gbiuinlrh7gtg","tag_id":"cjz4aanfu005cbiui6rbkxhxd","_id":"cjz4aang3006bbiuivyx223ey"},{"post_id":"cjz4aanf2002ibiui8ccw5j1a","tag_id":"cjz4aaned000ybiui3lw6bna5","_id":"cjz4aang3006dbiuihogbkxwf"},{"post_id":"cjz4aanf2002ibiui8ccw5j1a","tag_id":"cjz4aang20067biuii59qeuz2","_id":"cjz4aang3006ebiuify7t91mu"},{"post_id":"cjz4aanf2002ibiui8ccw5j1a","tag_id":"cjz4aang2006abiuicggovoc5","_id":"cjz4aang3006gbiuilwlpozsx"},{"post_id":"cjz4aanf4002nbiui0byci7on","tag_id":"cjz4aandy000qbiui3af72xib","_id":"cjz4aang4006ibiui8zb3aq54"},{"post_id":"cjz4aanf4002nbiui0byci7on","tag_id":"cjz4aang3006cbiuikbyx4s0f","_id":"cjz4aang4006jbiuiiv5vu0ej"},{"post_id":"cjz4aanf4002nbiui0byci7on","tag_id":"cjz4aang3006fbiuicczhax7f","_id":"cjz4aang4006lbiui08umno1h"},{"post_id":"cjz4aanf5002pbiui47i7k5pl","tag_id":"cjz4aang3006hbiuitanzomos","_id":"cjz4aang4006mbiui21wk4vqk"},{"post_id":"cjz4aanf7002sbiuilm6ss4tu","tag_id":"cjz4aanf3002mbiui4vma0rpb","_id":"cjz4aang4006obiuiw9c4riw5"},{"post_id":"cjz4aanf7002sbiuilm6ss4tu","tag_id":"cjz4aang4006kbiuiuw9k6ci4","_id":"cjz4aang4006pbiuia7y6d1qr"},{"post_id":"cjz4aanf8002vbiui8h7kp4rq","tag_id":"cjz4aanf3002mbiui4vma0rpb","_id":"cjz4aang5006rbiuidwu5ho7c"},{"post_id":"cjz4aanf8002vbiui8h7kp4rq","tag_id":"cjz4aandy000qbiui3af72xib","_id":"cjz4aang5006sbiuigujk0xgy"},{"post_id":"cjz4aanf8002vbiui8h7kp4rq","tag_id":"cjz4aang4006nbiuir8dt0vks","_id":"cjz4aang5006ubiuipcmzbui1"},{"post_id":"cjz4aanfa002zbiui7dld2mkm","tag_id":"cjz4aang4006qbiuiz9i8xvl7","_id":"cjz4aang6006wbiuiee6hyocd"},{"post_id":"cjz4aanfa002zbiui7dld2mkm","tag_id":"cjz4aang5006tbiuipqlrjnzs","_id":"cjz4aang6006xbiuihm1wvxqy"},{"post_id":"cjz4aanfb0031biuivfccginh","tag_id":"cjz4aang4006qbiuiz9i8xvl7","_id":"cjz4aang70070biui938fo461"},{"post_id":"cjz4aanfb0031biuivfccginh","tag_id":"cjz4aang6006ybiui2mssq0at","_id":"cjz4aang70071biuifgmmkn16"},{"post_id":"cjz4aanfc0034biui6f60l3vc","tag_id":"cjz4aanf3002mbiui4vma0rpb","_id":"cjz4aang70073biui38necp55"},{"post_id":"cjz4aanfc0034biui6f60l3vc","tag_id":"cjz4aandy000qbiui3af72xib","_id":"cjz4aang70074biuihgpmdb1r"},{"post_id":"cjz4aanfc0034biui6f60l3vc","tag_id":"cjz4aang6006zbiuihha9tywz","_id":"cjz4aang70075biuirkyc4h10"},{"post_id":"cjz4aanfc0034biui6f60l3vc","tag_id":"cjz4aang70072biuin0fghk3b","_id":"cjz4aang70076biui8twvlun0"},{"post_id":"cjz4aankg0079biui1h5053p0","tag_id":"cjz4aandy000qbiui3af72xib","_id":"cjz4aankj007cbiuidck5j51i"},{"post_id":"cjz4aankg0079biui1h5053p0","tag_id":"cjz4aanfe0039biuiowk8sggu","_id":"cjz4aankl007ebiui2h8s2xqz"},{"post_id":"cjz4aankg0079biui1h5053p0","tag_id":"cjz4aanff003bbiuijqxx5n1k","_id":"cjz4aankm007gbiuiek5d63rp"},{"post_id":"cjz4aanki007bbiuijhw5ee86","tag_id":"cjz4aanfg003gbiuirouzcv4p","_id":"cjz4aankm007ibiui8wxldbxq"},{"post_id":"cjz4aanki007bbiuijhw5ee86","tag_id":"cjz4aanfg003jbiuie62mvik2","_id":"cjz4aankn007kbiuio7j5ghoq"},{"post_id":"cjz4aanki007bbiuijhw5ee86","tag_id":"cjz4aanfh003kbiui4sz0lgtc","_id":"cjz4aankn007lbiuipohtgiiu"},{"post_id":"cjz4aankk007dbiuis1s0erq9","tag_id":"cjz4aanfg003gbiuirouzcv4p","_id":"cjz4aankn007mbiuiyoeh1027"},{"post_id":"cjz4aankk007dbiuis1s0erq9","tag_id":"cjz4aanfg003jbiuie62mvik2","_id":"cjz4aankn007nbiuikpj1juxj"},{"post_id":"cjz4aankk007dbiuis1s0erq9","tag_id":"cjz4aanfh003kbiui4sz0lgtc","_id":"cjz4aankn007obiui1in7htxm"},{"post_id":"cjz4aankk007dbiuis1s0erq9","tag_id":"cjz4aanfh003lbiui6ayar3rb","_id":"cjz4aankn007pbiui2g0osv7q"},{"post_id":"cjz4aankc0077biuicrwb07xy","tag_id":"cjz4aanki007abiuignkc2fab","_id":"cjz4aanko007qbiuip8zmrsls"},{"post_id":"cjz4aanlr007rbiuiv3bkcuj8","tag_id":"cjz4aandy000qbiui3af72xib","_id":"cjz4aanlt007ubiui582c0d6z"},{"post_id":"cjz4aanlr007rbiuiv3bkcuj8","tag_id":"cjz4aanfh003kbiui4sz0lgtc","_id":"cjz4aanlt007vbiuixu2i93in"},{"post_id":"cjz4aanlr007rbiuiv3bkcuj8","tag_id":"cjz4aanls007sbiui1gemeg20","_id":"cjz4aanlt007wbiuit5f31zao"},{"post_id":"cjz4aanlr007rbiuiv3bkcuj8","tag_id":"cjz4aanlt007tbiuiob9y65o8","_id":"cjz4aanlt007xbiuicvl35du1"}],"Tag":[{"name":"mysql","_id":"cjz4aand60003biuim5vk19n7"},{"name":"ecs","_id":"cjz4aandb0007biuis02y471v"},{"name":"javascript","_id":"cjz4aandf000abiuimhr24un5"},{"name":"家庭","_id":"cjz4aandl000gbiuikq710eqz"},{"name":"android studio","_id":"cjz4aando000kbiuio8htk7ds"},{"name":"android","_id":"cjz4aandy000qbiui3af72xib"},{"name":"AWS","_id":"cjz4aaned000ybiui3lw6bna5"},{"name":"ssh","_id":"cjz4aanef0012biuislnt5zbp"},{"name":"小蓝咖啡","_id":"cjz4aaneh0016biuimi367lsv"},{"name":"jQuery","_id":"cjz4aanek001dbiuix9wjgv5v"},{"name":"spring boot","_id":"cjz4aaner001wbiuiidf1jqxo"},{"name":"enum","_id":"cjz4aaneu0020biuipqnj1jv1"},{"name":"git","_id":"cjz4aanev0024biuie4nes5o6"},{"name":".gitignore","_id":"cjz4aaney002bbiuiuvrtwudc"},{"name":"ubuntu","_id":"cjz4aanf3002mbiui4vma0rpb"},{"name":"hexo","_id":"cjz4aanfa002ybiuieaib5aq6"},{"name":"ECS","_id":"cjz4aanfc0033biuicm2ii90x"},{"name":"openjdk","_id":"cjz4aanfe0036biuim8kugfgv"},{"name":"java","_id":"cjz4aanfe0039biuiowk8sggu"},{"name":"kotlin","_id":"cjz4aanff003bbiuijqxx5n1k"},{"name":"express","_id":"cjz4aanfg003gbiuirouzcv4p"},{"name":"react","_id":"cjz4aanfg003jbiuie62mvik2"},{"name":"nodejs","_id":"cjz4aanfh003kbiui4sz0lgtc"},{"name":"antd","_id":"cjz4aanfh003lbiui6ayar3rb"},{"name":"ECS， nginx","_id":"cjz4aanfn0048biuidjrzh9xm"},{"name":"nginx","_id":"cjz4aanfn004abiuiy8fbcnsl"},{"name":"ngrok","_id":"cjz4aanfp004lbiuik8t3gmxq"},{"name":"nodjs","_id":"cjz4aanfq004obiuiv4jrjllg"},{"name":"个人计划和总结","_id":"cjz4aanfq004qbiui7le1o9vb"},{"name":"pm2","_id":"cjz4aanfq004tbiuimq1ftf7t"},{"name":"button","_id":"cjz4aanfr004wbiui5zekdvmp"},{"name":"progressbar","_id":"cjz4aanfs004zbiui2slh109b"},{"name":"qiniu","_id":"cjz4aanfs0053biuifyhh7jl9"},{"name":"aliyun","_id":"cjz4aanft0056biuitxsqipb1"},{"name":"react-router","_id":"cjz4aanfu005abiuirz79ilvi"},{"name":"翻译文档","_id":"cjz4aanfu005cbiui6rbkxhxd"},{"name":"Linux","_id":"cjz4aang20067biuii59qeuz2"},{"name":"Spring Boot","_id":"cjz4aang2006abiuicggovoc5"},{"name":"debug","_id":"cjz4aang3006cbiuikbyx4s0f"},{"name":"c/c++","_id":"cjz4aang3006fbiuicczhax7f"},{"name":"react, spring boot","_id":"cjz4aang3006hbiuitanzomos"},{"name":"update-alternatives","_id":"cjz4aang4006kbiuiuw9k6ci4"},{"name":"环境搭建","_id":"cjz4aang4006nbiuir8dt0vks"},{"name":"windows","_id":"cjz4aang4006qbiuiz9i8xvl7"},{"name":"npm","_id":"cjz4aang5006tbiuipqlrjnzs"},{"name":"mongodb","_id":"cjz4aang6006ybiui2mssq0at"},{"name":"jdk","_id":"cjz4aang6006zbiuihha9tywz"},{"name":"make","_id":"cjz4aang70072biuin0fghk3b"},{"name":"css","_id":"cjz4aanki007abiuignkc2fab"},{"name":"https","_id":"cjz4aanls007sbiui1gemeg20"},{"name":"openssl","_id":"cjz4aanlt007tbiuiob9y65o8"}]}}