{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.gitignore","hash":"c8d6a73b9e17f0f8a3716e4ada6960d3180425a6","modified":1473391482468},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1473391482468},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1473391482468},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1473391482468},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1473391482468},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1473391482468},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1473391482468},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1473391482468},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1473391482468},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1473391482468},{"_id":"themes/next/_config.yml","hash":"5721d6ab8f093f27f3159794a6f3764e779c1b14","modified":1473391597922},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1473391482471},{"_id":"source/_posts/chapter-4.md","hash":"adbbda001486fba0b97dd35564c9ff83a2d05177","modified":1473646401831},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1473391482464},{"_id":"themes/next/.git/config","hash":"91b6a53b2a7f929b698734717a38d4ac169f0c1f","modified":1473391482465},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1473391475728},{"_id":"themes/next/.git/index","hash":"692bb21ecd2427822f366e712d819b4780c195eb","modified":1473394031769},{"_id":"themes/next/.git/packed-refs","hash":"5299dd07c22750af4a0d99f89ea2c8e2d52787e3","modified":1473391482464},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1473391482468},{"_id":"source/_posts/chapter-2.md","hash":"f71494cbc4cdae1397b3c68d5aa1e6133628cf56","modified":1473646418890},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1473391482468},{"_id":"source/_posts/chapter-3.md","hash":"bbf7ff3b75e161680cf5e62896ccd27c748b9967","modified":1473748213344},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1473391482468},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1473391482468},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1473391482468},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1473391482468},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1473391482468},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1473391482468},{"_id":"themes/next/languages/ko.yml","hash":"ce8b047c89daae77c03482fc76f16ffec6bdbf2d","modified":1473391482468},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1473391482469},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1473391482469},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1473391482469},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1473391482469},{"_id":"source/_posts/CSS-The-Definitive-Guide.md","hash":"95fae7c7301ca86b2eeac192c4bb602c743235e8","modified":1473394637155},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1473391482469},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1473391482469},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1473391482469},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1473391482471},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1473391482471},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1473391482471},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1473391482471},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1473391482486},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1473391482486},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1473391482471},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1473391482486},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473391482474},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1473391482471},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1473391482471},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1473391475727},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1473391475728},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1473391475728},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1473391475728},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1473391475728},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1473391475728},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1473391475728},{"_id":"themes/next/.git/logs/HEAD","hash":"28a41ee5cd7353bf28b0de37291a5e6afc49a119","modified":1473391482465},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1473391482469},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1473391482469},{"_id":"themes/next/layout/_macro/post.swig","hash":"f3895bf44a9fb7c462f2e57b9a914703c2f152ba","modified":1473391482469},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1a77843ce5eac62151dc3d38f0a36c43e19e1a74","modified":1473391482469},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1473391482469},{"_id":"themes/next/layout/_partials/comments.swig","hash":"58fd826ca75b0cbc48b61a58da4b841e2fa34403","modified":1473391482469},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1473391482469},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4fe588ff8ba8587885c2936db2df490774f89e10","modified":1473391482469},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1473391482469},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1473391482469},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1473391482469},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1473391482469},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1473391482470},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1473391482470},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1473391482470},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1473391482471},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1473391482471},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1473391482471},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1473391482471},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1473391482474},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1473391482474},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1473391482474},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1473391482474},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1473391482475},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1473391482475},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1473391482475},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1473391482475},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1473391482475},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1473391482475},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1473391482475},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1473391482475},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1473391482475},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1473391482475},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473391482470},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473391482470},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473391482473},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473391482473},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473391482473},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473391482474},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473391482474},{"_id":"themes/next/.git/refs/heads/master","hash":"a000ff7ceba1704584e39c908e83fe3db5859335","modified":1473391482464},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1473391482469},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1473391482469},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1473391482469},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1473391482470},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1473391482470},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1473391482470},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1473391482470},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1473391482470},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1473391482470},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1473391482470},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1473391482470},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1473391482470},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1473391482470},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"7f7148c8f52e4d3cfc070d964160362179fa8e91","modified":1473391482470},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1473391482470},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1473391482470},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1473391482473},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1473391482473},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1473391482473},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1473391482474},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1473391482474},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1473391482474},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1473391482475},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1473391482475},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1473391482475},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1473391482476},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1473391482476},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1473391482476},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1473391482476},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1473391482476},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1473391482476},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1473391482478},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1473391482478},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1473391482478},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1473391482478},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1473391482478},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1473391482478},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1473391482478},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1473391482478},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1473391482478},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1473391482483},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1473391482484},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1473391482484},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1473391482484},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1473391482484},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1473391482484},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1473391482484},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1473391482484},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1473391482484},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1473391482486},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1473391482486},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1473391482486},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1473391475728},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1473391475728},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1473391475728},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1473391482484},{"_id":"themes/next/.git/objects/pack/pack-9040b4fdd7cb1ce4f4478b4b6db8071e533c2edb.idx","hash":"2199e27819228e7416ec5c225cc9fbf991419c17","modified":1473391482262},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1473391482464},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"28a41ee5cd7353bf28b0de37291a5e6afc49a119","modified":1473391482464},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1473391482470},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1473391482470},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1473391482470},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1473391482470},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"1e3e1c6231408e18e8485a8e0e59e8880349b210","modified":1473391482470},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1473391482470},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1473391482470},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1473391482471},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1473391482471},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1473391482471},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1473391482472},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1473391482473},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1473391482473},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1473391482473},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1473391482473},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1473391482473},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1473391482473},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1473391482473},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1473391482473},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1473391482473},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1473391482473},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1473391482473},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1473391482473},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1473391482473},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1473391482474},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1473391482474},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1473391482474},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1473391482474},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1473391482474},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1473391482474},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1473391482474},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1473391482474},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1473391482474},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1473391482474},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1473391482474},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1473391482474},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1473391482476},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1473391482476},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1473391482476},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1473391482476},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1473391482476},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1473391482476},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1473391482477},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1473391482477},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1473391482477},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1473391482477},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1473391482478},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1473391482478},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1473391482478},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1473391482478},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1473391482478},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1473391482484},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1473391482483},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1473391482484},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1473391482471},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1473391482470},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1473391482479},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1473391482479},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1473391482483},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1473391482485},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1473391482471},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1473391482471},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1473391482471},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1473391482471},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1473391482471},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1473391482471},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1473391482471},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1473391482471},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1473391482472},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1473391482472},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"28a41ee5cd7353bf28b0de37291a5e6afc49a119","modified":1473391482464},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1473391482473},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1473391482473},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1473391482473},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1473391482473},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1473391482473},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1473391482473},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1473391482473},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1473391482474},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1473391482477},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1473391482477},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1473391482477},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1473391482477},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1473391482483},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1473391482477},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1473391482477},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1473391482474},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1473391482481},{"_id":"themes/next/.git/objects/pack/pack-9040b4fdd7cb1ce4f4478b4b6db8071e533c2edb.pack","hash":"755408c17ccef18b6acd8baee3547a5e2785192b","modified":1473391482261},{"_id":"public/atom.xml","hash":"102b0db815ba204c171efaa0a19f3268d66c2c20","modified":1473748328261},{"_id":"public/archives/index.html","hash":"772c501022e128e1dccf873a3ddfe2a934303b7a","modified":1473748328338},{"_id":"public/archives/2016/index.html","hash":"2da2f3987a666d099eca14e3f8d056466128a4c5","modified":1473748328338},{"_id":"public/archives/2016/09/index.html","hash":"776bb9dfebe7a955e4299bda96e1ee6cf028e6a9","modified":1473748328339},{"_id":"public/2016/09/09/CSS-The-Definitive-Guide/index.html","hash":"e3b0b4e77901c61e603b0b9f5280221a0babdf22","modified":1473658147305},{"_id":"public/2016/09/09/chapter-4/index.html","hash":"e369ee54a8217856beed748adc665e75f3210ca2","modified":1473645917032},{"_id":"public/2016/09/09/chapter-3/index.html","hash":"e0f679a31c2786bdabcd3c9f48c05515c2cca6a6","modified":1473645917032},{"_id":"public/2016/09/09/chapter-2/index.html","hash":"919ffce64dd337597e391ec97b9585f124843786","modified":1473645917032},{"_id":"public/index.html","hash":"8bf6339cbc5b3f92620f35370d4e76e9ee16997b","modified":1473748328339},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1473645917056},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1473645917056},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1473645917056},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1473645917056},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1473645917058},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1473645917058},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1473645917058},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1473645917058},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1473645917058},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1473645917058},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1473645917058},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1473645917058},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1473645917058},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1473645917058},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1473645917058},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1473645917058},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1473645917058},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1473645917058},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1473645917058},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1473645917059},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1473645917059},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1473645917059},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1473645917059},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1473645917059},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1473645917726},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1473645917734},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1473645917735},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1473645917739},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1473645917739},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1473645917739},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1473645917739},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1473645917739},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1473645917739},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1473645917739},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1473645917739},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1473645917739},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1473645917739},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1473645917740},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1473645917740},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1473645917740},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1473645917740},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1473645917740},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1473645917740},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1473645917740},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1473645917741},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1473645917741},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1473645917741},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1473645917741},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1473645917741},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1473645917741},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1473645917741},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1473645917741},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1473645917741},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1473645917741},{"_id":"public/css/main.css","hash":"98b300b5ecdfa059cf93ddb8f6f9baa0c654cd7e","modified":1473645917741},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1473645917741},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1473645917741},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1473645917741},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1473645917741},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1473645917741},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1473645917741},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1473645917742},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1473645917742},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1473645917742},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1473645917742},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1473645917745},{"_id":"public/2016/09/12/chapter-2/index.html","hash":"5c249d46f16b61715a4cd27966e4758c07cb0509","modified":1473748328339},{"_id":"public/2016/09/12/chapter-3/index.html","hash":"97d341c9c7e7494967d2790b656d8a24ff4d1534","modified":1473658147305},{"_id":"public/2016/09/12/chapter-4/index.html","hash":"517f2a61b0d05829f072257ff13d0c0df57cf4e6","modified":1473748328339},{"_id":"source/_posts/High-Performance-Javascript.md","hash":"4a19a3d216fa1852bf5c3351318c27645e4b8df8","modified":1473748167735},{"_id":"public/2016/09/12/High-Performance-Javascript/index.html","hash":"508b7cc8a9e52f0f87a26818f8ddd9ce2fca98b4","modified":1473658147307},{"_id":"public/2016/09/13/chapter-3/index.html","hash":"f323bad961c5b4ea9fa16ad6ea06ce852676513e","modified":1473748328340},{"_id":"public/2016/09/13/High-Performance-Javascript/index.html","hash":"500edb9ac5124c391d43d199e0fd08ec1668b187","modified":1473748328340}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"锋利的jQeury 第四章-笔记","_content":"\n## 第四章 jQuery中的事件和动画\n\n- window.onload方法，相当于`jQuery`中的$(window).load(function(){})方法。都是等文档中的所有元素加载完成时调用，包括关联css文件和javascript文件。\n- $(document).ready(function() {})则不会等待关联文件下载完，在DOM准备好之后就会调用。\n- $(window).load(function(){})可以调用多次，都会执行，而window.onload只会调用最后一次赋予的函数。\n- $(document).ready(function() {})可以简写为$(function() {});\n\n<!--more-->\n\n### 事件绑定 \n- bind(type [, data], fn);第1个参数是事件类型，包括focus、load、click、dbclik等。，第2个参数可选，作为event.data传递，第3个参数是回调函数。示例：\n```javascript\n$(function(){\n    $('#panel h5.head').bind('click', function(e) {\n        $(this).next().show();\n    })\n})\n```\n- bind函数可以级联，如\n```javascript\n$('#panel h5.head').bind('mouseover', function(e) {\n    $(this).next().show();\n}).bind('mouseout', function(e) {\n    $(this).next().hide();\n})\n```\n- bind可以简写，如\n```javascript\n$('#panel h5.head').click(function(e) {\n    $(this).next().toggle();\n})\n```\n- 合成事件\n\n    `jQuery`有两个合成事件，hover()和toggle(),都有两个回调函数作为参数，可以看成是语法糖。hover表示移入移出两个事件，toggle表示前后两次点击事件，如\n    ```javascript\n    $('#panel h5.head').hover(function() {\n        $(this).next().show(); //划过时显示下一个元素\n    }, function() {\n        $(this).next().hide(); //划出隐藏下一个元素\n    })\n    ```\n    ```javascript\n    $('#panel h5.head').toggle(function() {\n        $(this).next().show(); //点击时显示下一个元素\n    }, function() {\n        $(this).next().hide(); //再次点击时隐藏下一个元素\n    })\n    ```\n- 事件对象的属性\n    - event.type 事件类型，字符串格式，如'click', 'dbclick', 'load'等。\n    - event.preventDefault()阻止默认行为，可以用return false代替。\n    - event.stopProgagation()组织事件冒泡，可以用return false代替。\n    - event.target 触发事件的元素。\n    - event.pageX event.pageY,相对于页面的x，y坐标。\n    - event.which 不同事件含义不同，鼠标事件表示那个键，键盘事件表示键值。\n    - event.metaKey ctl键是否按下。\n- 移除事件 unbind([type],[data]) \n    - 如果没有参数，表示删除所有事件。\n    - 如果只提供type，表示移除所有type对应的事件回调。\n    - 如果传递了2个参数，表示对应的处理函数会被删除。\n- 单次事件 one(type, [data], fn);执行一次后，事件回被移除。\n- 事件模拟\n    - 原生事件 $('#btn').trigger('click')或者$('#btn').click();\n    - 自定义事件\n    ```javascript\n    $('#btn').bind('myClick', function(){\n        $('#test').append('&lt;p>我的自定义事件&lt;/p>')\n    });\n\n    $('#btn').trigger('myClick'); //触发事件。\n    ```    \n    - 传递数据\n    ```javascript\n    $('#btn').bind('myClick', function(event, msg1, msg2){\n        $('#test').append('&lt;p>我的自定义事件&lt;/p>')\n    });\n\n    $('#btn').trigger('myClick'. ['参数1'，'参数2']); //触发事件。\n    ```   \n    - 执行默认操作 triggerHandler，例如，只触发focus事件，但是不获取焦点（浏览器默认行为）\n    ```javascript\n    $('input').triggerHandler('focus');\n    ```\n- 事件命名空间\n    - 添加命名空间\n    ```javascript\n    $('#div').bind('mouseover.plugin', function() {\n\n    })\n    $('#btn').click(function() {\n        $('#div').unbind('.plugin'); //移除上面的事件。\n    })\n    ```\n    \n## 动画\n - show(duration) 显示元素，duration不为0时，表示显示动画。将元素display属性从’none‘设置为原来的值\n - hide(duration) 隐藏元素，duration不为0时，表示隐藏动画。将元素display属性设置为'none'\n - fadeIn(duration) 与show一样，但是不改变display样式。\n - fadeOut(duration) 与hide一样，但是不改变display样式。\n - slideUp(duration)和slideDown(duration)，只改变高度。\n - animate(param, speed, callback)\n    - param 包含样式属性值，如{left: '400px', top: '400px'}，可累加或累减，如{left: '+=400px'}\n    - speed 动画时间\n    - callback 动画完成回调\n    -累加动画\n    ```javascript\n    $('#panel').animate({left:'400px', height:'200px', opacity:1}, 3000)\n        .animate({top:'200px', width:'200px'}, 3000， function() {\n            consle.log('animate done');\n        })\n        .fadeOut('slow');\n    ```\n    - 停止动画stop([clearQueue], [gotoEnd])\n    - 判断是否处于动画状态 $(element).is(':animated')\n    - 延迟动画delay(duration),延迟一段时间开始动画，$(this).animate({left:'400px'}).delay(200);\n    - 其他动画方法\n        - toggle(speed, [callback]) 显示/隐藏元素\n        - slideToggle(speed, [easing], [callback])通过改变高度来显示/隐藏元素\n        - fadeTo(speed, opacity, [callback]) 通过改变不透明度来显示/隐藏元素\n        - fadeToggle(speed, [easing], [callback]) 通过不透明度来显示/隐藏元素。\n","source":"_posts/chapter-4.md","raw":"---\ntitle: 锋利的jQeury 第四章-笔记 \n---\n\n## 第四章 jQuery中的事件和动画\n\n- window.onload方法，相当于`jQuery`中的$(window).load(function(){})方法。都是等文档中的所有元素加载完成时调用，包括关联css文件和javascript文件。\n- $(document).ready(function() {})则不会等待关联文件下载完，在DOM准备好之后就会调用。\n- $(window).load(function(){})可以调用多次，都会执行，而window.onload只会调用最后一次赋予的函数。\n- $(document).ready(function() {})可以简写为$(function() {});\n\n<!--more-->\n\n### 事件绑定 \n- bind(type [, data], fn);第1个参数是事件类型，包括focus、load、click、dbclik等。，第2个参数可选，作为event.data传递，第3个参数是回调函数。示例：\n```javascript\n$(function(){\n    $('#panel h5.head').bind('click', function(e) {\n        $(this).next().show();\n    })\n})\n```\n- bind函数可以级联，如\n```javascript\n$('#panel h5.head').bind('mouseover', function(e) {\n    $(this).next().show();\n}).bind('mouseout', function(e) {\n    $(this).next().hide();\n})\n```\n- bind可以简写，如\n```javascript\n$('#panel h5.head').click(function(e) {\n    $(this).next().toggle();\n})\n```\n- 合成事件\n\n    `jQuery`有两个合成事件，hover()和toggle(),都有两个回调函数作为参数，可以看成是语法糖。hover表示移入移出两个事件，toggle表示前后两次点击事件，如\n    ```javascript\n    $('#panel h5.head').hover(function() {\n        $(this).next().show(); //划过时显示下一个元素\n    }, function() {\n        $(this).next().hide(); //划出隐藏下一个元素\n    })\n    ```\n    ```javascript\n    $('#panel h5.head').toggle(function() {\n        $(this).next().show(); //点击时显示下一个元素\n    }, function() {\n        $(this).next().hide(); //再次点击时隐藏下一个元素\n    })\n    ```\n- 事件对象的属性\n    - event.type 事件类型，字符串格式，如'click', 'dbclick', 'load'等。\n    - event.preventDefault()阻止默认行为，可以用return false代替。\n    - event.stopProgagation()组织事件冒泡，可以用return false代替。\n    - event.target 触发事件的元素。\n    - event.pageX event.pageY,相对于页面的x，y坐标。\n    - event.which 不同事件含义不同，鼠标事件表示那个键，键盘事件表示键值。\n    - event.metaKey ctl键是否按下。\n- 移除事件 unbind([type],[data]) \n    - 如果没有参数，表示删除所有事件。\n    - 如果只提供type，表示移除所有type对应的事件回调。\n    - 如果传递了2个参数，表示对应的处理函数会被删除。\n- 单次事件 one(type, [data], fn);执行一次后，事件回被移除。\n- 事件模拟\n    - 原生事件 $('#btn').trigger('click')或者$('#btn').click();\n    - 自定义事件\n    ```javascript\n    $('#btn').bind('myClick', function(){\n        $('#test').append('&lt;p>我的自定义事件&lt;/p>')\n    });\n\n    $('#btn').trigger('myClick'); //触发事件。\n    ```    \n    - 传递数据\n    ```javascript\n    $('#btn').bind('myClick', function(event, msg1, msg2){\n        $('#test').append('&lt;p>我的自定义事件&lt;/p>')\n    });\n\n    $('#btn').trigger('myClick'. ['参数1'，'参数2']); //触发事件。\n    ```   \n    - 执行默认操作 triggerHandler，例如，只触发focus事件，但是不获取焦点（浏览器默认行为）\n    ```javascript\n    $('input').triggerHandler('focus');\n    ```\n- 事件命名空间\n    - 添加命名空间\n    ```javascript\n    $('#div').bind('mouseover.plugin', function() {\n\n    })\n    $('#btn').click(function() {\n        $('#div').unbind('.plugin'); //移除上面的事件。\n    })\n    ```\n    \n## 动画\n - show(duration) 显示元素，duration不为0时，表示显示动画。将元素display属性从’none‘设置为原来的值\n - hide(duration) 隐藏元素，duration不为0时，表示隐藏动画。将元素display属性设置为'none'\n - fadeIn(duration) 与show一样，但是不改变display样式。\n - fadeOut(duration) 与hide一样，但是不改变display样式。\n - slideUp(duration)和slideDown(duration)，只改变高度。\n - animate(param, speed, callback)\n    - param 包含样式属性值，如{left: '400px', top: '400px'}，可累加或累减，如{left: '+=400px'}\n    - speed 动画时间\n    - callback 动画完成回调\n    -累加动画\n    ```javascript\n    $('#panel').animate({left:'400px', height:'200px', opacity:1}, 3000)\n        .animate({top:'200px', width:'200px'}, 3000， function() {\n            consle.log('animate done');\n        })\n        .fadeOut('slow');\n    ```\n    - 停止动画stop([clearQueue], [gotoEnd])\n    - 判断是否处于动画状态 $(element).is(':animated')\n    - 延迟动画delay(duration),延迟一段时间开始动画，$(this).animate({left:'400px'}).delay(200);\n    - 其他动画方法\n        - toggle(speed, [callback]) 显示/隐藏元素\n        - slideToggle(speed, [easing], [callback])通过改变高度来显示/隐藏元素\n        - fadeTo(speed, opacity, [callback]) 通过改变不透明度来显示/隐藏元素\n        - fadeToggle(speed, [easing], [callback]) 通过不透明度来显示/隐藏元素。\n","slug":"chapter-4","published":1,"date":"2016-09-12T02:13:21.831Z","updated":"2016-09-12T02:13:21.831Z","_id":"ciszeqa7n0000espvv7pr6gs3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"第四章-jQuery中的事件和动画\"><a href=\"#第四章-jQuery中的事件和动画\" class=\"headerlink\" title=\"第四章 jQuery中的事件和动画\"></a>第四章 jQuery中的事件和动画</h2><ul>\n<li>window.onload方法，相当于<code>jQuery</code>中的$(window).load(function(){})方法。都是等文档中的所有元素加载完成时调用，包括关联css文件和javascript文件。</li>\n<li>$(document).ready(function() {})则不会等待关联文件下载完，在DOM准备好之后就会调用。</li>\n<li>$(window).load(function(){})可以调用多次，都会执行，而window.onload只会调用最后一次赋予的函数。</li>\n<li>$(document).ready(function() {})可以简写为$(function() {});</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h3><ul>\n<li><p>bind(type [, data], fn);第1个参数是事件类型，包括focus、load、click、dbclik等。，第2个参数可选，作为event.data传递，第3个参数是回调函数。示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#panel h5.head'</span>).bind(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        $(<span class=\"keyword\">this</span>).next().show();</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>bind函数可以级联，如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).bind(<span class=\"string\">'mouseover'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().show();</div><div class=\"line\">&#125;).bind(<span class=\"string\">'mouseout'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>bind可以简写，如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().toggle();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>合成事件</p>\n<p>  <code>jQuery</code>有两个合成事件，hover()和toggle(),都有两个回调函数作为参数，可以看成是语法糖。hover表示移入移出两个事件，toggle表示前后两次点击事件，如</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).hover(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().show(); <span class=\"comment\">//划过时显示下一个元素</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide(); <span class=\"comment\">//划出隐藏下一个元素</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).toggle(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().show(); <span class=\"comment\">//点击时显示下一个元素</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide(); <span class=\"comment\">//再次点击时隐藏下一个元素</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>事件对象的属性</p>\n<ul>\n<li>event.type 事件类型，字符串格式，如’click’, ‘dbclick’, ‘load’等。</li>\n<li>event.preventDefault()阻止默认行为，可以用return false代替。</li>\n<li>event.stopProgagation()组织事件冒泡，可以用return false代替。</li>\n<li>event.target 触发事件的元素。</li>\n<li>event.pageX event.pageY,相对于页面的x，y坐标。</li>\n<li>event.which 不同事件含义不同，鼠标事件表示那个键，键盘事件表示键值。</li>\n<li>event.metaKey ctl键是否按下。</li>\n</ul>\n</li>\n<li>移除事件 unbind([type],[data]) <ul>\n<li>如果没有参数，表示删除所有事件。</li>\n<li>如果只提供type，表示移除所有type对应的事件回调。</li>\n<li>如果传递了2个参数，表示对应的处理函数会被删除。</li>\n</ul>\n</li>\n<li>单次事件 one(type, [data], fn);执行一次后，事件回被移除。</li>\n<li><p>事件模拟</p>\n<ul>\n<li>原生事件 $(‘#btn’).trigger(‘click’)或者$(‘#btn’).click();</li>\n<li>自定义事件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#btn'</span>).bind(<span class=\"string\">'myClick'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#test'</span>).append(<span class=\"string\">'&amp;lt;p&gt;我的自定义事件&amp;lt;/p&gt;'</span>)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).trigger(<span class=\"string\">'myClick'</span>); <span class=\"comment\">//触发事件。</span></div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">`    </span></div><div class=\"line\">- 传递数据</div><div class=\"line\">`<span class=\"string\">``</span>javascript</div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).bind(<span class=\"string\">'myClick'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event, msg1, msg2</span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#test'</span>).append(<span class=\"string\">'&amp;lt;p&gt;我的自定义事件&amp;lt;/p&gt;'</span>)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).trigger(<span class=\"string\">'myClick'</span>. [<span class=\"string\">'参数1'</span>，<span class=\"string\">'参数2'</span>]); <span class=\"comment\">//触发事件。</span></div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">`   </span></div><div class=\"line\">- 执行默认操作 triggerHandler，例如，只触发focus事件，但是不获取焦点（浏览器默认行为）</div><div class=\"line\">`<span class=\"string\">``</span>javascript</div><div class=\"line\">$(<span class=\"string\">'input'</span>).triggerHandler(<span class=\"string\">'focus'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>事件命名空间</p>\n<ul>\n<li>添加命名空间<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#div'</span>).bind(<span class=\"string\">'mouseover.plugin'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;)</div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#div'</span>).unbind(<span class=\"string\">'.plugin'</span>); <span class=\"comment\">//移除上面的事件。</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h2><ul>\n<li>show(duration) 显示元素，duration不为0时，表示显示动画。将元素display属性从’none‘设置为原来的值</li>\n<li>hide(duration) 隐藏元素，duration不为0时，表示隐藏动画。将元素display属性设置为’none’</li>\n<li>fadeIn(duration) 与show一样，但是不改变display样式。</li>\n<li>fadeOut(duration) 与hide一样，但是不改变display样式。</li>\n<li>slideUp(duration)和slideDown(duration)，只改变高度。</li>\n<li><p>animate(param, speed, callback)</p>\n<ul>\n<li>param 包含样式属性值，如{left: ‘400px’, top: ‘400px’}，可累加或累减，如{left: ‘+=400px’}</li>\n<li>speed 动画时间</li>\n<li><p>callback 动画完成回调<br>-累加动画</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel'</span>).animate(&#123;left:<span class=\"string\">'400px'</span>, height:<span class=\"string\">'200px'</span>, opacity:<span class=\"number\">1</span>&#125;, <span class=\"number\">3000</span>)</div><div class=\"line\">    .animate(&#123;top:<span class=\"string\">'200px'</span>, width:<span class=\"string\">'200px'</span>&#125;, <span class=\"number\">3000</span>， <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        consle.log(<span class=\"string\">'animate done'</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .fadeOut(<span class=\"string\">'slow'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>停止动画stop([clearQueue], [gotoEnd])</p>\n</li>\n<li>判断是否处于动画状态 $(element).is(‘:animated’)</li>\n<li>延迟动画delay(duration),延迟一段时间开始动画，$(this).animate({left:’400px’}).delay(200);</li>\n<li>其他动画方法<ul>\n<li>toggle(speed, [callback]) 显示/隐藏元素</li>\n<li>slideToggle(speed, [easing], [callback])通过改变高度来显示/隐藏元素</li>\n<li>fadeTo(speed, opacity, [callback]) 通过改变不透明度来显示/隐藏元素</li>\n<li>fadeToggle(speed, [easing], [callback]) 通过不透明度来显示/隐藏元素。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","excerpt":"<h2 id=\"第四章-jQuery中的事件和动画\"><a href=\"#第四章-jQuery中的事件和动画\" class=\"headerlink\" title=\"第四章 jQuery中的事件和动画\"></a>第四章 jQuery中的事件和动画</h2><ul>\n<li>window.onload方法，相当于<code>jQuery</code>中的$(window).load(function(){})方法。都是等文档中的所有元素加载完成时调用，包括关联css文件和javascript文件。</li>\n<li>$(document).ready(function() {})则不会等待关联文件下载完，在DOM准备好之后就会调用。</li>\n<li>$(window).load(function(){})可以调用多次，都会执行，而window.onload只会调用最后一次赋予的函数。</li>\n<li>$(document).ready(function() {})可以简写为$(function() {});</li>\n</ul>","more":"<h3 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h3><ul>\n<li><p>bind(type [, data], fn);第1个参数是事件类型，包括focus、load、click、dbclik等。，第2个参数可选，作为event.data传递，第3个参数是回调函数。示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#panel h5.head'</span>).bind(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        $(<span class=\"keyword\">this</span>).next().show();</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>bind函数可以级联，如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).bind(<span class=\"string\">'mouseover'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().show();</div><div class=\"line\">&#125;).bind(<span class=\"string\">'mouseout'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>bind可以简写，如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().toggle();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>合成事件</p>\n<p>  <code>jQuery</code>有两个合成事件，hover()和toggle(),都有两个回调函数作为参数，可以看成是语法糖。hover表示移入移出两个事件，toggle表示前后两次点击事件，如</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).hover(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().show(); <span class=\"comment\">//划过时显示下一个元素</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide(); <span class=\"comment\">//划出隐藏下一个元素</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).toggle(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().show(); <span class=\"comment\">//点击时显示下一个元素</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide(); <span class=\"comment\">//再次点击时隐藏下一个元素</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>事件对象的属性</p>\n<ul>\n<li>event.type 事件类型，字符串格式，如’click’, ‘dbclick’, ‘load’等。</li>\n<li>event.preventDefault()阻止默认行为，可以用return false代替。</li>\n<li>event.stopProgagation()组织事件冒泡，可以用return false代替。</li>\n<li>event.target 触发事件的元素。</li>\n<li>event.pageX event.pageY,相对于页面的x，y坐标。</li>\n<li>event.which 不同事件含义不同，鼠标事件表示那个键，键盘事件表示键值。</li>\n<li>event.metaKey ctl键是否按下。</li>\n</ul>\n</li>\n<li>移除事件 unbind([type],[data]) <ul>\n<li>如果没有参数，表示删除所有事件。</li>\n<li>如果只提供type，表示移除所有type对应的事件回调。</li>\n<li>如果传递了2个参数，表示对应的处理函数会被删除。</li>\n</ul>\n</li>\n<li>单次事件 one(type, [data], fn);执行一次后，事件回被移除。</li>\n<li><p>事件模拟</p>\n<ul>\n<li>原生事件 $(‘#btn’).trigger(‘click’)或者$(‘#btn’).click();</li>\n<li>自定义事件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#btn'</span>).bind(<span class=\"string\">'myClick'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#test'</span>).append(<span class=\"string\">'&amp;lt;p&gt;我的自定义事件&amp;lt;/p&gt;'</span>)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).trigger(<span class=\"string\">'myClick'</span>); <span class=\"comment\">//触发事件。</span></div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">`    </div><div class=\"line\">- 传递数据</div><div class=\"line\">`</span><span class=\"string\">``</span>javascript</div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).bind(<span class=\"string\">'myClick'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event, msg1, msg2</span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#test'</span>).append(<span class=\"string\">'&amp;lt;p&gt;我的自定义事件&amp;lt;/p&gt;'</span>)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).trigger(<span class=\"string\">'myClick'</span>. [<span class=\"string\">'参数1'</span>，<span class=\"string\">'参数2'</span>]); <span class=\"comment\">//触发事件。</span></div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">`   </div><div class=\"line\">- 执行默认操作 triggerHandler，例如，只触发focus事件，但是不获取焦点（浏览器默认行为）</div><div class=\"line\">`</span><span class=\"string\">``</span>javascript</div><div class=\"line\">$(<span class=\"string\">'input'</span>).triggerHandler(<span class=\"string\">'focus'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>事件命名空间</p>\n<ul>\n<li>添加命名空间<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#div'</span>).bind(<span class=\"string\">'mouseover.plugin'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;)</div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#div'</span>).unbind(<span class=\"string\">'.plugin'</span>); <span class=\"comment\">//移除上面的事件。</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h2><ul>\n<li>show(duration) 显示元素，duration不为0时，表示显示动画。将元素display属性从’none‘设置为原来的值</li>\n<li>hide(duration) 隐藏元素，duration不为0时，表示隐藏动画。将元素display属性设置为’none’</li>\n<li>fadeIn(duration) 与show一样，但是不改变display样式。</li>\n<li>fadeOut(duration) 与hide一样，但是不改变display样式。</li>\n<li>slideUp(duration)和slideDown(duration)，只改变高度。</li>\n<li><p>animate(param, speed, callback)</p>\n<ul>\n<li>param 包含样式属性值，如{left: ‘400px’, top: ‘400px’}，可累加或累减，如{left: ‘+=400px’}</li>\n<li>speed 动画时间</li>\n<li><p>callback 动画完成回调<br>-累加动画</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel'</span>).animate(&#123;left:<span class=\"string\">'400px'</span>, height:<span class=\"string\">'200px'</span>, opacity:<span class=\"number\">1</span>&#125;, <span class=\"number\">3000</span>)</div><div class=\"line\">    .animate(&#123;top:<span class=\"string\">'200px'</span>, width:<span class=\"string\">'200px'</span>&#125;, <span class=\"number\">3000</span>， <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        consle.log(<span class=\"string\">'animate done'</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .fadeOut(<span class=\"string\">'slow'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>停止动画stop([clearQueue], [gotoEnd])</p>\n</li>\n<li>判断是否处于动画状态 $(element).is(‘:animated’)</li>\n<li>延迟动画delay(duration),延迟一段时间开始动画，$(this).animate({left:’400px’}).delay(200);</li>\n<li>其他动画方法<ul>\n<li>toggle(speed, [callback]) 显示/隐藏元素</li>\n<li>slideToggle(speed, [easing], [callback])通过改变高度来显示/隐藏元素</li>\n<li>fadeTo(speed, opacity, [callback]) 通过改变不透明度来显示/隐藏元素</li>\n<li>fadeToggle(speed, [easing], [callback]) 通过不透明度来显示/隐藏元素。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>"},{"title":"锋利的jQeury 第二章-笔记","_content":"\n## 第二章 jQuery选择器\n\n### 基本选择器\n\n- `#id` 匹配id,  `$('#test')`\n- `.class` 匹配类, `$('.test')`\n- `element` 匹配标签, `$('div')`\n- `*` 匹配所有元素, `$('*')`\n- `selector1, select2,...,selectN` 匹配集合，如$('div, span, p.myClass')\n\n<!--more-->\n\n### 层次选择器\n\n- `$('ancestor decendant')` 选择后代元素\n- `$('parent > child')` 选择子元素\n- `$('prev + next')` 选择紧接在`prev`后的`next`元素，如: `$('.one + div')`，选择`one`之后的下个一个`div`同辈元素\n- `$('prev ~ siblings')` 选择prev后的所有siblings元素，如`$('#two ~ div')`选择`two`之后的所有`div`同辈元素\n\n### 过滤选择器\n\n- `:first` 选取第一个元素，它只返回一个元素。 如`$('div:first')`选取第一个div元素。\n- `:last` 选取最后一个元素，它只返回一个元素。\n- `:not(selector)` 取出所有给定选择器匹配的元素，如`$('input:not(.myClass)')`,选取`class`不是`myClass`的`input`元素\n- `:even` 选取索引为偶数的元素，索引从**0**开始\n- `:odd` 选取奇数索引元素\n- `:eq(index)` 选取指定索引元素\n- `:gt(index)` 选取大于索引的元素\n- `:lt(index)` 选取小于索引的元素\n- `:header` 选取所有标题元素 如`$(':header')`，选取网页中所有`&lt;h1>,&lt;h2>,&lt;h3>;....`\n- `:animated` 选取所有正在执行动画的元素 如：`$('div:animated')`选取正在执行动画的所有`div`元素\n- `:focus` 选取当前获取焦点的元素 如`$(':focus')`，获取当前获取焦点的元素\n\n### 内容过滤选择器\n\n- `:contains(text)` 选取文本内容含有text的元素, 如`$('div:contains(\"我\")')`,选取文本含有`我`的`div`元素\n- `:empty` 选取不包含子元素或者文本为空的元素, 如`$('div:empty')`选取不包含子元素的`div`元素\n- `:has(selector)` 选取含有选择器的所匹配的元素的元素，如`$('div:has(p)')`，选取含有`p`元素的`div`元素\n- `:parent` 选取含有子元素或文本的元素 如`$('div:parent')`,选取拥有子元素的`div`元素\n\n### 可见性过滤器\n\n- `:hidden` 选取所有不可见元素, 如`$(':hidden')`, 选取所有不可见元素，`$('input:hidden')`选取所有不可见的input元素\n- `:visible` 选取所有可见元素\n\n### 属性过滤选择器\n\n- `[attr]` 选取拥有此属性的元素, 如`$('div[id]')`, 选取拥有属性`id`的元素\n- `[attr=val]` 选取`attr`属性为`val`的元素如, `$('div[title=test]')`选取`title`为`test`的`div`元素\n- `[attr!=val]` 选取`attr`的值不为`val`的元素\n- `[attr^=val]` 选取`attr`的值以`val`开始的元素\n- `[attr$=val]` 选取`attr`的值以`val`结束的元素\n- `[attr*=val]` 选取`attr`的值包含`val`的元素\n- `[attr|=val]` 选取`attr`的值为`val`或以`val-`开始的元素\n- `[attr~=val]` 选取`attr`的值包含`' val'`的元素（注意val前面要有空格）\n- `[attr1][attr2][attrN]` 选取同时满足几个条件的元素，如`$('div[id][title$=\"test\"]')`，选取拥有属性id，并且属性title以test结束的div元素\n\n### 子元素过滤选择器\n\n- `:nth-child(index/even/odd/equation)` 选取每个父元素下的第`index`个或者奇偶子元素\n- `:first-child` 选取每个父元素的第一个子元素，如`$('ul li:first-child')`, 选择ul的第一个li元素\n- `:last-child` 选取每个父元素的子元素\n- `:only-child` 如果父控件一个子元素，那么匹配到，否则不被匹配。`$('ul li:only-child')`返回只有一个子元素且为li的li元素\n\n### 表单对象属性过滤选择器\n\n- `:enabled` 选取所有可用元素。`$('#form1 :enabled')`,选取`id`为`form1`的表单内的所有可用元素。\n- `:disbaled` 选取所有不可用元素。\n- `:checked` 选取所有被选中元素(单选框，复选框)。`$('input:checked')`,选取所有被选中的`input`元素\n- `:selected` 选取所有被选中的选项元素（下拉列表）。`$('select option:seleted')`\n\n### 表单选择器\n\n- `:input` 选取所有`&lt;input>,&lt;textarea>,&lt;select>,&lt;button>`元素。如`$('#form1 :input')`\n- `:text` 选取所有单行文本框。\n- `:password` 选取所有密码框\n- `:radio` 选取所有单选框\n- `:submit` 选取所有提交按钮\n- `:image` 选取所有的图像按钮\n- `:reset` 选取所有的重置按钮\n- `:button` 选取所有的按钮\n- `:file` 选取所有的上川域\n- `:hidden` 选取所有不可见元素\n","source":"_posts/chapter-2.md","raw":"---\ntitle: 锋利的jQeury 第二章-笔记 \n---\n\n## 第二章 jQuery选择器\n\n### 基本选择器\n\n- `#id` 匹配id,  `$('#test')`\n- `.class` 匹配类, `$('.test')`\n- `element` 匹配标签, `$('div')`\n- `*` 匹配所有元素, `$('*')`\n- `selector1, select2,...,selectN` 匹配集合，如$('div, span, p.myClass')\n\n<!--more-->\n\n### 层次选择器\n\n- `$('ancestor decendant')` 选择后代元素\n- `$('parent > child')` 选择子元素\n- `$('prev + next')` 选择紧接在`prev`后的`next`元素，如: `$('.one + div')`，选择`one`之后的下个一个`div`同辈元素\n- `$('prev ~ siblings')` 选择prev后的所有siblings元素，如`$('#two ~ div')`选择`two`之后的所有`div`同辈元素\n\n### 过滤选择器\n\n- `:first` 选取第一个元素，它只返回一个元素。 如`$('div:first')`选取第一个div元素。\n- `:last` 选取最后一个元素，它只返回一个元素。\n- `:not(selector)` 取出所有给定选择器匹配的元素，如`$('input:not(.myClass)')`,选取`class`不是`myClass`的`input`元素\n- `:even` 选取索引为偶数的元素，索引从**0**开始\n- `:odd` 选取奇数索引元素\n- `:eq(index)` 选取指定索引元素\n- `:gt(index)` 选取大于索引的元素\n- `:lt(index)` 选取小于索引的元素\n- `:header` 选取所有标题元素 如`$(':header')`，选取网页中所有`&lt;h1>,&lt;h2>,&lt;h3>;....`\n- `:animated` 选取所有正在执行动画的元素 如：`$('div:animated')`选取正在执行动画的所有`div`元素\n- `:focus` 选取当前获取焦点的元素 如`$(':focus')`，获取当前获取焦点的元素\n\n### 内容过滤选择器\n\n- `:contains(text)` 选取文本内容含有text的元素, 如`$('div:contains(\"我\")')`,选取文本含有`我`的`div`元素\n- `:empty` 选取不包含子元素或者文本为空的元素, 如`$('div:empty')`选取不包含子元素的`div`元素\n- `:has(selector)` 选取含有选择器的所匹配的元素的元素，如`$('div:has(p)')`，选取含有`p`元素的`div`元素\n- `:parent` 选取含有子元素或文本的元素 如`$('div:parent')`,选取拥有子元素的`div`元素\n\n### 可见性过滤器\n\n- `:hidden` 选取所有不可见元素, 如`$(':hidden')`, 选取所有不可见元素，`$('input:hidden')`选取所有不可见的input元素\n- `:visible` 选取所有可见元素\n\n### 属性过滤选择器\n\n- `[attr]` 选取拥有此属性的元素, 如`$('div[id]')`, 选取拥有属性`id`的元素\n- `[attr=val]` 选取`attr`属性为`val`的元素如, `$('div[title=test]')`选取`title`为`test`的`div`元素\n- `[attr!=val]` 选取`attr`的值不为`val`的元素\n- `[attr^=val]` 选取`attr`的值以`val`开始的元素\n- `[attr$=val]` 选取`attr`的值以`val`结束的元素\n- `[attr*=val]` 选取`attr`的值包含`val`的元素\n- `[attr|=val]` 选取`attr`的值为`val`或以`val-`开始的元素\n- `[attr~=val]` 选取`attr`的值包含`' val'`的元素（注意val前面要有空格）\n- `[attr1][attr2][attrN]` 选取同时满足几个条件的元素，如`$('div[id][title$=\"test\"]')`，选取拥有属性id，并且属性title以test结束的div元素\n\n### 子元素过滤选择器\n\n- `:nth-child(index/even/odd/equation)` 选取每个父元素下的第`index`个或者奇偶子元素\n- `:first-child` 选取每个父元素的第一个子元素，如`$('ul li:first-child')`, 选择ul的第一个li元素\n- `:last-child` 选取每个父元素的子元素\n- `:only-child` 如果父控件一个子元素，那么匹配到，否则不被匹配。`$('ul li:only-child')`返回只有一个子元素且为li的li元素\n\n### 表单对象属性过滤选择器\n\n- `:enabled` 选取所有可用元素。`$('#form1 :enabled')`,选取`id`为`form1`的表单内的所有可用元素。\n- `:disbaled` 选取所有不可用元素。\n- `:checked` 选取所有被选中元素(单选框，复选框)。`$('input:checked')`,选取所有被选中的`input`元素\n- `:selected` 选取所有被选中的选项元素（下拉列表）。`$('select option:seleted')`\n\n### 表单选择器\n\n- `:input` 选取所有`&lt;input>,&lt;textarea>,&lt;select>,&lt;button>`元素。如`$('#form1 :input')`\n- `:text` 选取所有单行文本框。\n- `:password` 选取所有密码框\n- `:radio` 选取所有单选框\n- `:submit` 选取所有提交按钮\n- `:image` 选取所有的图像按钮\n- `:reset` 选取所有的重置按钮\n- `:button` 选取所有的按钮\n- `:file` 选取所有的上川域\n- `:hidden` 选取所有不可见元素\n","slug":"chapter-2","published":1,"date":"2016-09-12T02:13:38.890Z","updated":"2016-09-12T02:13:38.890Z","_id":"ciszeqa800001espvmmnpg9d6","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"第二章-jQuery选择器\"><a href=\"#第二章-jQuery选择器\" class=\"headerlink\" title=\"第二章 jQuery选择器\"></a>第二章 jQuery选择器</h2><h3 id=\"基本选择器\"><a href=\"#基本选择器\" class=\"headerlink\" title=\"基本选择器\"></a>基本选择器</h3><ul>\n<li><code>#id</code> 匹配id,  <code>$(&#39;#test&#39;)</code></li>\n<li><code>.class</code> 匹配类, <code>$(&#39;.test&#39;)</code></li>\n<li><code>element</code> 匹配标签, <code>$(&#39;div&#39;)</code></li>\n<li><code>*</code> 匹配所有元素, <code>$(&#39;*&#39;)</code></li>\n<li><code>selector1, select2,...,selectN</code> 匹配集合，如$(‘div, span, p.myClass’)</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"层次选择器\"><a href=\"#层次选择器\" class=\"headerlink\" title=\"层次选择器\"></a>层次选择器</h3><ul>\n<li><code>$(&#39;ancestor decendant&#39;)</code> 选择后代元素</li>\n<li><code>$(&#39;parent &gt; child&#39;)</code> 选择子元素</li>\n<li><code>$(&#39;prev + next&#39;)</code> 选择紧接在<code>prev</code>后的<code>next</code>元素，如: <code>$(&#39;.one + div&#39;)</code>，选择<code>one</code>之后的下个一个<code>div</code>同辈元素</li>\n<li><code>$(&#39;prev ~ siblings&#39;)</code> 选择prev后的所有siblings元素，如<code>$(&#39;#two ~ div&#39;)</code>选择<code>two</code>之后的所有<code>div</code>同辈元素</li>\n</ul>\n<h3 id=\"过滤选择器\"><a href=\"#过滤选择器\" class=\"headerlink\" title=\"过滤选择器\"></a>过滤选择器</h3><ul>\n<li><code>:first</code> 选取第一个元素，它只返回一个元素。 如<code>$(&#39;div:first&#39;)</code>选取第一个div元素。</li>\n<li><code>:last</code> 选取最后一个元素，它只返回一个元素。</li>\n<li><code>:not(selector)</code> 取出所有给定选择器匹配的元素，如<code>$(&#39;input:not(.myClass)&#39;)</code>,选取<code>class</code>不是<code>myClass</code>的<code>input</code>元素</li>\n<li><code>:even</code> 选取索引为偶数的元素，索引从<strong>0</strong>开始</li>\n<li><code>:odd</code> 选取奇数索引元素</li>\n<li><code>:eq(index)</code> 选取指定索引元素</li>\n<li><code>:gt(index)</code> 选取大于索引的元素</li>\n<li><code>:lt(index)</code> 选取小于索引的元素</li>\n<li><code>:header</code> 选取所有标题元素 如<code>$(&#39;:header&#39;)</code>，选取网页中所有<code>&amp;lt;h1&gt;,&amp;lt;h2&gt;,&amp;lt;h3&gt;;....</code></li>\n<li><code>:animated</code> 选取所有正在执行动画的元素 如：<code>$(&#39;div:animated&#39;)</code>选取正在执行动画的所有<code>div</code>元素</li>\n<li><code>:focus</code> 选取当前获取焦点的元素 如<code>$(&#39;:focus&#39;)</code>，获取当前获取焦点的元素</li>\n</ul>\n<h3 id=\"内容过滤选择器\"><a href=\"#内容过滤选择器\" class=\"headerlink\" title=\"内容过滤选择器\"></a>内容过滤选择器</h3><ul>\n<li><code>:contains(text)</code> 选取文本内容含有text的元素, 如<code>$(&#39;div:contains(&quot;我&quot;)&#39;)</code>,选取文本含有<code>我</code>的<code>div</code>元素</li>\n<li><code>:empty</code> 选取不包含子元素或者文本为空的元素, 如<code>$(&#39;div:empty&#39;)</code>选取不包含子元素的<code>div</code>元素</li>\n<li><code>:has(selector)</code> 选取含有选择器的所匹配的元素的元素，如<code>$(&#39;div:has(p)&#39;)</code>，选取含有<code>p</code>元素的<code>div</code>元素</li>\n<li><code>:parent</code> 选取含有子元素或文本的元素 如<code>$(&#39;div:parent&#39;)</code>,选取拥有子元素的<code>div</code>元素</li>\n</ul>\n<h3 id=\"可见性过滤器\"><a href=\"#可见性过滤器\" class=\"headerlink\" title=\"可见性过滤器\"></a>可见性过滤器</h3><ul>\n<li><code>:hidden</code> 选取所有不可见元素, 如<code>$(&#39;:hidden&#39;)</code>, 选取所有不可见元素，<code>$(&#39;input:hidden&#39;)</code>选取所有不可见的input元素</li>\n<li><code>:visible</code> 选取所有可见元素</li>\n</ul>\n<h3 id=\"属性过滤选择器\"><a href=\"#属性过滤选择器\" class=\"headerlink\" title=\"属性过滤选择器\"></a>属性过滤选择器</h3><ul>\n<li><code>[attr]</code> 选取拥有此属性的元素, 如<code>$(&#39;div[id]&#39;)</code>, 选取拥有属性<code>id</code>的元素</li>\n<li><code>[attr=val]</code> 选取<code>attr</code>属性为<code>val</code>的元素如, <code>$(&#39;div[title=test]&#39;)</code>选取<code>title</code>为<code>test</code>的<code>div</code>元素</li>\n<li><code>[attr!=val]</code> 选取<code>attr</code>的值不为<code>val</code>的元素</li>\n<li><code>[attr^=val]</code> 选取<code>attr</code>的值以<code>val</code>开始的元素</li>\n<li><code>[attr$=val]</code> 选取<code>attr</code>的值以<code>val</code>结束的元素</li>\n<li><code>[attr*=val]</code> 选取<code>attr</code>的值包含<code>val</code>的元素</li>\n<li><code>[attr|=val]</code> 选取<code>attr</code>的值为<code>val</code>或以<code>val-</code>开始的元素</li>\n<li><code>[attr~=val]</code> 选取<code>attr</code>的值包含<code>&#39; val&#39;</code>的元素（注意val前面要有空格）</li>\n<li><code>[attr1][attr2][attrN]</code> 选取同时满足几个条件的元素，如<code>$(&#39;div[id][title$=&quot;test&quot;]&#39;)</code>，选取拥有属性id，并且属性title以test结束的div元素</li>\n</ul>\n<h3 id=\"子元素过滤选择器\"><a href=\"#子元素过滤选择器\" class=\"headerlink\" title=\"子元素过滤选择器\"></a>子元素过滤选择器</h3><ul>\n<li><code>:nth-child(index/even/odd/equation)</code> 选取每个父元素下的第<code>index</code>个或者奇偶子元素</li>\n<li><code>:first-child</code> 选取每个父元素的第一个子元素，如<code>$(&#39;ul li:first-child&#39;)</code>, 选择ul的第一个li元素</li>\n<li><code>:last-child</code> 选取每个父元素的子元素</li>\n<li><code>:only-child</code> 如果父控件一个子元素，那么匹配到，否则不被匹配。<code>$(&#39;ul li:only-child&#39;)</code>返回只有一个子元素且为li的li元素</li>\n</ul>\n<h3 id=\"表单对象属性过滤选择器\"><a href=\"#表单对象属性过滤选择器\" class=\"headerlink\" title=\"表单对象属性过滤选择器\"></a>表单对象属性过滤选择器</h3><ul>\n<li><code>:enabled</code> 选取所有可用元素。<code>$(&#39;#form1 :enabled&#39;)</code>,选取<code>id</code>为<code>form1</code>的表单内的所有可用元素。</li>\n<li><code>:disbaled</code> 选取所有不可用元素。</li>\n<li><code>:checked</code> 选取所有被选中元素(单选框，复选框)。<code>$(&#39;input:checked&#39;)</code>,选取所有被选中的<code>input</code>元素</li>\n<li><code>:selected</code> 选取所有被选中的选项元素（下拉列表）。<code>$(&#39;select option:seleted&#39;)</code></li>\n</ul>\n<h3 id=\"表单选择器\"><a href=\"#表单选择器\" class=\"headerlink\" title=\"表单选择器\"></a>表单选择器</h3><ul>\n<li><code>:input</code> 选取所有<code>&amp;lt;input&gt;,&amp;lt;textarea&gt;,&amp;lt;select&gt;,&amp;lt;button&gt;</code>元素。如<code>$(&#39;#form1 :input&#39;)</code></li>\n<li><code>:text</code> 选取所有单行文本框。</li>\n<li><code>:password</code> 选取所有密码框</li>\n<li><code>:radio</code> 选取所有单选框</li>\n<li><code>:submit</code> 选取所有提交按钮</li>\n<li><code>:image</code> 选取所有的图像按钮</li>\n<li><code>:reset</code> 选取所有的重置按钮</li>\n<li><code>:button</code> 选取所有的按钮</li>\n<li><code>:file</code> 选取所有的上川域</li>\n<li><code>:hidden</code> 选取所有不可见元素</li>\n</ul>\n","excerpt":"<h2 id=\"第二章-jQuery选择器\"><a href=\"#第二章-jQuery选择器\" class=\"headerlink\" title=\"第二章 jQuery选择器\"></a>第二章 jQuery选择器</h2><h3 id=\"基本选择器\"><a href=\"#基本选择器\" class=\"headerlink\" title=\"基本选择器\"></a>基本选择器</h3><ul>\n<li><code>#id</code> 匹配id,  <code>$(&#39;#test&#39;)</code></li>\n<li><code>.class</code> 匹配类, <code>$(&#39;.test&#39;)</code></li>\n<li><code>element</code> 匹配标签, <code>$(&#39;div&#39;)</code></li>\n<li><code>*</code> 匹配所有元素, <code>$(&#39;*&#39;)</code></li>\n<li><code>selector1, select2,...,selectN</code> 匹配集合，如$(‘div, span, p.myClass’)</li>\n</ul>","more":"<h3 id=\"层次选择器\"><a href=\"#层次选择器\" class=\"headerlink\" title=\"层次选择器\"></a>层次选择器</h3><ul>\n<li><code>$(&#39;ancestor decendant&#39;)</code> 选择后代元素</li>\n<li><code>$(&#39;parent &gt; child&#39;)</code> 选择子元素</li>\n<li><code>$(&#39;prev + next&#39;)</code> 选择紧接在<code>prev</code>后的<code>next</code>元素，如: <code>$(&#39;.one + div&#39;)</code>，选择<code>one</code>之后的下个一个<code>div</code>同辈元素</li>\n<li><code>$(&#39;prev ~ siblings&#39;)</code> 选择prev后的所有siblings元素，如<code>$(&#39;#two ~ div&#39;)</code>选择<code>two</code>之后的所有<code>div</code>同辈元素</li>\n</ul>\n<h3 id=\"过滤选择器\"><a href=\"#过滤选择器\" class=\"headerlink\" title=\"过滤选择器\"></a>过滤选择器</h3><ul>\n<li><code>:first</code> 选取第一个元素，它只返回一个元素。 如<code>$(&#39;div:first&#39;)</code>选取第一个div元素。</li>\n<li><code>:last</code> 选取最后一个元素，它只返回一个元素。</li>\n<li><code>:not(selector)</code> 取出所有给定选择器匹配的元素，如<code>$(&#39;input:not(.myClass)&#39;)</code>,选取<code>class</code>不是<code>myClass</code>的<code>input</code>元素</li>\n<li><code>:even</code> 选取索引为偶数的元素，索引从<strong>0</strong>开始</li>\n<li><code>:odd</code> 选取奇数索引元素</li>\n<li><code>:eq(index)</code> 选取指定索引元素</li>\n<li><code>:gt(index)</code> 选取大于索引的元素</li>\n<li><code>:lt(index)</code> 选取小于索引的元素</li>\n<li><code>:header</code> 选取所有标题元素 如<code>$(&#39;:header&#39;)</code>，选取网页中所有<code>&amp;lt;h1&gt;,&amp;lt;h2&gt;,&amp;lt;h3&gt;;....</code></li>\n<li><code>:animated</code> 选取所有正在执行动画的元素 如：<code>$(&#39;div:animated&#39;)</code>选取正在执行动画的所有<code>div</code>元素</li>\n<li><code>:focus</code> 选取当前获取焦点的元素 如<code>$(&#39;:focus&#39;)</code>，获取当前获取焦点的元素</li>\n</ul>\n<h3 id=\"内容过滤选择器\"><a href=\"#内容过滤选择器\" class=\"headerlink\" title=\"内容过滤选择器\"></a>内容过滤选择器</h3><ul>\n<li><code>:contains(text)</code> 选取文本内容含有text的元素, 如<code>$(&#39;div:contains(&quot;我&quot;)&#39;)</code>,选取文本含有<code>我</code>的<code>div</code>元素</li>\n<li><code>:empty</code> 选取不包含子元素或者文本为空的元素, 如<code>$(&#39;div:empty&#39;)</code>选取不包含子元素的<code>div</code>元素</li>\n<li><code>:has(selector)</code> 选取含有选择器的所匹配的元素的元素，如<code>$(&#39;div:has(p)&#39;)</code>，选取含有<code>p</code>元素的<code>div</code>元素</li>\n<li><code>:parent</code> 选取含有子元素或文本的元素 如<code>$(&#39;div:parent&#39;)</code>,选取拥有子元素的<code>div</code>元素</li>\n</ul>\n<h3 id=\"可见性过滤器\"><a href=\"#可见性过滤器\" class=\"headerlink\" title=\"可见性过滤器\"></a>可见性过滤器</h3><ul>\n<li><code>:hidden</code> 选取所有不可见元素, 如<code>$(&#39;:hidden&#39;)</code>, 选取所有不可见元素，<code>$(&#39;input:hidden&#39;)</code>选取所有不可见的input元素</li>\n<li><code>:visible</code> 选取所有可见元素</li>\n</ul>\n<h3 id=\"属性过滤选择器\"><a href=\"#属性过滤选择器\" class=\"headerlink\" title=\"属性过滤选择器\"></a>属性过滤选择器</h3><ul>\n<li><code>[attr]</code> 选取拥有此属性的元素, 如<code>$(&#39;div[id]&#39;)</code>, 选取拥有属性<code>id</code>的元素</li>\n<li><code>[attr=val]</code> 选取<code>attr</code>属性为<code>val</code>的元素如, <code>$(&#39;div[title=test]&#39;)</code>选取<code>title</code>为<code>test</code>的<code>div</code>元素</li>\n<li><code>[attr!=val]</code> 选取<code>attr</code>的值不为<code>val</code>的元素</li>\n<li><code>[attr^=val]</code> 选取<code>attr</code>的值以<code>val</code>开始的元素</li>\n<li><code>[attr$=val]</code> 选取<code>attr</code>的值以<code>val</code>结束的元素</li>\n<li><code>[attr*=val]</code> 选取<code>attr</code>的值包含<code>val</code>的元素</li>\n<li><code>[attr|=val]</code> 选取<code>attr</code>的值为<code>val</code>或以<code>val-</code>开始的元素</li>\n<li><code>[attr~=val]</code> 选取<code>attr</code>的值包含<code>&#39; val&#39;</code>的元素（注意val前面要有空格）</li>\n<li><code>[attr1][attr2][attrN]</code> 选取同时满足几个条件的元素，如<code>$(&#39;div[id][title$=&quot;test&quot;]&#39;)</code>，选取拥有属性id，并且属性title以test结束的div元素</li>\n</ul>\n<h3 id=\"子元素过滤选择器\"><a href=\"#子元素过滤选择器\" class=\"headerlink\" title=\"子元素过滤选择器\"></a>子元素过滤选择器</h3><ul>\n<li><code>:nth-child(index/even/odd/equation)</code> 选取每个父元素下的第<code>index</code>个或者奇偶子元素</li>\n<li><code>:first-child</code> 选取每个父元素的第一个子元素，如<code>$(&#39;ul li:first-child&#39;)</code>, 选择ul的第一个li元素</li>\n<li><code>:last-child</code> 选取每个父元素的子元素</li>\n<li><code>:only-child</code> 如果父控件一个子元素，那么匹配到，否则不被匹配。<code>$(&#39;ul li:only-child&#39;)</code>返回只有一个子元素且为li的li元素</li>\n</ul>\n<h3 id=\"表单对象属性过滤选择器\"><a href=\"#表单对象属性过滤选择器\" class=\"headerlink\" title=\"表单对象属性过滤选择器\"></a>表单对象属性过滤选择器</h3><ul>\n<li><code>:enabled</code> 选取所有可用元素。<code>$(&#39;#form1 :enabled&#39;)</code>,选取<code>id</code>为<code>form1</code>的表单内的所有可用元素。</li>\n<li><code>:disbaled</code> 选取所有不可用元素。</li>\n<li><code>:checked</code> 选取所有被选中元素(单选框，复选框)。<code>$(&#39;input:checked&#39;)</code>,选取所有被选中的<code>input</code>元素</li>\n<li><code>:selected</code> 选取所有被选中的选项元素（下拉列表）。<code>$(&#39;select option:seleted&#39;)</code></li>\n</ul>\n<h3 id=\"表单选择器\"><a href=\"#表单选择器\" class=\"headerlink\" title=\"表单选择器\"></a>表单选择器</h3><ul>\n<li><code>:input</code> 选取所有<code>&amp;lt;input&gt;,&amp;lt;textarea&gt;,&amp;lt;select&gt;,&amp;lt;button&gt;</code>元素。如<code>$(&#39;#form1 :input&#39;)</code></li>\n<li><code>:text</code> 选取所有单行文本框。</li>\n<li><code>:password</code> 选取所有密码框</li>\n<li><code>:radio</code> 选取所有单选框</li>\n<li><code>:submit</code> 选取所有提交按钮</li>\n<li><code>:image</code> 选取所有的图像按钮</li>\n<li><code>:reset</code> 选取所有的重置按钮</li>\n<li><code>:button</code> 选取所有的按钮</li>\n<li><code>:file</code> 选取所有的上川域</li>\n<li><code>:hidden</code> 选取所有不可见元素</li>\n</ul>"},{"title":"锋利的jQeury 第三章-笔记","_content":"\n## 第三章 jQuery中的DOM操作\n - 查找`DOM`节点\n\n    ```javascript\n    var $li = $('ul li:eq(1)'); //获取<ul>里的第二个<li>节点\n    ```\n\n<!--more-->\n\n - 查找属性节点\n\n    ```javascript\n    var $para = $('p'); \n    var p_txt = $para.attr('title');\n    ```\n<!--more-->\n\n - 创建元素节点\n\n    ```javascript\n    var $li = $('<li></li>');\n    ```\n\n - 创建文本节点\n\n    ```javascript\n    var $li = $('<li>香蕉</li>');\n    ```\n\n - 创建属性节点\n\n    ```javascript\n    var $li = $('<li title=\"香蕉\">香蕉</li>');\n    ```\n    \n - 插入节点的方法\n    - append 追加元素。$('p').append($(\"&lt;b>你好&lt;/b>\"))，A.append(B)之后，A和B是父子关系。\n    - appendTo 跟append相反，A.append(B) 相当于 B.appendTo(A)\n    - prepend 插入到前面\n    - prependTo 跟prepend相反\n    - after 在每个匹配元素之后插入内容，A.after(B)之后，A与B是兄弟元素\n    - intertAfter跟after相反，A.after(B)相当于B.instertAfter(A)\n    - before，跟after相反\n    - insertBefore，A.before(B)相当于B.insertBefore(A)\n    - 删除节点的方法\n    - remove 删除匹配的元素 $('ul li:eq(1)').remove()，删除第二个li元素，remove返回值是删除的元素\n    - detach 与remove不同，detach会保留所有该元素绑定的事件，附加的数据等。\n    - empty 清空节点\n\n- 复制节点 clone，可以传入一个boolean参数表示是否同时复制元素中所绑定的事件。\n\n- 替换节点\n    - replaceWith， A.replaceWith(B)，用B替换A\n    - replaceAll 跟replaceWith相反，A.replaceWith(B)相当于B.replaceAll(A)\n\n- 包裹节点\n    - wrap $('strong').wrap('&lt;b>&lt;/b>') 用&lt;b>标签将&lt;strong>标签包起来，如果有多个匹配，则每个元素单独包裹。\n    - wrapAll，将所有的元素用一个元素来包裹。如果匹配的节点之间有其他节点，其他节点会被放到包裹元素之后。\n    - wrapInner 将子内容（包括文本节点）包裹起来。\n\n- 获取属性，$('p').atter('title')\n\n- 设置属性\n\n    - $('p').attr('title', 'your title') 设置单个属性\n\n    - $('p').attr({'title', 'your title', 'name': 'test'})，设置多个属性\n\n- 删除属性 $('p').removeAttr('title');\n\n- 获取样式 $('p').attr('class')获取&lt;p>元素的class\n\n- 设置样式 $('p').attr('class', 'high') 设置样式\n\n- 追加样式 $('p').addClass('another')\n\n- 移除样式\n\n    - $('p').removeClass('another') 移除一个样式\n\n    - $('p').removeClass('another high') 移除多个样式\n\n- 切换样式 $('p').toggleClass('another')，如果another类名不存在则添加之，否则删除之\n\n- 判断是否含有某个样式 $('p').hasClass('another')\n- html()方法 获取或设置html内容，相当于javascript的innerHTML属性\n- text() 获取或设置文本内容，相当于javascript的innerText属性\n\n    - 获取: var text = $('p').text()\n\n    - 设置 $('p').text('你喜欢的水果是')\n- val()方法 获取或设置value，相当于javascript的value属性\n\n- 遍历节点\n    - children() 返回子节点（DOM原声节点，非jQuery节点）\n    - next()方法，获取紧临的同辈元素，也就是返回下一个兄弟节点。\n    - prev()，跟next相反，返回上一个兄弟节点\n    - siblings()返回前后所有的同辈元素。\n    - closest() 取得最近的匹配元素，往父控件追溯。如$(e.target).closest('li').css('color', 'red');给点击的目标元素附近的li元素添加颜色。\n    - parents() 获得集合中每个匹配元素的祖先元素。\n    - parent() 获得集合中每个匹配元素的父级元素。\n    - find() / filter() / nextAll() / prevAll() 等。\n\n- 获取样式 $('p').css('color') 获取&lt;p>的样式颜色\n\n- 设置样式\n\n    - $('p').css('color', 'red');\n\n    - $('p').css({\"fontSize\": \"30px\", \"backgroundColor\": \"#888888\"'});\n\n    - 元素定位\n        - offset()，获取元素在当前视窗中的相对偏移。\n        - position() 获取元素相对于最近的一个position样式为relative或absolute（为啥）的父节点的相对偏移。\n    - scrollLeft() 获取或设置水平滚动条的位置\n    - scrollRight() 获取或设置垂直滚动条的位置。\n","source":"_posts/chapter-3.md","raw":"---\ntitle: 锋利的jQeury 第三章-笔记 \n---\n\n## 第三章 jQuery中的DOM操作\n - 查找`DOM`节点\n\n    ```javascript\n    var $li = $('ul li:eq(1)'); //获取<ul>里的第二个<li>节点\n    ```\n\n<!--more-->\n\n - 查找属性节点\n\n    ```javascript\n    var $para = $('p'); \n    var p_txt = $para.attr('title');\n    ```\n<!--more-->\n\n - 创建元素节点\n\n    ```javascript\n    var $li = $('<li></li>');\n    ```\n\n - 创建文本节点\n\n    ```javascript\n    var $li = $('<li>香蕉</li>');\n    ```\n\n - 创建属性节点\n\n    ```javascript\n    var $li = $('<li title=\"香蕉\">香蕉</li>');\n    ```\n    \n - 插入节点的方法\n    - append 追加元素。$('p').append($(\"&lt;b>你好&lt;/b>\"))，A.append(B)之后，A和B是父子关系。\n    - appendTo 跟append相反，A.append(B) 相当于 B.appendTo(A)\n    - prepend 插入到前面\n    - prependTo 跟prepend相反\n    - after 在每个匹配元素之后插入内容，A.after(B)之后，A与B是兄弟元素\n    - intertAfter跟after相反，A.after(B)相当于B.instertAfter(A)\n    - before，跟after相反\n    - insertBefore，A.before(B)相当于B.insertBefore(A)\n    - 删除节点的方法\n    - remove 删除匹配的元素 $('ul li:eq(1)').remove()，删除第二个li元素，remove返回值是删除的元素\n    - detach 与remove不同，detach会保留所有该元素绑定的事件，附加的数据等。\n    - empty 清空节点\n\n- 复制节点 clone，可以传入一个boolean参数表示是否同时复制元素中所绑定的事件。\n\n- 替换节点\n    - replaceWith， A.replaceWith(B)，用B替换A\n    - replaceAll 跟replaceWith相反，A.replaceWith(B)相当于B.replaceAll(A)\n\n- 包裹节点\n    - wrap $('strong').wrap('&lt;b>&lt;/b>') 用&lt;b>标签将&lt;strong>标签包起来，如果有多个匹配，则每个元素单独包裹。\n    - wrapAll，将所有的元素用一个元素来包裹。如果匹配的节点之间有其他节点，其他节点会被放到包裹元素之后。\n    - wrapInner 将子内容（包括文本节点）包裹起来。\n\n- 获取属性，$('p').atter('title')\n\n- 设置属性\n\n    - $('p').attr('title', 'your title') 设置单个属性\n\n    - $('p').attr({'title', 'your title', 'name': 'test'})，设置多个属性\n\n- 删除属性 $('p').removeAttr('title');\n\n- 获取样式 $('p').attr('class')获取&lt;p>元素的class\n\n- 设置样式 $('p').attr('class', 'high') 设置样式\n\n- 追加样式 $('p').addClass('another')\n\n- 移除样式\n\n    - $('p').removeClass('another') 移除一个样式\n\n    - $('p').removeClass('another high') 移除多个样式\n\n- 切换样式 $('p').toggleClass('another')，如果another类名不存在则添加之，否则删除之\n\n- 判断是否含有某个样式 $('p').hasClass('another')\n- html()方法 获取或设置html内容，相当于javascript的innerHTML属性\n- text() 获取或设置文本内容，相当于javascript的innerText属性\n\n    - 获取: var text = $('p').text()\n\n    - 设置 $('p').text('你喜欢的水果是')\n- val()方法 获取或设置value，相当于javascript的value属性\n\n- 遍历节点\n    - children() 返回子节点（DOM原声节点，非jQuery节点）\n    - next()方法，获取紧临的同辈元素，也就是返回下一个兄弟节点。\n    - prev()，跟next相反，返回上一个兄弟节点\n    - siblings()返回前后所有的同辈元素。\n    - closest() 取得最近的匹配元素，往父控件追溯。如$(e.target).closest('li').css('color', 'red');给点击的目标元素附近的li元素添加颜色。\n    - parents() 获得集合中每个匹配元素的祖先元素。\n    - parent() 获得集合中每个匹配元素的父级元素。\n    - find() / filter() / nextAll() / prevAll() 等。\n\n- 获取样式 $('p').css('color') 获取&lt;p>的样式颜色\n\n- 设置样式\n\n    - $('p').css('color', 'red');\n\n    - $('p').css({\"fontSize\": \"30px\", \"backgroundColor\": \"#888888\"'});\n\n    - 元素定位\n        - offset()，获取元素在当前视窗中的相对偏移。\n        - position() 获取元素相对于最近的一个position样式为relative或absolute（为啥）的父节点的相对偏移。\n    - scrollLeft() 获取或设置水平滚动条的位置\n    - scrollRight() 获取或设置垂直滚动条的位置。\n","slug":"chapter-3","published":1,"date":"2016-09-13T06:30:13.344Z","updated":"2016-09-13T06:30:13.344Z","_id":"ciszeqa840002espvlssy3net","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"第三章-jQuery中的DOM操作\"><a href=\"#第三章-jQuery中的DOM操作\" class=\"headerlink\" title=\"第三章 jQuery中的DOM操作\"></a>第三章 jQuery中的DOM操作</h2><ul>\n<li><p>查找<code>DOM</code>节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'ul li:eq(1)'</span>); <span class=\"comment\">//获取&lt;ul&gt;里的第二个&lt;li&gt;节点</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>查找属性节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $para = $(<span class=\"string\">'p'</span>); </div><div class=\"line\"><span class=\"keyword\">var</span> p_txt = $para.attr(<span class=\"string\">'title'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<!--more-->\n<ul>\n<li><p>创建元素节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li&gt;&lt;/li&gt;'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建文本节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li&gt;香蕉&lt;/li&gt;'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建属性节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li title=\"香蕉\"&gt;香蕉&lt;/li&gt;'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>插入节点的方法<ul>\n<li>append 追加元素。$(‘p’).append($(“&lt;b&gt;你好&lt;/b&gt;”))，A.append(B)之后，A和B是父子关系。</li>\n<li>appendTo 跟append相反，A.append(B) 相当于 B.appendTo(A)</li>\n<li>prepend 插入到前面</li>\n<li>prependTo 跟prepend相反</li>\n<li>after 在每个匹配元素之后插入内容，A.after(B)之后，A与B是兄弟元素</li>\n<li>intertAfter跟after相反，A.after(B)相当于B.instertAfter(A)</li>\n<li>before，跟after相反</li>\n<li>insertBefore，A.before(B)相当于B.insertBefore(A)</li>\n<li>删除节点的方法</li>\n<li>remove 删除匹配的元素 $(‘ul li:eq(1)’).remove()，删除第二个li元素，remove返回值是删除的元素</li>\n<li>detach 与remove不同，detach会保留所有该元素绑定的事件，附加的数据等。</li>\n<li>empty 清空节点</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>复制节点 clone，可以传入一个boolean参数表示是否同时复制元素中所绑定的事件。</p>\n</li>\n<li><p>替换节点</p>\n<ul>\n<li>replaceWith， A.replaceWith(B)，用B替换A</li>\n<li>replaceAll 跟replaceWith相反，A.replaceWith(B)相当于B.replaceAll(A)</li>\n</ul>\n</li>\n<li><p>包裹节点</p>\n<ul>\n<li>wrap $(‘strong’).wrap(‘&lt;b&gt;&lt;/b&gt;’) 用&lt;b&gt;标签将&lt;strong&gt;标签包起来，如果有多个匹配，则每个元素单独包裹。</li>\n<li>wrapAll，将所有的元素用一个元素来包裹。如果匹配的节点之间有其他节点，其他节点会被放到包裹元素之后。</li>\n<li>wrapInner 将子内容（包括文本节点）包裹起来。</li>\n</ul>\n</li>\n<li><p>获取属性，$(‘p’).atter(‘title’)</p>\n</li>\n<li><p>设置属性</p>\n<ul>\n<li><p>$(‘p’).attr(‘title’, ‘your title’) 设置单个属性</p>\n</li>\n<li><p>$(‘p’).attr({‘title’, ‘your title’, ‘name’: ‘test’})，设置多个属性</p>\n</li>\n</ul>\n</li>\n<li><p>删除属性 $(‘p’).removeAttr(‘title’);</p>\n</li>\n<li><p>获取样式 $(‘p’).attr(‘class’)获取&lt;p&gt;元素的class</p>\n</li>\n<li><p>设置样式 $(‘p’).attr(‘class’, ‘high’) 设置样式</p>\n</li>\n<li><p>追加样式 $(‘p’).addClass(‘another’)</p>\n</li>\n<li><p>移除样式</p>\n<ul>\n<li><p>$(‘p’).removeClass(‘another’) 移除一个样式</p>\n</li>\n<li><p>$(‘p’).removeClass(‘another high’) 移除多个样式</p>\n</li>\n</ul>\n</li>\n<li><p>切换样式 $(‘p’).toggleClass(‘another’)，如果another类名不存在则添加之，否则删除之</p>\n</li>\n<li><p>判断是否含有某个样式 $(‘p’).hasClass(‘another’)</p>\n</li>\n<li>html()方法 获取或设置html内容，相当于javascript的innerHTML属性</li>\n<li><p>text() 获取或设置文本内容，相当于javascript的innerText属性</p>\n<ul>\n<li><p>获取: var text = $(‘p’).text()</p>\n</li>\n<li><p>设置 $(‘p’).text(‘你喜欢的水果是’)</p>\n</li>\n</ul>\n</li>\n<li><p>val()方法 获取或设置value，相当于javascript的value属性</p>\n</li>\n<li><p>遍历节点</p>\n<ul>\n<li>children() 返回子节点（DOM原声节点，非jQuery节点）</li>\n<li>next()方法，获取紧临的同辈元素，也就是返回下一个兄弟节点。</li>\n<li>prev()，跟next相反，返回上一个兄弟节点</li>\n<li>siblings()返回前后所有的同辈元素。</li>\n<li>closest() 取得最近的匹配元素，往父控件追溯。如$(e.target).closest(‘li’).css(‘color’, ‘red’);给点击的目标元素附近的li元素添加颜色。</li>\n<li>parents() 获得集合中每个匹配元素的祖先元素。</li>\n<li>parent() 获得集合中每个匹配元素的父级元素。</li>\n<li>find() / filter() / nextAll() / prevAll() 等。</li>\n</ul>\n</li>\n<li><p>获取样式 $(‘p’).css(‘color’) 获取&lt;p&gt;的样式颜色</p>\n</li>\n<li><p>设置样式</p>\n<ul>\n<li><p>$(‘p’).css(‘color’, ‘red’);</p>\n</li>\n<li><p>$(‘p’).css({“fontSize”: “30px”, “backgroundColor”: “#888888”‘});</p>\n</li>\n<li><p>元素定位</p>\n<ul>\n<li>offset()，获取元素在当前视窗中的相对偏移。</li>\n<li>position() 获取元素相对于最近的一个position样式为relative或absolute（为啥）的父节点的相对偏移。</li>\n</ul>\n</li>\n<li>scrollLeft() 获取或设置水平滚动条的位置</li>\n<li>scrollRight() 获取或设置垂直滚动条的位置。</li>\n</ul>\n</li>\n</ul>\n","excerpt":"<h2 id=\"第三章-jQuery中的DOM操作\"><a href=\"#第三章-jQuery中的DOM操作\" class=\"headerlink\" title=\"第三章 jQuery中的DOM操作\"></a>第三章 jQuery中的DOM操作</h2><ul>\n<li><p>查找<code>DOM</code>节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'ul li:eq(1)'</span>); <span class=\"comment\">//获取&lt;ul&gt;里的第二个&lt;li&gt;节点</span></div></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<ul>\n<li><p>查找属性节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $para = $(<span class=\"string\">'p'</span>); </div><div class=\"line\"><span class=\"keyword\">var</span> p_txt = $para.attr(<span class=\"string\">'title'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<!--more-->\n<ul>\n<li><p>创建元素节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li&gt;&lt;/li&gt;'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建文本节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li&gt;香蕉&lt;/li&gt;'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建属性节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li title=\"香蕉\"&gt;香蕉&lt;/li&gt;'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>插入节点的方法<ul>\n<li>append 追加元素。$(‘p’).append($(“&lt;b&gt;你好&lt;/b&gt;”))，A.append(B)之后，A和B是父子关系。</li>\n<li>appendTo 跟append相反，A.append(B) 相当于 B.appendTo(A)</li>\n<li>prepend 插入到前面</li>\n<li>prependTo 跟prepend相反</li>\n<li>after 在每个匹配元素之后插入内容，A.after(B)之后，A与B是兄弟元素</li>\n<li>intertAfter跟after相反，A.after(B)相当于B.instertAfter(A)</li>\n<li>before，跟after相反</li>\n<li>insertBefore，A.before(B)相当于B.insertBefore(A)</li>\n<li>删除节点的方法</li>\n<li>remove 删除匹配的元素 $(‘ul li:eq(1)’).remove()，删除第二个li元素，remove返回值是删除的元素</li>\n<li>detach 与remove不同，detach会保留所有该元素绑定的事件，附加的数据等。</li>\n<li>empty 清空节点</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>复制节点 clone，可以传入一个boolean参数表示是否同时复制元素中所绑定的事件。</p>\n</li>\n<li><p>替换节点</p>\n<ul>\n<li>replaceWith， A.replaceWith(B)，用B替换A</li>\n<li>replaceAll 跟replaceWith相反，A.replaceWith(B)相当于B.replaceAll(A)</li>\n</ul>\n</li>\n<li><p>包裹节点</p>\n<ul>\n<li>wrap $(‘strong’).wrap(‘&lt;b&gt;&lt;/b&gt;’) 用&lt;b&gt;标签将&lt;strong&gt;标签包起来，如果有多个匹配，则每个元素单独包裹。</li>\n<li>wrapAll，将所有的元素用一个元素来包裹。如果匹配的节点之间有其他节点，其他节点会被放到包裹元素之后。</li>\n<li>wrapInner 将子内容（包括文本节点）包裹起来。</li>\n</ul>\n</li>\n<li><p>获取属性，$(‘p’).atter(‘title’)</p>\n</li>\n<li><p>设置属性</p>\n<ul>\n<li><p>$(‘p’).attr(‘title’, ‘your title’) 设置单个属性</p>\n</li>\n<li><p>$(‘p’).attr({‘title’, ‘your title’, ‘name’: ‘test’})，设置多个属性</p>\n</li>\n</ul>\n</li>\n<li><p>删除属性 $(‘p’).removeAttr(‘title’);</p>\n</li>\n<li><p>获取样式 $(‘p’).attr(‘class’)获取&lt;p&gt;元素的class</p>\n</li>\n<li><p>设置样式 $(‘p’).attr(‘class’, ‘high’) 设置样式</p>\n</li>\n<li><p>追加样式 $(‘p’).addClass(‘another’)</p>\n</li>\n<li><p>移除样式</p>\n<ul>\n<li><p>$(‘p’).removeClass(‘another’) 移除一个样式</p>\n</li>\n<li><p>$(‘p’).removeClass(‘another high’) 移除多个样式</p>\n</li>\n</ul>\n</li>\n<li><p>切换样式 $(‘p’).toggleClass(‘another’)，如果another类名不存在则添加之，否则删除之</p>\n</li>\n<li><p>判断是否含有某个样式 $(‘p’).hasClass(‘another’)</p>\n</li>\n<li>html()方法 获取或设置html内容，相当于javascript的innerHTML属性</li>\n<li><p>text() 获取或设置文本内容，相当于javascript的innerText属性</p>\n<ul>\n<li><p>获取: var text = $(‘p’).text()</p>\n</li>\n<li><p>设置 $(‘p’).text(‘你喜欢的水果是’)</p>\n</li>\n</ul>\n</li>\n<li><p>val()方法 获取或设置value，相当于javascript的value属性</p>\n</li>\n<li><p>遍历节点</p>\n<ul>\n<li>children() 返回子节点（DOM原声节点，非jQuery节点）</li>\n<li>next()方法，获取紧临的同辈元素，也就是返回下一个兄弟节点。</li>\n<li>prev()，跟next相反，返回上一个兄弟节点</li>\n<li>siblings()返回前后所有的同辈元素。</li>\n<li>closest() 取得最近的匹配元素，往父控件追溯。如$(e.target).closest(‘li’).css(‘color’, ‘red’);给点击的目标元素附近的li元素添加颜色。</li>\n<li>parents() 获得集合中每个匹配元素的祖先元素。</li>\n<li>parent() 获得集合中每个匹配元素的父级元素。</li>\n<li>find() / filter() / nextAll() / prevAll() 等。</li>\n</ul>\n</li>\n<li><p>获取样式 $(‘p’).css(‘color’) 获取&lt;p&gt;的样式颜色</p>\n</li>\n<li><p>设置样式</p>\n<ul>\n<li><p>$(‘p’).css(‘color’, ‘red’);</p>\n</li>\n<li><p>$(‘p’).css({“fontSize”: “30px”, “backgroundColor”: “#888888”‘});</p>\n</li>\n<li><p>元素定位</p>\n<ul>\n<li>offset()，获取元素在当前视窗中的相对偏移。</li>\n<li>position() 获取元素相对于最近的一个position样式为relative或absolute（为啥）的父节点的相对偏移。</li>\n</ul>\n</li>\n<li>scrollLeft() 获取或设置水平滚动条的位置</li>\n<li>scrollRight() 获取或设置垂直滚动条的位置。</li>\n</ul>\n</li>\n</ul>"},{"title":"CSS权威值南-笔记","_content":"\n## 第一章 css和文档\n\n-  文档内定义样式\n\n        <style type=\"text/css\">\n            @import url(sheet2.css)\n            h1 {color: maroon;}\n        </style>\n\n-   引入css文件\n\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"sheet1.css\" media=\"all\" />\n\n<!--more-->\n\n## 第二章 选择器\n\n- ID选择器和指定id的属性选择器不是一回事，h1#page-title和h1[id=\"page-title\"]之间有差别。\n- p.warning和p[class~=\"warning\"]是等价的，但是p[class=\"warning\"]匹配只有一个class的p元素。\n\n    - 类似的还有[foo^=\"bar\"] 选择foo属性值以bar开头的所有元素\n    - [foo$=\"bar\"] 选择foo属性值以bar结尾的所有元素\n    - [foo*=\"bar\"] 选择foo属性值中含有bar子串的所有元素\n\n- 后代选择器中，两个元素之间的层次间隔可以是无限的，如果想匹配直接相连的父子元素，可以使用子结合符\">\"\n\n- 兄弟元素选择器 h1 +  p {margin-top: 0}\n\n- 伪类选择器，伪类的顺序很重要 link-visited-focus-hover-active\n\n    - 连接伪类\n        - :link 未访问的超连接\n        - :visited  已访问的超连接\n\n    - 动态伪类\n        - :focus 拥有焦点的元素（可以接受键盘输入或者能已某种方式激活的元素）\n        - :hover 鼠标指针悬停的元素\n        - :active 用户输入激活的元素\n\n    - 静态伪类\n        - :first-child 第一个子元素\n        - :first-letter 第一个字母\n        - :first-line 第一行\n        - :lang(fr) 根据语言选择\n    - :first-letter和:first-line只能用于标记或段落之类的块元素，不能用于超连接等行内元素。\n\n## 第三章 结构和层叠\n\n- 选择器的特殊性\n\n    - 给定的各个ID属性值，加0，1，0，0\n\n    - 给形的各个类的属性值，属性选择或者伪类，加0，0，1，0\n\n    - 给定的各个元素和伪元素加0，0，0，1\n\n    - 结合符和通配选择器对特属性没有任何贡献\n\n- 样式继承\n\n    - 文本颜色可被继承\n    - border不能被继承，一般的大多数框模型属性不能被继承（包括外边框，内边距，背景和边框）\n\n    - 继承的值没有特殊性，连0特殊性都没有p(61)，因此需要避免不加区别的使用通配选择器。\n\n- 层叠权重大小顺序\n\n    - 读者的重要声明\n\n    - 创作人员的重要声明\n\n    - 创作人员的正常声明\n\n    - 读者的正常声明\n\n    - 用户代理声明\n\n## 第四章 值和单位\n\n- 颜色表示\n\n    - 命名颜色 {color: gray;}\n\n    - 函数式RGB {color: rgb(100%, 50%, 50%);}，或者{color: rgb(52, 95, 153);}\n\n    - 十六进制RGB {color: #ff0000;} 如果3组各自成对，可以简写#f00，相当于#ff0000\n- WEB安全颜色\n    - RGB百分表示法，能被20整除的颜色，如rgb(60, 40, 120)\n\n    - 十六进制，使用00，33，66，99，cc，ff，如#99ffcc\n\n- 长度单位\n\n    - 绝对长度单位 在打印文档的样式表时更为有用，Web设计中不使用绝对长度单位。\n\n        - 英寸 (in)\n\n        - 厘米(cm) 1in = 2.54cm\n\n        - 毫米(mm) 1in = 25.4mm\n\n        - 点(pt) 1in = 72pt\n\n        - 派卡(pc)  1pc = 12pt, 6pc = 1in\n\n    - 相对长度单位\n        - em (em-height) 1em定义未一种给定字体的font-size的值，随元素的不同而不同，国外最常用，也是未来的趋势，更容易适配移动端。\n        - ex (x-height) 1ex定位未一种给定字体的小写x的高度，不同字体ex的值不同。\n        - px像素\n\n## 第五章 字体\ncss定义了5中通用字体\n\n- Serif 成比例的有上下短线的字体\n- Sans-serif 成比例的，没有上下短线\n- Monospace 不成比例，通常用于模拟打字机打出的问题\n- Cursive  手写体\n- Fantasy 无法用任何特征来定义的字体\n\n特定字体：如Times，Verdana, Helvetica, Arial等，每一种特定的字体都会落入上述通用系列中。\n\n- font-family 如h1 {font-family: Georgia, serif}, Georgia是特定字体，serif是通用字体。\n- font-weight\n    - normal\n    - bold\n    - bolder\n    - lighter\n    - 100/200/300/400/500/600/700/800/900\n- font-size\n    - xx-small/x-small/small/medium/large/x-large/xx-large/smaller/larger\n    - &lt;length>/&lt;percentage>\n- font-style字体风格\n    - italic/oblique/normal/inherit\n- font-variant 字体变形\n    - small-caps 首字母大写\n    - normal\n    - inherit\n\n## 第六章 文本属性\n\n- text-indent 首行缩进\n    - &lt;length> 如：p {text-indent: 3em}\n    - &lt;percentag> 相对于父元素宽度\n    - inhert\n- text-align 水平对齐\n    - left\n    - right\n    - center\n    - justify 两端对齐，在打印领域很常见\n    - inherit\n- line-height 行高，定义了基线之间的距离，而不是字体大小，可以控制行间距。行间距=行高-字体大小\n    - &lt;length>\n    - &lt;percentage>\n    - &lt;number>\n    - normal\n    - inherit\n- vertical-align 行内元素和表单元格的垂直方向对齐\n    - base-line 基线对齐，元素的底端和副元素的基线对齐\n    - sub/super 上标/下标，相对于基线升高/降低\n    -  bottom 元素行内框的底端和行框的底端对齐\n    - text-bottom 元素行内框的底端和文本的底端对齐\n    - top 与bottom相反\n    - text-top 与text-bottom相反\n    - middle 居中对齐\n    - &lt;percentage>\n    - &lt;length>\n    - inherit\n- word-spacing 字间隔\n    - &lt;length>\n    - normal\n    - inherit\n- letter-spacing 字母间隔\n    - &lt;length>\n    - normal\n    - inherit\n- text-transform\n    - uppercase 全大写\n    - lowercase 全小写\n    - capitalize 单词首字母大写\n    - none\n    - inherit\n- text-decoration 文字效果\n    - none\n    - underline 下划线\n    - overline 上划线\n    - line-through 中划线\n    - blink\n    - inherit\n- text-shadow\n    - none\n\n    - 颜色值和三个长度值 text-shadow: silver 2px 2px 2px;\n- white-space\n    - normal 合并空白符，忽略换行符，允许自动换行。\n    - nowrap 合并空白符，忽略换行符号，不允许自动换行。\n    - pre 保留空白符号，保留换行符号，不允许自动换行。\n    - pre-wrap 保留空白符，保留换行符，允许自动换行。\n    - pre-line 合并空白符，保留换行符，允许自动换行。\n    - inherit\n- direction 文本方向\n    - ltr\n    - rtl\n    - inherit\n\n## 第七章 基本视觉格式化\n\n水平格式化\n七大水平属性\n\n- margin-left\n- border-left\n- padding-left\n- width\n- padding-right\n- border-right\n- maring-right\n\n这7个属性值加起来就是元素包含块的宽度，这往往是副元素的width值。\nwidth就是左内边距到右内边距的距离。\n这7个属性中，只有3个属性可以设置为auto: margin-left, width, margin-right，可以用auto弥补实际值和所需总和的差距。如果三个值都为非auto的某个值，这些格式化属性过分受限，此时会强制设置margin-right为auto.\n不止一个auto的情况：\n\n-  margin-left和margin-right为auto，此时元素居中，与text-align:center的区别，text-align只应用块级元素的内联内容，并不能使元素居中。\n- margin-left和width为auto，此时margin-left为0，width会填满剩余包块。\n- margin-right和width为auto，此时margin-right为0，width填满剩余包块。\n- margin-left和margin-right和width都为auto，此时margin-left和margin-right都为0,width会填满包块。这种情况和默认是相同的。\n\n水平外边距不会合并，父元素的内边距，边距和外边距可能影响子元素。\n\n负外边距\n   负外边距时，  会使得内容宽度超出包块，因为根据等式父包块width=7大水平之和，margin-left或margin-right为负时，width要增大。\n\n垂直格式化\n如果元素的内容的高度，大于元素框的高度，用户代理的具体行为将取决于overflow属性。\n垂直格式化的七大属性\n\n- margin-top\n- border-top\n- padding-top\n- height\n- padding-bottom\n- border-bottom\n- margin-bottom\n\n这7个属性值的值和必须等于含块的height，其中，3个值可以设置为auto，margin-top，height，margin-bottom，如果margin-top或margin-bottom设置为auto则自动计算0，这就是为什么不容易设置元素为垂直居中，这与水平时不一样的。对于定位元素，上下边距为auto时，处理不同。\n\n如果没有显式声明包含块的height，百分数高度为重置为auto，如果块级中场元素的height设置为auto，显示时的高度将恰好足以包含其内联内容。\n如果块级正常流元素高度设置为auto，而且只有块级子元素，其默认高度将是从最高块级子元素的外边框边界到最低块级子元素外边框边界之间的距离。\n不过，如果块级元素有padding或者border，则高度则是最高子元素的上外边距到其最低子元素的下外边距边界之间的距离。\n\n合并垂直外边距\n垂直合并只引用与外边距，不会应用于内边距和边框。\n负的下外边距会使段落看上去向下拉，负的上边会使段落看上去向上拉。\n\n## 第八章 内边距、边框和外边距\n\n- border-style\n    - none\n    - hidden\n    - dotted\n    - dashed\n    - solid\n    - double\n    - groove\n    - ridge\n    - inset\n    - outset\n\n- 设置多个边框样式 p.asize {boder-style:  solid dashed dotted solid;}\n- boder-top-style/boder-right-style/border-bottom-style/border-left-style 单独设置边框样式\n- border-width边框宽度\n    - thin\n    - medium\n    - thick\n    - &lt;length>\n- border-top-width/border-right-width/border-bottom-width/border-left-width单独设置宽度\n- boder-color边框颜色\n    - &lt;color>\n    - transparent 透明\n- border-top-color/border-right-color/border-bottom-color/border-left-color单独设置颜色\n- border-top/boder-right/border-bottom/border-left单独设置边框\n    - [&lt;border-width>] [&lt;border-style>][boder-color]\n- border 全局边框，应用到四条边\n    - [&lt;border-width>] [&lt;border-style>][boder-color]\n\n对于只包含文本的行，能改变行间距离的属性只有line-height, font-size和vertical-align。\n行内元素使用正左右外边距，可以多出来水平空间，负的左右外边距会使行内元素与其他内容重叠。\n行内元素的边框，不会改变行高。\n行内元素使用正的左右边框可以多出来水平空间。\n\n- padding 内边距\n    - &lt;length>\n    - &lt;percentage>\n\n行内非替换元素使用左右内边距时，可以多出来水平空间，而上下边距不会改变行高。\n可以想图像使用内边距,外边距，边框时，它可以改变行高，也可以水平方向留出距离。\n\n- background-color 背景元素\n    - &lt;color>\n    - transparent\n- background-image 如body {background-image: url(bg23.gif)}\n    - &lt;uri>\n    - none\n- background-repeat 有方向的重复\n    - repeat\n    - repeat-x\n    - repeat-y\n    - no-repeat\n- background-position 背景定位\n    - &lt;percentage>\n    - &lt;length>\n    - left/center/right/top/bottom\n\nbackground-position单个关键字等价\ncenter: cener center\ntop: top center或者center top\nbottom: bottom center或者center bottom\nleft: left center 或者center left\nright: right center 或者center right\n\n- background-attachment\n    - scroll 跟随文档滚动\n    - fixed 不跟随文档滚动\n\n- background 简写属性\n    - &lt;background-color> || &lt;background-image> || &lt;backgroud-repeat> || &lt;background-attachment> || &lt;background-position>\n\n## 第十章 浮动和定位\n\n- float\n    - left\n    - right\n    - none\n\n浮动元素会从文档的正常流中删除，它还是会影响布局。其他内容会环绕元素，浮动元素的外边距不会合并\n\n- position\n    - static 默认 块元素生成一个矩形框，行内元素创建一个或多个行框，置于父元素中\n    - relative 元素偏移某个距离，元素仍保持未定位前的形状，它原本占据的空间仍保留\n    - absolute 元素框从文档流中完全删除，并相对于其包含块定位。\n    - fixed 元素的表现类似于absolute，不过，其包含块是视窗本身。\n\n- 偏移属性，在position为relative,absolute和fixed时，可以设置偏移属性top right bottom left\n    - &lt;length>\n    - &lt;percentage>\n    - auto 初始值\n\n包含块\n\n根元素的包含块，由用户代理建立，即html元素或body元素\n对于一个非根元素，如果其position时relative或static，包含块则由最近的块级框，表单元格或行内块祖先框的内容边界构成。\n对于一个非根元素，如果其position时absolute，包含块则由最近的position值不是static的祖先元素。\n\n- overflow\n    - visible\n    - hidden\n    - scroll\n    - auto\n","source":"_posts/CSS-The-Definitive-Guide.md","raw":"---\ntitle: CSS权威值南-笔记\n---\n\n## 第一章 css和文档\n\n-  文档内定义样式\n\n        <style type=\"text/css\">\n            @import url(sheet2.css)\n            h1 {color: maroon;}\n        </style>\n\n-   引入css文件\n\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"sheet1.css\" media=\"all\" />\n\n<!--more-->\n\n## 第二章 选择器\n\n- ID选择器和指定id的属性选择器不是一回事，h1#page-title和h1[id=\"page-title\"]之间有差别。\n- p.warning和p[class~=\"warning\"]是等价的，但是p[class=\"warning\"]匹配只有一个class的p元素。\n\n    - 类似的还有[foo^=\"bar\"] 选择foo属性值以bar开头的所有元素\n    - [foo$=\"bar\"] 选择foo属性值以bar结尾的所有元素\n    - [foo*=\"bar\"] 选择foo属性值中含有bar子串的所有元素\n\n- 后代选择器中，两个元素之间的层次间隔可以是无限的，如果想匹配直接相连的父子元素，可以使用子结合符\">\"\n\n- 兄弟元素选择器 h1 +  p {margin-top: 0}\n\n- 伪类选择器，伪类的顺序很重要 link-visited-focus-hover-active\n\n    - 连接伪类\n        - :link 未访问的超连接\n        - :visited  已访问的超连接\n\n    - 动态伪类\n        - :focus 拥有焦点的元素（可以接受键盘输入或者能已某种方式激活的元素）\n        - :hover 鼠标指针悬停的元素\n        - :active 用户输入激活的元素\n\n    - 静态伪类\n        - :first-child 第一个子元素\n        - :first-letter 第一个字母\n        - :first-line 第一行\n        - :lang(fr) 根据语言选择\n    - :first-letter和:first-line只能用于标记或段落之类的块元素，不能用于超连接等行内元素。\n\n## 第三章 结构和层叠\n\n- 选择器的特殊性\n\n    - 给定的各个ID属性值，加0，1，0，0\n\n    - 给形的各个类的属性值，属性选择或者伪类，加0，0，1，0\n\n    - 给定的各个元素和伪元素加0，0，0，1\n\n    - 结合符和通配选择器对特属性没有任何贡献\n\n- 样式继承\n\n    - 文本颜色可被继承\n    - border不能被继承，一般的大多数框模型属性不能被继承（包括外边框，内边距，背景和边框）\n\n    - 继承的值没有特殊性，连0特殊性都没有p(61)，因此需要避免不加区别的使用通配选择器。\n\n- 层叠权重大小顺序\n\n    - 读者的重要声明\n\n    - 创作人员的重要声明\n\n    - 创作人员的正常声明\n\n    - 读者的正常声明\n\n    - 用户代理声明\n\n## 第四章 值和单位\n\n- 颜色表示\n\n    - 命名颜色 {color: gray;}\n\n    - 函数式RGB {color: rgb(100%, 50%, 50%);}，或者{color: rgb(52, 95, 153);}\n\n    - 十六进制RGB {color: #ff0000;} 如果3组各自成对，可以简写#f00，相当于#ff0000\n- WEB安全颜色\n    - RGB百分表示法，能被20整除的颜色，如rgb(60, 40, 120)\n\n    - 十六进制，使用00，33，66，99，cc，ff，如#99ffcc\n\n- 长度单位\n\n    - 绝对长度单位 在打印文档的样式表时更为有用，Web设计中不使用绝对长度单位。\n\n        - 英寸 (in)\n\n        - 厘米(cm) 1in = 2.54cm\n\n        - 毫米(mm) 1in = 25.4mm\n\n        - 点(pt) 1in = 72pt\n\n        - 派卡(pc)  1pc = 12pt, 6pc = 1in\n\n    - 相对长度单位\n        - em (em-height) 1em定义未一种给定字体的font-size的值，随元素的不同而不同，国外最常用，也是未来的趋势，更容易适配移动端。\n        - ex (x-height) 1ex定位未一种给定字体的小写x的高度，不同字体ex的值不同。\n        - px像素\n\n## 第五章 字体\ncss定义了5中通用字体\n\n- Serif 成比例的有上下短线的字体\n- Sans-serif 成比例的，没有上下短线\n- Monospace 不成比例，通常用于模拟打字机打出的问题\n- Cursive  手写体\n- Fantasy 无法用任何特征来定义的字体\n\n特定字体：如Times，Verdana, Helvetica, Arial等，每一种特定的字体都会落入上述通用系列中。\n\n- font-family 如h1 {font-family: Georgia, serif}, Georgia是特定字体，serif是通用字体。\n- font-weight\n    - normal\n    - bold\n    - bolder\n    - lighter\n    - 100/200/300/400/500/600/700/800/900\n- font-size\n    - xx-small/x-small/small/medium/large/x-large/xx-large/smaller/larger\n    - &lt;length>/&lt;percentage>\n- font-style字体风格\n    - italic/oblique/normal/inherit\n- font-variant 字体变形\n    - small-caps 首字母大写\n    - normal\n    - inherit\n\n## 第六章 文本属性\n\n- text-indent 首行缩进\n    - &lt;length> 如：p {text-indent: 3em}\n    - &lt;percentag> 相对于父元素宽度\n    - inhert\n- text-align 水平对齐\n    - left\n    - right\n    - center\n    - justify 两端对齐，在打印领域很常见\n    - inherit\n- line-height 行高，定义了基线之间的距离，而不是字体大小，可以控制行间距。行间距=行高-字体大小\n    - &lt;length>\n    - &lt;percentage>\n    - &lt;number>\n    - normal\n    - inherit\n- vertical-align 行内元素和表单元格的垂直方向对齐\n    - base-line 基线对齐，元素的底端和副元素的基线对齐\n    - sub/super 上标/下标，相对于基线升高/降低\n    -  bottom 元素行内框的底端和行框的底端对齐\n    - text-bottom 元素行内框的底端和文本的底端对齐\n    - top 与bottom相反\n    - text-top 与text-bottom相反\n    - middle 居中对齐\n    - &lt;percentage>\n    - &lt;length>\n    - inherit\n- word-spacing 字间隔\n    - &lt;length>\n    - normal\n    - inherit\n- letter-spacing 字母间隔\n    - &lt;length>\n    - normal\n    - inherit\n- text-transform\n    - uppercase 全大写\n    - lowercase 全小写\n    - capitalize 单词首字母大写\n    - none\n    - inherit\n- text-decoration 文字效果\n    - none\n    - underline 下划线\n    - overline 上划线\n    - line-through 中划线\n    - blink\n    - inherit\n- text-shadow\n    - none\n\n    - 颜色值和三个长度值 text-shadow: silver 2px 2px 2px;\n- white-space\n    - normal 合并空白符，忽略换行符，允许自动换行。\n    - nowrap 合并空白符，忽略换行符号，不允许自动换行。\n    - pre 保留空白符号，保留换行符号，不允许自动换行。\n    - pre-wrap 保留空白符，保留换行符，允许自动换行。\n    - pre-line 合并空白符，保留换行符，允许自动换行。\n    - inherit\n- direction 文本方向\n    - ltr\n    - rtl\n    - inherit\n\n## 第七章 基本视觉格式化\n\n水平格式化\n七大水平属性\n\n- margin-left\n- border-left\n- padding-left\n- width\n- padding-right\n- border-right\n- maring-right\n\n这7个属性值加起来就是元素包含块的宽度，这往往是副元素的width值。\nwidth就是左内边距到右内边距的距离。\n这7个属性中，只有3个属性可以设置为auto: margin-left, width, margin-right，可以用auto弥补实际值和所需总和的差距。如果三个值都为非auto的某个值，这些格式化属性过分受限，此时会强制设置margin-right为auto.\n不止一个auto的情况：\n\n-  margin-left和margin-right为auto，此时元素居中，与text-align:center的区别，text-align只应用块级元素的内联内容，并不能使元素居中。\n- margin-left和width为auto，此时margin-left为0，width会填满剩余包块。\n- margin-right和width为auto，此时margin-right为0，width填满剩余包块。\n- margin-left和margin-right和width都为auto，此时margin-left和margin-right都为0,width会填满包块。这种情况和默认是相同的。\n\n水平外边距不会合并，父元素的内边距，边距和外边距可能影响子元素。\n\n负外边距\n   负外边距时，  会使得内容宽度超出包块，因为根据等式父包块width=7大水平之和，margin-left或margin-right为负时，width要增大。\n\n垂直格式化\n如果元素的内容的高度，大于元素框的高度，用户代理的具体行为将取决于overflow属性。\n垂直格式化的七大属性\n\n- margin-top\n- border-top\n- padding-top\n- height\n- padding-bottom\n- border-bottom\n- margin-bottom\n\n这7个属性值的值和必须等于含块的height，其中，3个值可以设置为auto，margin-top，height，margin-bottom，如果margin-top或margin-bottom设置为auto则自动计算0，这就是为什么不容易设置元素为垂直居中，这与水平时不一样的。对于定位元素，上下边距为auto时，处理不同。\n\n如果没有显式声明包含块的height，百分数高度为重置为auto，如果块级中场元素的height设置为auto，显示时的高度将恰好足以包含其内联内容。\n如果块级正常流元素高度设置为auto，而且只有块级子元素，其默认高度将是从最高块级子元素的外边框边界到最低块级子元素外边框边界之间的距离。\n不过，如果块级元素有padding或者border，则高度则是最高子元素的上外边距到其最低子元素的下外边距边界之间的距离。\n\n合并垂直外边距\n垂直合并只引用与外边距，不会应用于内边距和边框。\n负的下外边距会使段落看上去向下拉，负的上边会使段落看上去向上拉。\n\n## 第八章 内边距、边框和外边距\n\n- border-style\n    - none\n    - hidden\n    - dotted\n    - dashed\n    - solid\n    - double\n    - groove\n    - ridge\n    - inset\n    - outset\n\n- 设置多个边框样式 p.asize {boder-style:  solid dashed dotted solid;}\n- boder-top-style/boder-right-style/border-bottom-style/border-left-style 单独设置边框样式\n- border-width边框宽度\n    - thin\n    - medium\n    - thick\n    - &lt;length>\n- border-top-width/border-right-width/border-bottom-width/border-left-width单独设置宽度\n- boder-color边框颜色\n    - &lt;color>\n    - transparent 透明\n- border-top-color/border-right-color/border-bottom-color/border-left-color单独设置颜色\n- border-top/boder-right/border-bottom/border-left单独设置边框\n    - [&lt;border-width>] [&lt;border-style>][boder-color]\n- border 全局边框，应用到四条边\n    - [&lt;border-width>] [&lt;border-style>][boder-color]\n\n对于只包含文本的行，能改变行间距离的属性只有line-height, font-size和vertical-align。\n行内元素使用正左右外边距，可以多出来水平空间，负的左右外边距会使行内元素与其他内容重叠。\n行内元素的边框，不会改变行高。\n行内元素使用正的左右边框可以多出来水平空间。\n\n- padding 内边距\n    - &lt;length>\n    - &lt;percentage>\n\n行内非替换元素使用左右内边距时，可以多出来水平空间，而上下边距不会改变行高。\n可以想图像使用内边距,外边距，边框时，它可以改变行高，也可以水平方向留出距离。\n\n- background-color 背景元素\n    - &lt;color>\n    - transparent\n- background-image 如body {background-image: url(bg23.gif)}\n    - &lt;uri>\n    - none\n- background-repeat 有方向的重复\n    - repeat\n    - repeat-x\n    - repeat-y\n    - no-repeat\n- background-position 背景定位\n    - &lt;percentage>\n    - &lt;length>\n    - left/center/right/top/bottom\n\nbackground-position单个关键字等价\ncenter: cener center\ntop: top center或者center top\nbottom: bottom center或者center bottom\nleft: left center 或者center left\nright: right center 或者center right\n\n- background-attachment\n    - scroll 跟随文档滚动\n    - fixed 不跟随文档滚动\n\n- background 简写属性\n    - &lt;background-color> || &lt;background-image> || &lt;backgroud-repeat> || &lt;background-attachment> || &lt;background-position>\n\n## 第十章 浮动和定位\n\n- float\n    - left\n    - right\n    - none\n\n浮动元素会从文档的正常流中删除，它还是会影响布局。其他内容会环绕元素，浮动元素的外边距不会合并\n\n- position\n    - static 默认 块元素生成一个矩形框，行内元素创建一个或多个行框，置于父元素中\n    - relative 元素偏移某个距离，元素仍保持未定位前的形状，它原本占据的空间仍保留\n    - absolute 元素框从文档流中完全删除，并相对于其包含块定位。\n    - fixed 元素的表现类似于absolute，不过，其包含块是视窗本身。\n\n- 偏移属性，在position为relative,absolute和fixed时，可以设置偏移属性top right bottom left\n    - &lt;length>\n    - &lt;percentage>\n    - auto 初始值\n\n包含块\n\n根元素的包含块，由用户代理建立，即html元素或body元素\n对于一个非根元素，如果其position时relative或static，包含块则由最近的块级框，表单元格或行内块祖先框的内容边界构成。\n对于一个非根元素，如果其position时absolute，包含块则由最近的position值不是static的祖先元素。\n\n- overflow\n    - visible\n    - hidden\n    - scroll\n    - auto\n","slug":"CSS-The-Definitive-Guide","published":1,"date":"2016-09-09T04:17:17.159Z","updated":"2016-09-09T04:17:17.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciszeqa870003espvb8lwwf5t","content":"<h2 id=\"第一章-css和文档\"><a href=\"#第一章-css和文档\" class=\"headerlink\" title=\"第一章 css和文档\"></a>第一章 css和文档</h2><ul>\n<li><p>文档内定义样式</p>\n<pre><code>&lt;style type=&quot;text/css&quot;&gt;\n    @import url(sheet2.css)\n    h1 {color: maroon;}\n&lt;/style&gt;\n</code></pre></li>\n<li><p>引入css文件</p>\n<pre><code>&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;sheet1.css&quot; media=&quot;all&quot; /&gt;\n</code></pre></li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"第二章-选择器\"><a href=\"#第二章-选择器\" class=\"headerlink\" title=\"第二章 选择器\"></a>第二章 选择器</h2><ul>\n<li>ID选择器和指定id的属性选择器不是一回事，h1#page-title和h1[id=”page-title”]之间有差别。</li>\n<li><p>p.warning和p[class~=”warning”]是等价的，但是p[class=”warning”]匹配只有一个class的p元素。</p>\n<ul>\n<li>类似的还有[foo^=”bar”] 选择foo属性值以bar开头的所有元素</li>\n<li>[foo$=”bar”] 选择foo属性值以bar结尾的所有元素</li>\n<li>[foo*=”bar”] 选择foo属性值中含有bar子串的所有元素</li>\n</ul>\n</li>\n<li><p>后代选择器中，两个元素之间的层次间隔可以是无限的，如果想匹配直接相连的父子元素，可以使用子结合符”&gt;”</p>\n</li>\n<li><p>兄弟元素选择器 h1 +  p {margin-top: 0}</p>\n</li>\n<li><p>伪类选择器，伪类的顺序很重要 link-visited-focus-hover-active</p>\n<ul>\n<li><p>连接伪类</p>\n<ul>\n<li>:link 未访问的超连接</li>\n<li>:visited  已访问的超连接</li>\n</ul>\n</li>\n<li><p>动态伪类</p>\n<ul>\n<li>:focus 拥有焦点的元素（可以接受键盘输入或者能已某种方式激活的元素）</li>\n<li>:hover 鼠标指针悬停的元素</li>\n<li>:active 用户输入激活的元素</li>\n</ul>\n</li>\n<li><p>静态伪类</p>\n<ul>\n<li>:first-child 第一个子元素</li>\n<li>:first-letter 第一个字母</li>\n<li>:first-line 第一行</li>\n<li>:lang(fr) 根据语言选择</li>\n</ul>\n</li>\n<li>:first-letter和:first-line只能用于标记或段落之类的块元素，不能用于超连接等行内元素。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三章-结构和层叠\"><a href=\"#第三章-结构和层叠\" class=\"headerlink\" title=\"第三章 结构和层叠\"></a>第三章 结构和层叠</h2><ul>\n<li><p>选择器的特殊性</p>\n<ul>\n<li><p>给定的各个ID属性值，加0，1，0，0</p>\n</li>\n<li><p>给形的各个类的属性值，属性选择或者伪类，加0，0，1，0</p>\n</li>\n<li><p>给定的各个元素和伪元素加0，0，0，1</p>\n</li>\n<li><p>结合符和通配选择器对特属性没有任何贡献</p>\n</li>\n</ul>\n</li>\n<li><p>样式继承</p>\n<ul>\n<li>文本颜色可被继承</li>\n<li><p>border不能被继承，一般的大多数框模型属性不能被继承（包括外边框，内边距，背景和边框）</p>\n</li>\n<li><p>继承的值没有特殊性，连0特殊性都没有p(61)，因此需要避免不加区别的使用通配选择器。</p>\n</li>\n</ul>\n</li>\n<li><p>层叠权重大小顺序</p>\n<ul>\n<li><p>读者的重要声明</p>\n</li>\n<li><p>创作人员的重要声明</p>\n</li>\n<li><p>创作人员的正常声明</p>\n</li>\n<li><p>读者的正常声明</p>\n</li>\n<li><p>用户代理声明</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第四章-值和单位\"><a href=\"#第四章-值和单位\" class=\"headerlink\" title=\"第四章 值和单位\"></a>第四章 值和单位</h2><ul>\n<li><p>颜色表示</p>\n<ul>\n<li><p>命名颜色 {color: gray;}</p>\n</li>\n<li><p>函数式RGB {color: rgb(100%, 50%, 50%);}，或者{color: rgb(52, 95, 153);}</p>\n</li>\n<li><p>十六进制RGB {color: #ff0000;} 如果3组各自成对，可以简写#f00，相当于#ff0000</p>\n</li>\n</ul>\n</li>\n<li><p>WEB安全颜色</p>\n<ul>\n<li><p>RGB百分表示法，能被20整除的颜色，如rgb(60, 40, 120)</p>\n</li>\n<li><p>十六进制，使用00，33，66，99，cc，ff，如#99ffcc</p>\n</li>\n</ul>\n</li>\n<li><p>长度单位</p>\n<ul>\n<li><p>绝对长度单位 在打印文档的样式表时更为有用，Web设计中不使用绝对长度单位。</p>\n<ul>\n<li><p>英寸 (in)</p>\n</li>\n<li><p>厘米(cm) 1in = 2.54cm</p>\n</li>\n<li><p>毫米(mm) 1in = 25.4mm</p>\n</li>\n<li><p>点(pt) 1in = 72pt</p>\n</li>\n<li><p>派卡(pc)  1pc = 12pt, 6pc = 1in</p>\n</li>\n</ul>\n</li>\n<li><p>相对长度单位</p>\n<ul>\n<li>em (em-height) 1em定义未一种给定字体的font-size的值，随元素的不同而不同，国外最常用，也是未来的趋势，更容易适配移动端。</li>\n<li>ex (x-height) 1ex定位未一种给定字体的小写x的高度，不同字体ex的值不同。</li>\n<li>px像素</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第五章-字体\"><a href=\"#第五章-字体\" class=\"headerlink\" title=\"第五章 字体\"></a>第五章 字体</h2><p>css定义了5中通用字体</p>\n<ul>\n<li>Serif 成比例的有上下短线的字体</li>\n<li>Sans-serif 成比例的，没有上下短线</li>\n<li>Monospace 不成比例，通常用于模拟打字机打出的问题</li>\n<li>Cursive  手写体</li>\n<li>Fantasy 无法用任何特征来定义的字体</li>\n</ul>\n<p>特定字体：如Times，Verdana, Helvetica, Arial等，每一种特定的字体都会落入上述通用系列中。</p>\n<ul>\n<li>font-family 如h1 {font-family: Georgia, serif}, Georgia是特定字体，serif是通用字体。</li>\n<li>font-weight<ul>\n<li>normal</li>\n<li>bold</li>\n<li>bolder</li>\n<li>lighter</li>\n<li>100/200/300/400/500/600/700/800/900</li>\n</ul>\n</li>\n<li>font-size<ul>\n<li>xx-small/x-small/small/medium/large/x-large/xx-large/smaller/larger</li>\n<li>&lt;length&gt;/&lt;percentage&gt;</li>\n</ul>\n</li>\n<li>font-style字体风格<ul>\n<li>italic/oblique/normal/inherit</li>\n</ul>\n</li>\n<li>font-variant 字体变形<ul>\n<li>small-caps 首字母大写</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第六章-文本属性\"><a href=\"#第六章-文本属性\" class=\"headerlink\" title=\"第六章 文本属性\"></a>第六章 文本属性</h2><ul>\n<li>text-indent 首行缩进<ul>\n<li>&lt;length&gt; 如：p {text-indent: 3em}</li>\n<li>&lt;percentag&gt; 相对于父元素宽度</li>\n<li>inhert</li>\n</ul>\n</li>\n<li>text-align 水平对齐<ul>\n<li>left</li>\n<li>right</li>\n<li>center</li>\n<li>justify 两端对齐，在打印领域很常见</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>line-height 行高，定义了基线之间的距离，而不是字体大小，可以控制行间距。行间距=行高-字体大小<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n<li>&lt;number&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>vertical-align 行内元素和表单元格的垂直方向对齐<ul>\n<li>base-line 基线对齐，元素的底端和副元素的基线对齐</li>\n<li>sub/super 上标/下标，相对于基线升高/降低</li>\n<li>bottom 元素行内框的底端和行框的底端对齐</li>\n<li>text-bottom 元素行内框的底端和文本的底端对齐</li>\n<li>top 与bottom相反</li>\n<li>text-top 与text-bottom相反</li>\n<li>middle 居中对齐</li>\n<li>&lt;percentage&gt;</li>\n<li>&lt;length&gt;</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>word-spacing 字间隔<ul>\n<li>&lt;length&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>letter-spacing 字母间隔<ul>\n<li>&lt;length&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>text-transform<ul>\n<li>uppercase 全大写</li>\n<li>lowercase 全小写</li>\n<li>capitalize 单词首字母大写</li>\n<li>none</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>text-decoration 文字效果<ul>\n<li>none</li>\n<li>underline 下划线</li>\n<li>overline 上划线</li>\n<li>line-through 中划线</li>\n<li>blink</li>\n<li>inherit</li>\n</ul>\n</li>\n<li><p>text-shadow</p>\n<ul>\n<li><p>none</p>\n</li>\n<li><p>颜色值和三个长度值 text-shadow: silver 2px 2px 2px;</p>\n</li>\n</ul>\n</li>\n<li>white-space<ul>\n<li>normal 合并空白符，忽略换行符，允许自动换行。</li>\n<li>nowrap 合并空白符，忽略换行符号，不允许自动换行。</li>\n<li>pre 保留空白符号，保留换行符号，不允许自动换行。</li>\n<li>pre-wrap 保留空白符，保留换行符，允许自动换行。</li>\n<li>pre-line 合并空白符，保留换行符，允许自动换行。</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>direction 文本方向<ul>\n<li>ltr</li>\n<li>rtl</li>\n<li>inherit</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第七章-基本视觉格式化\"><a href=\"#第七章-基本视觉格式化\" class=\"headerlink\" title=\"第七章 基本视觉格式化\"></a>第七章 基本视觉格式化</h2><p>水平格式化<br>七大水平属性</p>\n<ul>\n<li>margin-left</li>\n<li>border-left</li>\n<li>padding-left</li>\n<li>width</li>\n<li>padding-right</li>\n<li>border-right</li>\n<li>maring-right</li>\n</ul>\n<p>这7个属性值加起来就是元素包含块的宽度，这往往是副元素的width值。<br>width就是左内边距到右内边距的距离。<br>这7个属性中，只有3个属性可以设置为auto: margin-left, width, margin-right，可以用auto弥补实际值和所需总和的差距。如果三个值都为非auto的某个值，这些格式化属性过分受限，此时会强制设置margin-right为auto.<br>不止一个auto的情况：</p>\n<ul>\n<li>margin-left和margin-right为auto，此时元素居中，与text-align:center的区别，text-align只应用块级元素的内联内容，并不能使元素居中。</li>\n<li>margin-left和width为auto，此时margin-left为0，width会填满剩余包块。</li>\n<li>margin-right和width为auto，此时margin-right为0，width填满剩余包块。</li>\n<li>margin-left和margin-right和width都为auto，此时margin-left和margin-right都为0,width会填满包块。这种情况和默认是相同的。</li>\n</ul>\n<p>水平外边距不会合并，父元素的内边距，边距和外边距可能影响子元素。</p>\n<p>负外边距<br>   负外边距时，  会使得内容宽度超出包块，因为根据等式父包块width=7大水平之和，margin-left或margin-right为负时，width要增大。</p>\n<p>垂直格式化<br>如果元素的内容的高度，大于元素框的高度，用户代理的具体行为将取决于overflow属性。<br>垂直格式化的七大属性</p>\n<ul>\n<li>margin-top</li>\n<li>border-top</li>\n<li>padding-top</li>\n<li>height</li>\n<li>padding-bottom</li>\n<li>border-bottom</li>\n<li>margin-bottom</li>\n</ul>\n<p>这7个属性值的值和必须等于含块的height，其中，3个值可以设置为auto，margin-top，height，margin-bottom，如果margin-top或margin-bottom设置为auto则自动计算0，这就是为什么不容易设置元素为垂直居中，这与水平时不一样的。对于定位元素，上下边距为auto时，处理不同。</p>\n<p>如果没有显式声明包含块的height，百分数高度为重置为auto，如果块级中场元素的height设置为auto，显示时的高度将恰好足以包含其内联内容。<br>如果块级正常流元素高度设置为auto，而且只有块级子元素，其默认高度将是从最高块级子元素的外边框边界到最低块级子元素外边框边界之间的距离。<br>不过，如果块级元素有padding或者border，则高度则是最高子元素的上外边距到其最低子元素的下外边距边界之间的距离。</p>\n<p>合并垂直外边距<br>垂直合并只引用与外边距，不会应用于内边距和边框。<br>负的下外边距会使段落看上去向下拉，负的上边会使段落看上去向上拉。</p>\n<h2 id=\"第八章-内边距、边框和外边距\"><a href=\"#第八章-内边距、边框和外边距\" class=\"headerlink\" title=\"第八章 内边距、边框和外边距\"></a>第八章 内边距、边框和外边距</h2><ul>\n<li><p>border-style</p>\n<ul>\n<li>none</li>\n<li>hidden</li>\n<li>dotted</li>\n<li>dashed</li>\n<li>solid</li>\n<li>double</li>\n<li>groove</li>\n<li>ridge</li>\n<li>inset</li>\n<li>outset</li>\n</ul>\n</li>\n<li><p>设置多个边框样式 p.asize {boder-style:  solid dashed dotted solid;}</p>\n</li>\n<li>boder-top-style/boder-right-style/border-bottom-style/border-left-style 单独设置边框样式</li>\n<li>border-width边框宽度<ul>\n<li>thin</li>\n<li>medium</li>\n<li>thick</li>\n<li>&lt;length&gt;</li>\n</ul>\n</li>\n<li>border-top-width/border-right-width/border-bottom-width/border-left-width单独设置宽度</li>\n<li>boder-color边框颜色<ul>\n<li>&lt;color&gt;</li>\n<li>transparent 透明</li>\n</ul>\n</li>\n<li>border-top-color/border-right-color/border-bottom-color/border-left-color单独设置颜色</li>\n<li>border-top/boder-right/border-bottom/border-left单独设置边框<ul>\n<li>[&lt;border-width&gt;] [&lt;border-style&gt;][boder-color]</li>\n</ul>\n</li>\n<li>border 全局边框，应用到四条边<ul>\n<li>[&lt;border-width&gt;] [&lt;border-style&gt;][boder-color]</li>\n</ul>\n</li>\n</ul>\n<p>对于只包含文本的行，能改变行间距离的属性只有line-height, font-size和vertical-align。<br>行内元素使用正左右外边距，可以多出来水平空间，负的左右外边距会使行内元素与其他内容重叠。<br>行内元素的边框，不会改变行高。<br>行内元素使用正的左右边框可以多出来水平空间。</p>\n<ul>\n<li>padding 内边距<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n</ul>\n</li>\n</ul>\n<p>行内非替换元素使用左右内边距时，可以多出来水平空间，而上下边距不会改变行高。<br>可以想图像使用内边距,外边距，边框时，它可以改变行高，也可以水平方向留出距离。</p>\n<ul>\n<li>background-color 背景元素<ul>\n<li>&lt;color&gt;</li>\n<li>transparent</li>\n</ul>\n</li>\n<li>background-image 如body {background-image: url(bg23.gif)}<ul>\n<li>&lt;uri&gt;</li>\n<li>none</li>\n</ul>\n</li>\n<li>background-repeat 有方向的重复<ul>\n<li>repeat</li>\n<li>repeat-x</li>\n<li>repeat-y</li>\n<li>no-repeat</li>\n</ul>\n</li>\n<li>background-position 背景定位<ul>\n<li>&lt;percentage&gt;</li>\n<li>&lt;length&gt;</li>\n<li>left/center/right/top/bottom</li>\n</ul>\n</li>\n</ul>\n<p>background-position单个关键字等价<br>center: cener center<br>top: top center或者center top<br>bottom: bottom center或者center bottom<br>left: left center 或者center left<br>right: right center 或者center right</p>\n<ul>\n<li><p>background-attachment</p>\n<ul>\n<li>scroll 跟随文档滚动</li>\n<li>fixed 不跟随文档滚动</li>\n</ul>\n</li>\n<li><p>background 简写属性</p>\n<ul>\n<li>&lt;background-color&gt; || &lt;background-image&gt; || &lt;backgroud-repeat&gt; || &lt;background-attachment&gt; || &lt;background-position&gt;</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第十章-浮动和定位\"><a href=\"#第十章-浮动和定位\" class=\"headerlink\" title=\"第十章 浮动和定位\"></a>第十章 浮动和定位</h2><ul>\n<li>float<ul>\n<li>left</li>\n<li>right</li>\n<li>none</li>\n</ul>\n</li>\n</ul>\n<p>浮动元素会从文档的正常流中删除，它还是会影响布局。其他内容会环绕元素，浮动元素的外边距不会合并</p>\n<ul>\n<li><p>position</p>\n<ul>\n<li>static 默认 块元素生成一个矩形框，行内元素创建一个或多个行框，置于父元素中</li>\n<li>relative 元素偏移某个距离，元素仍保持未定位前的形状，它原本占据的空间仍保留</li>\n<li>absolute 元素框从文档流中完全删除，并相对于其包含块定位。</li>\n<li>fixed 元素的表现类似于absolute，不过，其包含块是视窗本身。</li>\n</ul>\n</li>\n<li><p>偏移属性，在position为relative,absolute和fixed时，可以设置偏移属性top right bottom left</p>\n<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n<li>auto 初始值</li>\n</ul>\n</li>\n</ul>\n<p>包含块</p>\n<p>根元素的包含块，由用户代理建立，即html元素或body元素<br>对于一个非根元素，如果其position时relative或static，包含块则由最近的块级框，表单元格或行内块祖先框的内容边界构成。<br>对于一个非根元素，如果其position时absolute，包含块则由最近的position值不是static的祖先元素。</p>\n<ul>\n<li>overflow<ul>\n<li>visible</li>\n<li>hidden</li>\n<li>scroll</li>\n<li>auto</li>\n</ul>\n</li>\n</ul>\n","excerpt":"<h2 id=\"第一章-css和文档\"><a href=\"#第一章-css和文档\" class=\"headerlink\" title=\"第一章 css和文档\"></a>第一章 css和文档</h2><ul>\n<li><p>文档内定义样式</p>\n<pre><code>&lt;style type=&quot;text/css&quot;&gt;\n    @import url(sheet2.css)\n    h1 {color: maroon;}\n&lt;/style&gt;\n</code></pre></li>\n<li><p>引入css文件</p>\n<pre><code>&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;sheet1.css&quot; media=&quot;all&quot; /&gt;\n</code></pre></li>\n</ul>","more":"<h2 id=\"第二章-选择器\"><a href=\"#第二章-选择器\" class=\"headerlink\" title=\"第二章 选择器\"></a>第二章 选择器</h2><ul>\n<li>ID选择器和指定id的属性选择器不是一回事，h1#page-title和h1[id=”page-title”]之间有差别。</li>\n<li><p>p.warning和p[class~=”warning”]是等价的，但是p[class=”warning”]匹配只有一个class的p元素。</p>\n<ul>\n<li>类似的还有[foo^=”bar”] 选择foo属性值以bar开头的所有元素</li>\n<li>[foo$=”bar”] 选择foo属性值以bar结尾的所有元素</li>\n<li>[foo*=”bar”] 选择foo属性值中含有bar子串的所有元素</li>\n</ul>\n</li>\n<li><p>后代选择器中，两个元素之间的层次间隔可以是无限的，如果想匹配直接相连的父子元素，可以使用子结合符”&gt;”</p>\n</li>\n<li><p>兄弟元素选择器 h1 +  p {margin-top: 0}</p>\n</li>\n<li><p>伪类选择器，伪类的顺序很重要 link-visited-focus-hover-active</p>\n<ul>\n<li><p>连接伪类</p>\n<ul>\n<li>:link 未访问的超连接</li>\n<li>:visited  已访问的超连接</li>\n</ul>\n</li>\n<li><p>动态伪类</p>\n<ul>\n<li>:focus 拥有焦点的元素（可以接受键盘输入或者能已某种方式激活的元素）</li>\n<li>:hover 鼠标指针悬停的元素</li>\n<li>:active 用户输入激活的元素</li>\n</ul>\n</li>\n<li><p>静态伪类</p>\n<ul>\n<li>:first-child 第一个子元素</li>\n<li>:first-letter 第一个字母</li>\n<li>:first-line 第一行</li>\n<li>:lang(fr) 根据语言选择</li>\n</ul>\n</li>\n<li>:first-letter和:first-line只能用于标记或段落之类的块元素，不能用于超连接等行内元素。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三章-结构和层叠\"><a href=\"#第三章-结构和层叠\" class=\"headerlink\" title=\"第三章 结构和层叠\"></a>第三章 结构和层叠</h2><ul>\n<li><p>选择器的特殊性</p>\n<ul>\n<li><p>给定的各个ID属性值，加0，1，0，0</p>\n</li>\n<li><p>给形的各个类的属性值，属性选择或者伪类，加0，0，1，0</p>\n</li>\n<li><p>给定的各个元素和伪元素加0，0，0，1</p>\n</li>\n<li><p>结合符和通配选择器对特属性没有任何贡献</p>\n</li>\n</ul>\n</li>\n<li><p>样式继承</p>\n<ul>\n<li>文本颜色可被继承</li>\n<li><p>border不能被继承，一般的大多数框模型属性不能被继承（包括外边框，内边距，背景和边框）</p>\n</li>\n<li><p>继承的值没有特殊性，连0特殊性都没有p(61)，因此需要避免不加区别的使用通配选择器。</p>\n</li>\n</ul>\n</li>\n<li><p>层叠权重大小顺序</p>\n<ul>\n<li><p>读者的重要声明</p>\n</li>\n<li><p>创作人员的重要声明</p>\n</li>\n<li><p>创作人员的正常声明</p>\n</li>\n<li><p>读者的正常声明</p>\n</li>\n<li><p>用户代理声明</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第四章-值和单位\"><a href=\"#第四章-值和单位\" class=\"headerlink\" title=\"第四章 值和单位\"></a>第四章 值和单位</h2><ul>\n<li><p>颜色表示</p>\n<ul>\n<li><p>命名颜色 {color: gray;}</p>\n</li>\n<li><p>函数式RGB {color: rgb(100%, 50%, 50%);}，或者{color: rgb(52, 95, 153);}</p>\n</li>\n<li><p>十六进制RGB {color: #ff0000;} 如果3组各自成对，可以简写#f00，相当于#ff0000</p>\n</li>\n</ul>\n</li>\n<li><p>WEB安全颜色</p>\n<ul>\n<li><p>RGB百分表示法，能被20整除的颜色，如rgb(60, 40, 120)</p>\n</li>\n<li><p>十六进制，使用00，33，66，99，cc，ff，如#99ffcc</p>\n</li>\n</ul>\n</li>\n<li><p>长度单位</p>\n<ul>\n<li><p>绝对长度单位 在打印文档的样式表时更为有用，Web设计中不使用绝对长度单位。</p>\n<ul>\n<li><p>英寸 (in)</p>\n</li>\n<li><p>厘米(cm) 1in = 2.54cm</p>\n</li>\n<li><p>毫米(mm) 1in = 25.4mm</p>\n</li>\n<li><p>点(pt) 1in = 72pt</p>\n</li>\n<li><p>派卡(pc)  1pc = 12pt, 6pc = 1in</p>\n</li>\n</ul>\n</li>\n<li><p>相对长度单位</p>\n<ul>\n<li>em (em-height) 1em定义未一种给定字体的font-size的值，随元素的不同而不同，国外最常用，也是未来的趋势，更容易适配移动端。</li>\n<li>ex (x-height) 1ex定位未一种给定字体的小写x的高度，不同字体ex的值不同。</li>\n<li>px像素</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第五章-字体\"><a href=\"#第五章-字体\" class=\"headerlink\" title=\"第五章 字体\"></a>第五章 字体</h2><p>css定义了5中通用字体</p>\n<ul>\n<li>Serif 成比例的有上下短线的字体</li>\n<li>Sans-serif 成比例的，没有上下短线</li>\n<li>Monospace 不成比例，通常用于模拟打字机打出的问题</li>\n<li>Cursive  手写体</li>\n<li>Fantasy 无法用任何特征来定义的字体</li>\n</ul>\n<p>特定字体：如Times，Verdana, Helvetica, Arial等，每一种特定的字体都会落入上述通用系列中。</p>\n<ul>\n<li>font-family 如h1 {font-family: Georgia, serif}, Georgia是特定字体，serif是通用字体。</li>\n<li>font-weight<ul>\n<li>normal</li>\n<li>bold</li>\n<li>bolder</li>\n<li>lighter</li>\n<li>100/200/300/400/500/600/700/800/900</li>\n</ul>\n</li>\n<li>font-size<ul>\n<li>xx-small/x-small/small/medium/large/x-large/xx-large/smaller/larger</li>\n<li>&lt;length&gt;/&lt;percentage&gt;</li>\n</ul>\n</li>\n<li>font-style字体风格<ul>\n<li>italic/oblique/normal/inherit</li>\n</ul>\n</li>\n<li>font-variant 字体变形<ul>\n<li>small-caps 首字母大写</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第六章-文本属性\"><a href=\"#第六章-文本属性\" class=\"headerlink\" title=\"第六章 文本属性\"></a>第六章 文本属性</h2><ul>\n<li>text-indent 首行缩进<ul>\n<li>&lt;length&gt; 如：p {text-indent: 3em}</li>\n<li>&lt;percentag&gt; 相对于父元素宽度</li>\n<li>inhert</li>\n</ul>\n</li>\n<li>text-align 水平对齐<ul>\n<li>left</li>\n<li>right</li>\n<li>center</li>\n<li>justify 两端对齐，在打印领域很常见</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>line-height 行高，定义了基线之间的距离，而不是字体大小，可以控制行间距。行间距=行高-字体大小<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n<li>&lt;number&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>vertical-align 行内元素和表单元格的垂直方向对齐<ul>\n<li>base-line 基线对齐，元素的底端和副元素的基线对齐</li>\n<li>sub/super 上标/下标，相对于基线升高/降低</li>\n<li>bottom 元素行内框的底端和行框的底端对齐</li>\n<li>text-bottom 元素行内框的底端和文本的底端对齐</li>\n<li>top 与bottom相反</li>\n<li>text-top 与text-bottom相反</li>\n<li>middle 居中对齐</li>\n<li>&lt;percentage&gt;</li>\n<li>&lt;length&gt;</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>word-spacing 字间隔<ul>\n<li>&lt;length&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>letter-spacing 字母间隔<ul>\n<li>&lt;length&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>text-transform<ul>\n<li>uppercase 全大写</li>\n<li>lowercase 全小写</li>\n<li>capitalize 单词首字母大写</li>\n<li>none</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>text-decoration 文字效果<ul>\n<li>none</li>\n<li>underline 下划线</li>\n<li>overline 上划线</li>\n<li>line-through 中划线</li>\n<li>blink</li>\n<li>inherit</li>\n</ul>\n</li>\n<li><p>text-shadow</p>\n<ul>\n<li><p>none</p>\n</li>\n<li><p>颜色值和三个长度值 text-shadow: silver 2px 2px 2px;</p>\n</li>\n</ul>\n</li>\n<li>white-space<ul>\n<li>normal 合并空白符，忽略换行符，允许自动换行。</li>\n<li>nowrap 合并空白符，忽略换行符号，不允许自动换行。</li>\n<li>pre 保留空白符号，保留换行符号，不允许自动换行。</li>\n<li>pre-wrap 保留空白符，保留换行符，允许自动换行。</li>\n<li>pre-line 合并空白符，保留换行符，允许自动换行。</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>direction 文本方向<ul>\n<li>ltr</li>\n<li>rtl</li>\n<li>inherit</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第七章-基本视觉格式化\"><a href=\"#第七章-基本视觉格式化\" class=\"headerlink\" title=\"第七章 基本视觉格式化\"></a>第七章 基本视觉格式化</h2><p>水平格式化<br>七大水平属性</p>\n<ul>\n<li>margin-left</li>\n<li>border-left</li>\n<li>padding-left</li>\n<li>width</li>\n<li>padding-right</li>\n<li>border-right</li>\n<li>maring-right</li>\n</ul>\n<p>这7个属性值加起来就是元素包含块的宽度，这往往是副元素的width值。<br>width就是左内边距到右内边距的距离。<br>这7个属性中，只有3个属性可以设置为auto: margin-left, width, margin-right，可以用auto弥补实际值和所需总和的差距。如果三个值都为非auto的某个值，这些格式化属性过分受限，此时会强制设置margin-right为auto.<br>不止一个auto的情况：</p>\n<ul>\n<li>margin-left和margin-right为auto，此时元素居中，与text-align:center的区别，text-align只应用块级元素的内联内容，并不能使元素居中。</li>\n<li>margin-left和width为auto，此时margin-left为0，width会填满剩余包块。</li>\n<li>margin-right和width为auto，此时margin-right为0，width填满剩余包块。</li>\n<li>margin-left和margin-right和width都为auto，此时margin-left和margin-right都为0,width会填满包块。这种情况和默认是相同的。</li>\n</ul>\n<p>水平外边距不会合并，父元素的内边距，边距和外边距可能影响子元素。</p>\n<p>负外边距<br>   负外边距时，  会使得内容宽度超出包块，因为根据等式父包块width=7大水平之和，margin-left或margin-right为负时，width要增大。</p>\n<p>垂直格式化<br>如果元素的内容的高度，大于元素框的高度，用户代理的具体行为将取决于overflow属性。<br>垂直格式化的七大属性</p>\n<ul>\n<li>margin-top</li>\n<li>border-top</li>\n<li>padding-top</li>\n<li>height</li>\n<li>padding-bottom</li>\n<li>border-bottom</li>\n<li>margin-bottom</li>\n</ul>\n<p>这7个属性值的值和必须等于含块的height，其中，3个值可以设置为auto，margin-top，height，margin-bottom，如果margin-top或margin-bottom设置为auto则自动计算0，这就是为什么不容易设置元素为垂直居中，这与水平时不一样的。对于定位元素，上下边距为auto时，处理不同。</p>\n<p>如果没有显式声明包含块的height，百分数高度为重置为auto，如果块级中场元素的height设置为auto，显示时的高度将恰好足以包含其内联内容。<br>如果块级正常流元素高度设置为auto，而且只有块级子元素，其默认高度将是从最高块级子元素的外边框边界到最低块级子元素外边框边界之间的距离。<br>不过，如果块级元素有padding或者border，则高度则是最高子元素的上外边距到其最低子元素的下外边距边界之间的距离。</p>\n<p>合并垂直外边距<br>垂直合并只引用与外边距，不会应用于内边距和边框。<br>负的下外边距会使段落看上去向下拉，负的上边会使段落看上去向上拉。</p>\n<h2 id=\"第八章-内边距、边框和外边距\"><a href=\"#第八章-内边距、边框和外边距\" class=\"headerlink\" title=\"第八章 内边距、边框和外边距\"></a>第八章 内边距、边框和外边距</h2><ul>\n<li><p>border-style</p>\n<ul>\n<li>none</li>\n<li>hidden</li>\n<li>dotted</li>\n<li>dashed</li>\n<li>solid</li>\n<li>double</li>\n<li>groove</li>\n<li>ridge</li>\n<li>inset</li>\n<li>outset</li>\n</ul>\n</li>\n<li><p>设置多个边框样式 p.asize {boder-style:  solid dashed dotted solid;}</p>\n</li>\n<li>boder-top-style/boder-right-style/border-bottom-style/border-left-style 单独设置边框样式</li>\n<li>border-width边框宽度<ul>\n<li>thin</li>\n<li>medium</li>\n<li>thick</li>\n<li>&lt;length&gt;</li>\n</ul>\n</li>\n<li>border-top-width/border-right-width/border-bottom-width/border-left-width单独设置宽度</li>\n<li>boder-color边框颜色<ul>\n<li>&lt;color&gt;</li>\n<li>transparent 透明</li>\n</ul>\n</li>\n<li>border-top-color/border-right-color/border-bottom-color/border-left-color单独设置颜色</li>\n<li>border-top/boder-right/border-bottom/border-left单独设置边框<ul>\n<li>[&lt;border-width&gt;] [&lt;border-style&gt;][boder-color]</li>\n</ul>\n</li>\n<li>border 全局边框，应用到四条边<ul>\n<li>[&lt;border-width&gt;] [&lt;border-style&gt;][boder-color]</li>\n</ul>\n</li>\n</ul>\n<p>对于只包含文本的行，能改变行间距离的属性只有line-height, font-size和vertical-align。<br>行内元素使用正左右外边距，可以多出来水平空间，负的左右外边距会使行内元素与其他内容重叠。<br>行内元素的边框，不会改变行高。<br>行内元素使用正的左右边框可以多出来水平空间。</p>\n<ul>\n<li>padding 内边距<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n</ul>\n</li>\n</ul>\n<p>行内非替换元素使用左右内边距时，可以多出来水平空间，而上下边距不会改变行高。<br>可以想图像使用内边距,外边距，边框时，它可以改变行高，也可以水平方向留出距离。</p>\n<ul>\n<li>background-color 背景元素<ul>\n<li>&lt;color&gt;</li>\n<li>transparent</li>\n</ul>\n</li>\n<li>background-image 如body {background-image: url(bg23.gif)}<ul>\n<li>&lt;uri&gt;</li>\n<li>none</li>\n</ul>\n</li>\n<li>background-repeat 有方向的重复<ul>\n<li>repeat</li>\n<li>repeat-x</li>\n<li>repeat-y</li>\n<li>no-repeat</li>\n</ul>\n</li>\n<li>background-position 背景定位<ul>\n<li>&lt;percentage&gt;</li>\n<li>&lt;length&gt;</li>\n<li>left/center/right/top/bottom</li>\n</ul>\n</li>\n</ul>\n<p>background-position单个关键字等价<br>center: cener center<br>top: top center或者center top<br>bottom: bottom center或者center bottom<br>left: left center 或者center left<br>right: right center 或者center right</p>\n<ul>\n<li><p>background-attachment</p>\n<ul>\n<li>scroll 跟随文档滚动</li>\n<li>fixed 不跟随文档滚动</li>\n</ul>\n</li>\n<li><p>background 简写属性</p>\n<ul>\n<li>&lt;background-color&gt; || &lt;background-image&gt; || &lt;backgroud-repeat&gt; || &lt;background-attachment&gt; || &lt;background-position&gt;</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第十章-浮动和定位\"><a href=\"#第十章-浮动和定位\" class=\"headerlink\" title=\"第十章 浮动和定位\"></a>第十章 浮动和定位</h2><ul>\n<li>float<ul>\n<li>left</li>\n<li>right</li>\n<li>none</li>\n</ul>\n</li>\n</ul>\n<p>浮动元素会从文档的正常流中删除，它还是会影响布局。其他内容会环绕元素，浮动元素的外边距不会合并</p>\n<ul>\n<li><p>position</p>\n<ul>\n<li>static 默认 块元素生成一个矩形框，行内元素创建一个或多个行框，置于父元素中</li>\n<li>relative 元素偏移某个距离，元素仍保持未定位前的形状，它原本占据的空间仍保留</li>\n<li>absolute 元素框从文档流中完全删除，并相对于其包含块定位。</li>\n<li>fixed 元素的表现类似于absolute，不过，其包含块是视窗本身。</li>\n</ul>\n</li>\n<li><p>偏移属性，在position为relative,absolute和fixed时，可以设置偏移属性top right bottom left</p>\n<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n<li>auto 初始值</li>\n</ul>\n</li>\n</ul>\n<p>包含块</p>\n<p>根元素的包含块，由用户代理建立，即html元素或body元素<br>对于一个非根元素，如果其position时relative或static，包含块则由最近的块级框，表单元格或行内块祖先框的内容边界构成。<br>对于一个非根元素，如果其position时absolute，包含块则由最近的position值不是static的祖先元素。</p>\n<ul>\n<li>overflow<ul>\n<li>visible</li>\n<li>hidden</li>\n<li>scroll</li>\n<li>auto</li>\n</ul>\n</li>\n</ul>"},{"title":"高性能Javscript - 笔记","_content":"\n## 第一章\n\n### 减少Javascript加载对性能的影响\n\n- &lt;/body>闭合标签之前，将所有&lt;javascript>标签放到页面底部。这能确保在脚本执行前页面已经完成了渲染\n- 合并脚本，减少&lt;javascript>标签\n- 使用&lt;javascript>标签的defer属性\n```javascript\n    <script type='text/javascript' src='file1.js' defer></script>\n```\n\n<!--more-->\n\n- 利用动态创建的&lt;javascript>元素来下载并执行代码\n```javascript\n    var script = document.createElemnet('script');\n    script.type = 'text/javascript';\n    script.onload = function() {\n        alert('Script loaded!');\n    }\n    script.src = 'file1.js';\n    document.getElementByTagName('head')[0].appendChild(script);\n```\n- 使用XHR对象下载Javascript代码并注入页面中\n```javascript\n    var xhr = new XMLHttpRequest();\n    xhr.open('get', 'file1.js', true);\n    xhr.onreadystatechange = function() {\n        if(xhr.readyState == 4) {\n            if(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n                var script = document.createElemnet('script');\n                script.type = 'text/javascript';\n                script.text = xhr.responseText;\n                document.body.appendChild(script);\n            }\n        }\n    }\n```\n\n### 几种类库加载js的方式\n- YUI3\n```javascript\n    <script type='text/javascript' src='http://yui.yahooapis.com/combo?3.0.0/build/yui/yui-min.js'></script>\n    <script type='text/javascript'>\n        YUI().use('dom', function(Y) {\n            Y.DOM.addClass(document.body, 'loaded');\n        })\n    </script>\n```\n- LazyLoad\n```javascript\n    <script type='text/javascript' src='lazyload-min.js'></script>\n    <script type='text/javascript'>\n        LazyLoad.js('the-rest.js', function() {\n            Applicationn.init();\n        })\n    </script>\n```\n- LABjs\n```javascript\n    <script type='text/javascript' src='lab.js'></script>\n    <script type='text/javascript'> \n        $LAB.script('first-file.js')\n            .wait()\n            .script('the-rest.js')\n            .wait(function() {\n                Applicationn.init();\n            })\n```\n\n## 第二章\n\n在Javascript中，数据存储的位置会对代码整体性能产成重大影响。数据存储共有4中方式：字面量、变量、数组项、对象成员。它们有着各自的性能特点。\n\n\n- 访问字面量和局部变量的速度最快，相反，访问数组元素和对象成员相对较慢。\n- 由于局部变量存在于作用域链的起始位置，因此访问局部变量比访问跨作用域变量更快。变量在作用域中的位置越深，访问所需时间就越长。由于全局变量总处在作用域的最末端，因此访问速度时最慢的。\n- 避免使用with语句。\n- 嵌套的对象成员会明显影响性能，尽量少用。\n- 属性或方法在原型链中的位置越深，访问它的速度也越慢。\n- 通常来说，你可以通过把常用的对象成员、数组元素、跨域变量保存在局部变量中来改善Javascript性能，因为局部变量访问速度更快。\n","source":"_posts/High-Performance-Javascript.md","raw":"---\ntitle: 高性能Javscript - 笔记\n---\n\n## 第一章\n\n### 减少Javascript加载对性能的影响\n\n- &lt;/body>闭合标签之前，将所有&lt;javascript>标签放到页面底部。这能确保在脚本执行前页面已经完成了渲染\n- 合并脚本，减少&lt;javascript>标签\n- 使用&lt;javascript>标签的defer属性\n```javascript\n    <script type='text/javascript' src='file1.js' defer></script>\n```\n\n<!--more-->\n\n- 利用动态创建的&lt;javascript>元素来下载并执行代码\n```javascript\n    var script = document.createElemnet('script');\n    script.type = 'text/javascript';\n    script.onload = function() {\n        alert('Script loaded!');\n    }\n    script.src = 'file1.js';\n    document.getElementByTagName('head')[0].appendChild(script);\n```\n- 使用XHR对象下载Javascript代码并注入页面中\n```javascript\n    var xhr = new XMLHttpRequest();\n    xhr.open('get', 'file1.js', true);\n    xhr.onreadystatechange = function() {\n        if(xhr.readyState == 4) {\n            if(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n                var script = document.createElemnet('script');\n                script.type = 'text/javascript';\n                script.text = xhr.responseText;\n                document.body.appendChild(script);\n            }\n        }\n    }\n```\n\n### 几种类库加载js的方式\n- YUI3\n```javascript\n    <script type='text/javascript' src='http://yui.yahooapis.com/combo?3.0.0/build/yui/yui-min.js'></script>\n    <script type='text/javascript'>\n        YUI().use('dom', function(Y) {\n            Y.DOM.addClass(document.body, 'loaded');\n        })\n    </script>\n```\n- LazyLoad\n```javascript\n    <script type='text/javascript' src='lazyload-min.js'></script>\n    <script type='text/javascript'>\n        LazyLoad.js('the-rest.js', function() {\n            Applicationn.init();\n        })\n    </script>\n```\n- LABjs\n```javascript\n    <script type='text/javascript' src='lab.js'></script>\n    <script type='text/javascript'> \n        $LAB.script('first-file.js')\n            .wait()\n            .script('the-rest.js')\n            .wait(function() {\n                Applicationn.init();\n            })\n```\n\n## 第二章\n\n在Javascript中，数据存储的位置会对代码整体性能产成重大影响。数据存储共有4中方式：字面量、变量、数组项、对象成员。它们有着各自的性能特点。\n\n\n- 访问字面量和局部变量的速度最快，相反，访问数组元素和对象成员相对较慢。\n- 由于局部变量存在于作用域链的起始位置，因此访问局部变量比访问跨作用域变量更快。变量在作用域中的位置越深，访问所需时间就越长。由于全局变量总处在作用域的最末端，因此访问速度时最慢的。\n- 避免使用with语句。\n- 嵌套的对象成员会明显影响性能，尽量少用。\n- 属性或方法在原型链中的位置越深，访问它的速度也越慢。\n- 通常来说，你可以通过把常用的对象成员、数组元素、跨域变量保存在局部变量中来改善Javascript性能，因为局部变量访问速度更快。\n","slug":"High-Performance-Javascript","published":1,"date":"2016-09-13T06:29:27.735Z","updated":"2016-09-13T06:29:27.735Z","_id":"ciszm0f770000rxpv9g7dwvyg","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"第一章\"><a href=\"#第一章\" class=\"headerlink\" title=\"第一章\"></a>第一章</h2><h3 id=\"减少Javascript加载对性能的影响\"><a href=\"#减少Javascript加载对性能的影响\" class=\"headerlink\" title=\"减少Javascript加载对性能的影响\"></a>减少Javascript加载对性能的影响</h3><ul>\n<li>&lt;/body&gt;闭合标签之前，将所有&lt;javascript&gt;标签放到页面底部。这能确保在脚本执行前页面已经完成了渲染</li>\n<li>合并脚本，减少&lt;javascript&gt;标签</li>\n<li>使用&lt;javascript&gt;标签的defer属性<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'file1.js'</span> defer&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>利用动态创建的&lt;javascript&gt;元素来下载并执行代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElemnet(<span class=\"string\">'script'</span>);</div><div class=\"line\">script.type = <span class=\"string\">'text/javascript'</span>;</div><div class=\"line\">script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'Script loaded!'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">script.src = <span class=\"string\">'file1.js'</span>;</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(script);</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用XHR对象下载Javascript代码并注入页面中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">xhr.open(<span class=\"string\">'get'</span>, <span class=\"string\">'file1.js'</span>, <span class=\"literal\">true</span>);</div><div class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(xhr.readyState == <span class=\"number\">4</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span> || xhr.status === <span class=\"number\">304</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElemnet(<span class=\"string\">'script'</span>);</div><div class=\"line\">            script.type = <span class=\"string\">'text/javascript'</span>;</div><div class=\"line\">            script.text = xhr.responseText;</div><div class=\"line\">            <span class=\"built_in\">document</span>.body.appendChild(script);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"几种类库加载js的方式\"><a href=\"#几种类库加载js的方式\" class=\"headerlink\" title=\"几种类库加载js的方式\"></a>几种类库加载js的方式</h3><ul>\n<li><p>YUI3</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'http://yui.yahooapis.com/combo?3.0.0/build/yui/yui-min.js'</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt;</div><div class=\"line\">    YUI().use(<span class=\"string\">'dom'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Y</span>) </span>&#123;</div><div class=\"line\">        Y.DOM.addClass(<span class=\"built_in\">document</span>.body, <span class=\"string\">'loaded'</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>LazyLoad</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'lazyload-min.js'</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt;</div><div class=\"line\">    LazyLoad.js(<span class=\"string\">'the-rest.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        Applicationn.init();</div><div class=\"line\">    &#125;)</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>LABjs</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'lab.js'</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt; </div><div class=\"line\">    $LAB.script(<span class=\"string\">'first-file.js'</span>)</div><div class=\"line\">        .wait()</div><div class=\"line\">        .script(<span class=\"string\">'the-rest.js'</span>)</div><div class=\"line\">        .wait(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            Applicationn.init();</div><div class=\"line\">        &#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"第二章\"><a href=\"#第二章\" class=\"headerlink\" title=\"第二章\"></a>第二章</h2><p>在Javascript中，数据存储的位置会对代码整体性能产成重大影响。数据存储共有4中方式：字面量、变量、数组项、对象成员。它们有着各自的性能特点。</p>\n<ul>\n<li>访问字面量和局部变量的速度最快，相反，访问数组元素和对象成员相对较慢。</li>\n<li>由于局部变量存在于作用域链的起始位置，因此访问局部变量比访问跨作用域变量更快。变量在作用域中的位置越深，访问所需时间就越长。由于全局变量总处在作用域的最末端，因此访问速度时最慢的。</li>\n<li>避免使用with语句。</li>\n<li>嵌套的对象成员会明显影响性能，尽量少用。</li>\n<li>属性或方法在原型链中的位置越深，访问它的速度也越慢。</li>\n<li>通常来说，你可以通过把常用的对象成员、数组元素、跨域变量保存在局部变量中来改善Javascript性能，因为局部变量访问速度更快。</li>\n</ul>\n","excerpt":"<h2 id=\"第一章\"><a href=\"#第一章\" class=\"headerlink\" title=\"第一章\"></a>第一章</h2><h3 id=\"减少Javascript加载对性能的影响\"><a href=\"#减少Javascript加载对性能的影响\" class=\"headerlink\" title=\"减少Javascript加载对性能的影响\"></a>减少Javascript加载对性能的影响</h3><ul>\n<li>&lt;/body&gt;闭合标签之前，将所有&lt;javascript&gt;标签放到页面底部。这能确保在脚本执行前页面已经完成了渲染</li>\n<li>合并脚本，减少&lt;javascript&gt;标签</li>\n<li>使用&lt;javascript&gt;标签的defer属性<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'file1.js'</span> defer&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<ul>\n<li><p>利用动态创建的&lt;javascript&gt;元素来下载并执行代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElemnet(<span class=\"string\">'script'</span>);</div><div class=\"line\">script.type = <span class=\"string\">'text/javascript'</span>;</div><div class=\"line\">script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'Script loaded!'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">script.src = <span class=\"string\">'file1.js'</span>;</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(script);</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用XHR对象下载Javascript代码并注入页面中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">xhr.open(<span class=\"string\">'get'</span>, <span class=\"string\">'file1.js'</span>, <span class=\"literal\">true</span>);</div><div class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(xhr.readyState == <span class=\"number\">4</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span> || xhr.status === <span class=\"number\">304</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElemnet(<span class=\"string\">'script'</span>);</div><div class=\"line\">            script.type = <span class=\"string\">'text/javascript'</span>;</div><div class=\"line\">            script.text = xhr.responseText;</div><div class=\"line\">            <span class=\"built_in\">document</span>.body.appendChild(script);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"几种类库加载js的方式\"><a href=\"#几种类库加载js的方式\" class=\"headerlink\" title=\"几种类库加载js的方式\"></a>几种类库加载js的方式</h3><ul>\n<li><p>YUI3</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'http://yui.yahooapis.com/combo?3.0.0/build/yui/yui-min.js'</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt;</div><div class=\"line\">    YUI().use(<span class=\"string\">'dom'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Y</span>) </span>&#123;</div><div class=\"line\">        Y.DOM.addClass(<span class=\"built_in\">document</span>.body, <span class=\"string\">'loaded'</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>LazyLoad</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'lazyload-min.js'</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt;</div><div class=\"line\">    LazyLoad.js(<span class=\"string\">'the-rest.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        Applicationn.init();</div><div class=\"line\">    &#125;)</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>LABjs</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'lab.js'</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt; </div><div class=\"line\">    $LAB.script(<span class=\"string\">'first-file.js'</span>)</div><div class=\"line\">        .wait()</div><div class=\"line\">        .script(<span class=\"string\">'the-rest.js'</span>)</div><div class=\"line\">        .wait(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            Applicationn.init();</div><div class=\"line\">        &#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"第二章\"><a href=\"#第二章\" class=\"headerlink\" title=\"第二章\"></a>第二章</h2><p>在Javascript中，数据存储的位置会对代码整体性能产成重大影响。数据存储共有4中方式：字面量、变量、数组项、对象成员。它们有着各自的性能特点。</p>\n<ul>\n<li>访问字面量和局部变量的速度最快，相反，访问数组元素和对象成员相对较慢。</li>\n<li>由于局部变量存在于作用域链的起始位置，因此访问局部变量比访问跨作用域变量更快。变量在作用域中的位置越深，访问所需时间就越长。由于全局变量总处在作用域的最末端，因此访问速度时最慢的。</li>\n<li>避免使用with语句。</li>\n<li>嵌套的对象成员会明显影响性能，尽量少用。</li>\n<li>属性或方法在原型链中的位置越深，访问它的速度也越慢。</li>\n<li>通常来说，你可以通过把常用的对象成员、数组元素、跨域变量保存在局部变量中来改善Javascript性能，因为局部变量访问速度更快。</li>\n</ul>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}