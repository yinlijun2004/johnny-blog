{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1479698052892},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1479698052892},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1479698052892},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1479698052892},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1479698052892},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1479698052892},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1479698052892},{"_id":"themes/next/gulpfile.coffee","hash":"e549561461642051d195550ec49d793e44ee22a0","modified":1479698052892},{"_id":"themes/next/package.json","hash":"48e2352f8e41f2b6bbf55254d10f3192ee206d5a","modified":1479698052963},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1479698052892},{"_id":"themes/next/_config.yml","hash":"2d47e90c8be64ee102a0ccba1f94d8f8bf076b3b","modified":1479698052892},{"_id":"source/_posts/android-studio编译错误-目标模式不含有“-”。-停止。.md","hash":"7c98417de932d613499774861a04c9d11c46105f","modified":1479695861650},{"_id":"source/_posts/High-Performance-Javascript.md","hash":"96eacd0b65cbb68197478ec925f54fac61e8cae2","modified":1479695861650},{"_id":"source/_posts/chapter-4.md","hash":"b4a6b20e8394497b7f42662876806016e578a3fb","modified":1479695861650},{"_id":"source/_posts/chapter-2.md","hash":"ecd43c97c97ccc4f5682caa9c6ebc5b2f651c53d","modified":1479695861650},{"_id":"source/_posts/CSS-The-Definitive-Guide.md","hash":"0210f6a0ee76694eec7ecb57bfff8e20f55f260f","modified":1479695861650},{"_id":"source/_posts/gitignore无效，不能过滤某些文件.md","hash":"c62cc3765316f4ca03a922695d23638c8616a993","modified":1479695861650},{"_id":"source/_posts/git配置user-name和user-email.md","hash":"264ea0341af09e5631b50153b7b7bde68c57e39d","modified":1479695861650},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1479698052892},{"_id":"source/_posts/react-router-4-0-0-api-Match.md","hash":"d4d34e4647d004b385d621e6c8d37843c5f1e949","modified":1480058272661},{"_id":"source/_posts/how-to-download-openjdk.md","hash":"f0e68c16264b99d89f3d19177428c73bbb35d14a","modified":1479695861650},{"_id":"source/_posts/react-router-4-0-0-api.md","hash":"10711ef9576de09ddb832bfd4c237516f8818251","modified":1480058268375},{"_id":"source/_posts/make-ubutun-desktop.md","hash":"9aa6207fbed6285c32a8f269cf2ca9f0124f30dd","modified":1479695861650},{"_id":"source/_posts/ubuntu利用update-alternatives配置java.md","hash":"51f6d70e2373ba10f2e5bdcc83371153547e28ae","modified":1479695861650},{"_id":"source/_posts/ubuntu编译android源代码环境搭建.md","hash":"03ee5608815d8f3761250e68967f50a8dff49b71","modified":1479695861650},{"_id":"source/_posts/windows下文件路径太深，无法删除解决办法.md","hash":"72f6c68d453a1472577c2607e26416ebaa82751b","modified":1479695861650},{"_id":"source/_posts/windows配置mongdb记录.md","hash":"c24f93f7fa2bffaf7714ba4f6779075024b5e83f","modified":1479695861650},{"_id":"source/_drafts/my-son-2016-11-21.md","hash":"a14f7de8ddee88fc1d04e43370c7ab80a9e11ba8","modified":1479715539398},{"_id":"source/tags/index.md","hash":"04bc60dd420ab525660ecff2551d582e4be83df5","modified":1479695861650},{"_id":"source/categories/index.md","hash":"a0e51752f654c428f1e02c0b4e656f3bc80467ef","modified":1479695861650},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1479698052761},{"_id":"themes/next/.git/config","hash":"340cff4364d9733a32042fdb93097c334a781c93","modified":1479698052766},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1479696300430},{"_id":"themes/next/.git/index","hash":"f8fc0938a027e2ed7f15874b8a8075e61a161b3f","modified":1479698108194},{"_id":"themes/next/.git/packed-refs","hash":"09a09da39b7d77dcf2904850874cf00817abdb45","modified":1479698052708},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1479698052892},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1479698052892},{"_id":"themes/next/languages/de.yml","hash":"db6a9d669f4b6282cda6c0a2d4e03d3e308a4846","modified":1479698052892},{"_id":"themes/next/languages/default.yml","hash":"fe00529a94bb2550194a31d178f5810b45014ab6","modified":1479698052892},{"_id":"source/_posts/react-lifecycle.md","hash":"518e838da24c2be1720bed12be7af222839e36c1","modified":1480058260990},{"_id":"source/_posts/chapter-3.md","hash":"42c699aa3e7bb475e9b86e3cbbc96d3c1b6e2ada","modified":1479695861650},{"_id":"themes/next/languages/en.yml","hash":"d02acdce503c86fbb01920ad22d31ec56fc285f1","modified":1479698052892},{"_id":"themes/next/languages/id.yml","hash":"d8b9dc017da0be7f71fda1cacd8064cbc38963b9","modified":1479698052892},{"_id":"themes/next/languages/fr-FR.yml","hash":"91cf55b9d75879e72c8008d2659fe2ea993a4cca","modified":1479698052892},{"_id":"source/_drafts/qrcode.md","hash":"2841f94c615409606dd6127807f9578d863719f9","modified":1477731524000},{"_id":"themes/next/languages/ja.yml","hash":"bc89436a2a015ef72f43f265e56e37d94e73c0cd","modified":1479698052892},{"_id":"themes/next/languages/pt-BR.yml","hash":"4b91f96b07e05705b28964df7460466c9b522e2c","modified":1479698052892},{"_id":"themes/next/languages/ko.yml","hash":"c59676f2af80c3c594c34c4a0fcbf65fd8864ff3","modified":1479698052892},{"_id":"themes/next/languages/pt.yml","hash":"f364905121a816c9797acce07c0a4f248965b29a","modified":1479698052908},{"_id":"themes/next/languages/ru.yml","hash":"402e676252ab1fc4522257a578738cb9536eb077","modified":1479698052909},{"_id":"themes/next/languages/zh-Hans.yml","hash":"439c16c744b1596f24d9e0b4e230c4d3c93b7d85","modified":1479698052909},{"_id":"themes/next/languages/zh-hk.yml","hash":"a59f3f3114f5eb4d170a76da4359307e8f5159a7","modified":1479698052909},{"_id":"themes/next/languages/zh-tw.yml","hash":"18da1324d2212faca9a6e5e6ce98b419c86d4b0c","modified":1479698052910},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1479698052963},{"_id":"themes/next/layout/_layout.swig","hash":"b4ef30f7da073bf2a9052186f76e0e080de1c794","modified":1479698052913},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1479698052948},{"_id":"themes/next/layout/schedule.swig","hash":"595013860078799d455af4965b3a7c5c4fd3923c","modified":1479698052963},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1479698052963},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1479698052963},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1479698053135},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1479698052948},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1479698052963},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479698053010},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1479698052963},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1479696300793},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1479698053135},{"_id":"themes/next/.git/logs/HEAD","hash":"ace8c5ae15a81eabd390cbb61ef986960f48508c","modified":1479698052763},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1479698053135},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1479698052912},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1479698052913},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1479698052914},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1479698052932},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1479698052915},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1479698052932},{"_id":"themes/next/layout/_partials/footer.swig","hash":"168430bd87ca8212cf9773b5dd94f52b805ef210","modified":1479698052932},{"_id":"themes/next/layout/_macro/post.swig","hash":"abfc88f34f2c0ae52229c4ffa577b00ad7cecdc6","modified":1479698052914},{"_id":"themes/next/layout/_partials/comments.swig","hash":"a5ffadb516522f85c052b290b94c0e4af3002644","modified":1479698052932},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"dfbb6e9692333166aa78231ad12b2a40c153cbcb","modified":1479698052932},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1479698052932},{"_id":"themes/next/layout/_partials/search.swig","hash":"952b7b8d9ce2c81d4002a9dc2331f1e710f99616","modified":1479698052932},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1479698052948},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1479698052948},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1479698052948},{"_id":"themes/next/layout/_partials/header.swig","hash":"d9b10a92fdccd57a0c0d6773831f9c1b0f1bb449","modified":1479698052932},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1479698052963},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1479698052963},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1479698052963},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1479698052963},{"_id":"themes/next/layout/_partials/head.swig","hash":"740684ef2b6e56183529387882042612e904bc8d","modified":1479698052932},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1479698053010},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1479698052948},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1479698053010},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1479698053010},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"3b261c758a7673d91c116367be1bb5223403f9e0","modified":1479698052932},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1479698053010},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1479698053010},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1479698053010},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1479698053010},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1479698053010},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479698053010},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1479698053010},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1479698053010},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479698053010},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1479696300474},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1479698053010},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1479696300574},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1479698053010},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1479698053010},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"b4ad74c989616b7395dc6c9fce9871bb1e86dfb5","modified":1479696300574},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1479696300621},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1479696300731},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1479696300574},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479698052948},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479698052948},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479698052994},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479698052994},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1479696300621},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479698052994},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479698053010},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479698053010},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1479696300574},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1479696300574},{"_id":"themes/next/.git/refs/heads/master","hash":"776e91b78b954875a8d38297e05b80eab20df4b9","modified":1479698052762},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"bb2c3a926bb7f8fea54d424882b25d93dfde7ae6","modified":1479698052912},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1479698052932},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1479698052911},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1479698052932},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1479698052932},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1479698052932},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1479698052948},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1479698052948},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1479698052948},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1479698052948},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1479698052948},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1479698052932},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"188423f7df0eb8c99a03cb6741384415651c4665","modified":1479698052948},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"9c8f4b2a29741d96adf0b8fef52ae7f4396f27f5","modified":1479698052948},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1479698052948},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1479698052948},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1479698052948},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1479698052994},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1479698052994},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1479698052994},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1479698053010},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"d7826b48a20162835450495db534d353ac52e476","modified":1479698053010},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1479698052932},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f592adff22628b271ec9657b080cf6b9cc200615","modified":1479698052948},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1479698052948},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1479698053010},{"_id":"themes/next/source/css/_variables/base.styl","hash":"4c4298a7011841d9ee2aec5bd192df5730b08517","modified":1479698053010},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1479698053010},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1479698053010},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84bdc8a4fe127849a5c99bdefe1d0b65ee1a4a0a","modified":1479698053010},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1479698053010},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1479698053010},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1479698053041},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1479698053041},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1479698053041},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1479698053057},{"_id":"themes/next/source/js/src/utils.js","hash":"e34f83848883732ddd7a34a3e3ed2a293f0f76a7","modified":1479698053041},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1479698053057},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1479698053041},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1479698053057},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1479698053057},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1479698053057},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1479698053057},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1479698053120},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1479698053120},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1479698053120},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1479698053120},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1479698053120},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1479698053120},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1479698053057},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1479698053135},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"8868275e8b6340c87a81c69a54ed138d11fb3c3e","modified":1479698053057},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1479698053135},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1479698053135},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1479698053135},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1479698053135},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1479698053120},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1479698053135},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"ace8c5ae15a81eabd390cbb61ef986960f48508c","modified":1479698052763},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1479698052730},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1479698052948},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1479698052948},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1479698052948},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1479698052948},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1479698052948},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1479698052948},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1479698053057},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"e4a13e8cd19762ef3aea0e59dfae8b3c1f251f11","modified":1479698052948},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1479698052963},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1479698052963},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1479698052963},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1479698052963},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1479698052948},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1479698052979},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1479698052948},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1479698052979},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1479698052994},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1479698052948},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1479698052994},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1479698052994},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1479698052994},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1479698052994},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1479698052994},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1479698052994},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1479698052994},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1479698052994},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1479698052994},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1479698052994},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1479698052994},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1479698052994},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1479698052994},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1479698052994},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"338e9475519ce72af29a1bc05610f9f486e0f1c2","modified":1479698052994},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1479698052994},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1479698052994},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1479698052994},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1479698052994},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1479698052994},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1479698052994},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1479698052994},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1479698053041},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1479698053041},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1479698052994},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1479698053041},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1479698052994},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1479698053041},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1479698053041},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1479698053057},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1479698053041},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1479698053057},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1479698053057},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1479698053057},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1479698053057},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"a02674d823c7b577d38c3cdb91953993b6e4b3a0","modified":1479698053057},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1479698053057},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"3c1d63dd1176c77f9f4cdb1616fbb08c31b9822f","modified":1479698053057},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1479698053057},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1479698053135},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1479698053135},{"_id":"themes/next/.git/objects/pack/pack-f7e914c1b99eb35e9bcafeef0cd43367c7b79eb8.idx","hash":"1913fe8e058000988ab312ef45a00fe03b566660","modified":1479698052539},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1479698053073},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1479698053088},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1479698053120},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1479698053135},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1479698053120},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"ace8c5ae15a81eabd390cbb61ef986960f48508c","modified":1479698052760},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1479698052963},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1479698052963},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1479698052963},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1479698052963},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1479698052963},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1479698052963},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1479698052963},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1479698052963},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1479698052963},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1479698052963},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1479698052963},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1479698052963},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"e2066dd20747e3125c969ef8459d0015fa5233a2","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"74e9989a10fc682388cbd25ff7df0d7d4025fb8c","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"c8a05ce90784db9744c22fab22019eb637df1f2f","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"3b1aabbab57b0b1fafa311feb1212f59e78e7928","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1479698052979},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"eb4ede7d7446d8a2f2ddeef3b17f497a6ad30756","modified":1479698052994},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"4f1e9d96940aa3e42d58fb63a26d4fa260323b0d","modified":1479698052994},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1479698052994},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1479698052994},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1479698052994},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"cd2def16d31feb234be27dcdce2a919f70cc6919","modified":1479698052963},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1479698052963},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1479698053057},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1479698053057},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1479698053057},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1479698052979},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1479698053104},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1479698053041},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1479698053057},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1479698053057},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1479698053057},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1479698053104},{"_id":"themes/next/.git/objects/pack/pack-f7e914c1b99eb35e9bcafeef0cd43367c7b79eb8.pack","hash":"35ea225378a491c28321e41aad9cb4d37e340ae9","modified":1479698052592},{"_id":"public/atom.xml","hash":"98b8e51b5f5145e58c812fd37b801b05fed03b83","modified":1480058283394},{"_id":"public/tags/index.html","hash":"09e4638b7db1d99a43499bf6a788d1e8205605e3","modified":1480057551854},{"_id":"public/categories/index.html","hash":"8be4e7bdcc50bc14c42307090c237f79bad49dd8","modified":1480057551854},{"_id":"public/2016/11/24/react-router-4-0-0-api/index.html","hash":"8e3d6c24b7b988fc6801916bd04b46e25427dc5f","modified":1480058283425},{"_id":"public/2016/11/15/make-ubutun-desktop/index.html","hash":"1b2e48316181c7431581d1d2572c27ac58b892b4","modified":1480057551854},{"_id":"public/2016/11/15/git配置user-name和user-email/index.html","hash":"f4bc55007c43da2f533b7701f71d164ab8867666","modified":1480057551854},{"_id":"public/2016/11/09/windows配置mongdb记录/index.html","hash":"64b2269ad6a4a6cb3c417bce60d98ce0c3c6d947","modified":1480057551854},{"_id":"public/2016/11/08/windows下文件路径太深，无法删除解决办法/index.html","hash":"e6bc58112c92e462157aef06af3b6330541c7fc9","modified":1480057551854},{"_id":"public/2016/11/06/gitignore无效，不能过滤某些文件/index.html","hash":"b7ed7a4d4a045eb451b928db6c3cea6819e1bcd1","modified":1480057551854},{"_id":"public/2016/11/05/android-studio编译错误-目标模式不含有“-”。-停止。/index.html","hash":"c9f81de11d6e34f66a202be87840ab1c7bd238c2","modified":1480057551854},{"_id":"public/archives/page/2/index.html","hash":"d813dc3699c28f640adda985708ec7073b22ca6d","modified":1480057551854},{"_id":"public/archives/2016/page/2/index.html","hash":"0d80182d81010d039d949fc0adccaff6b0a0f0c6","modified":1480057551854},{"_id":"public/archives/2016/09/index.html","hash":"3139941972489b5b56c38c6406539420a2286522","modified":1480057551854},{"_id":"public/archives/2016/11/page/2/index.html","hash":"57e173ed28501e01bdeec9972c1af448ea064401","modified":1480057551854},{"_id":"public/tags/android-studio/index.html","hash":"c5302d6787b64e5f654d482f72d2a35842698135","modified":1480057551854},{"_id":"public/tags/android/index.html","hash":"5f957069e440679e5b0274e4babaf9502a61bbf6","modified":1480057551854},{"_id":"public/tags/javascript/index.html","hash":"fb9398f64a3091b3d6ac870e5655747db7f9351b","modified":1480057551854},{"_id":"public/tags/jQuery/index.html","hash":"55efe002078b8c7c587d017e5de27d9ccbb7ad2e","modified":1480057551854},{"_id":"public/tags/css/index.html","hash":"77c9f4eb0a0558e0aa632125260675be3e0f0c99","modified":1480057551854},{"_id":"public/tags/git/index.html","hash":"457d081da15cbe52deb182114645f8568c4d4d08","modified":1480057551854},{"_id":"public/tags/gitignore/index.html","hash":"e752dd73495a5d3cab7bb2b6419ee6936698485e","modified":1480057551854},{"_id":"public/tags/react/index.html","hash":"9948dd10cbad0dc7a9489fc20e5b03be15573529","modified":1480057551854},{"_id":"public/tags/react-router/index.html","hash":"7593b0f2d3370ecc84a4d8e496388b7d4f4d931c","modified":1480057551854},{"_id":"public/tags/翻译文档/index.html","hash":"065d6cbb72b536b9cc66c36a98a787610918d335","modified":1480057551854},{"_id":"public/tags/openjdk-java/index.html","hash":"462c61ed50057b1c4c18d28d4ed66a16ae55fef7","modified":1480057551854},{"_id":"public/tags/ubuntu/index.html","hash":"b0ea9077ad603b6fb093aac36ebe2ee5793f10ec","modified":1480057551854},{"_id":"public/tags/update-alternatives/index.html","hash":"723fc7deef17389f2f8be92d6fc3658e8db42792","modified":1480057551854},{"_id":"public/tags/windows/index.html","hash":"23370814d2330eaa53e9ae5b294d75b338a2410c","modified":1480057551854},{"_id":"public/tags/mongodb/index.html","hash":"ad16749b71fedae72072c07994c5a40159cb29f3","modified":1480057551854},{"_id":"public/tags/环境搭建/index.html","hash":"10bc612e49ebfaa870315d9015bbc64d4497cf20","modified":1480057551854},{"_id":"public/tags/npm/index.html","hash":"bdd8ca0c658aff86efa9e14fd246d15ae982fcab","modified":1480057551854},{"_id":"public/2016/11/24/react-lifecycle/index.html","hash":"c8650ae88187bccaa39d7e56526c98703f7d3b5d","modified":1480058283425},{"_id":"public/2016/11/16/ubuntu编译android源代码环境搭建/index.html","hash":"633c8604912c81b1ae19f4fc01c1026e235818a2","modified":1480057551854},{"_id":"public/2016/11/15/how-to-download-openjdk/index.html","hash":"f036cab9efcd8c4c7d88e8d2cb3d037a410284e0","modified":1480057551854},{"_id":"public/2016/11/15/ubuntu利用update-alternatives配置java/index.html","hash":"e7055d7bb579a14dba1b40b33609ecb8b44c06b1","modified":1480057551854},{"_id":"public/2016/11/05/High-Performance-Javascript/index.html","hash":"44ce0c0a8cd64b525a9e354c62328a1400f36a91","modified":1480057551854},{"_id":"public/2016/09/06/CSS-The-Definitive-Guide/index.html","hash":"465867387420f8dab033c656f8609d4ff04737df","modified":1480057551854},{"_id":"public/2016/09/05/chapter-4/index.html","hash":"690d6c1ecf3c799c93d11a5d1424560b58db1e5f","modified":1480057551854},{"_id":"public/2016/09/03/chapter-3/index.html","hash":"b0b4ea798b8fff64ad7d248ea83c3c8a6ac2f9a7","modified":1480057551854},{"_id":"public/2016/09/02/chapter-2/index.html","hash":"3e294d570ea12dffddadf603e1da9f989c2c20d8","modified":1480057551854},{"_id":"public/archives/index.html","hash":"8cf59fecf78630b5659fffb05bc0fd6d050ce9d6","modified":1480057551854},{"_id":"public/archives/2016/index.html","hash":"4ab21c79ee726acf19d38d36b904afbfa347fa4c","modified":1480057551870},{"_id":"public/archives/2016/11/index.html","hash":"6a4b3c8fa887565399e7e495dbd9bb41d73b4ce4","modified":1480057551870},{"_id":"public/index.html","hash":"bdad3ffbb9286cdc5b9a46d562d1dcd0d82c2994","modified":1480058283425},{"_id":"public/page/2/index.html","hash":"8769f8bd249bb44e9340ca8aafb43a56bb88b1c5","modified":1480057551870},{"_id":"public/2016/11/25/react-router-4-0-0-api-Match/index.html","hash":"4c750406409d8623463c9d4fa9ac4b5db1f4cbca","modified":1480058283425},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1480057551885},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1480057551885},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1480057551885},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1480057551885},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1480057551885},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1480057551885},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1480057551885},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1480057551885},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1480057551885},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1480057551885},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1480057551885},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1480057551885},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1480057551885},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1480057551885},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1480057551885},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1480057551885},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1480057551885},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1480057551885},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1480057551901},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1480057551901},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1480057551901},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1480057551901},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1480057551901},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1480057551901},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1480057553119},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1480057553119},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1480057553135},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1480057553135},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1480057553135},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1480057553135},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1480057553135},{"_id":"public/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1480057553135},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1480057553135},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1480057553135},{"_id":"public/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1480057553135},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1480057553135},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1480057553135},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1480057553135},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1480057553135},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1480057553135},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1480057553135},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1480057553135},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1480057553135},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1480057553135},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1480057553135},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1480057553135},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1480057553135},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1480057553135},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1480057553135},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1480057553135},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1480057553135},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1480057553135},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1480057553135},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1480057553135},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1480057553135},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1480057553135},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1480057553135},{"_id":"public/css/main.css","hash":"72f7b09f7f19208eaa5d1d4351d390752d4aa126","modified":1480057553135},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1480057553135},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1480057553135},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1480057553135},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1480057553135},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1480057553135},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1480057553135},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1480057553135},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1480057553135},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1480057553135},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1480057553135},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1480057553135},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1480057553217}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2016-11-15T10:19:01.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-11-15 18:19:01\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-11-21T02:37:41.650Z","path":"tags/index.html","layout":"page","_id":"civxg1t3100060cnypdtm79v1","content":"","excerpt":"","more":""},{"title":"categories","date":"2016-11-15T10:17:07.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-11-15 18:17:07\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-11-21T02:37:41.650Z","path":"categories/index.html","layout":"page","_id":"civxg1t3h00080cnyupwqj7ag","content":"","excerpt":"","more":""}],"Post":[{"title":"android studio编译错误: *** 目标模式不含有“%”。 停止。","date":"2016-11-05T10:04:19.000Z","_content":"\nAndroid Studio NDK编译出现如下错误：\n*** target pattern contains no `%'. Stop\n中文：\n*** 目标模式不含有“%”。 停止。\n可能是obj目录的问题，需要删掉。\n在工程目录下find所有的obj目录\n```bash\nfind . -name obj\n```","source":"_posts/android-studio编译错误-目标模式不含有“-”。-停止。.md","raw":"---\ntitle: 'android studio编译错误: *** 目标模式不含有“%”。 停止。'\ndate: 2016-11-5 18:04:19\ntags: [android studio, android]\n---\n\nAndroid Studio NDK编译出现如下错误：\n*** target pattern contains no `%'. Stop\n中文：\n*** 目标模式不含有“%”。 停止。\n可能是obj目录的问题，需要删掉。\n在工程目录下find所有的obj目录\n```bash\nfind . -name obj\n```","slug":"android-studio编译错误-目标模式不含有“-”。-停止。","published":1,"updated":"2016-11-21T02:37:41.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxg1t2600000cny5fkb3y3s","content":"<p>Android Studio NDK编译出现如下错误：<br><strong><em> target pattern contains no `%’. Stop<br>中文：\n</em></strong> 目标模式不含有“%”。 停止。<br>可能是obj目录的问题，需要删掉。<br>在工程目录下find所有的obj目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">find . -name obj</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>Android Studio NDK编译出现如下错误：<br><strong><em> target pattern contains no `%’. Stop<br>中文：\n</em></strong> 目标模式不含有“%”。 停止。<br>可能是obj目录的问题，需要删掉。<br>在工程目录下find所有的obj目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">find . -name obj</div></pre></td></tr></table></figure></p>\n"},{"title":"高性能Javscript - 笔记","date":"2016-11-05T10:04:19.000Z","_content":"\n## 第一章 加载和执行\n\n### 减少Javascript加载对性能的影响\n\n- &lt;/body>闭合标签之前，将所有&lt;javascript>标签放到页面底部。这能确保在脚本执行前页面已经完成了渲染\n- 合并脚本，减少&lt;javascript>标签\n- 使用&lt;javascript>标签的defer属性\n```javascript\n    <script type='text/javascript' src='file1.js' defer></script>\n```\n\n<!--more-->\n\n- 利用动态创建的&lt;javascript>元素来下载并执行代码\n```javascript\n    var script = document.createElemnet('script');\n    script.type = 'text/javascript';\n    script.onload = function() {\n        alert('Script loaded!');\n    }\n    script.src = 'file1.js';\n    document.getElementByTagName('head')[0].appendChild(script);\n```\n- 使用XHR对象下载Javascript代码并注入页面中\n```javascript\n    var xhr = new XMLHttpRequest();\n    xhr.open('get', 'file1.js', true);\n    xhr.onreadystatechange = function() {\n        if(xhr.readyState == 4) {\n            if(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n                var script = document.createElemnet('script');\n                script.type = 'text/javascript';\n                script.text = xhr.responseText;\n                document.body.appendChild(script);\n            }\n        }\n    }\n```\n\n### 几种类库加载js的方式\n- YUI3\n```javascript\n    <script type='text/javascript' src='http://yui.yahooapis.com/combo?3.0.0/build/yui/yui-min.js'></script>\n    <script type='text/javascript'>\n        YUI().use('dom', function(Y) {\n            Y.DOM.addClass(document.body, 'loaded');\n        })\n    </script>\n```\n- LazyLoad\n```javascript\n    <script type='text/javascript' src='lazyload-min.js'></script>\n    <script type='text/javascript'>\n        LazyLoad.js('the-rest.js', function() {\n            Applicationn.init();\n        })\n    </script>\n```\n- LABjs\n```javascript\n    <script type='text/javascript' src='lab.js'></script>\n    <script type='text/javascript'> \n        $LAB.script('first-file.js')\n            .wait()\n            .script('the-rest.js')\n            .wait(function() {\n                Applicationn.init();\n            })\n```\n\n## 第二章 数据存取\n\n在Javascript中，数据存储的位置会对代码整体性能产成重大影响。数据存储共有4中方式：字面量、变量、数组项、对象成员。它们有着各自的性能特点。\n\n\n- 访问字面量和局部变量的速度最快，相反，访问数组元素和对象成员相对较慢。\n- 由于局部变量存在于作用域链的起始位置，因此访问局部变量比访问跨作用域变量更快。变量在作用域中的位置越深，访问所需时间就越长。由于全局变量总处在作用域的最末端，因此访问速度时最慢的。\n- 避免使用with语句。\n- 嵌套的对象成员会明显影响性能，尽量少用。\n- 属性或方法在原型链中的位置越深，访问它的速度也越慢。\n- 通常来说，你可以通过把常用的对象成员、数组元素、跨域变量保存在局部变量中来改善Javascript性能，因为局部变量访问速度更快。\n\n## 第三章 DOM编程\n\n访问和操作DOM时现在Web应用的重要部分。但每次穿越链接ECMAScript和DOM都会有性能消耗，为了减少DOM编程带来的消耗，请记住以下几点：\n\n- 最小化DOM访问次数，尽可能在Javascript端处理。\n- 如果需要多次访问某个DOM节点，请使用局部变量存储它的引用。\n- 小心处理HTML集合，把集合的长度缓存到一个变量中，并在迭代中使用它。如果需要经常操作集合，建议把它靠背到一个数组中。\n- 如果可能的话，使用速度更快的API，比如querySelecetAll()和firstElementChild。\n- 要留意重排和重绘，批量修改样式时，离线操作DOM树，使用缓存，并减少布局信息的次数。\n- 动画中使用绝对定位，使用拖放代理。\n- 使用事件委托来减少事件处理器的数量。","source":"_posts/High-Performance-Javascript.md","raw":"---\ntitle: 高性能Javscript - 笔记\ndate: 2016-11-5 18:04:19\ntags: javascript\n---\n\n## 第一章 加载和执行\n\n### 减少Javascript加载对性能的影响\n\n- &lt;/body>闭合标签之前，将所有&lt;javascript>标签放到页面底部。这能确保在脚本执行前页面已经完成了渲染\n- 合并脚本，减少&lt;javascript>标签\n- 使用&lt;javascript>标签的defer属性\n```javascript\n    <script type='text/javascript' src='file1.js' defer></script>\n```\n\n<!--more-->\n\n- 利用动态创建的&lt;javascript>元素来下载并执行代码\n```javascript\n    var script = document.createElemnet('script');\n    script.type = 'text/javascript';\n    script.onload = function() {\n        alert('Script loaded!');\n    }\n    script.src = 'file1.js';\n    document.getElementByTagName('head')[0].appendChild(script);\n```\n- 使用XHR对象下载Javascript代码并注入页面中\n```javascript\n    var xhr = new XMLHttpRequest();\n    xhr.open('get', 'file1.js', true);\n    xhr.onreadystatechange = function() {\n        if(xhr.readyState == 4) {\n            if(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n                var script = document.createElemnet('script');\n                script.type = 'text/javascript';\n                script.text = xhr.responseText;\n                document.body.appendChild(script);\n            }\n        }\n    }\n```\n\n### 几种类库加载js的方式\n- YUI3\n```javascript\n    <script type='text/javascript' src='http://yui.yahooapis.com/combo?3.0.0/build/yui/yui-min.js'></script>\n    <script type='text/javascript'>\n        YUI().use('dom', function(Y) {\n            Y.DOM.addClass(document.body, 'loaded');\n        })\n    </script>\n```\n- LazyLoad\n```javascript\n    <script type='text/javascript' src='lazyload-min.js'></script>\n    <script type='text/javascript'>\n        LazyLoad.js('the-rest.js', function() {\n            Applicationn.init();\n        })\n    </script>\n```\n- LABjs\n```javascript\n    <script type='text/javascript' src='lab.js'></script>\n    <script type='text/javascript'> \n        $LAB.script('first-file.js')\n            .wait()\n            .script('the-rest.js')\n            .wait(function() {\n                Applicationn.init();\n            })\n```\n\n## 第二章 数据存取\n\n在Javascript中，数据存储的位置会对代码整体性能产成重大影响。数据存储共有4中方式：字面量、变量、数组项、对象成员。它们有着各自的性能特点。\n\n\n- 访问字面量和局部变量的速度最快，相反，访问数组元素和对象成员相对较慢。\n- 由于局部变量存在于作用域链的起始位置，因此访问局部变量比访问跨作用域变量更快。变量在作用域中的位置越深，访问所需时间就越长。由于全局变量总处在作用域的最末端，因此访问速度时最慢的。\n- 避免使用with语句。\n- 嵌套的对象成员会明显影响性能，尽量少用。\n- 属性或方法在原型链中的位置越深，访问它的速度也越慢。\n- 通常来说，你可以通过把常用的对象成员、数组元素、跨域变量保存在局部变量中来改善Javascript性能，因为局部变量访问速度更快。\n\n## 第三章 DOM编程\n\n访问和操作DOM时现在Web应用的重要部分。但每次穿越链接ECMAScript和DOM都会有性能消耗，为了减少DOM编程带来的消耗，请记住以下几点：\n\n- 最小化DOM访问次数，尽可能在Javascript端处理。\n- 如果需要多次访问某个DOM节点，请使用局部变量存储它的引用。\n- 小心处理HTML集合，把集合的长度缓存到一个变量中，并在迭代中使用它。如果需要经常操作集合，建议把它靠背到一个数组中。\n- 如果可能的话，使用速度更快的API，比如querySelecetAll()和firstElementChild。\n- 要留意重排和重绘，批量修改样式时，离线操作DOM树，使用缓存，并减少布局信息的次数。\n- 动画中使用绝对定位，使用拖放代理。\n- 使用事件委托来减少事件处理器的数量。","slug":"High-Performance-Javascript","published":1,"updated":"2016-11-21T02:37:41.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxg1t3100050cny1ah67hcj","content":"<h2 id=\"第一章-加载和执行\"><a href=\"#第一章-加载和执行\" class=\"headerlink\" title=\"第一章 加载和执行\"></a>第一章 加载和执行</h2><h3 id=\"减少Javascript加载对性能的影响\"><a href=\"#减少Javascript加载对性能的影响\" class=\"headerlink\" title=\"减少Javascript加载对性能的影响\"></a>减少Javascript加载对性能的影响</h3><ul>\n<li>&lt;/body&gt;闭合标签之前，将所有&lt;javascript&gt;标签放到页面底部。这能确保在脚本执行前页面已经完成了渲染</li>\n<li>合并脚本，减少&lt;javascript&gt;标签</li>\n<li>使用&lt;javascript&gt;标签的defer属性<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'file1.js'</span> defer&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>利用动态创建的&lt;javascript&gt;元素来下载并执行代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElemnet(<span class=\"string\">'script'</span>);</div><div class=\"line\">script.type = <span class=\"string\">'text/javascript'</span>;</div><div class=\"line\">script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'Script loaded!'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">script.src = <span class=\"string\">'file1.js'</span>;</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(script);</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用XHR对象下载Javascript代码并注入页面中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">xhr.open(<span class=\"string\">'get'</span>, <span class=\"string\">'file1.js'</span>, <span class=\"literal\">true</span>);</div><div class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(xhr.readyState == <span class=\"number\">4</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span> || xhr.status === <span class=\"number\">304</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElemnet(<span class=\"string\">'script'</span>);</div><div class=\"line\">            script.type = <span class=\"string\">'text/javascript'</span>;</div><div class=\"line\">            script.text = xhr.responseText;</div><div class=\"line\">            <span class=\"built_in\">document</span>.body.appendChild(script);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"几种类库加载js的方式\"><a href=\"#几种类库加载js的方式\" class=\"headerlink\" title=\"几种类库加载js的方式\"></a>几种类库加载js的方式</h3><ul>\n<li><p>YUI3</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'http://yui.yahooapis.com/combo?3.0.0/build/yui/yui-min.js'</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt;</div><div class=\"line\">    YUI().use(<span class=\"string\">'dom'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Y</span>) </span>&#123;</div><div class=\"line\">        Y.DOM.addClass(<span class=\"built_in\">document</span>.body, <span class=\"string\">'loaded'</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>LazyLoad</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'lazyload-min.js'</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt;</div><div class=\"line\">    LazyLoad.js(<span class=\"string\">'the-rest.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        Applicationn.init();</div><div class=\"line\">    &#125;)</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>LABjs</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'lab.js'</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt; </div><div class=\"line\">    $LAB.script(<span class=\"string\">'first-file.js'</span>)</div><div class=\"line\">        .wait()</div><div class=\"line\">        .script(<span class=\"string\">'the-rest.js'</span>)</div><div class=\"line\">        .wait(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            Applicationn.init();</div><div class=\"line\">        &#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"第二章-数据存取\"><a href=\"#第二章-数据存取\" class=\"headerlink\" title=\"第二章 数据存取\"></a>第二章 数据存取</h2><p>在Javascript中，数据存储的位置会对代码整体性能产成重大影响。数据存储共有4中方式：字面量、变量、数组项、对象成员。它们有着各自的性能特点。</p>\n<ul>\n<li>访问字面量和局部变量的速度最快，相反，访问数组元素和对象成员相对较慢。</li>\n<li>由于局部变量存在于作用域链的起始位置，因此访问局部变量比访问跨作用域变量更快。变量在作用域中的位置越深，访问所需时间就越长。由于全局变量总处在作用域的最末端，因此访问速度时最慢的。</li>\n<li>避免使用with语句。</li>\n<li>嵌套的对象成员会明显影响性能，尽量少用。</li>\n<li>属性或方法在原型链中的位置越深，访问它的速度也越慢。</li>\n<li>通常来说，你可以通过把常用的对象成员、数组元素、跨域变量保存在局部变量中来改善Javascript性能，因为局部变量访问速度更快。</li>\n</ul>\n<h2 id=\"第三章-DOM编程\"><a href=\"#第三章-DOM编程\" class=\"headerlink\" title=\"第三章 DOM编程\"></a>第三章 DOM编程</h2><p>访问和操作DOM时现在Web应用的重要部分。但每次穿越链接ECMAScript和DOM都会有性能消耗，为了减少DOM编程带来的消耗，请记住以下几点：</p>\n<ul>\n<li>最小化DOM访问次数，尽可能在Javascript端处理。</li>\n<li>如果需要多次访问某个DOM节点，请使用局部变量存储它的引用。</li>\n<li>小心处理HTML集合，把集合的长度缓存到一个变量中，并在迭代中使用它。如果需要经常操作集合，建议把它靠背到一个数组中。</li>\n<li>如果可能的话，使用速度更快的API，比如querySelecetAll()和firstElementChild。</li>\n<li>要留意重排和重绘，批量修改样式时，离线操作DOM树，使用缓存，并减少布局信息的次数。</li>\n<li>动画中使用绝对定位，使用拖放代理。</li>\n<li>使用事件委托来减少事件处理器的数量。</li>\n</ul>\n","excerpt":"<h2 id=\"第一章-加载和执行\"><a href=\"#第一章-加载和执行\" class=\"headerlink\" title=\"第一章 加载和执行\"></a>第一章 加载和执行</h2><h3 id=\"减少Javascript加载对性能的影响\"><a href=\"#减少Javascript加载对性能的影响\" class=\"headerlink\" title=\"减少Javascript加载对性能的影响\"></a>减少Javascript加载对性能的影响</h3><ul>\n<li>&lt;/body&gt;闭合标签之前，将所有&lt;javascript&gt;标签放到页面底部。这能确保在脚本执行前页面已经完成了渲染</li>\n<li>合并脚本，减少&lt;javascript&gt;标签</li>\n<li>使用&lt;javascript&gt;标签的defer属性<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'file1.js'</span> defer&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<ul>\n<li><p>利用动态创建的&lt;javascript&gt;元素来下载并执行代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElemnet(<span class=\"string\">'script'</span>);</div><div class=\"line\">script.type = <span class=\"string\">'text/javascript'</span>;</div><div class=\"line\">script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'Script loaded!'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">script.src = <span class=\"string\">'file1.js'</span>;</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(script);</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用XHR对象下载Javascript代码并注入页面中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">xhr.open(<span class=\"string\">'get'</span>, <span class=\"string\">'file1.js'</span>, <span class=\"literal\">true</span>);</div><div class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(xhr.readyState == <span class=\"number\">4</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span> || xhr.status === <span class=\"number\">304</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElemnet(<span class=\"string\">'script'</span>);</div><div class=\"line\">            script.type = <span class=\"string\">'text/javascript'</span>;</div><div class=\"line\">            script.text = xhr.responseText;</div><div class=\"line\">            <span class=\"built_in\">document</span>.body.appendChild(script);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"几种类库加载js的方式\"><a href=\"#几种类库加载js的方式\" class=\"headerlink\" title=\"几种类库加载js的方式\"></a>几种类库加载js的方式</h3><ul>\n<li><p>YUI3</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'http://yui.yahooapis.com/combo?3.0.0/build/yui/yui-min.js'</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt;</div><div class=\"line\">    YUI().use(<span class=\"string\">'dom'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Y</span>) </span>&#123;</div><div class=\"line\">        Y.DOM.addClass(<span class=\"built_in\">document</span>.body, <span class=\"string\">'loaded'</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>LazyLoad</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'lazyload-min.js'</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt;</div><div class=\"line\">    LazyLoad.js(<span class=\"string\">'the-rest.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        Applicationn.init();</div><div class=\"line\">    &#125;)</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>LABjs</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'lab.js'</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt; </div><div class=\"line\">    $LAB.script(<span class=\"string\">'first-file.js'</span>)</div><div class=\"line\">        .wait()</div><div class=\"line\">        .script(<span class=\"string\">'the-rest.js'</span>)</div><div class=\"line\">        .wait(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            Applicationn.init();</div><div class=\"line\">        &#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"第二章-数据存取\"><a href=\"#第二章-数据存取\" class=\"headerlink\" title=\"第二章 数据存取\"></a>第二章 数据存取</h2><p>在Javascript中，数据存储的位置会对代码整体性能产成重大影响。数据存储共有4中方式：字面量、变量、数组项、对象成员。它们有着各自的性能特点。</p>\n<ul>\n<li>访问字面量和局部变量的速度最快，相反，访问数组元素和对象成员相对较慢。</li>\n<li>由于局部变量存在于作用域链的起始位置，因此访问局部变量比访问跨作用域变量更快。变量在作用域中的位置越深，访问所需时间就越长。由于全局变量总处在作用域的最末端，因此访问速度时最慢的。</li>\n<li>避免使用with语句。</li>\n<li>嵌套的对象成员会明显影响性能，尽量少用。</li>\n<li>属性或方法在原型链中的位置越深，访问它的速度也越慢。</li>\n<li>通常来说，你可以通过把常用的对象成员、数组元素、跨域变量保存在局部变量中来改善Javascript性能，因为局部变量访问速度更快。</li>\n</ul>\n<h2 id=\"第三章-DOM编程\"><a href=\"#第三章-DOM编程\" class=\"headerlink\" title=\"第三章 DOM编程\"></a>第三章 DOM编程</h2><p>访问和操作DOM时现在Web应用的重要部分。但每次穿越链接ECMAScript和DOM都会有性能消耗，为了减少DOM编程带来的消耗，请记住以下几点：</p>\n<ul>\n<li>最小化DOM访问次数，尽可能在Javascript端处理。</li>\n<li>如果需要多次访问某个DOM节点，请使用局部变量存储它的引用。</li>\n<li>小心处理HTML集合，把集合的长度缓存到一个变量中，并在迭代中使用它。如果需要经常操作集合，建议把它靠背到一个数组中。</li>\n<li>如果可能的话，使用速度更快的API，比如querySelecetAll()和firstElementChild。</li>\n<li>要留意重排和重绘，批量修改样式时，离线操作DOM树，使用缓存，并减少布局信息的次数。</li>\n<li>动画中使用绝对定位，使用拖放代理。</li>\n<li>使用事件委托来减少事件处理器的数量。</li>\n</ul>"},{"title":"锋利的jQeury 第四章-笔记","date":"2016-09-05T10:04:19.000Z","_content":"\n## 第四章 jQuery中的事件和动画\n\n- window.onload方法，相当于`jQuery`中的$(window).load(function(){})方法。都是等文档中的所有元素加载完成时调用，包括关联css文件和javascript文件。\n- $(document).ready(function() {})则不会等待关联文件下载完，在DOM准备好之后就会调用。\n- $(window).load(function(){})可以调用多次，都会执行，而window.onload只会调用最后一次赋予的函数。\n- $(document).ready(function() {})可以简写为$(function() {});\n\n<!--more-->\n\n### 事件绑定 \n- bind(type [, data], fn);第1个参数是事件类型，包括focus、load、click、dbclik等。，第2个参数可选，作为event.data传递，第3个参数是回调函数。示例：\n```javascript\n$(function(){\n    $('#panel h5.head').bind('click', function(e) {\n        $(this).next().show();\n    })\n})\n```\n- bind函数可以级联，如\n```javascript\n$('#panel h5.head').bind('mouseover', function(e) {\n    $(this).next().show();\n}).bind('mouseout', function(e) {\n    $(this).next().hide();\n})\n```\n- bind可以简写，如\n```javascript\n$('#panel h5.head').click(function(e) {\n    $(this).next().toggle();\n})\n```\n- 合成事件\n\n    `jQuery`有两个合成事件，hover()和toggle(),都有两个回调函数作为参数，可以看成是语法糖。hover表示移入移出两个事件，toggle表示前后两次点击事件，如\n    ```javascript\n    $('#panel h5.head').hover(function() {\n        $(this).next().show(); //划过时显示下一个元素\n    }, function() {\n        $(this).next().hide(); //划出隐藏下一个元素\n    })\n    ```\n    ```javascript\n    $('#panel h5.head').toggle(function() {\n        $(this).next().show(); //点击时显示下一个元素\n    }, function() {\n        $(this).next().hide(); //再次点击时隐藏下一个元素\n    })\n    ```\n- 事件对象的属性\n    - event.type 事件类型，字符串格式，如'click', 'dbclick', 'load'等。\n    - event.preventDefault()阻止默认行为，可以用return false代替。\n    - event.stopProgagation()组织事件冒泡，可以用return false代替。\n    - event.target 触发事件的元素。\n    - event.pageX event.pageY,相对于页面的x，y坐标。\n    - event.which 不同事件含义不同，鼠标事件表示那个键，键盘事件表示键值。\n    - event.metaKey ctl键是否按下。\n- 移除事件 unbind([type],[data]) \n    - 如果没有参数，表示删除所有事件。\n    - 如果只提供type，表示移除所有type对应的事件回调。\n    - 如果传递了2个参数，表示对应的处理函数会被删除。\n- 单次事件 one(type, [data], fn);执行一次后，事件回被移除。\n- 事件模拟\n    - 原生事件 $('#btn').trigger('click')或者$('#btn').click();\n    - 自定义事件\n    ```javascript\n    $('#btn').bind('myClick', function(){\n        $('#test').append('&lt;p>我的自定义事件&lt;/p>')\n    });\n\n    $('#btn').trigger('myClick'); //触发事件。\n    ```    \n    - 传递数据\n    ```javascript\n    $('#btn').bind('myClick', function(event, msg1, msg2){\n        $('#test').append('&lt;p>我的自定义事件&lt;/p>')\n    });\n\n    $('#btn').trigger('myClick'. ['参数1'，'参数2']); //触发事件。\n    ```   \n    - 执行默认操作 triggerHandler，例如，只触发focus事件，但是不获取焦点（浏览器默认行为）\n    ```javascript\n    $('input').triggerHandler('focus');\n    ```\n- 事件命名空间\n    - 添加命名空间\n    ```javascript\n    $('#div').bind('mouseover.plugin', function() {\n\n    })\n    $('#btn').click(function() {\n        $('#div').unbind('.plugin'); //移除上面的事件。\n    })\n    ```\n    \n## 动画\n - show(duration) 显示元素，duration不为0时，表示显示动画。将元素display属性从’none‘设置为原来的值\n - hide(duration) 隐藏元素，duration不为0时，表示隐藏动画。将元素display属性设置为'none'\n - fadeIn(duration) 与show一样，但是不改变display样式。\n - fadeOut(duration) 与hide一样，但是不改变display样式。\n - slideUp(duration)和slideDown(duration)，只改变高度。\n - animate(param, speed, callback)\n    - param 包含样式属性值，如{left: '400px', top: '400px'}，可累加或累减，如{left: '+=400px'}\n    - speed 动画时间\n    - callback 动画完成回调\n    -累加动画\n    ```javascript\n    $('#panel').animate({left:'400px', height:'200px', opacity:1}, 3000)\n        .animate({top:'200px', width:'200px'}, 3000， function() {\n            consle.log('animate done');\n        })\n        .fadeOut('slow');\n    ```\n    - 停止动画stop([clearQueue], [gotoEnd])\n    - 判断是否处于动画状态 $(element).is(':animated')\n    - 延迟动画delay(duration),延迟一段时间开始动画，$(this).animate({left:'400px'}).delay(200);\n    - 其他动画方法\n        - toggle(speed, [callback]) 显示/隐藏元素\n        - slideToggle(speed, [easing], [callback])通过改变高度来显示/隐藏元素\n        - fadeTo(speed, opacity, [callback]) 通过改变不透明度来显示/隐藏元素\n        - fadeToggle(speed, [easing], [callback]) 通过不透明度来显示/隐藏元素。\n","source":"_posts/chapter-4.md","raw":"---\ntitle: 锋利的jQeury 第四章-笔记 \ndate: 2016-9-5 18:04:19\ntags: jQuery\n---\n\n## 第四章 jQuery中的事件和动画\n\n- window.onload方法，相当于`jQuery`中的$(window).load(function(){})方法。都是等文档中的所有元素加载完成时调用，包括关联css文件和javascript文件。\n- $(document).ready(function() {})则不会等待关联文件下载完，在DOM准备好之后就会调用。\n- $(window).load(function(){})可以调用多次，都会执行，而window.onload只会调用最后一次赋予的函数。\n- $(document).ready(function() {})可以简写为$(function() {});\n\n<!--more-->\n\n### 事件绑定 \n- bind(type [, data], fn);第1个参数是事件类型，包括focus、load、click、dbclik等。，第2个参数可选，作为event.data传递，第3个参数是回调函数。示例：\n```javascript\n$(function(){\n    $('#panel h5.head').bind('click', function(e) {\n        $(this).next().show();\n    })\n})\n```\n- bind函数可以级联，如\n```javascript\n$('#panel h5.head').bind('mouseover', function(e) {\n    $(this).next().show();\n}).bind('mouseout', function(e) {\n    $(this).next().hide();\n})\n```\n- bind可以简写，如\n```javascript\n$('#panel h5.head').click(function(e) {\n    $(this).next().toggle();\n})\n```\n- 合成事件\n\n    `jQuery`有两个合成事件，hover()和toggle(),都有两个回调函数作为参数，可以看成是语法糖。hover表示移入移出两个事件，toggle表示前后两次点击事件，如\n    ```javascript\n    $('#panel h5.head').hover(function() {\n        $(this).next().show(); //划过时显示下一个元素\n    }, function() {\n        $(this).next().hide(); //划出隐藏下一个元素\n    })\n    ```\n    ```javascript\n    $('#panel h5.head').toggle(function() {\n        $(this).next().show(); //点击时显示下一个元素\n    }, function() {\n        $(this).next().hide(); //再次点击时隐藏下一个元素\n    })\n    ```\n- 事件对象的属性\n    - event.type 事件类型，字符串格式，如'click', 'dbclick', 'load'等。\n    - event.preventDefault()阻止默认行为，可以用return false代替。\n    - event.stopProgagation()组织事件冒泡，可以用return false代替。\n    - event.target 触发事件的元素。\n    - event.pageX event.pageY,相对于页面的x，y坐标。\n    - event.which 不同事件含义不同，鼠标事件表示那个键，键盘事件表示键值。\n    - event.metaKey ctl键是否按下。\n- 移除事件 unbind([type],[data]) \n    - 如果没有参数，表示删除所有事件。\n    - 如果只提供type，表示移除所有type对应的事件回调。\n    - 如果传递了2个参数，表示对应的处理函数会被删除。\n- 单次事件 one(type, [data], fn);执行一次后，事件回被移除。\n- 事件模拟\n    - 原生事件 $('#btn').trigger('click')或者$('#btn').click();\n    - 自定义事件\n    ```javascript\n    $('#btn').bind('myClick', function(){\n        $('#test').append('&lt;p>我的自定义事件&lt;/p>')\n    });\n\n    $('#btn').trigger('myClick'); //触发事件。\n    ```    \n    - 传递数据\n    ```javascript\n    $('#btn').bind('myClick', function(event, msg1, msg2){\n        $('#test').append('&lt;p>我的自定义事件&lt;/p>')\n    });\n\n    $('#btn').trigger('myClick'. ['参数1'，'参数2']); //触发事件。\n    ```   \n    - 执行默认操作 triggerHandler，例如，只触发focus事件，但是不获取焦点（浏览器默认行为）\n    ```javascript\n    $('input').triggerHandler('focus');\n    ```\n- 事件命名空间\n    - 添加命名空间\n    ```javascript\n    $('#div').bind('mouseover.plugin', function() {\n\n    })\n    $('#btn').click(function() {\n        $('#div').unbind('.plugin'); //移除上面的事件。\n    })\n    ```\n    \n## 动画\n - show(duration) 显示元素，duration不为0时，表示显示动画。将元素display属性从’none‘设置为原来的值\n - hide(duration) 隐藏元素，duration不为0时，表示隐藏动画。将元素display属性设置为'none'\n - fadeIn(duration) 与show一样，但是不改变display样式。\n - fadeOut(duration) 与hide一样，但是不改变display样式。\n - slideUp(duration)和slideDown(duration)，只改变高度。\n - animate(param, speed, callback)\n    - param 包含样式属性值，如{left: '400px', top: '400px'}，可累加或累减，如{left: '+=400px'}\n    - speed 动画时间\n    - callback 动画完成回调\n    -累加动画\n    ```javascript\n    $('#panel').animate({left:'400px', height:'200px', opacity:1}, 3000)\n        .animate({top:'200px', width:'200px'}, 3000， function() {\n            consle.log('animate done');\n        })\n        .fadeOut('slow');\n    ```\n    - 停止动画stop([clearQueue], [gotoEnd])\n    - 判断是否处于动画状态 $(element).is(':animated')\n    - 延迟动画delay(duration),延迟一段时间开始动画，$(this).animate({left:'400px'}).delay(200);\n    - 其他动画方法\n        - toggle(speed, [callback]) 显示/隐藏元素\n        - slideToggle(speed, [easing], [callback])通过改变高度来显示/隐藏元素\n        - fadeTo(speed, opacity, [callback]) 通过改变不透明度来显示/隐藏元素\n        - fadeToggle(speed, [easing], [callback]) 通过不透明度来显示/隐藏元素。\n","slug":"chapter-4","published":1,"updated":"2016-11-21T02:37:41.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxg1t3h00070cnyjbz2dy8n","content":"<h2 id=\"第四章-jQuery中的事件和动画\"><a href=\"#第四章-jQuery中的事件和动画\" class=\"headerlink\" title=\"第四章 jQuery中的事件和动画\"></a>第四章 jQuery中的事件和动画</h2><ul>\n<li>window.onload方法，相当于<code>jQuery</code>中的$(window).load(function(){})方法。都是等文档中的所有元素加载完成时调用，包括关联css文件和javascript文件。</li>\n<li>$(document).ready(function() {})则不会等待关联文件下载完，在DOM准备好之后就会调用。</li>\n<li>$(window).load(function(){})可以调用多次，都会执行，而window.onload只会调用最后一次赋予的函数。</li>\n<li>$(document).ready(function() {})可以简写为$(function() {});</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h3><ul>\n<li><p>bind(type [, data], fn);第1个参数是事件类型，包括focus、load、click、dbclik等。，第2个参数可选，作为event.data传递，第3个参数是回调函数。示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#panel h5.head'</span>).bind(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        $(<span class=\"keyword\">this</span>).next().show();</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>bind函数可以级联，如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).bind(<span class=\"string\">'mouseover'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().show();</div><div class=\"line\">&#125;).bind(<span class=\"string\">'mouseout'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>bind可以简写，如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().toggle();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>合成事件</p>\n<p>  <code>jQuery</code>有两个合成事件，hover()和toggle(),都有两个回调函数作为参数，可以看成是语法糖。hover表示移入移出两个事件，toggle表示前后两次点击事件，如</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).hover(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().show(); <span class=\"comment\">//划过时显示下一个元素</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide(); <span class=\"comment\">//划出隐藏下一个元素</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).toggle(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().show(); <span class=\"comment\">//点击时显示下一个元素</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide(); <span class=\"comment\">//再次点击时隐藏下一个元素</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>事件对象的属性</p>\n<ul>\n<li>event.type 事件类型，字符串格式，如’click’, ‘dbclick’, ‘load’等。</li>\n<li>event.preventDefault()阻止默认行为，可以用return false代替。</li>\n<li>event.stopProgagation()组织事件冒泡，可以用return false代替。</li>\n<li>event.target 触发事件的元素。</li>\n<li>event.pageX event.pageY,相对于页面的x，y坐标。</li>\n<li>event.which 不同事件含义不同，鼠标事件表示那个键，键盘事件表示键值。</li>\n<li>event.metaKey ctl键是否按下。</li>\n</ul>\n</li>\n<li>移除事件 unbind([type],[data]) <ul>\n<li>如果没有参数，表示删除所有事件。</li>\n<li>如果只提供type，表示移除所有type对应的事件回调。</li>\n<li>如果传递了2个参数，表示对应的处理函数会被删除。</li>\n</ul>\n</li>\n<li>单次事件 one(type, [data], fn);执行一次后，事件回被移除。</li>\n<li><p>事件模拟</p>\n<ul>\n<li>原生事件 $(‘#btn’).trigger(‘click’)或者$(‘#btn’).click();</li>\n<li>自定义事件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#btn'</span>).bind(<span class=\"string\">'myClick'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#test'</span>).append(<span class=\"string\">'&amp;lt;p&gt;我的自定义事件&amp;lt;/p&gt;'</span>)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).trigger(<span class=\"string\">'myClick'</span>); <span class=\"comment\">//触发事件。</span></div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">`    </span></div><div class=\"line\">- 传递数据</div><div class=\"line\">`<span class=\"string\">``</span>javascript</div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).bind(<span class=\"string\">'myClick'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event, msg1, msg2</span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#test'</span>).append(<span class=\"string\">'&amp;lt;p&gt;我的自定义事件&amp;lt;/p&gt;'</span>)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).trigger(<span class=\"string\">'myClick'</span>. [<span class=\"string\">'参数1'</span>，<span class=\"string\">'参数2'</span>]); <span class=\"comment\">//触发事件。</span></div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">`   </span></div><div class=\"line\">- 执行默认操作 triggerHandler，例如，只触发focus事件，但是不获取焦点（浏览器默认行为）</div><div class=\"line\">`<span class=\"string\">``</span>javascript</div><div class=\"line\">$(<span class=\"string\">'input'</span>).triggerHandler(<span class=\"string\">'focus'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>事件命名空间</p>\n<ul>\n<li>添加命名空间<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#div'</span>).bind(<span class=\"string\">'mouseover.plugin'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;)</div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#div'</span>).unbind(<span class=\"string\">'.plugin'</span>); <span class=\"comment\">//移除上面的事件。</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h2><ul>\n<li>show(duration) 显示元素，duration不为0时，表示显示动画。将元素display属性从’none‘设置为原来的值</li>\n<li>hide(duration) 隐藏元素，duration不为0时，表示隐藏动画。将元素display属性设置为’none’</li>\n<li>fadeIn(duration) 与show一样，但是不改变display样式。</li>\n<li>fadeOut(duration) 与hide一样，但是不改变display样式。</li>\n<li>slideUp(duration)和slideDown(duration)，只改变高度。</li>\n<li><p>animate(param, speed, callback)</p>\n<ul>\n<li>param 包含样式属性值，如{left: ‘400px’, top: ‘400px’}，可累加或累减，如{left: ‘+=400px’}</li>\n<li>speed 动画时间</li>\n<li><p>callback 动画完成回调<br>-累加动画</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel'</span>).animate(&#123;left:<span class=\"string\">'400px'</span>, height:<span class=\"string\">'200px'</span>, opacity:<span class=\"number\">1</span>&#125;, <span class=\"number\">3000</span>)</div><div class=\"line\">    .animate(&#123;top:<span class=\"string\">'200px'</span>, width:<span class=\"string\">'200px'</span>&#125;, <span class=\"number\">3000</span>， <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        consle.log(<span class=\"string\">'animate done'</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .fadeOut(<span class=\"string\">'slow'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>停止动画stop([clearQueue], [gotoEnd])</p>\n</li>\n<li>判断是否处于动画状态 $(element).is(‘:animated’)</li>\n<li>延迟动画delay(duration),延迟一段时间开始动画，$(this).animate({left:’400px’}).delay(200);</li>\n<li>其他动画方法<ul>\n<li>toggle(speed, [callback]) 显示/隐藏元素</li>\n<li>slideToggle(speed, [easing], [callback])通过改变高度来显示/隐藏元素</li>\n<li>fadeTo(speed, opacity, [callback]) 通过改变不透明度来显示/隐藏元素</li>\n<li>fadeToggle(speed, [easing], [callback]) 通过不透明度来显示/隐藏元素。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","excerpt":"<h2 id=\"第四章-jQuery中的事件和动画\"><a href=\"#第四章-jQuery中的事件和动画\" class=\"headerlink\" title=\"第四章 jQuery中的事件和动画\"></a>第四章 jQuery中的事件和动画</h2><ul>\n<li>window.onload方法，相当于<code>jQuery</code>中的$(window).load(function(){})方法。都是等文档中的所有元素加载完成时调用，包括关联css文件和javascript文件。</li>\n<li>$(document).ready(function() {})则不会等待关联文件下载完，在DOM准备好之后就会调用。</li>\n<li>$(window).load(function(){})可以调用多次，都会执行，而window.onload只会调用最后一次赋予的函数。</li>\n<li>$(document).ready(function() {})可以简写为$(function() {});</li>\n</ul>","more":"<h3 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h3><ul>\n<li><p>bind(type [, data], fn);第1个参数是事件类型，包括focus、load、click、dbclik等。，第2个参数可选，作为event.data传递，第3个参数是回调函数。示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#panel h5.head'</span>).bind(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        $(<span class=\"keyword\">this</span>).next().show();</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>bind函数可以级联，如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).bind(<span class=\"string\">'mouseover'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().show();</div><div class=\"line\">&#125;).bind(<span class=\"string\">'mouseout'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>bind可以简写，如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().toggle();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>合成事件</p>\n<p>  <code>jQuery</code>有两个合成事件，hover()和toggle(),都有两个回调函数作为参数，可以看成是语法糖。hover表示移入移出两个事件，toggle表示前后两次点击事件，如</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).hover(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().show(); <span class=\"comment\">//划过时显示下一个元素</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide(); <span class=\"comment\">//划出隐藏下一个元素</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).toggle(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().show(); <span class=\"comment\">//点击时显示下一个元素</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide(); <span class=\"comment\">//再次点击时隐藏下一个元素</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>事件对象的属性</p>\n<ul>\n<li>event.type 事件类型，字符串格式，如’click’, ‘dbclick’, ‘load’等。</li>\n<li>event.preventDefault()阻止默认行为，可以用return false代替。</li>\n<li>event.stopProgagation()组织事件冒泡，可以用return false代替。</li>\n<li>event.target 触发事件的元素。</li>\n<li>event.pageX event.pageY,相对于页面的x，y坐标。</li>\n<li>event.which 不同事件含义不同，鼠标事件表示那个键，键盘事件表示键值。</li>\n<li>event.metaKey ctl键是否按下。</li>\n</ul>\n</li>\n<li>移除事件 unbind([type],[data]) <ul>\n<li>如果没有参数，表示删除所有事件。</li>\n<li>如果只提供type，表示移除所有type对应的事件回调。</li>\n<li>如果传递了2个参数，表示对应的处理函数会被删除。</li>\n</ul>\n</li>\n<li>单次事件 one(type, [data], fn);执行一次后，事件回被移除。</li>\n<li><p>事件模拟</p>\n<ul>\n<li>原生事件 $(‘#btn’).trigger(‘click’)或者$(‘#btn’).click();</li>\n<li>自定义事件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#btn'</span>).bind(<span class=\"string\">'myClick'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#test'</span>).append(<span class=\"string\">'&amp;lt;p&gt;我的自定义事件&amp;lt;/p&gt;'</span>)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).trigger(<span class=\"string\">'myClick'</span>); <span class=\"comment\">//触发事件。</span></div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">`    </div><div class=\"line\">- 传递数据</div><div class=\"line\">`</span><span class=\"string\">``</span>javascript</div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).bind(<span class=\"string\">'myClick'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event, msg1, msg2</span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#test'</span>).append(<span class=\"string\">'&amp;lt;p&gt;我的自定义事件&amp;lt;/p&gt;'</span>)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).trigger(<span class=\"string\">'myClick'</span>. [<span class=\"string\">'参数1'</span>，<span class=\"string\">'参数2'</span>]); <span class=\"comment\">//触发事件。</span></div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">`   </div><div class=\"line\">- 执行默认操作 triggerHandler，例如，只触发focus事件，但是不获取焦点（浏览器默认行为）</div><div class=\"line\">`</span><span class=\"string\">``</span>javascript</div><div class=\"line\">$(<span class=\"string\">'input'</span>).triggerHandler(<span class=\"string\">'focus'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>事件命名空间</p>\n<ul>\n<li>添加命名空间<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#div'</span>).bind(<span class=\"string\">'mouseover.plugin'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;)</div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#div'</span>).unbind(<span class=\"string\">'.plugin'</span>); <span class=\"comment\">//移除上面的事件。</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h2><ul>\n<li>show(duration) 显示元素，duration不为0时，表示显示动画。将元素display属性从’none‘设置为原来的值</li>\n<li>hide(duration) 隐藏元素，duration不为0时，表示隐藏动画。将元素display属性设置为’none’</li>\n<li>fadeIn(duration) 与show一样，但是不改变display样式。</li>\n<li>fadeOut(duration) 与hide一样，但是不改变display样式。</li>\n<li>slideUp(duration)和slideDown(duration)，只改变高度。</li>\n<li><p>animate(param, speed, callback)</p>\n<ul>\n<li>param 包含样式属性值，如{left: ‘400px’, top: ‘400px’}，可累加或累减，如{left: ‘+=400px’}</li>\n<li>speed 动画时间</li>\n<li><p>callback 动画完成回调<br>-累加动画</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel'</span>).animate(&#123;left:<span class=\"string\">'400px'</span>, height:<span class=\"string\">'200px'</span>, opacity:<span class=\"number\">1</span>&#125;, <span class=\"number\">3000</span>)</div><div class=\"line\">    .animate(&#123;top:<span class=\"string\">'200px'</span>, width:<span class=\"string\">'200px'</span>&#125;, <span class=\"number\">3000</span>， <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        consle.log(<span class=\"string\">'animate done'</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .fadeOut(<span class=\"string\">'slow'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>停止动画stop([clearQueue], [gotoEnd])</p>\n</li>\n<li>判断是否处于动画状态 $(element).is(‘:animated’)</li>\n<li>延迟动画delay(duration),延迟一段时间开始动画，$(this).animate({left:’400px’}).delay(200);</li>\n<li>其他动画方法<ul>\n<li>toggle(speed, [callback]) 显示/隐藏元素</li>\n<li>slideToggle(speed, [easing], [callback])通过改变高度来显示/隐藏元素</li>\n<li>fadeTo(speed, opacity, [callback]) 通过改变不透明度来显示/隐藏元素</li>\n<li>fadeToggle(speed, [easing], [callback]) 通过不透明度来显示/隐藏元素。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>"},{"title":"锋利的jQeury 第二章-笔记","date":"2016-09-02T10:04:19.000Z","_content":"\n## 第二章 jQuery选择器\n\n### 基本选择器\n\n- `#id` 匹配id,  `$('#test')`\n- `.class` 匹配类, `$('.test')`\n- `element` 匹配标签, `$('div')`\n- `*` 匹配所有元素, `$('*')`\n- `selector1, select2,...,selectN` 匹配集合，如$('div, span, p.myClass')\n\n<!--more-->\n\n### 层次选择器\n\n- `$('ancestor decendant')` 选择后代元素\n- `$('parent > child')` 选择子元素\n- `$('prev + next')` 选择紧接在`prev`后的`next`元素，如: `$('.one + div')`，选择`one`之后的下个一个`div`同辈元素\n- `$('prev ~ siblings')` 选择prev后的所有siblings元素，如`$('#two ~ div')`选择`two`之后的所有`div`同辈元素\n\n### 过滤选择器\n\n- `:first` 选取第一个元素，它只返回一个元素。 如`$('div:first')`选取第一个div元素。\n- `:last` 选取最后一个元素，它只返回一个元素。\n- `:not(selector)` 取出所有给定选择器匹配的元素，如`$('input:not(.myClass)')`,选取`class`不是`myClass`的`input`元素\n- `:even` 选取索引为偶数的元素，索引从**0**开始\n- `:odd` 选取奇数索引元素\n- `:eq(index)` 选取指定索引元素\n- `:gt(index)` 选取大于索引的元素\n- `:lt(index)` 选取小于索引的元素\n- `:header` 选取所有标题元素 如`$(':header')`，选取网页中所有`&lt;h1>,&lt;h2>,&lt;h3>;....`\n- `:animated` 选取所有正在执行动画的元素 如：`$('div:animated')`选取正在执行动画的所有`div`元素\n- `:focus` 选取当前获取焦点的元素 如`$(':focus')`，获取当前获取焦点的元素\n\n### 内容过滤选择器\n\n- `:contains(text)` 选取文本内容含有text的元素, 如`$('div:contains(\"我\")')`,选取文本含有`我`的`div`元素\n- `:empty` 选取不包含子元素或者文本为空的元素, 如`$('div:empty')`选取不包含子元素的`div`元素\n- `:has(selector)` 选取含有选择器的所匹配的元素的元素，如`$('div:has(p)')`，选取含有`p`元素的`div`元素\n- `:parent` 选取含有子元素或文本的元素 如`$('div:parent')`,选取拥有子元素的`div`元素\n\n### 可见性过滤器\n\n- `:hidden` 选取所有不可见元素, 如`$(':hidden')`, 选取所有不可见元素，`$('input:hidden')`选取所有不可见的input元素\n- `:visible` 选取所有可见元素\n\n### 属性过滤选择器\n\n- `[attr]` 选取拥有此属性的元素, 如`$('div[id]')`, 选取拥有属性`id`的元素\n- `[attr=val]` 选取`attr`属性为`val`的元素如, `$('div[title=test]')`选取`title`为`test`的`div`元素\n- `[attr!=val]` 选取`attr`的值不为`val`的元素\n- `[attr^=val]` 选取`attr`的值以`val`开始的元素\n- `[attr$=val]` 选取`attr`的值以`val`结束的元素\n- `[attr*=val]` 选取`attr`的值包含`val`的元素\n- `[attr|=val]` 选取`attr`的值为`val`或以`val-`开始的元素\n- `[attr~=val]` 选取`attr`的值包含`' val'`的元素（注意val前面要有空格）\n- `[attr1][attr2][attrN]` 选取同时满足几个条件的元素，如`$('div[id][title$=\"test\"]')`，选取拥有属性id，并且属性title以test结束的div元素\n\n### 子元素过滤选择器\n\n- `:nth-child(index/even/odd/equation)` 选取每个父元素下的第`index`个或者奇偶子元素\n- `:first-child` 选取每个父元素的第一个子元素，如`$('ul li:first-child')`, 选择ul的第一个li元素\n- `:last-child` 选取每个父元素的子元素\n- `:only-child` 如果父控件一个子元素，那么匹配到，否则不被匹配。`$('ul li:only-child')`返回只有一个子元素且为li的li元素\n\n### 表单对象属性过滤选择器\n\n- `:enabled` 选取所有可用元素。`$('#form1 :enabled')`,选取`id`为`form1`的表单内的所有可用元素。\n- `:disbaled` 选取所有不可用元素。\n- `:checked` 选取所有被选中元素(单选框，复选框)。`$('input:checked')`,选取所有被选中的`input`元素\n- `:selected` 选取所有被选中的选项元素（下拉列表）。`$('select option:seleted')`\n\n### 表单选择器\n\n- `:input` 选取所有`&lt;input>,&lt;textarea>,&lt;select>,&lt;button>`元素。如`$('#form1 :input')`\n- `:text` 选取所有单行文本框。\n- `:password` 选取所有密码框\n- `:radio` 选取所有单选框\n- `:submit` 选取所有提交按钮\n- `:image` 选取所有的图像按钮\n- `:reset` 选取所有的重置按钮\n- `:button` 选取所有的按钮\n- `:file` 选取所有的上川域\n- `:hidden` 选取所有不可见元素\n","source":"_posts/chapter-2.md","raw":"---\ntitle: 锋利的jQeury 第二章-笔记 \ndate: 2016-9-2 18:04:19\ntags: jQuery\n---\n\n## 第二章 jQuery选择器\n\n### 基本选择器\n\n- `#id` 匹配id,  `$('#test')`\n- `.class` 匹配类, `$('.test')`\n- `element` 匹配标签, `$('div')`\n- `*` 匹配所有元素, `$('*')`\n- `selector1, select2,...,selectN` 匹配集合，如$('div, span, p.myClass')\n\n<!--more-->\n\n### 层次选择器\n\n- `$('ancestor decendant')` 选择后代元素\n- `$('parent > child')` 选择子元素\n- `$('prev + next')` 选择紧接在`prev`后的`next`元素，如: `$('.one + div')`，选择`one`之后的下个一个`div`同辈元素\n- `$('prev ~ siblings')` 选择prev后的所有siblings元素，如`$('#two ~ div')`选择`two`之后的所有`div`同辈元素\n\n### 过滤选择器\n\n- `:first` 选取第一个元素，它只返回一个元素。 如`$('div:first')`选取第一个div元素。\n- `:last` 选取最后一个元素，它只返回一个元素。\n- `:not(selector)` 取出所有给定选择器匹配的元素，如`$('input:not(.myClass)')`,选取`class`不是`myClass`的`input`元素\n- `:even` 选取索引为偶数的元素，索引从**0**开始\n- `:odd` 选取奇数索引元素\n- `:eq(index)` 选取指定索引元素\n- `:gt(index)` 选取大于索引的元素\n- `:lt(index)` 选取小于索引的元素\n- `:header` 选取所有标题元素 如`$(':header')`，选取网页中所有`&lt;h1>,&lt;h2>,&lt;h3>;....`\n- `:animated` 选取所有正在执行动画的元素 如：`$('div:animated')`选取正在执行动画的所有`div`元素\n- `:focus` 选取当前获取焦点的元素 如`$(':focus')`，获取当前获取焦点的元素\n\n### 内容过滤选择器\n\n- `:contains(text)` 选取文本内容含有text的元素, 如`$('div:contains(\"我\")')`,选取文本含有`我`的`div`元素\n- `:empty` 选取不包含子元素或者文本为空的元素, 如`$('div:empty')`选取不包含子元素的`div`元素\n- `:has(selector)` 选取含有选择器的所匹配的元素的元素，如`$('div:has(p)')`，选取含有`p`元素的`div`元素\n- `:parent` 选取含有子元素或文本的元素 如`$('div:parent')`,选取拥有子元素的`div`元素\n\n### 可见性过滤器\n\n- `:hidden` 选取所有不可见元素, 如`$(':hidden')`, 选取所有不可见元素，`$('input:hidden')`选取所有不可见的input元素\n- `:visible` 选取所有可见元素\n\n### 属性过滤选择器\n\n- `[attr]` 选取拥有此属性的元素, 如`$('div[id]')`, 选取拥有属性`id`的元素\n- `[attr=val]` 选取`attr`属性为`val`的元素如, `$('div[title=test]')`选取`title`为`test`的`div`元素\n- `[attr!=val]` 选取`attr`的值不为`val`的元素\n- `[attr^=val]` 选取`attr`的值以`val`开始的元素\n- `[attr$=val]` 选取`attr`的值以`val`结束的元素\n- `[attr*=val]` 选取`attr`的值包含`val`的元素\n- `[attr|=val]` 选取`attr`的值为`val`或以`val-`开始的元素\n- `[attr~=val]` 选取`attr`的值包含`' val'`的元素（注意val前面要有空格）\n- `[attr1][attr2][attrN]` 选取同时满足几个条件的元素，如`$('div[id][title$=\"test\"]')`，选取拥有属性id，并且属性title以test结束的div元素\n\n### 子元素过滤选择器\n\n- `:nth-child(index/even/odd/equation)` 选取每个父元素下的第`index`个或者奇偶子元素\n- `:first-child` 选取每个父元素的第一个子元素，如`$('ul li:first-child')`, 选择ul的第一个li元素\n- `:last-child` 选取每个父元素的子元素\n- `:only-child` 如果父控件一个子元素，那么匹配到，否则不被匹配。`$('ul li:only-child')`返回只有一个子元素且为li的li元素\n\n### 表单对象属性过滤选择器\n\n- `:enabled` 选取所有可用元素。`$('#form1 :enabled')`,选取`id`为`form1`的表单内的所有可用元素。\n- `:disbaled` 选取所有不可用元素。\n- `:checked` 选取所有被选中元素(单选框，复选框)。`$('input:checked')`,选取所有被选中的`input`元素\n- `:selected` 选取所有被选中的选项元素（下拉列表）。`$('select option:seleted')`\n\n### 表单选择器\n\n- `:input` 选取所有`&lt;input>,&lt;textarea>,&lt;select>,&lt;button>`元素。如`$('#form1 :input')`\n- `:text` 选取所有单行文本框。\n- `:password` 选取所有密码框\n- `:radio` 选取所有单选框\n- `:submit` 选取所有提交按钮\n- `:image` 选取所有的图像按钮\n- `:reset` 选取所有的重置按钮\n- `:button` 选取所有的按钮\n- `:file` 选取所有的上川域\n- `:hidden` 选取所有不可见元素\n","slug":"chapter-2","published":1,"updated":"2016-11-21T02:37:41.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxg1t3h000a0cny16oibwju","content":"<h2 id=\"第二章-jQuery选择器\"><a href=\"#第二章-jQuery选择器\" class=\"headerlink\" title=\"第二章 jQuery选择器\"></a>第二章 jQuery选择器</h2><h3 id=\"基本选择器\"><a href=\"#基本选择器\" class=\"headerlink\" title=\"基本选择器\"></a>基本选择器</h3><ul>\n<li><code>#id</code> 匹配id,  <code>$(&#39;#test&#39;)</code></li>\n<li><code>.class</code> 匹配类, <code>$(&#39;.test&#39;)</code></li>\n<li><code>element</code> 匹配标签, <code>$(&#39;div&#39;)</code></li>\n<li><code>*</code> 匹配所有元素, <code>$(&#39;*&#39;)</code></li>\n<li><code>selector1, select2,...,selectN</code> 匹配集合，如$(‘div, span, p.myClass’)</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"层次选择器\"><a href=\"#层次选择器\" class=\"headerlink\" title=\"层次选择器\"></a>层次选择器</h3><ul>\n<li><code>$(&#39;ancestor decendant&#39;)</code> 选择后代元素</li>\n<li><code>$(&#39;parent &gt; child&#39;)</code> 选择子元素</li>\n<li><code>$(&#39;prev + next&#39;)</code> 选择紧接在<code>prev</code>后的<code>next</code>元素，如: <code>$(&#39;.one + div&#39;)</code>，选择<code>one</code>之后的下个一个<code>div</code>同辈元素</li>\n<li><code>$(&#39;prev ~ siblings&#39;)</code> 选择prev后的所有siblings元素，如<code>$(&#39;#two ~ div&#39;)</code>选择<code>two</code>之后的所有<code>div</code>同辈元素</li>\n</ul>\n<h3 id=\"过滤选择器\"><a href=\"#过滤选择器\" class=\"headerlink\" title=\"过滤选择器\"></a>过滤选择器</h3><ul>\n<li><code>:first</code> 选取第一个元素，它只返回一个元素。 如<code>$(&#39;div:first&#39;)</code>选取第一个div元素。</li>\n<li><code>:last</code> 选取最后一个元素，它只返回一个元素。</li>\n<li><code>:not(selector)</code> 取出所有给定选择器匹配的元素，如<code>$(&#39;input:not(.myClass)&#39;)</code>,选取<code>class</code>不是<code>myClass</code>的<code>input</code>元素</li>\n<li><code>:even</code> 选取索引为偶数的元素，索引从<strong>0</strong>开始</li>\n<li><code>:odd</code> 选取奇数索引元素</li>\n<li><code>:eq(index)</code> 选取指定索引元素</li>\n<li><code>:gt(index)</code> 选取大于索引的元素</li>\n<li><code>:lt(index)</code> 选取小于索引的元素</li>\n<li><code>:header</code> 选取所有标题元素 如<code>$(&#39;:header&#39;)</code>，选取网页中所有<code>&amp;lt;h1&gt;,&amp;lt;h2&gt;,&amp;lt;h3&gt;;....</code></li>\n<li><code>:animated</code> 选取所有正在执行动画的元素 如：<code>$(&#39;div:animated&#39;)</code>选取正在执行动画的所有<code>div</code>元素</li>\n<li><code>:focus</code> 选取当前获取焦点的元素 如<code>$(&#39;:focus&#39;)</code>，获取当前获取焦点的元素</li>\n</ul>\n<h3 id=\"内容过滤选择器\"><a href=\"#内容过滤选择器\" class=\"headerlink\" title=\"内容过滤选择器\"></a>内容过滤选择器</h3><ul>\n<li><code>:contains(text)</code> 选取文本内容含有text的元素, 如<code>$(&#39;div:contains(&quot;我&quot;)&#39;)</code>,选取文本含有<code>我</code>的<code>div</code>元素</li>\n<li><code>:empty</code> 选取不包含子元素或者文本为空的元素, 如<code>$(&#39;div:empty&#39;)</code>选取不包含子元素的<code>div</code>元素</li>\n<li><code>:has(selector)</code> 选取含有选择器的所匹配的元素的元素，如<code>$(&#39;div:has(p)&#39;)</code>，选取含有<code>p</code>元素的<code>div</code>元素</li>\n<li><code>:parent</code> 选取含有子元素或文本的元素 如<code>$(&#39;div:parent&#39;)</code>,选取拥有子元素的<code>div</code>元素</li>\n</ul>\n<h3 id=\"可见性过滤器\"><a href=\"#可见性过滤器\" class=\"headerlink\" title=\"可见性过滤器\"></a>可见性过滤器</h3><ul>\n<li><code>:hidden</code> 选取所有不可见元素, 如<code>$(&#39;:hidden&#39;)</code>, 选取所有不可见元素，<code>$(&#39;input:hidden&#39;)</code>选取所有不可见的input元素</li>\n<li><code>:visible</code> 选取所有可见元素</li>\n</ul>\n<h3 id=\"属性过滤选择器\"><a href=\"#属性过滤选择器\" class=\"headerlink\" title=\"属性过滤选择器\"></a>属性过滤选择器</h3><ul>\n<li><code>[attr]</code> 选取拥有此属性的元素, 如<code>$(&#39;div[id]&#39;)</code>, 选取拥有属性<code>id</code>的元素</li>\n<li><code>[attr=val]</code> 选取<code>attr</code>属性为<code>val</code>的元素如, <code>$(&#39;div[title=test]&#39;)</code>选取<code>title</code>为<code>test</code>的<code>div</code>元素</li>\n<li><code>[attr!=val]</code> 选取<code>attr</code>的值不为<code>val</code>的元素</li>\n<li><code>[attr^=val]</code> 选取<code>attr</code>的值以<code>val</code>开始的元素</li>\n<li><code>[attr$=val]</code> 选取<code>attr</code>的值以<code>val</code>结束的元素</li>\n<li><code>[attr*=val]</code> 选取<code>attr</code>的值包含<code>val</code>的元素</li>\n<li><code>[attr|=val]</code> 选取<code>attr</code>的值为<code>val</code>或以<code>val-</code>开始的元素</li>\n<li><code>[attr~=val]</code> 选取<code>attr</code>的值包含<code>&#39; val&#39;</code>的元素（注意val前面要有空格）</li>\n<li><code>[attr1][attr2][attrN]</code> 选取同时满足几个条件的元素，如<code>$(&#39;div[id][title$=&quot;test&quot;]&#39;)</code>，选取拥有属性id，并且属性title以test结束的div元素</li>\n</ul>\n<h3 id=\"子元素过滤选择器\"><a href=\"#子元素过滤选择器\" class=\"headerlink\" title=\"子元素过滤选择器\"></a>子元素过滤选择器</h3><ul>\n<li><code>:nth-child(index/even/odd/equation)</code> 选取每个父元素下的第<code>index</code>个或者奇偶子元素</li>\n<li><code>:first-child</code> 选取每个父元素的第一个子元素，如<code>$(&#39;ul li:first-child&#39;)</code>, 选择ul的第一个li元素</li>\n<li><code>:last-child</code> 选取每个父元素的子元素</li>\n<li><code>:only-child</code> 如果父控件一个子元素，那么匹配到，否则不被匹配。<code>$(&#39;ul li:only-child&#39;)</code>返回只有一个子元素且为li的li元素</li>\n</ul>\n<h3 id=\"表单对象属性过滤选择器\"><a href=\"#表单对象属性过滤选择器\" class=\"headerlink\" title=\"表单对象属性过滤选择器\"></a>表单对象属性过滤选择器</h3><ul>\n<li><code>:enabled</code> 选取所有可用元素。<code>$(&#39;#form1 :enabled&#39;)</code>,选取<code>id</code>为<code>form1</code>的表单内的所有可用元素。</li>\n<li><code>:disbaled</code> 选取所有不可用元素。</li>\n<li><code>:checked</code> 选取所有被选中元素(单选框，复选框)。<code>$(&#39;input:checked&#39;)</code>,选取所有被选中的<code>input</code>元素</li>\n<li><code>:selected</code> 选取所有被选中的选项元素（下拉列表）。<code>$(&#39;select option:seleted&#39;)</code></li>\n</ul>\n<h3 id=\"表单选择器\"><a href=\"#表单选择器\" class=\"headerlink\" title=\"表单选择器\"></a>表单选择器</h3><ul>\n<li><code>:input</code> 选取所有<code>&amp;lt;input&gt;,&amp;lt;textarea&gt;,&amp;lt;select&gt;,&amp;lt;button&gt;</code>元素。如<code>$(&#39;#form1 :input&#39;)</code></li>\n<li><code>:text</code> 选取所有单行文本框。</li>\n<li><code>:password</code> 选取所有密码框</li>\n<li><code>:radio</code> 选取所有单选框</li>\n<li><code>:submit</code> 选取所有提交按钮</li>\n<li><code>:image</code> 选取所有的图像按钮</li>\n<li><code>:reset</code> 选取所有的重置按钮</li>\n<li><code>:button</code> 选取所有的按钮</li>\n<li><code>:file</code> 选取所有的上川域</li>\n<li><code>:hidden</code> 选取所有不可见元素</li>\n</ul>\n","excerpt":"<h2 id=\"第二章-jQuery选择器\"><a href=\"#第二章-jQuery选择器\" class=\"headerlink\" title=\"第二章 jQuery选择器\"></a>第二章 jQuery选择器</h2><h3 id=\"基本选择器\"><a href=\"#基本选择器\" class=\"headerlink\" title=\"基本选择器\"></a>基本选择器</h3><ul>\n<li><code>#id</code> 匹配id,  <code>$(&#39;#test&#39;)</code></li>\n<li><code>.class</code> 匹配类, <code>$(&#39;.test&#39;)</code></li>\n<li><code>element</code> 匹配标签, <code>$(&#39;div&#39;)</code></li>\n<li><code>*</code> 匹配所有元素, <code>$(&#39;*&#39;)</code></li>\n<li><code>selector1, select2,...,selectN</code> 匹配集合，如$(‘div, span, p.myClass’)</li>\n</ul>","more":"<h3 id=\"层次选择器\"><a href=\"#层次选择器\" class=\"headerlink\" title=\"层次选择器\"></a>层次选择器</h3><ul>\n<li><code>$(&#39;ancestor decendant&#39;)</code> 选择后代元素</li>\n<li><code>$(&#39;parent &gt; child&#39;)</code> 选择子元素</li>\n<li><code>$(&#39;prev + next&#39;)</code> 选择紧接在<code>prev</code>后的<code>next</code>元素，如: <code>$(&#39;.one + div&#39;)</code>，选择<code>one</code>之后的下个一个<code>div</code>同辈元素</li>\n<li><code>$(&#39;prev ~ siblings&#39;)</code> 选择prev后的所有siblings元素，如<code>$(&#39;#two ~ div&#39;)</code>选择<code>two</code>之后的所有<code>div</code>同辈元素</li>\n</ul>\n<h3 id=\"过滤选择器\"><a href=\"#过滤选择器\" class=\"headerlink\" title=\"过滤选择器\"></a>过滤选择器</h3><ul>\n<li><code>:first</code> 选取第一个元素，它只返回一个元素。 如<code>$(&#39;div:first&#39;)</code>选取第一个div元素。</li>\n<li><code>:last</code> 选取最后一个元素，它只返回一个元素。</li>\n<li><code>:not(selector)</code> 取出所有给定选择器匹配的元素，如<code>$(&#39;input:not(.myClass)&#39;)</code>,选取<code>class</code>不是<code>myClass</code>的<code>input</code>元素</li>\n<li><code>:even</code> 选取索引为偶数的元素，索引从<strong>0</strong>开始</li>\n<li><code>:odd</code> 选取奇数索引元素</li>\n<li><code>:eq(index)</code> 选取指定索引元素</li>\n<li><code>:gt(index)</code> 选取大于索引的元素</li>\n<li><code>:lt(index)</code> 选取小于索引的元素</li>\n<li><code>:header</code> 选取所有标题元素 如<code>$(&#39;:header&#39;)</code>，选取网页中所有<code>&amp;lt;h1&gt;,&amp;lt;h2&gt;,&amp;lt;h3&gt;;....</code></li>\n<li><code>:animated</code> 选取所有正在执行动画的元素 如：<code>$(&#39;div:animated&#39;)</code>选取正在执行动画的所有<code>div</code>元素</li>\n<li><code>:focus</code> 选取当前获取焦点的元素 如<code>$(&#39;:focus&#39;)</code>，获取当前获取焦点的元素</li>\n</ul>\n<h3 id=\"内容过滤选择器\"><a href=\"#内容过滤选择器\" class=\"headerlink\" title=\"内容过滤选择器\"></a>内容过滤选择器</h3><ul>\n<li><code>:contains(text)</code> 选取文本内容含有text的元素, 如<code>$(&#39;div:contains(&quot;我&quot;)&#39;)</code>,选取文本含有<code>我</code>的<code>div</code>元素</li>\n<li><code>:empty</code> 选取不包含子元素或者文本为空的元素, 如<code>$(&#39;div:empty&#39;)</code>选取不包含子元素的<code>div</code>元素</li>\n<li><code>:has(selector)</code> 选取含有选择器的所匹配的元素的元素，如<code>$(&#39;div:has(p)&#39;)</code>，选取含有<code>p</code>元素的<code>div</code>元素</li>\n<li><code>:parent</code> 选取含有子元素或文本的元素 如<code>$(&#39;div:parent&#39;)</code>,选取拥有子元素的<code>div</code>元素</li>\n</ul>\n<h3 id=\"可见性过滤器\"><a href=\"#可见性过滤器\" class=\"headerlink\" title=\"可见性过滤器\"></a>可见性过滤器</h3><ul>\n<li><code>:hidden</code> 选取所有不可见元素, 如<code>$(&#39;:hidden&#39;)</code>, 选取所有不可见元素，<code>$(&#39;input:hidden&#39;)</code>选取所有不可见的input元素</li>\n<li><code>:visible</code> 选取所有可见元素</li>\n</ul>\n<h3 id=\"属性过滤选择器\"><a href=\"#属性过滤选择器\" class=\"headerlink\" title=\"属性过滤选择器\"></a>属性过滤选择器</h3><ul>\n<li><code>[attr]</code> 选取拥有此属性的元素, 如<code>$(&#39;div[id]&#39;)</code>, 选取拥有属性<code>id</code>的元素</li>\n<li><code>[attr=val]</code> 选取<code>attr</code>属性为<code>val</code>的元素如, <code>$(&#39;div[title=test]&#39;)</code>选取<code>title</code>为<code>test</code>的<code>div</code>元素</li>\n<li><code>[attr!=val]</code> 选取<code>attr</code>的值不为<code>val</code>的元素</li>\n<li><code>[attr^=val]</code> 选取<code>attr</code>的值以<code>val</code>开始的元素</li>\n<li><code>[attr$=val]</code> 选取<code>attr</code>的值以<code>val</code>结束的元素</li>\n<li><code>[attr*=val]</code> 选取<code>attr</code>的值包含<code>val</code>的元素</li>\n<li><code>[attr|=val]</code> 选取<code>attr</code>的值为<code>val</code>或以<code>val-</code>开始的元素</li>\n<li><code>[attr~=val]</code> 选取<code>attr</code>的值包含<code>&#39; val&#39;</code>的元素（注意val前面要有空格）</li>\n<li><code>[attr1][attr2][attrN]</code> 选取同时满足几个条件的元素，如<code>$(&#39;div[id][title$=&quot;test&quot;]&#39;)</code>，选取拥有属性id，并且属性title以test结束的div元素</li>\n</ul>\n<h3 id=\"子元素过滤选择器\"><a href=\"#子元素过滤选择器\" class=\"headerlink\" title=\"子元素过滤选择器\"></a>子元素过滤选择器</h3><ul>\n<li><code>:nth-child(index/even/odd/equation)</code> 选取每个父元素下的第<code>index</code>个或者奇偶子元素</li>\n<li><code>:first-child</code> 选取每个父元素的第一个子元素，如<code>$(&#39;ul li:first-child&#39;)</code>, 选择ul的第一个li元素</li>\n<li><code>:last-child</code> 选取每个父元素的子元素</li>\n<li><code>:only-child</code> 如果父控件一个子元素，那么匹配到，否则不被匹配。<code>$(&#39;ul li:only-child&#39;)</code>返回只有一个子元素且为li的li元素</li>\n</ul>\n<h3 id=\"表单对象属性过滤选择器\"><a href=\"#表单对象属性过滤选择器\" class=\"headerlink\" title=\"表单对象属性过滤选择器\"></a>表单对象属性过滤选择器</h3><ul>\n<li><code>:enabled</code> 选取所有可用元素。<code>$(&#39;#form1 :enabled&#39;)</code>,选取<code>id</code>为<code>form1</code>的表单内的所有可用元素。</li>\n<li><code>:disbaled</code> 选取所有不可用元素。</li>\n<li><code>:checked</code> 选取所有被选中元素(单选框，复选框)。<code>$(&#39;input:checked&#39;)</code>,选取所有被选中的<code>input</code>元素</li>\n<li><code>:selected</code> 选取所有被选中的选项元素（下拉列表）。<code>$(&#39;select option:seleted&#39;)</code></li>\n</ul>\n<h3 id=\"表单选择器\"><a href=\"#表单选择器\" class=\"headerlink\" title=\"表单选择器\"></a>表单选择器</h3><ul>\n<li><code>:input</code> 选取所有<code>&amp;lt;input&gt;,&amp;lt;textarea&gt;,&amp;lt;select&gt;,&amp;lt;button&gt;</code>元素。如<code>$(&#39;#form1 :input&#39;)</code></li>\n<li><code>:text</code> 选取所有单行文本框。</li>\n<li><code>:password</code> 选取所有密码框</li>\n<li><code>:radio</code> 选取所有单选框</li>\n<li><code>:submit</code> 选取所有提交按钮</li>\n<li><code>:image</code> 选取所有的图像按钮</li>\n<li><code>:reset</code> 选取所有的重置按钮</li>\n<li><code>:button</code> 选取所有的按钮</li>\n<li><code>:file</code> 选取所有的上川域</li>\n<li><code>:hidden</code> 选取所有不可见元素</li>\n</ul>"},{"title":"CSS权威值南-笔记","date":"2016-09-06T10:04:19.000Z","_content":"\n## 第一章 css和文档\n\n-  文档内定义样式\n\n        <style type=\"text/css\">\n            @import url(sheet2.css)\n            h1 {color: maroon;}\n        </style>\n\n-   引入css文件\n\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"sheet1.css\" media=\"all\" />\n\n<!--more-->\n\n## 第二章 选择器\n\n- ID选择器和指定id的属性选择器不是一回事，h1#page-title和h1[id=\"page-title\"]之间有差别。\n- p.warning和p[class~=\"warning\"]是等价的，但是p[class=\"warning\"]匹配只有一个class的p元素。\n\n    - 类似的还有[foo^=\"bar\"] 选择foo属性值以bar开头的所有元素\n    - [foo$=\"bar\"] 选择foo属性值以bar结尾的所有元素\n    - [foo*=\"bar\"] 选择foo属性值中含有bar子串的所有元素\n\n- 后代选择器中，两个元素之间的层次间隔可以是无限的，如果想匹配直接相连的父子元素，可以使用子结合符\">\"\n\n- 兄弟元素选择器 h1 +  p {margin-top: 0}\n\n- 伪类选择器，伪类的顺序很重要 link-visited-focus-hover-active\n\n    - 连接伪类\n        - :link 未访问的超连接\n        - :visited  已访问的超连接\n\n    - 动态伪类\n        - :focus 拥有焦点的元素（可以接受键盘输入或者能已某种方式激活的元素）\n        - :hover 鼠标指针悬停的元素\n        - :active 用户输入激活的元素\n\n    - 静态伪类\n        - :first-child 第一个子元素\n        - :first-letter 第一个字母\n        - :first-line 第一行\n        - :lang(fr) 根据语言选择\n    - :first-letter和:first-line只能用于标记或段落之类的块元素，不能用于超连接等行内元素。\n\n## 第三章 结构和层叠\n\n- 选择器的特殊性\n\n    - 给定的各个ID属性值，加0，1，0，0\n\n    - 给形的各个类的属性值，属性选择或者伪类，加0，0，1，0\n\n    - 给定的各个元素和伪元素加0，0，0，1\n\n    - 结合符和通配选择器对特属性没有任何贡献\n\n- 样式继承\n\n    - 文本颜色可被继承\n    - border不能被继承，一般的大多数框模型属性不能被继承（包括外边框，内边距，背景和边框）\n\n    - 继承的值没有特殊性，连0特殊性都没有p(61)，因此需要避免不加区别的使用通配选择器。\n\n- 层叠权重大小顺序\n\n    - 读者的重要声明\n\n    - 创作人员的重要声明\n\n    - 创作人员的正常声明\n\n    - 读者的正常声明\n\n    - 用户代理声明\n\n## 第四章 值和单位\n\n- 颜色表示\n\n    - 命名颜色 {color: gray;}\n\n    - 函数式RGB {color: rgb(100%, 50%, 50%);}，或者{color: rgb(52, 95, 153);}\n\n    - 十六进制RGB {color: #ff0000;} 如果3组各自成对，可以简写#f00，相当于#ff0000\n- WEB安全颜色\n    - RGB百分表示法，能被20整除的颜色，如rgb(60, 40, 120)\n\n    - 十六进制，使用00，33，66，99，cc，ff，如#99ffcc\n\n- 长度单位\n\n    - 绝对长度单位 在打印文档的样式表时更为有用，Web设计中不使用绝对长度单位。\n\n        - 英寸 (in)\n\n        - 厘米(cm) 1in = 2.54cm\n\n        - 毫米(mm) 1in = 25.4mm\n\n        - 点(pt) 1in = 72pt\n\n        - 派卡(pc)  1pc = 12pt, 6pc = 1in\n\n    - 相对长度单位\n        - em (em-height) 1em定义未一种给定字体的font-size的值，随元素的不同而不同，国外最常用，也是未来的趋势，更容易适配移动端。\n        - ex (x-height) 1ex定位未一种给定字体的小写x的高度，不同字体ex的值不同。\n        - px像素\n\n## 第五章 字体\ncss定义了5中通用字体\n\n- Serif 成比例的有上下短线的字体\n- Sans-serif 成比例的，没有上下短线\n- Monospace 不成比例，通常用于模拟打字机打出的问题\n- Cursive  手写体\n- Fantasy 无法用任何特征来定义的字体\n\n特定字体：如Times，Verdana, Helvetica, Arial等，每一种特定的字体都会落入上述通用系列中。\n\n- font-family 如h1 {font-family: Georgia, serif}, Georgia是特定字体，serif是通用字体。\n- font-weight\n    - normal\n    - bold\n    - bolder\n    - lighter\n    - 100/200/300/400/500/600/700/800/900\n- font-size\n    - xx-small/x-small/small/medium/large/x-large/xx-large/smaller/larger\n    - &lt;length>/&lt;percentage>\n- font-style字体风格\n    - italic/oblique/normal/inherit\n- font-variant 字体变形\n    - small-caps 首字母大写\n    - normal\n    - inherit\n\n## 第六章 文本属性\n\n- text-indent 首行缩进\n    - &lt;length> 如：p {text-indent: 3em}\n    - &lt;percentag> 相对于父元素宽度\n    - inhert\n- text-align 水平对齐\n    - left\n    - right\n    - center\n    - justify 两端对齐，在打印领域很常见\n    - inherit\n- line-height 行高，定义了基线之间的距离，而不是字体大小，可以控制行间距。行间距=行高-字体大小\n    - &lt;length>\n    - &lt;percentage>\n    - &lt;number>\n    - normal\n    - inherit\n- vertical-align 行内元素和表单元格的垂直方向对齐\n    - base-line 基线对齐，元素的底端和副元素的基线对齐\n    - sub/super 上标/下标，相对于基线升高/降低\n    -  bottom 元素行内框的底端和行框的底端对齐\n    - text-bottom 元素行内框的底端和文本的底端对齐\n    - top 与bottom相反\n    - text-top 与text-bottom相反\n    - middle 居中对齐\n    - &lt;percentage>\n    - &lt;length>\n    - inherit\n- word-spacing 字间隔\n    - &lt;length>\n    - normal\n    - inherit\n- letter-spacing 字母间隔\n    - &lt;length>\n    - normal\n    - inherit\n- text-transform\n    - uppercase 全大写\n    - lowercase 全小写\n    - capitalize 单词首字母大写\n    - none\n    - inherit\n- text-decoration 文字效果\n    - none\n    - underline 下划线\n    - overline 上划线\n    - line-through 中划线\n    - blink\n    - inherit\n- text-shadow\n    - none\n\n    - 颜色值和三个长度值 text-shadow: silver 2px 2px 2px;\n- white-space\n    - normal 合并空白符，忽略换行符，允许自动换行。\n    - nowrap 合并空白符，忽略换行符号，不允许自动换行。\n    - pre 保留空白符号，保留换行符号，不允许自动换行。\n    - pre-wrap 保留空白符，保留换行符，允许自动换行。\n    - pre-line 合并空白符，保留换行符，允许自动换行。\n    - inherit\n- direction 文本方向\n    - ltr\n    - rtl\n    - inherit\n\n## 第七章 基本视觉格式化\n\n水平格式化\n七大水平属性\n\n- margin-left\n- border-left\n- padding-left\n- width\n- padding-right\n- border-right\n- maring-right\n\n这7个属性值加起来就是元素包含块的宽度，这往往是副元素的width值。\nwidth就是左内边距到右内边距的距离。\n这7个属性中，只有3个属性可以设置为auto: margin-left, width, margin-right，可以用auto弥补实际值和所需总和的差距。如果三个值都为非auto的某个值，这些格式化属性过分受限，此时会强制设置margin-right为auto.\n不止一个auto的情况：\n\n-  margin-left和margin-right为auto，此时元素居中，与text-align:center的区别，text-align只应用块级元素的内联内容，并不能使元素居中。\n- margin-left和width为auto，此时margin-left为0，width会填满剩余包块。\n- margin-right和width为auto，此时margin-right为0，width填满剩余包块。\n- margin-left和margin-right和width都为auto，此时margin-left和margin-right都为0,width会填满包块。这种情况和默认是相同的。\n\n水平外边距不会合并，父元素的内边距，边距和外边距可能影响子元素。\n\n负外边距\n   负外边距时，  会使得内容宽度超出包块，因为根据等式父包块width=7大水平之和，margin-left或margin-right为负时，width要增大。\n\n垂直格式化\n如果元素的内容的高度，大于元素框的高度，用户代理的具体行为将取决于overflow属性。\n垂直格式化的七大属性\n\n- margin-top\n- border-top\n- padding-top\n- height\n- padding-bottom\n- border-bottom\n- margin-bottom\n\n这7个属性值的值和必须等于含块的height，其中，3个值可以设置为auto，margin-top，height，margin-bottom，如果margin-top或margin-bottom设置为auto则自动计算0，这就是为什么不容易设置元素为垂直居中，这与水平时不一样的。对于定位元素，上下边距为auto时，处理不同。\n\n如果没有显式声明包含块的height，百分数高度为重置为auto，如果块级中场元素的height设置为auto，显示时的高度将恰好足以包含其内联内容。\n如果块级正常流元素高度设置为auto，而且只有块级子元素，其默认高度将是从最高块级子元素的外边框边界到最低块级子元素外边框边界之间的距离。\n不过，如果块级元素有padding或者border，则高度则是最高子元素的上外边距到其最低子元素的下外边距边界之间的距离。\n\n合并垂直外边距\n垂直合并只引用与外边距，不会应用于内边距和边框。\n负的下外边距会使段落看上去向下拉，负的上边会使段落看上去向上拉。\n\n## 第八章 内边距、边框和外边距\n\n- border-style\n    - none\n    - hidden\n    - dotted\n    - dashed\n    - solid\n    - double\n    - groove\n    - ridge\n    - inset\n    - outset\n\n- 设置多个边框样式 p.asize {boder-style:  solid dashed dotted solid;}\n- boder-top-style/boder-right-style/border-bottom-style/border-left-style 单独设置边框样式\n- border-width边框宽度\n    - thin\n    - medium\n    - thick\n    - &lt;length>\n- border-top-width/border-right-width/border-bottom-width/border-left-width单独设置宽度\n- boder-color边框颜色\n    - &lt;color>\n    - transparent 透明\n- border-top-color/border-right-color/border-bottom-color/border-left-color单独设置颜色\n- border-top/boder-right/border-bottom/border-left单独设置边框\n    - [&lt;border-width>] [&lt;border-style>][boder-color]\n- border 全局边框，应用到四条边\n    - [&lt;border-width>] [&lt;border-style>][boder-color]\n\n对于只包含文本的行，能改变行间距离的属性只有line-height, font-size和vertical-align。\n行内元素使用正左右外边距，可以多出来水平空间，负的左右外边距会使行内元素与其他内容重叠。\n行内元素的边框，不会改变行高。\n行内元素使用正的左右边框可以多出来水平空间。\n\n- padding 内边距\n    - &lt;length>\n    - &lt;percentage>\n\n行内非替换元素使用左右内边距时，可以多出来水平空间，而上下边距不会改变行高。\n可以想图像使用内边距,外边距，边框时，它可以改变行高，也可以水平方向留出距离。\n\n- background-color 背景元素\n    - &lt;color>\n    - transparent\n- background-image 如body {background-image: url(bg23.gif)}\n    - &lt;uri>\n    - none\n- background-repeat 有方向的重复\n    - repeat\n    - repeat-x\n    - repeat-y\n    - no-repeat\n- background-position 背景定位\n    - &lt;percentage>\n    - &lt;length>\n    - left/center/right/top/bottom\n\nbackground-position单个关键字等价\ncenter: cener center\ntop: top center或者center top\nbottom: bottom center或者center bottom\nleft: left center 或者center left\nright: right center 或者center right\n\n- background-attachment\n    - scroll 跟随文档滚动\n    - fixed 不跟随文档滚动\n\n- background 简写属性\n    - &lt;background-color> || &lt;background-image> || &lt;backgroud-repeat> || &lt;background-attachment> || &lt;background-position>\n\n## 第十章 浮动和定位\n\n- float\n    - left\n    - right\n    - none\n\n浮动元素会从文档的正常流中删除，它还是会影响布局。其他内容会环绕元素，浮动元素的外边距不会合并\n\n- position\n    - static 默认 块元素生成一个矩形框，行内元素创建一个或多个行框，置于父元素中\n    - relative 元素偏移某个距离，元素仍保持未定位前的形状，它原本占据的空间仍保留\n    - absolute 元素框从文档流中完全删除，并相对于其包含块定位。\n    - fixed 元素的表现类似于absolute，不过，其包含块是视窗本身。\n\n- 偏移属性，在position为relative,absolute和fixed时，可以设置偏移属性top right bottom left\n    - &lt;length>\n    - &lt;percentage>\n    - auto 初始值\n\n包含块\n\n根元素的包含块，由用户代理建立，即html元素或body元素\n对于一个非根元素，如果其position时relative或static，包含块则由最近的块级框，表单元格或行内块祖先框的内容边界构成。\n对于一个非根元素，如果其position时absolute，包含块则由最近的position值不是static的祖先元素。\n\n- overflow\n    - visible\n    - hidden\n    - scroll\n    - auto\n","source":"_posts/CSS-The-Definitive-Guide.md","raw":"---\ntitle: CSS权威值南-笔记\ndate: 2016-9-6 18:04:19\ntags: css\n---\n\n## 第一章 css和文档\n\n-  文档内定义样式\n\n        <style type=\"text/css\">\n            @import url(sheet2.css)\n            h1 {color: maroon;}\n        </style>\n\n-   引入css文件\n\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"sheet1.css\" media=\"all\" />\n\n<!--more-->\n\n## 第二章 选择器\n\n- ID选择器和指定id的属性选择器不是一回事，h1#page-title和h1[id=\"page-title\"]之间有差别。\n- p.warning和p[class~=\"warning\"]是等价的，但是p[class=\"warning\"]匹配只有一个class的p元素。\n\n    - 类似的还有[foo^=\"bar\"] 选择foo属性值以bar开头的所有元素\n    - [foo$=\"bar\"] 选择foo属性值以bar结尾的所有元素\n    - [foo*=\"bar\"] 选择foo属性值中含有bar子串的所有元素\n\n- 后代选择器中，两个元素之间的层次间隔可以是无限的，如果想匹配直接相连的父子元素，可以使用子结合符\">\"\n\n- 兄弟元素选择器 h1 +  p {margin-top: 0}\n\n- 伪类选择器，伪类的顺序很重要 link-visited-focus-hover-active\n\n    - 连接伪类\n        - :link 未访问的超连接\n        - :visited  已访问的超连接\n\n    - 动态伪类\n        - :focus 拥有焦点的元素（可以接受键盘输入或者能已某种方式激活的元素）\n        - :hover 鼠标指针悬停的元素\n        - :active 用户输入激活的元素\n\n    - 静态伪类\n        - :first-child 第一个子元素\n        - :first-letter 第一个字母\n        - :first-line 第一行\n        - :lang(fr) 根据语言选择\n    - :first-letter和:first-line只能用于标记或段落之类的块元素，不能用于超连接等行内元素。\n\n## 第三章 结构和层叠\n\n- 选择器的特殊性\n\n    - 给定的各个ID属性值，加0，1，0，0\n\n    - 给形的各个类的属性值，属性选择或者伪类，加0，0，1，0\n\n    - 给定的各个元素和伪元素加0，0，0，1\n\n    - 结合符和通配选择器对特属性没有任何贡献\n\n- 样式继承\n\n    - 文本颜色可被继承\n    - border不能被继承，一般的大多数框模型属性不能被继承（包括外边框，内边距，背景和边框）\n\n    - 继承的值没有特殊性，连0特殊性都没有p(61)，因此需要避免不加区别的使用通配选择器。\n\n- 层叠权重大小顺序\n\n    - 读者的重要声明\n\n    - 创作人员的重要声明\n\n    - 创作人员的正常声明\n\n    - 读者的正常声明\n\n    - 用户代理声明\n\n## 第四章 值和单位\n\n- 颜色表示\n\n    - 命名颜色 {color: gray;}\n\n    - 函数式RGB {color: rgb(100%, 50%, 50%);}，或者{color: rgb(52, 95, 153);}\n\n    - 十六进制RGB {color: #ff0000;} 如果3组各自成对，可以简写#f00，相当于#ff0000\n- WEB安全颜色\n    - RGB百分表示法，能被20整除的颜色，如rgb(60, 40, 120)\n\n    - 十六进制，使用00，33，66，99，cc，ff，如#99ffcc\n\n- 长度单位\n\n    - 绝对长度单位 在打印文档的样式表时更为有用，Web设计中不使用绝对长度单位。\n\n        - 英寸 (in)\n\n        - 厘米(cm) 1in = 2.54cm\n\n        - 毫米(mm) 1in = 25.4mm\n\n        - 点(pt) 1in = 72pt\n\n        - 派卡(pc)  1pc = 12pt, 6pc = 1in\n\n    - 相对长度单位\n        - em (em-height) 1em定义未一种给定字体的font-size的值，随元素的不同而不同，国外最常用，也是未来的趋势，更容易适配移动端。\n        - ex (x-height) 1ex定位未一种给定字体的小写x的高度，不同字体ex的值不同。\n        - px像素\n\n## 第五章 字体\ncss定义了5中通用字体\n\n- Serif 成比例的有上下短线的字体\n- Sans-serif 成比例的，没有上下短线\n- Monospace 不成比例，通常用于模拟打字机打出的问题\n- Cursive  手写体\n- Fantasy 无法用任何特征来定义的字体\n\n特定字体：如Times，Verdana, Helvetica, Arial等，每一种特定的字体都会落入上述通用系列中。\n\n- font-family 如h1 {font-family: Georgia, serif}, Georgia是特定字体，serif是通用字体。\n- font-weight\n    - normal\n    - bold\n    - bolder\n    - lighter\n    - 100/200/300/400/500/600/700/800/900\n- font-size\n    - xx-small/x-small/small/medium/large/x-large/xx-large/smaller/larger\n    - &lt;length>/&lt;percentage>\n- font-style字体风格\n    - italic/oblique/normal/inherit\n- font-variant 字体变形\n    - small-caps 首字母大写\n    - normal\n    - inherit\n\n## 第六章 文本属性\n\n- text-indent 首行缩进\n    - &lt;length> 如：p {text-indent: 3em}\n    - &lt;percentag> 相对于父元素宽度\n    - inhert\n- text-align 水平对齐\n    - left\n    - right\n    - center\n    - justify 两端对齐，在打印领域很常见\n    - inherit\n- line-height 行高，定义了基线之间的距离，而不是字体大小，可以控制行间距。行间距=行高-字体大小\n    - &lt;length>\n    - &lt;percentage>\n    - &lt;number>\n    - normal\n    - inherit\n- vertical-align 行内元素和表单元格的垂直方向对齐\n    - base-line 基线对齐，元素的底端和副元素的基线对齐\n    - sub/super 上标/下标，相对于基线升高/降低\n    -  bottom 元素行内框的底端和行框的底端对齐\n    - text-bottom 元素行内框的底端和文本的底端对齐\n    - top 与bottom相反\n    - text-top 与text-bottom相反\n    - middle 居中对齐\n    - &lt;percentage>\n    - &lt;length>\n    - inherit\n- word-spacing 字间隔\n    - &lt;length>\n    - normal\n    - inherit\n- letter-spacing 字母间隔\n    - &lt;length>\n    - normal\n    - inherit\n- text-transform\n    - uppercase 全大写\n    - lowercase 全小写\n    - capitalize 单词首字母大写\n    - none\n    - inherit\n- text-decoration 文字效果\n    - none\n    - underline 下划线\n    - overline 上划线\n    - line-through 中划线\n    - blink\n    - inherit\n- text-shadow\n    - none\n\n    - 颜色值和三个长度值 text-shadow: silver 2px 2px 2px;\n- white-space\n    - normal 合并空白符，忽略换行符，允许自动换行。\n    - nowrap 合并空白符，忽略换行符号，不允许自动换行。\n    - pre 保留空白符号，保留换行符号，不允许自动换行。\n    - pre-wrap 保留空白符，保留换行符，允许自动换行。\n    - pre-line 合并空白符，保留换行符，允许自动换行。\n    - inherit\n- direction 文本方向\n    - ltr\n    - rtl\n    - inherit\n\n## 第七章 基本视觉格式化\n\n水平格式化\n七大水平属性\n\n- margin-left\n- border-left\n- padding-left\n- width\n- padding-right\n- border-right\n- maring-right\n\n这7个属性值加起来就是元素包含块的宽度，这往往是副元素的width值。\nwidth就是左内边距到右内边距的距离。\n这7个属性中，只有3个属性可以设置为auto: margin-left, width, margin-right，可以用auto弥补实际值和所需总和的差距。如果三个值都为非auto的某个值，这些格式化属性过分受限，此时会强制设置margin-right为auto.\n不止一个auto的情况：\n\n-  margin-left和margin-right为auto，此时元素居中，与text-align:center的区别，text-align只应用块级元素的内联内容，并不能使元素居中。\n- margin-left和width为auto，此时margin-left为0，width会填满剩余包块。\n- margin-right和width为auto，此时margin-right为0，width填满剩余包块。\n- margin-left和margin-right和width都为auto，此时margin-left和margin-right都为0,width会填满包块。这种情况和默认是相同的。\n\n水平外边距不会合并，父元素的内边距，边距和外边距可能影响子元素。\n\n负外边距\n   负外边距时，  会使得内容宽度超出包块，因为根据等式父包块width=7大水平之和，margin-left或margin-right为负时，width要增大。\n\n垂直格式化\n如果元素的内容的高度，大于元素框的高度，用户代理的具体行为将取决于overflow属性。\n垂直格式化的七大属性\n\n- margin-top\n- border-top\n- padding-top\n- height\n- padding-bottom\n- border-bottom\n- margin-bottom\n\n这7个属性值的值和必须等于含块的height，其中，3个值可以设置为auto，margin-top，height，margin-bottom，如果margin-top或margin-bottom设置为auto则自动计算0，这就是为什么不容易设置元素为垂直居中，这与水平时不一样的。对于定位元素，上下边距为auto时，处理不同。\n\n如果没有显式声明包含块的height，百分数高度为重置为auto，如果块级中场元素的height设置为auto，显示时的高度将恰好足以包含其内联内容。\n如果块级正常流元素高度设置为auto，而且只有块级子元素，其默认高度将是从最高块级子元素的外边框边界到最低块级子元素外边框边界之间的距离。\n不过，如果块级元素有padding或者border，则高度则是最高子元素的上外边距到其最低子元素的下外边距边界之间的距离。\n\n合并垂直外边距\n垂直合并只引用与外边距，不会应用于内边距和边框。\n负的下外边距会使段落看上去向下拉，负的上边会使段落看上去向上拉。\n\n## 第八章 内边距、边框和外边距\n\n- border-style\n    - none\n    - hidden\n    - dotted\n    - dashed\n    - solid\n    - double\n    - groove\n    - ridge\n    - inset\n    - outset\n\n- 设置多个边框样式 p.asize {boder-style:  solid dashed dotted solid;}\n- boder-top-style/boder-right-style/border-bottom-style/border-left-style 单独设置边框样式\n- border-width边框宽度\n    - thin\n    - medium\n    - thick\n    - &lt;length>\n- border-top-width/border-right-width/border-bottom-width/border-left-width单独设置宽度\n- boder-color边框颜色\n    - &lt;color>\n    - transparent 透明\n- border-top-color/border-right-color/border-bottom-color/border-left-color单独设置颜色\n- border-top/boder-right/border-bottom/border-left单独设置边框\n    - [&lt;border-width>] [&lt;border-style>][boder-color]\n- border 全局边框，应用到四条边\n    - [&lt;border-width>] [&lt;border-style>][boder-color]\n\n对于只包含文本的行，能改变行间距离的属性只有line-height, font-size和vertical-align。\n行内元素使用正左右外边距，可以多出来水平空间，负的左右外边距会使行内元素与其他内容重叠。\n行内元素的边框，不会改变行高。\n行内元素使用正的左右边框可以多出来水平空间。\n\n- padding 内边距\n    - &lt;length>\n    - &lt;percentage>\n\n行内非替换元素使用左右内边距时，可以多出来水平空间，而上下边距不会改变行高。\n可以想图像使用内边距,外边距，边框时，它可以改变行高，也可以水平方向留出距离。\n\n- background-color 背景元素\n    - &lt;color>\n    - transparent\n- background-image 如body {background-image: url(bg23.gif)}\n    - &lt;uri>\n    - none\n- background-repeat 有方向的重复\n    - repeat\n    - repeat-x\n    - repeat-y\n    - no-repeat\n- background-position 背景定位\n    - &lt;percentage>\n    - &lt;length>\n    - left/center/right/top/bottom\n\nbackground-position单个关键字等价\ncenter: cener center\ntop: top center或者center top\nbottom: bottom center或者center bottom\nleft: left center 或者center left\nright: right center 或者center right\n\n- background-attachment\n    - scroll 跟随文档滚动\n    - fixed 不跟随文档滚动\n\n- background 简写属性\n    - &lt;background-color> || &lt;background-image> || &lt;backgroud-repeat> || &lt;background-attachment> || &lt;background-position>\n\n## 第十章 浮动和定位\n\n- float\n    - left\n    - right\n    - none\n\n浮动元素会从文档的正常流中删除，它还是会影响布局。其他内容会环绕元素，浮动元素的外边距不会合并\n\n- position\n    - static 默认 块元素生成一个矩形框，行内元素创建一个或多个行框，置于父元素中\n    - relative 元素偏移某个距离，元素仍保持未定位前的形状，它原本占据的空间仍保留\n    - absolute 元素框从文档流中完全删除，并相对于其包含块定位。\n    - fixed 元素的表现类似于absolute，不过，其包含块是视窗本身。\n\n- 偏移属性，在position为relative,absolute和fixed时，可以设置偏移属性top right bottom left\n    - &lt;length>\n    - &lt;percentage>\n    - auto 初始值\n\n包含块\n\n根元素的包含块，由用户代理建立，即html元素或body元素\n对于一个非根元素，如果其position时relative或static，包含块则由最近的块级框，表单元格或行内块祖先框的内容边界构成。\n对于一个非根元素，如果其position时absolute，包含块则由最近的position值不是static的祖先元素。\n\n- overflow\n    - visible\n    - hidden\n    - scroll\n    - auto\n","slug":"CSS-The-Definitive-Guide","published":1,"updated":"2016-11-21T02:37:41.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxg1t3h000b0cnyed1stwuj","content":"<h2 id=\"第一章-css和文档\"><a href=\"#第一章-css和文档\" class=\"headerlink\" title=\"第一章 css和文档\"></a>第一章 css和文档</h2><ul>\n<li><p>文档内定义样式</p>\n<pre><code>&lt;style type=&quot;text/css&quot;&gt;\n    @import url(sheet2.css)\n    h1 {color: maroon;}\n&lt;/style&gt;\n</code></pre></li>\n<li><p>引入css文件</p>\n<pre><code>&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;sheet1.css&quot; media=&quot;all&quot; /&gt;\n</code></pre></li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"第二章-选择器\"><a href=\"#第二章-选择器\" class=\"headerlink\" title=\"第二章 选择器\"></a>第二章 选择器</h2><ul>\n<li>ID选择器和指定id的属性选择器不是一回事，h1#page-title和h1[id=”page-title”]之间有差别。</li>\n<li><p>p.warning和p[class~=”warning”]是等价的，但是p[class=”warning”]匹配只有一个class的p元素。</p>\n<ul>\n<li>类似的还有[foo^=”bar”] 选择foo属性值以bar开头的所有元素</li>\n<li>[foo$=”bar”] 选择foo属性值以bar结尾的所有元素</li>\n<li>[foo*=”bar”] 选择foo属性值中含有bar子串的所有元素</li>\n</ul>\n</li>\n<li><p>后代选择器中，两个元素之间的层次间隔可以是无限的，如果想匹配直接相连的父子元素，可以使用子结合符”&gt;”</p>\n</li>\n<li><p>兄弟元素选择器 h1 +  p {margin-top: 0}</p>\n</li>\n<li><p>伪类选择器，伪类的顺序很重要 link-visited-focus-hover-active</p>\n<ul>\n<li><p>连接伪类</p>\n<ul>\n<li>:link 未访问的超连接</li>\n<li>:visited  已访问的超连接</li>\n</ul>\n</li>\n<li><p>动态伪类</p>\n<ul>\n<li>:focus 拥有焦点的元素（可以接受键盘输入或者能已某种方式激活的元素）</li>\n<li>:hover 鼠标指针悬停的元素</li>\n<li>:active 用户输入激活的元素</li>\n</ul>\n</li>\n<li><p>静态伪类</p>\n<ul>\n<li>:first-child 第一个子元素</li>\n<li>:first-letter 第一个字母</li>\n<li>:first-line 第一行</li>\n<li>:lang(fr) 根据语言选择</li>\n</ul>\n</li>\n<li>:first-letter和:first-line只能用于标记或段落之类的块元素，不能用于超连接等行内元素。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三章-结构和层叠\"><a href=\"#第三章-结构和层叠\" class=\"headerlink\" title=\"第三章 结构和层叠\"></a>第三章 结构和层叠</h2><ul>\n<li><p>选择器的特殊性</p>\n<ul>\n<li><p>给定的各个ID属性值，加0，1，0，0</p>\n</li>\n<li><p>给形的各个类的属性值，属性选择或者伪类，加0，0，1，0</p>\n</li>\n<li><p>给定的各个元素和伪元素加0，0，0，1</p>\n</li>\n<li><p>结合符和通配选择器对特属性没有任何贡献</p>\n</li>\n</ul>\n</li>\n<li><p>样式继承</p>\n<ul>\n<li>文本颜色可被继承</li>\n<li><p>border不能被继承，一般的大多数框模型属性不能被继承（包括外边框，内边距，背景和边框）</p>\n</li>\n<li><p>继承的值没有特殊性，连0特殊性都没有p(61)，因此需要避免不加区别的使用通配选择器。</p>\n</li>\n</ul>\n</li>\n<li><p>层叠权重大小顺序</p>\n<ul>\n<li><p>读者的重要声明</p>\n</li>\n<li><p>创作人员的重要声明</p>\n</li>\n<li><p>创作人员的正常声明</p>\n</li>\n<li><p>读者的正常声明</p>\n</li>\n<li><p>用户代理声明</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第四章-值和单位\"><a href=\"#第四章-值和单位\" class=\"headerlink\" title=\"第四章 值和单位\"></a>第四章 值和单位</h2><ul>\n<li><p>颜色表示</p>\n<ul>\n<li><p>命名颜色 {color: gray;}</p>\n</li>\n<li><p>函数式RGB {color: rgb(100%, 50%, 50%);}，或者{color: rgb(52, 95, 153);}</p>\n</li>\n<li><p>十六进制RGB {color: #ff0000;} 如果3组各自成对，可以简写#f00，相当于#ff0000</p>\n</li>\n</ul>\n</li>\n<li><p>WEB安全颜色</p>\n<ul>\n<li><p>RGB百分表示法，能被20整除的颜色，如rgb(60, 40, 120)</p>\n</li>\n<li><p>十六进制，使用00，33，66，99，cc，ff，如#99ffcc</p>\n</li>\n</ul>\n</li>\n<li><p>长度单位</p>\n<ul>\n<li><p>绝对长度单位 在打印文档的样式表时更为有用，Web设计中不使用绝对长度单位。</p>\n<ul>\n<li><p>英寸 (in)</p>\n</li>\n<li><p>厘米(cm) 1in = 2.54cm</p>\n</li>\n<li><p>毫米(mm) 1in = 25.4mm</p>\n</li>\n<li><p>点(pt) 1in = 72pt</p>\n</li>\n<li><p>派卡(pc)  1pc = 12pt, 6pc = 1in</p>\n</li>\n</ul>\n</li>\n<li><p>相对长度单位</p>\n<ul>\n<li>em (em-height) 1em定义未一种给定字体的font-size的值，随元素的不同而不同，国外最常用，也是未来的趋势，更容易适配移动端。</li>\n<li>ex (x-height) 1ex定位未一种给定字体的小写x的高度，不同字体ex的值不同。</li>\n<li>px像素</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第五章-字体\"><a href=\"#第五章-字体\" class=\"headerlink\" title=\"第五章 字体\"></a>第五章 字体</h2><p>css定义了5中通用字体</p>\n<ul>\n<li>Serif 成比例的有上下短线的字体</li>\n<li>Sans-serif 成比例的，没有上下短线</li>\n<li>Monospace 不成比例，通常用于模拟打字机打出的问题</li>\n<li>Cursive  手写体</li>\n<li>Fantasy 无法用任何特征来定义的字体</li>\n</ul>\n<p>特定字体：如Times，Verdana, Helvetica, Arial等，每一种特定的字体都会落入上述通用系列中。</p>\n<ul>\n<li>font-family 如h1 {font-family: Georgia, serif}, Georgia是特定字体，serif是通用字体。</li>\n<li>font-weight<ul>\n<li>normal</li>\n<li>bold</li>\n<li>bolder</li>\n<li>lighter</li>\n<li>100/200/300/400/500/600/700/800/900</li>\n</ul>\n</li>\n<li>font-size<ul>\n<li>xx-small/x-small/small/medium/large/x-large/xx-large/smaller/larger</li>\n<li>&lt;length&gt;/&lt;percentage&gt;</li>\n</ul>\n</li>\n<li>font-style字体风格<ul>\n<li>italic/oblique/normal/inherit</li>\n</ul>\n</li>\n<li>font-variant 字体变形<ul>\n<li>small-caps 首字母大写</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第六章-文本属性\"><a href=\"#第六章-文本属性\" class=\"headerlink\" title=\"第六章 文本属性\"></a>第六章 文本属性</h2><ul>\n<li>text-indent 首行缩进<ul>\n<li>&lt;length&gt; 如：p {text-indent: 3em}</li>\n<li>&lt;percentag&gt; 相对于父元素宽度</li>\n<li>inhert</li>\n</ul>\n</li>\n<li>text-align 水平对齐<ul>\n<li>left</li>\n<li>right</li>\n<li>center</li>\n<li>justify 两端对齐，在打印领域很常见</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>line-height 行高，定义了基线之间的距离，而不是字体大小，可以控制行间距。行间距=行高-字体大小<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n<li>&lt;number&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>vertical-align 行内元素和表单元格的垂直方向对齐<ul>\n<li>base-line 基线对齐，元素的底端和副元素的基线对齐</li>\n<li>sub/super 上标/下标，相对于基线升高/降低</li>\n<li>bottom 元素行内框的底端和行框的底端对齐</li>\n<li>text-bottom 元素行内框的底端和文本的底端对齐</li>\n<li>top 与bottom相反</li>\n<li>text-top 与text-bottom相反</li>\n<li>middle 居中对齐</li>\n<li>&lt;percentage&gt;</li>\n<li>&lt;length&gt;</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>word-spacing 字间隔<ul>\n<li>&lt;length&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>letter-spacing 字母间隔<ul>\n<li>&lt;length&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>text-transform<ul>\n<li>uppercase 全大写</li>\n<li>lowercase 全小写</li>\n<li>capitalize 单词首字母大写</li>\n<li>none</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>text-decoration 文字效果<ul>\n<li>none</li>\n<li>underline 下划线</li>\n<li>overline 上划线</li>\n<li>line-through 中划线</li>\n<li>blink</li>\n<li>inherit</li>\n</ul>\n</li>\n<li><p>text-shadow</p>\n<ul>\n<li><p>none</p>\n</li>\n<li><p>颜色值和三个长度值 text-shadow: silver 2px 2px 2px;</p>\n</li>\n</ul>\n</li>\n<li>white-space<ul>\n<li>normal 合并空白符，忽略换行符，允许自动换行。</li>\n<li>nowrap 合并空白符，忽略换行符号，不允许自动换行。</li>\n<li>pre 保留空白符号，保留换行符号，不允许自动换行。</li>\n<li>pre-wrap 保留空白符，保留换行符，允许自动换行。</li>\n<li>pre-line 合并空白符，保留换行符，允许自动换行。</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>direction 文本方向<ul>\n<li>ltr</li>\n<li>rtl</li>\n<li>inherit</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第七章-基本视觉格式化\"><a href=\"#第七章-基本视觉格式化\" class=\"headerlink\" title=\"第七章 基本视觉格式化\"></a>第七章 基本视觉格式化</h2><p>水平格式化<br>七大水平属性</p>\n<ul>\n<li>margin-left</li>\n<li>border-left</li>\n<li>padding-left</li>\n<li>width</li>\n<li>padding-right</li>\n<li>border-right</li>\n<li>maring-right</li>\n</ul>\n<p>这7个属性值加起来就是元素包含块的宽度，这往往是副元素的width值。<br>width就是左内边距到右内边距的距离。<br>这7个属性中，只有3个属性可以设置为auto: margin-left, width, margin-right，可以用auto弥补实际值和所需总和的差距。如果三个值都为非auto的某个值，这些格式化属性过分受限，此时会强制设置margin-right为auto.<br>不止一个auto的情况：</p>\n<ul>\n<li>margin-left和margin-right为auto，此时元素居中，与text-align:center的区别，text-align只应用块级元素的内联内容，并不能使元素居中。</li>\n<li>margin-left和width为auto，此时margin-left为0，width会填满剩余包块。</li>\n<li>margin-right和width为auto，此时margin-right为0，width填满剩余包块。</li>\n<li>margin-left和margin-right和width都为auto，此时margin-left和margin-right都为0,width会填满包块。这种情况和默认是相同的。</li>\n</ul>\n<p>水平外边距不会合并，父元素的内边距，边距和外边距可能影响子元素。</p>\n<p>负外边距<br>   负外边距时，  会使得内容宽度超出包块，因为根据等式父包块width=7大水平之和，margin-left或margin-right为负时，width要增大。</p>\n<p>垂直格式化<br>如果元素的内容的高度，大于元素框的高度，用户代理的具体行为将取决于overflow属性。<br>垂直格式化的七大属性</p>\n<ul>\n<li>margin-top</li>\n<li>border-top</li>\n<li>padding-top</li>\n<li>height</li>\n<li>padding-bottom</li>\n<li>border-bottom</li>\n<li>margin-bottom</li>\n</ul>\n<p>这7个属性值的值和必须等于含块的height，其中，3个值可以设置为auto，margin-top，height，margin-bottom，如果margin-top或margin-bottom设置为auto则自动计算0，这就是为什么不容易设置元素为垂直居中，这与水平时不一样的。对于定位元素，上下边距为auto时，处理不同。</p>\n<p>如果没有显式声明包含块的height，百分数高度为重置为auto，如果块级中场元素的height设置为auto，显示时的高度将恰好足以包含其内联内容。<br>如果块级正常流元素高度设置为auto，而且只有块级子元素，其默认高度将是从最高块级子元素的外边框边界到最低块级子元素外边框边界之间的距离。<br>不过，如果块级元素有padding或者border，则高度则是最高子元素的上外边距到其最低子元素的下外边距边界之间的距离。</p>\n<p>合并垂直外边距<br>垂直合并只引用与外边距，不会应用于内边距和边框。<br>负的下外边距会使段落看上去向下拉，负的上边会使段落看上去向上拉。</p>\n<h2 id=\"第八章-内边距、边框和外边距\"><a href=\"#第八章-内边距、边框和外边距\" class=\"headerlink\" title=\"第八章 内边距、边框和外边距\"></a>第八章 内边距、边框和外边距</h2><ul>\n<li><p>border-style</p>\n<ul>\n<li>none</li>\n<li>hidden</li>\n<li>dotted</li>\n<li>dashed</li>\n<li>solid</li>\n<li>double</li>\n<li>groove</li>\n<li>ridge</li>\n<li>inset</li>\n<li>outset</li>\n</ul>\n</li>\n<li><p>设置多个边框样式 p.asize {boder-style:  solid dashed dotted solid;}</p>\n</li>\n<li>boder-top-style/boder-right-style/border-bottom-style/border-left-style 单独设置边框样式</li>\n<li>border-width边框宽度<ul>\n<li>thin</li>\n<li>medium</li>\n<li>thick</li>\n<li>&lt;length&gt;</li>\n</ul>\n</li>\n<li>border-top-width/border-right-width/border-bottom-width/border-left-width单独设置宽度</li>\n<li>boder-color边框颜色<ul>\n<li>&lt;color&gt;</li>\n<li>transparent 透明</li>\n</ul>\n</li>\n<li>border-top-color/border-right-color/border-bottom-color/border-left-color单独设置颜色</li>\n<li>border-top/boder-right/border-bottom/border-left单独设置边框<ul>\n<li>[&lt;border-width&gt;] [&lt;border-style&gt;][boder-color]</li>\n</ul>\n</li>\n<li>border 全局边框，应用到四条边<ul>\n<li>[&lt;border-width&gt;] [&lt;border-style&gt;][boder-color]</li>\n</ul>\n</li>\n</ul>\n<p>对于只包含文本的行，能改变行间距离的属性只有line-height, font-size和vertical-align。<br>行内元素使用正左右外边距，可以多出来水平空间，负的左右外边距会使行内元素与其他内容重叠。<br>行内元素的边框，不会改变行高。<br>行内元素使用正的左右边框可以多出来水平空间。</p>\n<ul>\n<li>padding 内边距<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n</ul>\n</li>\n</ul>\n<p>行内非替换元素使用左右内边距时，可以多出来水平空间，而上下边距不会改变行高。<br>可以想图像使用内边距,外边距，边框时，它可以改变行高，也可以水平方向留出距离。</p>\n<ul>\n<li>background-color 背景元素<ul>\n<li>&lt;color&gt;</li>\n<li>transparent</li>\n</ul>\n</li>\n<li>background-image 如body {background-image: url(bg23.gif)}<ul>\n<li>&lt;uri&gt;</li>\n<li>none</li>\n</ul>\n</li>\n<li>background-repeat 有方向的重复<ul>\n<li>repeat</li>\n<li>repeat-x</li>\n<li>repeat-y</li>\n<li>no-repeat</li>\n</ul>\n</li>\n<li>background-position 背景定位<ul>\n<li>&lt;percentage&gt;</li>\n<li>&lt;length&gt;</li>\n<li>left/center/right/top/bottom</li>\n</ul>\n</li>\n</ul>\n<p>background-position单个关键字等价<br>center: cener center<br>top: top center或者center top<br>bottom: bottom center或者center bottom<br>left: left center 或者center left<br>right: right center 或者center right</p>\n<ul>\n<li><p>background-attachment</p>\n<ul>\n<li>scroll 跟随文档滚动</li>\n<li>fixed 不跟随文档滚动</li>\n</ul>\n</li>\n<li><p>background 简写属性</p>\n<ul>\n<li>&lt;background-color&gt; || &lt;background-image&gt; || &lt;backgroud-repeat&gt; || &lt;background-attachment&gt; || &lt;background-position&gt;</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第十章-浮动和定位\"><a href=\"#第十章-浮动和定位\" class=\"headerlink\" title=\"第十章 浮动和定位\"></a>第十章 浮动和定位</h2><ul>\n<li>float<ul>\n<li>left</li>\n<li>right</li>\n<li>none</li>\n</ul>\n</li>\n</ul>\n<p>浮动元素会从文档的正常流中删除，它还是会影响布局。其他内容会环绕元素，浮动元素的外边距不会合并</p>\n<ul>\n<li><p>position</p>\n<ul>\n<li>static 默认 块元素生成一个矩形框，行内元素创建一个或多个行框，置于父元素中</li>\n<li>relative 元素偏移某个距离，元素仍保持未定位前的形状，它原本占据的空间仍保留</li>\n<li>absolute 元素框从文档流中完全删除，并相对于其包含块定位。</li>\n<li>fixed 元素的表现类似于absolute，不过，其包含块是视窗本身。</li>\n</ul>\n</li>\n<li><p>偏移属性，在position为relative,absolute和fixed时，可以设置偏移属性top right bottom left</p>\n<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n<li>auto 初始值</li>\n</ul>\n</li>\n</ul>\n<p>包含块</p>\n<p>根元素的包含块，由用户代理建立，即html元素或body元素<br>对于一个非根元素，如果其position时relative或static，包含块则由最近的块级框，表单元格或行内块祖先框的内容边界构成。<br>对于一个非根元素，如果其position时absolute，包含块则由最近的position值不是static的祖先元素。</p>\n<ul>\n<li>overflow<ul>\n<li>visible</li>\n<li>hidden</li>\n<li>scroll</li>\n<li>auto</li>\n</ul>\n</li>\n</ul>\n","excerpt":"<h2 id=\"第一章-css和文档\"><a href=\"#第一章-css和文档\" class=\"headerlink\" title=\"第一章 css和文档\"></a>第一章 css和文档</h2><ul>\n<li><p>文档内定义样式</p>\n<pre><code>&lt;style type=&quot;text/css&quot;&gt;\n    @import url(sheet2.css)\n    h1 {color: maroon;}\n&lt;/style&gt;\n</code></pre></li>\n<li><p>引入css文件</p>\n<pre><code>&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;sheet1.css&quot; media=&quot;all&quot; /&gt;\n</code></pre></li>\n</ul>","more":"<h2 id=\"第二章-选择器\"><a href=\"#第二章-选择器\" class=\"headerlink\" title=\"第二章 选择器\"></a>第二章 选择器</h2><ul>\n<li>ID选择器和指定id的属性选择器不是一回事，h1#page-title和h1[id=”page-title”]之间有差别。</li>\n<li><p>p.warning和p[class~=”warning”]是等价的，但是p[class=”warning”]匹配只有一个class的p元素。</p>\n<ul>\n<li>类似的还有[foo^=”bar”] 选择foo属性值以bar开头的所有元素</li>\n<li>[foo$=”bar”] 选择foo属性值以bar结尾的所有元素</li>\n<li>[foo*=”bar”] 选择foo属性值中含有bar子串的所有元素</li>\n</ul>\n</li>\n<li><p>后代选择器中，两个元素之间的层次间隔可以是无限的，如果想匹配直接相连的父子元素，可以使用子结合符”&gt;”</p>\n</li>\n<li><p>兄弟元素选择器 h1 +  p {margin-top: 0}</p>\n</li>\n<li><p>伪类选择器，伪类的顺序很重要 link-visited-focus-hover-active</p>\n<ul>\n<li><p>连接伪类</p>\n<ul>\n<li>:link 未访问的超连接</li>\n<li>:visited  已访问的超连接</li>\n</ul>\n</li>\n<li><p>动态伪类</p>\n<ul>\n<li>:focus 拥有焦点的元素（可以接受键盘输入或者能已某种方式激活的元素）</li>\n<li>:hover 鼠标指针悬停的元素</li>\n<li>:active 用户输入激活的元素</li>\n</ul>\n</li>\n<li><p>静态伪类</p>\n<ul>\n<li>:first-child 第一个子元素</li>\n<li>:first-letter 第一个字母</li>\n<li>:first-line 第一行</li>\n<li>:lang(fr) 根据语言选择</li>\n</ul>\n</li>\n<li>:first-letter和:first-line只能用于标记或段落之类的块元素，不能用于超连接等行内元素。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三章-结构和层叠\"><a href=\"#第三章-结构和层叠\" class=\"headerlink\" title=\"第三章 结构和层叠\"></a>第三章 结构和层叠</h2><ul>\n<li><p>选择器的特殊性</p>\n<ul>\n<li><p>给定的各个ID属性值，加0，1，0，0</p>\n</li>\n<li><p>给形的各个类的属性值，属性选择或者伪类，加0，0，1，0</p>\n</li>\n<li><p>给定的各个元素和伪元素加0，0，0，1</p>\n</li>\n<li><p>结合符和通配选择器对特属性没有任何贡献</p>\n</li>\n</ul>\n</li>\n<li><p>样式继承</p>\n<ul>\n<li>文本颜色可被继承</li>\n<li><p>border不能被继承，一般的大多数框模型属性不能被继承（包括外边框，内边距，背景和边框）</p>\n</li>\n<li><p>继承的值没有特殊性，连0特殊性都没有p(61)，因此需要避免不加区别的使用通配选择器。</p>\n</li>\n</ul>\n</li>\n<li><p>层叠权重大小顺序</p>\n<ul>\n<li><p>读者的重要声明</p>\n</li>\n<li><p>创作人员的重要声明</p>\n</li>\n<li><p>创作人员的正常声明</p>\n</li>\n<li><p>读者的正常声明</p>\n</li>\n<li><p>用户代理声明</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第四章-值和单位\"><a href=\"#第四章-值和单位\" class=\"headerlink\" title=\"第四章 值和单位\"></a>第四章 值和单位</h2><ul>\n<li><p>颜色表示</p>\n<ul>\n<li><p>命名颜色 {color: gray;}</p>\n</li>\n<li><p>函数式RGB {color: rgb(100%, 50%, 50%);}，或者{color: rgb(52, 95, 153);}</p>\n</li>\n<li><p>十六进制RGB {color: #ff0000;} 如果3组各自成对，可以简写#f00，相当于#ff0000</p>\n</li>\n</ul>\n</li>\n<li><p>WEB安全颜色</p>\n<ul>\n<li><p>RGB百分表示法，能被20整除的颜色，如rgb(60, 40, 120)</p>\n</li>\n<li><p>十六进制，使用00，33，66，99，cc，ff，如#99ffcc</p>\n</li>\n</ul>\n</li>\n<li><p>长度单位</p>\n<ul>\n<li><p>绝对长度单位 在打印文档的样式表时更为有用，Web设计中不使用绝对长度单位。</p>\n<ul>\n<li><p>英寸 (in)</p>\n</li>\n<li><p>厘米(cm) 1in = 2.54cm</p>\n</li>\n<li><p>毫米(mm) 1in = 25.4mm</p>\n</li>\n<li><p>点(pt) 1in = 72pt</p>\n</li>\n<li><p>派卡(pc)  1pc = 12pt, 6pc = 1in</p>\n</li>\n</ul>\n</li>\n<li><p>相对长度单位</p>\n<ul>\n<li>em (em-height) 1em定义未一种给定字体的font-size的值，随元素的不同而不同，国外最常用，也是未来的趋势，更容易适配移动端。</li>\n<li>ex (x-height) 1ex定位未一种给定字体的小写x的高度，不同字体ex的值不同。</li>\n<li>px像素</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第五章-字体\"><a href=\"#第五章-字体\" class=\"headerlink\" title=\"第五章 字体\"></a>第五章 字体</h2><p>css定义了5中通用字体</p>\n<ul>\n<li>Serif 成比例的有上下短线的字体</li>\n<li>Sans-serif 成比例的，没有上下短线</li>\n<li>Monospace 不成比例，通常用于模拟打字机打出的问题</li>\n<li>Cursive  手写体</li>\n<li>Fantasy 无法用任何特征来定义的字体</li>\n</ul>\n<p>特定字体：如Times，Verdana, Helvetica, Arial等，每一种特定的字体都会落入上述通用系列中。</p>\n<ul>\n<li>font-family 如h1 {font-family: Georgia, serif}, Georgia是特定字体，serif是通用字体。</li>\n<li>font-weight<ul>\n<li>normal</li>\n<li>bold</li>\n<li>bolder</li>\n<li>lighter</li>\n<li>100/200/300/400/500/600/700/800/900</li>\n</ul>\n</li>\n<li>font-size<ul>\n<li>xx-small/x-small/small/medium/large/x-large/xx-large/smaller/larger</li>\n<li>&lt;length&gt;/&lt;percentage&gt;</li>\n</ul>\n</li>\n<li>font-style字体风格<ul>\n<li>italic/oblique/normal/inherit</li>\n</ul>\n</li>\n<li>font-variant 字体变形<ul>\n<li>small-caps 首字母大写</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第六章-文本属性\"><a href=\"#第六章-文本属性\" class=\"headerlink\" title=\"第六章 文本属性\"></a>第六章 文本属性</h2><ul>\n<li>text-indent 首行缩进<ul>\n<li>&lt;length&gt; 如：p {text-indent: 3em}</li>\n<li>&lt;percentag&gt; 相对于父元素宽度</li>\n<li>inhert</li>\n</ul>\n</li>\n<li>text-align 水平对齐<ul>\n<li>left</li>\n<li>right</li>\n<li>center</li>\n<li>justify 两端对齐，在打印领域很常见</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>line-height 行高，定义了基线之间的距离，而不是字体大小，可以控制行间距。行间距=行高-字体大小<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n<li>&lt;number&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>vertical-align 行内元素和表单元格的垂直方向对齐<ul>\n<li>base-line 基线对齐，元素的底端和副元素的基线对齐</li>\n<li>sub/super 上标/下标，相对于基线升高/降低</li>\n<li>bottom 元素行内框的底端和行框的底端对齐</li>\n<li>text-bottom 元素行内框的底端和文本的底端对齐</li>\n<li>top 与bottom相反</li>\n<li>text-top 与text-bottom相反</li>\n<li>middle 居中对齐</li>\n<li>&lt;percentage&gt;</li>\n<li>&lt;length&gt;</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>word-spacing 字间隔<ul>\n<li>&lt;length&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>letter-spacing 字母间隔<ul>\n<li>&lt;length&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>text-transform<ul>\n<li>uppercase 全大写</li>\n<li>lowercase 全小写</li>\n<li>capitalize 单词首字母大写</li>\n<li>none</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>text-decoration 文字效果<ul>\n<li>none</li>\n<li>underline 下划线</li>\n<li>overline 上划线</li>\n<li>line-through 中划线</li>\n<li>blink</li>\n<li>inherit</li>\n</ul>\n</li>\n<li><p>text-shadow</p>\n<ul>\n<li><p>none</p>\n</li>\n<li><p>颜色值和三个长度值 text-shadow: silver 2px 2px 2px;</p>\n</li>\n</ul>\n</li>\n<li>white-space<ul>\n<li>normal 合并空白符，忽略换行符，允许自动换行。</li>\n<li>nowrap 合并空白符，忽略换行符号，不允许自动换行。</li>\n<li>pre 保留空白符号，保留换行符号，不允许自动换行。</li>\n<li>pre-wrap 保留空白符，保留换行符，允许自动换行。</li>\n<li>pre-line 合并空白符，保留换行符，允许自动换行。</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>direction 文本方向<ul>\n<li>ltr</li>\n<li>rtl</li>\n<li>inherit</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第七章-基本视觉格式化\"><a href=\"#第七章-基本视觉格式化\" class=\"headerlink\" title=\"第七章 基本视觉格式化\"></a>第七章 基本视觉格式化</h2><p>水平格式化<br>七大水平属性</p>\n<ul>\n<li>margin-left</li>\n<li>border-left</li>\n<li>padding-left</li>\n<li>width</li>\n<li>padding-right</li>\n<li>border-right</li>\n<li>maring-right</li>\n</ul>\n<p>这7个属性值加起来就是元素包含块的宽度，这往往是副元素的width值。<br>width就是左内边距到右内边距的距离。<br>这7个属性中，只有3个属性可以设置为auto: margin-left, width, margin-right，可以用auto弥补实际值和所需总和的差距。如果三个值都为非auto的某个值，这些格式化属性过分受限，此时会强制设置margin-right为auto.<br>不止一个auto的情况：</p>\n<ul>\n<li>margin-left和margin-right为auto，此时元素居中，与text-align:center的区别，text-align只应用块级元素的内联内容，并不能使元素居中。</li>\n<li>margin-left和width为auto，此时margin-left为0，width会填满剩余包块。</li>\n<li>margin-right和width为auto，此时margin-right为0，width填满剩余包块。</li>\n<li>margin-left和margin-right和width都为auto，此时margin-left和margin-right都为0,width会填满包块。这种情况和默认是相同的。</li>\n</ul>\n<p>水平外边距不会合并，父元素的内边距，边距和外边距可能影响子元素。</p>\n<p>负外边距<br>   负外边距时，  会使得内容宽度超出包块，因为根据等式父包块width=7大水平之和，margin-left或margin-right为负时，width要增大。</p>\n<p>垂直格式化<br>如果元素的内容的高度，大于元素框的高度，用户代理的具体行为将取决于overflow属性。<br>垂直格式化的七大属性</p>\n<ul>\n<li>margin-top</li>\n<li>border-top</li>\n<li>padding-top</li>\n<li>height</li>\n<li>padding-bottom</li>\n<li>border-bottom</li>\n<li>margin-bottom</li>\n</ul>\n<p>这7个属性值的值和必须等于含块的height，其中，3个值可以设置为auto，margin-top，height，margin-bottom，如果margin-top或margin-bottom设置为auto则自动计算0，这就是为什么不容易设置元素为垂直居中，这与水平时不一样的。对于定位元素，上下边距为auto时，处理不同。</p>\n<p>如果没有显式声明包含块的height，百分数高度为重置为auto，如果块级中场元素的height设置为auto，显示时的高度将恰好足以包含其内联内容。<br>如果块级正常流元素高度设置为auto，而且只有块级子元素，其默认高度将是从最高块级子元素的外边框边界到最低块级子元素外边框边界之间的距离。<br>不过，如果块级元素有padding或者border，则高度则是最高子元素的上外边距到其最低子元素的下外边距边界之间的距离。</p>\n<p>合并垂直外边距<br>垂直合并只引用与外边距，不会应用于内边距和边框。<br>负的下外边距会使段落看上去向下拉，负的上边会使段落看上去向上拉。</p>\n<h2 id=\"第八章-内边距、边框和外边距\"><a href=\"#第八章-内边距、边框和外边距\" class=\"headerlink\" title=\"第八章 内边距、边框和外边距\"></a>第八章 内边距、边框和外边距</h2><ul>\n<li><p>border-style</p>\n<ul>\n<li>none</li>\n<li>hidden</li>\n<li>dotted</li>\n<li>dashed</li>\n<li>solid</li>\n<li>double</li>\n<li>groove</li>\n<li>ridge</li>\n<li>inset</li>\n<li>outset</li>\n</ul>\n</li>\n<li><p>设置多个边框样式 p.asize {boder-style:  solid dashed dotted solid;}</p>\n</li>\n<li>boder-top-style/boder-right-style/border-bottom-style/border-left-style 单独设置边框样式</li>\n<li>border-width边框宽度<ul>\n<li>thin</li>\n<li>medium</li>\n<li>thick</li>\n<li>&lt;length&gt;</li>\n</ul>\n</li>\n<li>border-top-width/border-right-width/border-bottom-width/border-left-width单独设置宽度</li>\n<li>boder-color边框颜色<ul>\n<li>&lt;color&gt;</li>\n<li>transparent 透明</li>\n</ul>\n</li>\n<li>border-top-color/border-right-color/border-bottom-color/border-left-color单独设置颜色</li>\n<li>border-top/boder-right/border-bottom/border-left单独设置边框<ul>\n<li>[&lt;border-width&gt;] [&lt;border-style&gt;][boder-color]</li>\n</ul>\n</li>\n<li>border 全局边框，应用到四条边<ul>\n<li>[&lt;border-width&gt;] [&lt;border-style&gt;][boder-color]</li>\n</ul>\n</li>\n</ul>\n<p>对于只包含文本的行，能改变行间距离的属性只有line-height, font-size和vertical-align。<br>行内元素使用正左右外边距，可以多出来水平空间，负的左右外边距会使行内元素与其他内容重叠。<br>行内元素的边框，不会改变行高。<br>行内元素使用正的左右边框可以多出来水平空间。</p>\n<ul>\n<li>padding 内边距<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n</ul>\n</li>\n</ul>\n<p>行内非替换元素使用左右内边距时，可以多出来水平空间，而上下边距不会改变行高。<br>可以想图像使用内边距,外边距，边框时，它可以改变行高，也可以水平方向留出距离。</p>\n<ul>\n<li>background-color 背景元素<ul>\n<li>&lt;color&gt;</li>\n<li>transparent</li>\n</ul>\n</li>\n<li>background-image 如body {background-image: url(bg23.gif)}<ul>\n<li>&lt;uri&gt;</li>\n<li>none</li>\n</ul>\n</li>\n<li>background-repeat 有方向的重复<ul>\n<li>repeat</li>\n<li>repeat-x</li>\n<li>repeat-y</li>\n<li>no-repeat</li>\n</ul>\n</li>\n<li>background-position 背景定位<ul>\n<li>&lt;percentage&gt;</li>\n<li>&lt;length&gt;</li>\n<li>left/center/right/top/bottom</li>\n</ul>\n</li>\n</ul>\n<p>background-position单个关键字等价<br>center: cener center<br>top: top center或者center top<br>bottom: bottom center或者center bottom<br>left: left center 或者center left<br>right: right center 或者center right</p>\n<ul>\n<li><p>background-attachment</p>\n<ul>\n<li>scroll 跟随文档滚动</li>\n<li>fixed 不跟随文档滚动</li>\n</ul>\n</li>\n<li><p>background 简写属性</p>\n<ul>\n<li>&lt;background-color&gt; || &lt;background-image&gt; || &lt;backgroud-repeat&gt; || &lt;background-attachment&gt; || &lt;background-position&gt;</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第十章-浮动和定位\"><a href=\"#第十章-浮动和定位\" class=\"headerlink\" title=\"第十章 浮动和定位\"></a>第十章 浮动和定位</h2><ul>\n<li>float<ul>\n<li>left</li>\n<li>right</li>\n<li>none</li>\n</ul>\n</li>\n</ul>\n<p>浮动元素会从文档的正常流中删除，它还是会影响布局。其他内容会环绕元素，浮动元素的外边距不会合并</p>\n<ul>\n<li><p>position</p>\n<ul>\n<li>static 默认 块元素生成一个矩形框，行内元素创建一个或多个行框，置于父元素中</li>\n<li>relative 元素偏移某个距离，元素仍保持未定位前的形状，它原本占据的空间仍保留</li>\n<li>absolute 元素框从文档流中完全删除，并相对于其包含块定位。</li>\n<li>fixed 元素的表现类似于absolute，不过，其包含块是视窗本身。</li>\n</ul>\n</li>\n<li><p>偏移属性，在position为relative,absolute和fixed时，可以设置偏移属性top right bottom left</p>\n<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n<li>auto 初始值</li>\n</ul>\n</li>\n</ul>\n<p>包含块</p>\n<p>根元素的包含块，由用户代理建立，即html元素或body元素<br>对于一个非根元素，如果其position时relative或static，包含块则由最近的块级框，表单元格或行内块祖先框的内容边界构成。<br>对于一个非根元素，如果其position时absolute，包含块则由最近的position值不是static的祖先元素。</p>\n<ul>\n<li>overflow<ul>\n<li>visible</li>\n<li>hidden</li>\n<li>scroll</li>\n<li>auto</li>\n</ul>\n</li>\n</ul>"},{"title":".gitignore无效，不能过滤某些文件","date":"2016-11-06T10:03:31.000Z","_content":"\n利用.gitignore过滤文件，如编译过程中的中间文件，等等，这些文件不需要被追踪管理。\n\n现象：\n\n在.gitignore添加file1文件，以过滤该文件，但是通过Git status查看仍显示file1文件的状态。\n\n<!--more-->\n\n原因：\n\n在git库中已存在了这个文件，之前push提交过该文件。\n\n.gitignore文件只对还没有加入版本管理的文件起作用，如果之前已经用git把这些文件纳入了版本库，就不起作用了\n\n解决：\n\n需要在git库中删除该文件，并更新。\n\n然后再次git status查看状态，file1文件不再显示状态。\n","source":"_posts/gitignore无效，不能过滤某些文件.md","raw":"---\ntitle: .gitignore无效，不能过滤某些文件\ndate: 2016-11-6 18:03:31\ntags: [git, .gitignore]\n---\n\n利用.gitignore过滤文件，如编译过程中的中间文件，等等，这些文件不需要被追踪管理。\n\n现象：\n\n在.gitignore添加file1文件，以过滤该文件，但是通过Git status查看仍显示file1文件的状态。\n\n<!--more-->\n\n原因：\n\n在git库中已存在了这个文件，之前push提交过该文件。\n\n.gitignore文件只对还没有加入版本管理的文件起作用，如果之前已经用git把这些文件纳入了版本库，就不起作用了\n\n解决：\n\n需要在git库中删除该文件，并更新。\n\n然后再次git status查看状态，file1文件不再显示状态。\n","slug":"gitignore无效，不能过滤某些文件","published":1,"updated":"2016-11-21T02:37:41.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxg1t3h000c0cny2sb0jc0s","content":"<p>利用.gitignore过滤文件，如编译过程中的中间文件，等等，这些文件不需要被追踪管理。</p>\n<p>现象：</p>\n<p>在.gitignore添加file1文件，以过滤该文件，但是通过Git status查看仍显示file1文件的状态。</p>\n<a id=\"more\"></a>\n<p>原因：</p>\n<p>在git库中已存在了这个文件，之前push提交过该文件。</p>\n<p>.gitignore文件只对还没有加入版本管理的文件起作用，如果之前已经用git把这些文件纳入了版本库，就不起作用了</p>\n<p>解决：</p>\n<p>需要在git库中删除该文件，并更新。</p>\n<p>然后再次git status查看状态，file1文件不再显示状态。</p>\n","excerpt":"<p>利用.gitignore过滤文件，如编译过程中的中间文件，等等，这些文件不需要被追踪管理。</p>\n<p>现象：</p>\n<p>在.gitignore添加file1文件，以过滤该文件，但是通过Git status查看仍显示file1文件的状态。</p>","more":"<p>原因：</p>\n<p>在git库中已存在了这个文件，之前push提交过该文件。</p>\n<p>.gitignore文件只对还没有加入版本管理的文件起作用，如果之前已经用git把这些文件纳入了版本库，就不起作用了</p>\n<p>解决：</p>\n<p>需要在git库中删除该文件，并更新。</p>\n<p>然后再次git status查看状态，file1文件不再显示状态。</p>"},{"title":"git配置user.name和user.email","date":"2016-11-15T10:02:54.000Z","_content":"\ngithub在统计提交的时候，会判断邮箱是否跟github的登陆邮箱匹配，不匹配则不计算活跃度，即不生成小绿块。\n\n获取配置\n```\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email\naaa@aaa.com\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.name\naaa\n```\n<!--more-->\n\n设置当前仓库的user.name/user.email\n```\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa@aaa.com\n```\n设置全局user.name/user.email\n```\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.name yinlijun\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.email yinlijun2004@gmail.com\n```\n如果当前仓库未设置user.name/user.email则采用全局的user.name/user.email，否则当前仓库的user.name/user.email会覆盖全局的user.name/user.email。","source":"_posts/git配置user-name和user-email.md","raw":"---\ntitle: git配置user.name和user.email\ndate: 2016-11-15 18:02:54\ntags: git\n---\n\ngithub在统计提交的时候，会判断邮箱是否跟github的登陆邮箱匹配，不匹配则不计算活跃度，即不生成小绿块。\n\n获取配置\n```\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email\naaa@aaa.com\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.name\naaa\n```\n<!--more-->\n\n设置当前仓库的user.name/user.email\n```\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa@aaa.com\n```\n设置全局user.name/user.email\n```\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.name yinlijun\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.email yinlijun2004@gmail.com\n```\n如果当前仓库未设置user.name/user.email则采用全局的user.name/user.email，否则当前仓库的user.name/user.email会覆盖全局的user.name/user.email。","slug":"git配置user-name和user-email","published":1,"updated":"2016-11-21T02:37:41.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxg1t47000f0cny3uc4sfcj","content":"<p>github在统计提交的时候，会判断邮箱是否跟github的登陆邮箱匹配，不匹配则不计算活跃度，即不生成小绿块。</p>\n<p>获取配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email</div><div class=\"line\">aaa@aaa.com</div><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.name</div><div class=\"line\">aaa</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>设置当前仓库的user.name/user.email<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa</div><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa@aaa.com</div></pre></td></tr></table></figure></p>\n<p>设置全局user.name/user.email<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.name yinlijun</div><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.email yinlijun2004@gmail.com</div></pre></td></tr></table></figure></p>\n<p>如果当前仓库未设置user.name/user.email则采用全局的user.name/user.email，否则当前仓库的user.name/user.email会覆盖全局的user.name/user.email。</p>\n","excerpt":"<p>github在统计提交的时候，会判断邮箱是否跟github的登陆邮箱匹配，不匹配则不计算活跃度，即不生成小绿块。</p>\n<p>获取配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email</div><div class=\"line\">aaa@aaa.com</div><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.name</div><div class=\"line\">aaa</div></pre></td></tr></table></figure></p>","more":"<p>设置当前仓库的user.name/user.email<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa</div><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa@aaa.com</div></pre></td></tr></table></figure></p>\n<p>设置全局user.name/user.email<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.name yinlijun</div><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.email yinlijun2004@gmail.com</div></pre></td></tr></table></figure></p>\n<p>如果当前仓库未设置user.name/user.email则采用全局的user.name/user.email，否则当前仓库的user.name/user.email会覆盖全局的user.name/user.email。</p>"},{"title":"Match-react router 4.0.0 api中文文档","date":"2016-11-25T05:05:50.000Z","_content":"[原文链接](https://react-router.now.sh/Match)\n\n# &lt;Match&gt;\n\n匹配到地址(location)时进行UI渲染\n\n### <font color='red'>pattern: string</font>\n\n任何[path-to-regexp](https://www.npmjs.com/package/path-to-regexp)可以理解的URL模式表达式\n```html\n<Match pattern=\"/users/:id\" component={User}/>\n```\n<!--more-->\n\n### <font color='red'>exactly: bool</font>\n\n当为true时，只有模式表达式严格匹配时，才算匹配上。\n\n| pattern |\tlocation.pathname | exactly? | matches? |\n| --- | :---: | :----: | :----: |\n| /foo | /foo/bar |\tyes |\tno\n| /foo | /foo/bar |\tno | yes\n```html\n<Match pattern=\"/foo\" exactly component={Foo}/>\n```\n\n### <font color='red'>location</font>\n\n如果你不想匹配上下文(context)中的地址(location)时，你可以传入一个location参数来替代。\n```html\n<Match pattern=\"/foo\" location={{ pathname: '/foo' }}/>\n```\n\n### <font color='red'>component</font>\n当匹配到地址时渲染的React组件，渲染该组件时，会传入如下属性(props)：\n- pattern: (string) 匹配表达式.\n- pathname: (string) 匹配后的路径.\n- isExact: (bool) 是否严格匹配 (v. partial).\n- location: 匹配到的location对象.\n- params: 根据匹配模式解析出来的参数\n\n如下所示：\n```javascript\nclass User extends React.Component {\n    render() {\n        const {params, pattern, pathname, isExact, location} = this.props;\n        return (<div>\n            <h2>User</h2>\n            <div>\n                location:{JSON.stringify(location)}\n                <br />\n                pattern:{pattern}\n                <br />\n                pathname:{pathname}\n                <br />\n                isExact:{isExact ? \"true\" : \"false\"}\n                <br />\n                params:{JSON.stringify(params, null, 2)}\n                <br />\n            </div>\n        </div>)\n    }\n}\n\n<Match pattern=\"/:user\" component={User}/>\n```\n效果如下\n```\nlocation:{\"pathname\":\"/kim\",\"search\":\"\",\"hash\":\"\",\"state\":null,\"query\":null,\"key\":\"a21zge\"}\npattern:/:user\npathname:/kim\nisExact:true\nparams:{ \"user\": \"kim\" }\n```\n\n### <font color='red'>render: func</font>\n\n相对于直接渲染一个组件，你可以之间传一个渲染函数，该函数被调用时，会传入组件一样的参数。\n\n这相当于提供了一种内联(inline rendering)渲染方式，或者对Match的封装(wrapping)。\n```javascript\n// 非常方便的内联渲染\n<Match pattern=\"/home\" render={() => <div>Home</div>}/>\n\n// 对Match进行封装\nconst MatchWithFade = ({ component:Component, ...rest }) => (\n  <Match {...rest} render={(matchProps) => (\n    <FadeIn>\n      <Component {...matchProps}/>\n    </FadeIn>\n  )}/>\n)\n\n<MatchWithFade pattern=\"/cool\" component={Something}/>\n```\n### <font color='red'>children: func</font>\n\n有时你可能需要根据匹配与否进行不同的渲染，这时，你可以使用children属性，它的类型为function，\n它的表现有点象render函数，但是有以下不同：\n \n(1) 不管有没有匹配上都会被调用。 \n\n(2) 回传递一个matched属性表示有没有被匹配上。\n\nIt seems unlikely you’ll need this for anything besides animating when a component transitions from matching to not matching and back, but who knows?\n\n```javascript\n<Match children={({ matched, ...rest}) => (\n  {/* 因为Animate 总是能被渲染，所以你可以利用组件的生命周期(lifecycle)来实现动画。*/}\n  <Animate>\n    {matched && (\n      <Something {...rest}/>\n    )}\n  </Animate>\n)}/>\n```\n\n# &lt;/Match&gt;","source":"_posts/react-router-4-0-0-api-Match.md","raw":"---\ntitle: Match-react router 4.0.0 api中文文档\ndate: 2016-11-25 13:05:50\ntags: [react, react-router, 翻译文档]\n---\n[原文链接](https://react-router.now.sh/Match)\n\n# &lt;Match&gt;\n\n匹配到地址(location)时进行UI渲染\n\n### <font color='red'>pattern: string</font>\n\n任何[path-to-regexp](https://www.npmjs.com/package/path-to-regexp)可以理解的URL模式表达式\n```html\n<Match pattern=\"/users/:id\" component={User}/>\n```\n<!--more-->\n\n### <font color='red'>exactly: bool</font>\n\n当为true时，只有模式表达式严格匹配时，才算匹配上。\n\n| pattern |\tlocation.pathname | exactly? | matches? |\n| --- | :---: | :----: | :----: |\n| /foo | /foo/bar |\tyes |\tno\n| /foo | /foo/bar |\tno | yes\n```html\n<Match pattern=\"/foo\" exactly component={Foo}/>\n```\n\n### <font color='red'>location</font>\n\n如果你不想匹配上下文(context)中的地址(location)时，你可以传入一个location参数来替代。\n```html\n<Match pattern=\"/foo\" location={{ pathname: '/foo' }}/>\n```\n\n### <font color='red'>component</font>\n当匹配到地址时渲染的React组件，渲染该组件时，会传入如下属性(props)：\n- pattern: (string) 匹配表达式.\n- pathname: (string) 匹配后的路径.\n- isExact: (bool) 是否严格匹配 (v. partial).\n- location: 匹配到的location对象.\n- params: 根据匹配模式解析出来的参数\n\n如下所示：\n```javascript\nclass User extends React.Component {\n    render() {\n        const {params, pattern, pathname, isExact, location} = this.props;\n        return (<div>\n            <h2>User</h2>\n            <div>\n                location:{JSON.stringify(location)}\n                <br />\n                pattern:{pattern}\n                <br />\n                pathname:{pathname}\n                <br />\n                isExact:{isExact ? \"true\" : \"false\"}\n                <br />\n                params:{JSON.stringify(params, null, 2)}\n                <br />\n            </div>\n        </div>)\n    }\n}\n\n<Match pattern=\"/:user\" component={User}/>\n```\n效果如下\n```\nlocation:{\"pathname\":\"/kim\",\"search\":\"\",\"hash\":\"\",\"state\":null,\"query\":null,\"key\":\"a21zge\"}\npattern:/:user\npathname:/kim\nisExact:true\nparams:{ \"user\": \"kim\" }\n```\n\n### <font color='red'>render: func</font>\n\n相对于直接渲染一个组件，你可以之间传一个渲染函数，该函数被调用时，会传入组件一样的参数。\n\n这相当于提供了一种内联(inline rendering)渲染方式，或者对Match的封装(wrapping)。\n```javascript\n// 非常方便的内联渲染\n<Match pattern=\"/home\" render={() => <div>Home</div>}/>\n\n// 对Match进行封装\nconst MatchWithFade = ({ component:Component, ...rest }) => (\n  <Match {...rest} render={(matchProps) => (\n    <FadeIn>\n      <Component {...matchProps}/>\n    </FadeIn>\n  )}/>\n)\n\n<MatchWithFade pattern=\"/cool\" component={Something}/>\n```\n### <font color='red'>children: func</font>\n\n有时你可能需要根据匹配与否进行不同的渲染，这时，你可以使用children属性，它的类型为function，\n它的表现有点象render函数，但是有以下不同：\n \n(1) 不管有没有匹配上都会被调用。 \n\n(2) 回传递一个matched属性表示有没有被匹配上。\n\nIt seems unlikely you’ll need this for anything besides animating when a component transitions from matching to not matching and back, but who knows?\n\n```javascript\n<Match children={({ matched, ...rest}) => (\n  {/* 因为Animate 总是能被渲染，所以你可以利用组件的生命周期(lifecycle)来实现动画。*/}\n  <Animate>\n    {matched && (\n      <Something {...rest}/>\n    )}\n  </Animate>\n)}/>\n```\n\n# &lt;/Match&gt;","slug":"react-router-4-0-0-api-Match","published":1,"updated":"2016-11-25T07:17:52.661Z","_id":"civxg1t4a000g0cnyiq7gac24","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://react-router.now.sh/Match\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n<h1 id=\"lt-Match-gt\"><a href=\"#lt-Match-gt\" class=\"headerlink\" title=\"&lt;Match&gt;\"></a>&lt;Match&gt;</h1><p>匹配到地址(location)时进行UI渲染</p>\n<h3 id=\"pattern-string\"><a href=\"#pattern-string\" class=\"headerlink\" title=\"pattern: string\"></a><font color=\"red\">pattern: string</font></h3><p>任何<a href=\"https://www.npmjs.com/package/path-to-regexp\" target=\"_blank\" rel=\"external\">path-to-regexp</a>可以理解的URL模式表达式<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Match</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/users/:id\"</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;User&#125;/</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"exactly-bool\"><a href=\"#exactly-bool\" class=\"headerlink\" title=\"exactly: bool\"></a><font color=\"red\">exactly: bool</font></h3><p>当为true时，只有模式表达式严格匹配时，才算匹配上。</p>\n<table>\n<thead>\n<tr>\n<th>pattern</th>\n<th style=\"text-align:center\">location.pathname</th>\n<th style=\"text-align:center\">exactly?</th>\n<th style=\"text-align:center\">matches?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/foo</td>\n<td style=\"text-align:center\">/foo/bar</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">no</td>\n</tr>\n<tr>\n<td>/foo</td>\n<td style=\"text-align:center\">/foo/bar</td>\n<td style=\"text-align:center\">no</td>\n<td style=\"text-align:center\">yes</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Match</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/foo\"</span> <span class=\"attr\">exactly</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Foo&#125;/</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a><font color=\"red\">location</font></h3><p>如果你不想匹配上下文(context)中的地址(location)时，你可以传入一个location参数来替代。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Match</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/foo\"</span> <span class=\"attr\">location</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">pathname:</span> '/<span class=\"attr\">foo</span>' &#125;&#125;/&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"component\"><a href=\"#component\" class=\"headerlink\" title=\"component\"></a><font color=\"red\">component</font></h3><p>当匹配到地址时渲染的React组件，渲染该组件时，会传入如下属性(props)：</p>\n<ul>\n<li>pattern: (string) 匹配表达式.</li>\n<li>pathname: (string) 匹配后的路径.</li>\n<li>isExact: (bool) 是否严格匹配 (v. partial).</li>\n<li>location: 匹配到的location对象.</li>\n<li>params: 根据匹配模式解析出来的参数</li>\n</ul>\n<p>如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> &#123;params, pattern, pathname, isExact, location&#125; = <span class=\"keyword\">this</span>.props;</div><div class=\"line\">        <span class=\"keyword\">return</span> (&lt;div&gt;</div><div class=\"line\">            &lt;h2&gt;User&lt;/h2&gt;</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">                location:&#123;JSON.stringify(location)&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">                pattern:&#123;pattern&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">                pathname:&#123;pathname&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">                isExact:&#123;isExact ? \"true\" : \"false\"&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">                params:&#123;JSON.stringify(params, null, 2)&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">        &lt;/div&gt;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;Match pattern=\"/:user\" component=&#123;User&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<p>效果如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">location:&#123;&quot;pathname&quot;:&quot;/kim&quot;,&quot;search&quot;:&quot;&quot;,&quot;hash&quot;:&quot;&quot;,&quot;state&quot;:null,&quot;query&quot;:null,&quot;key&quot;:&quot;a21zge&quot;&#125;</div><div class=\"line\">pattern:/:user</div><div class=\"line\">pathname:/kim</div><div class=\"line\">isExact:true</div><div class=\"line\">params:&#123; &quot;user&quot;: &quot;kim&quot; &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"render-func\"><a href=\"#render-func\" class=\"headerlink\" title=\"render: func\"></a><font color=\"red\">render: func</font></h3><p>相对于直接渲染一个组件，你可以之间传一个渲染函数，该函数被调用时，会传入组件一样的参数。</p>\n<p>这相当于提供了一种内联(inline rendering)渲染方式，或者对Match的封装(wrapping)。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 非常方便的内联渲染</span></div><div class=\"line\">&lt;Match pattern=<span class=\"string\">\"/home\"</span> render=&#123;() =&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>&#125;/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 对Match进行封装</span></div><div class=\"line\"><span class=\"keyword\">const</span> MatchWithFade = (&#123; component:Component, ...rest &#125;) =&gt; (</div><div class=\"line\">  &lt;Match &#123;...rest&#125; render=&#123;(matchProps) =&gt; (</div><div class=\"line\">    &lt;FadeIn&gt;</div><div class=\"line\">      &lt;Component &#123;...matchProps&#125;/&gt;</div><div class=\"line\">    &lt;/FadeIn&gt;</div><div class=\"line\">  )&#125;/&gt;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">&lt;MatchWithFade pattern=\"/cool\" component=&#123;Something&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"children-func\"><a href=\"#children-func\" class=\"headerlink\" title=\"children: func\"></a><font color=\"red\">children: func</font></h3><p>有时你可能需要根据匹配与否进行不同的渲染，这时，你可以使用children属性，它的类型为function，<br>它的表现有点象render函数，但是有以下不同：</p>\n<p>(1) 不管有没有匹配上都会被调用。 </p>\n<p>(2) 回传递一个matched属性表示有没有被匹配上。</p>\n<p>It seems unlikely you’ll need this for anything besides animating when a component transitions from matching to not matching and back, but who knows?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Match children=&#123;(&#123; matched, ...rest&#125;) =&gt; (</div><div class=\"line\">  &#123;<span class=\"comment\">/* 因为Animate 总是能被渲染，所以你可以利用组件的生命周期(lifecycle)来实现动画。*/</span>&#125;</div><div class=\"line\">  &lt;Animate&gt;</div><div class=\"line\">    &#123;matched &amp;&amp; (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Something</span> &#123;<span class=\"attr\">...rest</span>&#125;/&gt;</span></span></div><div class=\"line\">    )&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Animate</span>&gt;</span></div><div class=\"line\">)&#125;/&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"lt-Match-gt-1\"><a href=\"#lt-Match-gt-1\" class=\"headerlink\" title=\"&lt;/Match&gt;\"></a>&lt;/Match&gt;</h1>","excerpt":"<p><a href=\"https://react-router.now.sh/Match\">原文链接</a></p>\n<h1 id=\"lt-Match-gt\"><a href=\"#lt-Match-gt\" class=\"headerlink\" title=\"&lt;Match&gt;\"></a>&lt;Match&gt;</h1><p>匹配到地址(location)时进行UI渲染</p>\n<h3 id=\"pattern-string\"><a href=\"#pattern-string\" class=\"headerlink\" title=\"pattern: string\"></a><font color='red'>pattern: string</font></h3><p>任何<a href=\"https://www.npmjs.com/package/path-to-regexp\">path-to-regexp</a>可以理解的URL模式表达式<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Match</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/users/:id\"</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;User&#125;/</span>&gt;</span></div></pre></td></tr></table></figure></p>","more":"<h3 id=\"exactly-bool\"><a href=\"#exactly-bool\" class=\"headerlink\" title=\"exactly: bool\"></a><font color='red'>exactly: bool</font></h3><p>当为true时，只有模式表达式严格匹配时，才算匹配上。</p>\n<table>\n<thead>\n<tr>\n<th>pattern</th>\n<th style=\"text-align:center\">location.pathname</th>\n<th style=\"text-align:center\">exactly?</th>\n<th style=\"text-align:center\">matches?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/foo</td>\n<td style=\"text-align:center\">/foo/bar</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">no</td>\n</tr>\n<tr>\n<td>/foo</td>\n<td style=\"text-align:center\">/foo/bar</td>\n<td style=\"text-align:center\">no</td>\n<td style=\"text-align:center\">yes</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Match</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/foo\"</span> <span class=\"attr\">exactly</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Foo&#125;/</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a><font color='red'>location</font></h3><p>如果你不想匹配上下文(context)中的地址(location)时，你可以传入一个location参数来替代。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Match</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/foo\"</span> <span class=\"attr\">location</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">pathname:</span> '/<span class=\"attr\">foo</span>' &#125;&#125;/&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"component\"><a href=\"#component\" class=\"headerlink\" title=\"component\"></a><font color='red'>component</font></h3><p>当匹配到地址时渲染的React组件，渲染该组件时，会传入如下属性(props)：</p>\n<ul>\n<li>pattern: (string) 匹配表达式.</li>\n<li>pathname: (string) 匹配后的路径.</li>\n<li>isExact: (bool) 是否严格匹配 (v. partial).</li>\n<li>location: 匹配到的location对象.</li>\n<li>params: 根据匹配模式解析出来的参数</li>\n</ul>\n<p>如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> &#123;params, pattern, pathname, isExact, location&#125; = <span class=\"keyword\">this</span>.props;</div><div class=\"line\">        <span class=\"keyword\">return</span> (&lt;div&gt;</div><div class=\"line\">            &lt;h2&gt;User&lt;/h2&gt;</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">                location:&#123;JSON.stringify(location)&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">                pattern:&#123;pattern&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">                pathname:&#123;pathname&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">                isExact:&#123;isExact ? \"true\" : \"false\"&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">                params:&#123;JSON.stringify(params, null, 2)&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">        &lt;/div&gt;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;Match pattern=\"/:user\" component=&#123;User&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<p>效果如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">location:&#123;&quot;pathname&quot;:&quot;/kim&quot;,&quot;search&quot;:&quot;&quot;,&quot;hash&quot;:&quot;&quot;,&quot;state&quot;:null,&quot;query&quot;:null,&quot;key&quot;:&quot;a21zge&quot;&#125;</div><div class=\"line\">pattern:/:user</div><div class=\"line\">pathname:/kim</div><div class=\"line\">isExact:true</div><div class=\"line\">params:&#123; &quot;user&quot;: &quot;kim&quot; &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"render-func\"><a href=\"#render-func\" class=\"headerlink\" title=\"render: func\"></a><font color='red'>render: func</font></h3><p>相对于直接渲染一个组件，你可以之间传一个渲染函数，该函数被调用时，会传入组件一样的参数。</p>\n<p>这相当于提供了一种内联(inline rendering)渲染方式，或者对Match的封装(wrapping)。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 非常方便的内联渲染</span></div><div class=\"line\">&lt;Match pattern=<span class=\"string\">\"/home\"</span> render=&#123;() =&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>&#125;/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 对Match进行封装</span></div><div class=\"line\"><span class=\"keyword\">const</span> MatchWithFade = (&#123; component:Component, ...rest &#125;) =&gt; (</div><div class=\"line\">  &lt;Match &#123;...rest&#125; render=&#123;(matchProps) =&gt; (</div><div class=\"line\">    &lt;FadeIn&gt;</div><div class=\"line\">      &lt;Component &#123;...matchProps&#125;/&gt;</div><div class=\"line\">    &lt;/FadeIn&gt;</div><div class=\"line\">  )&#125;/&gt;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">&lt;MatchWithFade pattern=\"/cool\" component=&#123;Something&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"children-func\"><a href=\"#children-func\" class=\"headerlink\" title=\"children: func\"></a><font color='red'>children: func</font></h3><p>有时你可能需要根据匹配与否进行不同的渲染，这时，你可以使用children属性，它的类型为function，<br>它的表现有点象render函数，但是有以下不同：</p>\n<p>(1) 不管有没有匹配上都会被调用。 </p>\n<p>(2) 回传递一个matched属性表示有没有被匹配上。</p>\n<p>It seems unlikely you’ll need this for anything besides animating when a component transitions from matching to not matching and back, but who knows?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Match children=&#123;(&#123; matched, ...rest&#125;) =&gt; (</div><div class=\"line\">  &#123;<span class=\"comment\">/* 因为Animate 总是能被渲染，所以你可以利用组件的生命周期(lifecycle)来实现动画。*/</span>&#125;</div><div class=\"line\">  &lt;Animate&gt;</div><div class=\"line\">    &#123;matched &amp;&amp; (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Something</span> &#123;<span class=\"attr\">...rest</span>&#125;/&gt;</span></div><div class=\"line\">    )&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Animate</span>&gt;</span></span></div><div class=\"line\">)&#125;/&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"lt-Match-gt-1\"><a href=\"#lt-Match-gt-1\" class=\"headerlink\" title=\"&lt;/Match&gt;\"></a>&lt;/Match&gt;</h1>"},{"title":"如何下载安装openJDK","date":"2016-11-15T12:04:44.000Z","_content":"\n## JDK 8\n\n### **Debian, Ubuntu**\n```\n$ sudo apt-get install openjdk-8-jre\n```\nopenjdk-8-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-8-jdk。\n\n<!--more-->\n\n### **Fedora, Oracle Linux, Red Hat Enterprise Linux**\n```\n$ su -c \"yum install java-1.8.0-openjdk\"\n```\njava-1.8.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.8.0-openjdk-devel。\n\n## JDK 7\n\n### **Debian, Ubuntu**\n```\n$ sudo apt-get install openjdk-7-jre\n```\nopenjdk-7-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-7-jdk。\n\n### **Fedora, Oracle Linux, Red Hat Enterprise Linux**\n```\n$ su -c \"yum install java-1.7.0-openjdk\"\n```\njava-1.7.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.7.0-openjdk-devel。\n\n## JDK 6\n\n### **Debian, Ubuntu**\n```\n$ sudo apt-get install openjdk-6-jre\n```\nopenjdk-6-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-6-jdk。\n\n### **Fedora, Oracle Linux, Red Hat Enterprise Linux**\n```\n$ su -c \"yum install java-1.6.0-openjdk\"\n```\njava-1.6.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.6.0-openjdk-devel。\n\n\n参考[http://openjdk.java.net/install/](http://openjdk.java.net/install/)","source":"_posts/how-to-download-openjdk.md","raw":"---\ntitle: 如何下载安装openJDK\ndate: 2016-11-15 20:04:44\ntags: openjdk; java\n---\n\n## JDK 8\n\n### **Debian, Ubuntu**\n```\n$ sudo apt-get install openjdk-8-jre\n```\nopenjdk-8-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-8-jdk。\n\n<!--more-->\n\n### **Fedora, Oracle Linux, Red Hat Enterprise Linux**\n```\n$ su -c \"yum install java-1.8.0-openjdk\"\n```\njava-1.8.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.8.0-openjdk-devel。\n\n## JDK 7\n\n### **Debian, Ubuntu**\n```\n$ sudo apt-get install openjdk-7-jre\n```\nopenjdk-7-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-7-jdk。\n\n### **Fedora, Oracle Linux, Red Hat Enterprise Linux**\n```\n$ su -c \"yum install java-1.7.0-openjdk\"\n```\njava-1.7.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.7.0-openjdk-devel。\n\n## JDK 6\n\n### **Debian, Ubuntu**\n```\n$ sudo apt-get install openjdk-6-jre\n```\nopenjdk-6-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-6-jdk。\n\n### **Fedora, Oracle Linux, Red Hat Enterprise Linux**\n```\n$ su -c \"yum install java-1.6.0-openjdk\"\n```\njava-1.6.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.6.0-openjdk-devel。\n\n\n参考[http://openjdk.java.net/install/](http://openjdk.java.net/install/)","slug":"how-to-download-openjdk","published":1,"updated":"2016-11-21T02:37:41.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxg1t4g000i0cnydovse7fe","content":"<h2 id=\"JDK-8\"><a href=\"#JDK-8\" class=\"headerlink\" title=\"JDK 8\"></a>JDK 8</h2><h3 id=\"Debian-Ubuntu\"><a href=\"#Debian-Ubuntu\" class=\"headerlink\" title=\"Debian, Ubuntu\"></a><strong>Debian, Ubuntu</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install openjdk-8-jre</div></pre></td></tr></table></figure>\n<p>openjdk-8-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-8-jdk。</p>\n<a id=\"more\"></a>\n<h3 id=\"Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux\"><a href=\"#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux\" class=\"headerlink\" title=\"Fedora, Oracle Linux, Red Hat Enterprise Linux\"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ su -c &quot;yum install java-1.8.0-openjdk&quot;</div></pre></td></tr></table></figure>\n<p>java-1.8.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.8.0-openjdk-devel。</p>\n<h2 id=\"JDK-7\"><a href=\"#JDK-7\" class=\"headerlink\" title=\"JDK 7\"></a>JDK 7</h2><h3 id=\"Debian-Ubuntu-1\"><a href=\"#Debian-Ubuntu-1\" class=\"headerlink\" title=\"Debian, Ubuntu\"></a><strong>Debian, Ubuntu</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install openjdk-7-jre</div></pre></td></tr></table></figure>\n<p>openjdk-7-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-7-jdk。</p>\n<h3 id=\"Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-1\"><a href=\"#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-1\" class=\"headerlink\" title=\"Fedora, Oracle Linux, Red Hat Enterprise Linux\"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ su -c &quot;yum install java-1.7.0-openjdk&quot;</div></pre></td></tr></table></figure>\n<p>java-1.7.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.7.0-openjdk-devel。</p>\n<h2 id=\"JDK-6\"><a href=\"#JDK-6\" class=\"headerlink\" title=\"JDK 6\"></a>JDK 6</h2><h3 id=\"Debian-Ubuntu-2\"><a href=\"#Debian-Ubuntu-2\" class=\"headerlink\" title=\"Debian, Ubuntu\"></a><strong>Debian, Ubuntu</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install openjdk-6-jre</div></pre></td></tr></table></figure>\n<p>openjdk-6-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-6-jdk。</p>\n<h3 id=\"Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-2\"><a href=\"#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-2\" class=\"headerlink\" title=\"Fedora, Oracle Linux, Red Hat Enterprise Linux\"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ su -c &quot;yum install java-1.6.0-openjdk&quot;</div></pre></td></tr></table></figure>\n<p>java-1.6.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.6.0-openjdk-devel。</p>\n<p>参考<a href=\"http://openjdk.java.net/install/\" target=\"_blank\" rel=\"external\">http://openjdk.java.net/install/</a></p>\n","excerpt":"<h2 id=\"JDK-8\"><a href=\"#JDK-8\" class=\"headerlink\" title=\"JDK 8\"></a>JDK 8</h2><h3 id=\"Debian-Ubuntu\"><a href=\"#Debian-Ubuntu\" class=\"headerlink\" title=\"Debian, Ubuntu\"></a><strong>Debian, Ubuntu</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install openjdk-8-jre</div></pre></td></tr></table></figure>\n<p>openjdk-8-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-8-jdk。</p>","more":"<h3 id=\"Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux\"><a href=\"#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux\" class=\"headerlink\" title=\"Fedora, Oracle Linux, Red Hat Enterprise Linux\"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ su -c &quot;yum install java-1.8.0-openjdk&quot;</div></pre></td></tr></table></figure>\n<p>java-1.8.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.8.0-openjdk-devel。</p>\n<h2 id=\"JDK-7\"><a href=\"#JDK-7\" class=\"headerlink\" title=\"JDK 7\"></a>JDK 7</h2><h3 id=\"Debian-Ubuntu-1\"><a href=\"#Debian-Ubuntu-1\" class=\"headerlink\" title=\"Debian, Ubuntu\"></a><strong>Debian, Ubuntu</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install openjdk-7-jre</div></pre></td></tr></table></figure>\n<p>openjdk-7-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-7-jdk。</p>\n<h3 id=\"Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-1\"><a href=\"#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-1\" class=\"headerlink\" title=\"Fedora, Oracle Linux, Red Hat Enterprise Linux\"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ su -c &quot;yum install java-1.7.0-openjdk&quot;</div></pre></td></tr></table></figure>\n<p>java-1.7.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.7.0-openjdk-devel。</p>\n<h2 id=\"JDK-6\"><a href=\"#JDK-6\" class=\"headerlink\" title=\"JDK 6\"></a>JDK 6</h2><h3 id=\"Debian-Ubuntu-2\"><a href=\"#Debian-Ubuntu-2\" class=\"headerlink\" title=\"Debian, Ubuntu\"></a><strong>Debian, Ubuntu</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install openjdk-6-jre</div></pre></td></tr></table></figure>\n<p>openjdk-6-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-6-jdk。</p>\n<h3 id=\"Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-2\"><a href=\"#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-2\" class=\"headerlink\" title=\"Fedora, Oracle Linux, Red Hat Enterprise Linux\"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ su -c &quot;yum install java-1.6.0-openjdk&quot;</div></pre></td></tr></table></figure>\n<p>java-1.6.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.6.0-openjdk-devel。</p>\n<p>参考<a href=\"http://openjdk.java.net/install/\">http://openjdk.java.net/install/</a></p>"},{"title":"BrowserRouter-react router 4.0.0 api中文文档","date":"2016-11-24T06:54:00.000Z","catagarys":"react router 4.0.0 api中文文档","_content":"\n\n[原文链接](https://react-router.now.sh/BrowserRouter)\n\n<font size='5em'>&lt;BrowserRouter&gt;</font>\n\n保持你的界面与浏览器历史记录保持同步。\n```html5\n<BrowserRouter>\n  <App/>\n</BrowserRouter>\n```\n<!--more-->\n\n<font color='#FF0000'>basename</font>\n\n所有路由的根URL，如果你的应用处于服务端的子目录, 你可以设置这个值为该子目录。\n\n```html5\n<BrowserRouter basename=\"/calendar\" />\n\n// 假设Link标签如下所示：\n<Link to=\"/today\"/>\n// 那么超链接指向 \"/calendar/today\"\n</BrowserRouter>\n```\n<font size='5em'>&lt;/BrowserRouter&gt;</font>\n","source":"_posts/react-router-4-0-0-api.md","raw":"---\ntitle: BrowserRouter-react router 4.0.0 api中文文档\ndate: 2016-11-24 14:54:00\ntags: [react, react-router, 翻译文档]\ncatagarys: react router 4.0.0 api中文文档\n---\n\n\n[原文链接](https://react-router.now.sh/BrowserRouter)\n\n<font size='5em'>&lt;BrowserRouter&gt;</font>\n\n保持你的界面与浏览器历史记录保持同步。\n```html5\n<BrowserRouter>\n  <App/>\n</BrowserRouter>\n```\n<!--more-->\n\n<font color='#FF0000'>basename</font>\n\n所有路由的根URL，如果你的应用处于服务端的子目录, 你可以设置这个值为该子目录。\n\n```html5\n<BrowserRouter basename=\"/calendar\" />\n\n// 假设Link标签如下所示：\n<Link to=\"/today\"/>\n// 那么超链接指向 \"/calendar/today\"\n</BrowserRouter>\n```\n<font size='5em'>&lt;/BrowserRouter&gt;</font>\n","slug":"react-router-4-0-0-api","published":1,"updated":"2016-11-25T07:17:48.375Z","_id":"civxg1t4k000k0cnya08503nb","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://react-router.now.sh/BrowserRouter\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n<font size=\"5em\">&lt;BrowserRouter&gt;</font>\n\n<p>保持你的界面与浏览器历史记录保持同步。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;BrowserRouter&gt;</div><div class=\"line\">  &lt;App/&gt;</div><div class=\"line\">&lt;/BrowserRouter&gt;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<font color=\"#FF0000\">basename</font>\n\n<p>所有路由的根URL，如果你的应用处于服务端的子目录, 你可以设置这个值为该子目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;BrowserRouter basename=&quot;/calendar&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">// 假设Link标签如下所示：</div><div class=\"line\">&lt;Link to=&quot;/today&quot;/&gt;</div><div class=\"line\">// 那么超链接指向 &quot;/calendar/today&quot;</div><div class=\"line\">&lt;/BrowserRouter&gt;</div></pre></td></tr></table></figure>\n<font size=\"5em\">&lt;/BrowserRouter&gt;</font>\n","excerpt":"<p><a href=\"https://react-router.now.sh/BrowserRouter\">原文链接</a></p>\n<font size='5em'>&lt;BrowserRouter&gt;</font>\n\n<p>保持你的界面与浏览器历史记录保持同步。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;BrowserRouter&gt;</div><div class=\"line\">  &lt;App/&gt;</div><div class=\"line\">&lt;/BrowserRouter&gt;</div></pre></td></tr></table></figure></p>","more":"<font color='#FF0000'>basename</font>\n\n<p>所有路由的根URL，如果你的应用处于服务端的子目录, 你可以设置这个值为该子目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;BrowserRouter basename=&quot;/calendar&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">// 假设Link标签如下所示：</div><div class=\"line\">&lt;Link to=&quot;/today&quot;/&gt;</div><div class=\"line\">// 那么超链接指向 &quot;/calendar/today&quot;</div><div class=\"line\">&lt;/BrowserRouter&gt;</div></pre></td></tr></table></figure>\n<font size='5em'>&lt;/BrowserRouter&gt;</font>"},{"title":"Ubuntu 12.04 生成桌面图标","date":"2016-11-15T10:04:19.000Z","_content":"\n在Ubuntu上从网上下载压缩包版本（非.deb包）的应用程序之后，是不生成桌面图表的，比如网上下载的[Android Studio](http://www.android-studio.org/), 所以需要自己做一个桌面图标。\n\n1. 进入到/usr/share/applications/目录下\n```bash\ncd /usr/share/applications/\n```\n\n2. 新建一个android-studio.desktop文件。\n```bash\nvim android-studio.desktop\n```\n<!--more-->\n\n3. 输入一下内容\n```bash\nVersion=2.2\nName=Android Studio\nGenericName=Android IDE\nComment=Android Development\nExec=/home/yinlijun/android_toolchain/android-studio/bin/studio.sh %U\nTerminal=false\nIcon=/home/yinlijun/android_toolchain/android-studio/bin/studio.png\nType=Application\nCategories=Android;IDE;\n```\n\n保存退出之后，在应用程序里面就可以找到，绑定了图标的应用程序，可以将其固定到启动器上。","source":"_posts/make-ubutun-desktop.md","raw":"---\ntitle: Ubuntu 12.04 生成桌面图标 \ndate: 2016-11-15 18:04:19\ntags: [ubuntu, android studio]\n---\n\n在Ubuntu上从网上下载压缩包版本（非.deb包）的应用程序之后，是不生成桌面图表的，比如网上下载的[Android Studio](http://www.android-studio.org/), 所以需要自己做一个桌面图标。\n\n1. 进入到/usr/share/applications/目录下\n```bash\ncd /usr/share/applications/\n```\n\n2. 新建一个android-studio.desktop文件。\n```bash\nvim android-studio.desktop\n```\n<!--more-->\n\n3. 输入一下内容\n```bash\nVersion=2.2\nName=Android Studio\nGenericName=Android IDE\nComment=Android Development\nExec=/home/yinlijun/android_toolchain/android-studio/bin/studio.sh %U\nTerminal=false\nIcon=/home/yinlijun/android_toolchain/android-studio/bin/studio.png\nType=Application\nCategories=Android;IDE;\n```\n\n保存退出之后，在应用程序里面就可以找到，绑定了图标的应用程序，可以将其固定到启动器上。","slug":"make-ubutun-desktop","published":1,"updated":"2016-11-21T02:37:41.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxg1t4t000m0cnyvykvwdsl","content":"<p>在Ubuntu上从网上下载压缩包版本（非.deb包）的应用程序之后，是不生成桌面图表的，比如网上下载的<a href=\"http://www.android-studio.org/\" target=\"_blank\" rel=\"external\">Android Studio</a>, 所以需要自己做一个桌面图标。</p>\n<ol>\n<li><p>进入到/usr/share/applications/目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /usr/share/applications/</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建一个android-studio.desktop文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim android-studio.desktop</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol>\n<li>输入一下内容<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Version=2.2</div><div class=\"line\">Name=Android Studio</div><div class=\"line\">GenericName=Android IDE</div><div class=\"line\">Comment=Android Development</div><div class=\"line\">Exec=/home/yinlijun/android_toolchain/android-studio/bin/studio.sh %U</div><div class=\"line\">Terminal=<span class=\"literal\">false</span></div><div class=\"line\">Icon=/home/yinlijun/android_toolchain/android-studio/bin/studio.png</div><div class=\"line\">Type=Application</div><div class=\"line\">Categories=Android;IDE;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>保存退出之后，在应用程序里面就可以找到，绑定了图标的应用程序，可以将其固定到启动器上。</p>\n","excerpt":"<p>在Ubuntu上从网上下载压缩包版本（非.deb包）的应用程序之后，是不生成桌面图表的，比如网上下载的<a href=\"http://www.android-studio.org/\">Android Studio</a>, 所以需要自己做一个桌面图标。</p>\n<ol>\n<li><p>进入到/usr/share/applications/目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /usr/share/applications/</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建一个android-studio.desktop文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim android-studio.desktop</div></pre></td></tr></table></figure>\n</li>\n</ol>","more":"<ol>\n<li>输入一下内容<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Version=2.2</div><div class=\"line\">Name=Android Studio</div><div class=\"line\">GenericName=Android IDE</div><div class=\"line\">Comment=Android Development</div><div class=\"line\">Exec=/home/yinlijun/android_toolchain/android-studio/bin/studio.sh %U</div><div class=\"line\">Terminal=<span class=\"literal\">false</span></div><div class=\"line\">Icon=/home/yinlijun/android_toolchain/android-studio/bin/studio.png</div><div class=\"line\">Type=Application</div><div class=\"line\">Categories=Android;IDE;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>保存退出之后，在应用程序里面就可以找到，绑定了图标的应用程序，可以将其固定到启动器上。</p>"},{"title":"ubuntu利用update-alternatives配置java","date":"2016-11-15T11:32:21.000Z","_content":"\n利用Android Studio开发，经常会碰到JDK版本的切换问题，安装好新版本的[jdk](http://www.oracle.com/technetwork/java/javase/downloads/index.html)之后，需要先配置到可选项。\n```bash\nyinlijun@sj:~$ sudo update-alternatives --install /usr/bin/java java /opt/jdk1.8.0_101/bin/java 100\nupdate-alternatives: 警告: /etc/alternatives/java has been changed (manually or by a script); switching to manual updates only\nyinlijun@sj:~$ sudo update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_101/bin/javac 100\n```\n\n<!--more-->\n\n然后，选择默认的JDK版本：\n```bash\nyinlijun@sj:~$ sudo update-alternatives --config java\n有 3 个候选项可用于替换 java (提供 /usr/bin/java)。\n\n  选择       路径                                          优先级  状态\n------------------------------------------------------------\n  0            /opt/jdk1.6.0_37/bin/java                        10000     自动模式\n  1            /opt/jdk1.6.0_37/bin/java                        10000     手动模式\n  2            /opt/jdk1.8.0_101/bin/java                       100       手动模式\n  3            /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java   1051      手动模式\n\n要维持当前值[*]请按回车键，或者键入选择的编号：2\nupdate-alternatives: using /opt/jdk1.8.0_101/bin/java to provide /usr/bin/java (java) in 手动模式\nyinlijun@sj:~$ sudo update-alternatives --config javac\n有 3 个候选项可用于替换 javac (提供 /usr/bin/javac)。\n\n  选择       路径                                       优先级  状态\n------------------------------------------------------------\n  0            /opt/jdk1.6.0_37/bin/javac                    10000     自动模式\n  1            /opt/jdk1.6.0_37/bin/javac                    10000     手动模式\n  2            /opt/jdk1.8.0_101/bin/javac                   100       手动模式\n* 3            /usr/lib/jvm/java-7-openjdk-amd64/bin/javac   1051      手动模式\n\n要维持当前值[*]请按回车键，或者键入选择的编号：2\n```\n","source":"_posts/ubuntu利用update-alternatives配置java.md","raw":"---\ntitle: ubuntu利用update-alternatives配置java\ndate: 2016-11-15 19:32:21\ntags: [ubuntu, update-alternatives]\n---\n\n利用Android Studio开发，经常会碰到JDK版本的切换问题，安装好新版本的[jdk](http://www.oracle.com/technetwork/java/javase/downloads/index.html)之后，需要先配置到可选项。\n```bash\nyinlijun@sj:~$ sudo update-alternatives --install /usr/bin/java java /opt/jdk1.8.0_101/bin/java 100\nupdate-alternatives: 警告: /etc/alternatives/java has been changed (manually or by a script); switching to manual updates only\nyinlijun@sj:~$ sudo update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_101/bin/javac 100\n```\n\n<!--more-->\n\n然后，选择默认的JDK版本：\n```bash\nyinlijun@sj:~$ sudo update-alternatives --config java\n有 3 个候选项可用于替换 java (提供 /usr/bin/java)。\n\n  选择       路径                                          优先级  状态\n------------------------------------------------------------\n  0            /opt/jdk1.6.0_37/bin/java                        10000     自动模式\n  1            /opt/jdk1.6.0_37/bin/java                        10000     手动模式\n  2            /opt/jdk1.8.0_101/bin/java                       100       手动模式\n  3            /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java   1051      手动模式\n\n要维持当前值[*]请按回车键，或者键入选择的编号：2\nupdate-alternatives: using /opt/jdk1.8.0_101/bin/java to provide /usr/bin/java (java) in 手动模式\nyinlijun@sj:~$ sudo update-alternatives --config javac\n有 3 个候选项可用于替换 javac (提供 /usr/bin/javac)。\n\n  选择       路径                                       优先级  状态\n------------------------------------------------------------\n  0            /opt/jdk1.6.0_37/bin/javac                    10000     自动模式\n  1            /opt/jdk1.6.0_37/bin/javac                    10000     手动模式\n  2            /opt/jdk1.8.0_101/bin/javac                   100       手动模式\n* 3            /usr/lib/jvm/java-7-openjdk-amd64/bin/javac   1051      手动模式\n\n要维持当前值[*]请按回车键，或者键入选择的编号：2\n```\n","slug":"ubuntu利用update-alternatives配置java","published":1,"updated":"2016-11-21T02:37:41.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxg1t4v000o0cnyqsbdk8rx","content":"<p>利用Android Studio开发，经常会碰到JDK版本的切换问题，安装好新版本的<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"external\">jdk</a>之后，需要先配置到可选项。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@sj:~$ sudo update-alternatives --install /usr/bin/java java /opt/jdk1.8.0_101/bin/java 100</div><div class=\"line\">update-alternatives: 警告: /etc/alternatives/java has been changed (manually or by a script); switching to manual updates only</div><div class=\"line\">yinlijun@sj:~$ sudo update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_101/bin/javac 100</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>然后，选择默认的JDK版本：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@sj:~$ sudo update-alternatives --config java</div><div class=\"line\">有 3 个候选项可用于替换 java (提供 /usr/bin/java)。</div><div class=\"line\"></div><div class=\"line\">  选择       路径                                          优先级  状态</div><div class=\"line\">------------------------------------------------------------</div><div class=\"line\">  0            /opt/jdk1.6.0_37/bin/java                        10000     自动模式</div><div class=\"line\">  1            /opt/jdk1.6.0_37/bin/java                        10000     手动模式</div><div class=\"line\">  2            /opt/jdk1.8.0_101/bin/java                       100       手动模式</div><div class=\"line\">  3            /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java   1051      手动模式</div><div class=\"line\"></div><div class=\"line\">要维持当前值[*]请按回车键，或者键入选择的编号：2</div><div class=\"line\">update-alternatives: using /opt/jdk1.8.0_101/bin/java to provide /usr/bin/java (java) <span class=\"keyword\">in</span> 手动模式</div><div class=\"line\">yinlijun@sj:~$ sudo update-alternatives --config javac</div><div class=\"line\">有 3 个候选项可用于替换 javac (提供 /usr/bin/javac)。</div><div class=\"line\"></div><div class=\"line\">  选择       路径                                       优先级  状态</div><div class=\"line\">------------------------------------------------------------</div><div class=\"line\">  0            /opt/jdk1.6.0_37/bin/javac                    10000     自动模式</div><div class=\"line\">  1            /opt/jdk1.6.0_37/bin/javac                    10000     手动模式</div><div class=\"line\">  2            /opt/jdk1.8.0_101/bin/javac                   100       手动模式</div><div class=\"line\">* 3            /usr/lib/jvm/java-7-openjdk-amd64/bin/javac   1051      手动模式</div><div class=\"line\"></div><div class=\"line\">要维持当前值[*]请按回车键，或者键入选择的编号：2</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>利用Android Studio开发，经常会碰到JDK版本的切换问题，安装好新版本的<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\">jdk</a>之后，需要先配置到可选项。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@sj:~$ sudo update-alternatives --install /usr/bin/java java /opt/jdk1.8.0_101/bin/java 100</div><div class=\"line\">update-alternatives: 警告: /etc/alternatives/java has been changed (manually or by a script); switching to manual updates only</div><div class=\"line\">yinlijun@sj:~$ sudo update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_101/bin/javac 100</div></pre></td></tr></table></figure></p>","more":"<p>然后，选择默认的JDK版本：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@sj:~$ sudo update-alternatives --config java</div><div class=\"line\">有 3 个候选项可用于替换 java (提供 /usr/bin/java)。</div><div class=\"line\"></div><div class=\"line\">  选择       路径                                          优先级  状态</div><div class=\"line\">------------------------------------------------------------</div><div class=\"line\">  0            /opt/jdk1.6.0_37/bin/java                        10000     自动模式</div><div class=\"line\">  1            /opt/jdk1.6.0_37/bin/java                        10000     手动模式</div><div class=\"line\">  2            /opt/jdk1.8.0_101/bin/java                       100       手动模式</div><div class=\"line\">  3            /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java   1051      手动模式</div><div class=\"line\"></div><div class=\"line\">要维持当前值[*]请按回车键，或者键入选择的编号：2</div><div class=\"line\">update-alternatives: using /opt/jdk1.8.0_101/bin/java to provide /usr/bin/java (java) <span class=\"keyword\">in</span> 手动模式</div><div class=\"line\">yinlijun@sj:~$ sudo update-alternatives --config javac</div><div class=\"line\">有 3 个候选项可用于替换 javac (提供 /usr/bin/javac)。</div><div class=\"line\"></div><div class=\"line\">  选择       路径                                       优先级  状态</div><div class=\"line\">------------------------------------------------------------</div><div class=\"line\">  0            /opt/jdk1.6.0_37/bin/javac                    10000     自动模式</div><div class=\"line\">  1            /opt/jdk1.6.0_37/bin/javac                    10000     手动模式</div><div class=\"line\">  2            /opt/jdk1.8.0_101/bin/javac                   100       手动模式</div><div class=\"line\">* 3            /usr/lib/jvm/java-7-openjdk-amd64/bin/javac   1051      手动模式</div><div class=\"line\"></div><div class=\"line\">要维持当前值[*]请按回车键，或者键入选择的编号：2</div></pre></td></tr></table></figure></p>"},{"title":"windows配置mongdb记录","date":"2016-11-09T09:55:51.000Z","_content":"\n刚给windows电脑配置了mongdb记录一下。\n\n- 前往[官网](https://www.mongodb.com/download-center)下载合适的安装包，我选择的是msi安装包，也可以选择下载zip包。\n\n- 运行msi安装包（默认安装在C盘，没找到在哪里可以修改盘符）。\n\n- 在D:\\下创建好相关文件夹\n![这里写图片描述](http://img.blog.csdn.net/20161109194149759)\n\n<!--more-->\n\n- 打开命令提示符，进入到mongodb安装文件夹下的bin目录\n![这里写图片描述](http://img.blog.csdn.net/20161109194331090)\n\n- 输入如下命令，注册MongoDB服务 \n\n```bash\n mongod.exe --logpath D:\\MongoDB\\data\\log\\MongoDB.log --logappend --dbpath D:\\MongoDB\\data\\db --directoryperdb --storageEngin=mmappv1 --serviceName MongoDB --install\n```\n\n![这里写图片描述](http://img.blog.csdn.net/20161109194436279)\n\n- 启动MongoDB服务\n\n```bash\n net start MongoDB\n```\n\n![这里写图片描述](http://img.blog.csdn.net/20161109194520874)\n","source":"_posts/windows配置mongdb记录.md","raw":"---\ntitle: windows配置mongdb记录\ndate: 2016-11-9 17:55:51\ntags: [windows, mongodb]\n---\n\n刚给windows电脑配置了mongdb记录一下。\n\n- 前往[官网](https://www.mongodb.com/download-center)下载合适的安装包，我选择的是msi安装包，也可以选择下载zip包。\n\n- 运行msi安装包（默认安装在C盘，没找到在哪里可以修改盘符）。\n\n- 在D:\\下创建好相关文件夹\n![这里写图片描述](http://img.blog.csdn.net/20161109194149759)\n\n<!--more-->\n\n- 打开命令提示符，进入到mongodb安装文件夹下的bin目录\n![这里写图片描述](http://img.blog.csdn.net/20161109194331090)\n\n- 输入如下命令，注册MongoDB服务 \n\n```bash\n mongod.exe --logpath D:\\MongoDB\\data\\log\\MongoDB.log --logappend --dbpath D:\\MongoDB\\data\\db --directoryperdb --storageEngin=mmappv1 --serviceName MongoDB --install\n```\n\n![这里写图片描述](http://img.blog.csdn.net/20161109194436279)\n\n- 启动MongoDB服务\n\n```bash\n net start MongoDB\n```\n\n![这里写图片描述](http://img.blog.csdn.net/20161109194520874)\n","slug":"windows配置mongdb记录","published":1,"updated":"2016-11-21T02:37:41.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxg1t4v000q0cnycxdd74pj","content":"<p>刚给windows电脑配置了mongdb记录一下。</p>\n<ul>\n<li><p>前往<a href=\"https://www.mongodb.com/download-center\" target=\"_blank\" rel=\"external\">官网</a>下载合适的安装包，我选择的是msi安装包，也可以选择下载zip包。</p>\n</li>\n<li><p>运行msi安装包（默认安装在C盘，没找到在哪里可以修改盘符）。</p>\n</li>\n<li><p>在D:\\下创建好相关文件夹<br><img src=\"http://img.blog.csdn.net/20161109194149759\" alt=\"这里写图片描述\"></p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>打开命令提示符，进入到mongodb安装文件夹下的bin目录<br><img src=\"http://img.blog.csdn.net/20161109194331090\" alt=\"这里写图片描述\"></p>\n</li>\n<li><p>输入如下命令，注册MongoDB服务 </p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongod.exe --logpath D:\\MongoDB\\data\\<span class=\"built_in\">log</span>\\MongoDB.log --logappend --dbpath D:\\MongoDB\\data\\db --directoryperdb --storageEngin=mmappv1 --serviceName MongoDB --install</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161109194436279\" alt=\"这里写图片描述\"></p>\n<ul>\n<li>启动MongoDB服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">net start MongoDB</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161109194520874\" alt=\"这里写图片描述\"></p>\n","excerpt":"<p>刚给windows电脑配置了mongdb记录一下。</p>\n<ul>\n<li><p>前往<a href=\"https://www.mongodb.com/download-center\">官网</a>下载合适的安装包，我选择的是msi安装包，也可以选择下载zip包。</p>\n</li>\n<li><p>运行msi安装包（默认安装在C盘，没找到在哪里可以修改盘符）。</p>\n</li>\n<li><p>在D:\\下创建好相关文件夹<br><img src=\"http://img.blog.csdn.net/20161109194149759\" alt=\"这里写图片描述\"></p>\n</li>\n</ul>","more":"<ul>\n<li><p>打开命令提示符，进入到mongodb安装文件夹下的bin目录<br><img src=\"http://img.blog.csdn.net/20161109194331090\" alt=\"这里写图片描述\"></p>\n</li>\n<li><p>输入如下命令，注册MongoDB服务 </p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongod.exe --logpath D:\\MongoDB\\data\\<span class=\"built_in\">log</span>\\MongoDB.log --logappend --dbpath D:\\MongoDB\\data\\db --directoryperdb --storageEngin=mmappv1 --serviceName MongoDB --install</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161109194436279\" alt=\"这里写图片描述\"></p>\n<ul>\n<li>启动MongoDB服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">net start MongoDB</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161109194520874\" alt=\"这里写图片描述\"></p>"},{"title":"ubuntu编译android 6.0源代码环境搭建","date":"2016-11-16T01:04:37.000Z","_content":"\n\n## 安装jdk\n```bash\nsudo apt-get install openjdk-7-jdk openjdk-7-jre \n```\n如果之前系统是其他版本的JDK，需要把环境变量切换过来。\n\n<!--more-->\n\njdk版本错误会导致编译错误，如\n```\nprebuilts/sdk/api/23.txt:41822: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)\nprebuilts/sdk/api/23.txt:41823: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(MarginLayoutParams)\nprebuilts/sdk/api/23.txt:41824: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)\nprebuilts/sdk/api/23.txt:42895: error 9: Removed public constructor java.io.ObjectInputStream.GetField.ObjectInputStream.GetField()\nprebuilts/sdk/api/23.txt:42955: error 9: Removed public constructor java.io.ObjectOutputStream.PutField.ObjectOutputStream.PutField()\nprebuilts/sdk/api/23.txt:43623: error 9: Removed public constructor java.lang.Character.Subset.Character.Subset(String)\nprebuilts/sdk/api/23.txt:46730: error 9: Removed public constructor java.nio.channels.Pipe.SinkChannel.Pipe.SinkChannel(SelectorProvider)\nprebuilts/sdk/api/23.txt:46735: error 9: Removed public constructor java.nio.channels.Pipe.SourceChannel.Pipe.SourceChannel(SelectorProvider)\nprebuilts/sdk/api/23.txt:47370: error 9: Removed public constructor java.security.KeyStore.Builder.KeyStore.Builder()\nprebuilts/sdk/api/23.txt:47379: error 9: Removed public constructor java.security.KeyStore.CallbackHandlerProtection.KeyStore.CallbackHandlerProtection(CallbackHandler)\nprebuilts/sdk/api/23.txt:47391: error 9: Removed public constructor java.security.KeyStore.PasswordProtection.KeyStore.PasswordProtection(char)\n```\n\n## 安装其他工具包\n```bash\nsudo apt-get install git gitg gnupg flex bison gperf build-essential  zip curl libc6-dev  libncurses5-dev:i386 x11proto-core-dev  libx11-dev:i386 libreadline6-dev:i386   libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown\tlibxml2-utils xsltproc zlib1g-dev:i386 libarchive-zip-perl \n```\n\n","source":"_posts/ubuntu编译android源代码环境搭建.md","raw":"---\ntitle: ubuntu编译android 6.0源代码环境搭建\ntags:\n  - ubuntu\n  - android\n  - 环境搭建\ndate: 2016-11-16 09:04:37\n---\n\n\n## 安装jdk\n```bash\nsudo apt-get install openjdk-7-jdk openjdk-7-jre \n```\n如果之前系统是其他版本的JDK，需要把环境变量切换过来。\n\n<!--more-->\n\njdk版本错误会导致编译错误，如\n```\nprebuilts/sdk/api/23.txt:41822: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)\nprebuilts/sdk/api/23.txt:41823: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(MarginLayoutParams)\nprebuilts/sdk/api/23.txt:41824: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)\nprebuilts/sdk/api/23.txt:42895: error 9: Removed public constructor java.io.ObjectInputStream.GetField.ObjectInputStream.GetField()\nprebuilts/sdk/api/23.txt:42955: error 9: Removed public constructor java.io.ObjectOutputStream.PutField.ObjectOutputStream.PutField()\nprebuilts/sdk/api/23.txt:43623: error 9: Removed public constructor java.lang.Character.Subset.Character.Subset(String)\nprebuilts/sdk/api/23.txt:46730: error 9: Removed public constructor java.nio.channels.Pipe.SinkChannel.Pipe.SinkChannel(SelectorProvider)\nprebuilts/sdk/api/23.txt:46735: error 9: Removed public constructor java.nio.channels.Pipe.SourceChannel.Pipe.SourceChannel(SelectorProvider)\nprebuilts/sdk/api/23.txt:47370: error 9: Removed public constructor java.security.KeyStore.Builder.KeyStore.Builder()\nprebuilts/sdk/api/23.txt:47379: error 9: Removed public constructor java.security.KeyStore.CallbackHandlerProtection.KeyStore.CallbackHandlerProtection(CallbackHandler)\nprebuilts/sdk/api/23.txt:47391: error 9: Removed public constructor java.security.KeyStore.PasswordProtection.KeyStore.PasswordProtection(char)\n```\n\n## 安装其他工具包\n```bash\nsudo apt-get install git gitg gnupg flex bison gperf build-essential  zip curl libc6-dev  libncurses5-dev:i386 x11proto-core-dev  libx11-dev:i386 libreadline6-dev:i386   libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown\tlibxml2-utils xsltproc zlib1g-dev:i386 libarchive-zip-perl \n```\n\n","slug":"ubuntu编译android源代码环境搭建","published":1,"updated":"2016-11-21T02:37:41.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxg1t4v000s0cnybpvilt7k","content":"<h2 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install openjdk-7-jdk openjdk-7-jre</div></pre></td></tr></table></figure>\n<p>如果之前系统是其他版本的JDK，需要把环境变量切换过来。</p>\n<a id=\"more\"></a>\n<p>jdk版本错误会导致编译错误，如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">prebuilts/sdk/api/23.txt:41822: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)</div><div class=\"line\">prebuilts/sdk/api/23.txt:41823: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(MarginLayoutParams)</div><div class=\"line\">prebuilts/sdk/api/23.txt:41824: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)</div><div class=\"line\">prebuilts/sdk/api/23.txt:42895: error 9: Removed public constructor java.io.ObjectInputStream.GetField.ObjectInputStream.GetField()</div><div class=\"line\">prebuilts/sdk/api/23.txt:42955: error 9: Removed public constructor java.io.ObjectOutputStream.PutField.ObjectOutputStream.PutField()</div><div class=\"line\">prebuilts/sdk/api/23.txt:43623: error 9: Removed public constructor java.lang.Character.Subset.Character.Subset(String)</div><div class=\"line\">prebuilts/sdk/api/23.txt:46730: error 9: Removed public constructor java.nio.channels.Pipe.SinkChannel.Pipe.SinkChannel(SelectorProvider)</div><div class=\"line\">prebuilts/sdk/api/23.txt:46735: error 9: Removed public constructor java.nio.channels.Pipe.SourceChannel.Pipe.SourceChannel(SelectorProvider)</div><div class=\"line\">prebuilts/sdk/api/23.txt:47370: error 9: Removed public constructor java.security.KeyStore.Builder.KeyStore.Builder()</div><div class=\"line\">prebuilts/sdk/api/23.txt:47379: error 9: Removed public constructor java.security.KeyStore.CallbackHandlerProtection.KeyStore.CallbackHandlerProtection(CallbackHandler)</div><div class=\"line\">prebuilts/sdk/api/23.txt:47391: error 9: Removed public constructor java.security.KeyStore.PasswordProtection.KeyStore.PasswordProtection(char)</div></pre></td></tr></table></figure></p>\n<h2 id=\"安装其他工具包\"><a href=\"#安装其他工具包\" class=\"headerlink\" title=\"安装其他工具包\"></a>安装其他工具包</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install git gitg gnupg flex bison gperf build-essential  zip curl libc6-dev  libncurses5-dev:i386 x11proto-core-dev  libx11-dev:i386 libreadline6-dev:i386   libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown\tlibxml2-utils xsltproc zlib1g-dev:i386 libarchive-zip-perl</div></pre></td></tr></table></figure>\n","excerpt":"<h2 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install openjdk-7-jdk openjdk-7-jre</div></pre></td></tr></table></figure>\n<p>如果之前系统是其他版本的JDK，需要把环境变量切换过来。</p>","more":"<p>jdk版本错误会导致编译错误，如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">prebuilts/sdk/api/23.txt:41822: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)</div><div class=\"line\">prebuilts/sdk/api/23.txt:41823: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(MarginLayoutParams)</div><div class=\"line\">prebuilts/sdk/api/23.txt:41824: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)</div><div class=\"line\">prebuilts/sdk/api/23.txt:42895: error 9: Removed public constructor java.io.ObjectInputStream.GetField.ObjectInputStream.GetField()</div><div class=\"line\">prebuilts/sdk/api/23.txt:42955: error 9: Removed public constructor java.io.ObjectOutputStream.PutField.ObjectOutputStream.PutField()</div><div class=\"line\">prebuilts/sdk/api/23.txt:43623: error 9: Removed public constructor java.lang.Character.Subset.Character.Subset(String)</div><div class=\"line\">prebuilts/sdk/api/23.txt:46730: error 9: Removed public constructor java.nio.channels.Pipe.SinkChannel.Pipe.SinkChannel(SelectorProvider)</div><div class=\"line\">prebuilts/sdk/api/23.txt:46735: error 9: Removed public constructor java.nio.channels.Pipe.SourceChannel.Pipe.SourceChannel(SelectorProvider)</div><div class=\"line\">prebuilts/sdk/api/23.txt:47370: error 9: Removed public constructor java.security.KeyStore.Builder.KeyStore.Builder()</div><div class=\"line\">prebuilts/sdk/api/23.txt:47379: error 9: Removed public constructor java.security.KeyStore.CallbackHandlerProtection.KeyStore.CallbackHandlerProtection(CallbackHandler)</div><div class=\"line\">prebuilts/sdk/api/23.txt:47391: error 9: Removed public constructor java.security.KeyStore.PasswordProtection.KeyStore.PasswordProtection(char)</div></pre></td></tr></table></figure></p>\n<h2 id=\"安装其他工具包\"><a href=\"#安装其他工具包\" class=\"headerlink\" title=\"安装其他工具包\"></a>安装其他工具包</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install git gitg gnupg flex bison gperf build-essential  zip curl libc6-dev  libncurses5-dev:i386 x11proto-core-dev  libx11-dev:i386 libreadline6-dev:i386   libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown\tlibxml2-utils xsltproc zlib1g-dev:i386 libarchive-zip-perl</div></pre></td></tr></table></figure>"},{"title":"windows下文件路径太深，无法删除解决办法","date":"2016-11-08T10:02:04.000Z","_content":"\nwindows下npm开发时，有时候node_modules/下的目录嵌套太深，导致无法删除项目。\n\nnpm社区贡献了一个工具[windows-node-deps-deleter](https://www.npmjs.com/package/windows-node-deps-deleter)可供删除这样的目录。\n\n<!--more-->\n\n```\nE:\\vscode>npm install -g windows-node-deps-deleter\nC:\\Users\\xx\\AppData\\Roaming\\npm\\wnddel -> C:\\Users\\xx\\AppData\\Roaming\\npm\\no\nde_modules\\windows-node-deps-deleter\\wnddel.js\nwindows-node-deps-deleter@0.1.1 C:\\Users\\xx\\AppData\\Roaming\\npm\\node_modules\\w\nindows-node-deps-deleter\n└── fs-extra@0.13.0 (ncp@1.0.1, jsonfile@2.4.0, rimraf@2.5.4)\n\nE:\\vscode>wnddel react-todo-list\nDeleting \"react-todo-list\" ...\n\"react-todo-list\" deleted.\n```\n\n参考：[windows-node-deps-delete](https://www.npmjs.com/package/windows-node-deps-deleter#readme)\n","source":"_posts/windows下文件路径太深，无法删除解决办法.md","raw":"---\ntitle: windows下文件路径太深，无法删除解决办法\ndate: 2016-11-8 18:02:04\ntags: [windows, npm]\n---\n\nwindows下npm开发时，有时候node_modules/下的目录嵌套太深，导致无法删除项目。\n\nnpm社区贡献了一个工具[windows-node-deps-deleter](https://www.npmjs.com/package/windows-node-deps-deleter)可供删除这样的目录。\n\n<!--more-->\n\n```\nE:\\vscode>npm install -g windows-node-deps-deleter\nC:\\Users\\xx\\AppData\\Roaming\\npm\\wnddel -> C:\\Users\\xx\\AppData\\Roaming\\npm\\no\nde_modules\\windows-node-deps-deleter\\wnddel.js\nwindows-node-deps-deleter@0.1.1 C:\\Users\\xx\\AppData\\Roaming\\npm\\node_modules\\w\nindows-node-deps-deleter\n└── fs-extra@0.13.0 (ncp@1.0.1, jsonfile@2.4.0, rimraf@2.5.4)\n\nE:\\vscode>wnddel react-todo-list\nDeleting \"react-todo-list\" ...\n\"react-todo-list\" deleted.\n```\n\n参考：[windows-node-deps-delete](https://www.npmjs.com/package/windows-node-deps-deleter#readme)\n","slug":"windows下文件路径太深，无法删除解决办法","published":1,"updated":"2016-11-21T02:37:41.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxg1t4v000u0cnyn2q8szl9","content":"<p>windows下npm开发时，有时候node_modules/下的目录嵌套太深，导致无法删除项目。</p>\n<p>npm社区贡献了一个工具<a href=\"https://www.npmjs.com/package/windows-node-deps-deleter\" target=\"_blank\" rel=\"external\">windows-node-deps-deleter</a>可供删除这样的目录。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">E:\\vscode&gt;npm install -g windows-node-deps-deleter</div><div class=\"line\">C:\\Users\\xx\\AppData\\Roaming\\npm\\wnddel -&gt; C:\\Users\\xx\\AppData\\Roaming\\npm\\no</div><div class=\"line\">de_modules\\windows-node-deps-deleter\\wnddel.js</div><div class=\"line\">windows-node-deps-deleter@0.1.1 C:\\Users\\xx\\AppData\\Roaming\\npm\\node_modules\\w</div><div class=\"line\">indows-node-deps-deleter</div><div class=\"line\">└── fs-extra@0.13.0 (ncp@1.0.1, jsonfile@2.4.0, rimraf@2.5.4)</div><div class=\"line\"></div><div class=\"line\">E:\\vscode&gt;wnddel react-todo-list</div><div class=\"line\">Deleting &quot;react-todo-list&quot; ...</div><div class=\"line\">&quot;react-todo-list&quot; deleted.</div></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://www.npmjs.com/package/windows-node-deps-deleter#readme\" target=\"_blank\" rel=\"external\">windows-node-deps-delete</a></p>\n","excerpt":"<p>windows下npm开发时，有时候node_modules/下的目录嵌套太深，导致无法删除项目。</p>\n<p>npm社区贡献了一个工具<a href=\"https://www.npmjs.com/package/windows-node-deps-deleter\">windows-node-deps-deleter</a>可供删除这样的目录。</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">E:\\vscode&gt;npm install -g windows-node-deps-deleter</div><div class=\"line\">C:\\Users\\xx\\AppData\\Roaming\\npm\\wnddel -&gt; C:\\Users\\xx\\AppData\\Roaming\\npm\\no</div><div class=\"line\">de_modules\\windows-node-deps-deleter\\wnddel.js</div><div class=\"line\">windows-node-deps-deleter@0.1.1 C:\\Users\\xx\\AppData\\Roaming\\npm\\node_modules\\w</div><div class=\"line\">indows-node-deps-deleter</div><div class=\"line\">└── fs-extra@0.13.0 (ncp@1.0.1, jsonfile@2.4.0, rimraf@2.5.4)</div><div class=\"line\"></div><div class=\"line\">E:\\vscode&gt;wnddel react-todo-list</div><div class=\"line\">Deleting &quot;react-todo-list&quot; ...</div><div class=\"line\">&quot;react-todo-list&quot; deleted.</div></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://www.npmjs.com/package/windows-node-deps-deleter#readme\">windows-node-deps-delete</a></p>"},{"title":"my-son-2016.11.21","_content":"Idina Menze和Caleb Hyles激情对唱Let It Go：\n<iframe height=498 width=510 src=\"http://player.youku.com/embed/XNjcyMDU4Njg0\" frameborder=0 allowfullscreen></iframe>\n","source":"_drafts/my-son-2016-11-21.md","raw":"---\ntitle: my-son-2016.11.21\ntags: son\n---\nIdina Menze和Caleb Hyles激情对唱Let It Go：\n<iframe height=498 width=510 src=\"http://player.youku.com/embed/XNjcyMDU4Njg0\" frameborder=0 allowfullscreen></iframe>\n","slug":"my-son-2016-11-21","published":0,"date":"2016-11-21T07:08:01.822Z","updated":"2016-11-21T08:05:39.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxg1t5a000v0cny5dktbvaj","content":"<p>Idina Menze和Caleb Hyles激情对唱Let It Go：</p>\n<iframe height=\"498\" width=\"510\" src=\"http://player.youku.com/embed/XNjcyMDU4Njg0\" frameborder=\"0\" allowfullscreen></iframe>\n","excerpt":"","more":"<p>Idina Menze和Caleb Hyles激情对唱Let It Go：</p>\n<iframe height=498 width=510 src=\"http://player.youku.com/embed/XNjcyMDU4Njg0\" frameborder=0 allowfullscreen></iframe>\n"},{"title":"React组件生命周期","date":"2016-11-24T07:23:54.000Z","_content":"[原文链接](http://blog.flappyend.com/react-component-lifecycle/)\n\n## 实例化\n### 首次实例化\n\n- getDefaultProps\n- getInitialState\n- componentWillMount\n- render\n- componentDidMount\n\n<!--more-->\n\n### 实例化完成后的更新\n\ngetInitialState\ncomponentWillMount\nrender\ncomponentDidMount\n\n## 存在期\n\n### 组件已存在时的状态改变\n\n- componentWillReceiveProps\n- shouldComponentUpdate\n- componentWillUpdate\n- render\n- componentDidUpdate\n\n## 销毁&清理期\n- componentWillUnmount\n\n## 说明\n生命周期共提供了10个不同的API。\n\n1. getDefaultProps\n\n作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享。\n\n2. getInitialState\n\n作用于组件的实例，在实例创建时调用一次，用于初始化每个实例的state，此时可以访问this.props。\n\n3. componentWillMount\n\n在完成首次渲染之前调用，此时仍可以修改组件的state。\n\n4. render\n\n必选的方法，创建虚拟DOM，该方法具有特殊的规则：\n\n- 只能通过this.props和this.state访问数据\n- 可以返回null、false或任何React组件\n- 只能出现一个顶级组件（不能返回数组）\n- 不能改变组件的状态\n- 不能修改DOM的输出\n5. componentDidMount\n\n真实的DOM被渲染出来后调用，在该方法中可通过this.getDOMNode()访问到真实的DOM元素。此时已可以使用其他类库来操作这个DOM。\n\n*在服务端中，该方法不会被调用。*\n\n6. componentWillReceiveProps\n\n组件接收到新的props时调用，并将其作为参数nextProps使用，此时可以更改组件props及state。\n```javascript\n    componentWillReceiveProps: function(nextProps) {\n        if (nextProps.bool) {\n            this.setState({\n                bool: true\n            });\n        }\n    }\n```\n7. shouldComponentUpdate\n\n组件是否应当渲染新的props或state，返回false表示跳过后续的生命周期方法，通常不需要使用以避免出现bug。在出现应用的瓶颈时，可通过该方法进行适当的优化。\n\n*在首次渲染期间或者调用了forceUpdate方法后，该方法不会被调用*\n\n8. componentWillUpdate\n\n接收到新的props或者state后，进行渲染之前调用，此时不允许更新props或state。\n\n9. componentDidUpdate\n\n完成渲染新的props或者state后调用，此时可以访问到新的DOM元素。\n\n10. componentWillUnmount\n\n组件被移除之前被调用，可以用于做一些清理工作，在componentDidMount方法中添加的所有任务都需要在该方法中撤销，比如创建的定时器或添加的事件监听器。\n\n## 参考资料\n- React：引领未来的用户界面开发框架/寸志 范洪春 杨森 陈涌 译 -- 电子工业出版社\n- [Component Specs and Lifecycle190](https://facebook.github.io/react/docs/component-specs.html)","source":"_posts/react-lifecycle.md","raw":"---\ntitle: React组件生命周期\ndate: 2016-11-24 15:23:54\ntags: react\n---\n[原文链接](http://blog.flappyend.com/react-component-lifecycle/)\n\n## 实例化\n### 首次实例化\n\n- getDefaultProps\n- getInitialState\n- componentWillMount\n- render\n- componentDidMount\n\n<!--more-->\n\n### 实例化完成后的更新\n\ngetInitialState\ncomponentWillMount\nrender\ncomponentDidMount\n\n## 存在期\n\n### 组件已存在时的状态改变\n\n- componentWillReceiveProps\n- shouldComponentUpdate\n- componentWillUpdate\n- render\n- componentDidUpdate\n\n## 销毁&清理期\n- componentWillUnmount\n\n## 说明\n生命周期共提供了10个不同的API。\n\n1. getDefaultProps\n\n作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享。\n\n2. getInitialState\n\n作用于组件的实例，在实例创建时调用一次，用于初始化每个实例的state，此时可以访问this.props。\n\n3. componentWillMount\n\n在完成首次渲染之前调用，此时仍可以修改组件的state。\n\n4. render\n\n必选的方法，创建虚拟DOM，该方法具有特殊的规则：\n\n- 只能通过this.props和this.state访问数据\n- 可以返回null、false或任何React组件\n- 只能出现一个顶级组件（不能返回数组）\n- 不能改变组件的状态\n- 不能修改DOM的输出\n5. componentDidMount\n\n真实的DOM被渲染出来后调用，在该方法中可通过this.getDOMNode()访问到真实的DOM元素。此时已可以使用其他类库来操作这个DOM。\n\n*在服务端中，该方法不会被调用。*\n\n6. componentWillReceiveProps\n\n组件接收到新的props时调用，并将其作为参数nextProps使用，此时可以更改组件props及state。\n```javascript\n    componentWillReceiveProps: function(nextProps) {\n        if (nextProps.bool) {\n            this.setState({\n                bool: true\n            });\n        }\n    }\n```\n7. shouldComponentUpdate\n\n组件是否应当渲染新的props或state，返回false表示跳过后续的生命周期方法，通常不需要使用以避免出现bug。在出现应用的瓶颈时，可通过该方法进行适当的优化。\n\n*在首次渲染期间或者调用了forceUpdate方法后，该方法不会被调用*\n\n8. componentWillUpdate\n\n接收到新的props或者state后，进行渲染之前调用，此时不允许更新props或state。\n\n9. componentDidUpdate\n\n完成渲染新的props或者state后调用，此时可以访问到新的DOM元素。\n\n10. componentWillUnmount\n\n组件被移除之前被调用，可以用于做一些清理工作，在componentDidMount方法中添加的所有任务都需要在该方法中撤销，比如创建的定时器或添加的事件监听器。\n\n## 参考资料\n- React：引领未来的用户界面开发框架/寸志 范洪春 杨森 陈涌 译 -- 电子工业出版社\n- [Component Specs and Lifecycle190](https://facebook.github.io/react/docs/component-specs.html)","slug":"react-lifecycle","published":1,"updated":"2016-11-25T07:17:40.990Z","_id":"civxg1tbx00200cnye3ea5cdq","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://blog.flappyend.com/react-component-lifecycle/\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n<h2 id=\"实例化\"><a href=\"#实例化\" class=\"headerlink\" title=\"实例化\"></a>实例化</h2><h3 id=\"首次实例化\"><a href=\"#首次实例化\" class=\"headerlink\" title=\"首次实例化\"></a>首次实例化</h3><ul>\n<li>getDefaultProps</li>\n<li>getInitialState</li>\n<li>componentWillMount</li>\n<li>render</li>\n<li>componentDidMount</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"实例化完成后的更新\"><a href=\"#实例化完成后的更新\" class=\"headerlink\" title=\"实例化完成后的更新\"></a>实例化完成后的更新</h3><p>getInitialState<br>componentWillMount<br>render<br>componentDidMount</p>\n<h2 id=\"存在期\"><a href=\"#存在期\" class=\"headerlink\" title=\"存在期\"></a>存在期</h2><h3 id=\"组件已存在时的状态改变\"><a href=\"#组件已存在时的状态改变\" class=\"headerlink\" title=\"组件已存在时的状态改变\"></a>组件已存在时的状态改变</h3><ul>\n<li>componentWillReceiveProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n<li>render</li>\n<li>componentDidUpdate</li>\n</ul>\n<h2 id=\"销毁-amp-清理期\"><a href=\"#销毁-amp-清理期\" class=\"headerlink\" title=\"销毁&amp;清理期\"></a>销毁&amp;清理期</h2><ul>\n<li>componentWillUnmount</li>\n</ul>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>生命周期共提供了10个不同的API。</p>\n<ol>\n<li>getDefaultProps</li>\n</ol>\n<p>作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享。</p>\n<ol>\n<li>getInitialState</li>\n</ol>\n<p>作用于组件的实例，在实例创建时调用一次，用于初始化每个实例的state，此时可以访问this.props。</p>\n<ol>\n<li>componentWillMount</li>\n</ol>\n<p>在完成首次渲染之前调用，此时仍可以修改组件的state。</p>\n<ol>\n<li>render</li>\n</ol>\n<p>必选的方法，创建虚拟DOM，该方法具有特殊的规则：</p>\n<ul>\n<li>只能通过this.props和this.state访问数据</li>\n<li>可以返回null、false或任何React组件</li>\n<li>只能出现一个顶级组件（不能返回数组）</li>\n<li>不能改变组件的状态</li>\n<li>不能修改DOM的输出</li>\n</ul>\n<ol>\n<li>componentDidMount</li>\n</ol>\n<p>真实的DOM被渲染出来后调用，在该方法中可通过this.getDOMNode()访问到真实的DOM元素。此时已可以使用其他类库来操作这个DOM。</p>\n<p><em>在服务端中，该方法不会被调用。</em></p>\n<ol>\n<li>componentWillReceiveProps</li>\n</ol>\n<p>组件接收到新的props时调用，并将其作为参数nextProps使用，此时可以更改组件props及state。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">componentWillReceiveProps: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nextProps</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (nextProps.bool) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">            bool: <span class=\"literal\">true</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ol>\n<li>shouldComponentUpdate</li>\n</ol>\n<p>组件是否应当渲染新的props或state，返回false表示跳过后续的生命周期方法，通常不需要使用以避免出现bug。在出现应用的瓶颈时，可通过该方法进行适当的优化。</p>\n<p><em>在首次渲染期间或者调用了forceUpdate方法后，该方法不会被调用</em></p>\n<ol>\n<li>componentWillUpdate</li>\n</ol>\n<p>接收到新的props或者state后，进行渲染之前调用，此时不允许更新props或state。</p>\n<ol>\n<li>componentDidUpdate</li>\n</ol>\n<p>完成渲染新的props或者state后调用，此时可以访问到新的DOM元素。</p>\n<ol>\n<li>componentWillUnmount</li>\n</ol>\n<p>组件被移除之前被调用，可以用于做一些清理工作，在componentDidMount方法中添加的所有任务都需要在该方法中撤销，比如创建的定时器或添加的事件监听器。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>React：引领未来的用户界面开发框架/寸志 范洪春 杨森 陈涌 译 – 电子工业出版社</li>\n<li><a href=\"https://facebook.github.io/react/docs/component-specs.html\" target=\"_blank\" rel=\"external\">Component Specs and Lifecycle190</a></li>\n</ul>\n","excerpt":"<p><a href=\"http://blog.flappyend.com/react-component-lifecycle/\">原文链接</a></p>\n<h2 id=\"实例化\"><a href=\"#实例化\" class=\"headerlink\" title=\"实例化\"></a>实例化</h2><h3 id=\"首次实例化\"><a href=\"#首次实例化\" class=\"headerlink\" title=\"首次实例化\"></a>首次实例化</h3><ul>\n<li>getDefaultProps</li>\n<li>getInitialState</li>\n<li>componentWillMount</li>\n<li>render</li>\n<li>componentDidMount</li>\n</ul>","more":"<h3 id=\"实例化完成后的更新\"><a href=\"#实例化完成后的更新\" class=\"headerlink\" title=\"实例化完成后的更新\"></a>实例化完成后的更新</h3><p>getInitialState<br>componentWillMount<br>render<br>componentDidMount</p>\n<h2 id=\"存在期\"><a href=\"#存在期\" class=\"headerlink\" title=\"存在期\"></a>存在期</h2><h3 id=\"组件已存在时的状态改变\"><a href=\"#组件已存在时的状态改变\" class=\"headerlink\" title=\"组件已存在时的状态改变\"></a>组件已存在时的状态改变</h3><ul>\n<li>componentWillReceiveProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n<li>render</li>\n<li>componentDidUpdate</li>\n</ul>\n<h2 id=\"销毁-amp-清理期\"><a href=\"#销毁-amp-清理期\" class=\"headerlink\" title=\"销毁&amp;清理期\"></a>销毁&amp;清理期</h2><ul>\n<li>componentWillUnmount</li>\n</ul>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>生命周期共提供了10个不同的API。</p>\n<ol>\n<li>getDefaultProps</li>\n</ol>\n<p>作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享。</p>\n<ol>\n<li>getInitialState</li>\n</ol>\n<p>作用于组件的实例，在实例创建时调用一次，用于初始化每个实例的state，此时可以访问this.props。</p>\n<ol>\n<li>componentWillMount</li>\n</ol>\n<p>在完成首次渲染之前调用，此时仍可以修改组件的state。</p>\n<ol>\n<li>render</li>\n</ol>\n<p>必选的方法，创建虚拟DOM，该方法具有特殊的规则：</p>\n<ul>\n<li>只能通过this.props和this.state访问数据</li>\n<li>可以返回null、false或任何React组件</li>\n<li>只能出现一个顶级组件（不能返回数组）</li>\n<li>不能改变组件的状态</li>\n<li>不能修改DOM的输出</li>\n</ul>\n<ol>\n<li>componentDidMount</li>\n</ol>\n<p>真实的DOM被渲染出来后调用，在该方法中可通过this.getDOMNode()访问到真实的DOM元素。此时已可以使用其他类库来操作这个DOM。</p>\n<p><em>在服务端中，该方法不会被调用。</em></p>\n<ol>\n<li>componentWillReceiveProps</li>\n</ol>\n<p>组件接收到新的props时调用，并将其作为参数nextProps使用，此时可以更改组件props及state。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">componentWillReceiveProps: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nextProps</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (nextProps.bool) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">            bool: <span class=\"literal\">true</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ol>\n<li>shouldComponentUpdate</li>\n</ol>\n<p>组件是否应当渲染新的props或state，返回false表示跳过后续的生命周期方法，通常不需要使用以避免出现bug。在出现应用的瓶颈时，可通过该方法进行适当的优化。</p>\n<p><em>在首次渲染期间或者调用了forceUpdate方法后，该方法不会被调用</em></p>\n<ol>\n<li>componentWillUpdate</li>\n</ol>\n<p>接收到新的props或者state后，进行渲染之前调用，此时不允许更新props或state。</p>\n<ol>\n<li>componentDidUpdate</li>\n</ol>\n<p>完成渲染新的props或者state后调用，此时可以访问到新的DOM元素。</p>\n<ol>\n<li>componentWillUnmount</li>\n</ol>\n<p>组件被移除之前被调用，可以用于做一些清理工作，在componentDidMount方法中添加的所有任务都需要在该方法中撤销，比如创建的定时器或添加的事件监听器。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>React：引领未来的用户界面开发框架/寸志 范洪春 杨森 陈涌 译 – 电子工业出版社</li>\n<li><a href=\"https://facebook.github.io/react/docs/component-specs.html\">Component Specs and Lifecycle190</a></li>\n</ul>"},{"title":"锋利的jQeury 第三章-笔记","date":"2016-09-03T10:04:19.000Z","_content":"\n## 第三章 jQuery中的DOM操作\n - 查找`DOM`节点\n\n    ```javascript\n    var $li = $('ul li:eq(1)'); //获取<ul>里的第二个<li>节点\n    ```\n\n<!--more-->\n\n - 查找属性节点\n\n    ```javascript\n    var $para = $('p'); \n    var p_txt = $para.attr('title');\n    ```\n<!--more-->\n\n - 创建元素节点\n\n    ```javascript\n    var $li = $('<li></li>');\n    ```\n\n - 创建文本节点\n\n    ```javascript\n    var $li = $('<li>香蕉</li>');\n    ```\n\n - 创建属性节点\n\n    ```javascript\n    var $li = $('<li title=\"香蕉\">香蕉</li>');\n    ```\n    \n - 插入节点的方法\n    - append 追加元素。$('p').append($(\"&lt;b>你好&lt;/b>\"))，A.append(B)之后，A和B是父子关系。\n    - appendTo 跟append相反，A.append(B) 相当于 B.appendTo(A)\n    - prepend 插入到前面\n    - prependTo 跟prepend相反\n    - after 在每个匹配元素之后插入内容，A.after(B)之后，A与B是兄弟元素\n    - intertAfter跟after相反，A.after(B)相当于B.instertAfter(A)\n    - before，跟after相反\n    - insertBefore，A.before(B)相当于B.insertBefore(A)\n    - 删除节点的方法\n    - remove 删除匹配的元素 $('ul li:eq(1)').remove()，删除第二个li元素，remove返回值是删除的元素\n    - detach 与remove不同，detach会保留所有该元素绑定的事件，附加的数据等。\n    - empty 清空节点\n\n- 复制节点 clone，可以传入一个boolean参数表示是否同时复制元素中所绑定的事件。\n\n- 替换节点\n    - replaceWith， A.replaceWith(B)，用B替换A\n    - replaceAll 跟replaceWith相反，A.replaceWith(B)相当于B.replaceAll(A)\n\n- 包裹节点\n    - wrap $('strong').wrap('&lt;b>&lt;/b>') 用&lt;b>标签将&lt;strong>标签包起来，如果有多个匹配，则每个元素单独包裹。\n    - wrapAll，将所有的元素用一个元素来包裹。如果匹配的节点之间有其他节点，其他节点会被放到包裹元素之后。\n    - wrapInner 将子内容（包括文本节点）包裹起来。\n\n- 获取属性，$('p').atter('title')\n\n- 设置属性\n\n    - $('p').attr('title', 'your title') 设置单个属性\n\n    - $('p').attr({'title', 'your title', 'name': 'test'})，设置多个属性\n\n- 删除属性 $('p').removeAttr('title');\n\n- 获取样式 $('p').attr('class')获取&lt;p>元素的class\n\n- 设置样式 $('p').attr('class', 'high') 设置样式\n\n- 追加样式 $('p').addClass('another')\n\n- 移除样式\n\n    - $('p').removeClass('another') 移除一个样式\n\n    - $('p').removeClass('another high') 移除多个样式\n\n- 切换样式 $('p').toggleClass('another')，如果another类名不存在则添加之，否则删除之\n\n- 判断是否含有某个样式 $('p').hasClass('another')\n- html()方法 获取或设置html内容，相当于javascript的innerHTML属性\n- text() 获取或设置文本内容，相当于javascript的innerText属性\n\n    - 获取: var text = $('p').text()\n\n    - 设置 $('p').text('你喜欢的水果是')\n- val()方法 获取或设置value，相当于javascript的value属性\n\n- 遍历节点\n    - children() 返回子节点（DOM原声节点，非jQuery节点）\n    - next()方法，获取紧临的同辈元素，也就是返回下一个兄弟节点。\n    - prev()，跟next相反，返回上一个兄弟节点\n    - siblings()返回前后所有的同辈元素。\n    - closest() 取得最近的匹配元素，往父控件追溯。如$(e.target).closest('li').css('color', 'red');给点击的目标元素附近的li元素添加颜色。\n    - parents() 获得集合中每个匹配元素的祖先元素。\n    - parent() 获得集合中每个匹配元素的父级元素。\n    - find() / filter() / nextAll() / prevAll() 等。\n\n- 获取样式 $('p').css('color') 获取&lt;p>的样式颜色\n\n- 设置样式\n\n    - $('p').css('color', 'red');\n\n    - $('p').css({\"fontSize\": \"30px\", \"backgroundColor\": \"#888888\"'});\n\n    - 元素定位\n        - offset()，获取元素在当前视窗中的相对偏移。\n        - position() 获取元素相对于最近的一个position样式为relative或absolute（为啥）的父节点的相对偏移。\n    - scrollLeft() 获取或设置水平滚动条的位置\n    - scrollRight() 获取或设置垂直滚动条的位置。\n","source":"_posts/chapter-3.md","raw":"---\ntitle: 锋利的jQeury 第三章-笔记 \ndate: 2016-9-3 18:04:19\ntags: jQuery\n---\n\n## 第三章 jQuery中的DOM操作\n - 查找`DOM`节点\n\n    ```javascript\n    var $li = $('ul li:eq(1)'); //获取<ul>里的第二个<li>节点\n    ```\n\n<!--more-->\n\n - 查找属性节点\n\n    ```javascript\n    var $para = $('p'); \n    var p_txt = $para.attr('title');\n    ```\n<!--more-->\n\n - 创建元素节点\n\n    ```javascript\n    var $li = $('<li></li>');\n    ```\n\n - 创建文本节点\n\n    ```javascript\n    var $li = $('<li>香蕉</li>');\n    ```\n\n - 创建属性节点\n\n    ```javascript\n    var $li = $('<li title=\"香蕉\">香蕉</li>');\n    ```\n    \n - 插入节点的方法\n    - append 追加元素。$('p').append($(\"&lt;b>你好&lt;/b>\"))，A.append(B)之后，A和B是父子关系。\n    - appendTo 跟append相反，A.append(B) 相当于 B.appendTo(A)\n    - prepend 插入到前面\n    - prependTo 跟prepend相反\n    - after 在每个匹配元素之后插入内容，A.after(B)之后，A与B是兄弟元素\n    - intertAfter跟after相反，A.after(B)相当于B.instertAfter(A)\n    - before，跟after相反\n    - insertBefore，A.before(B)相当于B.insertBefore(A)\n    - 删除节点的方法\n    - remove 删除匹配的元素 $('ul li:eq(1)').remove()，删除第二个li元素，remove返回值是删除的元素\n    - detach 与remove不同，detach会保留所有该元素绑定的事件，附加的数据等。\n    - empty 清空节点\n\n- 复制节点 clone，可以传入一个boolean参数表示是否同时复制元素中所绑定的事件。\n\n- 替换节点\n    - replaceWith， A.replaceWith(B)，用B替换A\n    - replaceAll 跟replaceWith相反，A.replaceWith(B)相当于B.replaceAll(A)\n\n- 包裹节点\n    - wrap $('strong').wrap('&lt;b>&lt;/b>') 用&lt;b>标签将&lt;strong>标签包起来，如果有多个匹配，则每个元素单独包裹。\n    - wrapAll，将所有的元素用一个元素来包裹。如果匹配的节点之间有其他节点，其他节点会被放到包裹元素之后。\n    - wrapInner 将子内容（包括文本节点）包裹起来。\n\n- 获取属性，$('p').atter('title')\n\n- 设置属性\n\n    - $('p').attr('title', 'your title') 设置单个属性\n\n    - $('p').attr({'title', 'your title', 'name': 'test'})，设置多个属性\n\n- 删除属性 $('p').removeAttr('title');\n\n- 获取样式 $('p').attr('class')获取&lt;p>元素的class\n\n- 设置样式 $('p').attr('class', 'high') 设置样式\n\n- 追加样式 $('p').addClass('another')\n\n- 移除样式\n\n    - $('p').removeClass('another') 移除一个样式\n\n    - $('p').removeClass('another high') 移除多个样式\n\n- 切换样式 $('p').toggleClass('another')，如果another类名不存在则添加之，否则删除之\n\n- 判断是否含有某个样式 $('p').hasClass('another')\n- html()方法 获取或设置html内容，相当于javascript的innerHTML属性\n- text() 获取或设置文本内容，相当于javascript的innerText属性\n\n    - 获取: var text = $('p').text()\n\n    - 设置 $('p').text('你喜欢的水果是')\n- val()方法 获取或设置value，相当于javascript的value属性\n\n- 遍历节点\n    - children() 返回子节点（DOM原声节点，非jQuery节点）\n    - next()方法，获取紧临的同辈元素，也就是返回下一个兄弟节点。\n    - prev()，跟next相反，返回上一个兄弟节点\n    - siblings()返回前后所有的同辈元素。\n    - closest() 取得最近的匹配元素，往父控件追溯。如$(e.target).closest('li').css('color', 'red');给点击的目标元素附近的li元素添加颜色。\n    - parents() 获得集合中每个匹配元素的祖先元素。\n    - parent() 获得集合中每个匹配元素的父级元素。\n    - find() / filter() / nextAll() / prevAll() 等。\n\n- 获取样式 $('p').css('color') 获取&lt;p>的样式颜色\n\n- 设置样式\n\n    - $('p').css('color', 'red');\n\n    - $('p').css({\"fontSize\": \"30px\", \"backgroundColor\": \"#888888\"'});\n\n    - 元素定位\n        - offset()，获取元素在当前视窗中的相对偏移。\n        - position() 获取元素相对于最近的一个position样式为relative或absolute（为啥）的父节点的相对偏移。\n    - scrollLeft() 获取或设置水平滚动条的位置\n    - scrollRight() 获取或设置垂直滚动条的位置。\n","slug":"chapter-3","published":1,"updated":"2016-11-21T02:37:41.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civxg1tc000210cnyrymufc4l","content":"<h2 id=\"第三章-jQuery中的DOM操作\"><a href=\"#第三章-jQuery中的DOM操作\" class=\"headerlink\" title=\"第三章 jQuery中的DOM操作\"></a>第三章 jQuery中的DOM操作</h2><ul>\n<li><p>查找<code>DOM</code>节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'ul li:eq(1)'</span>); <span class=\"comment\">//获取&lt;ul&gt;里的第二个&lt;li&gt;节点</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>查找属性节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $para = $(<span class=\"string\">'p'</span>); </div><div class=\"line\"><span class=\"keyword\">var</span> p_txt = $para.attr(<span class=\"string\">'title'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<!--more-->\n<ul>\n<li><p>创建元素节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li&gt;&lt;/li&gt;'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建文本节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li&gt;香蕉&lt;/li&gt;'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建属性节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li title=\"香蕉\"&gt;香蕉&lt;/li&gt;'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>插入节点的方法<ul>\n<li>append 追加元素。$(‘p’).append($(“&lt;b&gt;你好&lt;/b&gt;”))，A.append(B)之后，A和B是父子关系。</li>\n<li>appendTo 跟append相反，A.append(B) 相当于 B.appendTo(A)</li>\n<li>prepend 插入到前面</li>\n<li>prependTo 跟prepend相反</li>\n<li>after 在每个匹配元素之后插入内容，A.after(B)之后，A与B是兄弟元素</li>\n<li>intertAfter跟after相反，A.after(B)相当于B.instertAfter(A)</li>\n<li>before，跟after相反</li>\n<li>insertBefore，A.before(B)相当于B.insertBefore(A)</li>\n<li>删除节点的方法</li>\n<li>remove 删除匹配的元素 $(‘ul li:eq(1)’).remove()，删除第二个li元素，remove返回值是删除的元素</li>\n<li>detach 与remove不同，detach会保留所有该元素绑定的事件，附加的数据等。</li>\n<li>empty 清空节点</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>复制节点 clone，可以传入一个boolean参数表示是否同时复制元素中所绑定的事件。</p>\n</li>\n<li><p>替换节点</p>\n<ul>\n<li>replaceWith， A.replaceWith(B)，用B替换A</li>\n<li>replaceAll 跟replaceWith相反，A.replaceWith(B)相当于B.replaceAll(A)</li>\n</ul>\n</li>\n<li><p>包裹节点</p>\n<ul>\n<li>wrap $(‘strong’).wrap(‘&lt;b&gt;&lt;/b&gt;’) 用&lt;b&gt;标签将&lt;strong&gt;标签包起来，如果有多个匹配，则每个元素单独包裹。</li>\n<li>wrapAll，将所有的元素用一个元素来包裹。如果匹配的节点之间有其他节点，其他节点会被放到包裹元素之后。</li>\n<li>wrapInner 将子内容（包括文本节点）包裹起来。</li>\n</ul>\n</li>\n<li><p>获取属性，$(‘p’).atter(‘title’)</p>\n</li>\n<li><p>设置属性</p>\n<ul>\n<li><p>$(‘p’).attr(‘title’, ‘your title’) 设置单个属性</p>\n</li>\n<li><p>$(‘p’).attr({‘title’, ‘your title’, ‘name’: ‘test’})，设置多个属性</p>\n</li>\n</ul>\n</li>\n<li><p>删除属性 $(‘p’).removeAttr(‘title’);</p>\n</li>\n<li><p>获取样式 $(‘p’).attr(‘class’)获取&lt;p&gt;元素的class</p>\n</li>\n<li><p>设置样式 $(‘p’).attr(‘class’, ‘high’) 设置样式</p>\n</li>\n<li><p>追加样式 $(‘p’).addClass(‘another’)</p>\n</li>\n<li><p>移除样式</p>\n<ul>\n<li><p>$(‘p’).removeClass(‘another’) 移除一个样式</p>\n</li>\n<li><p>$(‘p’).removeClass(‘another high’) 移除多个样式</p>\n</li>\n</ul>\n</li>\n<li><p>切换样式 $(‘p’).toggleClass(‘another’)，如果another类名不存在则添加之，否则删除之</p>\n</li>\n<li><p>判断是否含有某个样式 $(‘p’).hasClass(‘another’)</p>\n</li>\n<li>html()方法 获取或设置html内容，相当于javascript的innerHTML属性</li>\n<li><p>text() 获取或设置文本内容，相当于javascript的innerText属性</p>\n<ul>\n<li><p>获取: var text = $(‘p’).text()</p>\n</li>\n<li><p>设置 $(‘p’).text(‘你喜欢的水果是’)</p>\n</li>\n</ul>\n</li>\n<li><p>val()方法 获取或设置value，相当于javascript的value属性</p>\n</li>\n<li><p>遍历节点</p>\n<ul>\n<li>children() 返回子节点（DOM原声节点，非jQuery节点）</li>\n<li>next()方法，获取紧临的同辈元素，也就是返回下一个兄弟节点。</li>\n<li>prev()，跟next相反，返回上一个兄弟节点</li>\n<li>siblings()返回前后所有的同辈元素。</li>\n<li>closest() 取得最近的匹配元素，往父控件追溯。如$(e.target).closest(‘li’).css(‘color’, ‘red’);给点击的目标元素附近的li元素添加颜色。</li>\n<li>parents() 获得集合中每个匹配元素的祖先元素。</li>\n<li>parent() 获得集合中每个匹配元素的父级元素。</li>\n<li>find() / filter() / nextAll() / prevAll() 等。</li>\n</ul>\n</li>\n<li><p>获取样式 $(‘p’).css(‘color’) 获取&lt;p&gt;的样式颜色</p>\n</li>\n<li><p>设置样式</p>\n<ul>\n<li><p>$(‘p’).css(‘color’, ‘red’);</p>\n</li>\n<li><p>$(‘p’).css({“fontSize”: “30px”, “backgroundColor”: “#888888”‘});</p>\n</li>\n<li><p>元素定位</p>\n<ul>\n<li>offset()，获取元素在当前视窗中的相对偏移。</li>\n<li>position() 获取元素相对于最近的一个position样式为relative或absolute（为啥）的父节点的相对偏移。</li>\n</ul>\n</li>\n<li>scrollLeft() 获取或设置水平滚动条的位置</li>\n<li>scrollRight() 获取或设置垂直滚动条的位置。</li>\n</ul>\n</li>\n</ul>\n","excerpt":"<h2 id=\"第三章-jQuery中的DOM操作\"><a href=\"#第三章-jQuery中的DOM操作\" class=\"headerlink\" title=\"第三章 jQuery中的DOM操作\"></a>第三章 jQuery中的DOM操作</h2><ul>\n<li><p>查找<code>DOM</code>节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'ul li:eq(1)'</span>); <span class=\"comment\">//获取&lt;ul&gt;里的第二个&lt;li&gt;节点</span></div></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<ul>\n<li><p>查找属性节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $para = $(<span class=\"string\">'p'</span>); </div><div class=\"line\"><span class=\"keyword\">var</span> p_txt = $para.attr(<span class=\"string\">'title'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<!--more-->\n<ul>\n<li><p>创建元素节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li&gt;&lt;/li&gt;'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建文本节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li&gt;香蕉&lt;/li&gt;'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建属性节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li title=\"香蕉\"&gt;香蕉&lt;/li&gt;'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>插入节点的方法<ul>\n<li>append 追加元素。$(‘p’).append($(“&lt;b&gt;你好&lt;/b&gt;”))，A.append(B)之后，A和B是父子关系。</li>\n<li>appendTo 跟append相反，A.append(B) 相当于 B.appendTo(A)</li>\n<li>prepend 插入到前面</li>\n<li>prependTo 跟prepend相反</li>\n<li>after 在每个匹配元素之后插入内容，A.after(B)之后，A与B是兄弟元素</li>\n<li>intertAfter跟after相反，A.after(B)相当于B.instertAfter(A)</li>\n<li>before，跟after相反</li>\n<li>insertBefore，A.before(B)相当于B.insertBefore(A)</li>\n<li>删除节点的方法</li>\n<li>remove 删除匹配的元素 $(‘ul li:eq(1)’).remove()，删除第二个li元素，remove返回值是删除的元素</li>\n<li>detach 与remove不同，detach会保留所有该元素绑定的事件，附加的数据等。</li>\n<li>empty 清空节点</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>复制节点 clone，可以传入一个boolean参数表示是否同时复制元素中所绑定的事件。</p>\n</li>\n<li><p>替换节点</p>\n<ul>\n<li>replaceWith， A.replaceWith(B)，用B替换A</li>\n<li>replaceAll 跟replaceWith相反，A.replaceWith(B)相当于B.replaceAll(A)</li>\n</ul>\n</li>\n<li><p>包裹节点</p>\n<ul>\n<li>wrap $(‘strong’).wrap(‘&lt;b&gt;&lt;/b&gt;’) 用&lt;b&gt;标签将&lt;strong&gt;标签包起来，如果有多个匹配，则每个元素单独包裹。</li>\n<li>wrapAll，将所有的元素用一个元素来包裹。如果匹配的节点之间有其他节点，其他节点会被放到包裹元素之后。</li>\n<li>wrapInner 将子内容（包括文本节点）包裹起来。</li>\n</ul>\n</li>\n<li><p>获取属性，$(‘p’).atter(‘title’)</p>\n</li>\n<li><p>设置属性</p>\n<ul>\n<li><p>$(‘p’).attr(‘title’, ‘your title’) 设置单个属性</p>\n</li>\n<li><p>$(‘p’).attr({‘title’, ‘your title’, ‘name’: ‘test’})，设置多个属性</p>\n</li>\n</ul>\n</li>\n<li><p>删除属性 $(‘p’).removeAttr(‘title’);</p>\n</li>\n<li><p>获取样式 $(‘p’).attr(‘class’)获取&lt;p&gt;元素的class</p>\n</li>\n<li><p>设置样式 $(‘p’).attr(‘class’, ‘high’) 设置样式</p>\n</li>\n<li><p>追加样式 $(‘p’).addClass(‘another’)</p>\n</li>\n<li><p>移除样式</p>\n<ul>\n<li><p>$(‘p’).removeClass(‘another’) 移除一个样式</p>\n</li>\n<li><p>$(‘p’).removeClass(‘another high’) 移除多个样式</p>\n</li>\n</ul>\n</li>\n<li><p>切换样式 $(‘p’).toggleClass(‘another’)，如果another类名不存在则添加之，否则删除之</p>\n</li>\n<li><p>判断是否含有某个样式 $(‘p’).hasClass(‘another’)</p>\n</li>\n<li>html()方法 获取或设置html内容，相当于javascript的innerHTML属性</li>\n<li><p>text() 获取或设置文本内容，相当于javascript的innerText属性</p>\n<ul>\n<li><p>获取: var text = $(‘p’).text()</p>\n</li>\n<li><p>设置 $(‘p’).text(‘你喜欢的水果是’)</p>\n</li>\n</ul>\n</li>\n<li><p>val()方法 获取或设置value，相当于javascript的value属性</p>\n</li>\n<li><p>遍历节点</p>\n<ul>\n<li>children() 返回子节点（DOM原声节点，非jQuery节点）</li>\n<li>next()方法，获取紧临的同辈元素，也就是返回下一个兄弟节点。</li>\n<li>prev()，跟next相反，返回上一个兄弟节点</li>\n<li>siblings()返回前后所有的同辈元素。</li>\n<li>closest() 取得最近的匹配元素，往父控件追溯。如$(e.target).closest(‘li’).css(‘color’, ‘red’);给点击的目标元素附近的li元素添加颜色。</li>\n<li>parents() 获得集合中每个匹配元素的祖先元素。</li>\n<li>parent() 获得集合中每个匹配元素的父级元素。</li>\n<li>find() / filter() / nextAll() / prevAll() 等。</li>\n</ul>\n</li>\n<li><p>获取样式 $(‘p’).css(‘color’) 获取&lt;p&gt;的样式颜色</p>\n</li>\n<li><p>设置样式</p>\n<ul>\n<li><p>$(‘p’).css(‘color’, ‘red’);</p>\n</li>\n<li><p>$(‘p’).css({“fontSize”: “30px”, “backgroundColor”: “#888888”‘});</p>\n</li>\n<li><p>元素定位</p>\n<ul>\n<li>offset()，获取元素在当前视窗中的相对偏移。</li>\n<li>position() 获取元素相对于最近的一个position样式为relative或absolute（为啥）的父节点的相对偏移。</li>\n</ul>\n</li>\n<li>scrollLeft() 获取或设置水平滚动条的位置</li>\n<li>scrollRight() 获取或设置垂直滚动条的位置。</li>\n</ul>\n</li>\n</ul>"},{"_content":"二维码又称QR Code，QR全称Quick Response，是一个近几年来移动设备上超流行的一种编码方式，它比传统的Bar Code条形码能存更多的信息，也能表示更多的数据类型：比如：字符，数字，日文，中文等等。这两天学习了一下二维码图片生成的相关细节，觉得这个玩意就是一个密码算法，在此写一这篇文章 ，揭露一下。供好学的人一同学习之。\n\n\n# 基础知识\n\n## 二维码定位\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/QR-Code-Overview.jpeg)\n\n- Position Detection Pattern是定位图案，用于标记二维码的矩形大小。这三个定位图案有白边叫Separators for Postion Detection Patterns。之所以三个而不是四个意思就是三个就可以标识一个矩形了。\n\n- Timing Patterns也是用于定位的。原因是二维码有40种尺寸，尺寸过大了后需要有根标准线，不然扫描的时候可能会扫歪了。\n\n- Alignment Patterns 只有Version 2以上（包括Version2）的二维码需要这个东东，同样是为了定位用的。\n\n## 功能性定位\n\n- Format Information 存在于所有的尺寸中，用于存放一些格式化数据的。\n- Version Information 在 >= Version 7以上，需要预留两块3 x 6的区域存放一些版本信息。\n\n## 数据码和纠错码\n\n- 除了上述的那些地方，剩下的地方存放 Data Code 数据码 和 Error Correction Code 纠错码。\n\n # 数据编码\n\n 我们先来说说数据编码。QR码支持如下的编码：\n\n**Numeric mode** 数字编码，从0到9。如果需要编码的数字的个数不是3的倍数，那么，最后剩下的1或2位数会被转成4或7bits，则其它的每3位数字会被编成 10，12，14bits，编成多长还要看二维码的尺寸（下面有一个表Table 3说明了这点）\n\n**Alphanumeric mode** 字符编码。包括 0-9，大写的A到Z（没有小写），以及符号$ % * + – . / : 包括空格。这些字符会映射成一个字符索引表。如下所示：（其中的SP是空格，Char是字符，Value是其索引值） 编码的过程是把字符两两分组，然后转成下表的45进制，然后转成11bits的二进制，如果最后有一个落单的，那就转成6bits的二进制。而编码模式和字符的个数需要根据不同的Version尺寸编成9, 11或13个二进制（如下表中Table 3）\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Alphanumeric-mode.png)\n\n**Byte mode**, 字节编码，可以是0-255的ISO-8859-1字符。有些二维码的扫描器可以自动检测是否是UTF-8的编码。\n\n**Kanji mode** 这是日文编码，也是双字节编码。同样，也可以用于中文编码。日文和汉字的编码会减去一个值。如：在0X8140 to 0X9FFC中的字符会减去8140，在0XE040到0XEBBF中的字符要减去0XC140，然后把结果前两个16进制位拿出来乘以0XC0，然后再加上后两个16进制位，最后转成13bit的编码。如下图示例:\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Kanji-mode.png)\n\n**Extended Channel Interpretation (ECI) mode** 主要用于特殊的字符集。并不是所有的扫描器都支持这种编码。\n\n**Structured Append mode** 用于混合编码，也就是说，这个二维码中包含了多种编码格式。\n\n**FNC1 mode** 这种编码方式主要是给一些特殊的工业或行业用的。比如GS1条形码之类的。\n\n简单起见，后面三种不会在本文 中讨论。\n\n下面两张表中，\n\n- Table 2 是各个编码格式的“编号”，这个东西要写在Format Information中。注：中文是1101\n- Table 3 表示了，不同版本（尺寸）的二维码，对于，数字，字符，字节和Kanji模式下，对于单个编码的2进制的位数。（在二维码的规格说明书中，有各种各样的编码规范表，后面还会提到）\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Mode-Indicator.png)\n\n下面我们看几个示例，\n\n## **示例一：数字编码**\n\n在Version 1的尺寸下，纠错级别为H的情况下，编码： 01234567\n\n1. 把上述数字分成三组: 012 345 67\n\n2. 把他们转成二进制:  012 转成 0000001100；  345 转成 0101011001；  67 转成 1000011。\n\n3. 把这三个二进制串起来: 0000001100 0101011001 1000011\n\n4. 把数字的个数转成二进制 (version 1-H是10 bits ): 8个数字的二进制是 0000001000\n\n5. 把数字编码的标志0001和第4步的编码加到前面:  0001 0000001000 0000001100 0101011001 1000011\n\n## **示例二：字符编码**\n\n在Version 1的尺寸下，纠错级别为H的情况下，编码: AC-42\n\n1. 从字符索引表中找到 AC-42 这五个字条的索引 (10,12,41,4,2)\n\n2. 两两分组: (10,12) (41,4) (2)\n\n3. 把每一组转成11bits的二进制:\n\n        (10,12) 10*45+12 等于 462 转成 00111001110\n        (41,4) 41*45+4 等于 1849 转成 11100111001\n        (2) 等于 2 转成 000010\n\n4. 把这些二进制连接起来：00111001110 11100111001 000010\n\n5. 把字符的个数转成二进制 (Version 1-H为9 bits ): 5个字符，5转成 000000101\n\n6. 在头上加上编码标识 0010 和第5步的个数编码:  0010 000000101 00111001110 11100111001 000010\n\n## **结束符和补齐符**\n假如我们有个HELLO WORLD的字符串要编码，根据上面的示例二，我们可以得到下面的编码，\n\n| 编码        | 字符数           | HELLO WORLD的编码  |\n| ------------- |:-------------:|:-----: |\n| 0010      | 000001011 | 01100001011 01111000110 10001011100 10110111000 10011010100 001101 |\n| | |\n\n我们还要加上结束符\n| 编码        | 字符数           | HELLO WORLD的编码  | 结束 |\n| ------------- |:-------------:|:-------------:| -----:|\n| 0010      | 000001011 | 01100001011 01111000110 10001011100 10110111000 10011010100 001101 | 0000 |\n| | |\n\n## **按8bits重排**\n如果所有的编码加起来不是8个倍数我们还要在后面加上足够的0，比如上面一共有78个bits，所以，我们还要加上2个0，然后按8个bits分好组：\n\n00100000   01011011   00001011   01111000   11010001   01110010   11011100   01001101   01000011   010000<font color=red>**00**</font>\n\n## **补齐码（Padding Bytes）**\n\n最后，如果如果还没有达到我们最大的bits数的限制，我们还要加一些补齐码（Padding Bytes），Padding Bytes就是重复下面的两个bytes：11101100 00010001 （这两个二进制转成十进制是236和17，我也不知道为什么，只知道Spec上是这么写的）关于每一个Version的每一种纠错级别的最大Bits限制，可以参看QR Code Spec的第28页到32页的Table-7一表。\n\n假设我们需要编码的是Version 1的Q纠错级，那么，其最大需要104个bits，而我们上面只有80个bits，所以，还需要补24个bits，也就是需要3个Padding Bytes，我们就添加三个，于是得到下面的编码：\n\n00100000 01011011 00001011 01111000 11010001 01110010 11011100 01001101 01000011 01000000 <font color=red>**11101100 00010001 11101100**</font>\n\n上面的编码就是数据码了，叫Data Codewords，每一个8bits叫一个codeword，我们还要对这些数据码加上纠错信息。\n\n# **纠错码**\n\n上面我们说到了一些纠错级别，Error Correction Code Level，二维码中有四种级别的纠错，这就是为什么二维码有残缺还能扫出来，也就是为什么有人在二维码的中心位置加入图标。\n\n| 错误修正容量 | |\n|----|:----:|\n| L水平 | 7%的字码可被修正 \n| M水平 | 15%的字码可被修正 \n| Q水平 | 25%的字码可被修正\n| H水平 | 30%的字码可被修正\n\n那么，QR是怎么对数据码加上纠错码的？首先，我们需要对数据码进行分组，也就是分成不同的Block，然后对各个Block进行纠错编码，对于如何分组，我们可以查看QR Code Spec的第33页到44页的Table-13到Table-22的定义表。注意最后两列：\n\n- **Number of Error Code Correction Blocks**：需要分多少个块。\n- **Error Correction Code Per Blocks**：每一个块中的code个数，所谓的code的个数，也就是有多少个8bits的字节。\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Error-Correction-Blocks.png)\n\n举个例子：上述的Version 5 + Q纠错级：需要4个Blocks（2个Blocks为一组，共两组），头一组的两个Blocks中各15个bits数据 + 各 9个bits的纠错码（注：表中的codewords就是一个8bits的byte）（再注：最后一例中的（c, k, r ）的公式为：c = k + 2 * r，因为后脚注解释了：纠错码的容量小于纠错码的一半）\n\n下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）\n\n下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）\n\n| 组 | 块 | 数据 | 对每个块的纠错码 |\n|----|:----|:----|:----|\n| 1 | 1 | 67 85 70 134 87 38 85 194 119 50 6 18 6 103 38 | 213 199 11 45 115 247 241 223 229 248 154 117 154 111 86 161 111 39 |\n|   | 2\t| 246 246 66 7 118 134 242 7 38 86 22 198 199 146 6 | 87 204 96 60 202 182 124 157 200 134 27 129 209 17 163 163 120 133 |\n| 2 | 1 | 182 230 247 119 50 7 118 134 87 38 82 6 134 151 50 7 | 148 116 177 212 76 133 75 242 238 76 195 230 189 10 108 240 192 141 |\n|   | 2 | 70 247 118 86 194 6 151 50 16 236 17 236 17 236 17 236 | 235 159 5 173 24 147 59 33 106 40 255 172 82 2 131 32 178 236 |\n\n注：二维码的纠错码主要是通过[Reed-Solomon error correction](http://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction)（里德-所罗门纠错算法）来实现的。对于这个算法，对于我来说是相当的复杂，里面有很多的数学计算，比如：多项式除法，把1-255的数映射成2的n次方（0<=n<=255）的伽罗瓦域Galois Field之类的神一样的东西，以及基于这些基础的纠错数学公式，因为我的数据基础差，对于我来说太过复杂，所以我一时半会儿还有点没搞明白，还在学习中，所以，我在这里就不展开说这些东西了。还请大家见谅了。（当然，如果有朋友很明白，也繁请教教我）\n\n# **最终编码**\n\n## 穿插放置\n\n如果你以为我们可以开始画图，你就错了。二维码的混乱技术还没有玩完，它还要把数据码和纠错码的各个codewords交替放在一起。如何交替呢，规则如下：\n\n对于数据码：把每个块的第一个codewords先拿出来按顺度排列好，然后再取第一块的第二个，如此类推。如：上述示例中的Data Codewords如下：\n\n||||||||||||||||||\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n|块 1|67|85|70|134|87|38|85|194|119|50|6|18|6|103|38||\n|块 2|246|246|66|7|118|134|242|7|38|86|22|198|199|146|6||\t\n|块 3|182|230|247|119|50|7|118|134|87|38|82|6|134|151|50|7|\n|块 4|70|247|118|86|194|6|151|50|16|236|17|236|17|236|17|236|\n\n我们先取第一列的：67， 246， 182， 70\n\n然后再取第二列的：67， 246， 182， 70， 85，246，230 ，247\n\n如此类推：67， 246， 182， 70， 85，246，230 ，247 ………  ……… ，38，6，50，17，7，236\n\n对于纠错码，也是一样：\n||||||||||||||||||\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n|块 1|\t213|\t199|\t11|\t45|\t115|\t247|\t241|\t223|\t229|\t248|\t154|\t117|\t154|\t111|\t86|\t161|\t111|\t39|\n|块 2|\t87|\t204|\t96|\t60|\t202|\t182|\t124|\t157|\t200|\t134|\t27|\t129|\t209|\t17|\t163|\t163|\t120|\t133|\n|块 3|\t148|\t116|\t177|\t212|\t76|\t133|\t75|\t242|\t238|\t76|\t195|\t230|\t189|\t10|\t108|\t240|\t192|\t141|\n|块 4|\t235|\t159|\t5|\t173|\t24|\t147|\t59|\t33|\t106|\t40|\t255|\t172|\t82|\t2|\t131|\t32|\t178|\t236|\n\n和数据码取的一样，得到：213，87，148，235，199，204，116，159，…… …… 39，133，141，236\n\n然后，再把这两组放在一起（纠错码放在数据码之后）得到：\n\n67, 246, 182, 70, 85, 246, 230, 247, 70, 66, 247, 118, 134, 7, 119, 86, 87, 118, 50, 194, 38, 134, 7, 6, 85, 242, 118, 151, 194, 7, 134, 50, 119, 38, 87, 16, 50, 86, 38, 236, 6, 22, 82, 17, 18, 198, 6, 236, 6, 199, 134, 17, 103, 146, 151, 236, 38, 6, 50, 17, 7, 236, 213, 87, 148, 235, 199, 204, 116, 159, 11, 96, 177, 5, 45, 60, 212, 173, 115, 202, 76, 24, 247, 182, 133, 147, 241, 124, 75, 59, 223, 157, 242, 33, 229, 200, 238, 106, 248, 134, 76, 40, 154, 27, 195, 255, 117, 129, 230, 172, 154, 209, 189, 82, 111, 17, 10, 2, 86, 163, 108, 131, 161, 163, 240, 32, 111, 120, 192, 178, 39, 133, 141, 236\n\n这就是我们的数据区。\n\n## **Remainder Bits**\n最后再加上Reminder Bits，对于某些Version的QR，上面的还不够长度，还要加上Remainder Bits，比如：上述的5Q版的二维码，还要加上7个bits，Remainder Bits加零就好了。关于哪些Version需要多少个Remainder bit，可以参看QR Code Spec的第15页的Table-1的定义表。\n\n# **画二维码图**\n## **Position Detection Pattern**\n首先，先把Position Detection图案画在三个角上。（无论Version如何，这个图案的尺寸就是这么大）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/finder.png)\n\n## **Alignment Pattern**\n然后，再把Alignment图案画上（无论Version如何，这个图案的尺寸就是这么大）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/alignment-pattern.png)\n\n\n关于Alignment的位置，可以查看QR Code Spec的第81页的Table-E.1的定义表（下表是不完全表格）\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Alignment-Position.png)\n\n下图是根据上述表格中的Version8的一个例子（6，24，42）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/alignment-example.png)\n\n## **Timing Pattern**\n接下来是Timing Pattern的线（这个不用多说了）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Timing-Pattern.png)\n\n## **Format Information**\n再接下来是Formation Information，下图中的蓝色部分。\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Format-Information.png)\n\nFormat Information是一个15个bits的信息，每一个bit的位置如下图所示：（注意图中的Dark Module，那是永远出现的）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Format-Info-bits-postion.png)\n\n这15个bits中包括：\n\n- 5个数据bits：其中，2个bits用于表示使用什么样的Error Correction Level， 3个bits表示使用什么样的Mask\n- 10个纠错bits。主要通过BCH Code来计算\n\n然后15个bits还要与101010000010010做XOR操作。这样就保证不会因为我们选用了00的纠错级别和000的Mask，从而造成全部为白色，这会增加我们的扫描器的图像识别的困难。\n\n下面是一个示例：\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Format-Information-Example.png)\n\n关于Error Correction Level如下表所示：\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Error-Correction-Indicator-Code.png)\n\n关于Mask图案如后面的Table 23所示。\n\n## **Version Information**\n再接下来是Version Information（版本7以后需要这个编码），下图中的蓝色部分。\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Version-Information.png)\n\nVersion Information一共是18个bits，其中包括6个bits的版本号以及12个bits的纠错码，下面是一个示例：\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Example.png)\n\n而其填充位置如下：\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Position.png)\n\n## **数据和数据纠错码**\n然后是填接我们的最终编码，最终编码的填充方式如下：从左下角开始沿着红线填我们的各个bits，1是黑色，0是白色。如果遇到了上面的非数据区，则绕开或跳过。\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Data-Placement.png)\n\n## **掩码图案**\n这样下来，我们的图就填好了，但是，也许那些点并不均衡，如果出现大面积的空白或黑块，会告诉我们扫描识别的困难。所以，我们还要做Masking操作（靠，还嫌不复杂）QR的Spec中说了，QR有8个Mask你可以使用，如下所示：其中，各个mask的公式在各个图下面。所谓mask，说白了，就是和上面生成的图做XOR操作。Mask只会和数据区进行XOR，不会影响功能区。（注：选择一个合适的Mask也是有算法的）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/masking-pattern.png)\n\n其Mask的标识码如下所示：（其中的i,j分别对应于上图的x,y）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Mask-Pattern-Code.png)\n\n下面是Mask后的一些样子，我们可以看到被某些Mask XOR了的数据变得比较零散了。\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Masking-Examples.png)\n\nMask过后的二维码就成最终的图了。\n\n好了，大家可以去尝试去写一下QR的编码程序，当然，你可以用网上找个Reed Soloman的纠错算法的库，或是看看别人的源代码是怎么实现这个繁锁的编码。\n\n\n\n\n\n\n\n\n","source":"_drafts/qrcode.md","raw":"二维码又称QR Code，QR全称Quick Response，是一个近几年来移动设备上超流行的一种编码方式，它比传统的Bar Code条形码能存更多的信息，也能表示更多的数据类型：比如：字符，数字，日文，中文等等。这两天学习了一下二维码图片生成的相关细节，觉得这个玩意就是一个密码算法，在此写一这篇文章 ，揭露一下。供好学的人一同学习之。\n\n\n# 基础知识\n\n## 二维码定位\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/QR-Code-Overview.jpeg)\n\n- Position Detection Pattern是定位图案，用于标记二维码的矩形大小。这三个定位图案有白边叫Separators for Postion Detection Patterns。之所以三个而不是四个意思就是三个就可以标识一个矩形了。\n\n- Timing Patterns也是用于定位的。原因是二维码有40种尺寸，尺寸过大了后需要有根标准线，不然扫描的时候可能会扫歪了。\n\n- Alignment Patterns 只有Version 2以上（包括Version2）的二维码需要这个东东，同样是为了定位用的。\n\n## 功能性定位\n\n- Format Information 存在于所有的尺寸中，用于存放一些格式化数据的。\n- Version Information 在 >= Version 7以上，需要预留两块3 x 6的区域存放一些版本信息。\n\n## 数据码和纠错码\n\n- 除了上述的那些地方，剩下的地方存放 Data Code 数据码 和 Error Correction Code 纠错码。\n\n # 数据编码\n\n 我们先来说说数据编码。QR码支持如下的编码：\n\n**Numeric mode** 数字编码，从0到9。如果需要编码的数字的个数不是3的倍数，那么，最后剩下的1或2位数会被转成4或7bits，则其它的每3位数字会被编成 10，12，14bits，编成多长还要看二维码的尺寸（下面有一个表Table 3说明了这点）\n\n**Alphanumeric mode** 字符编码。包括 0-9，大写的A到Z（没有小写），以及符号$ % * + – . / : 包括空格。这些字符会映射成一个字符索引表。如下所示：（其中的SP是空格，Char是字符，Value是其索引值） 编码的过程是把字符两两分组，然后转成下表的45进制，然后转成11bits的二进制，如果最后有一个落单的，那就转成6bits的二进制。而编码模式和字符的个数需要根据不同的Version尺寸编成9, 11或13个二进制（如下表中Table 3）\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Alphanumeric-mode.png)\n\n**Byte mode**, 字节编码，可以是0-255的ISO-8859-1字符。有些二维码的扫描器可以自动检测是否是UTF-8的编码。\n\n**Kanji mode** 这是日文编码，也是双字节编码。同样，也可以用于中文编码。日文和汉字的编码会减去一个值。如：在0X8140 to 0X9FFC中的字符会减去8140，在0XE040到0XEBBF中的字符要减去0XC140，然后把结果前两个16进制位拿出来乘以0XC0，然后再加上后两个16进制位，最后转成13bit的编码。如下图示例:\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Kanji-mode.png)\n\n**Extended Channel Interpretation (ECI) mode** 主要用于特殊的字符集。并不是所有的扫描器都支持这种编码。\n\n**Structured Append mode** 用于混合编码，也就是说，这个二维码中包含了多种编码格式。\n\n**FNC1 mode** 这种编码方式主要是给一些特殊的工业或行业用的。比如GS1条形码之类的。\n\n简单起见，后面三种不会在本文 中讨论。\n\n下面两张表中，\n\n- Table 2 是各个编码格式的“编号”，这个东西要写在Format Information中。注：中文是1101\n- Table 3 表示了，不同版本（尺寸）的二维码，对于，数字，字符，字节和Kanji模式下，对于单个编码的2进制的位数。（在二维码的规格说明书中，有各种各样的编码规范表，后面还会提到）\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Mode-Indicator.png)\n\n下面我们看几个示例，\n\n## **示例一：数字编码**\n\n在Version 1的尺寸下，纠错级别为H的情况下，编码： 01234567\n\n1. 把上述数字分成三组: 012 345 67\n\n2. 把他们转成二进制:  012 转成 0000001100；  345 转成 0101011001；  67 转成 1000011。\n\n3. 把这三个二进制串起来: 0000001100 0101011001 1000011\n\n4. 把数字的个数转成二进制 (version 1-H是10 bits ): 8个数字的二进制是 0000001000\n\n5. 把数字编码的标志0001和第4步的编码加到前面:  0001 0000001000 0000001100 0101011001 1000011\n\n## **示例二：字符编码**\n\n在Version 1的尺寸下，纠错级别为H的情况下，编码: AC-42\n\n1. 从字符索引表中找到 AC-42 这五个字条的索引 (10,12,41,4,2)\n\n2. 两两分组: (10,12) (41,4) (2)\n\n3. 把每一组转成11bits的二进制:\n\n        (10,12) 10*45+12 等于 462 转成 00111001110\n        (41,4) 41*45+4 等于 1849 转成 11100111001\n        (2) 等于 2 转成 000010\n\n4. 把这些二进制连接起来：00111001110 11100111001 000010\n\n5. 把字符的个数转成二进制 (Version 1-H为9 bits ): 5个字符，5转成 000000101\n\n6. 在头上加上编码标识 0010 和第5步的个数编码:  0010 000000101 00111001110 11100111001 000010\n\n## **结束符和补齐符**\n假如我们有个HELLO WORLD的字符串要编码，根据上面的示例二，我们可以得到下面的编码，\n\n| 编码        | 字符数           | HELLO WORLD的编码  |\n| ------------- |:-------------:|:-----: |\n| 0010      | 000001011 | 01100001011 01111000110 10001011100 10110111000 10011010100 001101 |\n| | |\n\n我们还要加上结束符\n| 编码        | 字符数           | HELLO WORLD的编码  | 结束 |\n| ------------- |:-------------:|:-------------:| -----:|\n| 0010      | 000001011 | 01100001011 01111000110 10001011100 10110111000 10011010100 001101 | 0000 |\n| | |\n\n## **按8bits重排**\n如果所有的编码加起来不是8个倍数我们还要在后面加上足够的0，比如上面一共有78个bits，所以，我们还要加上2个0，然后按8个bits分好组：\n\n00100000   01011011   00001011   01111000   11010001   01110010   11011100   01001101   01000011   010000<font color=red>**00**</font>\n\n## **补齐码（Padding Bytes）**\n\n最后，如果如果还没有达到我们最大的bits数的限制，我们还要加一些补齐码（Padding Bytes），Padding Bytes就是重复下面的两个bytes：11101100 00010001 （这两个二进制转成十进制是236和17，我也不知道为什么，只知道Spec上是这么写的）关于每一个Version的每一种纠错级别的最大Bits限制，可以参看QR Code Spec的第28页到32页的Table-7一表。\n\n假设我们需要编码的是Version 1的Q纠错级，那么，其最大需要104个bits，而我们上面只有80个bits，所以，还需要补24个bits，也就是需要3个Padding Bytes，我们就添加三个，于是得到下面的编码：\n\n00100000 01011011 00001011 01111000 11010001 01110010 11011100 01001101 01000011 01000000 <font color=red>**11101100 00010001 11101100**</font>\n\n上面的编码就是数据码了，叫Data Codewords，每一个8bits叫一个codeword，我们还要对这些数据码加上纠错信息。\n\n# **纠错码**\n\n上面我们说到了一些纠错级别，Error Correction Code Level，二维码中有四种级别的纠错，这就是为什么二维码有残缺还能扫出来，也就是为什么有人在二维码的中心位置加入图标。\n\n| 错误修正容量 | |\n|----|:----:|\n| L水平 | 7%的字码可被修正 \n| M水平 | 15%的字码可被修正 \n| Q水平 | 25%的字码可被修正\n| H水平 | 30%的字码可被修正\n\n那么，QR是怎么对数据码加上纠错码的？首先，我们需要对数据码进行分组，也就是分成不同的Block，然后对各个Block进行纠错编码，对于如何分组，我们可以查看QR Code Spec的第33页到44页的Table-13到Table-22的定义表。注意最后两列：\n\n- **Number of Error Code Correction Blocks**：需要分多少个块。\n- **Error Correction Code Per Blocks**：每一个块中的code个数，所谓的code的个数，也就是有多少个8bits的字节。\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Error-Correction-Blocks.png)\n\n举个例子：上述的Version 5 + Q纠错级：需要4个Blocks（2个Blocks为一组，共两组），头一组的两个Blocks中各15个bits数据 + 各 9个bits的纠错码（注：表中的codewords就是一个8bits的byte）（再注：最后一例中的（c, k, r ）的公式为：c = k + 2 * r，因为后脚注解释了：纠错码的容量小于纠错码的一半）\n\n下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）\n\n下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）\n\n| 组 | 块 | 数据 | 对每个块的纠错码 |\n|----|:----|:----|:----|\n| 1 | 1 | 67 85 70 134 87 38 85 194 119 50 6 18 6 103 38 | 213 199 11 45 115 247 241 223 229 248 154 117 154 111 86 161 111 39 |\n|   | 2\t| 246 246 66 7 118 134 242 7 38 86 22 198 199 146 6 | 87 204 96 60 202 182 124 157 200 134 27 129 209 17 163 163 120 133 |\n| 2 | 1 | 182 230 247 119 50 7 118 134 87 38 82 6 134 151 50 7 | 148 116 177 212 76 133 75 242 238 76 195 230 189 10 108 240 192 141 |\n|   | 2 | 70 247 118 86 194 6 151 50 16 236 17 236 17 236 17 236 | 235 159 5 173 24 147 59 33 106 40 255 172 82 2 131 32 178 236 |\n\n注：二维码的纠错码主要是通过[Reed-Solomon error correction](http://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction)（里德-所罗门纠错算法）来实现的。对于这个算法，对于我来说是相当的复杂，里面有很多的数学计算，比如：多项式除法，把1-255的数映射成2的n次方（0<=n<=255）的伽罗瓦域Galois Field之类的神一样的东西，以及基于这些基础的纠错数学公式，因为我的数据基础差，对于我来说太过复杂，所以我一时半会儿还有点没搞明白，还在学习中，所以，我在这里就不展开说这些东西了。还请大家见谅了。（当然，如果有朋友很明白，也繁请教教我）\n\n# **最终编码**\n\n## 穿插放置\n\n如果你以为我们可以开始画图，你就错了。二维码的混乱技术还没有玩完，它还要把数据码和纠错码的各个codewords交替放在一起。如何交替呢，规则如下：\n\n对于数据码：把每个块的第一个codewords先拿出来按顺度排列好，然后再取第一块的第二个，如此类推。如：上述示例中的Data Codewords如下：\n\n||||||||||||||||||\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n|块 1|67|85|70|134|87|38|85|194|119|50|6|18|6|103|38||\n|块 2|246|246|66|7|118|134|242|7|38|86|22|198|199|146|6||\t\n|块 3|182|230|247|119|50|7|118|134|87|38|82|6|134|151|50|7|\n|块 4|70|247|118|86|194|6|151|50|16|236|17|236|17|236|17|236|\n\n我们先取第一列的：67， 246， 182， 70\n\n然后再取第二列的：67， 246， 182， 70， 85，246，230 ，247\n\n如此类推：67， 246， 182， 70， 85，246，230 ，247 ………  ……… ，38，6，50，17，7，236\n\n对于纠错码，也是一样：\n||||||||||||||||||\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n|块 1|\t213|\t199|\t11|\t45|\t115|\t247|\t241|\t223|\t229|\t248|\t154|\t117|\t154|\t111|\t86|\t161|\t111|\t39|\n|块 2|\t87|\t204|\t96|\t60|\t202|\t182|\t124|\t157|\t200|\t134|\t27|\t129|\t209|\t17|\t163|\t163|\t120|\t133|\n|块 3|\t148|\t116|\t177|\t212|\t76|\t133|\t75|\t242|\t238|\t76|\t195|\t230|\t189|\t10|\t108|\t240|\t192|\t141|\n|块 4|\t235|\t159|\t5|\t173|\t24|\t147|\t59|\t33|\t106|\t40|\t255|\t172|\t82|\t2|\t131|\t32|\t178|\t236|\n\n和数据码取的一样，得到：213，87，148，235，199，204，116，159，…… …… 39，133，141，236\n\n然后，再把这两组放在一起（纠错码放在数据码之后）得到：\n\n67, 246, 182, 70, 85, 246, 230, 247, 70, 66, 247, 118, 134, 7, 119, 86, 87, 118, 50, 194, 38, 134, 7, 6, 85, 242, 118, 151, 194, 7, 134, 50, 119, 38, 87, 16, 50, 86, 38, 236, 6, 22, 82, 17, 18, 198, 6, 236, 6, 199, 134, 17, 103, 146, 151, 236, 38, 6, 50, 17, 7, 236, 213, 87, 148, 235, 199, 204, 116, 159, 11, 96, 177, 5, 45, 60, 212, 173, 115, 202, 76, 24, 247, 182, 133, 147, 241, 124, 75, 59, 223, 157, 242, 33, 229, 200, 238, 106, 248, 134, 76, 40, 154, 27, 195, 255, 117, 129, 230, 172, 154, 209, 189, 82, 111, 17, 10, 2, 86, 163, 108, 131, 161, 163, 240, 32, 111, 120, 192, 178, 39, 133, 141, 236\n\n这就是我们的数据区。\n\n## **Remainder Bits**\n最后再加上Reminder Bits，对于某些Version的QR，上面的还不够长度，还要加上Remainder Bits，比如：上述的5Q版的二维码，还要加上7个bits，Remainder Bits加零就好了。关于哪些Version需要多少个Remainder bit，可以参看QR Code Spec的第15页的Table-1的定义表。\n\n# **画二维码图**\n## **Position Detection Pattern**\n首先，先把Position Detection图案画在三个角上。（无论Version如何，这个图案的尺寸就是这么大）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/finder.png)\n\n## **Alignment Pattern**\n然后，再把Alignment图案画上（无论Version如何，这个图案的尺寸就是这么大）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/alignment-pattern.png)\n\n\n关于Alignment的位置，可以查看QR Code Spec的第81页的Table-E.1的定义表（下表是不完全表格）\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Alignment-Position.png)\n\n下图是根据上述表格中的Version8的一个例子（6，24，42）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/alignment-example.png)\n\n## **Timing Pattern**\n接下来是Timing Pattern的线（这个不用多说了）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Timing-Pattern.png)\n\n## **Format Information**\n再接下来是Formation Information，下图中的蓝色部分。\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Format-Information.png)\n\nFormat Information是一个15个bits的信息，每一个bit的位置如下图所示：（注意图中的Dark Module，那是永远出现的）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Format-Info-bits-postion.png)\n\n这15个bits中包括：\n\n- 5个数据bits：其中，2个bits用于表示使用什么样的Error Correction Level， 3个bits表示使用什么样的Mask\n- 10个纠错bits。主要通过BCH Code来计算\n\n然后15个bits还要与101010000010010做XOR操作。这样就保证不会因为我们选用了00的纠错级别和000的Mask，从而造成全部为白色，这会增加我们的扫描器的图像识别的困难。\n\n下面是一个示例：\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Format-Information-Example.png)\n\n关于Error Correction Level如下表所示：\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Error-Correction-Indicator-Code.png)\n\n关于Mask图案如后面的Table 23所示。\n\n## **Version Information**\n再接下来是Version Information（版本7以后需要这个编码），下图中的蓝色部分。\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Version-Information.png)\n\nVersion Information一共是18个bits，其中包括6个bits的版本号以及12个bits的纠错码，下面是一个示例：\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Example.png)\n\n而其填充位置如下：\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Position.png)\n\n## **数据和数据纠错码**\n然后是填接我们的最终编码，最终编码的填充方式如下：从左下角开始沿着红线填我们的各个bits，1是黑色，0是白色。如果遇到了上面的非数据区，则绕开或跳过。\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Data-Placement.png)\n\n## **掩码图案**\n这样下来，我们的图就填好了，但是，也许那些点并不均衡，如果出现大面积的空白或黑块，会告诉我们扫描识别的困难。所以，我们还要做Masking操作（靠，还嫌不复杂）QR的Spec中说了，QR有8个Mask你可以使用，如下所示：其中，各个mask的公式在各个图下面。所谓mask，说白了，就是和上面生成的图做XOR操作。Mask只会和数据区进行XOR，不会影响功能区。（注：选择一个合适的Mask也是有算法的）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/masking-pattern.png)\n\n其Mask的标识码如下所示：（其中的i,j分别对应于上图的x,y）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Mask-Pattern-Code.png)\n\n下面是Mask后的一些样子，我们可以看到被某些Mask XOR了的数据变得比较零散了。\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Masking-Examples.png)\n\nMask过后的二维码就成最终的图了。\n\n好了，大家可以去尝试去写一下QR的编码程序，当然，你可以用网上找个Reed Soloman的纠错算法的库，或是看看别人的源代码是怎么实现这个繁锁的编码。\n\n\n\n\n\n\n\n\n","slug":"qrcode","published":0,"date":"2016-10-28T10:19:30.765Z","updated":"2016-10-29T08:58:44.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"civxg1tc300230cny3jx92bhx","content":"<p>二维码又称QR Code，QR全称Quick Response，是一个近几年来移动设备上超流行的一种编码方式，它比传统的Bar Code条形码能存更多的信息，也能表示更多的数据类型：比如：字符，数字，日文，中文等等。这两天学习了一下二维码图片生成的相关细节，觉得这个玩意就是一个密码算法，在此写一这篇文章 ，揭露一下。供好学的人一同学习之。</p>\n<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><h2 id=\"二维码定位\"><a href=\"#二维码定位\" class=\"headerlink\" title=\"二维码定位\"></a>二维码定位</h2><p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/QR-Code-Overview.jpeg\" alt=\"alt\"></p>\n<ul>\n<li><p>Position Detection Pattern是定位图案，用于标记二维码的矩形大小。这三个定位图案有白边叫Separators for Postion Detection Patterns。之所以三个而不是四个意思就是三个就可以标识一个矩形了。</p>\n</li>\n<li><p>Timing Patterns也是用于定位的。原因是二维码有40种尺寸，尺寸过大了后需要有根标准线，不然扫描的时候可能会扫歪了。</p>\n</li>\n<li><p>Alignment Patterns 只有Version 2以上（包括Version2）的二维码需要这个东东，同样是为了定位用的。</p>\n</li>\n</ul>\n<h2 id=\"功能性定位\"><a href=\"#功能性定位\" class=\"headerlink\" title=\"功能性定位\"></a>功能性定位</h2><ul>\n<li>Format Information 存在于所有的尺寸中，用于存放一些格式化数据的。</li>\n<li>Version Information 在 &gt;= Version 7以上，需要预留两块3 x 6的区域存放一些版本信息。</li>\n</ul>\n<h2 id=\"数据码和纠错码\"><a href=\"#数据码和纠错码\" class=\"headerlink\" title=\"数据码和纠错码\"></a>数据码和纠错码</h2><ul>\n<li><p>除了上述的那些地方，剩下的地方存放 Data Code 数据码 和 Error Correction Code 纠错码。</p>\n<h1 id=\"数据编码\"><a href=\"#数据编码\" class=\"headerlink\" title=\"数据编码\"></a>数据编码</h1><p>我们先来说说数据编码。QR码支持如下的编码：</p>\n</li>\n</ul>\n<p><strong>Numeric mode</strong> 数字编码，从0到9。如果需要编码的数字的个数不是3的倍数，那么，最后剩下的1或2位数会被转成4或7bits，则其它的每3位数字会被编成 10，12，14bits，编成多长还要看二维码的尺寸（下面有一个表Table 3说明了这点）</p>\n<p><strong>Alphanumeric mode</strong> 字符编码。包括 0-9，大写的A到Z（没有小写），以及符号$ % * + – . / : 包括空格。这些字符会映射成一个字符索引表。如下所示：（其中的SP是空格，Char是字符，Value是其索引值） 编码的过程是把字符两两分组，然后转成下表的45进制，然后转成11bits的二进制，如果最后有一个落单的，那就转成6bits的二进制。而编码模式和字符的个数需要根据不同的Version尺寸编成9, 11或13个二进制（如下表中Table 3）<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Alphanumeric-mode.png\" alt=\"alt\"></p>\n<p><strong>Byte mode</strong>, 字节编码，可以是0-255的ISO-8859-1字符。有些二维码的扫描器可以自动检测是否是UTF-8的编码。</p>\n<p><strong>Kanji mode</strong> 这是日文编码，也是双字节编码。同样，也可以用于中文编码。日文和汉字的编码会减去一个值。如：在0X8140 to 0X9FFC中的字符会减去8140，在0XE040到0XEBBF中的字符要减去0XC140，然后把结果前两个16进制位拿出来乘以0XC0，然后再加上后两个16进制位，最后转成13bit的编码。如下图示例:<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Kanji-mode.png\" alt=\"alt\"></p>\n<p><strong>Extended Channel Interpretation (ECI) mode</strong> 主要用于特殊的字符集。并不是所有的扫描器都支持这种编码。</p>\n<p><strong>Structured Append mode</strong> 用于混合编码，也就是说，这个二维码中包含了多种编码格式。</p>\n<p><strong>FNC1 mode</strong> 这种编码方式主要是给一些特殊的工业或行业用的。比如GS1条形码之类的。</p>\n<p>简单起见，后面三种不会在本文 中讨论。</p>\n<p>下面两张表中，</p>\n<ul>\n<li>Table 2 是各个编码格式的“编号”，这个东西要写在Format Information中。注：中文是1101</li>\n<li>Table 3 表示了，不同版本（尺寸）的二维码，对于，数字，字符，字节和Kanji模式下，对于单个编码的2进制的位数。（在二维码的规格说明书中，有各种各样的编码规范表，后面还会提到）<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Mode-Indicator.png\" alt=\"alt\"></li>\n</ul>\n<p>下面我们看几个示例，</p>\n<h2 id=\"示例一：数字编码\"><a href=\"#示例一：数字编码\" class=\"headerlink\" title=\"示例一：数字编码\"></a><strong>示例一：数字编码</strong></h2><p>在Version 1的尺寸下，纠错级别为H的情况下，编码： 01234567</p>\n<ol>\n<li><p>把上述数字分成三组: 012 345 67</p>\n</li>\n<li><p>把他们转成二进制:  012 转成 0000001100；  345 转成 0101011001；  67 转成 1000011。</p>\n</li>\n<li><p>把这三个二进制串起来: 0000001100 0101011001 1000011</p>\n</li>\n<li><p>把数字的个数转成二进制 (version 1-H是10 bits ): 8个数字的二进制是 0000001000</p>\n</li>\n<li><p>把数字编码的标志0001和第4步的编码加到前面:  0001 0000001000 0000001100 0101011001 1000011</p>\n</li>\n</ol>\n<h2 id=\"示例二：字符编码\"><a href=\"#示例二：字符编码\" class=\"headerlink\" title=\"示例二：字符编码\"></a><strong>示例二：字符编码</strong></h2><p>在Version 1的尺寸下，纠错级别为H的情况下，编码: AC-42</p>\n<ol>\n<li><p>从字符索引表中找到 AC-42 这五个字条的索引 (10,12,41,4,2)</p>\n</li>\n<li><p>两两分组: (10,12) (41,4) (2)</p>\n</li>\n<li><p>把每一组转成11bits的二进制:</p>\n<pre><code>(10,12) 10*45+12 等于 462 转成 00111001110\n(41,4) 41*45+4 等于 1849 转成 11100111001\n(2) 等于 2 转成 000010\n</code></pre></li>\n<li><p>把这些二进制连接起来：00111001110 11100111001 000010</p>\n</li>\n<li><p>把字符的个数转成二进制 (Version 1-H为9 bits ): 5个字符，5转成 000000101</p>\n</li>\n<li><p>在头上加上编码标识 0010 和第5步的个数编码:  0010 000000101 00111001110 11100111001 000010</p>\n</li>\n</ol>\n<h2 id=\"结束符和补齐符\"><a href=\"#结束符和补齐符\" class=\"headerlink\" title=\"结束符和补齐符\"></a><strong>结束符和补齐符</strong></h2><p>假如我们有个HELLO WORLD的字符串要编码，根据上面的示例二，我们可以得到下面的编码，</p>\n<table>\n<thead>\n<tr>\n<th>编码</th>\n<th style=\"text-align:center\">字符数</th>\n<th style=\"text-align:center\">HELLO WORLD的编码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0010</td>\n<td style=\"text-align:center\">000001011</td>\n<td style=\"text-align:center\">01100001011 01111000110 10001011100 10110111000 10011010100 001101</td>\n</tr>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>我们还要加上结束符<br>| 编码        | 字符数           | HELLO WORLD的编码  | 结束 |<br>| ————- |:————-:|:————-:| —–:|<br>| 0010      | 000001011 | 01100001011 01111000110 10001011100 10110111000 10011010100 001101 | 0000 |<br>| | |</p>\n<h2 id=\"按8bits重排\"><a href=\"#按8bits重排\" class=\"headerlink\" title=\"按8bits重排\"></a><strong>按8bits重排</strong></h2><p>如果所有的编码加起来不是8个倍数我们还要在后面加上足够的0，比如上面一共有78个bits，所以，我们还要加上2个0，然后按8个bits分好组：</p>\n<p>00100000   01011011   00001011   01111000   11010001   01110010   11011100   01001101   01000011   010000<font color=\"red\"><strong>00</strong></font></p>\n<h2 id=\"补齐码（Padding-Bytes）\"><a href=\"#补齐码（Padding-Bytes）\" class=\"headerlink\" title=\"补齐码（Padding Bytes）\"></a><strong>补齐码（Padding Bytes）</strong></h2><p>最后，如果如果还没有达到我们最大的bits数的限制，我们还要加一些补齐码（Padding Bytes），Padding Bytes就是重复下面的两个bytes：11101100 00010001 （这两个二进制转成十进制是236和17，我也不知道为什么，只知道Spec上是这么写的）关于每一个Version的每一种纠错级别的最大Bits限制，可以参看QR Code Spec的第28页到32页的Table-7一表。</p>\n<p>假设我们需要编码的是Version 1的Q纠错级，那么，其最大需要104个bits，而我们上面只有80个bits，所以，还需要补24个bits，也就是需要3个Padding Bytes，我们就添加三个，于是得到下面的编码：</p>\n<p>00100000 01011011 00001011 01111000 11010001 01110010 11011100 01001101 01000011 01000000 <font color=\"red\"><strong>11101100 00010001 11101100</strong></font></p>\n<p>上面的编码就是数据码了，叫Data Codewords，每一个8bits叫一个codeword，我们还要对这些数据码加上纠错信息。</p>\n<h1 id=\"纠错码\"><a href=\"#纠错码\" class=\"headerlink\" title=\"纠错码\"></a><strong>纠错码</strong></h1><p>上面我们说到了一些纠错级别，Error Correction Code Level，二维码中有四种级别的纠错，这就是为什么二维码有残缺还能扫出来，也就是为什么有人在二维码的中心位置加入图标。</p>\n<table>\n<thead>\n<tr>\n<th>错误修正容量</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>L水平</td>\n<td style=\"text-align:center\">7%的字码可被修正 </td>\n</tr>\n<tr>\n<td>M水平</td>\n<td style=\"text-align:center\">15%的字码可被修正 </td>\n</tr>\n<tr>\n<td>Q水平</td>\n<td style=\"text-align:center\">25%的字码可被修正</td>\n</tr>\n<tr>\n<td>H水平</td>\n<td style=\"text-align:center\">30%的字码可被修正</td>\n</tr>\n</tbody>\n</table>\n<p>那么，QR是怎么对数据码加上纠错码的？首先，我们需要对数据码进行分组，也就是分成不同的Block，然后对各个Block进行纠错编码，对于如何分组，我们可以查看QR Code Spec的第33页到44页的Table-13到Table-22的定义表。注意最后两列：</p>\n<ul>\n<li><strong>Number of Error Code Correction Blocks</strong>：需要分多少个块。</li>\n<li><strong>Error Correction Code Per Blocks</strong>：每一个块中的code个数，所谓的code的个数，也就是有多少个8bits的字节。</li>\n</ul>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Error-Correction-Blocks.png\" alt=\"alt\"></p>\n<p>举个例子：上述的Version 5 + Q纠错级：需要4个Blocks（2个Blocks为一组，共两组），头一组的两个Blocks中各15个bits数据 + 各 9个bits的纠错码（注：表中的codewords就是一个8bits的byte）（再注：最后一例中的（c, k, r ）的公式为：c = k + 2 * r，因为后脚注解释了：纠错码的容量小于纠错码的一半）</p>\n<p>下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）</p>\n<p>下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）</p>\n<table>\n<thead>\n<tr>\n<th>组</th>\n<th style=\"text-align:left\">块</th>\n<th style=\"text-align:left\">数据</th>\n<th style=\"text-align:left\">对每个块的纠错码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">67 85 70 134 87 38 85 194 119 50 6 18 6 103 38</td>\n<td style=\"text-align:left\">213 199 11 45 115 247 241 223 229 248 154 117 154 111 86 161 111 39</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">246 246 66 7 118 134 242 7 38 86 22 198 199 146 6</td>\n<td style=\"text-align:left\">87 204 96 60 202 182 124 157 200 134 27 129 209 17 163 163 120 133</td>\n</tr>\n<tr>\n<td>2</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">182 230 247 119 50 7 118 134 87 38 82 6 134 151 50 7</td>\n<td style=\"text-align:left\">148 116 177 212 76 133 75 242 238 76 195 230 189 10 108 240 192 141</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">70 247 118 86 194 6 151 50 16 236 17 236 17 236 17 236</td>\n<td style=\"text-align:left\">235 159 5 173 24 147 59 33 106 40 255 172 82 2 131 32 178 236</td>\n</tr>\n</tbody>\n</table>\n<p>注：二维码的纠错码主要是通过<a href=\"http://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction\" target=\"_blank\" rel=\"external\">Reed-Solomon error correction</a>（里德-所罗门纠错算法）来实现的。对于这个算法，对于我来说是相当的复杂，里面有很多的数学计算，比如：多项式除法，把1-255的数映射成2的n次方（0&lt;=n&lt;=255）的伽罗瓦域Galois Field之类的神一样的东西，以及基于这些基础的纠错数学公式，因为我的数据基础差，对于我来说太过复杂，所以我一时半会儿还有点没搞明白，还在学习中，所以，我在这里就不展开说这些东西了。还请大家见谅了。（当然，如果有朋友很明白，也繁请教教我）</p>\n<h1 id=\"最终编码\"><a href=\"#最终编码\" class=\"headerlink\" title=\"最终编码\"></a><strong>最终编码</strong></h1><h2 id=\"穿插放置\"><a href=\"#穿插放置\" class=\"headerlink\" title=\"穿插放置\"></a>穿插放置</h2><p>如果你以为我们可以开始画图，你就错了。二维码的混乱技术还没有玩完，它还要把数据码和纠错码的各个codewords交替放在一起。如何交替呢，规则如下：</p>\n<p>对于数据码：把每个块的第一个codewords先拿出来按顺度排列好，然后再取第一块的第二个，如此类推。如：上述示例中的Data Codewords如下：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>块 1</td>\n<td>67</td>\n<td>85</td>\n<td>70</td>\n<td>134</td>\n<td>87</td>\n<td>38</td>\n<td>85</td>\n<td>194</td>\n<td>119</td>\n<td>50</td>\n<td>6</td>\n<td>18</td>\n<td>6</td>\n<td>103</td>\n<td>38</td>\n<td></td>\n</tr>\n<tr>\n<td>块 2</td>\n<td>246</td>\n<td>246</td>\n<td>66</td>\n<td>7</td>\n<td>118</td>\n<td>134</td>\n<td>242</td>\n<td>7</td>\n<td>38</td>\n<td>86</td>\n<td>22</td>\n<td>198</td>\n<td>199</td>\n<td>146</td>\n<td>6</td>\n<td></td>\n</tr>\n<tr>\n<td>块 3</td>\n<td>182</td>\n<td>230</td>\n<td>247</td>\n<td>119</td>\n<td>50</td>\n<td>7</td>\n<td>118</td>\n<td>134</td>\n<td>87</td>\n<td>38</td>\n<td>82</td>\n<td>6</td>\n<td>134</td>\n<td>151</td>\n<td>50</td>\n<td>7</td>\n</tr>\n<tr>\n<td>块 4</td>\n<td>70</td>\n<td>247</td>\n<td>118</td>\n<td>86</td>\n<td>194</td>\n<td>6</td>\n<td>151</td>\n<td>50</td>\n<td>16</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n</tr>\n</tbody>\n</table>\n<p>我们先取第一列的：67， 246， 182， 70</p>\n<p>然后再取第二列的：67， 246， 182， 70， 85，246，230 ，247</p>\n<p>如此类推：67， 246， 182， 70， 85，246，230 ，247 ………  ……… ，38，6，50，17，7，236</p>\n<p>对于纠错码，也是一样：<br>||||||||||||||||||<br>| — | — | — | — | — | — | — | — | — | — | — | — | — | — | — | — | — |<br>|块 1|    213|    199|    11|    45|    115|    247|    241|    223|    229|    248|    154|    117|    154|    111|    86|    161|    111|    39|<br>|块 2|    87|    204|    96|    60|    202|    182|    124|    157|    200|    134|    27|    129|    209|    17|    163|    163|    120|    133|<br>|块 3|    148|    116|    177|    212|    76|    133|    75|    242|    238|    76|    195|    230|    189|    10|    108|    240|    192|    141|<br>|块 4|    235|    159|    5|    173|    24|    147|    59|    33|    106|    40|    255|    172|    82|    2|    131|    32|    178|    236|</p>\n<p>和数据码取的一样，得到：213，87，148，235，199，204，116，159，…… …… 39，133，141，236</p>\n<p>然后，再把这两组放在一起（纠错码放在数据码之后）得到：</p>\n<p>67, 246, 182, 70, 85, 246, 230, 247, 70, 66, 247, 118, 134, 7, 119, 86, 87, 118, 50, 194, 38, 134, 7, 6, 85, 242, 118, 151, 194, 7, 134, 50, 119, 38, 87, 16, 50, 86, 38, 236, 6, 22, 82, 17, 18, 198, 6, 236, 6, 199, 134, 17, 103, 146, 151, 236, 38, 6, 50, 17, 7, 236, 213, 87, 148, 235, 199, 204, 116, 159, 11, 96, 177, 5, 45, 60, 212, 173, 115, 202, 76, 24, 247, 182, 133, 147, 241, 124, 75, 59, 223, 157, 242, 33, 229, 200, 238, 106, 248, 134, 76, 40, 154, 27, 195, 255, 117, 129, 230, 172, 154, 209, 189, 82, 111, 17, 10, 2, 86, 163, 108, 131, 161, 163, 240, 32, 111, 120, 192, 178, 39, 133, 141, 236</p>\n<p>这就是我们的数据区。</p>\n<h2 id=\"Remainder-Bits\"><a href=\"#Remainder-Bits\" class=\"headerlink\" title=\"Remainder Bits\"></a><strong>Remainder Bits</strong></h2><p>最后再加上Reminder Bits，对于某些Version的QR，上面的还不够长度，还要加上Remainder Bits，比如：上述的5Q版的二维码，还要加上7个bits，Remainder Bits加零就好了。关于哪些Version需要多少个Remainder bit，可以参看QR Code Spec的第15页的Table-1的定义表。</p>\n<h1 id=\"画二维码图\"><a href=\"#画二维码图\" class=\"headerlink\" title=\"画二维码图\"></a><strong>画二维码图</strong></h1><h2 id=\"Position-Detection-Pattern\"><a href=\"#Position-Detection-Pattern\" class=\"headerlink\" title=\"Position Detection Pattern\"></a><strong>Position Detection Pattern</strong></h2><p>首先，先把Position Detection图案画在三个角上。（无论Version如何，这个图案的尺寸就是这么大）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/finder.png\" alt=\"alt\"></p>\n<h2 id=\"Alignment-Pattern\"><a href=\"#Alignment-Pattern\" class=\"headerlink\" title=\"Alignment Pattern\"></a><strong>Alignment Pattern</strong></h2><p>然后，再把Alignment图案画上（无论Version如何，这个图案的尺寸就是这么大）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/alignment-pattern.png\" alt=\"alt\"></p>\n<p>关于Alignment的位置，可以查看QR Code Spec的第81页的Table-E.1的定义表（下表是不完全表格）<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Alignment-Position.png\" alt=\"alt\"></p>\n<p>下图是根据上述表格中的Version8的一个例子（6，24，42）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/alignment-example.png\" alt=\"alt\"></p>\n<h2 id=\"Timing-Pattern\"><a href=\"#Timing-Pattern\" class=\"headerlink\" title=\"Timing Pattern\"></a><strong>Timing Pattern</strong></h2><p>接下来是Timing Pattern的线（这个不用多说了）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Timing-Pattern.png\" alt=\"alt\"></p>\n<h2 id=\"Format-Information\"><a href=\"#Format-Information\" class=\"headerlink\" title=\"Format Information\"></a><strong>Format Information</strong></h2><p>再接下来是Formation Information，下图中的蓝色部分。</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Format-Information.png\" alt=\"alt\"></p>\n<p>Format Information是一个15个bits的信息，每一个bit的位置如下图所示：（注意图中的Dark Module，那是永远出现的）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Format-Info-bits-postion.png\" alt=\"alt\"></p>\n<p>这15个bits中包括：</p>\n<ul>\n<li>5个数据bits：其中，2个bits用于表示使用什么样的Error Correction Level， 3个bits表示使用什么样的Mask</li>\n<li>10个纠错bits。主要通过BCH Code来计算</li>\n</ul>\n<p>然后15个bits还要与101010000010010做XOR操作。这样就保证不会因为我们选用了00的纠错级别和000的Mask，从而造成全部为白色，这会增加我们的扫描器的图像识别的困难。</p>\n<p>下面是一个示例：</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Format-Information-Example.png\" alt=\"alt\"></p>\n<p>关于Error Correction Level如下表所示：</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Error-Correction-Indicator-Code.png\" alt=\"alt\"></p>\n<p>关于Mask图案如后面的Table 23所示。</p>\n<h2 id=\"Version-Information\"><a href=\"#Version-Information\" class=\"headerlink\" title=\"Version Information\"></a><strong>Version Information</strong></h2><p>再接下来是Version Information（版本7以后需要这个编码），下图中的蓝色部分。<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Version-Information.png\" alt=\"alt\"></p>\n<p>Version Information一共是18个bits，其中包括6个bits的版本号以及12个bits的纠错码，下面是一个示例：<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Example.png\" alt=\"alt\"></p>\n<p>而其填充位置如下：</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Position.png\" alt=\"alt\"></p>\n<h2 id=\"数据和数据纠错码\"><a href=\"#数据和数据纠错码\" class=\"headerlink\" title=\"数据和数据纠错码\"></a><strong>数据和数据纠错码</strong></h2><p>然后是填接我们的最终编码，最终编码的填充方式如下：从左下角开始沿着红线填我们的各个bits，1是黑色，0是白色。如果遇到了上面的非数据区，则绕开或跳过。</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Data-Placement.png\" alt=\"alt\"></p>\n<h2 id=\"掩码图案\"><a href=\"#掩码图案\" class=\"headerlink\" title=\"掩码图案\"></a><strong>掩码图案</strong></h2><p>这样下来，我们的图就填好了，但是，也许那些点并不均衡，如果出现大面积的空白或黑块，会告诉我们扫描识别的困难。所以，我们还要做Masking操作（靠，还嫌不复杂）QR的Spec中说了，QR有8个Mask你可以使用，如下所示：其中，各个mask的公式在各个图下面。所谓mask，说白了，就是和上面生成的图做XOR操作。Mask只会和数据区进行XOR，不会影响功能区。（注：选择一个合适的Mask也是有算法的）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/masking-pattern.png\" alt=\"alt\"></p>\n<p>其Mask的标识码如下所示：（其中的i,j分别对应于上图的x,y）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Mask-Pattern-Code.png\" alt=\"alt\"></p>\n<p>下面是Mask后的一些样子，我们可以看到被某些Mask XOR了的数据变得比较零散了。</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Masking-Examples.png\" alt=\"alt\"></p>\n<p>Mask过后的二维码就成最终的图了。</p>\n<p>好了，大家可以去尝试去写一下QR的编码程序，当然，你可以用网上找个Reed Soloman的纠错算法的库，或是看看别人的源代码是怎么实现这个繁锁的编码。</p>\n","excerpt":"","more":"<p>二维码又称QR Code，QR全称Quick Response，是一个近几年来移动设备上超流行的一种编码方式，它比传统的Bar Code条形码能存更多的信息，也能表示更多的数据类型：比如：字符，数字，日文，中文等等。这两天学习了一下二维码图片生成的相关细节，觉得这个玩意就是一个密码算法，在此写一这篇文章 ，揭露一下。供好学的人一同学习之。</p>\n<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><h2 id=\"二维码定位\"><a href=\"#二维码定位\" class=\"headerlink\" title=\"二维码定位\"></a>二维码定位</h2><p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/QR-Code-Overview.jpeg\" alt=\"alt\"></p>\n<ul>\n<li><p>Position Detection Pattern是定位图案，用于标记二维码的矩形大小。这三个定位图案有白边叫Separators for Postion Detection Patterns。之所以三个而不是四个意思就是三个就可以标识一个矩形了。</p>\n</li>\n<li><p>Timing Patterns也是用于定位的。原因是二维码有40种尺寸，尺寸过大了后需要有根标准线，不然扫描的时候可能会扫歪了。</p>\n</li>\n<li><p>Alignment Patterns 只有Version 2以上（包括Version2）的二维码需要这个东东，同样是为了定位用的。</p>\n</li>\n</ul>\n<h2 id=\"功能性定位\"><a href=\"#功能性定位\" class=\"headerlink\" title=\"功能性定位\"></a>功能性定位</h2><ul>\n<li>Format Information 存在于所有的尺寸中，用于存放一些格式化数据的。</li>\n<li>Version Information 在 &gt;= Version 7以上，需要预留两块3 x 6的区域存放一些版本信息。</li>\n</ul>\n<h2 id=\"数据码和纠错码\"><a href=\"#数据码和纠错码\" class=\"headerlink\" title=\"数据码和纠错码\"></a>数据码和纠错码</h2><ul>\n<li><p>除了上述的那些地方，剩下的地方存放 Data Code 数据码 和 Error Correction Code 纠错码。</p>\n<h1 id=\"数据编码\"><a href=\"#数据编码\" class=\"headerlink\" title=\"数据编码\"></a>数据编码</h1><p>我们先来说说数据编码。QR码支持如下的编码：</p>\n</li>\n</ul>\n<p><strong>Numeric mode</strong> 数字编码，从0到9。如果需要编码的数字的个数不是3的倍数，那么，最后剩下的1或2位数会被转成4或7bits，则其它的每3位数字会被编成 10，12，14bits，编成多长还要看二维码的尺寸（下面有一个表Table 3说明了这点）</p>\n<p><strong>Alphanumeric mode</strong> 字符编码。包括 0-9，大写的A到Z（没有小写），以及符号$ % * + – . / : 包括空格。这些字符会映射成一个字符索引表。如下所示：（其中的SP是空格，Char是字符，Value是其索引值） 编码的过程是把字符两两分组，然后转成下表的45进制，然后转成11bits的二进制，如果最后有一个落单的，那就转成6bits的二进制。而编码模式和字符的个数需要根据不同的Version尺寸编成9, 11或13个二进制（如下表中Table 3）<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Alphanumeric-mode.png\" alt=\"alt\"></p>\n<p><strong>Byte mode</strong>, 字节编码，可以是0-255的ISO-8859-1字符。有些二维码的扫描器可以自动检测是否是UTF-8的编码。</p>\n<p><strong>Kanji mode</strong> 这是日文编码，也是双字节编码。同样，也可以用于中文编码。日文和汉字的编码会减去一个值。如：在0X8140 to 0X9FFC中的字符会减去8140，在0XE040到0XEBBF中的字符要减去0XC140，然后把结果前两个16进制位拿出来乘以0XC0，然后再加上后两个16进制位，最后转成13bit的编码。如下图示例:<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Kanji-mode.png\" alt=\"alt\"></p>\n<p><strong>Extended Channel Interpretation (ECI) mode</strong> 主要用于特殊的字符集。并不是所有的扫描器都支持这种编码。</p>\n<p><strong>Structured Append mode</strong> 用于混合编码，也就是说，这个二维码中包含了多种编码格式。</p>\n<p><strong>FNC1 mode</strong> 这种编码方式主要是给一些特殊的工业或行业用的。比如GS1条形码之类的。</p>\n<p>简单起见，后面三种不会在本文 中讨论。</p>\n<p>下面两张表中，</p>\n<ul>\n<li>Table 2 是各个编码格式的“编号”，这个东西要写在Format Information中。注：中文是1101</li>\n<li>Table 3 表示了，不同版本（尺寸）的二维码，对于，数字，字符，字节和Kanji模式下，对于单个编码的2进制的位数。（在二维码的规格说明书中，有各种各样的编码规范表，后面还会提到）<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Mode-Indicator.png\" alt=\"alt\"></li>\n</ul>\n<p>下面我们看几个示例，</p>\n<h2 id=\"示例一：数字编码\"><a href=\"#示例一：数字编码\" class=\"headerlink\" title=\"示例一：数字编码\"></a><strong>示例一：数字编码</strong></h2><p>在Version 1的尺寸下，纠错级别为H的情况下，编码： 01234567</p>\n<ol>\n<li><p>把上述数字分成三组: 012 345 67</p>\n</li>\n<li><p>把他们转成二进制:  012 转成 0000001100；  345 转成 0101011001；  67 转成 1000011。</p>\n</li>\n<li><p>把这三个二进制串起来: 0000001100 0101011001 1000011</p>\n</li>\n<li><p>把数字的个数转成二进制 (version 1-H是10 bits ): 8个数字的二进制是 0000001000</p>\n</li>\n<li><p>把数字编码的标志0001和第4步的编码加到前面:  0001 0000001000 0000001100 0101011001 1000011</p>\n</li>\n</ol>\n<h2 id=\"示例二：字符编码\"><a href=\"#示例二：字符编码\" class=\"headerlink\" title=\"示例二：字符编码\"></a><strong>示例二：字符编码</strong></h2><p>在Version 1的尺寸下，纠错级别为H的情况下，编码: AC-42</p>\n<ol>\n<li><p>从字符索引表中找到 AC-42 这五个字条的索引 (10,12,41,4,2)</p>\n</li>\n<li><p>两两分组: (10,12) (41,4) (2)</p>\n</li>\n<li><p>把每一组转成11bits的二进制:</p>\n<pre><code>(10,12) 10*45+12 等于 462 转成 00111001110\n(41,4) 41*45+4 等于 1849 转成 11100111001\n(2) 等于 2 转成 000010\n</code></pre></li>\n<li><p>把这些二进制连接起来：00111001110 11100111001 000010</p>\n</li>\n<li><p>把字符的个数转成二进制 (Version 1-H为9 bits ): 5个字符，5转成 000000101</p>\n</li>\n<li><p>在头上加上编码标识 0010 和第5步的个数编码:  0010 000000101 00111001110 11100111001 000010</p>\n</li>\n</ol>\n<h2 id=\"结束符和补齐符\"><a href=\"#结束符和补齐符\" class=\"headerlink\" title=\"结束符和补齐符\"></a><strong>结束符和补齐符</strong></h2><p>假如我们有个HELLO WORLD的字符串要编码，根据上面的示例二，我们可以得到下面的编码，</p>\n<table>\n<thead>\n<tr>\n<th>编码</th>\n<th style=\"text-align:center\">字符数</th>\n<th style=\"text-align:center\">HELLO WORLD的编码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0010</td>\n<td style=\"text-align:center\">000001011</td>\n<td style=\"text-align:center\">01100001011 01111000110 10001011100 10110111000 10011010100 001101</td>\n</tr>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>我们还要加上结束符<br>| 编码        | 字符数           | HELLO WORLD的编码  | 结束 |<br>| ————- |:————-:|:————-:| —–:|<br>| 0010      | 000001011 | 01100001011 01111000110 10001011100 10110111000 10011010100 001101 | 0000 |<br>| | |</p>\n<h2 id=\"按8bits重排\"><a href=\"#按8bits重排\" class=\"headerlink\" title=\"按8bits重排\"></a><strong>按8bits重排</strong></h2><p>如果所有的编码加起来不是8个倍数我们还要在后面加上足够的0，比如上面一共有78个bits，所以，我们还要加上2个0，然后按8个bits分好组：</p>\n<p>00100000   01011011   00001011   01111000   11010001   01110010   11011100   01001101   01000011   010000<font color=red><strong>00</strong></font></p>\n<h2 id=\"补齐码（Padding-Bytes）\"><a href=\"#补齐码（Padding-Bytes）\" class=\"headerlink\" title=\"补齐码（Padding Bytes）\"></a><strong>补齐码（Padding Bytes）</strong></h2><p>最后，如果如果还没有达到我们最大的bits数的限制，我们还要加一些补齐码（Padding Bytes），Padding Bytes就是重复下面的两个bytes：11101100 00010001 （这两个二进制转成十进制是236和17，我也不知道为什么，只知道Spec上是这么写的）关于每一个Version的每一种纠错级别的最大Bits限制，可以参看QR Code Spec的第28页到32页的Table-7一表。</p>\n<p>假设我们需要编码的是Version 1的Q纠错级，那么，其最大需要104个bits，而我们上面只有80个bits，所以，还需要补24个bits，也就是需要3个Padding Bytes，我们就添加三个，于是得到下面的编码：</p>\n<p>00100000 01011011 00001011 01111000 11010001 01110010 11011100 01001101 01000011 01000000 <font color=red><strong>11101100 00010001 11101100</strong></font></p>\n<p>上面的编码就是数据码了，叫Data Codewords，每一个8bits叫一个codeword，我们还要对这些数据码加上纠错信息。</p>\n<h1 id=\"纠错码\"><a href=\"#纠错码\" class=\"headerlink\" title=\"纠错码\"></a><strong>纠错码</strong></h1><p>上面我们说到了一些纠错级别，Error Correction Code Level，二维码中有四种级别的纠错，这就是为什么二维码有残缺还能扫出来，也就是为什么有人在二维码的中心位置加入图标。</p>\n<table>\n<thead>\n<tr>\n<th>错误修正容量</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>L水平</td>\n<td style=\"text-align:center\">7%的字码可被修正 </td>\n</tr>\n<tr>\n<td>M水平</td>\n<td style=\"text-align:center\">15%的字码可被修正 </td>\n</tr>\n<tr>\n<td>Q水平</td>\n<td style=\"text-align:center\">25%的字码可被修正</td>\n</tr>\n<tr>\n<td>H水平</td>\n<td style=\"text-align:center\">30%的字码可被修正</td>\n</tr>\n</tbody>\n</table>\n<p>那么，QR是怎么对数据码加上纠错码的？首先，我们需要对数据码进行分组，也就是分成不同的Block，然后对各个Block进行纠错编码，对于如何分组，我们可以查看QR Code Spec的第33页到44页的Table-13到Table-22的定义表。注意最后两列：</p>\n<ul>\n<li><strong>Number of Error Code Correction Blocks</strong>：需要分多少个块。</li>\n<li><strong>Error Correction Code Per Blocks</strong>：每一个块中的code个数，所谓的code的个数，也就是有多少个8bits的字节。</li>\n</ul>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Error-Correction-Blocks.png\" alt=\"alt\"></p>\n<p>举个例子：上述的Version 5 + Q纠错级：需要4个Blocks（2个Blocks为一组，共两组），头一组的两个Blocks中各15个bits数据 + 各 9个bits的纠错码（注：表中的codewords就是一个8bits的byte）（再注：最后一例中的（c, k, r ）的公式为：c = k + 2 * r，因为后脚注解释了：纠错码的容量小于纠错码的一半）</p>\n<p>下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）</p>\n<p>下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）</p>\n<table>\n<thead>\n<tr>\n<th>组</th>\n<th style=\"text-align:left\">块</th>\n<th style=\"text-align:left\">数据</th>\n<th style=\"text-align:left\">对每个块的纠错码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">67 85 70 134 87 38 85 194 119 50 6 18 6 103 38</td>\n<td style=\"text-align:left\">213 199 11 45 115 247 241 223 229 248 154 117 154 111 86 161 111 39</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">246 246 66 7 118 134 242 7 38 86 22 198 199 146 6</td>\n<td style=\"text-align:left\">87 204 96 60 202 182 124 157 200 134 27 129 209 17 163 163 120 133</td>\n</tr>\n<tr>\n<td>2</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">182 230 247 119 50 7 118 134 87 38 82 6 134 151 50 7</td>\n<td style=\"text-align:left\">148 116 177 212 76 133 75 242 238 76 195 230 189 10 108 240 192 141</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">70 247 118 86 194 6 151 50 16 236 17 236 17 236 17 236</td>\n<td style=\"text-align:left\">235 159 5 173 24 147 59 33 106 40 255 172 82 2 131 32 178 236</td>\n</tr>\n</tbody>\n</table>\n<p>注：二维码的纠错码主要是通过<a href=\"http://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction\">Reed-Solomon error correction</a>（里德-所罗门纠错算法）来实现的。对于这个算法，对于我来说是相当的复杂，里面有很多的数学计算，比如：多项式除法，把1-255的数映射成2的n次方（0&lt;=n&lt;=255）的伽罗瓦域Galois Field之类的神一样的东西，以及基于这些基础的纠错数学公式，因为我的数据基础差，对于我来说太过复杂，所以我一时半会儿还有点没搞明白，还在学习中，所以，我在这里就不展开说这些东西了。还请大家见谅了。（当然，如果有朋友很明白，也繁请教教我）</p>\n<h1 id=\"最终编码\"><a href=\"#最终编码\" class=\"headerlink\" title=\"最终编码\"></a><strong>最终编码</strong></h1><h2 id=\"穿插放置\"><a href=\"#穿插放置\" class=\"headerlink\" title=\"穿插放置\"></a>穿插放置</h2><p>如果你以为我们可以开始画图，你就错了。二维码的混乱技术还没有玩完，它还要把数据码和纠错码的各个codewords交替放在一起。如何交替呢，规则如下：</p>\n<p>对于数据码：把每个块的第一个codewords先拿出来按顺度排列好，然后再取第一块的第二个，如此类推。如：上述示例中的Data Codewords如下：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>块 1</td>\n<td>67</td>\n<td>85</td>\n<td>70</td>\n<td>134</td>\n<td>87</td>\n<td>38</td>\n<td>85</td>\n<td>194</td>\n<td>119</td>\n<td>50</td>\n<td>6</td>\n<td>18</td>\n<td>6</td>\n<td>103</td>\n<td>38</td>\n<td></td>\n</tr>\n<tr>\n<td>块 2</td>\n<td>246</td>\n<td>246</td>\n<td>66</td>\n<td>7</td>\n<td>118</td>\n<td>134</td>\n<td>242</td>\n<td>7</td>\n<td>38</td>\n<td>86</td>\n<td>22</td>\n<td>198</td>\n<td>199</td>\n<td>146</td>\n<td>6</td>\n<td></td>\n</tr>\n<tr>\n<td>块 3</td>\n<td>182</td>\n<td>230</td>\n<td>247</td>\n<td>119</td>\n<td>50</td>\n<td>7</td>\n<td>118</td>\n<td>134</td>\n<td>87</td>\n<td>38</td>\n<td>82</td>\n<td>6</td>\n<td>134</td>\n<td>151</td>\n<td>50</td>\n<td>7</td>\n</tr>\n<tr>\n<td>块 4</td>\n<td>70</td>\n<td>247</td>\n<td>118</td>\n<td>86</td>\n<td>194</td>\n<td>6</td>\n<td>151</td>\n<td>50</td>\n<td>16</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n</tr>\n</tbody>\n</table>\n<p>我们先取第一列的：67， 246， 182， 70</p>\n<p>然后再取第二列的：67， 246， 182， 70， 85，246，230 ，247</p>\n<p>如此类推：67， 246， 182， 70， 85，246，230 ，247 ………  ……… ，38，6，50，17，7，236</p>\n<p>对于纠错码，也是一样：<br>||||||||||||||||||<br>| — | — | — | — | — | — | — | — | — | — | — | — | — | — | — | — | — |<br>|块 1|    213|    199|    11|    45|    115|    247|    241|    223|    229|    248|    154|    117|    154|    111|    86|    161|    111|    39|<br>|块 2|    87|    204|    96|    60|    202|    182|    124|    157|    200|    134|    27|    129|    209|    17|    163|    163|    120|    133|<br>|块 3|    148|    116|    177|    212|    76|    133|    75|    242|    238|    76|    195|    230|    189|    10|    108|    240|    192|    141|<br>|块 4|    235|    159|    5|    173|    24|    147|    59|    33|    106|    40|    255|    172|    82|    2|    131|    32|    178|    236|</p>\n<p>和数据码取的一样，得到：213，87，148，235，199，204，116，159，…… …… 39，133，141，236</p>\n<p>然后，再把这两组放在一起（纠错码放在数据码之后）得到：</p>\n<p>67, 246, 182, 70, 85, 246, 230, 247, 70, 66, 247, 118, 134, 7, 119, 86, 87, 118, 50, 194, 38, 134, 7, 6, 85, 242, 118, 151, 194, 7, 134, 50, 119, 38, 87, 16, 50, 86, 38, 236, 6, 22, 82, 17, 18, 198, 6, 236, 6, 199, 134, 17, 103, 146, 151, 236, 38, 6, 50, 17, 7, 236, 213, 87, 148, 235, 199, 204, 116, 159, 11, 96, 177, 5, 45, 60, 212, 173, 115, 202, 76, 24, 247, 182, 133, 147, 241, 124, 75, 59, 223, 157, 242, 33, 229, 200, 238, 106, 248, 134, 76, 40, 154, 27, 195, 255, 117, 129, 230, 172, 154, 209, 189, 82, 111, 17, 10, 2, 86, 163, 108, 131, 161, 163, 240, 32, 111, 120, 192, 178, 39, 133, 141, 236</p>\n<p>这就是我们的数据区。</p>\n<h2 id=\"Remainder-Bits\"><a href=\"#Remainder-Bits\" class=\"headerlink\" title=\"Remainder Bits\"></a><strong>Remainder Bits</strong></h2><p>最后再加上Reminder Bits，对于某些Version的QR，上面的还不够长度，还要加上Remainder Bits，比如：上述的5Q版的二维码，还要加上7个bits，Remainder Bits加零就好了。关于哪些Version需要多少个Remainder bit，可以参看QR Code Spec的第15页的Table-1的定义表。</p>\n<h1 id=\"画二维码图\"><a href=\"#画二维码图\" class=\"headerlink\" title=\"画二维码图\"></a><strong>画二维码图</strong></h1><h2 id=\"Position-Detection-Pattern\"><a href=\"#Position-Detection-Pattern\" class=\"headerlink\" title=\"Position Detection Pattern\"></a><strong>Position Detection Pattern</strong></h2><p>首先，先把Position Detection图案画在三个角上。（无论Version如何，这个图案的尺寸就是这么大）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/finder.png\" alt=\"alt\"></p>\n<h2 id=\"Alignment-Pattern\"><a href=\"#Alignment-Pattern\" class=\"headerlink\" title=\"Alignment Pattern\"></a><strong>Alignment Pattern</strong></h2><p>然后，再把Alignment图案画上（无论Version如何，这个图案的尺寸就是这么大）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/alignment-pattern.png\" alt=\"alt\"></p>\n<p>关于Alignment的位置，可以查看QR Code Spec的第81页的Table-E.1的定义表（下表是不完全表格）<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Alignment-Position.png\" alt=\"alt\"></p>\n<p>下图是根据上述表格中的Version8的一个例子（6，24，42）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/alignment-example.png\" alt=\"alt\"></p>\n<h2 id=\"Timing-Pattern\"><a href=\"#Timing-Pattern\" class=\"headerlink\" title=\"Timing Pattern\"></a><strong>Timing Pattern</strong></h2><p>接下来是Timing Pattern的线（这个不用多说了）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Timing-Pattern.png\" alt=\"alt\"></p>\n<h2 id=\"Format-Information\"><a href=\"#Format-Information\" class=\"headerlink\" title=\"Format Information\"></a><strong>Format Information</strong></h2><p>再接下来是Formation Information，下图中的蓝色部分。</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Format-Information.png\" alt=\"alt\"></p>\n<p>Format Information是一个15个bits的信息，每一个bit的位置如下图所示：（注意图中的Dark Module，那是永远出现的）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Format-Info-bits-postion.png\" alt=\"alt\"></p>\n<p>这15个bits中包括：</p>\n<ul>\n<li>5个数据bits：其中，2个bits用于表示使用什么样的Error Correction Level， 3个bits表示使用什么样的Mask</li>\n<li>10个纠错bits。主要通过BCH Code来计算</li>\n</ul>\n<p>然后15个bits还要与101010000010010做XOR操作。这样就保证不会因为我们选用了00的纠错级别和000的Mask，从而造成全部为白色，这会增加我们的扫描器的图像识别的困难。</p>\n<p>下面是一个示例：</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Format-Information-Example.png\" alt=\"alt\"></p>\n<p>关于Error Correction Level如下表所示：</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Error-Correction-Indicator-Code.png\" alt=\"alt\"></p>\n<p>关于Mask图案如后面的Table 23所示。</p>\n<h2 id=\"Version-Information\"><a href=\"#Version-Information\" class=\"headerlink\" title=\"Version Information\"></a><strong>Version Information</strong></h2><p>再接下来是Version Information（版本7以后需要这个编码），下图中的蓝色部分。<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Version-Information.png\" alt=\"alt\"></p>\n<p>Version Information一共是18个bits，其中包括6个bits的版本号以及12个bits的纠错码，下面是一个示例：<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Example.png\" alt=\"alt\"></p>\n<p>而其填充位置如下：</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Position.png\" alt=\"alt\"></p>\n<h2 id=\"数据和数据纠错码\"><a href=\"#数据和数据纠错码\" class=\"headerlink\" title=\"数据和数据纠错码\"></a><strong>数据和数据纠错码</strong></h2><p>然后是填接我们的最终编码，最终编码的填充方式如下：从左下角开始沿着红线填我们的各个bits，1是黑色，0是白色。如果遇到了上面的非数据区，则绕开或跳过。</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Data-Placement.png\" alt=\"alt\"></p>\n<h2 id=\"掩码图案\"><a href=\"#掩码图案\" class=\"headerlink\" title=\"掩码图案\"></a><strong>掩码图案</strong></h2><p>这样下来，我们的图就填好了，但是，也许那些点并不均衡，如果出现大面积的空白或黑块，会告诉我们扫描识别的困难。所以，我们还要做Masking操作（靠，还嫌不复杂）QR的Spec中说了，QR有8个Mask你可以使用，如下所示：其中，各个mask的公式在各个图下面。所谓mask，说白了，就是和上面生成的图做XOR操作。Mask只会和数据区进行XOR，不会影响功能区。（注：选择一个合适的Mask也是有算法的）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/masking-pattern.png\" alt=\"alt\"></p>\n<p>其Mask的标识码如下所示：（其中的i,j分别对应于上图的x,y）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Mask-Pattern-Code.png\" alt=\"alt\"></p>\n<p>下面是Mask后的一些样子，我们可以看到被某些Mask XOR了的数据变得比较零散了。</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Masking-Examples.png\" alt=\"alt\"></p>\n<p>Mask过后的二维码就成最终的图了。</p>\n<p>好了，大家可以去尝试去写一下QR的编码程序，当然，你可以用网上找个Reed Soloman的纠错算法的库，或是看看别人的源代码是怎么实现这个繁锁的编码。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"civxg1t2600000cny5fkb3y3s","tag_id":"civxg1t2m00010cnyhikb2gip","_id":"civxg1t2m00030cnyg6s600li"},{"post_id":"civxg1t2600000cny5fkb3y3s","tag_id":"civxg1t2m00020cny1f8tt19v","_id":"civxg1t2m00040cnyf1rzj72h"},{"post_id":"civxg1t3100050cny1ah67hcj","tag_id":"civxg1t3h00090cnypbee0ro9","_id":"civxg1t47000e0cnycafdqw5z"},{"post_id":"civxg1t3h00070cnyjbz2dy8n","tag_id":"civxg1t46000d0cny5v84hky4","_id":"civxg1t4i000j0cnylm2qcg88"},{"post_id":"civxg1t3h000a0cny16oibwju","tag_id":"civxg1t46000d0cny5v84hky4","_id":"civxg1t4v000n0cny9hxsaorw"},{"post_id":"civxg1t3h000b0cnyed1stwuj","tag_id":"civxg1t4o000l0cnyu489hzkp","_id":"civxg1t4v000r0cnythcung0i"},{"post_id":"civxg1t3h000c0cny2sb0jc0s","tag_id":"civxg1t4v000p0cny0atkrdjo","_id":"civxg1t5a000x0cnyimdbrkay"},{"post_id":"civxg1t3h000c0cny2sb0jc0s","tag_id":"civxg1t4v000t0cnypu3y6ohe","_id":"civxg1t5a000y0cny6hwvnbux"},{"post_id":"civxg1t47000f0cny3uc4sfcj","tag_id":"civxg1t4v000p0cny0atkrdjo","_id":"civxg1t5a00100cnyrnrzdtn3"},{"post_id":"civxg1t4a000g0cnyiq7gac24","tag_id":"civxg1t5a000z0cnydzsvk9rw","_id":"civxg1t5a00140cny5zmr4mrl"},{"post_id":"civxg1t4a000g0cnyiq7gac24","tag_id":"civxg1t5a00110cny67shfvkp","_id":"civxg1t5a00150cnyayxo3t2d"},{"post_id":"civxg1t4a000g0cnyiq7gac24","tag_id":"civxg1t5a00120cnyqrnnjww5","_id":"civxg1t5a00170cnyzn7zmcz7"},{"post_id":"civxg1t4g000i0cnydovse7fe","tag_id":"civxg1t5a00130cny4xt1feu7","_id":"civxg1t5a00180cnyozdu9zbr"},{"post_id":"civxg1t4k000k0cnya08503nb","tag_id":"civxg1t5a000z0cnydzsvk9rw","_id":"civxg1t5q001c0cny53aqwigj"},{"post_id":"civxg1t4k000k0cnya08503nb","tag_id":"civxg1t5a00110cny67shfvkp","_id":"civxg1t5q001d0cnyyqe6usna"},{"post_id":"civxg1t4k000k0cnya08503nb","tag_id":"civxg1t5a00120cnyqrnnjww5","_id":"civxg1t6a001f0cny8223il3o"},{"post_id":"civxg1t4t000m0cnyvykvwdsl","tag_id":"civxg1t5q001b0cnyrzh2kudw","_id":"civxg1t6a001g0cnyx1f63lon"},{"post_id":"civxg1t4t000m0cnyvykvwdsl","tag_id":"civxg1t2m00010cnyhikb2gip","_id":"civxg1t6c001i0cny23bvgz1p"},{"post_id":"civxg1t4v000o0cnyqsbdk8rx","tag_id":"civxg1t5q001b0cnyrzh2kudw","_id":"civxg1t6f001k0cnydr5bcape"},{"post_id":"civxg1t4v000o0cnyqsbdk8rx","tag_id":"civxg1t6c001h0cnyx6vakkwj","_id":"civxg1t6f001l0cnyvwkeljne"},{"post_id":"civxg1t4v000q0cnycxdd74pj","tag_id":"civxg1t6e001j0cnyvi8ktuzp","_id":"civxg1t6i001o0cnydmnjhuuj"},{"post_id":"civxg1t4v000q0cnycxdd74pj","tag_id":"civxg1t6g001m0cny75m2cazq","_id":"civxg1t6i001p0cny42cgdzll"},{"post_id":"civxg1t4v000s0cnybpvilt7k","tag_id":"civxg1t5q001b0cnyrzh2kudw","_id":"civxg1t6m001s0cny618fman3"},{"post_id":"civxg1t4v000s0cnybpvilt7k","tag_id":"civxg1t2m00020cny1f8tt19v","_id":"civxg1t6m001t0cnyt12dvxlo"},{"post_id":"civxg1t4v000s0cnybpvilt7k","tag_id":"civxg1t6i001q0cny6ez4eb1r","_id":"civxg1t6o001v0cnytl4ok04d"},{"post_id":"civxg1t4v000u0cnyn2q8szl9","tag_id":"civxg1t6e001j0cnyvi8ktuzp","_id":"civxg1t6r001x0cnycnzbfryd"},{"post_id":"civxg1t4v000u0cnyn2q8szl9","tag_id":"civxg1t6n001u0cnyoiiqk71g","_id":"civxg1t6r001y0cnybdgdiu2w"},{"post_id":"civxg1t5a000v0cny5dktbvaj","tag_id":"civxg1t6p001w0cny2dmnqlvc","_id":"civxg1t6s001z0cny6w3768jz"},{"post_id":"civxg1tbx00200cnye3ea5cdq","tag_id":"civxg1t5a000z0cnydzsvk9rw","_id":"civxg1tc300220cnyfili2qmj"},{"post_id":"civxg1tc000210cnyrymufc4l","tag_id":"civxg1t46000d0cny5v84hky4","_id":"civxg1tc500240cny4rndmnxi"}],"Tag":[{"name":"android studio","_id":"civxg1t2m00010cnyhikb2gip"},{"name":"android","_id":"civxg1t2m00020cny1f8tt19v"},{"name":"javascript","_id":"civxg1t3h00090cnypbee0ro9"},{"name":"jQuery","_id":"civxg1t46000d0cny5v84hky4"},{"name":"css","_id":"civxg1t4o000l0cnyu489hzkp"},{"name":"git","_id":"civxg1t4v000p0cny0atkrdjo"},{"name":".gitignore","_id":"civxg1t4v000t0cnypu3y6ohe"},{"name":"react","_id":"civxg1t5a000z0cnydzsvk9rw"},{"name":"react-router","_id":"civxg1t5a00110cny67shfvkp"},{"name":"翻译文档","_id":"civxg1t5a00120cnyqrnnjww5"},{"name":"openjdk; java","_id":"civxg1t5a00130cny4xt1feu7"},{"name":"ubuntu","_id":"civxg1t5q001b0cnyrzh2kudw"},{"name":"update-alternatives","_id":"civxg1t6c001h0cnyx6vakkwj"},{"name":"windows","_id":"civxg1t6e001j0cnyvi8ktuzp"},{"name":"mongodb","_id":"civxg1t6g001m0cny75m2cazq"},{"name":"环境搭建","_id":"civxg1t6i001q0cny6ez4eb1r"},{"name":"npm","_id":"civxg1t6n001u0cnyoiiqk71g"},{"name":"son","_id":"civxg1t6p001w0cny2dmnqlvc"}]}}