{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1479203323872},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1479203323872},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1479203323872},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1479203323872},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1479203323872},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1479203323872},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1479203323872},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1479203323872},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1479203323872},{"_id":"themes/next/package.json","hash":"877cb98025e59015532c4c9a04a33e2af4ad56f9","modified":1479203323876},{"_id":"source/_drafts/qrcode.md","hash":"8d7f5d01abfa81e353dc8098738264bbb2ae9f11","modified":1480333396461},{"_id":"source/_drafts/reverse-engineering-apk.md","hash":"a3dea30ec773adb76fcb69c48b2cbf147ec8c020","modified":1479364161849},{"_id":"themes/next/gulpfile.coffee","hash":"61ef0606a8134894d7ac796bc8d0fa4ba6a94483","modified":1479203323872},{"_id":"source/_drafts/my-son-2016-11-21.md","hash":"a14f7de8ddee88fc1d04e43370c7ab80a9e11ba8","modified":1480333396441},{"_id":"source/_posts/android-https-verify-ways.md","hash":"d2cdbaef7b8f1d2e277cda5c1fe6ee54dd3ceffe","modified":1480381191151},{"_id":"source/_posts/CSS-The-Definitive-Guide.md","hash":"35be7a493e5bfcadf8e33d0f4fba83cc844ab199","modified":1479204553424},{"_id":"source/_posts/android-studio编译错误-目标模式不含有“-”。-停止。.md","hash":"efcca3de4ae5105791bf681af639a93246c542af","modified":1479258846123},{"_id":"source/_posts/chapter-3.md","hash":"9aa834cfba55998723416c621b370a97ae25632f","modified":1479204542672},{"_id":"source/_posts/High-Performance-Javascript.md","hash":"ff6604558237e453b0e2d7224f92cbc3db0de564","modified":1479204581000},{"_id":"source/_posts/fix-dev-kvm-is-not-found.md","hash":"d18b094a1007cfefa94580894f3c85aa7a7d7c01","modified":1480333463869},{"_id":"source/_posts/chapter-2.md","hash":"d0410de6d35c35320478bfbab9c3e82cf7d09665","modified":1479204531376},{"_id":"source/_posts/chapter-4.md","hash":"ba3f4d995cc7f279b84606eb9091fcc3fae9bcfd","modified":1479204524328},{"_id":"source/_posts/how-to-download-openjdk.md","hash":"c978c3973f4b69d1e17480bcd6a189715985ccd2","modified":1479296298000},{"_id":"themes/next/_config.yml","hash":"5c94b2d9c327c94552ea74b1aec46550d5488b70","modified":1479205093504},{"_id":"source/_posts/git配置user-name和user-email.md","hash":"0ca482b0ef52b798ef5d00acf5bafcb381600de6","modified":1479212264749},{"_id":"source/_posts/react-router-4-0-0-api-BrowserRouter.md","hash":"0d1d596e302d8d1f0bfa3750cf64ccee88bae355","modified":1480400086000},{"_id":"source/_posts/react-router-4-0-0-api-Link.md","hash":"e8d86a6f8764a828ae729719f7d3f49138b08e0e","modified":1480677333039},{"_id":"source/_posts/react-router-4-0-0-api-Match.md","hash":"dff3b36da4adf3cee233049bca3432f6a0fb35a5","modified":1480400143093},{"_id":"source/_posts/react-router-4-0-0-api-Miss.md","hash":"cb236c9e2be77593fcecb8be9593917cb86bda78","modified":1480400033581},{"_id":"source/_posts/react-router-4-0-0-api-NavigationPrompt.md","hash":"f29b93377ad80bf4154d741f571dad77b986421c","modified":1480678345843},{"_id":"source/_posts/ubuntu利用update-alternatives配置java.md","hash":"66ee0732eb505a66f69b6af0572660be9ec4ca07","modified":1479258877507},{"_id":"source/_posts/gitignore无效，不能过滤某些文件.md","hash":"39b88baab05f72e499c15683030d4899193bbd92","modified":1479258860883},{"_id":"source/_posts/make-ubutun-desktop.md","hash":"907a3f1e80aa06f8f0d9c0e0f81cc6db2db0662f","modified":1479258868807},{"_id":"source/_posts/windows下文件路径太深，无法删除解决办法.md","hash":"11a87573eec7fa74a6c586d28f2d972465f933b5","modified":1479258888487},{"_id":"source/_posts/windows配置mongdb记录.md","hash":"d21c4369e92bab7e460c0b7d964d496d9403fa06","modified":1479258895479},{"_id":"source/_posts/react-lifecycle.md","hash":"518e838da24c2be1720bed12be7af222839e36c1","modified":1480333396461},{"_id":"source/categories/index.md","hash":"3cd9239804a2f51dd4702b5f41410f4a21658833","modified":1479205057956},{"_id":"source/tags/index.md","hash":"f99d4dd4b36f8fe15de9320836d8c426895c27ce","modified":1479205173480},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1479203323872},{"_id":"themes/next/languages/en.yml","hash":"40057d6608e825d06e0864bac4dcd27ed88ada87","modified":1479203323872},{"_id":"themes/next/languages/fr-FR.yml","hash":"9fca01ef917d33ae2ae6bc04561ec6799dff5351","modified":1479203323872},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1479203323872},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1479203323872},{"_id":"source/_posts/ubuntu编译android源代码环境搭建.md","hash":"92049193181886480ad4203b32b8d71462348c12","modified":1479295134718},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1479203323872},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1479203323872},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1479203323872},{"_id":"themes/next/languages/ru.yml","hash":"257d11e626cbe4b9b78785a764190b9278f95c28","modified":1479203323872},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1479203323876},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f6c9fafa0f5f0050cd07ca2cf5e38fbae3e28145","modified":1479203323872},{"_id":"themes/next/languages/zh-hk.yml","hash":"34c84c6d04447a25bd5eac576922a13947c000e2","modified":1479203323872},{"_id":"themes/next/languages/zh-tw.yml","hash":"c97a5c41149de9b17f33439b0ecf0eff6fdae50e","modified":1479203323872},{"_id":"themes/next/languages/default.yml","hash":"767470a80dc257e23e14c3a78e8c52a46c9d6209","modified":1479203323872},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1479203323872},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1479203323872},{"_id":"themes/next/layout/_layout.swig","hash":"7a1e4443c3ba1e08c20e64ddbf0b8255d034dab0","modified":1479203323876},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1479203323892},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1479203323892},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1479203323892},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1479203323876},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1479203323876},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1479203323876},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1479203323876},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1479203323876},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1479203323876},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1479203323876},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479203323880},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1479203323876},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1479203323876},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1479203323876},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1479203323876},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1479203323880},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1479203323880},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1479203323880},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1479203323880},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1479203323880},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1479203323880},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1479203323880},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1479203323880},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1479203323880},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1479203323880},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479203323880},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479203323880},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1479203323880},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1479203323880},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1479203323880},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1479203323876},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1479203323876},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1479203323876},{"_id":"themes/next/layout/_macro/post.swig","hash":"f12f108c1f8e91cc55d49805d42c1fd96cdf51a6","modified":1479203323876},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b8aaa008aafe4c6e325f7513719e1c251430883e","modified":1479203323876},{"_id":"themes/next/layout/_partials/comments.swig","hash":"7a3ef28678467c45ee9416b41b943252e8036285","modified":1479203323876},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1479203323876},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1479203323876},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1479203323876},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1a43dde8c7bc53891be26b915a172b1f01e6bc26","modified":1479203323876},{"_id":"themes/next/layout/_partials/head.swig","hash":"ca56f92e2fa82b03853869f5073ee1a5626a4796","modified":1479203323876},{"_id":"themes/next/layout/_partials/header.swig","hash":"f3627f51810bc906e4020a3fef61bc3629b63581","modified":1479203323876},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1479203323876},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1479203323876},{"_id":"themes/next/layout/_partials/search.swig","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1479203323876},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1479203323876},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1479203323876},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1479203323876},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1479203323876},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479203323876},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479203323876},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479203323876},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479203323880},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479203323880},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479203323876},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479203323876},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1479203323876},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1479203323876},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1479203323876},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1479203323880},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c5b28519b446c2af1e8754a6ae4d766823e6b348","modified":1479203323880},{"_id":"themes/next/source/css/_variables/base.styl","hash":"3f0d6aa424f434e82ea507f740eeff110f996269","modified":1479203323880},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1479203323880},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1479203323880},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1479203323880},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1479203323880},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1479203323880},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1479203323880},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1479203323880},{"_id":"themes/next/source/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1479203323880},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1479203323880},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1479203323880},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1479203323880},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1479203323884},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1479203323884},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1479203323884},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1479203323884},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1479203323884},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1479203323884},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1479203323884},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1479203323884},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1479203323884},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1479203323888},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1479203323888},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1479203323888},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1479203323888},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1479203323888},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1479203323888},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1479203323888},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1479203323888},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1479203323888},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1479203323892},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1479203323872},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1479203323892},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1479203323876},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1479203323892},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1479203323876},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1479203323876},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1479203323876},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1479203323876},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1479203323876},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1479203323876},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1479203323876},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1479203323876},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1479203323876},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1479203323876},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1479203323876},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"394d9fff7951287cc90f52acc2d4cbfd1bae079d","modified":1479203323876},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"82a2ac14d4200480a36bf10abcc3cc554ad744d6","modified":1479203323876},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1479203323876},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"b460e27db3dcd4ab40b17d8926a5c4e624f293a9","modified":1479203323876},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1479203323876},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1479203323876},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1479203323876},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1479203323888},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1479203323876},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1479203323876},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1479203323876},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1479203323876},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1479203323876},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1479203323876},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1479203323876},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1479203323876},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1479203323876},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1479203323876},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1479203323876},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1479203323876},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1479203323876},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1479203323876},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1479203323876},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1479203323876},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1479203323876},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1479203323876},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1479203323876},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1479203323876},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"7b206cd8921bc042f8e37a74aea1abc8a5ec8ab4","modified":1479203323876},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1479203323876},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1479203323876},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1479203323880},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1479203323880},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1479203323880},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1479203323880},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1479203323880},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1479203323880},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1479203323880},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1479203323880},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1479203323880},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1479203323880},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1479203323880},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1479203323884},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1479203323884},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1479203323884},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1479203323884},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1479203323884},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1479203323884},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1479203323888},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1479203323888},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1479203323876},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1479203323876},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1479203323876},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1479203323876},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1479203323876},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1479203323876},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1479203323876},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1479203323876},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1479203323876},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1479203323876},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1479203323884},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1479203323884},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1479203323888},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1479203323892},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1479203323888},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"5357db10656b260f8b332c67bb06e486bc64a4ad","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"c6dab7661a6b8c678b21b7eb273cef7100f970f6","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"3eb73cee103b810fa56901577ecb9c9bb1793cff","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1479203323876},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"5433b6bc9d8f0c4685e760b326445ac51245b0a8","modified":1479203323876},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1479203323876},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1479203323876},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1479203323876},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1479203323880},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1479203323880},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1479203323880},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1479203323880},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1479203323880},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1479203323880},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1479203323888},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1479203323880},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1479203323888},{"_id":"public/atom.xml","hash":"68a44f54dcec73d1eb695abe87f233798d101a4c","modified":1480678360764},{"_id":"public/categories/index.html","hash":"0bf38052ba3df4601fecbe62b771b31065eff2dc","modified":1480678360939},{"_id":"public/tags/index.html","hash":"b9605a66e555ccb69be8e6c34a495aca5dc44174","modified":1480678360940},{"_id":"public/2016/11/24/react-router-4-0-0-api-BrowserRouter/index.html","hash":"4d47147a622bf910cf5cc6348f6957cb1606f5db","modified":1480678360940},{"_id":"public/2016/11/15/make-ubutun-desktop/index.html","hash":"3f75210a7493c78d4ebbddb786530891eb3ed0d0","modified":1480678360940},{"_id":"public/2016/11/15/git配置user-name和user-email/index.html","hash":"00f43120412dd09015de65c5e1c856a9e6bf8a6f","modified":1480678360940},{"_id":"public/2016/11/09/windows配置mongdb记录/index.html","hash":"93faacee041457646033808b9f88b18f491499a4","modified":1480678360940},{"_id":"public/2016/11/08/windows下文件路径太深，无法删除解决办法/index.html","hash":"3653fac95c82fa5d79f8766ccdfdc80171340609","modified":1480678360940},{"_id":"public/2016/11/06/gitignore无效，不能过滤某些文件/index.html","hash":"d15d5b21cb1d741d0c0a037551e104275b7e31b6","modified":1480678360940},{"_id":"public/2016/11/05/android-studio编译错误-目标模式不含有“-”。-停止。/index.html","hash":"2a70327c729ca545815e7ab00bb7e489b7e1eb0c","modified":1480678360940},{"_id":"public/archives/2016/09/index.html","hash":"1b7e43c82114df5e93c6ef7763d8fb25025af600","modified":1480678360940},{"_id":"public/archives/2016/11/page/2/index.html","hash":"6230806b79650c07d0171d47275eb4298473e215","modified":1480678360940},{"_id":"public/tags/ubuntu/index.html","hash":"65e5f1c926cd27274b148c931923928bdde7d3ca","modified":1480678360940},{"_id":"public/tags/android/index.html","hash":"65e0f46119c323b606d8d501a91dedef1fe07af8","modified":1480678360940},{"_id":"public/tags/jQuery/index.html","hash":"8fbb0bcd17585cf22830cfaa11325e81d031b34e","modified":1480678360940},{"_id":"public/tags/css/index.html","hash":"0285b0b6895cb76c8c092392e5c4b1314ab39186","modified":1480678360940},{"_id":"public/tags/javascript/index.html","hash":"0405ab3cc3ad6669dc01c3529713eb02eb6110b1","modified":1480678360940},{"_id":"public/tags/nodejs/index.html","hash":"5301ca684951a711e73100889523062fb136de82","modified":1480678360940},{"_id":"public/tags/https/index.html","hash":"7476549f256cc79fc1cf727efcb83809eac457b9","modified":1480678360940},{"_id":"public/tags/openssl/index.html","hash":"7c75aa5f376da6ccd3f760030d76795f42d8c6a6","modified":1480678360940},{"_id":"public/tags/android-studio/index.html","hash":"4422d44b1724285bd87f26509304e003e084c034","modified":1480678360940},{"_id":"public/tags/openjdk/index.html","hash":"ab2b2706a3261fe11b1b412d0316f3b3deb013bf","modified":1480678360940},{"_id":"public/tags/java/index.html","hash":"438a93f7e51b3c8bcbb49fc43e4082de0d09e805","modified":1480678360940},{"_id":"public/tags/git/index.html","hash":"e621b41e5114b8dc4a8865e3440dc50309b6c18f","modified":1480678360940},{"_id":"public/tags/react/index.html","hash":"9d5b84ebfca99b0808ebeaf219ae1d4cf6d994e9","modified":1480678360941},{"_id":"public/tags/react-router/index.html","hash":"9cd5e818e1f1ddca2a65fc1db6a76b7d6d47b80e","modified":1480678360941},{"_id":"public/tags/翻译文档/index.html","hash":"6e46522950f7dc47615c60f086a65b627dcef282","modified":1480678360941},{"_id":"public/tags/update-alternatives/index.html","hash":"b9ad155d0dacf784a6db0d282312c7e33b186368","modified":1480678360941},{"_id":"public/tags/gitignore/index.html","hash":"048f03f6051f583deac59b63ad1fbc921fe0a9d0","modified":1480678360941},{"_id":"public/tags/windows/index.html","hash":"40ba3376d62e07bc613ccbd785d814ae3648be4c","modified":1480678360941},{"_id":"public/tags/npm/index.html","hash":"7a1d7abcbaf2c98ddb15163ed7dc2d0100e331e4","modified":1480678360941},{"_id":"public/tags/mongodb/index.html","hash":"6291cb7507da0ae9187faa4b11718bd3623d70ba","modified":1480678360941},{"_id":"public/tags/环境搭建/index.html","hash":"20a591fdb233e2b823963e43ab265a7c76464543","modified":1480678360941},{"_id":"public/categories/react-router-4-0-0-api中文文档/index.html","hash":"cb9d31f18f5c450c35b4004ae13acd005a66d561","modified":1480678360941},{"_id":"public/2016/11/29/react-router-4-0-0-api-Miss/index.html","hash":"c1cf1b2c829210f8912ee141be71aefde4b1e6dd","modified":1480678360941},{"_id":"public/2016/11/28/fix-dev-kvm-is-not-found/index.html","hash":"c54ad82cc794a9a531a2fd91116a19277e2494de","modified":1480678360941},{"_id":"public/2016/11/28/android-https-verify-ways/index.html","hash":"99dcf1dffe811b8864dbef972ca60014bb990ccb","modified":1480678360941},{"_id":"public/2016/11/25/react-router-4-0-0-api-Match/index.html","hash":"dcc1ef46b543d6a2a6220789c4376fbfa1c5d5c7","modified":1480678360941},{"_id":"public/2016/11/24/react-lifecycle/index.html","hash":"29591206e8bc56acd2e7bc100bcddc4fe8970b7d","modified":1480678360941},{"_id":"public/2016/11/16/ubuntu编译android源代码环境搭建/index.html","hash":"bcf6a2d334bb08bb346cda13ac345c25680ad10c","modified":1480678360941},{"_id":"public/2016/11/15/how-to-download-openjdk/index.html","hash":"49d218e5245005c6a5f7155a25f594180f49942a","modified":1480678360941},{"_id":"public/2016/11/15/ubuntu利用update-alternatives配置java/index.html","hash":"42e978f3ebc2a67857728eb794e9c26077b89fda","modified":1480678360941},{"_id":"public/2016/11/05/High-Performance-Javascript/index.html","hash":"f8c4d1fb14413b734de04da4960a98b15a9f21de","modified":1480678360941},{"_id":"public/2016/09/06/CSS-The-Definitive-Guide/index.html","hash":"a81d8e40ebe845adadfeac386a08f72e84de90c8","modified":1480678360941},{"_id":"public/2016/09/05/chapter-4/index.html","hash":"f038994424afbbec06f5848cd5f7dfeb1dc6a790","modified":1480678360941},{"_id":"public/2016/09/03/chapter-3/index.html","hash":"c1a7255be482fa2ebbb8a625b6dd3edf51bcea92","modified":1480678360941},{"_id":"public/2016/09/02/chapter-2/index.html","hash":"f3477f7cf910eef481b8a5faacc14f5c0e434d98","modified":1480678360941},{"_id":"public/archives/index.html","hash":"11f82fb50d3f954d715a0c9abc40f5651dec244e","modified":1480678360941},{"_id":"public/archives/page/2/index.html","hash":"a251bbd8953fe80485497afcd30309eac281d68d","modified":1480678360941},{"_id":"public/archives/2016/index.html","hash":"4827bc0e2b4d75a844a988d59718611423267fc1","modified":1480678360941},{"_id":"public/archives/2016/page/2/index.html","hash":"0820c6a1d4e4c7bbafbd20c2a917a200ee26eab2","modified":1480678360941},{"_id":"public/archives/2016/11/index.html","hash":"883ed2d980f994df395346846f7306d11b7844b2","modified":1480678360941},{"_id":"public/index.html","hash":"83d8c555b2ddb1ee4dd8c5b4ca9eebc9b93fd31a","modified":1480678360941},{"_id":"public/page/2/index.html","hash":"2f180c95b933d07ba772002288fab6c8f018260d","modified":1480678360941},{"_id":"public/archives/page/3/index.html","hash":"a7ee41e291e0a4613ad66fabcb05ff22cd429e41","modified":1480678360949},{"_id":"public/archives/2016/page/3/index.html","hash":"c385c003ccc1b04f1631abd9adffbebee0609339","modified":1480678360949},{"_id":"public/archives/2016/12/index.html","hash":"8bd1b580f3fd119e1e00adbf90e3f4e63d021c34","modified":1480678360949},{"_id":"public/page/3/index.html","hash":"d5c3abb003458d61da4da7780632ba5fa916a096","modified":1480678360949},{"_id":"public/2016/12/02/react-router-4-0-0-api-NavigationPrompt/index.html","hash":"ad2de962b78cd9d9ebef93fd8e6aa1a6e2778fc1","modified":1480678360949},{"_id":"public/2016/11/29/react-router-4-0-0-api-Link/index.html","hash":"c5bd2d6a4c565e6a840ac9d177c77ab099915958","modified":1480678360949},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1480678360954},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1480678360954},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1480678360954},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1480678360954},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1480678360954},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1480678360954},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1480678360954},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1480678360954},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1480678360955},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1480678360955},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1480678360955},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1480678360955},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1480678360955},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1480678360955},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1480678360955},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1480678360955},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1480678360955},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1480678360955},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1480678360955},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1480678360955},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1480678360955},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1480678360955},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1480678360955},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1480678360955},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1480678361679},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1480678361681},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1480678361683},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1480678361683},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1480678361687},{"_id":"public/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1480678361688},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1480678361688},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1480678361688},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1480678361688},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1480678361689},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1480678361689},{"_id":"public/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1480678361689},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1480678361689},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1480678361689},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1480678361689},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1480678361689},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1480678361689},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1480678361689},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1480678361689},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1480678361689},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1480678361689},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1480678361689},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1480678361689},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1480678361689},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1480678361689},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1480678361690},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1480678361690},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1480678361690},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1480678361690},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1480678361690},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1480678361690},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1480678361690},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1480678361690},{"_id":"public/css/main.css","hash":"59102efa242e6f5f8124abf4f3662d7bf5d68ed0","modified":1480678361690},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1480678361690},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1480678361690},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1480678361690},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1480678361690},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1480678361690},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1480678361690},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1480678361690},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1480678361690},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1480678361690},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1480678361690},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1480678361690},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1480678361698}],"Category":[{"name":"react router 4.0.0 api中文文档","_id":"ciw7pnwsv000p3opqumfkqg5x"}],"Data":[],"Page":[{"title":"categories","date":"2016-11-15T10:17:07.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-11-15 18:17:07\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-11-15T10:17:37.956Z","path":"categories/index.html","layout":"page","_id":"ciw7pnwu7003e3opqh31cze70","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-11-15T10:19:01.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-11-15 18:19:01\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-11-15T10:19:33.480Z","path":"tags/index.html","layout":"page","_id":"ciw7pnwu9003g3opqsh277j65","content":"","excerpt":"","more":""}],"Post":[{"title":"ubuntu如何反编译apk（2016最新方法）","_content":"\n# 下载apktool\n1. Download Linux [wrapper script](https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool) (Right click, Save Link As apktool)\n```\ncd ~/\nwget https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool\n```\n\n2. Download apktool-2 ([find newest here](https://bitbucket.org/iBotPeaches/apktool/downloads))\n```\nwget https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.2.1.jar\n```\n\n3. Make sure you have the 32bit libraries (ia32-libs) downloaded and installed by your linux package manager, if you are on a 64bit unix system.\n(This helps provide support for the 32bit native binary aapt, which is required by apktool)\n```\nsudo apt-get install ia32-libs\n```\n\n4. Rename downloaded jar to apktool.jar\n```\nmv apktool_2.2.1.jar apktool.jar\n```\n\n5. Move both files (apktool.jar & apktool) to /usr/local/bin (root needed)\n```\nsudo mv apktool.jar apktool /usr/local/bin/\n```\n\n6. Make sure both files are executable (chmod +x)\n```\nchmod +x /usr/local/bin/apktool /usr/local/bin/apktool.jar\n```\n\n7. Try running apktool via cli\n```\napktool d xxx.apk\n```\n\n# 下载dex2jar\ndex2jar，功能：反编译出jar文件，即apk的源程序文件的字节码，\n下载地址：[https://github.com/pxb1988/dex2jar](https://github.com/pxb1988/dex2jar)\n\n```\ngit clone https://github.com/pxb1988/dex2jar\n```\n\n## 参考\n[https://ibotpeaches.github.io/Apktool/](https://ibotpeaches.github.io/Apktool/)\n\n","source":"_drafts/reverse-engineering-apk.md","raw":"---\ntitle: ubuntu如何反编译apk（2016最新方法）\ntags: [ubuntu, android, apk, reverse engineering]\n---\n\n# 下载apktool\n1. Download Linux [wrapper script](https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool) (Right click, Save Link As apktool)\n```\ncd ~/\nwget https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool\n```\n\n2. Download apktool-2 ([find newest here](https://bitbucket.org/iBotPeaches/apktool/downloads))\n```\nwget https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.2.1.jar\n```\n\n3. Make sure you have the 32bit libraries (ia32-libs) downloaded and installed by your linux package manager, if you are on a 64bit unix system.\n(This helps provide support for the 32bit native binary aapt, which is required by apktool)\n```\nsudo apt-get install ia32-libs\n```\n\n4. Rename downloaded jar to apktool.jar\n```\nmv apktool_2.2.1.jar apktool.jar\n```\n\n5. Move both files (apktool.jar & apktool) to /usr/local/bin (root needed)\n```\nsudo mv apktool.jar apktool /usr/local/bin/\n```\n\n6. Make sure both files are executable (chmod +x)\n```\nchmod +x /usr/local/bin/apktool /usr/local/bin/apktool.jar\n```\n\n7. Try running apktool via cli\n```\napktool d xxx.apk\n```\n\n# 下载dex2jar\ndex2jar，功能：反编译出jar文件，即apk的源程序文件的字节码，\n下载地址：[https://github.com/pxb1988/dex2jar](https://github.com/pxb1988/dex2jar)\n\n```\ngit clone https://github.com/pxb1988/dex2jar\n```\n\n## 参考\n[https://ibotpeaches.github.io/Apktool/](https://ibotpeaches.github.io/Apktool/)\n\n","slug":"reverse-engineering-apk","published":0,"date":"2016-11-17T06:29:21.849Z","updated":"2016-11-17T06:29:21.849Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw7pnws200003opqkeiap185","content":"<h1 id=\"下载apktool\"><a href=\"#下载apktool\" class=\"headerlink\" title=\"下载apktool\"></a>下载apktool</h1><ol>\n<li><p>Download Linux <a href=\"https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool\" target=\"_blank\" rel=\"external\">wrapper script</a> (Right click, Save Link As apktool)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/</div><div class=\"line\">wget https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool</div></pre></td></tr></table></figure>\n</li>\n<li><p>Download apktool-2 (<a href=\"https://bitbucket.org/iBotPeaches/apktool/downloads\" target=\"_blank\" rel=\"external\">find newest here</a>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.2.1.jar</div></pre></td></tr></table></figure>\n</li>\n<li><p>Make sure you have the 32bit libraries (ia32-libs) downloaded and installed by your linux package manager, if you are on a 64bit unix system.<br>(This helps provide support for the 32bit native binary aapt, which is required by apktool)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install ia32-libs</div></pre></td></tr></table></figure>\n</li>\n<li><p>Rename downloaded jar to apktool.jar</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv apktool_2.2.1.jar apktool.jar</div></pre></td></tr></table></figure>\n</li>\n<li><p>Move both files (apktool.jar &amp; apktool) to /usr/local/bin (root needed)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mv apktool.jar apktool /usr/local/bin/</div></pre></td></tr></table></figure>\n</li>\n<li><p>Make sure both files are executable (chmod +x)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod +x /usr/local/bin/apktool /usr/local/bin/apktool.jar</div></pre></td></tr></table></figure>\n</li>\n<li><p>Try running apktool via cli</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apktool d xxx.apk</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"下载dex2jar\"><a href=\"#下载dex2jar\" class=\"headerlink\" title=\"下载dex2jar\"></a>下载dex2jar</h1><p>dex2jar，功能：反编译出jar文件，即apk的源程序文件的字节码，<br>下载地址：<a href=\"https://github.com/pxb1988/dex2jar\" target=\"_blank\" rel=\"external\">https://github.com/pxb1988/dex2jar</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/pxb1988/dex2jar</div></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://ibotpeaches.github.io/Apktool/\" target=\"_blank\" rel=\"external\">https://ibotpeaches.github.io/Apktool/</a></p>\n","excerpt":"","more":"<h1 id=\"下载apktool\"><a href=\"#下载apktool\" class=\"headerlink\" title=\"下载apktool\"></a>下载apktool</h1><ol>\n<li><p>Download Linux <a href=\"https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool\">wrapper script</a> (Right click, Save Link As apktool)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/</div><div class=\"line\">wget https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool</div></pre></td></tr></table></figure>\n</li>\n<li><p>Download apktool-2 (<a href=\"https://bitbucket.org/iBotPeaches/apktool/downloads\">find newest here</a>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.2.1.jar</div></pre></td></tr></table></figure>\n</li>\n<li><p>Make sure you have the 32bit libraries (ia32-libs) downloaded and installed by your linux package manager, if you are on a 64bit unix system.<br>(This helps provide support for the 32bit native binary aapt, which is required by apktool)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install ia32-libs</div></pre></td></tr></table></figure>\n</li>\n<li><p>Rename downloaded jar to apktool.jar</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv apktool_2.2.1.jar apktool.jar</div></pre></td></tr></table></figure>\n</li>\n<li><p>Move both files (apktool.jar &amp; apktool) to /usr/local/bin (root needed)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mv apktool.jar apktool /usr/local/bin/</div></pre></td></tr></table></figure>\n</li>\n<li><p>Make sure both files are executable (chmod +x)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod +x /usr/local/bin/apktool /usr/local/bin/apktool.jar</div></pre></td></tr></table></figure>\n</li>\n<li><p>Try running apktool via cli</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apktool d xxx.apk</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"下载dex2jar\"><a href=\"#下载dex2jar\" class=\"headerlink\" title=\"下载dex2jar\"></a>下载dex2jar</h1><p>dex2jar，功能：反编译出jar文件，即apk的源程序文件的字节码，<br>下载地址：<a href=\"https://github.com/pxb1988/dex2jar\">https://github.com/pxb1988/dex2jar</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/pxb1988/dex2jar</div></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://ibotpeaches.github.io/Apktool/\">https://ibotpeaches.github.io/Apktool/</a></p>\n"},{"_content":"二维码又称QR Code，QR全称Quick Response，是一个近几年来移动设备上超流行的一种编码方式，它比传统的Bar Code条形码能存更多的信息，也能表示更多的数据类型：比如：字符，数字，日文，中文等等。这两天学习了一下二维码图片生成的相关细节，觉得这个玩意就是一个密码算法，在此写一这篇文章 ，揭露一下。供好学的人一同学习之。\n\n\n# 基础知识\n\n## 二维码定位\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/QR-Code-Overview.jpeg)\n\n- Position Detection Pattern是定位图案，用于标记二维码的矩形大小。这三个定位图案有白边叫Separators for Postion Detection Patterns。之所以三个而不是四个意思就是三个就可以标识一个矩形了。\n\n- Timing Patterns也是用于定位的。原因是二维码有40种尺寸，尺寸过大了后需要有根标准线，不然扫描的时候可能会扫歪了。\n\n- Alignment Patterns 只有Version 2以上（包括Version2）的二维码需要这个东东，同样是为了定位用的。\n\n## 功能性定位\n\n- Format Information 存在于所有的尺寸中，用于存放一些格式化数据的。\n- Version Information 在 >= Version 7以上，需要预留两块3 x 6的区域存放一些版本信息。\n\n## 数据码和纠错码\n\n- 除了上述的那些地方，剩下的地方存放 Data Code 数据码 和 Error Correction Code 纠错码。\n\n # 数据编码\n\n 我们先来说说数据编码。QR码支持如下的编码：\n\n**Numeric mode** 数字编码，从0到9。如果需要编码的数字的个数不是3的倍数，那么，最后剩下的1或2位数会被转成4或7bits，则其它的每3位数字会被编成 10，12，14bits，编成多长还要看二维码的尺寸（下面有一个表Table 3说明了这点）\n\n**Alphanumeric mode** 字符编码。包括 0-9，大写的A到Z（没有小写），以及符号$ % * + – . / : 包括空格。这些字符会映射成一个字符索引表。如下所示：（其中的SP是空格，Char是字符，Value是其索引值） 编码的过程是把字符两两分组，然后转成下表的45进制，然后转成11bits的二进制，如果最后有一个落单的，那就转成6bits的二进制。而编码模式和字符的个数需要根据不同的Version尺寸编成9, 11或13个二进制（如下表中Table 3）\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Alphanumeric-mode.png)\n\n**Byte mode**, 字节编码，可以是0-255的ISO-8859-1字符。有些二维码的扫描器可以自动检测是否是UTF-8的编码。\n\n**Kanji mode** 这是日文编码，也是双字节编码。同样，也可以用于中文编码。日文和汉字的编码会减去一个值。如：在0X8140 to 0X9FFC中的字符会减去8140，在0XE040到0XEBBF中的字符要减去0XC140，然后把结果前两个16进制位拿出来乘以0XC0，然后再加上后两个16进制位，最后转成13bit的编码。如下图示例:\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Kanji-mode.png)\n\n**Extended Channel Interpretation (ECI) mode** 主要用于特殊的字符集。并不是所有的扫描器都支持这种编码。\n\n**Structured Append mode** 用于混合编码，也就是说，这个二维码中包含了多种编码格式。\n\n**FNC1 mode** 这种编码方式主要是给一些特殊的工业或行业用的。比如GS1条形码之类的。\n\n简单起见，后面三种不会在本文 中讨论。\n\n下面两张表中，\n\n- Table 2 是各个编码格式的“编号”，这个东西要写在Format Information中。注：中文是1101\n- Table 3 表示了，不同版本（尺寸）的二维码，对于，数字，字符，字节和Kanji模式下，对于单个编码的2进制的位数。（在二维码的规格说明书中，有各种各样的编码规范表，后面还会提到）\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Mode-Indicator.png)\n\n下面我们看几个示例，\n\n## **示例一：数字编码**\n\n在Version 1的尺寸下，纠错级别为H的情况下，编码： 01234567\n\n1. 把上述数字分成三组: 012 345 67\n\n2. 把他们转成二进制:  012 转成 0000001100；  345 转成 0101011001；  67 转成 1000011。\n\n3. 把这三个二进制串起来: 0000001100 0101011001 1000011\n\n4. 把数字的个数转成二进制 (version 1-H是10 bits ): 8个数字的二进制是 0000001000\n\n5. 把数字编码的标志0001和第4步的编码加到前面:  0001 0000001000 0000001100 0101011001 1000011\n\n## **示例二：字符编码**\n\n在Version 1的尺寸下，纠错级别为H的情况下，编码: AC-42\n\n1. 从字符索引表中找到 AC-42 这五个字条的索引 (10,12,41,4,2)\n\n2. 两两分组: (10,12) (41,4) (2)\n\n3. 把每一组转成11bits的二进制:\n\n        (10,12) 10*45+12 等于 462 转成 00111001110\n        (41,4) 41*45+4 等于 1849 转成 11100111001\n        (2) 等于 2 转成 000010\n\n4. 把这些二进制连接起来：00111001110 11100111001 000010\n\n5. 把字符的个数转成二进制 (Version 1-H为9 bits ): 5个字符，5转成 000000101\n\n6. 在头上加上编码标识 0010 和第5步的个数编码:  0010 000000101 00111001110 11100111001 000010\n\n## **结束符和补齐符**\n假如我们有个HELLO WORLD的字符串要编码，根据上面的示例二，我们可以得到下面的编码，\n\n| 编码        | 字符数           | HELLO WORLD的编码  |\n| ------------- |:-------------:|:-----: |\n| 0010      | 000001011 | 01100001011 01111000110 10001011100 10110111000 10011010100 001101 |\n| | |\n\n我们还要加上结束符\n| 编码        | 字符数           | HELLO WORLD的编码  | 结束 |\n| ------------- |:-------------:|:-------------:| -----:|\n| 0010      | 000001011 | 01100001011 01111000110 10001011100 10110111000 10011010100 001101 | 0000 |\n| | |\n\n## **按8bits重排**\n如果所有的编码加起来不是8个倍数我们还要在后面加上足够的0，比如上面一共有78个bits，所以，我们还要加上2个0，然后按8个bits分好组：\n\n00100000   01011011   00001011   01111000   11010001   01110010   11011100   01001101   01000011   010000<font color=red>**00**</font>\n\n## **补齐码（Padding Bytes）**\n\n最后，如果如果还没有达到我们最大的bits数的限制，我们还要加一些补齐码（Padding Bytes），Padding Bytes就是重复下面的两个bytes：11101100 00010001 （这两个二进制转成十进制是236和17，我也不知道为什么，只知道Spec上是这么写的）关于每一个Version的每一种纠错级别的最大Bits限制，可以参看QR Code Spec的第28页到32页的Table-7一表。\n\n假设我们需要编码的是Version 1的Q纠错级，那么，其最大需要104个bits，而我们上面只有80个bits，所以，还需要补24个bits，也就是需要3个Padding Bytes，我们就添加三个，于是得到下面的编码：\n\n00100000 01011011 00001011 01111000 11010001 01110010 11011100 01001101 01000011 01000000 <font color=red>**11101100 00010001 11101100**</font>\n\n上面的编码就是数据码了，叫Data Codewords，每一个8bits叫一个codeword，我们还要对这些数据码加上纠错信息。\n\n# **纠错码**\n\n上面我们说到了一些纠错级别，Error Correction Code Level，二维码中有四种级别的纠错，这就是为什么二维码有残缺还能扫出来，也就是为什么有人在二维码的中心位置加入图标。\n\n| 错误修正容量 | |\n|----|:----:|\n| L水平 | 7%的字码可被修正 \n| M水平 | 15%的字码可被修正 \n| Q水平 | 25%的字码可被修正\n| H水平 | 30%的字码可被修正\n\n那么，QR是怎么对数据码加上纠错码的？首先，我们需要对数据码进行分组，也就是分成不同的Block，然后对各个Block进行纠错编码，对于如何分组，我们可以查看QR Code Spec的第33页到44页的Table-13到Table-22的定义表。注意最后两列：\n\n- **Number of Error Code Correction Blocks**：需要分多少个块。\n- **Error Correction Code Per Blocks**：每一个块中的code个数，所谓的code的个数，也就是有多少个8bits的字节。\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Error-Correction-Blocks.png)\n\n举个例子：上述的Version 5 + Q纠错级：需要4个Blocks（2个Blocks为一组，共两组），头一组的两个Blocks中各15个bits数据 + 各 9个bits的纠错码（注：表中的codewords就是一个8bits的byte）（再注：最后一例中的（c, k, r ）的公式为：c = k + 2 * r，因为后脚注解释了：纠错码的容量小于纠错码的一半）\n\n下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）\n\n下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）\n\n| 组 | 块 | 数据 | 对每个块的纠错码 |\n|----|:----|:----|:----|\n| 1 | 1 | 67 85 70 134 87 38 85 194 119 50 6 18 6 103 38 | 213 199 11 45 115 247 241 223 229 248 154 117 154 111 86 161 111 39 |\n|   | 2\t| 246 246 66 7 118 134 242 7 38 86 22 198 199 146 6 | 87 204 96 60 202 182 124 157 200 134 27 129 209 17 163 163 120 133 |\n| 2 | 1 | 182 230 247 119 50 7 118 134 87 38 82 6 134 151 50 7 | 148 116 177 212 76 133 75 242 238 76 195 230 189 10 108 240 192 141 |\n|   | 2 | 70 247 118 86 194 6 151 50 16 236 17 236 17 236 17 236 | 235 159 5 173 24 147 59 33 106 40 255 172 82 2 131 32 178 236 |\n\n注：二维码的纠错码主要是通过[Reed-Solomon error correction](http://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction)（里德-所罗门纠错算法）来实现的。对于这个算法，对于我来说是相当的复杂，里面有很多的数学计算，比如：多项式除法，把1-255的数映射成2的n次方（0<=n<=255）的伽罗瓦域Galois Field之类的神一样的东西，以及基于这些基础的纠错数学公式，因为我的数据基础差，对于我来说太过复杂，所以我一时半会儿还有点没搞明白，还在学习中，所以，我在这里就不展开说这些东西了。还请大家见谅了。（当然，如果有朋友很明白，也繁请教教我）\n\n# **最终编码**\n\n## 穿插放置\n\n如果你以为我们可以开始画图，你就错了。二维码的混乱技术还没有玩完，它还要把数据码和纠错码的各个codewords交替放在一起。如何交替呢，规则如下：\n\n对于数据码：把每个块的第一个codewords先拿出来按顺度排列好，然后再取第一块的第二个，如此类推。如：上述示例中的Data Codewords如下：\n\n||||||||||||||||||\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n|块 1|67|85|70|134|87|38|85|194|119|50|6|18|6|103|38||\n|块 2|246|246|66|7|118|134|242|7|38|86|22|198|199|146|6||\t\n|块 3|182|230|247|119|50|7|118|134|87|38|82|6|134|151|50|7|\n|块 4|70|247|118|86|194|6|151|50|16|236|17|236|17|236|17|236|\n\n我们先取第一列的：67， 246， 182， 70\n\n然后再取第二列的：67， 246， 182， 70， 85，246，230 ，247\n\n如此类推：67， 246， 182， 70， 85，246，230 ，247 ………  ……… ，38，6，50，17，7，236\n\n对于纠错码，也是一样：\n||||||||||||||||||\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n|块 1|\t213|\t199|\t11|\t45|\t115|\t247|\t241|\t223|\t229|\t248|\t154|\t117|\t154|\t111|\t86|\t161|\t111|\t39|\n|块 2|\t87|\t204|\t96|\t60|\t202|\t182|\t124|\t157|\t200|\t134|\t27|\t129|\t209|\t17|\t163|\t163|\t120|\t133|\n|块 3|\t148|\t116|\t177|\t212|\t76|\t133|\t75|\t242|\t238|\t76|\t195|\t230|\t189|\t10|\t108|\t240|\t192|\t141|\n|块 4|\t235|\t159|\t5|\t173|\t24|\t147|\t59|\t33|\t106|\t40|\t255|\t172|\t82|\t2|\t131|\t32|\t178|\t236|\n\n和数据码取的一样，得到：213，87，148，235，199，204，116，159，…… …… 39，133，141，236\n\n然后，再把这两组放在一起（纠错码放在数据码之后）得到：\n\n67, 246, 182, 70, 85, 246, 230, 247, 70, 66, 247, 118, 134, 7, 119, 86, 87, 118, 50, 194, 38, 134, 7, 6, 85, 242, 118, 151, 194, 7, 134, 50, 119, 38, 87, 16, 50, 86, 38, 236, 6, 22, 82, 17, 18, 198, 6, 236, 6, 199, 134, 17, 103, 146, 151, 236, 38, 6, 50, 17, 7, 236, 213, 87, 148, 235, 199, 204, 116, 159, 11, 96, 177, 5, 45, 60, 212, 173, 115, 202, 76, 24, 247, 182, 133, 147, 241, 124, 75, 59, 223, 157, 242, 33, 229, 200, 238, 106, 248, 134, 76, 40, 154, 27, 195, 255, 117, 129, 230, 172, 154, 209, 189, 82, 111, 17, 10, 2, 86, 163, 108, 131, 161, 163, 240, 32, 111, 120, 192, 178, 39, 133, 141, 236\n\n这就是我们的数据区。\n\n## **Remainder Bits**\n最后再加上Reminder Bits，对于某些Version的QR，上面的还不够长度，还要加上Remainder Bits，比如：上述的5Q版的二维码，还要加上7个bits，Remainder Bits加零就好了。关于哪些Version需要多少个Remainder bit，可以参看QR Code Spec的第15页的Table-1的定义表。\n\n# **画二维码图**\n## **Position Detection Pattern**\n首先，先把Position Detection图案画在三个角上。（无论Version如何，这个图案的尺寸就是这么大）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/finder.png)\n\n## **Alignment Pattern**\n然后，再把Alignment图案画上（无论Version如何，这个图案的尺寸就是这么大）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/alignment-pattern.png)\n\n\n关于Alignment的位置，可以查看QR Code Spec的第81页的Table-E.1的定义表（下表是不完全表格）\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Alignment-Position.png)\n\n下图是根据上述表格中的Version8的一个例子（6，24，42）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/alignment-example.png)\n\n## **Timing Pattern**\n接下来是Timing Pattern的线（这个不用多说了）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Timing-Pattern.png)\n\n## **Format Information**\n再接下来是Formation Information，下图中的蓝色部分。\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Format-Information.png)\n\nFormat Information是一个15个bits的信息，每一个bit的位置如下图所示：（注意图中的Dark Module，那是永远出现的）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Format-Info-bits-postion.png)\n\n这15个bits中包括：\n\n- 5个数据bits：其中，2个bits用于表示使用什么样的Error Correction Level， 3个bits表示使用什么样的Mask\n- 10个纠错bits。主要通过BCH Code来计算\n\n然后15个bits还要与101010000010010做XOR操作。这样就保证不会因为我们选用了00的纠错级别和000的Mask，从而造成全部为白色，这会增加我们的扫描器的图像识别的困难。\n\n下面是一个示例：\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Format-Information-Example.png)\n\n关于Error Correction Level如下表所示：\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Error-Correction-Indicator-Code.png)\n\n关于Mask图案如后面的Table 23所示。\n\n## **Version Information**\n再接下来是Version Information（版本7以后需要这个编码），下图中的蓝色部分。\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Version-Information.png)\n\nVersion Information一共是18个bits，其中包括6个bits的版本号以及12个bits的纠错码，下面是一个示例：\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Example.png)\n\n而其填充位置如下：\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Position.png)\n\n## **数据和数据纠错码**\n然后是填接我们的最终编码，最终编码的填充方式如下：从左下角开始沿着红线填我们的各个bits，1是黑色，0是白色。如果遇到了上面的非数据区，则绕开或跳过。\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Data-Placement.png)\n\n## **掩码图案**\n这样下来，我们的图就填好了，但是，也许那些点并不均衡，如果出现大面积的空白或黑块，会告诉我们扫描识别的困难。所以，我们还要做Masking操作（靠，还嫌不复杂）QR的Spec中说了，QR有8个Mask你可以使用，如下所示：其中，各个mask的公式在各个图下面。所谓mask，说白了，就是和上面生成的图做XOR操作。Mask只会和数据区进行XOR，不会影响功能区。（注：选择一个合适的Mask也是有算法的）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/masking-pattern.png)\n\n其Mask的标识码如下所示：（其中的i,j分别对应于上图的x,y）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Mask-Pattern-Code.png)\n\n下面是Mask后的一些样子，我们可以看到被某些Mask XOR了的数据变得比较零散了。\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Masking-Examples.png)\n\nMask过后的二维码就成最终的图了。\n\n好了，大家可以去尝试去写一下QR的编码程序，当然，你可以用网上找个Reed Soloman的纠错算法的库，或是看看别人的源代码是怎么实现这个繁锁的编码。\n\n\n\n\n\n\n\n\n","source":"_drafts/qrcode.md","raw":"二维码又称QR Code，QR全称Quick Response，是一个近几年来移动设备上超流行的一种编码方式，它比传统的Bar Code条形码能存更多的信息，也能表示更多的数据类型：比如：字符，数字，日文，中文等等。这两天学习了一下二维码图片生成的相关细节，觉得这个玩意就是一个密码算法，在此写一这篇文章 ，揭露一下。供好学的人一同学习之。\n\n\n# 基础知识\n\n## 二维码定位\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/QR-Code-Overview.jpeg)\n\n- Position Detection Pattern是定位图案，用于标记二维码的矩形大小。这三个定位图案有白边叫Separators for Postion Detection Patterns。之所以三个而不是四个意思就是三个就可以标识一个矩形了。\n\n- Timing Patterns也是用于定位的。原因是二维码有40种尺寸，尺寸过大了后需要有根标准线，不然扫描的时候可能会扫歪了。\n\n- Alignment Patterns 只有Version 2以上（包括Version2）的二维码需要这个东东，同样是为了定位用的。\n\n## 功能性定位\n\n- Format Information 存在于所有的尺寸中，用于存放一些格式化数据的。\n- Version Information 在 >= Version 7以上，需要预留两块3 x 6的区域存放一些版本信息。\n\n## 数据码和纠错码\n\n- 除了上述的那些地方，剩下的地方存放 Data Code 数据码 和 Error Correction Code 纠错码。\n\n # 数据编码\n\n 我们先来说说数据编码。QR码支持如下的编码：\n\n**Numeric mode** 数字编码，从0到9。如果需要编码的数字的个数不是3的倍数，那么，最后剩下的1或2位数会被转成4或7bits，则其它的每3位数字会被编成 10，12，14bits，编成多长还要看二维码的尺寸（下面有一个表Table 3说明了这点）\n\n**Alphanumeric mode** 字符编码。包括 0-9，大写的A到Z（没有小写），以及符号$ % * + – . / : 包括空格。这些字符会映射成一个字符索引表。如下所示：（其中的SP是空格，Char是字符，Value是其索引值） 编码的过程是把字符两两分组，然后转成下表的45进制，然后转成11bits的二进制，如果最后有一个落单的，那就转成6bits的二进制。而编码模式和字符的个数需要根据不同的Version尺寸编成9, 11或13个二进制（如下表中Table 3）\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Alphanumeric-mode.png)\n\n**Byte mode**, 字节编码，可以是0-255的ISO-8859-1字符。有些二维码的扫描器可以自动检测是否是UTF-8的编码。\n\n**Kanji mode** 这是日文编码，也是双字节编码。同样，也可以用于中文编码。日文和汉字的编码会减去一个值。如：在0X8140 to 0X9FFC中的字符会减去8140，在0XE040到0XEBBF中的字符要减去0XC140，然后把结果前两个16进制位拿出来乘以0XC0，然后再加上后两个16进制位，最后转成13bit的编码。如下图示例:\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Kanji-mode.png)\n\n**Extended Channel Interpretation (ECI) mode** 主要用于特殊的字符集。并不是所有的扫描器都支持这种编码。\n\n**Structured Append mode** 用于混合编码，也就是说，这个二维码中包含了多种编码格式。\n\n**FNC1 mode** 这种编码方式主要是给一些特殊的工业或行业用的。比如GS1条形码之类的。\n\n简单起见，后面三种不会在本文 中讨论。\n\n下面两张表中，\n\n- Table 2 是各个编码格式的“编号”，这个东西要写在Format Information中。注：中文是1101\n- Table 3 表示了，不同版本（尺寸）的二维码，对于，数字，字符，字节和Kanji模式下，对于单个编码的2进制的位数。（在二维码的规格说明书中，有各种各样的编码规范表，后面还会提到）\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Mode-Indicator.png)\n\n下面我们看几个示例，\n\n## **示例一：数字编码**\n\n在Version 1的尺寸下，纠错级别为H的情况下，编码： 01234567\n\n1. 把上述数字分成三组: 012 345 67\n\n2. 把他们转成二进制:  012 转成 0000001100；  345 转成 0101011001；  67 转成 1000011。\n\n3. 把这三个二进制串起来: 0000001100 0101011001 1000011\n\n4. 把数字的个数转成二进制 (version 1-H是10 bits ): 8个数字的二进制是 0000001000\n\n5. 把数字编码的标志0001和第4步的编码加到前面:  0001 0000001000 0000001100 0101011001 1000011\n\n## **示例二：字符编码**\n\n在Version 1的尺寸下，纠错级别为H的情况下，编码: AC-42\n\n1. 从字符索引表中找到 AC-42 这五个字条的索引 (10,12,41,4,2)\n\n2. 两两分组: (10,12) (41,4) (2)\n\n3. 把每一组转成11bits的二进制:\n\n        (10,12) 10*45+12 等于 462 转成 00111001110\n        (41,4) 41*45+4 等于 1849 转成 11100111001\n        (2) 等于 2 转成 000010\n\n4. 把这些二进制连接起来：00111001110 11100111001 000010\n\n5. 把字符的个数转成二进制 (Version 1-H为9 bits ): 5个字符，5转成 000000101\n\n6. 在头上加上编码标识 0010 和第5步的个数编码:  0010 000000101 00111001110 11100111001 000010\n\n## **结束符和补齐符**\n假如我们有个HELLO WORLD的字符串要编码，根据上面的示例二，我们可以得到下面的编码，\n\n| 编码        | 字符数           | HELLO WORLD的编码  |\n| ------------- |:-------------:|:-----: |\n| 0010      | 000001011 | 01100001011 01111000110 10001011100 10110111000 10011010100 001101 |\n| | |\n\n我们还要加上结束符\n| 编码        | 字符数           | HELLO WORLD的编码  | 结束 |\n| ------------- |:-------------:|:-------------:| -----:|\n| 0010      | 000001011 | 01100001011 01111000110 10001011100 10110111000 10011010100 001101 | 0000 |\n| | |\n\n## **按8bits重排**\n如果所有的编码加起来不是8个倍数我们还要在后面加上足够的0，比如上面一共有78个bits，所以，我们还要加上2个0，然后按8个bits分好组：\n\n00100000   01011011   00001011   01111000   11010001   01110010   11011100   01001101   01000011   010000<font color=red>**00**</font>\n\n## **补齐码（Padding Bytes）**\n\n最后，如果如果还没有达到我们最大的bits数的限制，我们还要加一些补齐码（Padding Bytes），Padding Bytes就是重复下面的两个bytes：11101100 00010001 （这两个二进制转成十进制是236和17，我也不知道为什么，只知道Spec上是这么写的）关于每一个Version的每一种纠错级别的最大Bits限制，可以参看QR Code Spec的第28页到32页的Table-7一表。\n\n假设我们需要编码的是Version 1的Q纠错级，那么，其最大需要104个bits，而我们上面只有80个bits，所以，还需要补24个bits，也就是需要3个Padding Bytes，我们就添加三个，于是得到下面的编码：\n\n00100000 01011011 00001011 01111000 11010001 01110010 11011100 01001101 01000011 01000000 <font color=red>**11101100 00010001 11101100**</font>\n\n上面的编码就是数据码了，叫Data Codewords，每一个8bits叫一个codeword，我们还要对这些数据码加上纠错信息。\n\n# **纠错码**\n\n上面我们说到了一些纠错级别，Error Correction Code Level，二维码中有四种级别的纠错，这就是为什么二维码有残缺还能扫出来，也就是为什么有人在二维码的中心位置加入图标。\n\n| 错误修正容量 | |\n|----|:----:|\n| L水平 | 7%的字码可被修正 \n| M水平 | 15%的字码可被修正 \n| Q水平 | 25%的字码可被修正\n| H水平 | 30%的字码可被修正\n\n那么，QR是怎么对数据码加上纠错码的？首先，我们需要对数据码进行分组，也就是分成不同的Block，然后对各个Block进行纠错编码，对于如何分组，我们可以查看QR Code Spec的第33页到44页的Table-13到Table-22的定义表。注意最后两列：\n\n- **Number of Error Code Correction Blocks**：需要分多少个块。\n- **Error Correction Code Per Blocks**：每一个块中的code个数，所谓的code的个数，也就是有多少个8bits的字节。\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Error-Correction-Blocks.png)\n\n举个例子：上述的Version 5 + Q纠错级：需要4个Blocks（2个Blocks为一组，共两组），头一组的两个Blocks中各15个bits数据 + 各 9个bits的纠错码（注：表中的codewords就是一个8bits的byte）（再注：最后一例中的（c, k, r ）的公式为：c = k + 2 * r，因为后脚注解释了：纠错码的容量小于纠错码的一半）\n\n下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）\n\n下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）\n\n| 组 | 块 | 数据 | 对每个块的纠错码 |\n|----|:----|:----|:----|\n| 1 | 1 | 67 85 70 134 87 38 85 194 119 50 6 18 6 103 38 | 213 199 11 45 115 247 241 223 229 248 154 117 154 111 86 161 111 39 |\n|   | 2\t| 246 246 66 7 118 134 242 7 38 86 22 198 199 146 6 | 87 204 96 60 202 182 124 157 200 134 27 129 209 17 163 163 120 133 |\n| 2 | 1 | 182 230 247 119 50 7 118 134 87 38 82 6 134 151 50 7 | 148 116 177 212 76 133 75 242 238 76 195 230 189 10 108 240 192 141 |\n|   | 2 | 70 247 118 86 194 6 151 50 16 236 17 236 17 236 17 236 | 235 159 5 173 24 147 59 33 106 40 255 172 82 2 131 32 178 236 |\n\n注：二维码的纠错码主要是通过[Reed-Solomon error correction](http://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction)（里德-所罗门纠错算法）来实现的。对于这个算法，对于我来说是相当的复杂，里面有很多的数学计算，比如：多项式除法，把1-255的数映射成2的n次方（0<=n<=255）的伽罗瓦域Galois Field之类的神一样的东西，以及基于这些基础的纠错数学公式，因为我的数据基础差，对于我来说太过复杂，所以我一时半会儿还有点没搞明白，还在学习中，所以，我在这里就不展开说这些东西了。还请大家见谅了。（当然，如果有朋友很明白，也繁请教教我）\n\n# **最终编码**\n\n## 穿插放置\n\n如果你以为我们可以开始画图，你就错了。二维码的混乱技术还没有玩完，它还要把数据码和纠错码的各个codewords交替放在一起。如何交替呢，规则如下：\n\n对于数据码：把每个块的第一个codewords先拿出来按顺度排列好，然后再取第一块的第二个，如此类推。如：上述示例中的Data Codewords如下：\n\n||||||||||||||||||\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n|块 1|67|85|70|134|87|38|85|194|119|50|6|18|6|103|38||\n|块 2|246|246|66|7|118|134|242|7|38|86|22|198|199|146|6||\t\n|块 3|182|230|247|119|50|7|118|134|87|38|82|6|134|151|50|7|\n|块 4|70|247|118|86|194|6|151|50|16|236|17|236|17|236|17|236|\n\n我们先取第一列的：67， 246， 182， 70\n\n然后再取第二列的：67， 246， 182， 70， 85，246，230 ，247\n\n如此类推：67， 246， 182， 70， 85，246，230 ，247 ………  ……… ，38，6，50，17，7，236\n\n对于纠错码，也是一样：\n||||||||||||||||||\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n|块 1|\t213|\t199|\t11|\t45|\t115|\t247|\t241|\t223|\t229|\t248|\t154|\t117|\t154|\t111|\t86|\t161|\t111|\t39|\n|块 2|\t87|\t204|\t96|\t60|\t202|\t182|\t124|\t157|\t200|\t134|\t27|\t129|\t209|\t17|\t163|\t163|\t120|\t133|\n|块 3|\t148|\t116|\t177|\t212|\t76|\t133|\t75|\t242|\t238|\t76|\t195|\t230|\t189|\t10|\t108|\t240|\t192|\t141|\n|块 4|\t235|\t159|\t5|\t173|\t24|\t147|\t59|\t33|\t106|\t40|\t255|\t172|\t82|\t2|\t131|\t32|\t178|\t236|\n\n和数据码取的一样，得到：213，87，148，235，199，204，116，159，…… …… 39，133，141，236\n\n然后，再把这两组放在一起（纠错码放在数据码之后）得到：\n\n67, 246, 182, 70, 85, 246, 230, 247, 70, 66, 247, 118, 134, 7, 119, 86, 87, 118, 50, 194, 38, 134, 7, 6, 85, 242, 118, 151, 194, 7, 134, 50, 119, 38, 87, 16, 50, 86, 38, 236, 6, 22, 82, 17, 18, 198, 6, 236, 6, 199, 134, 17, 103, 146, 151, 236, 38, 6, 50, 17, 7, 236, 213, 87, 148, 235, 199, 204, 116, 159, 11, 96, 177, 5, 45, 60, 212, 173, 115, 202, 76, 24, 247, 182, 133, 147, 241, 124, 75, 59, 223, 157, 242, 33, 229, 200, 238, 106, 248, 134, 76, 40, 154, 27, 195, 255, 117, 129, 230, 172, 154, 209, 189, 82, 111, 17, 10, 2, 86, 163, 108, 131, 161, 163, 240, 32, 111, 120, 192, 178, 39, 133, 141, 236\n\n这就是我们的数据区。\n\n## **Remainder Bits**\n最后再加上Reminder Bits，对于某些Version的QR，上面的还不够长度，还要加上Remainder Bits，比如：上述的5Q版的二维码，还要加上7个bits，Remainder Bits加零就好了。关于哪些Version需要多少个Remainder bit，可以参看QR Code Spec的第15页的Table-1的定义表。\n\n# **画二维码图**\n## **Position Detection Pattern**\n首先，先把Position Detection图案画在三个角上。（无论Version如何，这个图案的尺寸就是这么大）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/finder.png)\n\n## **Alignment Pattern**\n然后，再把Alignment图案画上（无论Version如何，这个图案的尺寸就是这么大）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/alignment-pattern.png)\n\n\n关于Alignment的位置，可以查看QR Code Spec的第81页的Table-E.1的定义表（下表是不完全表格）\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Alignment-Position.png)\n\n下图是根据上述表格中的Version8的一个例子（6，24，42）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/alignment-example.png)\n\n## **Timing Pattern**\n接下来是Timing Pattern的线（这个不用多说了）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Timing-Pattern.png)\n\n## **Format Information**\n再接下来是Formation Information，下图中的蓝色部分。\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Format-Information.png)\n\nFormat Information是一个15个bits的信息，每一个bit的位置如下图所示：（注意图中的Dark Module，那是永远出现的）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Format-Info-bits-postion.png)\n\n这15个bits中包括：\n\n- 5个数据bits：其中，2个bits用于表示使用什么样的Error Correction Level， 3个bits表示使用什么样的Mask\n- 10个纠错bits。主要通过BCH Code来计算\n\n然后15个bits还要与101010000010010做XOR操作。这样就保证不会因为我们选用了00的纠错级别和000的Mask，从而造成全部为白色，这会增加我们的扫描器的图像识别的困难。\n\n下面是一个示例：\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Format-Information-Example.png)\n\n关于Error Correction Level如下表所示：\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Error-Correction-Indicator-Code.png)\n\n关于Mask图案如后面的Table 23所示。\n\n## **Version Information**\n再接下来是Version Information（版本7以后需要这个编码），下图中的蓝色部分。\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Version-Information.png)\n\nVersion Information一共是18个bits，其中包括6个bits的版本号以及12个bits的纠错码，下面是一个示例：\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Example.png)\n\n而其填充位置如下：\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Position.png)\n\n## **数据和数据纠错码**\n然后是填接我们的最终编码，最终编码的填充方式如下：从左下角开始沿着红线填我们的各个bits，1是黑色，0是白色。如果遇到了上面的非数据区，则绕开或跳过。\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Data-Placement.png)\n\n## **掩码图案**\n这样下来，我们的图就填好了，但是，也许那些点并不均衡，如果出现大面积的空白或黑块，会告诉我们扫描识别的困难。所以，我们还要做Masking操作（靠，还嫌不复杂）QR的Spec中说了，QR有8个Mask你可以使用，如下所示：其中，各个mask的公式在各个图下面。所谓mask，说白了，就是和上面生成的图做XOR操作。Mask只会和数据区进行XOR，不会影响功能区。（注：选择一个合适的Mask也是有算法的）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/masking-pattern.png)\n\n其Mask的标识码如下所示：（其中的i,j分别对应于上图的x,y）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Mask-Pattern-Code.png)\n\n下面是Mask后的一些样子，我们可以看到被某些Mask XOR了的数据变得比较零散了。\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Masking-Examples.png)\n\nMask过后的二维码就成最终的图了。\n\n好了，大家可以去尝试去写一下QR的编码程序，当然，你可以用网上找个Reed Soloman的纠错算法的库，或是看看别人的源代码是怎么实现这个繁锁的编码。\n\n\n\n\n\n\n\n\n","slug":"qrcode","published":0,"date":"2016-11-28T11:43:16.461Z","updated":"2016-11-28T11:43:16.461Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw7pnws500013opqs92p6pma","content":"<p>二维码又称QR Code，QR全称Quick Response，是一个近几年来移动设备上超流行的一种编码方式，它比传统的Bar Code条形码能存更多的信息，也能表示更多的数据类型：比如：字符，数字，日文，中文等等。这两天学习了一下二维码图片生成的相关细节，觉得这个玩意就是一个密码算法，在此写一这篇文章 ，揭露一下。供好学的人一同学习之。</p>\n<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><h2 id=\"二维码定位\"><a href=\"#二维码定位\" class=\"headerlink\" title=\"二维码定位\"></a>二维码定位</h2><p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/QR-Code-Overview.jpeg\" alt=\"alt\"></p>\n<ul>\n<li><p>Position Detection Pattern是定位图案，用于标记二维码的矩形大小。这三个定位图案有白边叫Separators for Postion Detection Patterns。之所以三个而不是四个意思就是三个就可以标识一个矩形了。</p>\n</li>\n<li><p>Timing Patterns也是用于定位的。原因是二维码有40种尺寸，尺寸过大了后需要有根标准线，不然扫描的时候可能会扫歪了。</p>\n</li>\n<li><p>Alignment Patterns 只有Version 2以上（包括Version2）的二维码需要这个东东，同样是为了定位用的。</p>\n</li>\n</ul>\n<h2 id=\"功能性定位\"><a href=\"#功能性定位\" class=\"headerlink\" title=\"功能性定位\"></a>功能性定位</h2><ul>\n<li>Format Information 存在于所有的尺寸中，用于存放一些格式化数据的。</li>\n<li>Version Information 在 &gt;= Version 7以上，需要预留两块3 x 6的区域存放一些版本信息。</li>\n</ul>\n<h2 id=\"数据码和纠错码\"><a href=\"#数据码和纠错码\" class=\"headerlink\" title=\"数据码和纠错码\"></a>数据码和纠错码</h2><ul>\n<li><p>除了上述的那些地方，剩下的地方存放 Data Code 数据码 和 Error Correction Code 纠错码。</p>\n<h1 id=\"数据编码\"><a href=\"#数据编码\" class=\"headerlink\" title=\"数据编码\"></a>数据编码</h1><p>我们先来说说数据编码。QR码支持如下的编码：</p>\n</li>\n</ul>\n<p><strong>Numeric mode</strong> 数字编码，从0到9。如果需要编码的数字的个数不是3的倍数，那么，最后剩下的1或2位数会被转成4或7bits，则其它的每3位数字会被编成 10，12，14bits，编成多长还要看二维码的尺寸（下面有一个表Table 3说明了这点）</p>\n<p><strong>Alphanumeric mode</strong> 字符编码。包括 0-9，大写的A到Z（没有小写），以及符号$ % * + – . / : 包括空格。这些字符会映射成一个字符索引表。如下所示：（其中的SP是空格，Char是字符，Value是其索引值） 编码的过程是把字符两两分组，然后转成下表的45进制，然后转成11bits的二进制，如果最后有一个落单的，那就转成6bits的二进制。而编码模式和字符的个数需要根据不同的Version尺寸编成9, 11或13个二进制（如下表中Table 3）<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Alphanumeric-mode.png\" alt=\"alt\"></p>\n<p><strong>Byte mode</strong>, 字节编码，可以是0-255的ISO-8859-1字符。有些二维码的扫描器可以自动检测是否是UTF-8的编码。</p>\n<p><strong>Kanji mode</strong> 这是日文编码，也是双字节编码。同样，也可以用于中文编码。日文和汉字的编码会减去一个值。如：在0X8140 to 0X9FFC中的字符会减去8140，在0XE040到0XEBBF中的字符要减去0XC140，然后把结果前两个16进制位拿出来乘以0XC0，然后再加上后两个16进制位，最后转成13bit的编码。如下图示例:<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Kanji-mode.png\" alt=\"alt\"></p>\n<p><strong>Extended Channel Interpretation (ECI) mode</strong> 主要用于特殊的字符集。并不是所有的扫描器都支持这种编码。</p>\n<p><strong>Structured Append mode</strong> 用于混合编码，也就是说，这个二维码中包含了多种编码格式。</p>\n<p><strong>FNC1 mode</strong> 这种编码方式主要是给一些特殊的工业或行业用的。比如GS1条形码之类的。</p>\n<p>简单起见，后面三种不会在本文 中讨论。</p>\n<p>下面两张表中，</p>\n<ul>\n<li>Table 2 是各个编码格式的“编号”，这个东西要写在Format Information中。注：中文是1101</li>\n<li>Table 3 表示了，不同版本（尺寸）的二维码，对于，数字，字符，字节和Kanji模式下，对于单个编码的2进制的位数。（在二维码的规格说明书中，有各种各样的编码规范表，后面还会提到）<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Mode-Indicator.png\" alt=\"alt\"></li>\n</ul>\n<p>下面我们看几个示例，</p>\n<h2 id=\"示例一：数字编码\"><a href=\"#示例一：数字编码\" class=\"headerlink\" title=\"示例一：数字编码\"></a><strong>示例一：数字编码</strong></h2><p>在Version 1的尺寸下，纠错级别为H的情况下，编码： 01234567</p>\n<ol>\n<li><p>把上述数字分成三组: 012 345 67</p>\n</li>\n<li><p>把他们转成二进制:  012 转成 0000001100；  345 转成 0101011001；  67 转成 1000011。</p>\n</li>\n<li><p>把这三个二进制串起来: 0000001100 0101011001 1000011</p>\n</li>\n<li><p>把数字的个数转成二进制 (version 1-H是10 bits ): 8个数字的二进制是 0000001000</p>\n</li>\n<li><p>把数字编码的标志0001和第4步的编码加到前面:  0001 0000001000 0000001100 0101011001 1000011</p>\n</li>\n</ol>\n<h2 id=\"示例二：字符编码\"><a href=\"#示例二：字符编码\" class=\"headerlink\" title=\"示例二：字符编码\"></a><strong>示例二：字符编码</strong></h2><p>在Version 1的尺寸下，纠错级别为H的情况下，编码: AC-42</p>\n<ol>\n<li><p>从字符索引表中找到 AC-42 这五个字条的索引 (10,12,41,4,2)</p>\n</li>\n<li><p>两两分组: (10,12) (41,4) (2)</p>\n</li>\n<li><p>把每一组转成11bits的二进制:</p>\n<pre><code>(10,12) 10*45+12 等于 462 转成 00111001110\n(41,4) 41*45+4 等于 1849 转成 11100111001\n(2) 等于 2 转成 000010\n</code></pre></li>\n<li><p>把这些二进制连接起来：00111001110 11100111001 000010</p>\n</li>\n<li><p>把字符的个数转成二进制 (Version 1-H为9 bits ): 5个字符，5转成 000000101</p>\n</li>\n<li><p>在头上加上编码标识 0010 和第5步的个数编码:  0010 000000101 00111001110 11100111001 000010</p>\n</li>\n</ol>\n<h2 id=\"结束符和补齐符\"><a href=\"#结束符和补齐符\" class=\"headerlink\" title=\"结束符和补齐符\"></a><strong>结束符和补齐符</strong></h2><p>假如我们有个HELLO WORLD的字符串要编码，根据上面的示例二，我们可以得到下面的编码，</p>\n<table>\n<thead>\n<tr>\n<th>编码</th>\n<th style=\"text-align:center\">字符数</th>\n<th style=\"text-align:center\">HELLO WORLD的编码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0010</td>\n<td style=\"text-align:center\">000001011</td>\n<td style=\"text-align:center\">01100001011 01111000110 10001011100 10110111000 10011010100 001101</td>\n</tr>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>我们还要加上结束符<br>| 编码        | 字符数           | HELLO WORLD的编码  | 结束 |<br>| ————- |:————-:|:————-:| —–:|<br>| 0010      | 000001011 | 01100001011 01111000110 10001011100 10110111000 10011010100 001101 | 0000 |<br>| | |</p>\n<h2 id=\"按8bits重排\"><a href=\"#按8bits重排\" class=\"headerlink\" title=\"按8bits重排\"></a><strong>按8bits重排</strong></h2><p>如果所有的编码加起来不是8个倍数我们还要在后面加上足够的0，比如上面一共有78个bits，所以，我们还要加上2个0，然后按8个bits分好组：</p>\n<p>00100000   01011011   00001011   01111000   11010001   01110010   11011100   01001101   01000011   010000<font color=\"red\"><strong>00</strong></font></p>\n<h2 id=\"补齐码（Padding-Bytes）\"><a href=\"#补齐码（Padding-Bytes）\" class=\"headerlink\" title=\"补齐码（Padding Bytes）\"></a><strong>补齐码（Padding Bytes）</strong></h2><p>最后，如果如果还没有达到我们最大的bits数的限制，我们还要加一些补齐码（Padding Bytes），Padding Bytes就是重复下面的两个bytes：11101100 00010001 （这两个二进制转成十进制是236和17，我也不知道为什么，只知道Spec上是这么写的）关于每一个Version的每一种纠错级别的最大Bits限制，可以参看QR Code Spec的第28页到32页的Table-7一表。</p>\n<p>假设我们需要编码的是Version 1的Q纠错级，那么，其最大需要104个bits，而我们上面只有80个bits，所以，还需要补24个bits，也就是需要3个Padding Bytes，我们就添加三个，于是得到下面的编码：</p>\n<p>00100000 01011011 00001011 01111000 11010001 01110010 11011100 01001101 01000011 01000000 <font color=\"red\"><strong>11101100 00010001 11101100</strong></font></p>\n<p>上面的编码就是数据码了，叫Data Codewords，每一个8bits叫一个codeword，我们还要对这些数据码加上纠错信息。</p>\n<h1 id=\"纠错码\"><a href=\"#纠错码\" class=\"headerlink\" title=\"纠错码\"></a><strong>纠错码</strong></h1><p>上面我们说到了一些纠错级别，Error Correction Code Level，二维码中有四种级别的纠错，这就是为什么二维码有残缺还能扫出来，也就是为什么有人在二维码的中心位置加入图标。</p>\n<table>\n<thead>\n<tr>\n<th>错误修正容量</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>L水平</td>\n<td style=\"text-align:center\">7%的字码可被修正 </td>\n</tr>\n<tr>\n<td>M水平</td>\n<td style=\"text-align:center\">15%的字码可被修正 </td>\n</tr>\n<tr>\n<td>Q水平</td>\n<td style=\"text-align:center\">25%的字码可被修正</td>\n</tr>\n<tr>\n<td>H水平</td>\n<td style=\"text-align:center\">30%的字码可被修正</td>\n</tr>\n</tbody>\n</table>\n<p>那么，QR是怎么对数据码加上纠错码的？首先，我们需要对数据码进行分组，也就是分成不同的Block，然后对各个Block进行纠错编码，对于如何分组，我们可以查看QR Code Spec的第33页到44页的Table-13到Table-22的定义表。注意最后两列：</p>\n<ul>\n<li><strong>Number of Error Code Correction Blocks</strong>：需要分多少个块。</li>\n<li><strong>Error Correction Code Per Blocks</strong>：每一个块中的code个数，所谓的code的个数，也就是有多少个8bits的字节。</li>\n</ul>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Error-Correction-Blocks.png\" alt=\"alt\"></p>\n<p>举个例子：上述的Version 5 + Q纠错级：需要4个Blocks（2个Blocks为一组，共两组），头一组的两个Blocks中各15个bits数据 + 各 9个bits的纠错码（注：表中的codewords就是一个8bits的byte）（再注：最后一例中的（c, k, r ）的公式为：c = k + 2 * r，因为后脚注解释了：纠错码的容量小于纠错码的一半）</p>\n<p>下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）</p>\n<p>下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）</p>\n<table>\n<thead>\n<tr>\n<th>组</th>\n<th style=\"text-align:left\">块</th>\n<th style=\"text-align:left\">数据</th>\n<th style=\"text-align:left\">对每个块的纠错码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">67 85 70 134 87 38 85 194 119 50 6 18 6 103 38</td>\n<td style=\"text-align:left\">213 199 11 45 115 247 241 223 229 248 154 117 154 111 86 161 111 39</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">246 246 66 7 118 134 242 7 38 86 22 198 199 146 6</td>\n<td style=\"text-align:left\">87 204 96 60 202 182 124 157 200 134 27 129 209 17 163 163 120 133</td>\n</tr>\n<tr>\n<td>2</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">182 230 247 119 50 7 118 134 87 38 82 6 134 151 50 7</td>\n<td style=\"text-align:left\">148 116 177 212 76 133 75 242 238 76 195 230 189 10 108 240 192 141</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">70 247 118 86 194 6 151 50 16 236 17 236 17 236 17 236</td>\n<td style=\"text-align:left\">235 159 5 173 24 147 59 33 106 40 255 172 82 2 131 32 178 236</td>\n</tr>\n</tbody>\n</table>\n<p>注：二维码的纠错码主要是通过<a href=\"http://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction\" target=\"_blank\" rel=\"external\">Reed-Solomon error correction</a>（里德-所罗门纠错算法）来实现的。对于这个算法，对于我来说是相当的复杂，里面有很多的数学计算，比如：多项式除法，把1-255的数映射成2的n次方（0&lt;=n&lt;=255）的伽罗瓦域Galois Field之类的神一样的东西，以及基于这些基础的纠错数学公式，因为我的数据基础差，对于我来说太过复杂，所以我一时半会儿还有点没搞明白，还在学习中，所以，我在这里就不展开说这些东西了。还请大家见谅了。（当然，如果有朋友很明白，也繁请教教我）</p>\n<h1 id=\"最终编码\"><a href=\"#最终编码\" class=\"headerlink\" title=\"最终编码\"></a><strong>最终编码</strong></h1><h2 id=\"穿插放置\"><a href=\"#穿插放置\" class=\"headerlink\" title=\"穿插放置\"></a>穿插放置</h2><p>如果你以为我们可以开始画图，你就错了。二维码的混乱技术还没有玩完，它还要把数据码和纠错码的各个codewords交替放在一起。如何交替呢，规则如下：</p>\n<p>对于数据码：把每个块的第一个codewords先拿出来按顺度排列好，然后再取第一块的第二个，如此类推。如：上述示例中的Data Codewords如下：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>块 1</td>\n<td>67</td>\n<td>85</td>\n<td>70</td>\n<td>134</td>\n<td>87</td>\n<td>38</td>\n<td>85</td>\n<td>194</td>\n<td>119</td>\n<td>50</td>\n<td>6</td>\n<td>18</td>\n<td>6</td>\n<td>103</td>\n<td>38</td>\n<td></td>\n</tr>\n<tr>\n<td>块 2</td>\n<td>246</td>\n<td>246</td>\n<td>66</td>\n<td>7</td>\n<td>118</td>\n<td>134</td>\n<td>242</td>\n<td>7</td>\n<td>38</td>\n<td>86</td>\n<td>22</td>\n<td>198</td>\n<td>199</td>\n<td>146</td>\n<td>6</td>\n<td></td>\n</tr>\n<tr>\n<td>块 3</td>\n<td>182</td>\n<td>230</td>\n<td>247</td>\n<td>119</td>\n<td>50</td>\n<td>7</td>\n<td>118</td>\n<td>134</td>\n<td>87</td>\n<td>38</td>\n<td>82</td>\n<td>6</td>\n<td>134</td>\n<td>151</td>\n<td>50</td>\n<td>7</td>\n</tr>\n<tr>\n<td>块 4</td>\n<td>70</td>\n<td>247</td>\n<td>118</td>\n<td>86</td>\n<td>194</td>\n<td>6</td>\n<td>151</td>\n<td>50</td>\n<td>16</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n</tr>\n</tbody>\n</table>\n<p>我们先取第一列的：67， 246， 182， 70</p>\n<p>然后再取第二列的：67， 246， 182， 70， 85，246，230 ，247</p>\n<p>如此类推：67， 246， 182， 70， 85，246，230 ，247 ………  ……… ，38，6，50，17，7，236</p>\n<p>对于纠错码，也是一样：<br>||||||||||||||||||<br>| — | — | — | — | — | — | — | — | — | — | — | — | — | — | — | — | — |<br>|块 1|    213|    199|    11|    45|    115|    247|    241|    223|    229|    248|    154|    117|    154|    111|    86|    161|    111|    39|<br>|块 2|    87|    204|    96|    60|    202|    182|    124|    157|    200|    134|    27|    129|    209|    17|    163|    163|    120|    133|<br>|块 3|    148|    116|    177|    212|    76|    133|    75|    242|    238|    76|    195|    230|    189|    10|    108|    240|    192|    141|<br>|块 4|    235|    159|    5|    173|    24|    147|    59|    33|    106|    40|    255|    172|    82|    2|    131|    32|    178|    236|</p>\n<p>和数据码取的一样，得到：213，87，148，235，199，204，116，159，…… …… 39，133，141，236</p>\n<p>然后，再把这两组放在一起（纠错码放在数据码之后）得到：</p>\n<p>67, 246, 182, 70, 85, 246, 230, 247, 70, 66, 247, 118, 134, 7, 119, 86, 87, 118, 50, 194, 38, 134, 7, 6, 85, 242, 118, 151, 194, 7, 134, 50, 119, 38, 87, 16, 50, 86, 38, 236, 6, 22, 82, 17, 18, 198, 6, 236, 6, 199, 134, 17, 103, 146, 151, 236, 38, 6, 50, 17, 7, 236, 213, 87, 148, 235, 199, 204, 116, 159, 11, 96, 177, 5, 45, 60, 212, 173, 115, 202, 76, 24, 247, 182, 133, 147, 241, 124, 75, 59, 223, 157, 242, 33, 229, 200, 238, 106, 248, 134, 76, 40, 154, 27, 195, 255, 117, 129, 230, 172, 154, 209, 189, 82, 111, 17, 10, 2, 86, 163, 108, 131, 161, 163, 240, 32, 111, 120, 192, 178, 39, 133, 141, 236</p>\n<p>这就是我们的数据区。</p>\n<h2 id=\"Remainder-Bits\"><a href=\"#Remainder-Bits\" class=\"headerlink\" title=\"Remainder Bits\"></a><strong>Remainder Bits</strong></h2><p>最后再加上Reminder Bits，对于某些Version的QR，上面的还不够长度，还要加上Remainder Bits，比如：上述的5Q版的二维码，还要加上7个bits，Remainder Bits加零就好了。关于哪些Version需要多少个Remainder bit，可以参看QR Code Spec的第15页的Table-1的定义表。</p>\n<h1 id=\"画二维码图\"><a href=\"#画二维码图\" class=\"headerlink\" title=\"画二维码图\"></a><strong>画二维码图</strong></h1><h2 id=\"Position-Detection-Pattern\"><a href=\"#Position-Detection-Pattern\" class=\"headerlink\" title=\"Position Detection Pattern\"></a><strong>Position Detection Pattern</strong></h2><p>首先，先把Position Detection图案画在三个角上。（无论Version如何，这个图案的尺寸就是这么大）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/finder.png\" alt=\"alt\"></p>\n<h2 id=\"Alignment-Pattern\"><a href=\"#Alignment-Pattern\" class=\"headerlink\" title=\"Alignment Pattern\"></a><strong>Alignment Pattern</strong></h2><p>然后，再把Alignment图案画上（无论Version如何，这个图案的尺寸就是这么大）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/alignment-pattern.png\" alt=\"alt\"></p>\n<p>关于Alignment的位置，可以查看QR Code Spec的第81页的Table-E.1的定义表（下表是不完全表格）<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Alignment-Position.png\" alt=\"alt\"></p>\n<p>下图是根据上述表格中的Version8的一个例子（6，24，42）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/alignment-example.png\" alt=\"alt\"></p>\n<h2 id=\"Timing-Pattern\"><a href=\"#Timing-Pattern\" class=\"headerlink\" title=\"Timing Pattern\"></a><strong>Timing Pattern</strong></h2><p>接下来是Timing Pattern的线（这个不用多说了）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Timing-Pattern.png\" alt=\"alt\"></p>\n<h2 id=\"Format-Information\"><a href=\"#Format-Information\" class=\"headerlink\" title=\"Format Information\"></a><strong>Format Information</strong></h2><p>再接下来是Formation Information，下图中的蓝色部分。</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Format-Information.png\" alt=\"alt\"></p>\n<p>Format Information是一个15个bits的信息，每一个bit的位置如下图所示：（注意图中的Dark Module，那是永远出现的）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Format-Info-bits-postion.png\" alt=\"alt\"></p>\n<p>这15个bits中包括：</p>\n<ul>\n<li>5个数据bits：其中，2个bits用于表示使用什么样的Error Correction Level， 3个bits表示使用什么样的Mask</li>\n<li>10个纠错bits。主要通过BCH Code来计算</li>\n</ul>\n<p>然后15个bits还要与101010000010010做XOR操作。这样就保证不会因为我们选用了00的纠错级别和000的Mask，从而造成全部为白色，这会增加我们的扫描器的图像识别的困难。</p>\n<p>下面是一个示例：</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Format-Information-Example.png\" alt=\"alt\"></p>\n<p>关于Error Correction Level如下表所示：</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Error-Correction-Indicator-Code.png\" alt=\"alt\"></p>\n<p>关于Mask图案如后面的Table 23所示。</p>\n<h2 id=\"Version-Information\"><a href=\"#Version-Information\" class=\"headerlink\" title=\"Version Information\"></a><strong>Version Information</strong></h2><p>再接下来是Version Information（版本7以后需要这个编码），下图中的蓝色部分。<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Version-Information.png\" alt=\"alt\"></p>\n<p>Version Information一共是18个bits，其中包括6个bits的版本号以及12个bits的纠错码，下面是一个示例：<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Example.png\" alt=\"alt\"></p>\n<p>而其填充位置如下：</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Position.png\" alt=\"alt\"></p>\n<h2 id=\"数据和数据纠错码\"><a href=\"#数据和数据纠错码\" class=\"headerlink\" title=\"数据和数据纠错码\"></a><strong>数据和数据纠错码</strong></h2><p>然后是填接我们的最终编码，最终编码的填充方式如下：从左下角开始沿着红线填我们的各个bits，1是黑色，0是白色。如果遇到了上面的非数据区，则绕开或跳过。</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Data-Placement.png\" alt=\"alt\"></p>\n<h2 id=\"掩码图案\"><a href=\"#掩码图案\" class=\"headerlink\" title=\"掩码图案\"></a><strong>掩码图案</strong></h2><p>这样下来，我们的图就填好了，但是，也许那些点并不均衡，如果出现大面积的空白或黑块，会告诉我们扫描识别的困难。所以，我们还要做Masking操作（靠，还嫌不复杂）QR的Spec中说了，QR有8个Mask你可以使用，如下所示：其中，各个mask的公式在各个图下面。所谓mask，说白了，就是和上面生成的图做XOR操作。Mask只会和数据区进行XOR，不会影响功能区。（注：选择一个合适的Mask也是有算法的）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/masking-pattern.png\" alt=\"alt\"></p>\n<p>其Mask的标识码如下所示：（其中的i,j分别对应于上图的x,y）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Mask-Pattern-Code.png\" alt=\"alt\"></p>\n<p>下面是Mask后的一些样子，我们可以看到被某些Mask XOR了的数据变得比较零散了。</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Masking-Examples.png\" alt=\"alt\"></p>\n<p>Mask过后的二维码就成最终的图了。</p>\n<p>好了，大家可以去尝试去写一下QR的编码程序，当然，你可以用网上找个Reed Soloman的纠错算法的库，或是看看别人的源代码是怎么实现这个繁锁的编码。</p>\n","excerpt":"","more":"<p>二维码又称QR Code，QR全称Quick Response，是一个近几年来移动设备上超流行的一种编码方式，它比传统的Bar Code条形码能存更多的信息，也能表示更多的数据类型：比如：字符，数字，日文，中文等等。这两天学习了一下二维码图片生成的相关细节，觉得这个玩意就是一个密码算法，在此写一这篇文章 ，揭露一下。供好学的人一同学习之。</p>\n<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><h2 id=\"二维码定位\"><a href=\"#二维码定位\" class=\"headerlink\" title=\"二维码定位\"></a>二维码定位</h2><p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/QR-Code-Overview.jpeg\" alt=\"alt\"></p>\n<ul>\n<li><p>Position Detection Pattern是定位图案，用于标记二维码的矩形大小。这三个定位图案有白边叫Separators for Postion Detection Patterns。之所以三个而不是四个意思就是三个就可以标识一个矩形了。</p>\n</li>\n<li><p>Timing Patterns也是用于定位的。原因是二维码有40种尺寸，尺寸过大了后需要有根标准线，不然扫描的时候可能会扫歪了。</p>\n</li>\n<li><p>Alignment Patterns 只有Version 2以上（包括Version2）的二维码需要这个东东，同样是为了定位用的。</p>\n</li>\n</ul>\n<h2 id=\"功能性定位\"><a href=\"#功能性定位\" class=\"headerlink\" title=\"功能性定位\"></a>功能性定位</h2><ul>\n<li>Format Information 存在于所有的尺寸中，用于存放一些格式化数据的。</li>\n<li>Version Information 在 &gt;= Version 7以上，需要预留两块3 x 6的区域存放一些版本信息。</li>\n</ul>\n<h2 id=\"数据码和纠错码\"><a href=\"#数据码和纠错码\" class=\"headerlink\" title=\"数据码和纠错码\"></a>数据码和纠错码</h2><ul>\n<li><p>除了上述的那些地方，剩下的地方存放 Data Code 数据码 和 Error Correction Code 纠错码。</p>\n<h1 id=\"数据编码\"><a href=\"#数据编码\" class=\"headerlink\" title=\"数据编码\"></a>数据编码</h1><p>我们先来说说数据编码。QR码支持如下的编码：</p>\n</li>\n</ul>\n<p><strong>Numeric mode</strong> 数字编码，从0到9。如果需要编码的数字的个数不是3的倍数，那么，最后剩下的1或2位数会被转成4或7bits，则其它的每3位数字会被编成 10，12，14bits，编成多长还要看二维码的尺寸（下面有一个表Table 3说明了这点）</p>\n<p><strong>Alphanumeric mode</strong> 字符编码。包括 0-9，大写的A到Z（没有小写），以及符号$ % * + – . / : 包括空格。这些字符会映射成一个字符索引表。如下所示：（其中的SP是空格，Char是字符，Value是其索引值） 编码的过程是把字符两两分组，然后转成下表的45进制，然后转成11bits的二进制，如果最后有一个落单的，那就转成6bits的二进制。而编码模式和字符的个数需要根据不同的Version尺寸编成9, 11或13个二进制（如下表中Table 3）<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Alphanumeric-mode.png\" alt=\"alt\"></p>\n<p><strong>Byte mode</strong>, 字节编码，可以是0-255的ISO-8859-1字符。有些二维码的扫描器可以自动检测是否是UTF-8的编码。</p>\n<p><strong>Kanji mode</strong> 这是日文编码，也是双字节编码。同样，也可以用于中文编码。日文和汉字的编码会减去一个值。如：在0X8140 to 0X9FFC中的字符会减去8140，在0XE040到0XEBBF中的字符要减去0XC140，然后把结果前两个16进制位拿出来乘以0XC0，然后再加上后两个16进制位，最后转成13bit的编码。如下图示例:<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Kanji-mode.png\" alt=\"alt\"></p>\n<p><strong>Extended Channel Interpretation (ECI) mode</strong> 主要用于特殊的字符集。并不是所有的扫描器都支持这种编码。</p>\n<p><strong>Structured Append mode</strong> 用于混合编码，也就是说，这个二维码中包含了多种编码格式。</p>\n<p><strong>FNC1 mode</strong> 这种编码方式主要是给一些特殊的工业或行业用的。比如GS1条形码之类的。</p>\n<p>简单起见，后面三种不会在本文 中讨论。</p>\n<p>下面两张表中，</p>\n<ul>\n<li>Table 2 是各个编码格式的“编号”，这个东西要写在Format Information中。注：中文是1101</li>\n<li>Table 3 表示了，不同版本（尺寸）的二维码，对于，数字，字符，字节和Kanji模式下，对于单个编码的2进制的位数。（在二维码的规格说明书中，有各种各样的编码规范表，后面还会提到）<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Mode-Indicator.png\" alt=\"alt\"></li>\n</ul>\n<p>下面我们看几个示例，</p>\n<h2 id=\"示例一：数字编码\"><a href=\"#示例一：数字编码\" class=\"headerlink\" title=\"示例一：数字编码\"></a><strong>示例一：数字编码</strong></h2><p>在Version 1的尺寸下，纠错级别为H的情况下，编码： 01234567</p>\n<ol>\n<li><p>把上述数字分成三组: 012 345 67</p>\n</li>\n<li><p>把他们转成二进制:  012 转成 0000001100；  345 转成 0101011001；  67 转成 1000011。</p>\n</li>\n<li><p>把这三个二进制串起来: 0000001100 0101011001 1000011</p>\n</li>\n<li><p>把数字的个数转成二进制 (version 1-H是10 bits ): 8个数字的二进制是 0000001000</p>\n</li>\n<li><p>把数字编码的标志0001和第4步的编码加到前面:  0001 0000001000 0000001100 0101011001 1000011</p>\n</li>\n</ol>\n<h2 id=\"示例二：字符编码\"><a href=\"#示例二：字符编码\" class=\"headerlink\" title=\"示例二：字符编码\"></a><strong>示例二：字符编码</strong></h2><p>在Version 1的尺寸下，纠错级别为H的情况下，编码: AC-42</p>\n<ol>\n<li><p>从字符索引表中找到 AC-42 这五个字条的索引 (10,12,41,4,2)</p>\n</li>\n<li><p>两两分组: (10,12) (41,4) (2)</p>\n</li>\n<li><p>把每一组转成11bits的二进制:</p>\n<pre><code>(10,12) 10*45+12 等于 462 转成 00111001110\n(41,4) 41*45+4 等于 1849 转成 11100111001\n(2) 等于 2 转成 000010\n</code></pre></li>\n<li><p>把这些二进制连接起来：00111001110 11100111001 000010</p>\n</li>\n<li><p>把字符的个数转成二进制 (Version 1-H为9 bits ): 5个字符，5转成 000000101</p>\n</li>\n<li><p>在头上加上编码标识 0010 和第5步的个数编码:  0010 000000101 00111001110 11100111001 000010</p>\n</li>\n</ol>\n<h2 id=\"结束符和补齐符\"><a href=\"#结束符和补齐符\" class=\"headerlink\" title=\"结束符和补齐符\"></a><strong>结束符和补齐符</strong></h2><p>假如我们有个HELLO WORLD的字符串要编码，根据上面的示例二，我们可以得到下面的编码，</p>\n<table>\n<thead>\n<tr>\n<th>编码</th>\n<th style=\"text-align:center\">字符数</th>\n<th style=\"text-align:center\">HELLO WORLD的编码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0010</td>\n<td style=\"text-align:center\">000001011</td>\n<td style=\"text-align:center\">01100001011 01111000110 10001011100 10110111000 10011010100 001101</td>\n</tr>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>我们还要加上结束符<br>| 编码        | 字符数           | HELLO WORLD的编码  | 结束 |<br>| ————- |:————-:|:————-:| —–:|<br>| 0010      | 000001011 | 01100001011 01111000110 10001011100 10110111000 10011010100 001101 | 0000 |<br>| | |</p>\n<h2 id=\"按8bits重排\"><a href=\"#按8bits重排\" class=\"headerlink\" title=\"按8bits重排\"></a><strong>按8bits重排</strong></h2><p>如果所有的编码加起来不是8个倍数我们还要在后面加上足够的0，比如上面一共有78个bits，所以，我们还要加上2个0，然后按8个bits分好组：</p>\n<p>00100000   01011011   00001011   01111000   11010001   01110010   11011100   01001101   01000011   010000<font color=red><strong>00</strong></font></p>\n<h2 id=\"补齐码（Padding-Bytes）\"><a href=\"#补齐码（Padding-Bytes）\" class=\"headerlink\" title=\"补齐码（Padding Bytes）\"></a><strong>补齐码（Padding Bytes）</strong></h2><p>最后，如果如果还没有达到我们最大的bits数的限制，我们还要加一些补齐码（Padding Bytes），Padding Bytes就是重复下面的两个bytes：11101100 00010001 （这两个二进制转成十进制是236和17，我也不知道为什么，只知道Spec上是这么写的）关于每一个Version的每一种纠错级别的最大Bits限制，可以参看QR Code Spec的第28页到32页的Table-7一表。</p>\n<p>假设我们需要编码的是Version 1的Q纠错级，那么，其最大需要104个bits，而我们上面只有80个bits，所以，还需要补24个bits，也就是需要3个Padding Bytes，我们就添加三个，于是得到下面的编码：</p>\n<p>00100000 01011011 00001011 01111000 11010001 01110010 11011100 01001101 01000011 01000000 <font color=red><strong>11101100 00010001 11101100</strong></font></p>\n<p>上面的编码就是数据码了，叫Data Codewords，每一个8bits叫一个codeword，我们还要对这些数据码加上纠错信息。</p>\n<h1 id=\"纠错码\"><a href=\"#纠错码\" class=\"headerlink\" title=\"纠错码\"></a><strong>纠错码</strong></h1><p>上面我们说到了一些纠错级别，Error Correction Code Level，二维码中有四种级别的纠错，这就是为什么二维码有残缺还能扫出来，也就是为什么有人在二维码的中心位置加入图标。</p>\n<table>\n<thead>\n<tr>\n<th>错误修正容量</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>L水平</td>\n<td style=\"text-align:center\">7%的字码可被修正 </td>\n</tr>\n<tr>\n<td>M水平</td>\n<td style=\"text-align:center\">15%的字码可被修正 </td>\n</tr>\n<tr>\n<td>Q水平</td>\n<td style=\"text-align:center\">25%的字码可被修正</td>\n</tr>\n<tr>\n<td>H水平</td>\n<td style=\"text-align:center\">30%的字码可被修正</td>\n</tr>\n</tbody>\n</table>\n<p>那么，QR是怎么对数据码加上纠错码的？首先，我们需要对数据码进行分组，也就是分成不同的Block，然后对各个Block进行纠错编码，对于如何分组，我们可以查看QR Code Spec的第33页到44页的Table-13到Table-22的定义表。注意最后两列：</p>\n<ul>\n<li><strong>Number of Error Code Correction Blocks</strong>：需要分多少个块。</li>\n<li><strong>Error Correction Code Per Blocks</strong>：每一个块中的code个数，所谓的code的个数，也就是有多少个8bits的字节。</li>\n</ul>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Error-Correction-Blocks.png\" alt=\"alt\"></p>\n<p>举个例子：上述的Version 5 + Q纠错级：需要4个Blocks（2个Blocks为一组，共两组），头一组的两个Blocks中各15个bits数据 + 各 9个bits的纠错码（注：表中的codewords就是一个8bits的byte）（再注：最后一例中的（c, k, r ）的公式为：c = k + 2 * r，因为后脚注解释了：纠错码的容量小于纠错码的一半）</p>\n<p>下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）</p>\n<p>下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）</p>\n<table>\n<thead>\n<tr>\n<th>组</th>\n<th style=\"text-align:left\">块</th>\n<th style=\"text-align:left\">数据</th>\n<th style=\"text-align:left\">对每个块的纠错码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">67 85 70 134 87 38 85 194 119 50 6 18 6 103 38</td>\n<td style=\"text-align:left\">213 199 11 45 115 247 241 223 229 248 154 117 154 111 86 161 111 39</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">246 246 66 7 118 134 242 7 38 86 22 198 199 146 6</td>\n<td style=\"text-align:left\">87 204 96 60 202 182 124 157 200 134 27 129 209 17 163 163 120 133</td>\n</tr>\n<tr>\n<td>2</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">182 230 247 119 50 7 118 134 87 38 82 6 134 151 50 7</td>\n<td style=\"text-align:left\">148 116 177 212 76 133 75 242 238 76 195 230 189 10 108 240 192 141</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">70 247 118 86 194 6 151 50 16 236 17 236 17 236 17 236</td>\n<td style=\"text-align:left\">235 159 5 173 24 147 59 33 106 40 255 172 82 2 131 32 178 236</td>\n</tr>\n</tbody>\n</table>\n<p>注：二维码的纠错码主要是通过<a href=\"http://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction\">Reed-Solomon error correction</a>（里德-所罗门纠错算法）来实现的。对于这个算法，对于我来说是相当的复杂，里面有很多的数学计算，比如：多项式除法，把1-255的数映射成2的n次方（0&lt;=n&lt;=255）的伽罗瓦域Galois Field之类的神一样的东西，以及基于这些基础的纠错数学公式，因为我的数据基础差，对于我来说太过复杂，所以我一时半会儿还有点没搞明白，还在学习中，所以，我在这里就不展开说这些东西了。还请大家见谅了。（当然，如果有朋友很明白，也繁请教教我）</p>\n<h1 id=\"最终编码\"><a href=\"#最终编码\" class=\"headerlink\" title=\"最终编码\"></a><strong>最终编码</strong></h1><h2 id=\"穿插放置\"><a href=\"#穿插放置\" class=\"headerlink\" title=\"穿插放置\"></a>穿插放置</h2><p>如果你以为我们可以开始画图，你就错了。二维码的混乱技术还没有玩完，它还要把数据码和纠错码的各个codewords交替放在一起。如何交替呢，规则如下：</p>\n<p>对于数据码：把每个块的第一个codewords先拿出来按顺度排列好，然后再取第一块的第二个，如此类推。如：上述示例中的Data Codewords如下：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>块 1</td>\n<td>67</td>\n<td>85</td>\n<td>70</td>\n<td>134</td>\n<td>87</td>\n<td>38</td>\n<td>85</td>\n<td>194</td>\n<td>119</td>\n<td>50</td>\n<td>6</td>\n<td>18</td>\n<td>6</td>\n<td>103</td>\n<td>38</td>\n<td></td>\n</tr>\n<tr>\n<td>块 2</td>\n<td>246</td>\n<td>246</td>\n<td>66</td>\n<td>7</td>\n<td>118</td>\n<td>134</td>\n<td>242</td>\n<td>7</td>\n<td>38</td>\n<td>86</td>\n<td>22</td>\n<td>198</td>\n<td>199</td>\n<td>146</td>\n<td>6</td>\n<td></td>\n</tr>\n<tr>\n<td>块 3</td>\n<td>182</td>\n<td>230</td>\n<td>247</td>\n<td>119</td>\n<td>50</td>\n<td>7</td>\n<td>118</td>\n<td>134</td>\n<td>87</td>\n<td>38</td>\n<td>82</td>\n<td>6</td>\n<td>134</td>\n<td>151</td>\n<td>50</td>\n<td>7</td>\n</tr>\n<tr>\n<td>块 4</td>\n<td>70</td>\n<td>247</td>\n<td>118</td>\n<td>86</td>\n<td>194</td>\n<td>6</td>\n<td>151</td>\n<td>50</td>\n<td>16</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n</tr>\n</tbody>\n</table>\n<p>我们先取第一列的：67， 246， 182， 70</p>\n<p>然后再取第二列的：67， 246， 182， 70， 85，246，230 ，247</p>\n<p>如此类推：67， 246， 182， 70， 85，246，230 ，247 ………  ……… ，38，6，50，17，7，236</p>\n<p>对于纠错码，也是一样：<br>||||||||||||||||||<br>| — | — | — | — | — | — | — | — | — | — | — | — | — | — | — | — | — |<br>|块 1|    213|    199|    11|    45|    115|    247|    241|    223|    229|    248|    154|    117|    154|    111|    86|    161|    111|    39|<br>|块 2|    87|    204|    96|    60|    202|    182|    124|    157|    200|    134|    27|    129|    209|    17|    163|    163|    120|    133|<br>|块 3|    148|    116|    177|    212|    76|    133|    75|    242|    238|    76|    195|    230|    189|    10|    108|    240|    192|    141|<br>|块 4|    235|    159|    5|    173|    24|    147|    59|    33|    106|    40|    255|    172|    82|    2|    131|    32|    178|    236|</p>\n<p>和数据码取的一样，得到：213，87，148，235，199，204，116，159，…… …… 39，133，141，236</p>\n<p>然后，再把这两组放在一起（纠错码放在数据码之后）得到：</p>\n<p>67, 246, 182, 70, 85, 246, 230, 247, 70, 66, 247, 118, 134, 7, 119, 86, 87, 118, 50, 194, 38, 134, 7, 6, 85, 242, 118, 151, 194, 7, 134, 50, 119, 38, 87, 16, 50, 86, 38, 236, 6, 22, 82, 17, 18, 198, 6, 236, 6, 199, 134, 17, 103, 146, 151, 236, 38, 6, 50, 17, 7, 236, 213, 87, 148, 235, 199, 204, 116, 159, 11, 96, 177, 5, 45, 60, 212, 173, 115, 202, 76, 24, 247, 182, 133, 147, 241, 124, 75, 59, 223, 157, 242, 33, 229, 200, 238, 106, 248, 134, 76, 40, 154, 27, 195, 255, 117, 129, 230, 172, 154, 209, 189, 82, 111, 17, 10, 2, 86, 163, 108, 131, 161, 163, 240, 32, 111, 120, 192, 178, 39, 133, 141, 236</p>\n<p>这就是我们的数据区。</p>\n<h2 id=\"Remainder-Bits\"><a href=\"#Remainder-Bits\" class=\"headerlink\" title=\"Remainder Bits\"></a><strong>Remainder Bits</strong></h2><p>最后再加上Reminder Bits，对于某些Version的QR，上面的还不够长度，还要加上Remainder Bits，比如：上述的5Q版的二维码，还要加上7个bits，Remainder Bits加零就好了。关于哪些Version需要多少个Remainder bit，可以参看QR Code Spec的第15页的Table-1的定义表。</p>\n<h1 id=\"画二维码图\"><a href=\"#画二维码图\" class=\"headerlink\" title=\"画二维码图\"></a><strong>画二维码图</strong></h1><h2 id=\"Position-Detection-Pattern\"><a href=\"#Position-Detection-Pattern\" class=\"headerlink\" title=\"Position Detection Pattern\"></a><strong>Position Detection Pattern</strong></h2><p>首先，先把Position Detection图案画在三个角上。（无论Version如何，这个图案的尺寸就是这么大）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/finder.png\" alt=\"alt\"></p>\n<h2 id=\"Alignment-Pattern\"><a href=\"#Alignment-Pattern\" class=\"headerlink\" title=\"Alignment Pattern\"></a><strong>Alignment Pattern</strong></h2><p>然后，再把Alignment图案画上（无论Version如何，这个图案的尺寸就是这么大）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/alignment-pattern.png\" alt=\"alt\"></p>\n<p>关于Alignment的位置，可以查看QR Code Spec的第81页的Table-E.1的定义表（下表是不完全表格）<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Alignment-Position.png\" alt=\"alt\"></p>\n<p>下图是根据上述表格中的Version8的一个例子（6，24，42）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/alignment-example.png\" alt=\"alt\"></p>\n<h2 id=\"Timing-Pattern\"><a href=\"#Timing-Pattern\" class=\"headerlink\" title=\"Timing Pattern\"></a><strong>Timing Pattern</strong></h2><p>接下来是Timing Pattern的线（这个不用多说了）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Timing-Pattern.png\" alt=\"alt\"></p>\n<h2 id=\"Format-Information\"><a href=\"#Format-Information\" class=\"headerlink\" title=\"Format Information\"></a><strong>Format Information</strong></h2><p>再接下来是Formation Information，下图中的蓝色部分。</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Format-Information.png\" alt=\"alt\"></p>\n<p>Format Information是一个15个bits的信息，每一个bit的位置如下图所示：（注意图中的Dark Module，那是永远出现的）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Format-Info-bits-postion.png\" alt=\"alt\"></p>\n<p>这15个bits中包括：</p>\n<ul>\n<li>5个数据bits：其中，2个bits用于表示使用什么样的Error Correction Level， 3个bits表示使用什么样的Mask</li>\n<li>10个纠错bits。主要通过BCH Code来计算</li>\n</ul>\n<p>然后15个bits还要与101010000010010做XOR操作。这样就保证不会因为我们选用了00的纠错级别和000的Mask，从而造成全部为白色，这会增加我们的扫描器的图像识别的困难。</p>\n<p>下面是一个示例：</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Format-Information-Example.png\" alt=\"alt\"></p>\n<p>关于Error Correction Level如下表所示：</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Error-Correction-Indicator-Code.png\" alt=\"alt\"></p>\n<p>关于Mask图案如后面的Table 23所示。</p>\n<h2 id=\"Version-Information\"><a href=\"#Version-Information\" class=\"headerlink\" title=\"Version Information\"></a><strong>Version Information</strong></h2><p>再接下来是Version Information（版本7以后需要这个编码），下图中的蓝色部分。<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Version-Information.png\" alt=\"alt\"></p>\n<p>Version Information一共是18个bits，其中包括6个bits的版本号以及12个bits的纠错码，下面是一个示例：<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Example.png\" alt=\"alt\"></p>\n<p>而其填充位置如下：</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Position.png\" alt=\"alt\"></p>\n<h2 id=\"数据和数据纠错码\"><a href=\"#数据和数据纠错码\" class=\"headerlink\" title=\"数据和数据纠错码\"></a><strong>数据和数据纠错码</strong></h2><p>然后是填接我们的最终编码，最终编码的填充方式如下：从左下角开始沿着红线填我们的各个bits，1是黑色，0是白色。如果遇到了上面的非数据区，则绕开或跳过。</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Data-Placement.png\" alt=\"alt\"></p>\n<h2 id=\"掩码图案\"><a href=\"#掩码图案\" class=\"headerlink\" title=\"掩码图案\"></a><strong>掩码图案</strong></h2><p>这样下来，我们的图就填好了，但是，也许那些点并不均衡，如果出现大面积的空白或黑块，会告诉我们扫描识别的困难。所以，我们还要做Masking操作（靠，还嫌不复杂）QR的Spec中说了，QR有8个Mask你可以使用，如下所示：其中，各个mask的公式在各个图下面。所谓mask，说白了，就是和上面生成的图做XOR操作。Mask只会和数据区进行XOR，不会影响功能区。（注：选择一个合适的Mask也是有算法的）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/masking-pattern.png\" alt=\"alt\"></p>\n<p>其Mask的标识码如下所示：（其中的i,j分别对应于上图的x,y）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Mask-Pattern-Code.png\" alt=\"alt\"></p>\n<p>下面是Mask后的一些样子，我们可以看到被某些Mask XOR了的数据变得比较零散了。</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Masking-Examples.png\" alt=\"alt\"></p>\n<p>Mask过后的二维码就成最终的图了。</p>\n<p>好了，大家可以去尝试去写一下QR的编码程序，当然，你可以用网上找个Reed Soloman的纠错算法的库，或是看看别人的源代码是怎么实现这个繁锁的编码。</p>\n"},{"title":"my-son-2016.11.21","_content":"Idina Menze和Caleb Hyles激情对唱Let It Go：\n<iframe height=498 width=510 src=\"http://player.youku.com/embed/XNjcyMDU4Njg0\" frameborder=0 allowfullscreen></iframe>\n","source":"_drafts/my-son-2016-11-21.md","raw":"---\ntitle: my-son-2016.11.21\ntags: son\n---\nIdina Menze和Caleb Hyles激情对唱Let It Go：\n<iframe height=498 width=510 src=\"http://player.youku.com/embed/XNjcyMDU4Njg0\" frameborder=0 allowfullscreen></iframe>\n","slug":"my-son-2016-11-21","published":0,"date":"2016-11-28T11:43:16.441Z","updated":"2016-11-28T11:43:16.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw7pnws900033opqbxmgntcm","content":"<p>Idina Menze和Caleb Hyles激情对唱Let It Go：</p>\n<iframe height=\"498\" width=\"510\" src=\"http://player.youku.com/embed/XNjcyMDU4Njg0\" frameborder=\"0\" allowfullscreen></iframe>\n","excerpt":"","more":"<p>Idina Menze和Caleb Hyles激情对唱Let It Go：</p>\n<iframe height=498 width=510 src=\"http://player.youku.com/embed/XNjcyMDU4Njg0\" frameborder=0 allowfullscreen></iframe>\n"},{"title":"锋利的jQeury 第三章-笔记","date":"2016-09-03T10:04:19.000Z","_content":"\n## 第三章 jQuery中的DOM操作\n - 查找`DOM`节点\n\n    ```javascript\n    var $li = $('ul li:eq(1)'); //获取<ul>里的第二个<li>节点\n    ```\n\n<!--more-->\n\n - 查找属性节点\n\n    ```javascript\n    var $para = $('p'); \n    var p_txt = $para.attr('title');\n    ```\n<!--more-->\n\n - 创建元素节点\n\n    ```javascript\n    var $li = $('<li></li>');\n    ```\n\n - 创建文本节点\n\n    ```javascript\n    var $li = $('<li>香蕉</li>');\n    ```\n\n - 创建属性节点\n\n    ```javascript\n    var $li = $('<li title=\"香蕉\">香蕉</li>');\n    ```\n    \n - 插入节点的方法\n    - append 追加元素。$('p').append($(\"&lt;b>你好&lt;/b>\"))，A.append(B)之后，A和B是父子关系。\n    - appendTo 跟append相反，A.append(B) 相当于 B.appendTo(A)\n    - prepend 插入到前面\n    - prependTo 跟prepend相反\n    - after 在每个匹配元素之后插入内容，A.after(B)之后，A与B是兄弟元素\n    - intertAfter跟after相反，A.after(B)相当于B.instertAfter(A)\n    - before，跟after相反\n    - insertBefore，A.before(B)相当于B.insertBefore(A)\n    - 删除节点的方法\n    - remove 删除匹配的元素 $('ul li:eq(1)').remove()，删除第二个li元素，remove返回值是删除的元素\n    - detach 与remove不同，detach会保留所有该元素绑定的事件，附加的数据等。\n    - empty 清空节点\n\n- 复制节点 clone，可以传入一个boolean参数表示是否同时复制元素中所绑定的事件。\n\n- 替换节点\n    - replaceWith， A.replaceWith(B)，用B替换A\n    - replaceAll 跟replaceWith相反，A.replaceWith(B)相当于B.replaceAll(A)\n\n- 包裹节点\n    - wrap $('strong').wrap('&lt;b>&lt;/b>') 用&lt;b>标签将&lt;strong>标签包起来，如果有多个匹配，则每个元素单独包裹。\n    - wrapAll，将所有的元素用一个元素来包裹。如果匹配的节点之间有其他节点，其他节点会被放到包裹元素之后。\n    - wrapInner 将子内容（包括文本节点）包裹起来。\n\n- 获取属性，$('p').atter('title')\n\n- 设置属性\n\n    - $('p').attr('title', 'your title') 设置单个属性\n\n    - $('p').attr({'title', 'your title', 'name': 'test'})，设置多个属性\n\n- 删除属性 $('p').removeAttr('title');\n\n- 获取样式 $('p').attr('class')获取&lt;p>元素的class\n\n- 设置样式 $('p').attr('class', 'high') 设置样式\n\n- 追加样式 $('p').addClass('another')\n\n- 移除样式\n\n    - $('p').removeClass('another') 移除一个样式\n\n    - $('p').removeClass('another high') 移除多个样式\n\n- 切换样式 $('p').toggleClass('another')，如果another类名不存在则添加之，否则删除之\n\n- 判断是否含有某个样式 $('p').hasClass('another')\n- html()方法 获取或设置html内容，相当于javascript的innerHTML属性\n- text() 获取或设置文本内容，相当于javascript的innerText属性\n\n    - 获取: var text = $('p').text()\n\n    - 设置 $('p').text('你喜欢的水果是')\n- val()方法 获取或设置value，相当于javascript的value属性\n\n- 遍历节点\n    - children() 返回子节点（DOM原声节点，非jQuery节点）\n    - next()方法，获取紧临的同辈元素，也就是返回下一个兄弟节点。\n    - prev()，跟next相反，返回上一个兄弟节点\n    - siblings()返回前后所有的同辈元素。\n    - closest() 取得最近的匹配元素，往父控件追溯。如$(e.target).closest('li').css('color', 'red');给点击的目标元素附近的li元素添加颜色。\n    - parents() 获得集合中每个匹配元素的祖先元素。\n    - parent() 获得集合中每个匹配元素的父级元素。\n    - find() / filter() / nextAll() / prevAll() 等。\n\n- 获取样式 $('p').css('color') 获取&lt;p>的样式颜色\n\n- 设置样式\n\n    - $('p').css('color', 'red');\n\n    - $('p').css({\"fontSize\": \"30px\", \"backgroundColor\": \"#888888\"'});\n\n    - 元素定位\n        - offset()，获取元素在当前视窗中的相对偏移。\n        - position() 获取元素相对于最近的一个position样式为relative或absolute（为啥）的父节点的相对偏移。\n    - scrollLeft() 获取或设置水平滚动条的位置\n    - scrollRight() 获取或设置垂直滚动条的位置。\n","source":"_posts/chapter-3.md","raw":"---\ntitle: 锋利的jQeury 第三章-笔记 \ndate: 2016-9-3 18:04:19\ntags: jQuery\n---\n\n## 第三章 jQuery中的DOM操作\n - 查找`DOM`节点\n\n    ```javascript\n    var $li = $('ul li:eq(1)'); //获取<ul>里的第二个<li>节点\n    ```\n\n<!--more-->\n\n - 查找属性节点\n\n    ```javascript\n    var $para = $('p'); \n    var p_txt = $para.attr('title');\n    ```\n<!--more-->\n\n - 创建元素节点\n\n    ```javascript\n    var $li = $('<li></li>');\n    ```\n\n - 创建文本节点\n\n    ```javascript\n    var $li = $('<li>香蕉</li>');\n    ```\n\n - 创建属性节点\n\n    ```javascript\n    var $li = $('<li title=\"香蕉\">香蕉</li>');\n    ```\n    \n - 插入节点的方法\n    - append 追加元素。$('p').append($(\"&lt;b>你好&lt;/b>\"))，A.append(B)之后，A和B是父子关系。\n    - appendTo 跟append相反，A.append(B) 相当于 B.appendTo(A)\n    - prepend 插入到前面\n    - prependTo 跟prepend相反\n    - after 在每个匹配元素之后插入内容，A.after(B)之后，A与B是兄弟元素\n    - intertAfter跟after相反，A.after(B)相当于B.instertAfter(A)\n    - before，跟after相反\n    - insertBefore，A.before(B)相当于B.insertBefore(A)\n    - 删除节点的方法\n    - remove 删除匹配的元素 $('ul li:eq(1)').remove()，删除第二个li元素，remove返回值是删除的元素\n    - detach 与remove不同，detach会保留所有该元素绑定的事件，附加的数据等。\n    - empty 清空节点\n\n- 复制节点 clone，可以传入一个boolean参数表示是否同时复制元素中所绑定的事件。\n\n- 替换节点\n    - replaceWith， A.replaceWith(B)，用B替换A\n    - replaceAll 跟replaceWith相反，A.replaceWith(B)相当于B.replaceAll(A)\n\n- 包裹节点\n    - wrap $('strong').wrap('&lt;b>&lt;/b>') 用&lt;b>标签将&lt;strong>标签包起来，如果有多个匹配，则每个元素单独包裹。\n    - wrapAll，将所有的元素用一个元素来包裹。如果匹配的节点之间有其他节点，其他节点会被放到包裹元素之后。\n    - wrapInner 将子内容（包括文本节点）包裹起来。\n\n- 获取属性，$('p').atter('title')\n\n- 设置属性\n\n    - $('p').attr('title', 'your title') 设置单个属性\n\n    - $('p').attr({'title', 'your title', 'name': 'test'})，设置多个属性\n\n- 删除属性 $('p').removeAttr('title');\n\n- 获取样式 $('p').attr('class')获取&lt;p>元素的class\n\n- 设置样式 $('p').attr('class', 'high') 设置样式\n\n- 追加样式 $('p').addClass('another')\n\n- 移除样式\n\n    - $('p').removeClass('another') 移除一个样式\n\n    - $('p').removeClass('another high') 移除多个样式\n\n- 切换样式 $('p').toggleClass('another')，如果another类名不存在则添加之，否则删除之\n\n- 判断是否含有某个样式 $('p').hasClass('another')\n- html()方法 获取或设置html内容，相当于javascript的innerHTML属性\n- text() 获取或设置文本内容，相当于javascript的innerText属性\n\n    - 获取: var text = $('p').text()\n\n    - 设置 $('p').text('你喜欢的水果是')\n- val()方法 获取或设置value，相当于javascript的value属性\n\n- 遍历节点\n    - children() 返回子节点（DOM原声节点，非jQuery节点）\n    - next()方法，获取紧临的同辈元素，也就是返回下一个兄弟节点。\n    - prev()，跟next相反，返回上一个兄弟节点\n    - siblings()返回前后所有的同辈元素。\n    - closest() 取得最近的匹配元素，往父控件追溯。如$(e.target).closest('li').css('color', 'red');给点击的目标元素附近的li元素添加颜色。\n    - parents() 获得集合中每个匹配元素的祖先元素。\n    - parent() 获得集合中每个匹配元素的父级元素。\n    - find() / filter() / nextAll() / prevAll() 等。\n\n- 获取样式 $('p').css('color') 获取&lt;p>的样式颜色\n\n- 设置样式\n\n    - $('p').css('color', 'red');\n\n    - $('p').css({\"fontSize\": \"30px\", \"backgroundColor\": \"#888888\"'});\n\n    - 元素定位\n        - offset()，获取元素在当前视窗中的相对偏移。\n        - position() 获取元素相对于最近的一个position样式为relative或absolute（为啥）的父节点的相对偏移。\n    - scrollLeft() 获取或设置水平滚动条的位置\n    - scrollRight() 获取或设置垂直滚动条的位置。\n","slug":"chapter-3","published":1,"updated":"2016-11-15T10:09:02.672Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw7pnwsa00043opqil4vyjns","content":"<h2 id=\"第三章-jQuery中的DOM操作\"><a href=\"#第三章-jQuery中的DOM操作\" class=\"headerlink\" title=\"第三章 jQuery中的DOM操作\"></a>第三章 jQuery中的DOM操作</h2><ul>\n<li><p>查找<code>DOM</code>节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'ul li:eq(1)'</span>); <span class=\"comment\">//获取&lt;ul&gt;里的第二个&lt;li&gt;节点</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>查找属性节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $para = $(<span class=\"string\">'p'</span>); </div><div class=\"line\"><span class=\"keyword\">var</span> p_txt = $para.attr(<span class=\"string\">'title'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<!--more-->\n<ul>\n<li><p>创建元素节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li&gt;&lt;/li&gt;'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建文本节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li&gt;香蕉&lt;/li&gt;'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建属性节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li title=\"香蕉\"&gt;香蕉&lt;/li&gt;'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>插入节点的方法<ul>\n<li>append 追加元素。$(‘p’).append($(“&lt;b&gt;你好&lt;/b&gt;”))，A.append(B)之后，A和B是父子关系。</li>\n<li>appendTo 跟append相反，A.append(B) 相当于 B.appendTo(A)</li>\n<li>prepend 插入到前面</li>\n<li>prependTo 跟prepend相反</li>\n<li>after 在每个匹配元素之后插入内容，A.after(B)之后，A与B是兄弟元素</li>\n<li>intertAfter跟after相反，A.after(B)相当于B.instertAfter(A)</li>\n<li>before，跟after相反</li>\n<li>insertBefore，A.before(B)相当于B.insertBefore(A)</li>\n<li>删除节点的方法</li>\n<li>remove 删除匹配的元素 $(‘ul li:eq(1)’).remove()，删除第二个li元素，remove返回值是删除的元素</li>\n<li>detach 与remove不同，detach会保留所有该元素绑定的事件，附加的数据等。</li>\n<li>empty 清空节点</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>复制节点 clone，可以传入一个boolean参数表示是否同时复制元素中所绑定的事件。</p>\n</li>\n<li><p>替换节点</p>\n<ul>\n<li>replaceWith， A.replaceWith(B)，用B替换A</li>\n<li>replaceAll 跟replaceWith相反，A.replaceWith(B)相当于B.replaceAll(A)</li>\n</ul>\n</li>\n<li><p>包裹节点</p>\n<ul>\n<li>wrap $(‘strong’).wrap(‘&lt;b&gt;&lt;/b&gt;’) 用&lt;b&gt;标签将&lt;strong&gt;标签包起来，如果有多个匹配，则每个元素单独包裹。</li>\n<li>wrapAll，将所有的元素用一个元素来包裹。如果匹配的节点之间有其他节点，其他节点会被放到包裹元素之后。</li>\n<li>wrapInner 将子内容（包括文本节点）包裹起来。</li>\n</ul>\n</li>\n<li><p>获取属性，$(‘p’).atter(‘title’)</p>\n</li>\n<li><p>设置属性</p>\n<ul>\n<li><p>$(‘p’).attr(‘title’, ‘your title’) 设置单个属性</p>\n</li>\n<li><p>$(‘p’).attr({‘title’, ‘your title’, ‘name’: ‘test’})，设置多个属性</p>\n</li>\n</ul>\n</li>\n<li><p>删除属性 $(‘p’).removeAttr(‘title’);</p>\n</li>\n<li><p>获取样式 $(‘p’).attr(‘class’)获取&lt;p&gt;元素的class</p>\n</li>\n<li><p>设置样式 $(‘p’).attr(‘class’, ‘high’) 设置样式</p>\n</li>\n<li><p>追加样式 $(‘p’).addClass(‘another’)</p>\n</li>\n<li><p>移除样式</p>\n<ul>\n<li><p>$(‘p’).removeClass(‘another’) 移除一个样式</p>\n</li>\n<li><p>$(‘p’).removeClass(‘another high’) 移除多个样式</p>\n</li>\n</ul>\n</li>\n<li><p>切换样式 $(‘p’).toggleClass(‘another’)，如果another类名不存在则添加之，否则删除之</p>\n</li>\n<li><p>判断是否含有某个样式 $(‘p’).hasClass(‘another’)</p>\n</li>\n<li>html()方法 获取或设置html内容，相当于javascript的innerHTML属性</li>\n<li><p>text() 获取或设置文本内容，相当于javascript的innerText属性</p>\n<ul>\n<li><p>获取: var text = $(‘p’).text()</p>\n</li>\n<li><p>设置 $(‘p’).text(‘你喜欢的水果是’)</p>\n</li>\n</ul>\n</li>\n<li><p>val()方法 获取或设置value，相当于javascript的value属性</p>\n</li>\n<li><p>遍历节点</p>\n<ul>\n<li>children() 返回子节点（DOM原声节点，非jQuery节点）</li>\n<li>next()方法，获取紧临的同辈元素，也就是返回下一个兄弟节点。</li>\n<li>prev()，跟next相反，返回上一个兄弟节点</li>\n<li>siblings()返回前后所有的同辈元素。</li>\n<li>closest() 取得最近的匹配元素，往父控件追溯。如$(e.target).closest(‘li’).css(‘color’, ‘red’);给点击的目标元素附近的li元素添加颜色。</li>\n<li>parents() 获得集合中每个匹配元素的祖先元素。</li>\n<li>parent() 获得集合中每个匹配元素的父级元素。</li>\n<li>find() / filter() / nextAll() / prevAll() 等。</li>\n</ul>\n</li>\n<li><p>获取样式 $(‘p’).css(‘color’) 获取&lt;p&gt;的样式颜色</p>\n</li>\n<li><p>设置样式</p>\n<ul>\n<li><p>$(‘p’).css(‘color’, ‘red’);</p>\n</li>\n<li><p>$(‘p’).css({“fontSize”: “30px”, “backgroundColor”: “#888888”‘});</p>\n</li>\n<li><p>元素定位</p>\n<ul>\n<li>offset()，获取元素在当前视窗中的相对偏移。</li>\n<li>position() 获取元素相对于最近的一个position样式为relative或absolute（为啥）的父节点的相对偏移。</li>\n</ul>\n</li>\n<li>scrollLeft() 获取或设置水平滚动条的位置</li>\n<li>scrollRight() 获取或设置垂直滚动条的位置。</li>\n</ul>\n</li>\n</ul>\n","excerpt":"<h2 id=\"第三章-jQuery中的DOM操作\"><a href=\"#第三章-jQuery中的DOM操作\" class=\"headerlink\" title=\"第三章 jQuery中的DOM操作\"></a>第三章 jQuery中的DOM操作</h2><ul>\n<li><p>查找<code>DOM</code>节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'ul li:eq(1)'</span>); <span class=\"comment\">//获取&lt;ul&gt;里的第二个&lt;li&gt;节点</span></div></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<ul>\n<li><p>查找属性节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $para = $(<span class=\"string\">'p'</span>); </div><div class=\"line\"><span class=\"keyword\">var</span> p_txt = $para.attr(<span class=\"string\">'title'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<!--more-->\n<ul>\n<li><p>创建元素节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li&gt;&lt;/li&gt;'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建文本节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li&gt;香蕉&lt;/li&gt;'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建属性节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li title=\"香蕉\"&gt;香蕉&lt;/li&gt;'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>插入节点的方法<ul>\n<li>append 追加元素。$(‘p’).append($(“&lt;b&gt;你好&lt;/b&gt;”))，A.append(B)之后，A和B是父子关系。</li>\n<li>appendTo 跟append相反，A.append(B) 相当于 B.appendTo(A)</li>\n<li>prepend 插入到前面</li>\n<li>prependTo 跟prepend相反</li>\n<li>after 在每个匹配元素之后插入内容，A.after(B)之后，A与B是兄弟元素</li>\n<li>intertAfter跟after相反，A.after(B)相当于B.instertAfter(A)</li>\n<li>before，跟after相反</li>\n<li>insertBefore，A.before(B)相当于B.insertBefore(A)</li>\n<li>删除节点的方法</li>\n<li>remove 删除匹配的元素 $(‘ul li:eq(1)’).remove()，删除第二个li元素，remove返回值是删除的元素</li>\n<li>detach 与remove不同，detach会保留所有该元素绑定的事件，附加的数据等。</li>\n<li>empty 清空节点</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>复制节点 clone，可以传入一个boolean参数表示是否同时复制元素中所绑定的事件。</p>\n</li>\n<li><p>替换节点</p>\n<ul>\n<li>replaceWith， A.replaceWith(B)，用B替换A</li>\n<li>replaceAll 跟replaceWith相反，A.replaceWith(B)相当于B.replaceAll(A)</li>\n</ul>\n</li>\n<li><p>包裹节点</p>\n<ul>\n<li>wrap $(‘strong’).wrap(‘&lt;b&gt;&lt;/b&gt;’) 用&lt;b&gt;标签将&lt;strong&gt;标签包起来，如果有多个匹配，则每个元素单独包裹。</li>\n<li>wrapAll，将所有的元素用一个元素来包裹。如果匹配的节点之间有其他节点，其他节点会被放到包裹元素之后。</li>\n<li>wrapInner 将子内容（包括文本节点）包裹起来。</li>\n</ul>\n</li>\n<li><p>获取属性，$(‘p’).atter(‘title’)</p>\n</li>\n<li><p>设置属性</p>\n<ul>\n<li><p>$(‘p’).attr(‘title’, ‘your title’) 设置单个属性</p>\n</li>\n<li><p>$(‘p’).attr({‘title’, ‘your title’, ‘name’: ‘test’})，设置多个属性</p>\n</li>\n</ul>\n</li>\n<li><p>删除属性 $(‘p’).removeAttr(‘title’);</p>\n</li>\n<li><p>获取样式 $(‘p’).attr(‘class’)获取&lt;p&gt;元素的class</p>\n</li>\n<li><p>设置样式 $(‘p’).attr(‘class’, ‘high’) 设置样式</p>\n</li>\n<li><p>追加样式 $(‘p’).addClass(‘another’)</p>\n</li>\n<li><p>移除样式</p>\n<ul>\n<li><p>$(‘p’).removeClass(‘another’) 移除一个样式</p>\n</li>\n<li><p>$(‘p’).removeClass(‘another high’) 移除多个样式</p>\n</li>\n</ul>\n</li>\n<li><p>切换样式 $(‘p’).toggleClass(‘another’)，如果another类名不存在则添加之，否则删除之</p>\n</li>\n<li><p>判断是否含有某个样式 $(‘p’).hasClass(‘another’)</p>\n</li>\n<li>html()方法 获取或设置html内容，相当于javascript的innerHTML属性</li>\n<li><p>text() 获取或设置文本内容，相当于javascript的innerText属性</p>\n<ul>\n<li><p>获取: var text = $(‘p’).text()</p>\n</li>\n<li><p>设置 $(‘p’).text(‘你喜欢的水果是’)</p>\n</li>\n</ul>\n</li>\n<li><p>val()方法 获取或设置value，相当于javascript的value属性</p>\n</li>\n<li><p>遍历节点</p>\n<ul>\n<li>children() 返回子节点（DOM原声节点，非jQuery节点）</li>\n<li>next()方法，获取紧临的同辈元素，也就是返回下一个兄弟节点。</li>\n<li>prev()，跟next相反，返回上一个兄弟节点</li>\n<li>siblings()返回前后所有的同辈元素。</li>\n<li>closest() 取得最近的匹配元素，往父控件追溯。如$(e.target).closest(‘li’).css(‘color’, ‘red’);给点击的目标元素附近的li元素添加颜色。</li>\n<li>parents() 获得集合中每个匹配元素的祖先元素。</li>\n<li>parent() 获得集合中每个匹配元素的父级元素。</li>\n<li>find() / filter() / nextAll() / prevAll() 等。</li>\n</ul>\n</li>\n<li><p>获取样式 $(‘p’).css(‘color’) 获取&lt;p&gt;的样式颜色</p>\n</li>\n<li><p>设置样式</p>\n<ul>\n<li><p>$(‘p’).css(‘color’, ‘red’);</p>\n</li>\n<li><p>$(‘p’).css({“fontSize”: “30px”, “backgroundColor”: “#888888”‘});</p>\n</li>\n<li><p>元素定位</p>\n<ul>\n<li>offset()，获取元素在当前视窗中的相对偏移。</li>\n<li>position() 获取元素相对于最近的一个position样式为relative或absolute（为啥）的父节点的相对偏移。</li>\n</ul>\n</li>\n<li>scrollLeft() 获取或设置水平滚动条的位置</li>\n<li>scrollRight() 获取或设置垂直滚动条的位置。</li>\n</ul>\n</li>\n</ul>"},{"title":"CSS权威值南-笔记","date":"2016-09-06T10:04:19.000Z","_content":"\n## 第一章 css和文档\n\n-  文档内定义样式\n\n        <style type=\"text/css\">\n            @import url(sheet2.css)\n            h1 {color: maroon;}\n        </style>\n\n-   引入css文件\n\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"sheet1.css\" media=\"all\" />\n\n<!--more-->\n\n## 第二章 选择器\n\n- ID选择器和指定id的属性选择器不是一回事，h1#page-title和h1[id=\"page-title\"]之间有差别。\n- p.warning和p[class~=\"warning\"]是等价的，但是p[class=\"warning\"]匹配只有一个class的p元素。\n\n    - 类似的还有[foo^=\"bar\"] 选择foo属性值以bar开头的所有元素\n    - [foo$=\"bar\"] 选择foo属性值以bar结尾的所有元素\n    - [foo*=\"bar\"] 选择foo属性值中含有bar子串的所有元素\n\n- 后代选择器中，两个元素之间的层次间隔可以是无限的，如果想匹配直接相连的父子元素，可以使用子结合符\">\"\n\n- 兄弟元素选择器 h1 +  p {margin-top: 0}\n\n- 伪类选择器，伪类的顺序很重要 link-visited-focus-hover-active\n\n    - 连接伪类\n        - :link 未访问的超连接\n        - :visited  已访问的超连接\n\n    - 动态伪类\n        - :focus 拥有焦点的元素（可以接受键盘输入或者能已某种方式激活的元素）\n        - :hover 鼠标指针悬停的元素\n        - :active 用户输入激活的元素\n\n    - 静态伪类\n        - :first-child 第一个子元素\n        - :first-letter 第一个字母\n        - :first-line 第一行\n        - :lang(fr) 根据语言选择\n    - :first-letter和:first-line只能用于标记或段落之类的块元素，不能用于超连接等行内元素。\n\n## 第三章 结构和层叠\n\n- 选择器的特殊性\n\n    - 给定的各个ID属性值，加0，1，0，0\n\n    - 给形的各个类的属性值，属性选择或者伪类，加0，0，1，0\n\n    - 给定的各个元素和伪元素加0，0，0，1\n\n    - 结合符和通配选择器对特属性没有任何贡献\n\n- 样式继承\n\n    - 文本颜色可被继承\n    - border不能被继承，一般的大多数框模型属性不能被继承（包括外边框，内边距，背景和边框）\n\n    - 继承的值没有特殊性，连0特殊性都没有p(61)，因此需要避免不加区别的使用通配选择器。\n\n- 层叠权重大小顺序\n\n    - 读者的重要声明\n\n    - 创作人员的重要声明\n\n    - 创作人员的正常声明\n\n    - 读者的正常声明\n\n    - 用户代理声明\n\n## 第四章 值和单位\n\n- 颜色表示\n\n    - 命名颜色 {color: gray;}\n\n    - 函数式RGB {color: rgb(100%, 50%, 50%);}，或者{color: rgb(52, 95, 153);}\n\n    - 十六进制RGB {color: #ff0000;} 如果3组各自成对，可以简写#f00，相当于#ff0000\n- WEB安全颜色\n    - RGB百分表示法，能被20整除的颜色，如rgb(60, 40, 120)\n\n    - 十六进制，使用00，33，66，99，cc，ff，如#99ffcc\n\n- 长度单位\n\n    - 绝对长度单位 在打印文档的样式表时更为有用，Web设计中不使用绝对长度单位。\n\n        - 英寸 (in)\n\n        - 厘米(cm) 1in = 2.54cm\n\n        - 毫米(mm) 1in = 25.4mm\n\n        - 点(pt) 1in = 72pt\n\n        - 派卡(pc)  1pc = 12pt, 6pc = 1in\n\n    - 相对长度单位\n        - em (em-height) 1em定义未一种给定字体的font-size的值，随元素的不同而不同，国外最常用，也是未来的趋势，更容易适配移动端。\n        - ex (x-height) 1ex定位未一种给定字体的小写x的高度，不同字体ex的值不同。\n        - px像素\n\n## 第五章 字体\ncss定义了5中通用字体\n\n- Serif 成比例的有上下短线的字体\n- Sans-serif 成比例的，没有上下短线\n- Monospace 不成比例，通常用于模拟打字机打出的问题\n- Cursive  手写体\n- Fantasy 无法用任何特征来定义的字体\n\n特定字体：如Times，Verdana, Helvetica, Arial等，每一种特定的字体都会落入上述通用系列中。\n\n- font-family 如h1 {font-family: Georgia, serif}, Georgia是特定字体，serif是通用字体。\n- font-weight\n    - normal\n    - bold\n    - bolder\n    - lighter\n    - 100/200/300/400/500/600/700/800/900\n- font-size\n    - xx-small/x-small/small/medium/large/x-large/xx-large/smaller/larger\n    - &lt;length>/&lt;percentage>\n- font-style字体风格\n    - italic/oblique/normal/inherit\n- font-variant 字体变形\n    - small-caps 首字母大写\n    - normal\n    - inherit\n\n## 第六章 文本属性\n\n- text-indent 首行缩进\n    - &lt;length> 如：p {text-indent: 3em}\n    - &lt;percentag> 相对于父元素宽度\n    - inhert\n- text-align 水平对齐\n    - left\n    - right\n    - center\n    - justify 两端对齐，在打印领域很常见\n    - inherit\n- line-height 行高，定义了基线之间的距离，而不是字体大小，可以控制行间距。行间距=行高-字体大小\n    - &lt;length>\n    - &lt;percentage>\n    - &lt;number>\n    - normal\n    - inherit\n- vertical-align 行内元素和表单元格的垂直方向对齐\n    - base-line 基线对齐，元素的底端和副元素的基线对齐\n    - sub/super 上标/下标，相对于基线升高/降低\n    -  bottom 元素行内框的底端和行框的底端对齐\n    - text-bottom 元素行内框的底端和文本的底端对齐\n    - top 与bottom相反\n    - text-top 与text-bottom相反\n    - middle 居中对齐\n    - &lt;percentage>\n    - &lt;length>\n    - inherit\n- word-spacing 字间隔\n    - &lt;length>\n    - normal\n    - inherit\n- letter-spacing 字母间隔\n    - &lt;length>\n    - normal\n    - inherit\n- text-transform\n    - uppercase 全大写\n    - lowercase 全小写\n    - capitalize 单词首字母大写\n    - none\n    - inherit\n- text-decoration 文字效果\n    - none\n    - underline 下划线\n    - overline 上划线\n    - line-through 中划线\n    - blink\n    - inherit\n- text-shadow\n    - none\n\n    - 颜色值和三个长度值 text-shadow: silver 2px 2px 2px;\n- white-space\n    - normal 合并空白符，忽略换行符，允许自动换行。\n    - nowrap 合并空白符，忽略换行符号，不允许自动换行。\n    - pre 保留空白符号，保留换行符号，不允许自动换行。\n    - pre-wrap 保留空白符，保留换行符，允许自动换行。\n    - pre-line 合并空白符，保留换行符，允许自动换行。\n    - inherit\n- direction 文本方向\n    - ltr\n    - rtl\n    - inherit\n\n## 第七章 基本视觉格式化\n\n水平格式化\n七大水平属性\n\n- margin-left\n- border-left\n- padding-left\n- width\n- padding-right\n- border-right\n- maring-right\n\n这7个属性值加起来就是元素包含块的宽度，这往往是副元素的width值。\nwidth就是左内边距到右内边距的距离。\n这7个属性中，只有3个属性可以设置为auto: margin-left, width, margin-right，可以用auto弥补实际值和所需总和的差距。如果三个值都为非auto的某个值，这些格式化属性过分受限，此时会强制设置margin-right为auto.\n不止一个auto的情况：\n\n-  margin-left和margin-right为auto，此时元素居中，与text-align:center的区别，text-align只应用块级元素的内联内容，并不能使元素居中。\n- margin-left和width为auto，此时margin-left为0，width会填满剩余包块。\n- margin-right和width为auto，此时margin-right为0，width填满剩余包块。\n- margin-left和margin-right和width都为auto，此时margin-left和margin-right都为0,width会填满包块。这种情况和默认是相同的。\n\n水平外边距不会合并，父元素的内边距，边距和外边距可能影响子元素。\n\n负外边距\n   负外边距时，  会使得内容宽度超出包块，因为根据等式父包块width=7大水平之和，margin-left或margin-right为负时，width要增大。\n\n垂直格式化\n如果元素的内容的高度，大于元素框的高度，用户代理的具体行为将取决于overflow属性。\n垂直格式化的七大属性\n\n- margin-top\n- border-top\n- padding-top\n- height\n- padding-bottom\n- border-bottom\n- margin-bottom\n\n这7个属性值的值和必须等于含块的height，其中，3个值可以设置为auto，margin-top，height，margin-bottom，如果margin-top或margin-bottom设置为auto则自动计算0，这就是为什么不容易设置元素为垂直居中，这与水平时不一样的。对于定位元素，上下边距为auto时，处理不同。\n\n如果没有显式声明包含块的height，百分数高度为重置为auto，如果块级中场元素的height设置为auto，显示时的高度将恰好足以包含其内联内容。\n如果块级正常流元素高度设置为auto，而且只有块级子元素，其默认高度将是从最高块级子元素的外边框边界到最低块级子元素外边框边界之间的距离。\n不过，如果块级元素有padding或者border，则高度则是最高子元素的上外边距到其最低子元素的下外边距边界之间的距离。\n\n合并垂直外边距\n垂直合并只引用与外边距，不会应用于内边距和边框。\n负的下外边距会使段落看上去向下拉，负的上边会使段落看上去向上拉。\n\n## 第八章 内边距、边框和外边距\n\n- border-style\n    - none\n    - hidden\n    - dotted\n    - dashed\n    - solid\n    - double\n    - groove\n    - ridge\n    - inset\n    - outset\n\n- 设置多个边框样式 p.asize {boder-style:  solid dashed dotted solid;}\n- boder-top-style/boder-right-style/border-bottom-style/border-left-style 单独设置边框样式\n- border-width边框宽度\n    - thin\n    - medium\n    - thick\n    - &lt;length>\n- border-top-width/border-right-width/border-bottom-width/border-left-width单独设置宽度\n- boder-color边框颜色\n    - &lt;color>\n    - transparent 透明\n- border-top-color/border-right-color/border-bottom-color/border-left-color单独设置颜色\n- border-top/boder-right/border-bottom/border-left单独设置边框\n    - [&lt;border-width>] [&lt;border-style>][boder-color]\n- border 全局边框，应用到四条边\n    - [&lt;border-width>] [&lt;border-style>][boder-color]\n\n对于只包含文本的行，能改变行间距离的属性只有line-height, font-size和vertical-align。\n行内元素使用正左右外边距，可以多出来水平空间，负的左右外边距会使行内元素与其他内容重叠。\n行内元素的边框，不会改变行高。\n行内元素使用正的左右边框可以多出来水平空间。\n\n- padding 内边距\n    - &lt;length>\n    - &lt;percentage>\n\n行内非替换元素使用左右内边距时，可以多出来水平空间，而上下边距不会改变行高。\n可以想图像使用内边距,外边距，边框时，它可以改变行高，也可以水平方向留出距离。\n\n- background-color 背景元素\n    - &lt;color>\n    - transparent\n- background-image 如body {background-image: url(bg23.gif)}\n    - &lt;uri>\n    - none\n- background-repeat 有方向的重复\n    - repeat\n    - repeat-x\n    - repeat-y\n    - no-repeat\n- background-position 背景定位\n    - &lt;percentage>\n    - &lt;length>\n    - left/center/right/top/bottom\n\nbackground-position单个关键字等价\ncenter: cener center\ntop: top center或者center top\nbottom: bottom center或者center bottom\nleft: left center 或者center left\nright: right center 或者center right\n\n- background-attachment\n    - scroll 跟随文档滚动\n    - fixed 不跟随文档滚动\n\n- background 简写属性\n    - &lt;background-color> || &lt;background-image> || &lt;backgroud-repeat> || &lt;background-attachment> || &lt;background-position>\n\n## 第十章 浮动和定位\n\n- float\n    - left\n    - right\n    - none\n\n浮动元素会从文档的正常流中删除，它还是会影响布局。其他内容会环绕元素，浮动元素的外边距不会合并\n\n- position\n    - static 默认 块元素生成一个矩形框，行内元素创建一个或多个行框，置于父元素中\n    - relative 元素偏移某个距离，元素仍保持未定位前的形状，它原本占据的空间仍保留\n    - absolute 元素框从文档流中完全删除，并相对于其包含块定位。\n    - fixed 元素的表现类似于absolute，不过，其包含块是视窗本身。\n\n- 偏移属性，在position为relative,absolute和fixed时，可以设置偏移属性top right bottom left\n    - &lt;length>\n    - &lt;percentage>\n    - auto 初始值\n\n包含块\n\n根元素的包含块，由用户代理建立，即html元素或body元素\n对于一个非根元素，如果其position时relative或static，包含块则由最近的块级框，表单元格或行内块祖先框的内容边界构成。\n对于一个非根元素，如果其position时absolute，包含块则由最近的position值不是static的祖先元素。\n\n- overflow\n    - visible\n    - hidden\n    - scroll\n    - auto\n","source":"_posts/CSS-The-Definitive-Guide.md","raw":"---\ntitle: CSS权威值南-笔记\ndate: 2016-9-6 18:04:19\ntags: css\n---\n\n## 第一章 css和文档\n\n-  文档内定义样式\n\n        <style type=\"text/css\">\n            @import url(sheet2.css)\n            h1 {color: maroon;}\n        </style>\n\n-   引入css文件\n\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"sheet1.css\" media=\"all\" />\n\n<!--more-->\n\n## 第二章 选择器\n\n- ID选择器和指定id的属性选择器不是一回事，h1#page-title和h1[id=\"page-title\"]之间有差别。\n- p.warning和p[class~=\"warning\"]是等价的，但是p[class=\"warning\"]匹配只有一个class的p元素。\n\n    - 类似的还有[foo^=\"bar\"] 选择foo属性值以bar开头的所有元素\n    - [foo$=\"bar\"] 选择foo属性值以bar结尾的所有元素\n    - [foo*=\"bar\"] 选择foo属性值中含有bar子串的所有元素\n\n- 后代选择器中，两个元素之间的层次间隔可以是无限的，如果想匹配直接相连的父子元素，可以使用子结合符\">\"\n\n- 兄弟元素选择器 h1 +  p {margin-top: 0}\n\n- 伪类选择器，伪类的顺序很重要 link-visited-focus-hover-active\n\n    - 连接伪类\n        - :link 未访问的超连接\n        - :visited  已访问的超连接\n\n    - 动态伪类\n        - :focus 拥有焦点的元素（可以接受键盘输入或者能已某种方式激活的元素）\n        - :hover 鼠标指针悬停的元素\n        - :active 用户输入激活的元素\n\n    - 静态伪类\n        - :first-child 第一个子元素\n        - :first-letter 第一个字母\n        - :first-line 第一行\n        - :lang(fr) 根据语言选择\n    - :first-letter和:first-line只能用于标记或段落之类的块元素，不能用于超连接等行内元素。\n\n## 第三章 结构和层叠\n\n- 选择器的特殊性\n\n    - 给定的各个ID属性值，加0，1，0，0\n\n    - 给形的各个类的属性值，属性选择或者伪类，加0，0，1，0\n\n    - 给定的各个元素和伪元素加0，0，0，1\n\n    - 结合符和通配选择器对特属性没有任何贡献\n\n- 样式继承\n\n    - 文本颜色可被继承\n    - border不能被继承，一般的大多数框模型属性不能被继承（包括外边框，内边距，背景和边框）\n\n    - 继承的值没有特殊性，连0特殊性都没有p(61)，因此需要避免不加区别的使用通配选择器。\n\n- 层叠权重大小顺序\n\n    - 读者的重要声明\n\n    - 创作人员的重要声明\n\n    - 创作人员的正常声明\n\n    - 读者的正常声明\n\n    - 用户代理声明\n\n## 第四章 值和单位\n\n- 颜色表示\n\n    - 命名颜色 {color: gray;}\n\n    - 函数式RGB {color: rgb(100%, 50%, 50%);}，或者{color: rgb(52, 95, 153);}\n\n    - 十六进制RGB {color: #ff0000;} 如果3组各自成对，可以简写#f00，相当于#ff0000\n- WEB安全颜色\n    - RGB百分表示法，能被20整除的颜色，如rgb(60, 40, 120)\n\n    - 十六进制，使用00，33，66，99，cc，ff，如#99ffcc\n\n- 长度单位\n\n    - 绝对长度单位 在打印文档的样式表时更为有用，Web设计中不使用绝对长度单位。\n\n        - 英寸 (in)\n\n        - 厘米(cm) 1in = 2.54cm\n\n        - 毫米(mm) 1in = 25.4mm\n\n        - 点(pt) 1in = 72pt\n\n        - 派卡(pc)  1pc = 12pt, 6pc = 1in\n\n    - 相对长度单位\n        - em (em-height) 1em定义未一种给定字体的font-size的值，随元素的不同而不同，国外最常用，也是未来的趋势，更容易适配移动端。\n        - ex (x-height) 1ex定位未一种给定字体的小写x的高度，不同字体ex的值不同。\n        - px像素\n\n## 第五章 字体\ncss定义了5中通用字体\n\n- Serif 成比例的有上下短线的字体\n- Sans-serif 成比例的，没有上下短线\n- Monospace 不成比例，通常用于模拟打字机打出的问题\n- Cursive  手写体\n- Fantasy 无法用任何特征来定义的字体\n\n特定字体：如Times，Verdana, Helvetica, Arial等，每一种特定的字体都会落入上述通用系列中。\n\n- font-family 如h1 {font-family: Georgia, serif}, Georgia是特定字体，serif是通用字体。\n- font-weight\n    - normal\n    - bold\n    - bolder\n    - lighter\n    - 100/200/300/400/500/600/700/800/900\n- font-size\n    - xx-small/x-small/small/medium/large/x-large/xx-large/smaller/larger\n    - &lt;length>/&lt;percentage>\n- font-style字体风格\n    - italic/oblique/normal/inherit\n- font-variant 字体变形\n    - small-caps 首字母大写\n    - normal\n    - inherit\n\n## 第六章 文本属性\n\n- text-indent 首行缩进\n    - &lt;length> 如：p {text-indent: 3em}\n    - &lt;percentag> 相对于父元素宽度\n    - inhert\n- text-align 水平对齐\n    - left\n    - right\n    - center\n    - justify 两端对齐，在打印领域很常见\n    - inherit\n- line-height 行高，定义了基线之间的距离，而不是字体大小，可以控制行间距。行间距=行高-字体大小\n    - &lt;length>\n    - &lt;percentage>\n    - &lt;number>\n    - normal\n    - inherit\n- vertical-align 行内元素和表单元格的垂直方向对齐\n    - base-line 基线对齐，元素的底端和副元素的基线对齐\n    - sub/super 上标/下标，相对于基线升高/降低\n    -  bottom 元素行内框的底端和行框的底端对齐\n    - text-bottom 元素行内框的底端和文本的底端对齐\n    - top 与bottom相反\n    - text-top 与text-bottom相反\n    - middle 居中对齐\n    - &lt;percentage>\n    - &lt;length>\n    - inherit\n- word-spacing 字间隔\n    - &lt;length>\n    - normal\n    - inherit\n- letter-spacing 字母间隔\n    - &lt;length>\n    - normal\n    - inherit\n- text-transform\n    - uppercase 全大写\n    - lowercase 全小写\n    - capitalize 单词首字母大写\n    - none\n    - inherit\n- text-decoration 文字效果\n    - none\n    - underline 下划线\n    - overline 上划线\n    - line-through 中划线\n    - blink\n    - inherit\n- text-shadow\n    - none\n\n    - 颜色值和三个长度值 text-shadow: silver 2px 2px 2px;\n- white-space\n    - normal 合并空白符，忽略换行符，允许自动换行。\n    - nowrap 合并空白符，忽略换行符号，不允许自动换行。\n    - pre 保留空白符号，保留换行符号，不允许自动换行。\n    - pre-wrap 保留空白符，保留换行符，允许自动换行。\n    - pre-line 合并空白符，保留换行符，允许自动换行。\n    - inherit\n- direction 文本方向\n    - ltr\n    - rtl\n    - inherit\n\n## 第七章 基本视觉格式化\n\n水平格式化\n七大水平属性\n\n- margin-left\n- border-left\n- padding-left\n- width\n- padding-right\n- border-right\n- maring-right\n\n这7个属性值加起来就是元素包含块的宽度，这往往是副元素的width值。\nwidth就是左内边距到右内边距的距离。\n这7个属性中，只有3个属性可以设置为auto: margin-left, width, margin-right，可以用auto弥补实际值和所需总和的差距。如果三个值都为非auto的某个值，这些格式化属性过分受限，此时会强制设置margin-right为auto.\n不止一个auto的情况：\n\n-  margin-left和margin-right为auto，此时元素居中，与text-align:center的区别，text-align只应用块级元素的内联内容，并不能使元素居中。\n- margin-left和width为auto，此时margin-left为0，width会填满剩余包块。\n- margin-right和width为auto，此时margin-right为0，width填满剩余包块。\n- margin-left和margin-right和width都为auto，此时margin-left和margin-right都为0,width会填满包块。这种情况和默认是相同的。\n\n水平外边距不会合并，父元素的内边距，边距和外边距可能影响子元素。\n\n负外边距\n   负外边距时，  会使得内容宽度超出包块，因为根据等式父包块width=7大水平之和，margin-left或margin-right为负时，width要增大。\n\n垂直格式化\n如果元素的内容的高度，大于元素框的高度，用户代理的具体行为将取决于overflow属性。\n垂直格式化的七大属性\n\n- margin-top\n- border-top\n- padding-top\n- height\n- padding-bottom\n- border-bottom\n- margin-bottom\n\n这7个属性值的值和必须等于含块的height，其中，3个值可以设置为auto，margin-top，height，margin-bottom，如果margin-top或margin-bottom设置为auto则自动计算0，这就是为什么不容易设置元素为垂直居中，这与水平时不一样的。对于定位元素，上下边距为auto时，处理不同。\n\n如果没有显式声明包含块的height，百分数高度为重置为auto，如果块级中场元素的height设置为auto，显示时的高度将恰好足以包含其内联内容。\n如果块级正常流元素高度设置为auto，而且只有块级子元素，其默认高度将是从最高块级子元素的外边框边界到最低块级子元素外边框边界之间的距离。\n不过，如果块级元素有padding或者border，则高度则是最高子元素的上外边距到其最低子元素的下外边距边界之间的距离。\n\n合并垂直外边距\n垂直合并只引用与外边距，不会应用于内边距和边框。\n负的下外边距会使段落看上去向下拉，负的上边会使段落看上去向上拉。\n\n## 第八章 内边距、边框和外边距\n\n- border-style\n    - none\n    - hidden\n    - dotted\n    - dashed\n    - solid\n    - double\n    - groove\n    - ridge\n    - inset\n    - outset\n\n- 设置多个边框样式 p.asize {boder-style:  solid dashed dotted solid;}\n- boder-top-style/boder-right-style/border-bottom-style/border-left-style 单独设置边框样式\n- border-width边框宽度\n    - thin\n    - medium\n    - thick\n    - &lt;length>\n- border-top-width/border-right-width/border-bottom-width/border-left-width单独设置宽度\n- boder-color边框颜色\n    - &lt;color>\n    - transparent 透明\n- border-top-color/border-right-color/border-bottom-color/border-left-color单独设置颜色\n- border-top/boder-right/border-bottom/border-left单独设置边框\n    - [&lt;border-width>] [&lt;border-style>][boder-color]\n- border 全局边框，应用到四条边\n    - [&lt;border-width>] [&lt;border-style>][boder-color]\n\n对于只包含文本的行，能改变行间距离的属性只有line-height, font-size和vertical-align。\n行内元素使用正左右外边距，可以多出来水平空间，负的左右外边距会使行内元素与其他内容重叠。\n行内元素的边框，不会改变行高。\n行内元素使用正的左右边框可以多出来水平空间。\n\n- padding 内边距\n    - &lt;length>\n    - &lt;percentage>\n\n行内非替换元素使用左右内边距时，可以多出来水平空间，而上下边距不会改变行高。\n可以想图像使用内边距,外边距，边框时，它可以改变行高，也可以水平方向留出距离。\n\n- background-color 背景元素\n    - &lt;color>\n    - transparent\n- background-image 如body {background-image: url(bg23.gif)}\n    - &lt;uri>\n    - none\n- background-repeat 有方向的重复\n    - repeat\n    - repeat-x\n    - repeat-y\n    - no-repeat\n- background-position 背景定位\n    - &lt;percentage>\n    - &lt;length>\n    - left/center/right/top/bottom\n\nbackground-position单个关键字等价\ncenter: cener center\ntop: top center或者center top\nbottom: bottom center或者center bottom\nleft: left center 或者center left\nright: right center 或者center right\n\n- background-attachment\n    - scroll 跟随文档滚动\n    - fixed 不跟随文档滚动\n\n- background 简写属性\n    - &lt;background-color> || &lt;background-image> || &lt;backgroud-repeat> || &lt;background-attachment> || &lt;background-position>\n\n## 第十章 浮动和定位\n\n- float\n    - left\n    - right\n    - none\n\n浮动元素会从文档的正常流中删除，它还是会影响布局。其他内容会环绕元素，浮动元素的外边距不会合并\n\n- position\n    - static 默认 块元素生成一个矩形框，行内元素创建一个或多个行框，置于父元素中\n    - relative 元素偏移某个距离，元素仍保持未定位前的形状，它原本占据的空间仍保留\n    - absolute 元素框从文档流中完全删除，并相对于其包含块定位。\n    - fixed 元素的表现类似于absolute，不过，其包含块是视窗本身。\n\n- 偏移属性，在position为relative,absolute和fixed时，可以设置偏移属性top right bottom left\n    - &lt;length>\n    - &lt;percentage>\n    - auto 初始值\n\n包含块\n\n根元素的包含块，由用户代理建立，即html元素或body元素\n对于一个非根元素，如果其position时relative或static，包含块则由最近的块级框，表单元格或行内块祖先框的内容边界构成。\n对于一个非根元素，如果其position时absolute，包含块则由最近的position值不是static的祖先元素。\n\n- overflow\n    - visible\n    - hidden\n    - scroll\n    - auto\n","slug":"CSS-The-Definitive-Guide","published":1,"updated":"2016-11-15T10:09:13.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw7pnwsb00053opqjjndjxvi","content":"<h2 id=\"第一章-css和文档\"><a href=\"#第一章-css和文档\" class=\"headerlink\" title=\"第一章 css和文档\"></a>第一章 css和文档</h2><ul>\n<li><p>文档内定义样式</p>\n<pre><code>&lt;style type=&quot;text/css&quot;&gt;\n    @import url(sheet2.css)\n    h1 {color: maroon;}\n&lt;/style&gt;\n</code></pre></li>\n<li><p>引入css文件</p>\n<pre><code>&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;sheet1.css&quot; media=&quot;all&quot; /&gt;\n</code></pre></li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"第二章-选择器\"><a href=\"#第二章-选择器\" class=\"headerlink\" title=\"第二章 选择器\"></a>第二章 选择器</h2><ul>\n<li>ID选择器和指定id的属性选择器不是一回事，h1#page-title和h1[id=”page-title”]之间有差别。</li>\n<li><p>p.warning和p[class~=”warning”]是等价的，但是p[class=”warning”]匹配只有一个class的p元素。</p>\n<ul>\n<li>类似的还有[foo^=”bar”] 选择foo属性值以bar开头的所有元素</li>\n<li>[foo$=”bar”] 选择foo属性值以bar结尾的所有元素</li>\n<li>[foo*=”bar”] 选择foo属性值中含有bar子串的所有元素</li>\n</ul>\n</li>\n<li><p>后代选择器中，两个元素之间的层次间隔可以是无限的，如果想匹配直接相连的父子元素，可以使用子结合符”&gt;”</p>\n</li>\n<li><p>兄弟元素选择器 h1 +  p {margin-top: 0}</p>\n</li>\n<li><p>伪类选择器，伪类的顺序很重要 link-visited-focus-hover-active</p>\n<ul>\n<li><p>连接伪类</p>\n<ul>\n<li>:link 未访问的超连接</li>\n<li>:visited  已访问的超连接</li>\n</ul>\n</li>\n<li><p>动态伪类</p>\n<ul>\n<li>:focus 拥有焦点的元素（可以接受键盘输入或者能已某种方式激活的元素）</li>\n<li>:hover 鼠标指针悬停的元素</li>\n<li>:active 用户输入激活的元素</li>\n</ul>\n</li>\n<li><p>静态伪类</p>\n<ul>\n<li>:first-child 第一个子元素</li>\n<li>:first-letter 第一个字母</li>\n<li>:first-line 第一行</li>\n<li>:lang(fr) 根据语言选择</li>\n</ul>\n</li>\n<li>:first-letter和:first-line只能用于标记或段落之类的块元素，不能用于超连接等行内元素。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三章-结构和层叠\"><a href=\"#第三章-结构和层叠\" class=\"headerlink\" title=\"第三章 结构和层叠\"></a>第三章 结构和层叠</h2><ul>\n<li><p>选择器的特殊性</p>\n<ul>\n<li><p>给定的各个ID属性值，加0，1，0，0</p>\n</li>\n<li><p>给形的各个类的属性值，属性选择或者伪类，加0，0，1，0</p>\n</li>\n<li><p>给定的各个元素和伪元素加0，0，0，1</p>\n</li>\n<li><p>结合符和通配选择器对特属性没有任何贡献</p>\n</li>\n</ul>\n</li>\n<li><p>样式继承</p>\n<ul>\n<li>文本颜色可被继承</li>\n<li><p>border不能被继承，一般的大多数框模型属性不能被继承（包括外边框，内边距，背景和边框）</p>\n</li>\n<li><p>继承的值没有特殊性，连0特殊性都没有p(61)，因此需要避免不加区别的使用通配选择器。</p>\n</li>\n</ul>\n</li>\n<li><p>层叠权重大小顺序</p>\n<ul>\n<li><p>读者的重要声明</p>\n</li>\n<li><p>创作人员的重要声明</p>\n</li>\n<li><p>创作人员的正常声明</p>\n</li>\n<li><p>读者的正常声明</p>\n</li>\n<li><p>用户代理声明</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第四章-值和单位\"><a href=\"#第四章-值和单位\" class=\"headerlink\" title=\"第四章 值和单位\"></a>第四章 值和单位</h2><ul>\n<li><p>颜色表示</p>\n<ul>\n<li><p>命名颜色 {color: gray;}</p>\n</li>\n<li><p>函数式RGB {color: rgb(100%, 50%, 50%);}，或者{color: rgb(52, 95, 153);}</p>\n</li>\n<li><p>十六进制RGB {color: #ff0000;} 如果3组各自成对，可以简写#f00，相当于#ff0000</p>\n</li>\n</ul>\n</li>\n<li><p>WEB安全颜色</p>\n<ul>\n<li><p>RGB百分表示法，能被20整除的颜色，如rgb(60, 40, 120)</p>\n</li>\n<li><p>十六进制，使用00，33，66，99，cc，ff，如#99ffcc</p>\n</li>\n</ul>\n</li>\n<li><p>长度单位</p>\n<ul>\n<li><p>绝对长度单位 在打印文档的样式表时更为有用，Web设计中不使用绝对长度单位。</p>\n<ul>\n<li><p>英寸 (in)</p>\n</li>\n<li><p>厘米(cm) 1in = 2.54cm</p>\n</li>\n<li><p>毫米(mm) 1in = 25.4mm</p>\n</li>\n<li><p>点(pt) 1in = 72pt</p>\n</li>\n<li><p>派卡(pc)  1pc = 12pt, 6pc = 1in</p>\n</li>\n</ul>\n</li>\n<li><p>相对长度单位</p>\n<ul>\n<li>em (em-height) 1em定义未一种给定字体的font-size的值，随元素的不同而不同，国外最常用，也是未来的趋势，更容易适配移动端。</li>\n<li>ex (x-height) 1ex定位未一种给定字体的小写x的高度，不同字体ex的值不同。</li>\n<li>px像素</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第五章-字体\"><a href=\"#第五章-字体\" class=\"headerlink\" title=\"第五章 字体\"></a>第五章 字体</h2><p>css定义了5中通用字体</p>\n<ul>\n<li>Serif 成比例的有上下短线的字体</li>\n<li>Sans-serif 成比例的，没有上下短线</li>\n<li>Monospace 不成比例，通常用于模拟打字机打出的问题</li>\n<li>Cursive  手写体</li>\n<li>Fantasy 无法用任何特征来定义的字体</li>\n</ul>\n<p>特定字体：如Times，Verdana, Helvetica, Arial等，每一种特定的字体都会落入上述通用系列中。</p>\n<ul>\n<li>font-family 如h1 {font-family: Georgia, serif}, Georgia是特定字体，serif是通用字体。</li>\n<li>font-weight<ul>\n<li>normal</li>\n<li>bold</li>\n<li>bolder</li>\n<li>lighter</li>\n<li>100/200/300/400/500/600/700/800/900</li>\n</ul>\n</li>\n<li>font-size<ul>\n<li>xx-small/x-small/small/medium/large/x-large/xx-large/smaller/larger</li>\n<li>&lt;length&gt;/&lt;percentage&gt;</li>\n</ul>\n</li>\n<li>font-style字体风格<ul>\n<li>italic/oblique/normal/inherit</li>\n</ul>\n</li>\n<li>font-variant 字体变形<ul>\n<li>small-caps 首字母大写</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第六章-文本属性\"><a href=\"#第六章-文本属性\" class=\"headerlink\" title=\"第六章 文本属性\"></a>第六章 文本属性</h2><ul>\n<li>text-indent 首行缩进<ul>\n<li>&lt;length&gt; 如：p {text-indent: 3em}</li>\n<li>&lt;percentag&gt; 相对于父元素宽度</li>\n<li>inhert</li>\n</ul>\n</li>\n<li>text-align 水平对齐<ul>\n<li>left</li>\n<li>right</li>\n<li>center</li>\n<li>justify 两端对齐，在打印领域很常见</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>line-height 行高，定义了基线之间的距离，而不是字体大小，可以控制行间距。行间距=行高-字体大小<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n<li>&lt;number&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>vertical-align 行内元素和表单元格的垂直方向对齐<ul>\n<li>base-line 基线对齐，元素的底端和副元素的基线对齐</li>\n<li>sub/super 上标/下标，相对于基线升高/降低</li>\n<li>bottom 元素行内框的底端和行框的底端对齐</li>\n<li>text-bottom 元素行内框的底端和文本的底端对齐</li>\n<li>top 与bottom相反</li>\n<li>text-top 与text-bottom相反</li>\n<li>middle 居中对齐</li>\n<li>&lt;percentage&gt;</li>\n<li>&lt;length&gt;</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>word-spacing 字间隔<ul>\n<li>&lt;length&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>letter-spacing 字母间隔<ul>\n<li>&lt;length&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>text-transform<ul>\n<li>uppercase 全大写</li>\n<li>lowercase 全小写</li>\n<li>capitalize 单词首字母大写</li>\n<li>none</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>text-decoration 文字效果<ul>\n<li>none</li>\n<li>underline 下划线</li>\n<li>overline 上划线</li>\n<li>line-through 中划线</li>\n<li>blink</li>\n<li>inherit</li>\n</ul>\n</li>\n<li><p>text-shadow</p>\n<ul>\n<li><p>none</p>\n</li>\n<li><p>颜色值和三个长度值 text-shadow: silver 2px 2px 2px;</p>\n</li>\n</ul>\n</li>\n<li>white-space<ul>\n<li>normal 合并空白符，忽略换行符，允许自动换行。</li>\n<li>nowrap 合并空白符，忽略换行符号，不允许自动换行。</li>\n<li>pre 保留空白符号，保留换行符号，不允许自动换行。</li>\n<li>pre-wrap 保留空白符，保留换行符，允许自动换行。</li>\n<li>pre-line 合并空白符，保留换行符，允许自动换行。</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>direction 文本方向<ul>\n<li>ltr</li>\n<li>rtl</li>\n<li>inherit</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第七章-基本视觉格式化\"><a href=\"#第七章-基本视觉格式化\" class=\"headerlink\" title=\"第七章 基本视觉格式化\"></a>第七章 基本视觉格式化</h2><p>水平格式化<br>七大水平属性</p>\n<ul>\n<li>margin-left</li>\n<li>border-left</li>\n<li>padding-left</li>\n<li>width</li>\n<li>padding-right</li>\n<li>border-right</li>\n<li>maring-right</li>\n</ul>\n<p>这7个属性值加起来就是元素包含块的宽度，这往往是副元素的width值。<br>width就是左内边距到右内边距的距离。<br>这7个属性中，只有3个属性可以设置为auto: margin-left, width, margin-right，可以用auto弥补实际值和所需总和的差距。如果三个值都为非auto的某个值，这些格式化属性过分受限，此时会强制设置margin-right为auto.<br>不止一个auto的情况：</p>\n<ul>\n<li>margin-left和margin-right为auto，此时元素居中，与text-align:center的区别，text-align只应用块级元素的内联内容，并不能使元素居中。</li>\n<li>margin-left和width为auto，此时margin-left为0，width会填满剩余包块。</li>\n<li>margin-right和width为auto，此时margin-right为0，width填满剩余包块。</li>\n<li>margin-left和margin-right和width都为auto，此时margin-left和margin-right都为0,width会填满包块。这种情况和默认是相同的。</li>\n</ul>\n<p>水平外边距不会合并，父元素的内边距，边距和外边距可能影响子元素。</p>\n<p>负外边距<br>   负外边距时，  会使得内容宽度超出包块，因为根据等式父包块width=7大水平之和，margin-left或margin-right为负时，width要增大。</p>\n<p>垂直格式化<br>如果元素的内容的高度，大于元素框的高度，用户代理的具体行为将取决于overflow属性。<br>垂直格式化的七大属性</p>\n<ul>\n<li>margin-top</li>\n<li>border-top</li>\n<li>padding-top</li>\n<li>height</li>\n<li>padding-bottom</li>\n<li>border-bottom</li>\n<li>margin-bottom</li>\n</ul>\n<p>这7个属性值的值和必须等于含块的height，其中，3个值可以设置为auto，margin-top，height，margin-bottom，如果margin-top或margin-bottom设置为auto则自动计算0，这就是为什么不容易设置元素为垂直居中，这与水平时不一样的。对于定位元素，上下边距为auto时，处理不同。</p>\n<p>如果没有显式声明包含块的height，百分数高度为重置为auto，如果块级中场元素的height设置为auto，显示时的高度将恰好足以包含其内联内容。<br>如果块级正常流元素高度设置为auto，而且只有块级子元素，其默认高度将是从最高块级子元素的外边框边界到最低块级子元素外边框边界之间的距离。<br>不过，如果块级元素有padding或者border，则高度则是最高子元素的上外边距到其最低子元素的下外边距边界之间的距离。</p>\n<p>合并垂直外边距<br>垂直合并只引用与外边距，不会应用于内边距和边框。<br>负的下外边距会使段落看上去向下拉，负的上边会使段落看上去向上拉。</p>\n<h2 id=\"第八章-内边距、边框和外边距\"><a href=\"#第八章-内边距、边框和外边距\" class=\"headerlink\" title=\"第八章 内边距、边框和外边距\"></a>第八章 内边距、边框和外边距</h2><ul>\n<li><p>border-style</p>\n<ul>\n<li>none</li>\n<li>hidden</li>\n<li>dotted</li>\n<li>dashed</li>\n<li>solid</li>\n<li>double</li>\n<li>groove</li>\n<li>ridge</li>\n<li>inset</li>\n<li>outset</li>\n</ul>\n</li>\n<li><p>设置多个边框样式 p.asize {boder-style:  solid dashed dotted solid;}</p>\n</li>\n<li>boder-top-style/boder-right-style/border-bottom-style/border-left-style 单独设置边框样式</li>\n<li>border-width边框宽度<ul>\n<li>thin</li>\n<li>medium</li>\n<li>thick</li>\n<li>&lt;length&gt;</li>\n</ul>\n</li>\n<li>border-top-width/border-right-width/border-bottom-width/border-left-width单独设置宽度</li>\n<li>boder-color边框颜色<ul>\n<li>&lt;color&gt;</li>\n<li>transparent 透明</li>\n</ul>\n</li>\n<li>border-top-color/border-right-color/border-bottom-color/border-left-color单独设置颜色</li>\n<li>border-top/boder-right/border-bottom/border-left单独设置边框<ul>\n<li>[&lt;border-width&gt;] [&lt;border-style&gt;][boder-color]</li>\n</ul>\n</li>\n<li>border 全局边框，应用到四条边<ul>\n<li>[&lt;border-width&gt;] [&lt;border-style&gt;][boder-color]</li>\n</ul>\n</li>\n</ul>\n<p>对于只包含文本的行，能改变行间距离的属性只有line-height, font-size和vertical-align。<br>行内元素使用正左右外边距，可以多出来水平空间，负的左右外边距会使行内元素与其他内容重叠。<br>行内元素的边框，不会改变行高。<br>行内元素使用正的左右边框可以多出来水平空间。</p>\n<ul>\n<li>padding 内边距<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n</ul>\n</li>\n</ul>\n<p>行内非替换元素使用左右内边距时，可以多出来水平空间，而上下边距不会改变行高。<br>可以想图像使用内边距,外边距，边框时，它可以改变行高，也可以水平方向留出距离。</p>\n<ul>\n<li>background-color 背景元素<ul>\n<li>&lt;color&gt;</li>\n<li>transparent</li>\n</ul>\n</li>\n<li>background-image 如body {background-image: url(bg23.gif)}<ul>\n<li>&lt;uri&gt;</li>\n<li>none</li>\n</ul>\n</li>\n<li>background-repeat 有方向的重复<ul>\n<li>repeat</li>\n<li>repeat-x</li>\n<li>repeat-y</li>\n<li>no-repeat</li>\n</ul>\n</li>\n<li>background-position 背景定位<ul>\n<li>&lt;percentage&gt;</li>\n<li>&lt;length&gt;</li>\n<li>left/center/right/top/bottom</li>\n</ul>\n</li>\n</ul>\n<p>background-position单个关键字等价<br>center: cener center<br>top: top center或者center top<br>bottom: bottom center或者center bottom<br>left: left center 或者center left<br>right: right center 或者center right</p>\n<ul>\n<li><p>background-attachment</p>\n<ul>\n<li>scroll 跟随文档滚动</li>\n<li>fixed 不跟随文档滚动</li>\n</ul>\n</li>\n<li><p>background 简写属性</p>\n<ul>\n<li>&lt;background-color&gt; || &lt;background-image&gt; || &lt;backgroud-repeat&gt; || &lt;background-attachment&gt; || &lt;background-position&gt;</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第十章-浮动和定位\"><a href=\"#第十章-浮动和定位\" class=\"headerlink\" title=\"第十章 浮动和定位\"></a>第十章 浮动和定位</h2><ul>\n<li>float<ul>\n<li>left</li>\n<li>right</li>\n<li>none</li>\n</ul>\n</li>\n</ul>\n<p>浮动元素会从文档的正常流中删除，它还是会影响布局。其他内容会环绕元素，浮动元素的外边距不会合并</p>\n<ul>\n<li><p>position</p>\n<ul>\n<li>static 默认 块元素生成一个矩形框，行内元素创建一个或多个行框，置于父元素中</li>\n<li>relative 元素偏移某个距离，元素仍保持未定位前的形状，它原本占据的空间仍保留</li>\n<li>absolute 元素框从文档流中完全删除，并相对于其包含块定位。</li>\n<li>fixed 元素的表现类似于absolute，不过，其包含块是视窗本身。</li>\n</ul>\n</li>\n<li><p>偏移属性，在position为relative,absolute和fixed时，可以设置偏移属性top right bottom left</p>\n<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n<li>auto 初始值</li>\n</ul>\n</li>\n</ul>\n<p>包含块</p>\n<p>根元素的包含块，由用户代理建立，即html元素或body元素<br>对于一个非根元素，如果其position时relative或static，包含块则由最近的块级框，表单元格或行内块祖先框的内容边界构成。<br>对于一个非根元素，如果其position时absolute，包含块则由最近的position值不是static的祖先元素。</p>\n<ul>\n<li>overflow<ul>\n<li>visible</li>\n<li>hidden</li>\n<li>scroll</li>\n<li>auto</li>\n</ul>\n</li>\n</ul>\n","excerpt":"<h2 id=\"第一章-css和文档\"><a href=\"#第一章-css和文档\" class=\"headerlink\" title=\"第一章 css和文档\"></a>第一章 css和文档</h2><ul>\n<li><p>文档内定义样式</p>\n<pre><code>&lt;style type=&quot;text/css&quot;&gt;\n    @import url(sheet2.css)\n    h1 {color: maroon;}\n&lt;/style&gt;\n</code></pre></li>\n<li><p>引入css文件</p>\n<pre><code>&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;sheet1.css&quot; media=&quot;all&quot; /&gt;\n</code></pre></li>\n</ul>","more":"<h2 id=\"第二章-选择器\"><a href=\"#第二章-选择器\" class=\"headerlink\" title=\"第二章 选择器\"></a>第二章 选择器</h2><ul>\n<li>ID选择器和指定id的属性选择器不是一回事，h1#page-title和h1[id=”page-title”]之间有差别。</li>\n<li><p>p.warning和p[class~=”warning”]是等价的，但是p[class=”warning”]匹配只有一个class的p元素。</p>\n<ul>\n<li>类似的还有[foo^=”bar”] 选择foo属性值以bar开头的所有元素</li>\n<li>[foo$=”bar”] 选择foo属性值以bar结尾的所有元素</li>\n<li>[foo*=”bar”] 选择foo属性值中含有bar子串的所有元素</li>\n</ul>\n</li>\n<li><p>后代选择器中，两个元素之间的层次间隔可以是无限的，如果想匹配直接相连的父子元素，可以使用子结合符”&gt;”</p>\n</li>\n<li><p>兄弟元素选择器 h1 +  p {margin-top: 0}</p>\n</li>\n<li><p>伪类选择器，伪类的顺序很重要 link-visited-focus-hover-active</p>\n<ul>\n<li><p>连接伪类</p>\n<ul>\n<li>:link 未访问的超连接</li>\n<li>:visited  已访问的超连接</li>\n</ul>\n</li>\n<li><p>动态伪类</p>\n<ul>\n<li>:focus 拥有焦点的元素（可以接受键盘输入或者能已某种方式激活的元素）</li>\n<li>:hover 鼠标指针悬停的元素</li>\n<li>:active 用户输入激活的元素</li>\n</ul>\n</li>\n<li><p>静态伪类</p>\n<ul>\n<li>:first-child 第一个子元素</li>\n<li>:first-letter 第一个字母</li>\n<li>:first-line 第一行</li>\n<li>:lang(fr) 根据语言选择</li>\n</ul>\n</li>\n<li>:first-letter和:first-line只能用于标记或段落之类的块元素，不能用于超连接等行内元素。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三章-结构和层叠\"><a href=\"#第三章-结构和层叠\" class=\"headerlink\" title=\"第三章 结构和层叠\"></a>第三章 结构和层叠</h2><ul>\n<li><p>选择器的特殊性</p>\n<ul>\n<li><p>给定的各个ID属性值，加0，1，0，0</p>\n</li>\n<li><p>给形的各个类的属性值，属性选择或者伪类，加0，0，1，0</p>\n</li>\n<li><p>给定的各个元素和伪元素加0，0，0，1</p>\n</li>\n<li><p>结合符和通配选择器对特属性没有任何贡献</p>\n</li>\n</ul>\n</li>\n<li><p>样式继承</p>\n<ul>\n<li>文本颜色可被继承</li>\n<li><p>border不能被继承，一般的大多数框模型属性不能被继承（包括外边框，内边距，背景和边框）</p>\n</li>\n<li><p>继承的值没有特殊性，连0特殊性都没有p(61)，因此需要避免不加区别的使用通配选择器。</p>\n</li>\n</ul>\n</li>\n<li><p>层叠权重大小顺序</p>\n<ul>\n<li><p>读者的重要声明</p>\n</li>\n<li><p>创作人员的重要声明</p>\n</li>\n<li><p>创作人员的正常声明</p>\n</li>\n<li><p>读者的正常声明</p>\n</li>\n<li><p>用户代理声明</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第四章-值和单位\"><a href=\"#第四章-值和单位\" class=\"headerlink\" title=\"第四章 值和单位\"></a>第四章 值和单位</h2><ul>\n<li><p>颜色表示</p>\n<ul>\n<li><p>命名颜色 {color: gray;}</p>\n</li>\n<li><p>函数式RGB {color: rgb(100%, 50%, 50%);}，或者{color: rgb(52, 95, 153);}</p>\n</li>\n<li><p>十六进制RGB {color: #ff0000;} 如果3组各自成对，可以简写#f00，相当于#ff0000</p>\n</li>\n</ul>\n</li>\n<li><p>WEB安全颜色</p>\n<ul>\n<li><p>RGB百分表示法，能被20整除的颜色，如rgb(60, 40, 120)</p>\n</li>\n<li><p>十六进制，使用00，33，66，99，cc，ff，如#99ffcc</p>\n</li>\n</ul>\n</li>\n<li><p>长度单位</p>\n<ul>\n<li><p>绝对长度单位 在打印文档的样式表时更为有用，Web设计中不使用绝对长度单位。</p>\n<ul>\n<li><p>英寸 (in)</p>\n</li>\n<li><p>厘米(cm) 1in = 2.54cm</p>\n</li>\n<li><p>毫米(mm) 1in = 25.4mm</p>\n</li>\n<li><p>点(pt) 1in = 72pt</p>\n</li>\n<li><p>派卡(pc)  1pc = 12pt, 6pc = 1in</p>\n</li>\n</ul>\n</li>\n<li><p>相对长度单位</p>\n<ul>\n<li>em (em-height) 1em定义未一种给定字体的font-size的值，随元素的不同而不同，国外最常用，也是未来的趋势，更容易适配移动端。</li>\n<li>ex (x-height) 1ex定位未一种给定字体的小写x的高度，不同字体ex的值不同。</li>\n<li>px像素</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第五章-字体\"><a href=\"#第五章-字体\" class=\"headerlink\" title=\"第五章 字体\"></a>第五章 字体</h2><p>css定义了5中通用字体</p>\n<ul>\n<li>Serif 成比例的有上下短线的字体</li>\n<li>Sans-serif 成比例的，没有上下短线</li>\n<li>Monospace 不成比例，通常用于模拟打字机打出的问题</li>\n<li>Cursive  手写体</li>\n<li>Fantasy 无法用任何特征来定义的字体</li>\n</ul>\n<p>特定字体：如Times，Verdana, Helvetica, Arial等，每一种特定的字体都会落入上述通用系列中。</p>\n<ul>\n<li>font-family 如h1 {font-family: Georgia, serif}, Georgia是特定字体，serif是通用字体。</li>\n<li>font-weight<ul>\n<li>normal</li>\n<li>bold</li>\n<li>bolder</li>\n<li>lighter</li>\n<li>100/200/300/400/500/600/700/800/900</li>\n</ul>\n</li>\n<li>font-size<ul>\n<li>xx-small/x-small/small/medium/large/x-large/xx-large/smaller/larger</li>\n<li>&lt;length&gt;/&lt;percentage&gt;</li>\n</ul>\n</li>\n<li>font-style字体风格<ul>\n<li>italic/oblique/normal/inherit</li>\n</ul>\n</li>\n<li>font-variant 字体变形<ul>\n<li>small-caps 首字母大写</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第六章-文本属性\"><a href=\"#第六章-文本属性\" class=\"headerlink\" title=\"第六章 文本属性\"></a>第六章 文本属性</h2><ul>\n<li>text-indent 首行缩进<ul>\n<li>&lt;length&gt; 如：p {text-indent: 3em}</li>\n<li>&lt;percentag&gt; 相对于父元素宽度</li>\n<li>inhert</li>\n</ul>\n</li>\n<li>text-align 水平对齐<ul>\n<li>left</li>\n<li>right</li>\n<li>center</li>\n<li>justify 两端对齐，在打印领域很常见</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>line-height 行高，定义了基线之间的距离，而不是字体大小，可以控制行间距。行间距=行高-字体大小<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n<li>&lt;number&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>vertical-align 行内元素和表单元格的垂直方向对齐<ul>\n<li>base-line 基线对齐，元素的底端和副元素的基线对齐</li>\n<li>sub/super 上标/下标，相对于基线升高/降低</li>\n<li>bottom 元素行内框的底端和行框的底端对齐</li>\n<li>text-bottom 元素行内框的底端和文本的底端对齐</li>\n<li>top 与bottom相反</li>\n<li>text-top 与text-bottom相反</li>\n<li>middle 居中对齐</li>\n<li>&lt;percentage&gt;</li>\n<li>&lt;length&gt;</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>word-spacing 字间隔<ul>\n<li>&lt;length&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>letter-spacing 字母间隔<ul>\n<li>&lt;length&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>text-transform<ul>\n<li>uppercase 全大写</li>\n<li>lowercase 全小写</li>\n<li>capitalize 单词首字母大写</li>\n<li>none</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>text-decoration 文字效果<ul>\n<li>none</li>\n<li>underline 下划线</li>\n<li>overline 上划线</li>\n<li>line-through 中划线</li>\n<li>blink</li>\n<li>inherit</li>\n</ul>\n</li>\n<li><p>text-shadow</p>\n<ul>\n<li><p>none</p>\n</li>\n<li><p>颜色值和三个长度值 text-shadow: silver 2px 2px 2px;</p>\n</li>\n</ul>\n</li>\n<li>white-space<ul>\n<li>normal 合并空白符，忽略换行符，允许自动换行。</li>\n<li>nowrap 合并空白符，忽略换行符号，不允许自动换行。</li>\n<li>pre 保留空白符号，保留换行符号，不允许自动换行。</li>\n<li>pre-wrap 保留空白符，保留换行符，允许自动换行。</li>\n<li>pre-line 合并空白符，保留换行符，允许自动换行。</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>direction 文本方向<ul>\n<li>ltr</li>\n<li>rtl</li>\n<li>inherit</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第七章-基本视觉格式化\"><a href=\"#第七章-基本视觉格式化\" class=\"headerlink\" title=\"第七章 基本视觉格式化\"></a>第七章 基本视觉格式化</h2><p>水平格式化<br>七大水平属性</p>\n<ul>\n<li>margin-left</li>\n<li>border-left</li>\n<li>padding-left</li>\n<li>width</li>\n<li>padding-right</li>\n<li>border-right</li>\n<li>maring-right</li>\n</ul>\n<p>这7个属性值加起来就是元素包含块的宽度，这往往是副元素的width值。<br>width就是左内边距到右内边距的距离。<br>这7个属性中，只有3个属性可以设置为auto: margin-left, width, margin-right，可以用auto弥补实际值和所需总和的差距。如果三个值都为非auto的某个值，这些格式化属性过分受限，此时会强制设置margin-right为auto.<br>不止一个auto的情况：</p>\n<ul>\n<li>margin-left和margin-right为auto，此时元素居中，与text-align:center的区别，text-align只应用块级元素的内联内容，并不能使元素居中。</li>\n<li>margin-left和width为auto，此时margin-left为0，width会填满剩余包块。</li>\n<li>margin-right和width为auto，此时margin-right为0，width填满剩余包块。</li>\n<li>margin-left和margin-right和width都为auto，此时margin-left和margin-right都为0,width会填满包块。这种情况和默认是相同的。</li>\n</ul>\n<p>水平外边距不会合并，父元素的内边距，边距和外边距可能影响子元素。</p>\n<p>负外边距<br>   负外边距时，  会使得内容宽度超出包块，因为根据等式父包块width=7大水平之和，margin-left或margin-right为负时，width要增大。</p>\n<p>垂直格式化<br>如果元素的内容的高度，大于元素框的高度，用户代理的具体行为将取决于overflow属性。<br>垂直格式化的七大属性</p>\n<ul>\n<li>margin-top</li>\n<li>border-top</li>\n<li>padding-top</li>\n<li>height</li>\n<li>padding-bottom</li>\n<li>border-bottom</li>\n<li>margin-bottom</li>\n</ul>\n<p>这7个属性值的值和必须等于含块的height，其中，3个值可以设置为auto，margin-top，height，margin-bottom，如果margin-top或margin-bottom设置为auto则自动计算0，这就是为什么不容易设置元素为垂直居中，这与水平时不一样的。对于定位元素，上下边距为auto时，处理不同。</p>\n<p>如果没有显式声明包含块的height，百分数高度为重置为auto，如果块级中场元素的height设置为auto，显示时的高度将恰好足以包含其内联内容。<br>如果块级正常流元素高度设置为auto，而且只有块级子元素，其默认高度将是从最高块级子元素的外边框边界到最低块级子元素外边框边界之间的距离。<br>不过，如果块级元素有padding或者border，则高度则是最高子元素的上外边距到其最低子元素的下外边距边界之间的距离。</p>\n<p>合并垂直外边距<br>垂直合并只引用与外边距，不会应用于内边距和边框。<br>负的下外边距会使段落看上去向下拉，负的上边会使段落看上去向上拉。</p>\n<h2 id=\"第八章-内边距、边框和外边距\"><a href=\"#第八章-内边距、边框和外边距\" class=\"headerlink\" title=\"第八章 内边距、边框和外边距\"></a>第八章 内边距、边框和外边距</h2><ul>\n<li><p>border-style</p>\n<ul>\n<li>none</li>\n<li>hidden</li>\n<li>dotted</li>\n<li>dashed</li>\n<li>solid</li>\n<li>double</li>\n<li>groove</li>\n<li>ridge</li>\n<li>inset</li>\n<li>outset</li>\n</ul>\n</li>\n<li><p>设置多个边框样式 p.asize {boder-style:  solid dashed dotted solid;}</p>\n</li>\n<li>boder-top-style/boder-right-style/border-bottom-style/border-left-style 单独设置边框样式</li>\n<li>border-width边框宽度<ul>\n<li>thin</li>\n<li>medium</li>\n<li>thick</li>\n<li>&lt;length&gt;</li>\n</ul>\n</li>\n<li>border-top-width/border-right-width/border-bottom-width/border-left-width单独设置宽度</li>\n<li>boder-color边框颜色<ul>\n<li>&lt;color&gt;</li>\n<li>transparent 透明</li>\n</ul>\n</li>\n<li>border-top-color/border-right-color/border-bottom-color/border-left-color单独设置颜色</li>\n<li>border-top/boder-right/border-bottom/border-left单独设置边框<ul>\n<li>[&lt;border-width&gt;] [&lt;border-style&gt;][boder-color]</li>\n</ul>\n</li>\n<li>border 全局边框，应用到四条边<ul>\n<li>[&lt;border-width&gt;] [&lt;border-style&gt;][boder-color]</li>\n</ul>\n</li>\n</ul>\n<p>对于只包含文本的行，能改变行间距离的属性只有line-height, font-size和vertical-align。<br>行内元素使用正左右外边距，可以多出来水平空间，负的左右外边距会使行内元素与其他内容重叠。<br>行内元素的边框，不会改变行高。<br>行内元素使用正的左右边框可以多出来水平空间。</p>\n<ul>\n<li>padding 内边距<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n</ul>\n</li>\n</ul>\n<p>行内非替换元素使用左右内边距时，可以多出来水平空间，而上下边距不会改变行高。<br>可以想图像使用内边距,外边距，边框时，它可以改变行高，也可以水平方向留出距离。</p>\n<ul>\n<li>background-color 背景元素<ul>\n<li>&lt;color&gt;</li>\n<li>transparent</li>\n</ul>\n</li>\n<li>background-image 如body {background-image: url(bg23.gif)}<ul>\n<li>&lt;uri&gt;</li>\n<li>none</li>\n</ul>\n</li>\n<li>background-repeat 有方向的重复<ul>\n<li>repeat</li>\n<li>repeat-x</li>\n<li>repeat-y</li>\n<li>no-repeat</li>\n</ul>\n</li>\n<li>background-position 背景定位<ul>\n<li>&lt;percentage&gt;</li>\n<li>&lt;length&gt;</li>\n<li>left/center/right/top/bottom</li>\n</ul>\n</li>\n</ul>\n<p>background-position单个关键字等价<br>center: cener center<br>top: top center或者center top<br>bottom: bottom center或者center bottom<br>left: left center 或者center left<br>right: right center 或者center right</p>\n<ul>\n<li><p>background-attachment</p>\n<ul>\n<li>scroll 跟随文档滚动</li>\n<li>fixed 不跟随文档滚动</li>\n</ul>\n</li>\n<li><p>background 简写属性</p>\n<ul>\n<li>&lt;background-color&gt; || &lt;background-image&gt; || &lt;backgroud-repeat&gt; || &lt;background-attachment&gt; || &lt;background-position&gt;</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第十章-浮动和定位\"><a href=\"#第十章-浮动和定位\" class=\"headerlink\" title=\"第十章 浮动和定位\"></a>第十章 浮动和定位</h2><ul>\n<li>float<ul>\n<li>left</li>\n<li>right</li>\n<li>none</li>\n</ul>\n</li>\n</ul>\n<p>浮动元素会从文档的正常流中删除，它还是会影响布局。其他内容会环绕元素，浮动元素的外边距不会合并</p>\n<ul>\n<li><p>position</p>\n<ul>\n<li>static 默认 块元素生成一个矩形框，行内元素创建一个或多个行框，置于父元素中</li>\n<li>relative 元素偏移某个距离，元素仍保持未定位前的形状，它原本占据的空间仍保留</li>\n<li>absolute 元素框从文档流中完全删除，并相对于其包含块定位。</li>\n<li>fixed 元素的表现类似于absolute，不过，其包含块是视窗本身。</li>\n</ul>\n</li>\n<li><p>偏移属性，在position为relative,absolute和fixed时，可以设置偏移属性top right bottom left</p>\n<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n<li>auto 初始值</li>\n</ul>\n</li>\n</ul>\n<p>包含块</p>\n<p>根元素的包含块，由用户代理建立，即html元素或body元素<br>对于一个非根元素，如果其position时relative或static，包含块则由最近的块级框，表单元格或行内块祖先框的内容边界构成。<br>对于一个非根元素，如果其position时absolute，包含块则由最近的position值不是static的祖先元素。</p>\n<ul>\n<li>overflow<ul>\n<li>visible</li>\n<li>hidden</li>\n<li>scroll</li>\n<li>auto</li>\n</ul>\n</li>\n</ul>"},{"title":"高性能Javscript - 笔记","date":"2016-11-05T10:04:19.000Z","_content":"\n## 第一章 加载和执行\n\n### 减少Javascript加载对性能的影响\n\n- &lt;/body>闭合标签之前，将所有&lt;javascript>标签放到页面底部。这能确保在脚本执行前页面已经完成了渲染\n- 合并脚本，减少&lt;javascript>标签\n- 使用&lt;javascript>标签的defer属性\n```javascript\n    <script type='text/javascript' src='file1.js' defer></script>\n```\n\n<!--more-->\n\n- 利用动态创建的&lt;javascript>元素来下载并执行代码\n```javascript\n    var script = document.createElemnet('script');\n    script.type = 'text/javascript';\n    script.onload = function() {\n        alert('Script loaded!');\n    }\n    script.src = 'file1.js';\n    document.getElementByTagName('head')[0].appendChild(script);\n```\n- 使用XHR对象下载Javascript代码并注入页面中\n```javascript\n    var xhr = new XMLHttpRequest();\n    xhr.open('get', 'file1.js', true);\n    xhr.onreadystatechange = function() {\n        if(xhr.readyState == 4) {\n            if(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n                var script = document.createElemnet('script');\n                script.type = 'text/javascript';\n                script.text = xhr.responseText;\n                document.body.appendChild(script);\n            }\n        }\n    }\n```\n\n### 几种类库加载js的方式\n- YUI3\n```javascript\n    <script type='text/javascript' src='http://yui.yahooapis.com/combo?3.0.0/build/yui/yui-min.js'></script>\n    <script type='text/javascript'>\n        YUI().use('dom', function(Y) {\n            Y.DOM.addClass(document.body, 'loaded');\n        })\n    </script>\n```\n- LazyLoad\n```javascript\n    <script type='text/javascript' src='lazyload-min.js'></script>\n    <script type='text/javascript'>\n        LazyLoad.js('the-rest.js', function() {\n            Applicationn.init();\n        })\n    </script>\n```\n- LABjs\n```javascript\n    <script type='text/javascript' src='lab.js'></script>\n    <script type='text/javascript'> \n        $LAB.script('first-file.js')\n            .wait()\n            .script('the-rest.js')\n            .wait(function() {\n                Applicationn.init();\n            })\n```\n\n## 第二章 数据存取\n\n在Javascript中，数据存储的位置会对代码整体性能产成重大影响。数据存储共有4中方式：字面量、变量、数组项、对象成员。它们有着各自的性能特点。\n\n\n- 访问字面量和局部变量的速度最快，相反，访问数组元素和对象成员相对较慢。\n- 由于局部变量存在于作用域链的起始位置，因此访问局部变量比访问跨作用域变量更快。变量在作用域中的位置越深，访问所需时间就越长。由于全局变量总处在作用域的最末端，因此访问速度时最慢的。\n- 避免使用with语句。\n- 嵌套的对象成员会明显影响性能，尽量少用。\n- 属性或方法在原型链中的位置越深，访问它的速度也越慢。\n- 通常来说，你可以通过把常用的对象成员、数组元素、跨域变量保存在局部变量中来改善Javascript性能，因为局部变量访问速度更快。\n\n## 第三章 DOM编程\n\n访问和操作DOM时现在Web应用的重要部分。但每次穿越链接ECMAScript和DOM都会有性能消耗，为了减少DOM编程带来的消耗，请记住以下几点：\n\n- 最小化DOM访问次数，尽可能在Javascript端处理。\n- 如果需要多次访问某个DOM节点，请使用局部变量存储它的引用。\n- 小心处理HTML集合，把集合的长度缓存到一个变量中，并在迭代中使用它。如果需要经常操作集合，建议把它靠背到一个数组中。\n- 如果可能的话，使用速度更快的API，比如querySelecetAll()和firstElementChild。\n- 要留意重排和重绘，批量修改样式时，离线操作DOM树，使用缓存，并减少布局信息的次数。\n- 动画中使用绝对定位，使用拖放代理。\n- 使用事件委托来减少事件处理器的数量。","source":"_posts/High-Performance-Javascript.md","raw":"---\ntitle: 高性能Javscript - 笔记\ndate: 2016-11-5 18:04:19\ntags: javascript\n---\n\n## 第一章 加载和执行\n\n### 减少Javascript加载对性能的影响\n\n- &lt;/body>闭合标签之前，将所有&lt;javascript>标签放到页面底部。这能确保在脚本执行前页面已经完成了渲染\n- 合并脚本，减少&lt;javascript>标签\n- 使用&lt;javascript>标签的defer属性\n```javascript\n    <script type='text/javascript' src='file1.js' defer></script>\n```\n\n<!--more-->\n\n- 利用动态创建的&lt;javascript>元素来下载并执行代码\n```javascript\n    var script = document.createElemnet('script');\n    script.type = 'text/javascript';\n    script.onload = function() {\n        alert('Script loaded!');\n    }\n    script.src = 'file1.js';\n    document.getElementByTagName('head')[0].appendChild(script);\n```\n- 使用XHR对象下载Javascript代码并注入页面中\n```javascript\n    var xhr = new XMLHttpRequest();\n    xhr.open('get', 'file1.js', true);\n    xhr.onreadystatechange = function() {\n        if(xhr.readyState == 4) {\n            if(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n                var script = document.createElemnet('script');\n                script.type = 'text/javascript';\n                script.text = xhr.responseText;\n                document.body.appendChild(script);\n            }\n        }\n    }\n```\n\n### 几种类库加载js的方式\n- YUI3\n```javascript\n    <script type='text/javascript' src='http://yui.yahooapis.com/combo?3.0.0/build/yui/yui-min.js'></script>\n    <script type='text/javascript'>\n        YUI().use('dom', function(Y) {\n            Y.DOM.addClass(document.body, 'loaded');\n        })\n    </script>\n```\n- LazyLoad\n```javascript\n    <script type='text/javascript' src='lazyload-min.js'></script>\n    <script type='text/javascript'>\n        LazyLoad.js('the-rest.js', function() {\n            Applicationn.init();\n        })\n    </script>\n```\n- LABjs\n```javascript\n    <script type='text/javascript' src='lab.js'></script>\n    <script type='text/javascript'> \n        $LAB.script('first-file.js')\n            .wait()\n            .script('the-rest.js')\n            .wait(function() {\n                Applicationn.init();\n            })\n```\n\n## 第二章 数据存取\n\n在Javascript中，数据存储的位置会对代码整体性能产成重大影响。数据存储共有4中方式：字面量、变量、数组项、对象成员。它们有着各自的性能特点。\n\n\n- 访问字面量和局部变量的速度最快，相反，访问数组元素和对象成员相对较慢。\n- 由于局部变量存在于作用域链的起始位置，因此访问局部变量比访问跨作用域变量更快。变量在作用域中的位置越深，访问所需时间就越长。由于全局变量总处在作用域的最末端，因此访问速度时最慢的。\n- 避免使用with语句。\n- 嵌套的对象成员会明显影响性能，尽量少用。\n- 属性或方法在原型链中的位置越深，访问它的速度也越慢。\n- 通常来说，你可以通过把常用的对象成员、数组元素、跨域变量保存在局部变量中来改善Javascript性能，因为局部变量访问速度更快。\n\n## 第三章 DOM编程\n\n访问和操作DOM时现在Web应用的重要部分。但每次穿越链接ECMAScript和DOM都会有性能消耗，为了减少DOM编程带来的消耗，请记住以下几点：\n\n- 最小化DOM访问次数，尽可能在Javascript端处理。\n- 如果需要多次访问某个DOM节点，请使用局部变量存储它的引用。\n- 小心处理HTML集合，把集合的长度缓存到一个变量中，并在迭代中使用它。如果需要经常操作集合，建议把它靠背到一个数组中。\n- 如果可能的话，使用速度更快的API，比如querySelecetAll()和firstElementChild。\n- 要留意重排和重绘，批量修改样式时，离线操作DOM树，使用缓存，并减少布局信息的次数。\n- 动画中使用绝对定位，使用拖放代理。\n- 使用事件委托来减少事件处理器的数量。","slug":"High-Performance-Javascript","published":1,"updated":"2016-11-15T10:09:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw7pnwsc00073opq7yjm4x63","content":"<h2 id=\"第一章-加载和执行\"><a href=\"#第一章-加载和执行\" class=\"headerlink\" title=\"第一章 加载和执行\"></a>第一章 加载和执行</h2><h3 id=\"减少Javascript加载对性能的影响\"><a href=\"#减少Javascript加载对性能的影响\" class=\"headerlink\" title=\"减少Javascript加载对性能的影响\"></a>减少Javascript加载对性能的影响</h3><ul>\n<li>&lt;/body&gt;闭合标签之前，将所有&lt;javascript&gt;标签放到页面底部。这能确保在脚本执行前页面已经完成了渲染</li>\n<li>合并脚本，减少&lt;javascript&gt;标签</li>\n<li>使用&lt;javascript&gt;标签的defer属性<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'file1.js'</span> defer&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>利用动态创建的&lt;javascript&gt;元素来下载并执行代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElemnet(<span class=\"string\">'script'</span>);</div><div class=\"line\">script.type = <span class=\"string\">'text/javascript'</span>;</div><div class=\"line\">script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'Script loaded!'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">script.src = <span class=\"string\">'file1.js'</span>;</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(script);</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用XHR对象下载Javascript代码并注入页面中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">xhr.open(<span class=\"string\">'get'</span>, <span class=\"string\">'file1.js'</span>, <span class=\"literal\">true</span>);</div><div class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(xhr.readyState == <span class=\"number\">4</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span> || xhr.status === <span class=\"number\">304</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElemnet(<span class=\"string\">'script'</span>);</div><div class=\"line\">            script.type = <span class=\"string\">'text/javascript'</span>;</div><div class=\"line\">            script.text = xhr.responseText;</div><div class=\"line\">            <span class=\"built_in\">document</span>.body.appendChild(script);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"几种类库加载js的方式\"><a href=\"#几种类库加载js的方式\" class=\"headerlink\" title=\"几种类库加载js的方式\"></a>几种类库加载js的方式</h3><ul>\n<li><p>YUI3</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'http://yui.yahooapis.com/combo?3.0.0/build/yui/yui-min.js'</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt;</div><div class=\"line\">    YUI().use(<span class=\"string\">'dom'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Y</span>) </span>&#123;</div><div class=\"line\">        Y.DOM.addClass(<span class=\"built_in\">document</span>.body, <span class=\"string\">'loaded'</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>LazyLoad</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'lazyload-min.js'</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt;</div><div class=\"line\">    LazyLoad.js(<span class=\"string\">'the-rest.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        Applicationn.init();</div><div class=\"line\">    &#125;)</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>LABjs</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'lab.js'</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt; </div><div class=\"line\">    $LAB.script(<span class=\"string\">'first-file.js'</span>)</div><div class=\"line\">        .wait()</div><div class=\"line\">        .script(<span class=\"string\">'the-rest.js'</span>)</div><div class=\"line\">        .wait(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            Applicationn.init();</div><div class=\"line\">        &#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"第二章-数据存取\"><a href=\"#第二章-数据存取\" class=\"headerlink\" title=\"第二章 数据存取\"></a>第二章 数据存取</h2><p>在Javascript中，数据存储的位置会对代码整体性能产成重大影响。数据存储共有4中方式：字面量、变量、数组项、对象成员。它们有着各自的性能特点。</p>\n<ul>\n<li>访问字面量和局部变量的速度最快，相反，访问数组元素和对象成员相对较慢。</li>\n<li>由于局部变量存在于作用域链的起始位置，因此访问局部变量比访问跨作用域变量更快。变量在作用域中的位置越深，访问所需时间就越长。由于全局变量总处在作用域的最末端，因此访问速度时最慢的。</li>\n<li>避免使用with语句。</li>\n<li>嵌套的对象成员会明显影响性能，尽量少用。</li>\n<li>属性或方法在原型链中的位置越深，访问它的速度也越慢。</li>\n<li>通常来说，你可以通过把常用的对象成员、数组元素、跨域变量保存在局部变量中来改善Javascript性能，因为局部变量访问速度更快。</li>\n</ul>\n<h2 id=\"第三章-DOM编程\"><a href=\"#第三章-DOM编程\" class=\"headerlink\" title=\"第三章 DOM编程\"></a>第三章 DOM编程</h2><p>访问和操作DOM时现在Web应用的重要部分。但每次穿越链接ECMAScript和DOM都会有性能消耗，为了减少DOM编程带来的消耗，请记住以下几点：</p>\n<ul>\n<li>最小化DOM访问次数，尽可能在Javascript端处理。</li>\n<li>如果需要多次访问某个DOM节点，请使用局部变量存储它的引用。</li>\n<li>小心处理HTML集合，把集合的长度缓存到一个变量中，并在迭代中使用它。如果需要经常操作集合，建议把它靠背到一个数组中。</li>\n<li>如果可能的话，使用速度更快的API，比如querySelecetAll()和firstElementChild。</li>\n<li>要留意重排和重绘，批量修改样式时，离线操作DOM树，使用缓存，并减少布局信息的次数。</li>\n<li>动画中使用绝对定位，使用拖放代理。</li>\n<li>使用事件委托来减少事件处理器的数量。</li>\n</ul>\n","excerpt":"<h2 id=\"第一章-加载和执行\"><a href=\"#第一章-加载和执行\" class=\"headerlink\" title=\"第一章 加载和执行\"></a>第一章 加载和执行</h2><h3 id=\"减少Javascript加载对性能的影响\"><a href=\"#减少Javascript加载对性能的影响\" class=\"headerlink\" title=\"减少Javascript加载对性能的影响\"></a>减少Javascript加载对性能的影响</h3><ul>\n<li>&lt;/body&gt;闭合标签之前，将所有&lt;javascript&gt;标签放到页面底部。这能确保在脚本执行前页面已经完成了渲染</li>\n<li>合并脚本，减少&lt;javascript&gt;标签</li>\n<li>使用&lt;javascript&gt;标签的defer属性<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'file1.js'</span> defer&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<ul>\n<li><p>利用动态创建的&lt;javascript&gt;元素来下载并执行代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElemnet(<span class=\"string\">'script'</span>);</div><div class=\"line\">script.type = <span class=\"string\">'text/javascript'</span>;</div><div class=\"line\">script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'Script loaded!'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">script.src = <span class=\"string\">'file1.js'</span>;</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(script);</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用XHR对象下载Javascript代码并注入页面中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">xhr.open(<span class=\"string\">'get'</span>, <span class=\"string\">'file1.js'</span>, <span class=\"literal\">true</span>);</div><div class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(xhr.readyState == <span class=\"number\">4</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span> || xhr.status === <span class=\"number\">304</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElemnet(<span class=\"string\">'script'</span>);</div><div class=\"line\">            script.type = <span class=\"string\">'text/javascript'</span>;</div><div class=\"line\">            script.text = xhr.responseText;</div><div class=\"line\">            <span class=\"built_in\">document</span>.body.appendChild(script);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"几种类库加载js的方式\"><a href=\"#几种类库加载js的方式\" class=\"headerlink\" title=\"几种类库加载js的方式\"></a>几种类库加载js的方式</h3><ul>\n<li><p>YUI3</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'http://yui.yahooapis.com/combo?3.0.0/build/yui/yui-min.js'</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt;</div><div class=\"line\">    YUI().use(<span class=\"string\">'dom'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Y</span>) </span>&#123;</div><div class=\"line\">        Y.DOM.addClass(<span class=\"built_in\">document</span>.body, <span class=\"string\">'loaded'</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>LazyLoad</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'lazyload-min.js'</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt;</div><div class=\"line\">    LazyLoad.js(<span class=\"string\">'the-rest.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        Applicationn.init();</div><div class=\"line\">    &#125;)</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>LABjs</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'lab.js'</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt; </div><div class=\"line\">    $LAB.script(<span class=\"string\">'first-file.js'</span>)</div><div class=\"line\">        .wait()</div><div class=\"line\">        .script(<span class=\"string\">'the-rest.js'</span>)</div><div class=\"line\">        .wait(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            Applicationn.init();</div><div class=\"line\">        &#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"第二章-数据存取\"><a href=\"#第二章-数据存取\" class=\"headerlink\" title=\"第二章 数据存取\"></a>第二章 数据存取</h2><p>在Javascript中，数据存储的位置会对代码整体性能产成重大影响。数据存储共有4中方式：字面量、变量、数组项、对象成员。它们有着各自的性能特点。</p>\n<ul>\n<li>访问字面量和局部变量的速度最快，相反，访问数组元素和对象成员相对较慢。</li>\n<li>由于局部变量存在于作用域链的起始位置，因此访问局部变量比访问跨作用域变量更快。变量在作用域中的位置越深，访问所需时间就越长。由于全局变量总处在作用域的最末端，因此访问速度时最慢的。</li>\n<li>避免使用with语句。</li>\n<li>嵌套的对象成员会明显影响性能，尽量少用。</li>\n<li>属性或方法在原型链中的位置越深，访问它的速度也越慢。</li>\n<li>通常来说，你可以通过把常用的对象成员、数组元素、跨域变量保存在局部变量中来改善Javascript性能，因为局部变量访问速度更快。</li>\n</ul>\n<h2 id=\"第三章-DOM编程\"><a href=\"#第三章-DOM编程\" class=\"headerlink\" title=\"第三章 DOM编程\"></a>第三章 DOM编程</h2><p>访问和操作DOM时现在Web应用的重要部分。但每次穿越链接ECMAScript和DOM都会有性能消耗，为了减少DOM编程带来的消耗，请记住以下几点：</p>\n<ul>\n<li>最小化DOM访问次数，尽可能在Javascript端处理。</li>\n<li>如果需要多次访问某个DOM节点，请使用局部变量存储它的引用。</li>\n<li>小心处理HTML集合，把集合的长度缓存到一个变量中，并在迭代中使用它。如果需要经常操作集合，建议把它靠背到一个数组中。</li>\n<li>如果可能的话，使用速度更快的API，比如querySelecetAll()和firstElementChild。</li>\n<li>要留意重排和重绘，批量修改样式时，离线操作DOM树，使用缓存，并减少布局信息的次数。</li>\n<li>动画中使用绝对定位，使用拖放代理。</li>\n<li>使用事件委托来减少事件处理器的数量。</li>\n</ul>"},{"title":"https双向验证功能的实现","date":"2016-11-28T00:51:23.000Z","_content":"本文介绍一个简单echo服务器的实现，服务端用nodejs，客户端用android。\n\n## <font size='6em'>用openssl一系列证书</font>\n\n### <font size='5em'>生成自己的CA根证书</font>\n\n#### <font size='4em'>生成跟证书私钥ca.key</font>\n```\n$ openssl genrsa -des3 -out ca.key 1024\n```\n#### <font size='4em'>生成X.509证书签名请求文件ca.csr</font>\n在生成ca.csr的过程中，会让输入一些组织信息等。\n```\n$ openssl req -new -key ca.key -out ca.csr \n```\n<!-- more --> \n\n输出如下\n```\nEnter pass phrase for ca.key:\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:CN\nState or Province Name (full name) [Some-State]:GuangDong\nLocality Name (eg, city) []:ShenZhen\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:IBoxPay\nOrganizational Unit Name (eg, section) []:IBoxPay\nCommon Name (e.g. server FQDN or YOUR name) []:\nEmail Address []:admin@iboxpay.com\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []:\nAn optional company name []:\n```\n\n#### <font size='4em'>生成X.509格式的CA根证书ca.crt</font>\n```\n$ openssl x509 -req -days 365 -in ca.csr -out ca.crt -signkey ca.key\n```\n输出如下\n```\nSignature ok\nsubject=/C=CN/ST=GuangDong/L=ShenZhen/O=IBoxPay/OU=IBoxPay/emailAddress=admin@iboxpay.com\nGetting Private key\nEnter pass phrase for ca.key:\n```\n\n### <font size='5em'>生成服务端的证书</font>\n\n#### <font size='4em'>生成服务端私钥文件 server.key</font>\n```\n$ openssl genrsa -des3 -out server.key 1024\n```\n#### <font size='4em'>服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server.csr</font>\n这一步需要填写一个组织信息，不要跟根证书的组织的一样。另外Common Name填一个自己的域名（如果没有实际的域名也可以写，后面在/etc/hosts映射一个，我写的就是yinlijun.com），不要填localhost，android会报错。\n```\nopenssl req -new -key server.key -out server.csr\n```\n输出如下\n```\nEnter pass phrase for server.key:\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:CN\nState or Province Name (full name) [Some-State]:GuangDong\nLocality Name (eg, city) []:ShenZhen\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:yinlijun\nOrganizational Unit Name (eg, section) []:yinlijun\nCommon Name (e.g. server FQDN or YOUR name) []:yinlijun.com\nEmail Address []:admin@yinlijun.com\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []: \n```\n\n#### <font size='4em'>删除私钥的密码，这一步非常**重要**，一定要执行,否则会影响后面的步骤。</font>\n```\n$ cp server.key server.key.passphrase\n$ openssl rsa -in server.key.passphrase -out server.key\n```\n输出如下\n```\nEnter pass phrase for server.key.passphrase:\nwriting RSA key\n```\n#### <font size='4em'>签发服务器证书server.crt：</font>\n```\nopenssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt\n```\n输出如下：\n```\nSignature ok\nsubject=/C=CN/ST=GuangDong/L=ShenZhen/O=yinlijun/OU=yinlijun/CN=yinlijun.com/emailAddress=admin@yinlijun.com\nGetting Private key\n```\n到现在为止，你目录下的文件应该有：\n```\nls -la\ntotal 36\ndrwxr-xr-x  2 user user 4096 Sep  5 16:19 .\ndrwxr-xr-x 12 user user 4096 Sep  5 16:09 ..\n-rw-r--r--  1 user user  757 Sep  5 16:12 ca.crt\n-rw-r--r--  1 user user  603 Sep  5 16:10 ca.csr\n-rw-r--r--  1 user user  963 Sep  5 16:09 ca.key\n-rw-r--r--  1 user user  757 Sep  5 16:19 server.crt\n-rw-r--r--  1 user user  603 Sep  5 16:16 server.csr\n-rw-r--r--  1 user user  887 Sep  5 16:18 server.key\n-rw-r--r--  1 user user  951 Sep  5 16:17 server.key.passphrase\n```\n\n#### 生成之后察看服务器证书信息。\n```\nopenssl x509 -in server.crt -text -noout\n```\n\n#### 生成服务器的pfx文件，这个文件node服务器要用到。\n```\nopenssl pkcs12 -export -in server.crt -inkey server.key -certfile ca.crt -out server.pfx\n```\n输出如下\n```\nEnter Export Password:\nVerifying - Enter Export Password:\n```\n#### 生成服务端的p12文件。，这个是为了生成服务端bks文件用的\n```\nopenssl pkcs12 -export -clcerts -in server.crt -inkey server.key -out server.p12\n```\n### 下载一个bcprov-jdk16-141.jar，也是为了生成服务端bks文件要用到的。\n```\n下载地址：[http://www.java2s.com/Code/JarDownload/bcprov/bcprov-jdk16-141.jar.zip](http://www.java2s.com/Code/JarDownload/bcprov/bcprov-jdk16-141.jar.zip)\n```\n### 生成服务端的bks文件，这个android程序要用到\n```\nkeytool -importkeystore -srckeystore server.p12 -srcstoretype pkcs12 -destkeystore server.bks -deststoretype bks -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath bcprov-jdk16-141.jar\n```\n输出如下\n```\n输入目标密钥库口令:  \n再次输入新密码: \n输入源密钥库口令:  \n已成功导入别名 1 项。\n已完成导入命令: 1 项成功导入，0 项失败或取消\n```\n因为要进行双向验证，还需要生成客户端证书。\n#### 生成客户端密钥\n```\nopenssl genrsa -des3 -out client.key 1024\n```\n#### 生成客户端证书请求签名文件\n```\nopenssl req -new -out client.csr -key client.key\n```\n输出如下\n```\nEnter pass phrase for client.key:\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:CN\nState or Province Name (full name) [Some-State]:GuangDong \nLocality Name (eg, city) []:ShenZhen\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:ruochen\nOrganizational Unit Name (eg, section) []:ruochen\nCommon Name (e.g. server FQDN or YOUR name) []:\nEmail Address []:admin@ruochen.com\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []:\nAn optional company name []:\n```\n\n#### 创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。\n```\nopenssl x509 -req -in client.csr -out client.cert -signkey client.key -CA ca.crt -CAkey ca.key -CAcreateserial -days 3650\n```\n输入如下\n```\nSignature ok\nsubject=/C=CN/ST=GuangDong/L=ShenZhen/O=ruochen/OU=ruochen/emailAddress=admin@ruochen.com\nGetting Private key\nEnter pass phrase for client.key:\nGetting CA Private Key\nEnter pass phrase for ca.key:\nyinlijun@yinlijun:~/personal_github/echo-https-server/keys$ ls\nca.crt  ca.csr  ca.key  ca.srl  client.cert  client.csr  client.key  server.crt  server.csr  server.key  server.key.passphrase  server.pfx\nyinlijun@yinlijun:~/personal_github/echo-https-server/keys$ openssl pkcs12 -export -clcerts -in client.cert -inkey client.key -out client.p12\nEnter pass phrase for client.key:\nEnter Export Password:\nVerifying - Enter Export Password:\n```\n\n#### 生成浏览器支持的p12文件\n```\nopenssl pkcs12 -export -clcerts -in client.cert -inkey client.key -out client.p12\n```\n#### 将客户端证书文件client.crt和客户端证书密钥文件client.key合并成客户端证书安装包client.pfx\n```\nopenssl pkcs12 -export -in client.crt -inkey client.key -out client.pfx\n```\n\n以上的文件我只用到了一部分，应该有替代关系，具体我也搞不清楚:)。 不同的实现方式有用到不同的文件。\n我的android客户端用到了\n- server.bks\n- client.p12\n\n看了网上的一些例子，好像server.bks可以用server.crt替代。\n\nnode用到了\n- server.pfx\n\n察看node的文档，server.pfx可以用server.crt和server.key替代。\n\n\n## 服务端（nodejs）的代码\n```javascript\nvar https =require('https'), fs = require('fs');\n\nvar options = {\n    key: fs.readFileSync('./keys/server.key'),\n    cert: fs.readFileSync('./keys/server.crt'),\n};\n\nvar app = express();\nvar server = https.createServer(options, app);\nserver.listen(443, function() {\n    console.log('Https server listening on port ' + 443);\n});\n```\n\n## android应用自有证书的验证方式\n将服务端证书拷贝到app资源目录下，一般是<project_dir>/assets/server.crt\n\n### 方法一：直接根据server.crt初始化TrustManagerFactory\n```java\n    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n    InputStream caInput = new BufferedInputStream(getAssets().open(\"server.crt\"));\n    final Certificate ca;\n    try {\n        ca = cf.generateCertificate(caInput);\n        Log.i(TAG, \"ca=\" + ((X509Certificate) ca).getSubjectDN());\n        Log.i(TAG, \"key=\" + ((X509Certificate) ca).getPublicKey());\n    } finally {\n        caInput.close();\n    }\n\n    String keyStoreType = KeyStore.getDefaultType();\n    Log.d(TAG, \"keystore type:\" + keyStoreType);\n    KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n    keyStore.load(null, null);\n    keyStore.setCertificateEntry(\"cert\", ca);\n\n    String tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();\n    Log.d(TAG, \"tmfAlgorithm:\" + tmfAlgorithm);\n    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(tmfAlgorithm);\n    trustManagerFactory.init(keyStore);\n\n    mSSLContext = SSLContext.getInstance(\"TLS\");\n    mSSLContext.init(null, trustManagerFactory.getTrustManagers(), null);\n\n    URL url = new URL(\"https://yinlijun.com\");\n    HttpsURLConnection urlConnection =\n            (HttpsURLConnection)url.openConnection();\n    urlConnection.setSSLSocketFactory(mSSLContext.getSocketFactory());\n    InputStream in = urlConnection.getInputStream();\n    copyInputStreamToOutputStream(in, System.out);\n} catch (CertificateException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n} catch (NoSuchAlgorithmException e) {\n    e.printStackTrace();\n} catch (KeyManagementException e) {\n    e.printStackTrace();\n} catch (KeyStoreException e) {\n    e.printStackTrace();\n}\n```\ncopyInputStreamToOutputStream方法如下：\n\n```java\n    private void copyInputStreamToOutputStream(InputStream in, PrintStream out) throws IOException {\n        byte[] buffer = new byte[1024];\n        int c = 0;\n        while ((c = in.read(buffer)) != -1) {\n            out.write(buffer, 0, c);\n        }\n    }\n```\n\n### 方法二 \n\n```java\n    try {\n        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n        InputStream caInput = new BufferedInputStream(getAssets().open(\"server.crt\"));\n        final Certificate ca;\n        try {\n            ca = cf.generateCertificate(caInput);\n            Log.i(\"Longer\", \"ca=\" + ((X509Certificate) ca).getSubjectDN());\n            Log.i(\"Longer\", \"key=\" + ((X509Certificate) ca).getPublicKey());\n        } finally {\n            caInput.close();\n        }\n\n        // Create an SSLContext that uses our TrustManager\n        SSLContext context = SSLContext.getInstance(\"TLSv1\",\"AndroidOpenSSL\");\n        context.init(null, new TrustManager[]{\n                new X509TrustManager() {\n                    @Override\n                    public void checkClientTrusted(X509Certificate[] chain,\n                                                    String authType)\n                            throws CertificateException {\n\n                    }\n\n                    @Override\n                    public void checkServerTrusted(X509Certificate[] chain,\n                                                    String authType)\n                            throws CertificateException {\n                        for (X509Certificate cert : chain) {\n\n                            // Make sure that it hasn't expired.\n                            cert.checkValidity();\n\n                            // Verify the certificate's public key chain.\n                            try {\n                                cert.verify(((X509Certificate) ca).getPublicKey());\n                            } catch (NoSuchAlgorithmException e) {\n                                e.printStackTrace();\n                            } catch (InvalidKeyException e) {\n                                e.printStackTrace();\n                            } catch (NoSuchProviderException e) {\n                                e.printStackTrace();\n                            } catch (SignatureException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                    }\n\n                    @Override\n                    public X509Certificate[] getAcceptedIssuers() {\n                        return new X509Certificate[0];\n                    }\n                }\n        }, null);\n\n        URL url = new URL(\"https://yinlijun.com/\");\n        HttpsURLConnection urlConnection =\n                (HttpsURLConnection)url.openConnection();\n        urlConnection.setSSLSocketFactory(context.getSocketFactory());\n        InputStream in = urlConnection.getInputStream();\n        copyInputStreamToOutputStream(in, System.out);\n```\n\n\n## 双向认证\n单向验证只能验证服务器，如果服务器也想对客户端进行验证，即所谓（双向验证），需要在连接是一起发送客户端证书。\n\n### 双向认证，服务器代码\n```javascript\nconst tls = require('tls');\nconst fs = require('fs');\n\nconst options = {\n  pfx: fs.readFileSync('./server.pfx'),\n  passphrase: \"123456\",\n  // This is necessary only if using the client certificate authentication.\n  requestCert: true,\n  rejectUnauthorized: true //如果接受也非认证链接，可以删除此行。\n};\n//需要双向认证才需要配置requestCert为true。\nconst server = tls.createServer(options, (socket) => {\n  console.log('server connected',\n              socket.authorized ? 'authorized' : 'unauthorized');\n  socket.setEncoding('utf8');\n  socket.on('data', (data) => {\n      console.log(data);\n      socket.write(data);\n  });\n  socket.on('end', (socket) => {\n    console.log(\"socket closed\");\n  });\n});\nserver.listen(8000, () => {\n  console.log('server bound');\n});\n\n```\n### 双向认证，android的代码，实现方式一\n\nserver.pfx和client.p12放到<project_dir>/assets/目录下\n```java\n    try {\n        KeyStore trustStore = KeyStore.getInstance(\"bks\");\n        InputStream tsIn = getResources().getAssets().open(\"server.bks\");\n\n        KeyStore keyStore = KeyStore.getInstance(\"PKCS12\");\n        InputStream ksIn = getResources().getAssets().open(\"client.p12\");\n\n        try {\n            keyStore.load(ksIn, \"123456\".toCharArray());\n            trustStore.load(tsIn, \"123456\".toCharArray());\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                ksIn.close();\n            } catch (Exception ignore) {\n            }\n            try {\n                tsIn.close();\n            } catch (Exception ignore) {\n            }\n        }\n        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(\"X509\");\n        keyManagerFactory.init(keyStore, \"123456\".toCharArray());\n        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n        trustManagerFactory.init(trustStore);\n        mSSLContext = SSLContext.getInstance(\"TLS\");\n        mSSLContext.init(null, trustManagerFactory.getTrustManagers(), null);\n\n        mSSLSocket = (SSLSocket) mSSLContext.getSocketFactory().createSocket(\"yinlijun.com\", 8000);\n        mSSLSocket.startHandshake();\n        //...\n    } catch (IOException e) {\n        e.printStackTrace();\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (KeyManagementException e) {\n        e.printStackTrace();\n    } catch (KeyStoreException e) {\n        e.printStackTrace();\n    } catch (UnrecoverableKeyException e) {\n        e.printStackTrace();\n    }\n\n```\n\n### 双向认证，android的代码，实现方式2，用server.crt替代server.bks\n\nserver.crt和client.p12放到<project_dir>/assets/目录下\n\n```java\n    try {\n        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n        InputStream caInput = new BufferedInputStream(getAssets().open(\"server.crt\"));\n        final Certificate ca;\n        try {\n            ca = cf.generateCertificate(caInput);\n            Log.i(\"Longer\", \"ca=\" + ((X509Certificate) ca).getSubjectDN());\n            Log.i(\"Longer\", \"key=\" + ((X509Certificate) ca).getPublicKey());\n        } finally {\n            caInput.close();\n        }\n\n        KeyStore keyStore = KeyStore.getInstance(\"PKCS12\");\n        InputStream ksIn = getResources().getAssets().open(\"client.p12\");\n\n        try {\n            keyStore.load(ksIn, \"123456\".toCharArray());\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                ksIn.close();\n            } catch (Exception ignore) {\n            }\n        }\n        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(\"X509\");\n        keyManagerFactory.init(keyStore, \"123456\".toCharArray());\n\n        // Create an SSLContext that uses our TrustManager\n        SSLContext context = SSLContext.getInstance(\"TLSv1\",\"AndroidOpenSSL\");\n        context.init(keyManagerFactory.getKeyManagers(), new TrustManager[]{\n                new X509TrustManager() {\n                    @Override\n                    public void checkClientTrusted(X509Certificate[] chain,\n                                                    String authType)\n                            throws CertificateException {\n\n                    }\n\n                    @Override\n                    public void checkServerTrusted(X509Certificate[] chain,\n                                                    String authType)\n                            throws CertificateException {\n                        for (X509Certificate cert : chain) {\n\n                            // Make sure that it hasn't expired.\n                            cert.checkValidity();\n\n                            // Verify the certificate's public key chain.\n                            try {\n                                cert.verify(((X509Certificate) ca).getPublicKey());\n                            } catch (NoSuchAlgorithmException e) {\n                                e.printStackTrace();\n                            } catch (InvalidKeyException e) {\n                                e.printStackTrace();\n                            } catch (NoSuchProviderException e) {\n                                e.printStackTrace();\n                            } catch (SignatureException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                    }\n\n                    @Override\n                    public X509Certificate[] getAcceptedIssuers() {\n                        return new X509Certificate[0];\n                    }\n                }\n        }, null);\n        //...\n```\n\n项目地址：\n\n## 参考文档\n- [How to generate self-signed certificate for usage in Express4 or Node.js HTTP](https://matoski.com/article/node-express-generate-ssl/)\n- [SSL证书生成方法](http://blog.csdn.net/fyang2007/article/details/6180361)\n- [Android安全开发之安全使用HTTPS](https://zhuanlan.zhihu.com/p/22816331)\n- [通过 HTTPS 和 SSL 确保安全](https://developer.android.com/training/articles/security-ssl.html#nogotofail) (要翻墙)\n- [https://nodejs.org/api/tls.html](https://nodejs.org/api/tls.html)\n- [https://gist.github.com/Frank-Zhu/41e21a00df26d63cd38d](https://gist.github.com/Frank-Zhu/41e21a00df26d63cd38d)\n","source":"_posts/android-https-verify-ways.md","raw":"---\ntitle: https双向验证功能的实现\ndate: 2016-11-28 08:51:23\ntags: [android, nodejs, https, openssl]\n---\n本文介绍一个简单echo服务器的实现，服务端用nodejs，客户端用android。\n\n## <font size='6em'>用openssl一系列证书</font>\n\n### <font size='5em'>生成自己的CA根证书</font>\n\n#### <font size='4em'>生成跟证书私钥ca.key</font>\n```\n$ openssl genrsa -des3 -out ca.key 1024\n```\n#### <font size='4em'>生成X.509证书签名请求文件ca.csr</font>\n在生成ca.csr的过程中，会让输入一些组织信息等。\n```\n$ openssl req -new -key ca.key -out ca.csr \n```\n<!-- more --> \n\n输出如下\n```\nEnter pass phrase for ca.key:\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:CN\nState or Province Name (full name) [Some-State]:GuangDong\nLocality Name (eg, city) []:ShenZhen\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:IBoxPay\nOrganizational Unit Name (eg, section) []:IBoxPay\nCommon Name (e.g. server FQDN or YOUR name) []:\nEmail Address []:admin@iboxpay.com\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []:\nAn optional company name []:\n```\n\n#### <font size='4em'>生成X.509格式的CA根证书ca.crt</font>\n```\n$ openssl x509 -req -days 365 -in ca.csr -out ca.crt -signkey ca.key\n```\n输出如下\n```\nSignature ok\nsubject=/C=CN/ST=GuangDong/L=ShenZhen/O=IBoxPay/OU=IBoxPay/emailAddress=admin@iboxpay.com\nGetting Private key\nEnter pass phrase for ca.key:\n```\n\n### <font size='5em'>生成服务端的证书</font>\n\n#### <font size='4em'>生成服务端私钥文件 server.key</font>\n```\n$ openssl genrsa -des3 -out server.key 1024\n```\n#### <font size='4em'>服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server.csr</font>\n这一步需要填写一个组织信息，不要跟根证书的组织的一样。另外Common Name填一个自己的域名（如果没有实际的域名也可以写，后面在/etc/hosts映射一个，我写的就是yinlijun.com），不要填localhost，android会报错。\n```\nopenssl req -new -key server.key -out server.csr\n```\n输出如下\n```\nEnter pass phrase for server.key:\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:CN\nState or Province Name (full name) [Some-State]:GuangDong\nLocality Name (eg, city) []:ShenZhen\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:yinlijun\nOrganizational Unit Name (eg, section) []:yinlijun\nCommon Name (e.g. server FQDN or YOUR name) []:yinlijun.com\nEmail Address []:admin@yinlijun.com\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []: \n```\n\n#### <font size='4em'>删除私钥的密码，这一步非常**重要**，一定要执行,否则会影响后面的步骤。</font>\n```\n$ cp server.key server.key.passphrase\n$ openssl rsa -in server.key.passphrase -out server.key\n```\n输出如下\n```\nEnter pass phrase for server.key.passphrase:\nwriting RSA key\n```\n#### <font size='4em'>签发服务器证书server.crt：</font>\n```\nopenssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt\n```\n输出如下：\n```\nSignature ok\nsubject=/C=CN/ST=GuangDong/L=ShenZhen/O=yinlijun/OU=yinlijun/CN=yinlijun.com/emailAddress=admin@yinlijun.com\nGetting Private key\n```\n到现在为止，你目录下的文件应该有：\n```\nls -la\ntotal 36\ndrwxr-xr-x  2 user user 4096 Sep  5 16:19 .\ndrwxr-xr-x 12 user user 4096 Sep  5 16:09 ..\n-rw-r--r--  1 user user  757 Sep  5 16:12 ca.crt\n-rw-r--r--  1 user user  603 Sep  5 16:10 ca.csr\n-rw-r--r--  1 user user  963 Sep  5 16:09 ca.key\n-rw-r--r--  1 user user  757 Sep  5 16:19 server.crt\n-rw-r--r--  1 user user  603 Sep  5 16:16 server.csr\n-rw-r--r--  1 user user  887 Sep  5 16:18 server.key\n-rw-r--r--  1 user user  951 Sep  5 16:17 server.key.passphrase\n```\n\n#### 生成之后察看服务器证书信息。\n```\nopenssl x509 -in server.crt -text -noout\n```\n\n#### 生成服务器的pfx文件，这个文件node服务器要用到。\n```\nopenssl pkcs12 -export -in server.crt -inkey server.key -certfile ca.crt -out server.pfx\n```\n输出如下\n```\nEnter Export Password:\nVerifying - Enter Export Password:\n```\n#### 生成服务端的p12文件。，这个是为了生成服务端bks文件用的\n```\nopenssl pkcs12 -export -clcerts -in server.crt -inkey server.key -out server.p12\n```\n### 下载一个bcprov-jdk16-141.jar，也是为了生成服务端bks文件要用到的。\n```\n下载地址：[http://www.java2s.com/Code/JarDownload/bcprov/bcprov-jdk16-141.jar.zip](http://www.java2s.com/Code/JarDownload/bcprov/bcprov-jdk16-141.jar.zip)\n```\n### 生成服务端的bks文件，这个android程序要用到\n```\nkeytool -importkeystore -srckeystore server.p12 -srcstoretype pkcs12 -destkeystore server.bks -deststoretype bks -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath bcprov-jdk16-141.jar\n```\n输出如下\n```\n输入目标密钥库口令:  \n再次输入新密码: \n输入源密钥库口令:  \n已成功导入别名 1 项。\n已完成导入命令: 1 项成功导入，0 项失败或取消\n```\n因为要进行双向验证，还需要生成客户端证书。\n#### 生成客户端密钥\n```\nopenssl genrsa -des3 -out client.key 1024\n```\n#### 生成客户端证书请求签名文件\n```\nopenssl req -new -out client.csr -key client.key\n```\n输出如下\n```\nEnter pass phrase for client.key:\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:CN\nState or Province Name (full name) [Some-State]:GuangDong \nLocality Name (eg, city) []:ShenZhen\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:ruochen\nOrganizational Unit Name (eg, section) []:ruochen\nCommon Name (e.g. server FQDN or YOUR name) []:\nEmail Address []:admin@ruochen.com\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []:\nAn optional company name []:\n```\n\n#### 创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。\n```\nopenssl x509 -req -in client.csr -out client.cert -signkey client.key -CA ca.crt -CAkey ca.key -CAcreateserial -days 3650\n```\n输入如下\n```\nSignature ok\nsubject=/C=CN/ST=GuangDong/L=ShenZhen/O=ruochen/OU=ruochen/emailAddress=admin@ruochen.com\nGetting Private key\nEnter pass phrase for client.key:\nGetting CA Private Key\nEnter pass phrase for ca.key:\nyinlijun@yinlijun:~/personal_github/echo-https-server/keys$ ls\nca.crt  ca.csr  ca.key  ca.srl  client.cert  client.csr  client.key  server.crt  server.csr  server.key  server.key.passphrase  server.pfx\nyinlijun@yinlijun:~/personal_github/echo-https-server/keys$ openssl pkcs12 -export -clcerts -in client.cert -inkey client.key -out client.p12\nEnter pass phrase for client.key:\nEnter Export Password:\nVerifying - Enter Export Password:\n```\n\n#### 生成浏览器支持的p12文件\n```\nopenssl pkcs12 -export -clcerts -in client.cert -inkey client.key -out client.p12\n```\n#### 将客户端证书文件client.crt和客户端证书密钥文件client.key合并成客户端证书安装包client.pfx\n```\nopenssl pkcs12 -export -in client.crt -inkey client.key -out client.pfx\n```\n\n以上的文件我只用到了一部分，应该有替代关系，具体我也搞不清楚:)。 不同的实现方式有用到不同的文件。\n我的android客户端用到了\n- server.bks\n- client.p12\n\n看了网上的一些例子，好像server.bks可以用server.crt替代。\n\nnode用到了\n- server.pfx\n\n察看node的文档，server.pfx可以用server.crt和server.key替代。\n\n\n## 服务端（nodejs）的代码\n```javascript\nvar https =require('https'), fs = require('fs');\n\nvar options = {\n    key: fs.readFileSync('./keys/server.key'),\n    cert: fs.readFileSync('./keys/server.crt'),\n};\n\nvar app = express();\nvar server = https.createServer(options, app);\nserver.listen(443, function() {\n    console.log('Https server listening on port ' + 443);\n});\n```\n\n## android应用自有证书的验证方式\n将服务端证书拷贝到app资源目录下，一般是<project_dir>/assets/server.crt\n\n### 方法一：直接根据server.crt初始化TrustManagerFactory\n```java\n    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n    InputStream caInput = new BufferedInputStream(getAssets().open(\"server.crt\"));\n    final Certificate ca;\n    try {\n        ca = cf.generateCertificate(caInput);\n        Log.i(TAG, \"ca=\" + ((X509Certificate) ca).getSubjectDN());\n        Log.i(TAG, \"key=\" + ((X509Certificate) ca).getPublicKey());\n    } finally {\n        caInput.close();\n    }\n\n    String keyStoreType = KeyStore.getDefaultType();\n    Log.d(TAG, \"keystore type:\" + keyStoreType);\n    KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n    keyStore.load(null, null);\n    keyStore.setCertificateEntry(\"cert\", ca);\n\n    String tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();\n    Log.d(TAG, \"tmfAlgorithm:\" + tmfAlgorithm);\n    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(tmfAlgorithm);\n    trustManagerFactory.init(keyStore);\n\n    mSSLContext = SSLContext.getInstance(\"TLS\");\n    mSSLContext.init(null, trustManagerFactory.getTrustManagers(), null);\n\n    URL url = new URL(\"https://yinlijun.com\");\n    HttpsURLConnection urlConnection =\n            (HttpsURLConnection)url.openConnection();\n    urlConnection.setSSLSocketFactory(mSSLContext.getSocketFactory());\n    InputStream in = urlConnection.getInputStream();\n    copyInputStreamToOutputStream(in, System.out);\n} catch (CertificateException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n} catch (NoSuchAlgorithmException e) {\n    e.printStackTrace();\n} catch (KeyManagementException e) {\n    e.printStackTrace();\n} catch (KeyStoreException e) {\n    e.printStackTrace();\n}\n```\ncopyInputStreamToOutputStream方法如下：\n\n```java\n    private void copyInputStreamToOutputStream(InputStream in, PrintStream out) throws IOException {\n        byte[] buffer = new byte[1024];\n        int c = 0;\n        while ((c = in.read(buffer)) != -1) {\n            out.write(buffer, 0, c);\n        }\n    }\n```\n\n### 方法二 \n\n```java\n    try {\n        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n        InputStream caInput = new BufferedInputStream(getAssets().open(\"server.crt\"));\n        final Certificate ca;\n        try {\n            ca = cf.generateCertificate(caInput);\n            Log.i(\"Longer\", \"ca=\" + ((X509Certificate) ca).getSubjectDN());\n            Log.i(\"Longer\", \"key=\" + ((X509Certificate) ca).getPublicKey());\n        } finally {\n            caInput.close();\n        }\n\n        // Create an SSLContext that uses our TrustManager\n        SSLContext context = SSLContext.getInstance(\"TLSv1\",\"AndroidOpenSSL\");\n        context.init(null, new TrustManager[]{\n                new X509TrustManager() {\n                    @Override\n                    public void checkClientTrusted(X509Certificate[] chain,\n                                                    String authType)\n                            throws CertificateException {\n\n                    }\n\n                    @Override\n                    public void checkServerTrusted(X509Certificate[] chain,\n                                                    String authType)\n                            throws CertificateException {\n                        for (X509Certificate cert : chain) {\n\n                            // Make sure that it hasn't expired.\n                            cert.checkValidity();\n\n                            // Verify the certificate's public key chain.\n                            try {\n                                cert.verify(((X509Certificate) ca).getPublicKey());\n                            } catch (NoSuchAlgorithmException e) {\n                                e.printStackTrace();\n                            } catch (InvalidKeyException e) {\n                                e.printStackTrace();\n                            } catch (NoSuchProviderException e) {\n                                e.printStackTrace();\n                            } catch (SignatureException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                    }\n\n                    @Override\n                    public X509Certificate[] getAcceptedIssuers() {\n                        return new X509Certificate[0];\n                    }\n                }\n        }, null);\n\n        URL url = new URL(\"https://yinlijun.com/\");\n        HttpsURLConnection urlConnection =\n                (HttpsURLConnection)url.openConnection();\n        urlConnection.setSSLSocketFactory(context.getSocketFactory());\n        InputStream in = urlConnection.getInputStream();\n        copyInputStreamToOutputStream(in, System.out);\n```\n\n\n## 双向认证\n单向验证只能验证服务器，如果服务器也想对客户端进行验证，即所谓（双向验证），需要在连接是一起发送客户端证书。\n\n### 双向认证，服务器代码\n```javascript\nconst tls = require('tls');\nconst fs = require('fs');\n\nconst options = {\n  pfx: fs.readFileSync('./server.pfx'),\n  passphrase: \"123456\",\n  // This is necessary only if using the client certificate authentication.\n  requestCert: true,\n  rejectUnauthorized: true //如果接受也非认证链接，可以删除此行。\n};\n//需要双向认证才需要配置requestCert为true。\nconst server = tls.createServer(options, (socket) => {\n  console.log('server connected',\n              socket.authorized ? 'authorized' : 'unauthorized');\n  socket.setEncoding('utf8');\n  socket.on('data', (data) => {\n      console.log(data);\n      socket.write(data);\n  });\n  socket.on('end', (socket) => {\n    console.log(\"socket closed\");\n  });\n});\nserver.listen(8000, () => {\n  console.log('server bound');\n});\n\n```\n### 双向认证，android的代码，实现方式一\n\nserver.pfx和client.p12放到<project_dir>/assets/目录下\n```java\n    try {\n        KeyStore trustStore = KeyStore.getInstance(\"bks\");\n        InputStream tsIn = getResources().getAssets().open(\"server.bks\");\n\n        KeyStore keyStore = KeyStore.getInstance(\"PKCS12\");\n        InputStream ksIn = getResources().getAssets().open(\"client.p12\");\n\n        try {\n            keyStore.load(ksIn, \"123456\".toCharArray());\n            trustStore.load(tsIn, \"123456\".toCharArray());\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                ksIn.close();\n            } catch (Exception ignore) {\n            }\n            try {\n                tsIn.close();\n            } catch (Exception ignore) {\n            }\n        }\n        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(\"X509\");\n        keyManagerFactory.init(keyStore, \"123456\".toCharArray());\n        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n        trustManagerFactory.init(trustStore);\n        mSSLContext = SSLContext.getInstance(\"TLS\");\n        mSSLContext.init(null, trustManagerFactory.getTrustManagers(), null);\n\n        mSSLSocket = (SSLSocket) mSSLContext.getSocketFactory().createSocket(\"yinlijun.com\", 8000);\n        mSSLSocket.startHandshake();\n        //...\n    } catch (IOException e) {\n        e.printStackTrace();\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (KeyManagementException e) {\n        e.printStackTrace();\n    } catch (KeyStoreException e) {\n        e.printStackTrace();\n    } catch (UnrecoverableKeyException e) {\n        e.printStackTrace();\n    }\n\n```\n\n### 双向认证，android的代码，实现方式2，用server.crt替代server.bks\n\nserver.crt和client.p12放到<project_dir>/assets/目录下\n\n```java\n    try {\n        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n        InputStream caInput = new BufferedInputStream(getAssets().open(\"server.crt\"));\n        final Certificate ca;\n        try {\n            ca = cf.generateCertificate(caInput);\n            Log.i(\"Longer\", \"ca=\" + ((X509Certificate) ca).getSubjectDN());\n            Log.i(\"Longer\", \"key=\" + ((X509Certificate) ca).getPublicKey());\n        } finally {\n            caInput.close();\n        }\n\n        KeyStore keyStore = KeyStore.getInstance(\"PKCS12\");\n        InputStream ksIn = getResources().getAssets().open(\"client.p12\");\n\n        try {\n            keyStore.load(ksIn, \"123456\".toCharArray());\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                ksIn.close();\n            } catch (Exception ignore) {\n            }\n        }\n        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(\"X509\");\n        keyManagerFactory.init(keyStore, \"123456\".toCharArray());\n\n        // Create an SSLContext that uses our TrustManager\n        SSLContext context = SSLContext.getInstance(\"TLSv1\",\"AndroidOpenSSL\");\n        context.init(keyManagerFactory.getKeyManagers(), new TrustManager[]{\n                new X509TrustManager() {\n                    @Override\n                    public void checkClientTrusted(X509Certificate[] chain,\n                                                    String authType)\n                            throws CertificateException {\n\n                    }\n\n                    @Override\n                    public void checkServerTrusted(X509Certificate[] chain,\n                                                    String authType)\n                            throws CertificateException {\n                        for (X509Certificate cert : chain) {\n\n                            // Make sure that it hasn't expired.\n                            cert.checkValidity();\n\n                            // Verify the certificate's public key chain.\n                            try {\n                                cert.verify(((X509Certificate) ca).getPublicKey());\n                            } catch (NoSuchAlgorithmException e) {\n                                e.printStackTrace();\n                            } catch (InvalidKeyException e) {\n                                e.printStackTrace();\n                            } catch (NoSuchProviderException e) {\n                                e.printStackTrace();\n                            } catch (SignatureException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                    }\n\n                    @Override\n                    public X509Certificate[] getAcceptedIssuers() {\n                        return new X509Certificate[0];\n                    }\n                }\n        }, null);\n        //...\n```\n\n项目地址：\n\n## 参考文档\n- [How to generate self-signed certificate for usage in Express4 or Node.js HTTP](https://matoski.com/article/node-express-generate-ssl/)\n- [SSL证书生成方法](http://blog.csdn.net/fyang2007/article/details/6180361)\n- [Android安全开发之安全使用HTTPS](https://zhuanlan.zhihu.com/p/22816331)\n- [通过 HTTPS 和 SSL 确保安全](https://developer.android.com/training/articles/security-ssl.html#nogotofail) (要翻墙)\n- [https://nodejs.org/api/tls.html](https://nodejs.org/api/tls.html)\n- [https://gist.github.com/Frank-Zhu/41e21a00df26d63cd38d](https://gist.github.com/Frank-Zhu/41e21a00df26d63cd38d)\n","slug":"android-https-verify-ways","published":1,"updated":"2016-11-29T00:59:51.151Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw7pnwse00083opqkmx8fxws","content":"<p>本文介绍一个简单echo服务器的实现，服务端用nodejs，客户端用android。</p>\n<h2 id=\"用openssl一系列证书\"><a href=\"#用openssl一系列证书\" class=\"headerlink\" title=\"用openssl一系列证书\"></a><font size=\"6em\">用openssl一系列证书</font></h2><h3 id=\"生成自己的CA根证书\"><a href=\"#生成自己的CA根证书\" class=\"headerlink\" title=\"生成自己的CA根证书\"></a><font size=\"5em\">生成自己的CA根证书</font></h3><h4 id=\"生成跟证书私钥ca-key\"><a href=\"#生成跟证书私钥ca-key\" class=\"headerlink\" title=\"生成跟证书私钥ca.key\"></a><font size=\"4em\">生成跟证书私钥ca.key</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ openssl genrsa -des3 -out ca.key 1024</div></pre></td></tr></table></figure>\n<h4 id=\"生成X-509证书签名请求文件ca-csr\"><a href=\"#生成X-509证书签名请求文件ca-csr\" class=\"headerlink\" title=\"生成X.509证书签名请求文件ca.csr\"></a><font size=\"4em\">生成X.509证书签名请求文件ca.csr</font></h4><p>在生成ca.csr的过程中，会让输入一些组织信息等。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ openssl req -new -key ca.key -out ca.csr</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a> \n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enter pass phrase for ca.key:</div><div class=\"line\">You are about to be asked to enter information that will be incorporated</div><div class=\"line\">into your certificate request.</div><div class=\"line\">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class=\"line\">There are quite a few fields but you can leave some blank</div><div class=\"line\">For some fields there will be a default value,</div><div class=\"line\">If you enter &apos;.&apos;, the field will be left blank.</div><div class=\"line\">-----</div><div class=\"line\">Country Name (2 letter code) [AU]:CN</div><div class=\"line\">State or Province Name (full name) [Some-State]:GuangDong</div><div class=\"line\">Locality Name (eg, city) []:ShenZhen</div><div class=\"line\">Organization Name (eg, company) [Internet Widgits Pty Ltd]:IBoxPay</div><div class=\"line\">Organizational Unit Name (eg, section) []:IBoxPay</div><div class=\"line\">Common Name (e.g. server FQDN or YOUR name) []:</div><div class=\"line\">Email Address []:admin@iboxpay.com</div><div class=\"line\"></div><div class=\"line\">Please enter the following &apos;extra&apos; attributes</div><div class=\"line\">to be sent with your certificate request</div><div class=\"line\">A challenge password []:</div><div class=\"line\">An optional company name []:</div></pre></td></tr></table></figure></p>\n<h4 id=\"生成X-509格式的CA根证书ca-crt\"><a href=\"#生成X-509格式的CA根证书ca-crt\" class=\"headerlink\" title=\"生成X.509格式的CA根证书ca.crt\"></a><font size=\"4em\">生成X.509格式的CA根证书ca.crt</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ openssl x509 -req -days 365 -in ca.csr -out ca.crt -signkey ca.key</div></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Signature ok</div><div class=\"line\">subject=/C=CN/ST=GuangDong/L=ShenZhen/O=IBoxPay/OU=IBoxPay/emailAddress=admin@iboxpay.com</div><div class=\"line\">Getting Private key</div><div class=\"line\">Enter pass phrase for ca.key:</div></pre></td></tr></table></figure></p>\n<h3 id=\"生成服务端的证书\"><a href=\"#生成服务端的证书\" class=\"headerlink\" title=\"生成服务端的证书\"></a><font size=\"5em\">生成服务端的证书</font></h3><h4 id=\"生成服务端私钥文件-server-key\"><a href=\"#生成服务端私钥文件-server-key\" class=\"headerlink\" title=\"生成服务端私钥文件 server.key\"></a><font size=\"4em\">生成服务端私钥文件 server.key</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ openssl genrsa -des3 -out server.key 1024</div></pre></td></tr></table></figure>\n<h4 id=\"服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server-csr\"><a href=\"#服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server-csr\" class=\"headerlink\" title=\"服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server.csr\"></a><font size=\"4em\">服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server.csr</font></h4><p>这一步需要填写一个组织信息，不要跟根证书的组织的一样。另外Common Name填一个自己的域名（如果没有实际的域名也可以写，后面在/etc/hosts映射一个，我写的就是yinlijun.com），不要填localhost，android会报错。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl req -new -key server.key -out server.csr</div></pre></td></tr></table></figure></p>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enter pass phrase for server.key:</div><div class=\"line\">You are about to be asked to enter information that will be incorporated</div><div class=\"line\">into your certificate request.</div><div class=\"line\">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class=\"line\">There are quite a few fields but you can leave some blank</div><div class=\"line\">For some fields there will be a default value,</div><div class=\"line\">If you enter &apos;.&apos;, the field will be left blank.</div><div class=\"line\">-----</div><div class=\"line\">Country Name (2 letter code) [AU]:CN</div><div class=\"line\">State or Province Name (full name) [Some-State]:GuangDong</div><div class=\"line\">Locality Name (eg, city) []:ShenZhen</div><div class=\"line\">Organization Name (eg, company) [Internet Widgits Pty Ltd]:yinlijun</div><div class=\"line\">Organizational Unit Name (eg, section) []:yinlijun</div><div class=\"line\">Common Name (e.g. server FQDN or YOUR name) []:yinlijun.com</div><div class=\"line\">Email Address []:admin@yinlijun.com</div><div class=\"line\"></div><div class=\"line\">Please enter the following &apos;extra&apos; attributes</div><div class=\"line\">to be sent with your certificate request</div><div class=\"line\">A challenge password []:</div></pre></td></tr></table></figure></p>\n<h4 id=\"删除私钥的密码，这一步非常重要，一定要执行-否则会影响后面的步骤。\"><a href=\"#删除私钥的密码，这一步非常重要，一定要执行-否则会影响后面的步骤。\" class=\"headerlink\" title=\"删除私钥的密码，这一步非常重要，一定要执行,否则会影响后面的步骤。\"></a><font size=\"4em\">删除私钥的密码，这一步非常<strong>重要</strong>，一定要执行,否则会影响后面的步骤。</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cp server.key server.key.passphrase</div><div class=\"line\">$ openssl rsa -in server.key.passphrase -out server.key</div></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enter pass phrase for server.key.passphrase:</div><div class=\"line\">writing RSA key</div></pre></td></tr></table></figure></p>\n<h4 id=\"签发服务器证书server-crt：\"><a href=\"#签发服务器证书server-crt：\" class=\"headerlink\" title=\"签发服务器证书server.crt：\"></a><font size=\"4em\">签发服务器证书server.crt：</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt</div></pre></td></tr></table></figure>\n<p>输出如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Signature ok</div><div class=\"line\">subject=/C=CN/ST=GuangDong/L=ShenZhen/O=yinlijun/OU=yinlijun/CN=yinlijun.com/emailAddress=admin@yinlijun.com</div><div class=\"line\">Getting Private key</div></pre></td></tr></table></figure></p>\n<p>到现在为止，你目录下的文件应该有：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls -la</div><div class=\"line\">total 36</div><div class=\"line\">drwxr-xr-x  2 user user 4096 Sep  5 16:19 .</div><div class=\"line\">drwxr-xr-x 12 user user 4096 Sep  5 16:09 ..</div><div class=\"line\">-rw-r--r--  1 user user  757 Sep  5 16:12 ca.crt</div><div class=\"line\">-rw-r--r--  1 user user  603 Sep  5 16:10 ca.csr</div><div class=\"line\">-rw-r--r--  1 user user  963 Sep  5 16:09 ca.key</div><div class=\"line\">-rw-r--r--  1 user user  757 Sep  5 16:19 server.crt</div><div class=\"line\">-rw-r--r--  1 user user  603 Sep  5 16:16 server.csr</div><div class=\"line\">-rw-r--r--  1 user user  887 Sep  5 16:18 server.key</div><div class=\"line\">-rw-r--r--  1 user user  951 Sep  5 16:17 server.key.passphrase</div></pre></td></tr></table></figure></p>\n<h4 id=\"生成之后察看服务器证书信息。\"><a href=\"#生成之后察看服务器证书信息。\" class=\"headerlink\" title=\"生成之后察看服务器证书信息。\"></a>生成之后察看服务器证书信息。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl x509 -in server.crt -text -noout</div></pre></td></tr></table></figure>\n<h4 id=\"生成服务器的pfx文件，这个文件node服务器要用到。\"><a href=\"#生成服务器的pfx文件，这个文件node服务器要用到。\" class=\"headerlink\" title=\"生成服务器的pfx文件，这个文件node服务器要用到。\"></a>生成服务器的pfx文件，这个文件node服务器要用到。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl pkcs12 -export -in server.crt -inkey server.key -certfile ca.crt -out server.pfx</div></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enter Export Password:</div><div class=\"line\">Verifying - Enter Export Password:</div></pre></td></tr></table></figure></p>\n<h4 id=\"生成服务端的p12文件。，这个是为了生成服务端bks文件用的\"><a href=\"#生成服务端的p12文件。，这个是为了生成服务端bks文件用的\" class=\"headerlink\" title=\"生成服务端的p12文件。，这个是为了生成服务端bks文件用的\"></a>生成服务端的p12文件。，这个是为了生成服务端bks文件用的</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl pkcs12 -export -clcerts -in server.crt -inkey server.key -out server.p12</div></pre></td></tr></table></figure>\n<h3 id=\"下载一个bcprov-jdk16-141-jar，也是为了生成服务端bks文件要用到的。\"><a href=\"#下载一个bcprov-jdk16-141-jar，也是为了生成服务端bks文件要用到的。\" class=\"headerlink\" title=\"下载一个bcprov-jdk16-141.jar，也是为了生成服务端bks文件要用到的。\"></a>下载一个bcprov-jdk16-141.jar，也是为了生成服务端bks文件要用到的。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">下载地址：[http://www.java2s.com/Code/JarDownload/bcprov/bcprov-jdk16-141.jar.zip](http://www.java2s.com/Code/JarDownload/bcprov/bcprov-jdk16-141.jar.zip)</div></pre></td></tr></table></figure>\n<h3 id=\"生成服务端的bks文件，这个android程序要用到\"><a href=\"#生成服务端的bks文件，这个android程序要用到\" class=\"headerlink\" title=\"生成服务端的bks文件，这个android程序要用到\"></a>生成服务端的bks文件，这个android程序要用到</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">keytool -importkeystore -srckeystore server.p12 -srcstoretype pkcs12 -destkeystore server.bks -deststoretype bks -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath bcprov-jdk16-141.jar</div></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">输入目标密钥库口令:  </div><div class=\"line\">再次输入新密码: </div><div class=\"line\">输入源密钥库口令:  </div><div class=\"line\">已成功导入别名 1 项。</div><div class=\"line\">已完成导入命令: 1 项成功导入，0 项失败或取消</div></pre></td></tr></table></figure></p>\n<p>因为要进行双向验证，还需要生成客户端证书。</p>\n<h4 id=\"生成客户端密钥\"><a href=\"#生成客户端密钥\" class=\"headerlink\" title=\"生成客户端密钥\"></a>生成客户端密钥</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl genrsa -des3 -out client.key 1024</div></pre></td></tr></table></figure>\n<h4 id=\"生成客户端证书请求签名文件\"><a href=\"#生成客户端证书请求签名文件\" class=\"headerlink\" title=\"生成客户端证书请求签名文件\"></a>生成客户端证书请求签名文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl req -new -out client.csr -key client.key</div></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enter pass phrase for client.key:</div><div class=\"line\">You are about to be asked to enter information that will be incorporated</div><div class=\"line\">into your certificate request.</div><div class=\"line\">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class=\"line\">There are quite a few fields but you can leave some blank</div><div class=\"line\">For some fields there will be a default value,</div><div class=\"line\">If you enter &apos;.&apos;, the field will be left blank.</div><div class=\"line\">-----</div><div class=\"line\">Country Name (2 letter code) [AU]:CN</div><div class=\"line\">State or Province Name (full name) [Some-State]:GuangDong </div><div class=\"line\">Locality Name (eg, city) []:ShenZhen</div><div class=\"line\">Organization Name (eg, company) [Internet Widgits Pty Ltd]:ruochen</div><div class=\"line\">Organizational Unit Name (eg, section) []:ruochen</div><div class=\"line\">Common Name (e.g. server FQDN or YOUR name) []:</div><div class=\"line\">Email Address []:admin@ruochen.com</div><div class=\"line\"></div><div class=\"line\">Please enter the following &apos;extra&apos; attributes</div><div class=\"line\">to be sent with your certificate request</div><div class=\"line\">A challenge password []:</div><div class=\"line\">An optional company name []:</div></pre></td></tr></table></figure></p>\n<h4 id=\"创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。\"><a href=\"#创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。\" class=\"headerlink\" title=\"创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。\"></a>创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl x509 -req -in client.csr -out client.cert -signkey client.key -CA ca.crt -CAkey ca.key -CAcreateserial -days 3650</div></pre></td></tr></table></figure>\n<p>输入如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Signature ok</div><div class=\"line\">subject=/C=CN/ST=GuangDong/L=ShenZhen/O=ruochen/OU=ruochen/emailAddress=admin@ruochen.com</div><div class=\"line\">Getting Private key</div><div class=\"line\">Enter pass phrase for client.key:</div><div class=\"line\">Getting CA Private Key</div><div class=\"line\">Enter pass phrase for ca.key:</div><div class=\"line\">yinlijun@yinlijun:~/personal_github/echo-https-server/keys$ ls</div><div class=\"line\">ca.crt  ca.csr  ca.key  ca.srl  client.cert  client.csr  client.key  server.crt  server.csr  server.key  server.key.passphrase  server.pfx</div><div class=\"line\">yinlijun@yinlijun:~/personal_github/echo-https-server/keys$ openssl pkcs12 -export -clcerts -in client.cert -inkey client.key -out client.p12</div><div class=\"line\">Enter pass phrase for client.key:</div><div class=\"line\">Enter Export Password:</div><div class=\"line\">Verifying - Enter Export Password:</div></pre></td></tr></table></figure></p>\n<h4 id=\"生成浏览器支持的p12文件\"><a href=\"#生成浏览器支持的p12文件\" class=\"headerlink\" title=\"生成浏览器支持的p12文件\"></a>生成浏览器支持的p12文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl pkcs12 -export -clcerts -in client.cert -inkey client.key -out client.p12</div></pre></td></tr></table></figure>\n<h4 id=\"将客户端证书文件client-crt和客户端证书密钥文件client-key合并成客户端证书安装包client-pfx\"><a href=\"#将客户端证书文件client-crt和客户端证书密钥文件client-key合并成客户端证书安装包client-pfx\" class=\"headerlink\" title=\"将客户端证书文件client.crt和客户端证书密钥文件client.key合并成客户端证书安装包client.pfx\"></a>将客户端证书文件client.crt和客户端证书密钥文件client.key合并成客户端证书安装包client.pfx</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl pkcs12 -export -in client.crt -inkey client.key -out client.pfx</div></pre></td></tr></table></figure>\n<p>以上的文件我只用到了一部分，应该有替代关系，具体我也搞不清楚:)。 不同的实现方式有用到不同的文件。<br>我的android客户端用到了</p>\n<ul>\n<li>server.bks</li>\n<li>client.p12</li>\n</ul>\n<p>看了网上的一些例子，好像server.bks可以用server.crt替代。</p>\n<p>node用到了</p>\n<ul>\n<li>server.pfx</li>\n</ul>\n<p>察看node的文档，server.pfx可以用server.crt和server.key替代。</p>\n<h2 id=\"服务端（nodejs）的代码\"><a href=\"#服务端（nodejs）的代码\" class=\"headerlink\" title=\"服务端（nodejs）的代码\"></a>服务端（nodejs）的代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> https =<span class=\"built_in\">require</span>(<span class=\"string\">'https'</span>), fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">    key: fs.readFileSync(<span class=\"string\">'./keys/server.key'</span>),</div><div class=\"line\">    cert: fs.readFileSync(<span class=\"string\">'./keys/server.crt'</span>),</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"keyword\">var</span> server = https.createServer(options, app);</div><div class=\"line\">server.listen(<span class=\"number\">443</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Https server listening on port '</span> + <span class=\"number\">443</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"android应用自有证书的验证方式\"><a href=\"#android应用自有证书的验证方式\" class=\"headerlink\" title=\"android应用自有证书的验证方式\"></a>android应用自有证书的验证方式</h2><p>将服务端证书拷贝到app资源目录下，一般是<project_dir>/assets/server.crt</project_dir></p>\n<h3 id=\"方法一：直接根据server-crt初始化TrustManagerFactory\"><a href=\"#方法一：直接根据server-crt初始化TrustManagerFactory\" class=\"headerlink\" title=\"方法一：直接根据server.crt初始化TrustManagerFactory\"></a>方法一：直接根据server.crt初始化TrustManagerFactory</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">    CertificateFactory cf = CertificateFactory.getInstance(<span class=\"string\">\"X.509\"</span>);</div><div class=\"line\">    InputStream caInput = <span class=\"keyword\">new</span> BufferedInputStream(getAssets().open(<span class=\"string\">\"server.crt\"</span>));</div><div class=\"line\">    <span class=\"keyword\">final</span> Certificate ca;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        ca = cf.generateCertificate(caInput);</div><div class=\"line\">        Log.i(TAG, <span class=\"string\">\"ca=\"</span> + ((X509Certificate) ca).getSubjectDN());</div><div class=\"line\">        Log.i(TAG, <span class=\"string\">\"key=\"</span> + ((X509Certificate) ca).getPublicKey());</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        caInput.close();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    String keyStoreType = KeyStore.getDefaultType();</div><div class=\"line\">    Log.d(TAG, <span class=\"string\">\"keystore type:\"</span> + keyStoreType);</div><div class=\"line\">    KeyStore keyStore = KeyStore.getInstance(keyStoreType);</div><div class=\"line\">    keyStore.load(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">    keyStore.setCertificateEntry(<span class=\"string\">\"cert\"</span>, ca);</div><div class=\"line\"></div><div class=\"line\">    String tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();</div><div class=\"line\">    Log.d(TAG, <span class=\"string\">\"tmfAlgorithm:\"</span> + tmfAlgorithm);</div><div class=\"line\">    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(tmfAlgorithm);</div><div class=\"line\">    trustManagerFactory.init(keyStore);</div><div class=\"line\"></div><div class=\"line\">    mSSLContext = SSLContext.getInstance(<span class=\"string\">\"TLS\"</span>);</div><div class=\"line\">    mSSLContext.init(<span class=\"keyword\">null</span>, trustManagerFactory.getTrustManagers(), <span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">    URL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"https://yinlijun.com\"</span>);</div><div class=\"line\">    HttpsURLConnection urlConnection =</div><div class=\"line\">            (HttpsURLConnection)url.openConnection();</div><div class=\"line\">    urlConnection.setSSLSocketFactory(mSSLContext.getSocketFactory());</div><div class=\"line\">    InputStream in = urlConnection.getInputStream();</div><div class=\"line\">    copyInputStreamToOutputStream(in, System.out);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (CertificateException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (KeyManagementException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (KeyStoreException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>copyInputStreamToOutputStream方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">copyInputStreamToOutputStream</span><span class=\"params\">(InputStream in, PrintStream out)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</div><div class=\"line\">    <span class=\"keyword\">int</span> c = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> ((c = in.read(buffer)) != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">        out.write(buffer, <span class=\"number\">0</span>, c);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    CertificateFactory cf = CertificateFactory.getInstance(<span class=\"string\">\"X.509\"</span>);</div><div class=\"line\">    InputStream caInput = <span class=\"keyword\">new</span> BufferedInputStream(getAssets().open(<span class=\"string\">\"server.crt\"</span>));</div><div class=\"line\">    <span class=\"keyword\">final</span> Certificate ca;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        ca = cf.generateCertificate(caInput);</div><div class=\"line\">        Log.i(<span class=\"string\">\"Longer\"</span>, <span class=\"string\">\"ca=\"</span> + ((X509Certificate) ca).getSubjectDN());</div><div class=\"line\">        Log.i(<span class=\"string\">\"Longer\"</span>, <span class=\"string\">\"key=\"</span> + ((X509Certificate) ca).getPublicKey());</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        caInput.close();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Create an SSLContext that uses our TrustManager</span></div><div class=\"line\">    SSLContext context = SSLContext.getInstance(<span class=\"string\">\"TLSv1\"</span>,<span class=\"string\">\"AndroidOpenSSL\"</span>);</div><div class=\"line\">    context.init(<span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> TrustManager[]&#123;</div><div class=\"line\">            <span class=\"keyword\">new</span> X509TrustManager() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkClientTrusted</span><span class=\"params\">(X509Certificate[] chain,</span></span></div><div class=\"line\">                                                String authType)</div><div class=\"line\">                        <span class=\"keyword\">throws</span> CertificateException &#123;</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkServerTrusted</span><span class=\"params\">(X509Certificate[] chain,</span></span></div><div class=\"line\">                                                String authType)</div><div class=\"line\">                        <span class=\"keyword\">throws</span> CertificateException &#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (X509Certificate cert : chain) &#123;</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"comment\">// Make sure that it hasn't expired.</span></div><div class=\"line\">                        cert.checkValidity();</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"comment\">// Verify the certificate's public key chain.</span></div><div class=\"line\">                        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                            cert.verify(((X509Certificate) ca).getPublicKey());</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (InvalidKeyException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (NoSuchProviderException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (SignatureException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"keyword\">public</span> X509Certificate[] getAcceptedIssuers() &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> X509Certificate[<span class=\"number\">0</span>];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">    &#125;, <span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">    URL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"https://yinlijun.com/\"</span>);</div><div class=\"line\">    HttpsURLConnection urlConnection =</div><div class=\"line\">            (HttpsURLConnection)url.openConnection();</div><div class=\"line\">    urlConnection.setSSLSocketFactory(context.getSocketFactory());</div><div class=\"line\">    InputStream in = urlConnection.getInputStream();</div><div class=\"line\">    copyInputStreamToOutputStream(in, System.out);</div></pre></td></tr></table></figure>\n<h2 id=\"双向认证\"><a href=\"#双向认证\" class=\"headerlink\" title=\"双向认证\"></a>双向认证</h2><p>单向验证只能验证服务器，如果服务器也想对客户端进行验证，即所谓（双向验证），需要在连接是一起发送客户端证书。</p>\n<h3 id=\"双向认证，服务器代码\"><a href=\"#双向认证，服务器代码\" class=\"headerlink\" title=\"双向认证，服务器代码\"></a>双向认证，服务器代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> tls = <span class=\"built_in\">require</span>(<span class=\"string\">'tls'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> options = &#123;</div><div class=\"line\">  pfx: fs.readFileSync(<span class=\"string\">'./server.pfx'</span>),</div><div class=\"line\">  passphrase: <span class=\"string\">\"123456\"</span>,</div><div class=\"line\">  <span class=\"comment\">// This is necessary only if using the client certificate authentication.</span></div><div class=\"line\">  requestCert: <span class=\"literal\">true</span>,</div><div class=\"line\">  rejectUnauthorized: <span class=\"literal\">true</span> <span class=\"comment\">//如果接受也非认证链接，可以删除此行。</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//需要双向认证才需要配置requestCert为true。</span></div><div class=\"line\"><span class=\"keyword\">const</span> server = tls.createServer(options, (socket) =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'server connected'</span>,</div><div class=\"line\">              socket.authorized ? <span class=\"string\">'authorized'</span> : <span class=\"string\">'unauthorized'</span>);</div><div class=\"line\">  socket.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\">  socket.on(<span class=\"string\">'data'</span>, (data) =&gt; &#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">      socket.write(data);</div><div class=\"line\">  &#125;);</div><div class=\"line\">  socket.on(<span class=\"string\">'end'</span>, (socket) =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"socket closed\"</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.listen(<span class=\"number\">8000</span>, () =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'server bound'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"双向认证，android的代码，实现方式一\"><a href=\"#双向认证，android的代码，实现方式一\" class=\"headerlink\" title=\"双向认证，android的代码，实现方式一\"></a>双向认证，android的代码，实现方式一</h3><p>server.pfx和client.p12放到<project_dir>/assets/目录下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    KeyStore trustStore = KeyStore.getInstance(<span class=\"string\">\"bks\"</span>);</div><div class=\"line\">    InputStream tsIn = getResources().getAssets().open(<span class=\"string\">\"server.bks\"</span>);</div><div class=\"line\"></div><div class=\"line\">    KeyStore keyStore = KeyStore.getInstance(<span class=\"string\">\"PKCS12\"</span>);</div><div class=\"line\">    InputStream ksIn = getResources().getAssets().open(<span class=\"string\">\"client.p12\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        keyStore.load(ksIn, <span class=\"string\">\"123456\"</span>.toCharArray());</div><div class=\"line\">        trustStore.load(tsIn, <span class=\"string\">\"123456\"</span>.toCharArray());</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ksIn.close();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ignore) &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            tsIn.close();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ignore) &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(<span class=\"string\">\"X509\"</span>);</div><div class=\"line\">    keyManagerFactory.init(keyStore, <span class=\"string\">\"123456\"</span>.toCharArray());</div><div class=\"line\">    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());</div><div class=\"line\">    trustManagerFactory.init(trustStore);</div><div class=\"line\">    mSSLContext = SSLContext.getInstance(<span class=\"string\">\"TLS\"</span>);</div><div class=\"line\">    mSSLContext.init(<span class=\"keyword\">null</span>, trustManagerFactory.getTrustManagers(), <span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">    mSSLSocket = (SSLSocket) mSSLContext.getSocketFactory().createSocket(<span class=\"string\">\"yinlijun.com\"</span>, <span class=\"number\">8000</span>);</div><div class=\"line\">    mSSLSocket.startHandshake();</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (KeyManagementException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (KeyStoreException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (UnrecoverableKeyException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></project_dir></p>\n<h3 id=\"双向认证，android的代码，实现方式2，用server-crt替代server-bks\"><a href=\"#双向认证，android的代码，实现方式2，用server-crt替代server-bks\" class=\"headerlink\" title=\"双向认证，android的代码，实现方式2，用server.crt替代server.bks\"></a>双向认证，android的代码，实现方式2，用server.crt替代server.bks</h3><p>server.crt和client.p12放到<project_dir>/assets/目录下</project_dir></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    CertificateFactory cf = CertificateFactory.getInstance(<span class=\"string\">\"X.509\"</span>);</div><div class=\"line\">    InputStream caInput = <span class=\"keyword\">new</span> BufferedInputStream(getAssets().open(<span class=\"string\">\"server.crt\"</span>));</div><div class=\"line\">    <span class=\"keyword\">final</span> Certificate ca;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        ca = cf.generateCertificate(caInput);</div><div class=\"line\">        Log.i(<span class=\"string\">\"Longer\"</span>, <span class=\"string\">\"ca=\"</span> + ((X509Certificate) ca).getSubjectDN());</div><div class=\"line\">        Log.i(<span class=\"string\">\"Longer\"</span>, <span class=\"string\">\"key=\"</span> + ((X509Certificate) ca).getPublicKey());</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        caInput.close();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    KeyStore keyStore = KeyStore.getInstance(<span class=\"string\">\"PKCS12\"</span>);</div><div class=\"line\">    InputStream ksIn = getResources().getAssets().open(<span class=\"string\">\"client.p12\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        keyStore.load(ksIn, <span class=\"string\">\"123456\"</span>.toCharArray());</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ksIn.close();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ignore) &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(<span class=\"string\">\"X509\"</span>);</div><div class=\"line\">    keyManagerFactory.init(keyStore, <span class=\"string\">\"123456\"</span>.toCharArray());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Create an SSLContext that uses our TrustManager</span></div><div class=\"line\">    SSLContext context = SSLContext.getInstance(<span class=\"string\">\"TLSv1\"</span>,<span class=\"string\">\"AndroidOpenSSL\"</span>);</div><div class=\"line\">    context.init(keyManagerFactory.getKeyManagers(), <span class=\"keyword\">new</span> TrustManager[]&#123;</div><div class=\"line\">            <span class=\"keyword\">new</span> X509TrustManager() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkClientTrusted</span><span class=\"params\">(X509Certificate[] chain,</span></span></div><div class=\"line\">                                                String authType)</div><div class=\"line\">                        <span class=\"keyword\">throws</span> CertificateException &#123;</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkServerTrusted</span><span class=\"params\">(X509Certificate[] chain,</span></span></div><div class=\"line\">                                                String authType)</div><div class=\"line\">                        <span class=\"keyword\">throws</span> CertificateException &#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (X509Certificate cert : chain) &#123;</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"comment\">// Make sure that it hasn't expired.</span></div><div class=\"line\">                        cert.checkValidity();</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"comment\">// Verify the certificate's public key chain.</span></div><div class=\"line\">                        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                            cert.verify(((X509Certificate) ca).getPublicKey());</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (InvalidKeyException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (NoSuchProviderException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (SignatureException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"keyword\">public</span> X509Certificate[] getAcceptedIssuers() &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> X509Certificate[<span class=\"number\">0</span>];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">    &#125;, <span class=\"keyword\">null</span>);</div><div class=\"line\">    <span class=\"comment\">//...</span></div></pre></td></tr></table></figure>\n<p>项目地址：</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><a href=\"https://matoski.com/article/node-express-generate-ssl/\" target=\"_blank\" rel=\"external\">How to generate self-signed certificate for usage in Express4 or Node.js HTTP</a></li>\n<li><a href=\"http://blog.csdn.net/fyang2007/article/details/6180361\" target=\"_blank\" rel=\"external\">SSL证书生成方法</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/22816331\" target=\"_blank\" rel=\"external\">Android安全开发之安全使用HTTPS</a></li>\n<li><a href=\"https://developer.android.com/training/articles/security-ssl.html#nogotofail\" target=\"_blank\" rel=\"external\">通过 HTTPS 和 SSL 确保安全</a> (要翻墙)</li>\n<li><a href=\"https://nodejs.org/api/tls.html\" target=\"_blank\" rel=\"external\">https://nodejs.org/api/tls.html</a></li>\n<li><a href=\"https://gist.github.com/Frank-Zhu/41e21a00df26d63cd38d\" target=\"_blank\" rel=\"external\">https://gist.github.com/Frank-Zhu/41e21a00df26d63cd38d</a></li>\n</ul>\n","excerpt":"<p>本文介绍一个简单echo服务器的实现，服务端用nodejs，客户端用android。</p>\n<h2 id=\"用openssl一系列证书\"><a href=\"#用openssl一系列证书\" class=\"headerlink\" title=\"用openssl一系列证书\"></a><font size='6em'>用openssl一系列证书</font></h2><h3 id=\"生成自己的CA根证书\"><a href=\"#生成自己的CA根证书\" class=\"headerlink\" title=\"生成自己的CA根证书\"></a><font size='5em'>生成自己的CA根证书</font></h3><h4 id=\"生成跟证书私钥ca-key\"><a href=\"#生成跟证书私钥ca-key\" class=\"headerlink\" title=\"生成跟证书私钥ca.key\"></a><font size='4em'>生成跟证书私钥ca.key</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ openssl genrsa -des3 -out ca.key 1024</div></pre></td></tr></table></figure>\n<h4 id=\"生成X-509证书签名请求文件ca-csr\"><a href=\"#生成X-509证书签名请求文件ca-csr\" class=\"headerlink\" title=\"生成X.509证书签名请求文件ca.csr\"></a><font size='4em'>生成X.509证书签名请求文件ca.csr</font></h4><p>在生成ca.csr的过程中，会让输入一些组织信息等。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ openssl req -new -key ca.key -out ca.csr</div></pre></td></tr></table></figure></p>","more":"<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enter pass phrase for ca.key:</div><div class=\"line\">You are about to be asked to enter information that will be incorporated</div><div class=\"line\">into your certificate request.</div><div class=\"line\">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class=\"line\">There are quite a few fields but you can leave some blank</div><div class=\"line\">For some fields there will be a default value,</div><div class=\"line\">If you enter &apos;.&apos;, the field will be left blank.</div><div class=\"line\">-----</div><div class=\"line\">Country Name (2 letter code) [AU]:CN</div><div class=\"line\">State or Province Name (full name) [Some-State]:GuangDong</div><div class=\"line\">Locality Name (eg, city) []:ShenZhen</div><div class=\"line\">Organization Name (eg, company) [Internet Widgits Pty Ltd]:IBoxPay</div><div class=\"line\">Organizational Unit Name (eg, section) []:IBoxPay</div><div class=\"line\">Common Name (e.g. server FQDN or YOUR name) []:</div><div class=\"line\">Email Address []:admin@iboxpay.com</div><div class=\"line\"></div><div class=\"line\">Please enter the following &apos;extra&apos; attributes</div><div class=\"line\">to be sent with your certificate request</div><div class=\"line\">A challenge password []:</div><div class=\"line\">An optional company name []:</div></pre></td></tr></table></figure></p>\n<h4 id=\"生成X-509格式的CA根证书ca-crt\"><a href=\"#生成X-509格式的CA根证书ca-crt\" class=\"headerlink\" title=\"生成X.509格式的CA根证书ca.crt\"></a><font size='4em'>生成X.509格式的CA根证书ca.crt</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ openssl x509 -req -days 365 -in ca.csr -out ca.crt -signkey ca.key</div></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Signature ok</div><div class=\"line\">subject=/C=CN/ST=GuangDong/L=ShenZhen/O=IBoxPay/OU=IBoxPay/emailAddress=admin@iboxpay.com</div><div class=\"line\">Getting Private key</div><div class=\"line\">Enter pass phrase for ca.key:</div></pre></td></tr></table></figure></p>\n<h3 id=\"生成服务端的证书\"><a href=\"#生成服务端的证书\" class=\"headerlink\" title=\"生成服务端的证书\"></a><font size='5em'>生成服务端的证书</font></h3><h4 id=\"生成服务端私钥文件-server-key\"><a href=\"#生成服务端私钥文件-server-key\" class=\"headerlink\" title=\"生成服务端私钥文件 server.key\"></a><font size='4em'>生成服务端私钥文件 server.key</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ openssl genrsa -des3 -out server.key 1024</div></pre></td></tr></table></figure>\n<h4 id=\"服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server-csr\"><a href=\"#服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server-csr\" class=\"headerlink\" title=\"服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server.csr\"></a><font size='4em'>服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server.csr</font></h4><p>这一步需要填写一个组织信息，不要跟根证书的组织的一样。另外Common Name填一个自己的域名（如果没有实际的域名也可以写，后面在/etc/hosts映射一个，我写的就是yinlijun.com），不要填localhost，android会报错。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl req -new -key server.key -out server.csr</div></pre></td></tr></table></figure></p>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enter pass phrase for server.key:</div><div class=\"line\">You are about to be asked to enter information that will be incorporated</div><div class=\"line\">into your certificate request.</div><div class=\"line\">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class=\"line\">There are quite a few fields but you can leave some blank</div><div class=\"line\">For some fields there will be a default value,</div><div class=\"line\">If you enter &apos;.&apos;, the field will be left blank.</div><div class=\"line\">-----</div><div class=\"line\">Country Name (2 letter code) [AU]:CN</div><div class=\"line\">State or Province Name (full name) [Some-State]:GuangDong</div><div class=\"line\">Locality Name (eg, city) []:ShenZhen</div><div class=\"line\">Organization Name (eg, company) [Internet Widgits Pty Ltd]:yinlijun</div><div class=\"line\">Organizational Unit Name (eg, section) []:yinlijun</div><div class=\"line\">Common Name (e.g. server FQDN or YOUR name) []:yinlijun.com</div><div class=\"line\">Email Address []:admin@yinlijun.com</div><div class=\"line\"></div><div class=\"line\">Please enter the following &apos;extra&apos; attributes</div><div class=\"line\">to be sent with your certificate request</div><div class=\"line\">A challenge password []:</div></pre></td></tr></table></figure></p>\n<h4 id=\"删除私钥的密码，这一步非常重要，一定要执行-否则会影响后面的步骤。\"><a href=\"#删除私钥的密码，这一步非常重要，一定要执行-否则会影响后面的步骤。\" class=\"headerlink\" title=\"删除私钥的密码，这一步非常重要，一定要执行,否则会影响后面的步骤。\"></a><font size='4em'>删除私钥的密码，这一步非常<strong>重要</strong>，一定要执行,否则会影响后面的步骤。</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cp server.key server.key.passphrase</div><div class=\"line\">$ openssl rsa -in server.key.passphrase -out server.key</div></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enter pass phrase for server.key.passphrase:</div><div class=\"line\">writing RSA key</div></pre></td></tr></table></figure></p>\n<h4 id=\"签发服务器证书server-crt：\"><a href=\"#签发服务器证书server-crt：\" class=\"headerlink\" title=\"签发服务器证书server.crt：\"></a><font size='4em'>签发服务器证书server.crt：</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt</div></pre></td></tr></table></figure>\n<p>输出如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Signature ok</div><div class=\"line\">subject=/C=CN/ST=GuangDong/L=ShenZhen/O=yinlijun/OU=yinlijun/CN=yinlijun.com/emailAddress=admin@yinlijun.com</div><div class=\"line\">Getting Private key</div></pre></td></tr></table></figure></p>\n<p>到现在为止，你目录下的文件应该有：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls -la</div><div class=\"line\">total 36</div><div class=\"line\">drwxr-xr-x  2 user user 4096 Sep  5 16:19 .</div><div class=\"line\">drwxr-xr-x 12 user user 4096 Sep  5 16:09 ..</div><div class=\"line\">-rw-r--r--  1 user user  757 Sep  5 16:12 ca.crt</div><div class=\"line\">-rw-r--r--  1 user user  603 Sep  5 16:10 ca.csr</div><div class=\"line\">-rw-r--r--  1 user user  963 Sep  5 16:09 ca.key</div><div class=\"line\">-rw-r--r--  1 user user  757 Sep  5 16:19 server.crt</div><div class=\"line\">-rw-r--r--  1 user user  603 Sep  5 16:16 server.csr</div><div class=\"line\">-rw-r--r--  1 user user  887 Sep  5 16:18 server.key</div><div class=\"line\">-rw-r--r--  1 user user  951 Sep  5 16:17 server.key.passphrase</div></pre></td></tr></table></figure></p>\n<h4 id=\"生成之后察看服务器证书信息。\"><a href=\"#生成之后察看服务器证书信息。\" class=\"headerlink\" title=\"生成之后察看服务器证书信息。\"></a>生成之后察看服务器证书信息。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl x509 -in server.crt -text -noout</div></pre></td></tr></table></figure>\n<h4 id=\"生成服务器的pfx文件，这个文件node服务器要用到。\"><a href=\"#生成服务器的pfx文件，这个文件node服务器要用到。\" class=\"headerlink\" title=\"生成服务器的pfx文件，这个文件node服务器要用到。\"></a>生成服务器的pfx文件，这个文件node服务器要用到。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl pkcs12 -export -in server.crt -inkey server.key -certfile ca.crt -out server.pfx</div></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enter Export Password:</div><div class=\"line\">Verifying - Enter Export Password:</div></pre></td></tr></table></figure></p>\n<h4 id=\"生成服务端的p12文件。，这个是为了生成服务端bks文件用的\"><a href=\"#生成服务端的p12文件。，这个是为了生成服务端bks文件用的\" class=\"headerlink\" title=\"生成服务端的p12文件。，这个是为了生成服务端bks文件用的\"></a>生成服务端的p12文件。，这个是为了生成服务端bks文件用的</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl pkcs12 -export -clcerts -in server.crt -inkey server.key -out server.p12</div></pre></td></tr></table></figure>\n<h3 id=\"下载一个bcprov-jdk16-141-jar，也是为了生成服务端bks文件要用到的。\"><a href=\"#下载一个bcprov-jdk16-141-jar，也是为了生成服务端bks文件要用到的。\" class=\"headerlink\" title=\"下载一个bcprov-jdk16-141.jar，也是为了生成服务端bks文件要用到的。\"></a>下载一个bcprov-jdk16-141.jar，也是为了生成服务端bks文件要用到的。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">下载地址：[http://www.java2s.com/Code/JarDownload/bcprov/bcprov-jdk16-141.jar.zip](http://www.java2s.com/Code/JarDownload/bcprov/bcprov-jdk16-141.jar.zip)</div></pre></td></tr></table></figure>\n<h3 id=\"生成服务端的bks文件，这个android程序要用到\"><a href=\"#生成服务端的bks文件，这个android程序要用到\" class=\"headerlink\" title=\"生成服务端的bks文件，这个android程序要用到\"></a>生成服务端的bks文件，这个android程序要用到</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">keytool -importkeystore -srckeystore server.p12 -srcstoretype pkcs12 -destkeystore server.bks -deststoretype bks -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath bcprov-jdk16-141.jar</div></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">输入目标密钥库口令:  </div><div class=\"line\">再次输入新密码: </div><div class=\"line\">输入源密钥库口令:  </div><div class=\"line\">已成功导入别名 1 项。</div><div class=\"line\">已完成导入命令: 1 项成功导入，0 项失败或取消</div></pre></td></tr></table></figure></p>\n<p>因为要进行双向验证，还需要生成客户端证书。</p>\n<h4 id=\"生成客户端密钥\"><a href=\"#生成客户端密钥\" class=\"headerlink\" title=\"生成客户端密钥\"></a>生成客户端密钥</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl genrsa -des3 -out client.key 1024</div></pre></td></tr></table></figure>\n<h4 id=\"生成客户端证书请求签名文件\"><a href=\"#生成客户端证书请求签名文件\" class=\"headerlink\" title=\"生成客户端证书请求签名文件\"></a>生成客户端证书请求签名文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl req -new -out client.csr -key client.key</div></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enter pass phrase for client.key:</div><div class=\"line\">You are about to be asked to enter information that will be incorporated</div><div class=\"line\">into your certificate request.</div><div class=\"line\">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class=\"line\">There are quite a few fields but you can leave some blank</div><div class=\"line\">For some fields there will be a default value,</div><div class=\"line\">If you enter &apos;.&apos;, the field will be left blank.</div><div class=\"line\">-----</div><div class=\"line\">Country Name (2 letter code) [AU]:CN</div><div class=\"line\">State or Province Name (full name) [Some-State]:GuangDong </div><div class=\"line\">Locality Name (eg, city) []:ShenZhen</div><div class=\"line\">Organization Name (eg, company) [Internet Widgits Pty Ltd]:ruochen</div><div class=\"line\">Organizational Unit Name (eg, section) []:ruochen</div><div class=\"line\">Common Name (e.g. server FQDN or YOUR name) []:</div><div class=\"line\">Email Address []:admin@ruochen.com</div><div class=\"line\"></div><div class=\"line\">Please enter the following &apos;extra&apos; attributes</div><div class=\"line\">to be sent with your certificate request</div><div class=\"line\">A challenge password []:</div><div class=\"line\">An optional company name []:</div></pre></td></tr></table></figure></p>\n<h4 id=\"创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。\"><a href=\"#创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。\" class=\"headerlink\" title=\"创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。\"></a>创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl x509 -req -in client.csr -out client.cert -signkey client.key -CA ca.crt -CAkey ca.key -CAcreateserial -days 3650</div></pre></td></tr></table></figure>\n<p>输入如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Signature ok</div><div class=\"line\">subject=/C=CN/ST=GuangDong/L=ShenZhen/O=ruochen/OU=ruochen/emailAddress=admin@ruochen.com</div><div class=\"line\">Getting Private key</div><div class=\"line\">Enter pass phrase for client.key:</div><div class=\"line\">Getting CA Private Key</div><div class=\"line\">Enter pass phrase for ca.key:</div><div class=\"line\">yinlijun@yinlijun:~/personal_github/echo-https-server/keys$ ls</div><div class=\"line\">ca.crt  ca.csr  ca.key  ca.srl  client.cert  client.csr  client.key  server.crt  server.csr  server.key  server.key.passphrase  server.pfx</div><div class=\"line\">yinlijun@yinlijun:~/personal_github/echo-https-server/keys$ openssl pkcs12 -export -clcerts -in client.cert -inkey client.key -out client.p12</div><div class=\"line\">Enter pass phrase for client.key:</div><div class=\"line\">Enter Export Password:</div><div class=\"line\">Verifying - Enter Export Password:</div></pre></td></tr></table></figure></p>\n<h4 id=\"生成浏览器支持的p12文件\"><a href=\"#生成浏览器支持的p12文件\" class=\"headerlink\" title=\"生成浏览器支持的p12文件\"></a>生成浏览器支持的p12文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl pkcs12 -export -clcerts -in client.cert -inkey client.key -out client.p12</div></pre></td></tr></table></figure>\n<h4 id=\"将客户端证书文件client-crt和客户端证书密钥文件client-key合并成客户端证书安装包client-pfx\"><a href=\"#将客户端证书文件client-crt和客户端证书密钥文件client-key合并成客户端证书安装包client-pfx\" class=\"headerlink\" title=\"将客户端证书文件client.crt和客户端证书密钥文件client.key合并成客户端证书安装包client.pfx\"></a>将客户端证书文件client.crt和客户端证书密钥文件client.key合并成客户端证书安装包client.pfx</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl pkcs12 -export -in client.crt -inkey client.key -out client.pfx</div></pre></td></tr></table></figure>\n<p>以上的文件我只用到了一部分，应该有替代关系，具体我也搞不清楚:)。 不同的实现方式有用到不同的文件。<br>我的android客户端用到了</p>\n<ul>\n<li>server.bks</li>\n<li>client.p12</li>\n</ul>\n<p>看了网上的一些例子，好像server.bks可以用server.crt替代。</p>\n<p>node用到了</p>\n<ul>\n<li>server.pfx</li>\n</ul>\n<p>察看node的文档，server.pfx可以用server.crt和server.key替代。</p>\n<h2 id=\"服务端（nodejs）的代码\"><a href=\"#服务端（nodejs）的代码\" class=\"headerlink\" title=\"服务端（nodejs）的代码\"></a>服务端（nodejs）的代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> https =<span class=\"built_in\">require</span>(<span class=\"string\">'https'</span>), fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">    key: fs.readFileSync(<span class=\"string\">'./keys/server.key'</span>),</div><div class=\"line\">    cert: fs.readFileSync(<span class=\"string\">'./keys/server.crt'</span>),</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"keyword\">var</span> server = https.createServer(options, app);</div><div class=\"line\">server.listen(<span class=\"number\">443</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Https server listening on port '</span> + <span class=\"number\">443</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"android应用自有证书的验证方式\"><a href=\"#android应用自有证书的验证方式\" class=\"headerlink\" title=\"android应用自有证书的验证方式\"></a>android应用自有证书的验证方式</h2><p>将服务端证书拷贝到app资源目录下，一般是<project_dir>/assets/server.crt</p>\n<h3 id=\"方法一：直接根据server-crt初始化TrustManagerFactory\"><a href=\"#方法一：直接根据server-crt初始化TrustManagerFactory\" class=\"headerlink\" title=\"方法一：直接根据server.crt初始化TrustManagerFactory\"></a>方法一：直接根据server.crt初始化TrustManagerFactory</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">    CertificateFactory cf = CertificateFactory.getInstance(<span class=\"string\">\"X.509\"</span>);</div><div class=\"line\">    InputStream caInput = <span class=\"keyword\">new</span> BufferedInputStream(getAssets().open(<span class=\"string\">\"server.crt\"</span>));</div><div class=\"line\">    <span class=\"keyword\">final</span> Certificate ca;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        ca = cf.generateCertificate(caInput);</div><div class=\"line\">        Log.i(TAG, <span class=\"string\">\"ca=\"</span> + ((X509Certificate) ca).getSubjectDN());</div><div class=\"line\">        Log.i(TAG, <span class=\"string\">\"key=\"</span> + ((X509Certificate) ca).getPublicKey());</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        caInput.close();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    String keyStoreType = KeyStore.getDefaultType();</div><div class=\"line\">    Log.d(TAG, <span class=\"string\">\"keystore type:\"</span> + keyStoreType);</div><div class=\"line\">    KeyStore keyStore = KeyStore.getInstance(keyStoreType);</div><div class=\"line\">    keyStore.load(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">    keyStore.setCertificateEntry(<span class=\"string\">\"cert\"</span>, ca);</div><div class=\"line\"></div><div class=\"line\">    String tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();</div><div class=\"line\">    Log.d(TAG, <span class=\"string\">\"tmfAlgorithm:\"</span> + tmfAlgorithm);</div><div class=\"line\">    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(tmfAlgorithm);</div><div class=\"line\">    trustManagerFactory.init(keyStore);</div><div class=\"line\"></div><div class=\"line\">    mSSLContext = SSLContext.getInstance(<span class=\"string\">\"TLS\"</span>);</div><div class=\"line\">    mSSLContext.init(<span class=\"keyword\">null</span>, trustManagerFactory.getTrustManagers(), <span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">    URL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"https://yinlijun.com\"</span>);</div><div class=\"line\">    HttpsURLConnection urlConnection =</div><div class=\"line\">            (HttpsURLConnection)url.openConnection();</div><div class=\"line\">    urlConnection.setSSLSocketFactory(mSSLContext.getSocketFactory());</div><div class=\"line\">    InputStream in = urlConnection.getInputStream();</div><div class=\"line\">    copyInputStreamToOutputStream(in, System.out);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (CertificateException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (KeyManagementException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (KeyStoreException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>copyInputStreamToOutputStream方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">copyInputStreamToOutputStream</span><span class=\"params\">(InputStream in, PrintStream out)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</div><div class=\"line\">    <span class=\"keyword\">int</span> c = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> ((c = in.read(buffer)) != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">        out.write(buffer, <span class=\"number\">0</span>, c);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    CertificateFactory cf = CertificateFactory.getInstance(<span class=\"string\">\"X.509\"</span>);</div><div class=\"line\">    InputStream caInput = <span class=\"keyword\">new</span> BufferedInputStream(getAssets().open(<span class=\"string\">\"server.crt\"</span>));</div><div class=\"line\">    <span class=\"keyword\">final</span> Certificate ca;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        ca = cf.generateCertificate(caInput);</div><div class=\"line\">        Log.i(<span class=\"string\">\"Longer\"</span>, <span class=\"string\">\"ca=\"</span> + ((X509Certificate) ca).getSubjectDN());</div><div class=\"line\">        Log.i(<span class=\"string\">\"Longer\"</span>, <span class=\"string\">\"key=\"</span> + ((X509Certificate) ca).getPublicKey());</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        caInput.close();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Create an SSLContext that uses our TrustManager</span></div><div class=\"line\">    SSLContext context = SSLContext.getInstance(<span class=\"string\">\"TLSv1\"</span>,<span class=\"string\">\"AndroidOpenSSL\"</span>);</div><div class=\"line\">    context.init(<span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> TrustManager[]&#123;</div><div class=\"line\">            <span class=\"keyword\">new</span> X509TrustManager() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkClientTrusted</span><span class=\"params\">(X509Certificate[] chain,</div><div class=\"line\">                                                String authType)</span></div><div class=\"line\">                        <span class=\"keyword\">throws</span> CertificateException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkServerTrusted</span><span class=\"params\">(X509Certificate[] chain,</div><div class=\"line\">                                                String authType)</span></div><div class=\"line\">                        <span class=\"keyword\">throws</span> CertificateException </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (X509Certificate cert : chain) &#123;</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"comment\">// Make sure that it hasn't expired.</span></div><div class=\"line\">                        cert.checkValidity();</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"comment\">// Verify the certificate's public key chain.</span></div><div class=\"line\">                        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                            cert.verify(((X509Certificate) ca).getPublicKey());</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (InvalidKeyException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (NoSuchProviderException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (SignatureException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"keyword\">public</span> X509Certificate[] getAcceptedIssuers() &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> X509Certificate[<span class=\"number\">0</span>];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">    &#125;, <span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">    URL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"https://yinlijun.com/\"</span>);</div><div class=\"line\">    HttpsURLConnection urlConnection =</div><div class=\"line\">            (HttpsURLConnection)url.openConnection();</div><div class=\"line\">    urlConnection.setSSLSocketFactory(context.getSocketFactory());</div><div class=\"line\">    InputStream in = urlConnection.getInputStream();</div><div class=\"line\">    copyInputStreamToOutputStream(in, System.out);</div></pre></td></tr></table></figure>\n<h2 id=\"双向认证\"><a href=\"#双向认证\" class=\"headerlink\" title=\"双向认证\"></a>双向认证</h2><p>单向验证只能验证服务器，如果服务器也想对客户端进行验证，即所谓（双向验证），需要在连接是一起发送客户端证书。</p>\n<h3 id=\"双向认证，服务器代码\"><a href=\"#双向认证，服务器代码\" class=\"headerlink\" title=\"双向认证，服务器代码\"></a>双向认证，服务器代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> tls = <span class=\"built_in\">require</span>(<span class=\"string\">'tls'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> options = &#123;</div><div class=\"line\">  pfx: fs.readFileSync(<span class=\"string\">'./server.pfx'</span>),</div><div class=\"line\">  passphrase: <span class=\"string\">\"123456\"</span>,</div><div class=\"line\">  <span class=\"comment\">// This is necessary only if using the client certificate authentication.</span></div><div class=\"line\">  requestCert: <span class=\"literal\">true</span>,</div><div class=\"line\">  rejectUnauthorized: <span class=\"literal\">true</span> <span class=\"comment\">//如果接受也非认证链接，可以删除此行。</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//需要双向认证才需要配置requestCert为true。</span></div><div class=\"line\"><span class=\"keyword\">const</span> server = tls.createServer(options, (socket) =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'server connected'</span>,</div><div class=\"line\">              socket.authorized ? <span class=\"string\">'authorized'</span> : <span class=\"string\">'unauthorized'</span>);</div><div class=\"line\">  socket.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\">  socket.on(<span class=\"string\">'data'</span>, (data) =&gt; &#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">      socket.write(data);</div><div class=\"line\">  &#125;);</div><div class=\"line\">  socket.on(<span class=\"string\">'end'</span>, (socket) =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"socket closed\"</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.listen(<span class=\"number\">8000</span>, () =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'server bound'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"双向认证，android的代码，实现方式一\"><a href=\"#双向认证，android的代码，实现方式一\" class=\"headerlink\" title=\"双向认证，android的代码，实现方式一\"></a>双向认证，android的代码，实现方式一</h3><p>server.pfx和client.p12放到<project_dir>/assets/目录下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    KeyStore trustStore = KeyStore.getInstance(<span class=\"string\">\"bks\"</span>);</div><div class=\"line\">    InputStream tsIn = getResources().getAssets().open(<span class=\"string\">\"server.bks\"</span>);</div><div class=\"line\"></div><div class=\"line\">    KeyStore keyStore = KeyStore.getInstance(<span class=\"string\">\"PKCS12\"</span>);</div><div class=\"line\">    InputStream ksIn = getResources().getAssets().open(<span class=\"string\">\"client.p12\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        keyStore.load(ksIn, <span class=\"string\">\"123456\"</span>.toCharArray());</div><div class=\"line\">        trustStore.load(tsIn, <span class=\"string\">\"123456\"</span>.toCharArray());</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ksIn.close();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ignore) &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            tsIn.close();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ignore) &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(<span class=\"string\">\"X509\"</span>);</div><div class=\"line\">    keyManagerFactory.init(keyStore, <span class=\"string\">\"123456\"</span>.toCharArray());</div><div class=\"line\">    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());</div><div class=\"line\">    trustManagerFactory.init(trustStore);</div><div class=\"line\">    mSSLContext = SSLContext.getInstance(<span class=\"string\">\"TLS\"</span>);</div><div class=\"line\">    mSSLContext.init(<span class=\"keyword\">null</span>, trustManagerFactory.getTrustManagers(), <span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">    mSSLSocket = (SSLSocket) mSSLContext.getSocketFactory().createSocket(<span class=\"string\">\"yinlijun.com\"</span>, <span class=\"number\">8000</span>);</div><div class=\"line\">    mSSLSocket.startHandshake();</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (KeyManagementException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (KeyStoreException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (UnrecoverableKeyException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"双向认证，android的代码，实现方式2，用server-crt替代server-bks\"><a href=\"#双向认证，android的代码，实现方式2，用server-crt替代server-bks\" class=\"headerlink\" title=\"双向认证，android的代码，实现方式2，用server.crt替代server.bks\"></a>双向认证，android的代码，实现方式2，用server.crt替代server.bks</h3><p>server.crt和client.p12放到<project_dir>/assets/目录下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    CertificateFactory cf = CertificateFactory.getInstance(<span class=\"string\">\"X.509\"</span>);</div><div class=\"line\">    InputStream caInput = <span class=\"keyword\">new</span> BufferedInputStream(getAssets().open(<span class=\"string\">\"server.crt\"</span>));</div><div class=\"line\">    <span class=\"keyword\">final</span> Certificate ca;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        ca = cf.generateCertificate(caInput);</div><div class=\"line\">        Log.i(<span class=\"string\">\"Longer\"</span>, <span class=\"string\">\"ca=\"</span> + ((X509Certificate) ca).getSubjectDN());</div><div class=\"line\">        Log.i(<span class=\"string\">\"Longer\"</span>, <span class=\"string\">\"key=\"</span> + ((X509Certificate) ca).getPublicKey());</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        caInput.close();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    KeyStore keyStore = KeyStore.getInstance(<span class=\"string\">\"PKCS12\"</span>);</div><div class=\"line\">    InputStream ksIn = getResources().getAssets().open(<span class=\"string\">\"client.p12\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        keyStore.load(ksIn, <span class=\"string\">\"123456\"</span>.toCharArray());</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ksIn.close();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ignore) &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(<span class=\"string\">\"X509\"</span>);</div><div class=\"line\">    keyManagerFactory.init(keyStore, <span class=\"string\">\"123456\"</span>.toCharArray());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Create an SSLContext that uses our TrustManager</span></div><div class=\"line\">    SSLContext context = SSLContext.getInstance(<span class=\"string\">\"TLSv1\"</span>,<span class=\"string\">\"AndroidOpenSSL\"</span>);</div><div class=\"line\">    context.init(keyManagerFactory.getKeyManagers(), <span class=\"keyword\">new</span> TrustManager[]&#123;</div><div class=\"line\">            <span class=\"keyword\">new</span> X509TrustManager() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkClientTrusted</span><span class=\"params\">(X509Certificate[] chain,</div><div class=\"line\">                                                String authType)</span></div><div class=\"line\">                        <span class=\"keyword\">throws</span> CertificateException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkServerTrusted</span><span class=\"params\">(X509Certificate[] chain,</div><div class=\"line\">                                                String authType)</span></div><div class=\"line\">                        <span class=\"keyword\">throws</span> CertificateException </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (X509Certificate cert : chain) &#123;</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"comment\">// Make sure that it hasn't expired.</span></div><div class=\"line\">                        cert.checkValidity();</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"comment\">// Verify the certificate's public key chain.</span></div><div class=\"line\">                        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                            cert.verify(((X509Certificate) ca).getPublicKey());</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (InvalidKeyException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (NoSuchProviderException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (SignatureException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"keyword\">public</span> X509Certificate[] getAcceptedIssuers() &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> X509Certificate[<span class=\"number\">0</span>];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">    &#125;, <span class=\"keyword\">null</span>);</div><div class=\"line\">    <span class=\"comment\">//...</span></div></pre></td></tr></table></figure>\n<p>项目地址：</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><a href=\"https://matoski.com/article/node-express-generate-ssl/\">How to generate self-signed certificate for usage in Express4 or Node.js HTTP</a></li>\n<li><a href=\"http://blog.csdn.net/fyang2007/article/details/6180361\">SSL证书生成方法</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/22816331\">Android安全开发之安全使用HTTPS</a></li>\n<li><a href=\"https://developer.android.com/training/articles/security-ssl.html#nogotofail\">通过 HTTPS 和 SSL 确保安全</a> (要翻墙)</li>\n<li><a href=\"https://nodejs.org/api/tls.html\">https://nodejs.org/api/tls.html</a></li>\n<li><a href=\"https://gist.github.com/Frank-Zhu/41e21a00df26d63cd38d\">https://gist.github.com/Frank-Zhu/41e21a00df26d63cd38d</a></li>\n</ul>"},{"title":"解决 /dev/kvm is not found 的问题","date":"2016-11-28T11:44:23.000Z","_content":"\n## 问题出现环境\n- Ubuntu 12.04\n- Android Studio 2.2.2\n\n## 解决步骤\n### 开启VT-x\n在ubuntu上使用Android Studio创建模拟器时，会提示一个错误：\n```\n/dev/kvm is not found\n```\n并且提示要在*BIOS*里面开启<font size='4em'>**VT-x**</font>。\n\n<!-- more -->\n重启电脑，按*DEL*键进入*BIOS*,发现确实没有启用，于是启用后再此重启电脑。\n\n此时打开Android Studio，仍然提示一样的错误。\n\n再次在网上搜寻，发现如下解决方案，记录一下。\n\n[http://askubuntu.com/questions/600727/replacement-for-haxm-on-ubuntu-says-intel-x86-emulator-accelerator-is-not-comp](http://askubuntu.com/questions/600727/replacement-for-haxm-on-ubuntu-says-intel-x86-emulator-accelerator-is-not-comp)\n\n### \nCheck if your CPU supports hardware virtualization, by typing:\n```\negrep -c '(vmx|svm)' /proc/cpuinfo\n```\nIf the result is 0, your CPU does not support hardware virtualization, which is necessary to run the KVM. If you get 1 or more, that means you’re fine.\n\nNext, install KVM. First make sure if your processor supports KVM by typing:\n```\nkvm-ok\n```\nYou will see this if that’s the case:\n\nINFO: Your CPU supports KVM extensions INFO: /dev/kvm exists KVM acceleration can be used\nIf this is the result, you need to turn on Intel VT in BIOS:\n\nINFO: KVM is disabled by your BIOS HINT: Enter your BIOS setup and enable Virtualization Technology (VT), and then hard poweroff/poweron your system KVM acceleration can NOT be used\nThe next step is to install the KVM and a few other packages needed. To do so, type:\n```\nsudo apt-get install qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils\n```\nAdd your user to some groups, replacing by your own username:\n```\nsudo adduser <user> libvirtd\nsudo adduser <user> kvm\n```\nCheck if everything is ok:\n```\nsudo virsh -c qemu:///system list\n```","source":"_posts/fix-dev-kvm-is-not-found.md","raw":"---\ntitle: 解决 /dev/kvm is not found 的问题\ntags:\n  - android\n  - ubuntu\n  - android studio\ndate: 2016-11-28 19:44:23\n---\n\n## 问题出现环境\n- Ubuntu 12.04\n- Android Studio 2.2.2\n\n## 解决步骤\n### 开启VT-x\n在ubuntu上使用Android Studio创建模拟器时，会提示一个错误：\n```\n/dev/kvm is not found\n```\n并且提示要在*BIOS*里面开启<font size='4em'>**VT-x**</font>。\n\n<!-- more -->\n重启电脑，按*DEL*键进入*BIOS*,发现确实没有启用，于是启用后再此重启电脑。\n\n此时打开Android Studio，仍然提示一样的错误。\n\n再次在网上搜寻，发现如下解决方案，记录一下。\n\n[http://askubuntu.com/questions/600727/replacement-for-haxm-on-ubuntu-says-intel-x86-emulator-accelerator-is-not-comp](http://askubuntu.com/questions/600727/replacement-for-haxm-on-ubuntu-says-intel-x86-emulator-accelerator-is-not-comp)\n\n### \nCheck if your CPU supports hardware virtualization, by typing:\n```\negrep -c '(vmx|svm)' /proc/cpuinfo\n```\nIf the result is 0, your CPU does not support hardware virtualization, which is necessary to run the KVM. If you get 1 or more, that means you’re fine.\n\nNext, install KVM. First make sure if your processor supports KVM by typing:\n```\nkvm-ok\n```\nYou will see this if that’s the case:\n\nINFO: Your CPU supports KVM extensions INFO: /dev/kvm exists KVM acceleration can be used\nIf this is the result, you need to turn on Intel VT in BIOS:\n\nINFO: KVM is disabled by your BIOS HINT: Enter your BIOS setup and enable Virtualization Technology (VT), and then hard poweroff/poweron your system KVM acceleration can NOT be used\nThe next step is to install the KVM and a few other packages needed. To do so, type:\n```\nsudo apt-get install qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils\n```\nAdd your user to some groups, replacing by your own username:\n```\nsudo adduser <user> libvirtd\nsudo adduser <user> kvm\n```\nCheck if everything is ok:\n```\nsudo virsh -c qemu:///system list\n```","slug":"fix-dev-kvm-is-not-found","published":1,"updated":"2016-11-28T11:44:23.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw7pnwsh000a3opqu20cnwnk","content":"<h2 id=\"问题出现环境\"><a href=\"#问题出现环境\" class=\"headerlink\" title=\"问题出现环境\"></a>问题出现环境</h2><ul>\n<li>Ubuntu 12.04</li>\n<li>Android Studio 2.2.2</li>\n</ul>\n<h2 id=\"解决步骤\"><a href=\"#解决步骤\" class=\"headerlink\" title=\"解决步骤\"></a>解决步骤</h2><h3 id=\"开启VT-x\"><a href=\"#开启VT-x\" class=\"headerlink\" title=\"开启VT-x\"></a>开启VT-x</h3><p>在ubuntu上使用Android Studio创建模拟器时，会提示一个错误：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/dev/kvm is not found</div></pre></td></tr></table></figure></p>\n<p>并且提示要在<em>BIOS</em>里面开启<font size=\"4em\"><strong>VT-x</strong></font>。</p>\n<a id=\"more\"></a>\n<p>重启电脑，按<em>DEL</em>键进入<em>BIOS</em>,发现确实没有启用，于是启用后再此重启电脑。</p>\n<p>此时打开Android Studio，仍然提示一样的错误。</p>\n<p>再次在网上搜寻，发现如下解决方案，记录一下。</p>\n<p><a href=\"http://askubuntu.com/questions/600727/replacement-for-haxm-on-ubuntu-says-intel-x86-emulator-accelerator-is-not-comp\" target=\"_blank\" rel=\"external\">http://askubuntu.com/questions/600727/replacement-for-haxm-on-ubuntu-says-intel-x86-emulator-accelerator-is-not-comp</a></p>\n<p>###<br>Check if your CPU supports hardware virtualization, by typing:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">egrep -c &apos;(vmx|svm)&apos; /proc/cpuinfo</div></pre></td></tr></table></figure></p>\n<p>If the result is 0, your CPU does not support hardware virtualization, which is necessary to run the KVM. If you get 1 or more, that means you’re fine.</p>\n<p>Next, install KVM. First make sure if your processor supports KVM by typing:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">kvm-ok</div></pre></td></tr></table></figure></p>\n<p>You will see this if that’s the case:</p>\n<p>INFO: Your CPU supports KVM extensions INFO: /dev/kvm exists KVM acceleration can be used<br>If this is the result, you need to turn on Intel VT in BIOS:</p>\n<p>INFO: KVM is disabled by your BIOS HINT: Enter your BIOS setup and enable Virtualization Technology (VT), and then hard poweroff/poweron your system KVM acceleration can NOT be used<br>The next step is to install the KVM and a few other packages needed. To do so, type:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils</div></pre></td></tr></table></figure></p>\n<p>Add your user to some groups, replacing by your own username:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo adduser &lt;user&gt; libvirtd</div><div class=\"line\">sudo adduser &lt;user&gt; kvm</div></pre></td></tr></table></figure></p>\n<p>Check if everything is ok:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo virsh -c qemu:///system list</div></pre></td></tr></table></figure></p>\n","excerpt":"<h2 id=\"问题出现环境\"><a href=\"#问题出现环境\" class=\"headerlink\" title=\"问题出现环境\"></a>问题出现环境</h2><ul>\n<li>Ubuntu 12.04</li>\n<li>Android Studio 2.2.2</li>\n</ul>\n<h2 id=\"解决步骤\"><a href=\"#解决步骤\" class=\"headerlink\" title=\"解决步骤\"></a>解决步骤</h2><h3 id=\"开启VT-x\"><a href=\"#开启VT-x\" class=\"headerlink\" title=\"开启VT-x\"></a>开启VT-x</h3><p>在ubuntu上使用Android Studio创建模拟器时，会提示一个错误：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/dev/kvm is not found</div></pre></td></tr></table></figure></p>\n<p>并且提示要在<em>BIOS</em>里面开启<font size='4em'><strong>VT-x</strong></font>。</p>","more":"<p>重启电脑，按<em>DEL</em>键进入<em>BIOS</em>,发现确实没有启用，于是启用后再此重启电脑。</p>\n<p>此时打开Android Studio，仍然提示一样的错误。</p>\n<p>再次在网上搜寻，发现如下解决方案，记录一下。</p>\n<p><a href=\"http://askubuntu.com/questions/600727/replacement-for-haxm-on-ubuntu-says-intel-x86-emulator-accelerator-is-not-comp\">http://askubuntu.com/questions/600727/replacement-for-haxm-on-ubuntu-says-intel-x86-emulator-accelerator-is-not-comp</a></p>\n<p>###<br>Check if your CPU supports hardware virtualization, by typing:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">egrep -c &apos;(vmx|svm)&apos; /proc/cpuinfo</div></pre></td></tr></table></figure></p>\n<p>If the result is 0, your CPU does not support hardware virtualization, which is necessary to run the KVM. If you get 1 or more, that means you’re fine.</p>\n<p>Next, install KVM. First make sure if your processor supports KVM by typing:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">kvm-ok</div></pre></td></tr></table></figure></p>\n<p>You will see this if that’s the case:</p>\n<p>INFO: Your CPU supports KVM extensions INFO: /dev/kvm exists KVM acceleration can be used<br>If this is the result, you need to turn on Intel VT in BIOS:</p>\n<p>INFO: KVM is disabled by your BIOS HINT: Enter your BIOS setup and enable Virtualization Technology (VT), and then hard poweroff/poweron your system KVM acceleration can NOT be used<br>The next step is to install the KVM and a few other packages needed. To do so, type:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils</div></pre></td></tr></table></figure></p>\n<p>Add your user to some groups, replacing by your own username:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo adduser &lt;user&gt; libvirtd</div><div class=\"line\">sudo adduser &lt;user&gt; kvm</div></pre></td></tr></table></figure></p>\n<p>Check if everything is ok:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo virsh -c qemu:///system list</div></pre></td></tr></table></figure></p>"},{"title":"android studio编译错误: *** 目标模式不含有“%”。 停止。","date":"2016-11-05T10:04:19.000Z","_content":"\nAndroid Studio NDK编译出现如下错误：\n*** target pattern contains no `%'. Stop\n中文：\n*** 目标模式不含有“%”。 停止。\n可能是obj目录的问题，需要删掉。\n在工程目录下find所有的obj目录\n```bash\nfind . -name obj\n```","source":"_posts/android-studio编译错误-目标模式不含有“-”。-停止。.md","raw":"---\ntitle: 'android studio编译错误: *** 目标模式不含有“%”。 停止。'\ndate: 2016-11-5 18:04:19\ntags: [android studio, android]\n---\n\nAndroid Studio NDK编译出现如下错误：\n*** target pattern contains no `%'. Stop\n中文：\n*** 目标模式不含有“%”。 停止。\n可能是obj目录的问题，需要删掉。\n在工程目录下find所有的obj目录\n```bash\nfind . -name obj\n```","slug":"android-studio编译错误-目标模式不含有“-”。-停止。","published":1,"updated":"2016-11-16T01:14:06.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw7pnwsl000b3opq2szxfq4g","content":"<p>Android Studio NDK编译出现如下错误：<br><strong><em> target pattern contains no `%’. Stop<br>中文：\n</em></strong> 目标模式不含有“%”。 停止。<br>可能是obj目录的问题，需要删掉。<br>在工程目录下find所有的obj目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">find . -name obj</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>Android Studio NDK编译出现如下错误：<br><strong><em> target pattern contains no `%’. Stop<br>中文：\n</em></strong> 目标模式不含有“%”。 停止。<br>可能是obj目录的问题，需要删掉。<br>在工程目录下find所有的obj目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">find . -name obj</div></pre></td></tr></table></figure></p>\n"},{"title":"锋利的jQeury 第二章-笔记","date":"2016-09-02T10:04:19.000Z","_content":"\n## 第二章 jQuery选择器\n\n### 基本选择器\n\n- `#id` 匹配id,  `$('#test')`\n- `.class` 匹配类, `$('.test')`\n- `element` 匹配标签, `$('div')`\n- `*` 匹配所有元素, `$('*')`\n- `selector1, select2,...,selectN` 匹配集合，如$('div, span, p.myClass')\n\n<!--more-->\n\n### 层次选择器\n\n- `$('ancestor decendant')` 选择后代元素\n- `$('parent > child')` 选择子元素\n- `$('prev + next')` 选择紧接在`prev`后的`next`元素，如: `$('.one + div')`，选择`one`之后的下个一个`div`同辈元素\n- `$('prev ~ siblings')` 选择prev后的所有siblings元素，如`$('#two ~ div')`选择`two`之后的所有`div`同辈元素\n\n### 过滤选择器\n\n- `:first` 选取第一个元素，它只返回一个元素。 如`$('div:first')`选取第一个div元素。\n- `:last` 选取最后一个元素，它只返回一个元素。\n- `:not(selector)` 取出所有给定选择器匹配的元素，如`$('input:not(.myClass)')`,选取`class`不是`myClass`的`input`元素\n- `:even` 选取索引为偶数的元素，索引从**0**开始\n- `:odd` 选取奇数索引元素\n- `:eq(index)` 选取指定索引元素\n- `:gt(index)` 选取大于索引的元素\n- `:lt(index)` 选取小于索引的元素\n- `:header` 选取所有标题元素 如`$(':header')`，选取网页中所有`&lt;h1>,&lt;h2>,&lt;h3>;....`\n- `:animated` 选取所有正在执行动画的元素 如：`$('div:animated')`选取正在执行动画的所有`div`元素\n- `:focus` 选取当前获取焦点的元素 如`$(':focus')`，获取当前获取焦点的元素\n\n### 内容过滤选择器\n\n- `:contains(text)` 选取文本内容含有text的元素, 如`$('div:contains(\"我\")')`,选取文本含有`我`的`div`元素\n- `:empty` 选取不包含子元素或者文本为空的元素, 如`$('div:empty')`选取不包含子元素的`div`元素\n- `:has(selector)` 选取含有选择器的所匹配的元素的元素，如`$('div:has(p)')`，选取含有`p`元素的`div`元素\n- `:parent` 选取含有子元素或文本的元素 如`$('div:parent')`,选取拥有子元素的`div`元素\n\n### 可见性过滤器\n\n- `:hidden` 选取所有不可见元素, 如`$(':hidden')`, 选取所有不可见元素，`$('input:hidden')`选取所有不可见的input元素\n- `:visible` 选取所有可见元素\n\n### 属性过滤选择器\n\n- `[attr]` 选取拥有此属性的元素, 如`$('div[id]')`, 选取拥有属性`id`的元素\n- `[attr=val]` 选取`attr`属性为`val`的元素如, `$('div[title=test]')`选取`title`为`test`的`div`元素\n- `[attr!=val]` 选取`attr`的值不为`val`的元素\n- `[attr^=val]` 选取`attr`的值以`val`开始的元素\n- `[attr$=val]` 选取`attr`的值以`val`结束的元素\n- `[attr*=val]` 选取`attr`的值包含`val`的元素\n- `[attr|=val]` 选取`attr`的值为`val`或以`val-`开始的元素\n- `[attr~=val]` 选取`attr`的值包含`' val'`的元素（注意val前面要有空格）\n- `[attr1][attr2][attrN]` 选取同时满足几个条件的元素，如`$('div[id][title$=\"test\"]')`，选取拥有属性id，并且属性title以test结束的div元素\n\n### 子元素过滤选择器\n\n- `:nth-child(index/even/odd/equation)` 选取每个父元素下的第`index`个或者奇偶子元素\n- `:first-child` 选取每个父元素的第一个子元素，如`$('ul li:first-child')`, 选择ul的第一个li元素\n- `:last-child` 选取每个父元素的子元素\n- `:only-child` 如果父控件一个子元素，那么匹配到，否则不被匹配。`$('ul li:only-child')`返回只有一个子元素且为li的li元素\n\n### 表单对象属性过滤选择器\n\n- `:enabled` 选取所有可用元素。`$('#form1 :enabled')`,选取`id`为`form1`的表单内的所有可用元素。\n- `:disbaled` 选取所有不可用元素。\n- `:checked` 选取所有被选中元素(单选框，复选框)。`$('input:checked')`,选取所有被选中的`input`元素\n- `:selected` 选取所有被选中的选项元素（下拉列表）。`$('select option:seleted')`\n\n### 表单选择器\n\n- `:input` 选取所有`&lt;input>,&lt;textarea>,&lt;select>,&lt;button>`元素。如`$('#form1 :input')`\n- `:text` 选取所有单行文本框。\n- `:password` 选取所有密码框\n- `:radio` 选取所有单选框\n- `:submit` 选取所有提交按钮\n- `:image` 选取所有的图像按钮\n- `:reset` 选取所有的重置按钮\n- `:button` 选取所有的按钮\n- `:file` 选取所有的上川域\n- `:hidden` 选取所有不可见元素\n","source":"_posts/chapter-2.md","raw":"---\ntitle: 锋利的jQeury 第二章-笔记 \ndate: 2016-9-2 18:04:19\ntags: jQuery\n---\n\n## 第二章 jQuery选择器\n\n### 基本选择器\n\n- `#id` 匹配id,  `$('#test')`\n- `.class` 匹配类, `$('.test')`\n- `element` 匹配标签, `$('div')`\n- `*` 匹配所有元素, `$('*')`\n- `selector1, select2,...,selectN` 匹配集合，如$('div, span, p.myClass')\n\n<!--more-->\n\n### 层次选择器\n\n- `$('ancestor decendant')` 选择后代元素\n- `$('parent > child')` 选择子元素\n- `$('prev + next')` 选择紧接在`prev`后的`next`元素，如: `$('.one + div')`，选择`one`之后的下个一个`div`同辈元素\n- `$('prev ~ siblings')` 选择prev后的所有siblings元素，如`$('#two ~ div')`选择`two`之后的所有`div`同辈元素\n\n### 过滤选择器\n\n- `:first` 选取第一个元素，它只返回一个元素。 如`$('div:first')`选取第一个div元素。\n- `:last` 选取最后一个元素，它只返回一个元素。\n- `:not(selector)` 取出所有给定选择器匹配的元素，如`$('input:not(.myClass)')`,选取`class`不是`myClass`的`input`元素\n- `:even` 选取索引为偶数的元素，索引从**0**开始\n- `:odd` 选取奇数索引元素\n- `:eq(index)` 选取指定索引元素\n- `:gt(index)` 选取大于索引的元素\n- `:lt(index)` 选取小于索引的元素\n- `:header` 选取所有标题元素 如`$(':header')`，选取网页中所有`&lt;h1>,&lt;h2>,&lt;h3>;....`\n- `:animated` 选取所有正在执行动画的元素 如：`$('div:animated')`选取正在执行动画的所有`div`元素\n- `:focus` 选取当前获取焦点的元素 如`$(':focus')`，获取当前获取焦点的元素\n\n### 内容过滤选择器\n\n- `:contains(text)` 选取文本内容含有text的元素, 如`$('div:contains(\"我\")')`,选取文本含有`我`的`div`元素\n- `:empty` 选取不包含子元素或者文本为空的元素, 如`$('div:empty')`选取不包含子元素的`div`元素\n- `:has(selector)` 选取含有选择器的所匹配的元素的元素，如`$('div:has(p)')`，选取含有`p`元素的`div`元素\n- `:parent` 选取含有子元素或文本的元素 如`$('div:parent')`,选取拥有子元素的`div`元素\n\n### 可见性过滤器\n\n- `:hidden` 选取所有不可见元素, 如`$(':hidden')`, 选取所有不可见元素，`$('input:hidden')`选取所有不可见的input元素\n- `:visible` 选取所有可见元素\n\n### 属性过滤选择器\n\n- `[attr]` 选取拥有此属性的元素, 如`$('div[id]')`, 选取拥有属性`id`的元素\n- `[attr=val]` 选取`attr`属性为`val`的元素如, `$('div[title=test]')`选取`title`为`test`的`div`元素\n- `[attr!=val]` 选取`attr`的值不为`val`的元素\n- `[attr^=val]` 选取`attr`的值以`val`开始的元素\n- `[attr$=val]` 选取`attr`的值以`val`结束的元素\n- `[attr*=val]` 选取`attr`的值包含`val`的元素\n- `[attr|=val]` 选取`attr`的值为`val`或以`val-`开始的元素\n- `[attr~=val]` 选取`attr`的值包含`' val'`的元素（注意val前面要有空格）\n- `[attr1][attr2][attrN]` 选取同时满足几个条件的元素，如`$('div[id][title$=\"test\"]')`，选取拥有属性id，并且属性title以test结束的div元素\n\n### 子元素过滤选择器\n\n- `:nth-child(index/even/odd/equation)` 选取每个父元素下的第`index`个或者奇偶子元素\n- `:first-child` 选取每个父元素的第一个子元素，如`$('ul li:first-child')`, 选择ul的第一个li元素\n- `:last-child` 选取每个父元素的子元素\n- `:only-child` 如果父控件一个子元素，那么匹配到，否则不被匹配。`$('ul li:only-child')`返回只有一个子元素且为li的li元素\n\n### 表单对象属性过滤选择器\n\n- `:enabled` 选取所有可用元素。`$('#form1 :enabled')`,选取`id`为`form1`的表单内的所有可用元素。\n- `:disbaled` 选取所有不可用元素。\n- `:checked` 选取所有被选中元素(单选框，复选框)。`$('input:checked')`,选取所有被选中的`input`元素\n- `:selected` 选取所有被选中的选项元素（下拉列表）。`$('select option:seleted')`\n\n### 表单选择器\n\n- `:input` 选取所有`&lt;input>,&lt;textarea>,&lt;select>,&lt;button>`元素。如`$('#form1 :input')`\n- `:text` 选取所有单行文本框。\n- `:password` 选取所有密码框\n- `:radio` 选取所有单选框\n- `:submit` 选取所有提交按钮\n- `:image` 选取所有的图像按钮\n- `:reset` 选取所有的重置按钮\n- `:button` 选取所有的按钮\n- `:file` 选取所有的上川域\n- `:hidden` 选取所有不可见元素\n","slug":"chapter-2","published":1,"updated":"2016-11-15T10:08:51.376Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw7pnwsn000d3opqojaq9htt","content":"<h2 id=\"第二章-jQuery选择器\"><a href=\"#第二章-jQuery选择器\" class=\"headerlink\" title=\"第二章 jQuery选择器\"></a>第二章 jQuery选择器</h2><h3 id=\"基本选择器\"><a href=\"#基本选择器\" class=\"headerlink\" title=\"基本选择器\"></a>基本选择器</h3><ul>\n<li><code>#id</code> 匹配id,  <code>$(&#39;#test&#39;)</code></li>\n<li><code>.class</code> 匹配类, <code>$(&#39;.test&#39;)</code></li>\n<li><code>element</code> 匹配标签, <code>$(&#39;div&#39;)</code></li>\n<li><code>*</code> 匹配所有元素, <code>$(&#39;*&#39;)</code></li>\n<li><code>selector1, select2,...,selectN</code> 匹配集合，如$(‘div, span, p.myClass’)</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"层次选择器\"><a href=\"#层次选择器\" class=\"headerlink\" title=\"层次选择器\"></a>层次选择器</h3><ul>\n<li><code>$(&#39;ancestor decendant&#39;)</code> 选择后代元素</li>\n<li><code>$(&#39;parent &gt; child&#39;)</code> 选择子元素</li>\n<li><code>$(&#39;prev + next&#39;)</code> 选择紧接在<code>prev</code>后的<code>next</code>元素，如: <code>$(&#39;.one + div&#39;)</code>，选择<code>one</code>之后的下个一个<code>div</code>同辈元素</li>\n<li><code>$(&#39;prev ~ siblings&#39;)</code> 选择prev后的所有siblings元素，如<code>$(&#39;#two ~ div&#39;)</code>选择<code>two</code>之后的所有<code>div</code>同辈元素</li>\n</ul>\n<h3 id=\"过滤选择器\"><a href=\"#过滤选择器\" class=\"headerlink\" title=\"过滤选择器\"></a>过滤选择器</h3><ul>\n<li><code>:first</code> 选取第一个元素，它只返回一个元素。 如<code>$(&#39;div:first&#39;)</code>选取第一个div元素。</li>\n<li><code>:last</code> 选取最后一个元素，它只返回一个元素。</li>\n<li><code>:not(selector)</code> 取出所有给定选择器匹配的元素，如<code>$(&#39;input:not(.myClass)&#39;)</code>,选取<code>class</code>不是<code>myClass</code>的<code>input</code>元素</li>\n<li><code>:even</code> 选取索引为偶数的元素，索引从<strong>0</strong>开始</li>\n<li><code>:odd</code> 选取奇数索引元素</li>\n<li><code>:eq(index)</code> 选取指定索引元素</li>\n<li><code>:gt(index)</code> 选取大于索引的元素</li>\n<li><code>:lt(index)</code> 选取小于索引的元素</li>\n<li><code>:header</code> 选取所有标题元素 如<code>$(&#39;:header&#39;)</code>，选取网页中所有<code>&amp;lt;h1&gt;,&amp;lt;h2&gt;,&amp;lt;h3&gt;;....</code></li>\n<li><code>:animated</code> 选取所有正在执行动画的元素 如：<code>$(&#39;div:animated&#39;)</code>选取正在执行动画的所有<code>div</code>元素</li>\n<li><code>:focus</code> 选取当前获取焦点的元素 如<code>$(&#39;:focus&#39;)</code>，获取当前获取焦点的元素</li>\n</ul>\n<h3 id=\"内容过滤选择器\"><a href=\"#内容过滤选择器\" class=\"headerlink\" title=\"内容过滤选择器\"></a>内容过滤选择器</h3><ul>\n<li><code>:contains(text)</code> 选取文本内容含有text的元素, 如<code>$(&#39;div:contains(&quot;我&quot;)&#39;)</code>,选取文本含有<code>我</code>的<code>div</code>元素</li>\n<li><code>:empty</code> 选取不包含子元素或者文本为空的元素, 如<code>$(&#39;div:empty&#39;)</code>选取不包含子元素的<code>div</code>元素</li>\n<li><code>:has(selector)</code> 选取含有选择器的所匹配的元素的元素，如<code>$(&#39;div:has(p)&#39;)</code>，选取含有<code>p</code>元素的<code>div</code>元素</li>\n<li><code>:parent</code> 选取含有子元素或文本的元素 如<code>$(&#39;div:parent&#39;)</code>,选取拥有子元素的<code>div</code>元素</li>\n</ul>\n<h3 id=\"可见性过滤器\"><a href=\"#可见性过滤器\" class=\"headerlink\" title=\"可见性过滤器\"></a>可见性过滤器</h3><ul>\n<li><code>:hidden</code> 选取所有不可见元素, 如<code>$(&#39;:hidden&#39;)</code>, 选取所有不可见元素，<code>$(&#39;input:hidden&#39;)</code>选取所有不可见的input元素</li>\n<li><code>:visible</code> 选取所有可见元素</li>\n</ul>\n<h3 id=\"属性过滤选择器\"><a href=\"#属性过滤选择器\" class=\"headerlink\" title=\"属性过滤选择器\"></a>属性过滤选择器</h3><ul>\n<li><code>[attr]</code> 选取拥有此属性的元素, 如<code>$(&#39;div[id]&#39;)</code>, 选取拥有属性<code>id</code>的元素</li>\n<li><code>[attr=val]</code> 选取<code>attr</code>属性为<code>val</code>的元素如, <code>$(&#39;div[title=test]&#39;)</code>选取<code>title</code>为<code>test</code>的<code>div</code>元素</li>\n<li><code>[attr!=val]</code> 选取<code>attr</code>的值不为<code>val</code>的元素</li>\n<li><code>[attr^=val]</code> 选取<code>attr</code>的值以<code>val</code>开始的元素</li>\n<li><code>[attr$=val]</code> 选取<code>attr</code>的值以<code>val</code>结束的元素</li>\n<li><code>[attr*=val]</code> 选取<code>attr</code>的值包含<code>val</code>的元素</li>\n<li><code>[attr|=val]</code> 选取<code>attr</code>的值为<code>val</code>或以<code>val-</code>开始的元素</li>\n<li><code>[attr~=val]</code> 选取<code>attr</code>的值包含<code>&#39; val&#39;</code>的元素（注意val前面要有空格）</li>\n<li><code>[attr1][attr2][attrN]</code> 选取同时满足几个条件的元素，如<code>$(&#39;div[id][title$=&quot;test&quot;]&#39;)</code>，选取拥有属性id，并且属性title以test结束的div元素</li>\n</ul>\n<h3 id=\"子元素过滤选择器\"><a href=\"#子元素过滤选择器\" class=\"headerlink\" title=\"子元素过滤选择器\"></a>子元素过滤选择器</h3><ul>\n<li><code>:nth-child(index/even/odd/equation)</code> 选取每个父元素下的第<code>index</code>个或者奇偶子元素</li>\n<li><code>:first-child</code> 选取每个父元素的第一个子元素，如<code>$(&#39;ul li:first-child&#39;)</code>, 选择ul的第一个li元素</li>\n<li><code>:last-child</code> 选取每个父元素的子元素</li>\n<li><code>:only-child</code> 如果父控件一个子元素，那么匹配到，否则不被匹配。<code>$(&#39;ul li:only-child&#39;)</code>返回只有一个子元素且为li的li元素</li>\n</ul>\n<h3 id=\"表单对象属性过滤选择器\"><a href=\"#表单对象属性过滤选择器\" class=\"headerlink\" title=\"表单对象属性过滤选择器\"></a>表单对象属性过滤选择器</h3><ul>\n<li><code>:enabled</code> 选取所有可用元素。<code>$(&#39;#form1 :enabled&#39;)</code>,选取<code>id</code>为<code>form1</code>的表单内的所有可用元素。</li>\n<li><code>:disbaled</code> 选取所有不可用元素。</li>\n<li><code>:checked</code> 选取所有被选中元素(单选框，复选框)。<code>$(&#39;input:checked&#39;)</code>,选取所有被选中的<code>input</code>元素</li>\n<li><code>:selected</code> 选取所有被选中的选项元素（下拉列表）。<code>$(&#39;select option:seleted&#39;)</code></li>\n</ul>\n<h3 id=\"表单选择器\"><a href=\"#表单选择器\" class=\"headerlink\" title=\"表单选择器\"></a>表单选择器</h3><ul>\n<li><code>:input</code> 选取所有<code>&amp;lt;input&gt;,&amp;lt;textarea&gt;,&amp;lt;select&gt;,&amp;lt;button&gt;</code>元素。如<code>$(&#39;#form1 :input&#39;)</code></li>\n<li><code>:text</code> 选取所有单行文本框。</li>\n<li><code>:password</code> 选取所有密码框</li>\n<li><code>:radio</code> 选取所有单选框</li>\n<li><code>:submit</code> 选取所有提交按钮</li>\n<li><code>:image</code> 选取所有的图像按钮</li>\n<li><code>:reset</code> 选取所有的重置按钮</li>\n<li><code>:button</code> 选取所有的按钮</li>\n<li><code>:file</code> 选取所有的上川域</li>\n<li><code>:hidden</code> 选取所有不可见元素</li>\n</ul>\n","excerpt":"<h2 id=\"第二章-jQuery选择器\"><a href=\"#第二章-jQuery选择器\" class=\"headerlink\" title=\"第二章 jQuery选择器\"></a>第二章 jQuery选择器</h2><h3 id=\"基本选择器\"><a href=\"#基本选择器\" class=\"headerlink\" title=\"基本选择器\"></a>基本选择器</h3><ul>\n<li><code>#id</code> 匹配id,  <code>$(&#39;#test&#39;)</code></li>\n<li><code>.class</code> 匹配类, <code>$(&#39;.test&#39;)</code></li>\n<li><code>element</code> 匹配标签, <code>$(&#39;div&#39;)</code></li>\n<li><code>*</code> 匹配所有元素, <code>$(&#39;*&#39;)</code></li>\n<li><code>selector1, select2,...,selectN</code> 匹配集合，如$(‘div, span, p.myClass’)</li>\n</ul>","more":"<h3 id=\"层次选择器\"><a href=\"#层次选择器\" class=\"headerlink\" title=\"层次选择器\"></a>层次选择器</h3><ul>\n<li><code>$(&#39;ancestor decendant&#39;)</code> 选择后代元素</li>\n<li><code>$(&#39;parent &gt; child&#39;)</code> 选择子元素</li>\n<li><code>$(&#39;prev + next&#39;)</code> 选择紧接在<code>prev</code>后的<code>next</code>元素，如: <code>$(&#39;.one + div&#39;)</code>，选择<code>one</code>之后的下个一个<code>div</code>同辈元素</li>\n<li><code>$(&#39;prev ~ siblings&#39;)</code> 选择prev后的所有siblings元素，如<code>$(&#39;#two ~ div&#39;)</code>选择<code>two</code>之后的所有<code>div</code>同辈元素</li>\n</ul>\n<h3 id=\"过滤选择器\"><a href=\"#过滤选择器\" class=\"headerlink\" title=\"过滤选择器\"></a>过滤选择器</h3><ul>\n<li><code>:first</code> 选取第一个元素，它只返回一个元素。 如<code>$(&#39;div:first&#39;)</code>选取第一个div元素。</li>\n<li><code>:last</code> 选取最后一个元素，它只返回一个元素。</li>\n<li><code>:not(selector)</code> 取出所有给定选择器匹配的元素，如<code>$(&#39;input:not(.myClass)&#39;)</code>,选取<code>class</code>不是<code>myClass</code>的<code>input</code>元素</li>\n<li><code>:even</code> 选取索引为偶数的元素，索引从<strong>0</strong>开始</li>\n<li><code>:odd</code> 选取奇数索引元素</li>\n<li><code>:eq(index)</code> 选取指定索引元素</li>\n<li><code>:gt(index)</code> 选取大于索引的元素</li>\n<li><code>:lt(index)</code> 选取小于索引的元素</li>\n<li><code>:header</code> 选取所有标题元素 如<code>$(&#39;:header&#39;)</code>，选取网页中所有<code>&amp;lt;h1&gt;,&amp;lt;h2&gt;,&amp;lt;h3&gt;;....</code></li>\n<li><code>:animated</code> 选取所有正在执行动画的元素 如：<code>$(&#39;div:animated&#39;)</code>选取正在执行动画的所有<code>div</code>元素</li>\n<li><code>:focus</code> 选取当前获取焦点的元素 如<code>$(&#39;:focus&#39;)</code>，获取当前获取焦点的元素</li>\n</ul>\n<h3 id=\"内容过滤选择器\"><a href=\"#内容过滤选择器\" class=\"headerlink\" title=\"内容过滤选择器\"></a>内容过滤选择器</h3><ul>\n<li><code>:contains(text)</code> 选取文本内容含有text的元素, 如<code>$(&#39;div:contains(&quot;我&quot;)&#39;)</code>,选取文本含有<code>我</code>的<code>div</code>元素</li>\n<li><code>:empty</code> 选取不包含子元素或者文本为空的元素, 如<code>$(&#39;div:empty&#39;)</code>选取不包含子元素的<code>div</code>元素</li>\n<li><code>:has(selector)</code> 选取含有选择器的所匹配的元素的元素，如<code>$(&#39;div:has(p)&#39;)</code>，选取含有<code>p</code>元素的<code>div</code>元素</li>\n<li><code>:parent</code> 选取含有子元素或文本的元素 如<code>$(&#39;div:parent&#39;)</code>,选取拥有子元素的<code>div</code>元素</li>\n</ul>\n<h3 id=\"可见性过滤器\"><a href=\"#可见性过滤器\" class=\"headerlink\" title=\"可见性过滤器\"></a>可见性过滤器</h3><ul>\n<li><code>:hidden</code> 选取所有不可见元素, 如<code>$(&#39;:hidden&#39;)</code>, 选取所有不可见元素，<code>$(&#39;input:hidden&#39;)</code>选取所有不可见的input元素</li>\n<li><code>:visible</code> 选取所有可见元素</li>\n</ul>\n<h3 id=\"属性过滤选择器\"><a href=\"#属性过滤选择器\" class=\"headerlink\" title=\"属性过滤选择器\"></a>属性过滤选择器</h3><ul>\n<li><code>[attr]</code> 选取拥有此属性的元素, 如<code>$(&#39;div[id]&#39;)</code>, 选取拥有属性<code>id</code>的元素</li>\n<li><code>[attr=val]</code> 选取<code>attr</code>属性为<code>val</code>的元素如, <code>$(&#39;div[title=test]&#39;)</code>选取<code>title</code>为<code>test</code>的<code>div</code>元素</li>\n<li><code>[attr!=val]</code> 选取<code>attr</code>的值不为<code>val</code>的元素</li>\n<li><code>[attr^=val]</code> 选取<code>attr</code>的值以<code>val</code>开始的元素</li>\n<li><code>[attr$=val]</code> 选取<code>attr</code>的值以<code>val</code>结束的元素</li>\n<li><code>[attr*=val]</code> 选取<code>attr</code>的值包含<code>val</code>的元素</li>\n<li><code>[attr|=val]</code> 选取<code>attr</code>的值为<code>val</code>或以<code>val-</code>开始的元素</li>\n<li><code>[attr~=val]</code> 选取<code>attr</code>的值包含<code>&#39; val&#39;</code>的元素（注意val前面要有空格）</li>\n<li><code>[attr1][attr2][attrN]</code> 选取同时满足几个条件的元素，如<code>$(&#39;div[id][title$=&quot;test&quot;]&#39;)</code>，选取拥有属性id，并且属性title以test结束的div元素</li>\n</ul>\n<h3 id=\"子元素过滤选择器\"><a href=\"#子元素过滤选择器\" class=\"headerlink\" title=\"子元素过滤选择器\"></a>子元素过滤选择器</h3><ul>\n<li><code>:nth-child(index/even/odd/equation)</code> 选取每个父元素下的第<code>index</code>个或者奇偶子元素</li>\n<li><code>:first-child</code> 选取每个父元素的第一个子元素，如<code>$(&#39;ul li:first-child&#39;)</code>, 选择ul的第一个li元素</li>\n<li><code>:last-child</code> 选取每个父元素的子元素</li>\n<li><code>:only-child</code> 如果父控件一个子元素，那么匹配到，否则不被匹配。<code>$(&#39;ul li:only-child&#39;)</code>返回只有一个子元素且为li的li元素</li>\n</ul>\n<h3 id=\"表单对象属性过滤选择器\"><a href=\"#表单对象属性过滤选择器\" class=\"headerlink\" title=\"表单对象属性过滤选择器\"></a>表单对象属性过滤选择器</h3><ul>\n<li><code>:enabled</code> 选取所有可用元素。<code>$(&#39;#form1 :enabled&#39;)</code>,选取<code>id</code>为<code>form1</code>的表单内的所有可用元素。</li>\n<li><code>:disbaled</code> 选取所有不可用元素。</li>\n<li><code>:checked</code> 选取所有被选中元素(单选框，复选框)。<code>$(&#39;input:checked&#39;)</code>,选取所有被选中的<code>input</code>元素</li>\n<li><code>:selected</code> 选取所有被选中的选项元素（下拉列表）。<code>$(&#39;select option:seleted&#39;)</code></li>\n</ul>\n<h3 id=\"表单选择器\"><a href=\"#表单选择器\" class=\"headerlink\" title=\"表单选择器\"></a>表单选择器</h3><ul>\n<li><code>:input</code> 选取所有<code>&amp;lt;input&gt;,&amp;lt;textarea&gt;,&amp;lt;select&gt;,&amp;lt;button&gt;</code>元素。如<code>$(&#39;#form1 :input&#39;)</code></li>\n<li><code>:text</code> 选取所有单行文本框。</li>\n<li><code>:password</code> 选取所有密码框</li>\n<li><code>:radio</code> 选取所有单选框</li>\n<li><code>:submit</code> 选取所有提交按钮</li>\n<li><code>:image</code> 选取所有的图像按钮</li>\n<li><code>:reset</code> 选取所有的重置按钮</li>\n<li><code>:button</code> 选取所有的按钮</li>\n<li><code>:file</code> 选取所有的上川域</li>\n<li><code>:hidden</code> 选取所有不可见元素</li>\n</ul>"},{"title":"锋利的jQeury 第四章-笔记","date":"2016-09-05T10:04:19.000Z","_content":"\n## 第四章 jQuery中的事件和动画\n\n- window.onload方法，相当于`jQuery`中的$(window).load(function(){})方法。都是等文档中的所有元素加载完成时调用，包括关联css文件和javascript文件。\n- $(document).ready(function() {})则不会等待关联文件下载完，在DOM准备好之后就会调用。\n- $(window).load(function(){})可以调用多次，都会执行，而window.onload只会调用最后一次赋予的函数。\n- $(document).ready(function() {})可以简写为$(function() {});\n\n<!--more-->\n\n### 事件绑定 \n- bind(type [, data], fn);第1个参数是事件类型，包括focus、load、click、dbclik等。，第2个参数可选，作为event.data传递，第3个参数是回调函数。示例：\n```javascript\n$(function(){\n    $('#panel h5.head').bind('click', function(e) {\n        $(this).next().show();\n    })\n})\n```\n- bind函数可以级联，如\n```javascript\n$('#panel h5.head').bind('mouseover', function(e) {\n    $(this).next().show();\n}).bind('mouseout', function(e) {\n    $(this).next().hide();\n})\n```\n- bind可以简写，如\n```javascript\n$('#panel h5.head').click(function(e) {\n    $(this).next().toggle();\n})\n```\n- 合成事件\n\n    `jQuery`有两个合成事件，hover()和toggle(),都有两个回调函数作为参数，可以看成是语法糖。hover表示移入移出两个事件，toggle表示前后两次点击事件，如\n    ```javascript\n    $('#panel h5.head').hover(function() {\n        $(this).next().show(); //划过时显示下一个元素\n    }, function() {\n        $(this).next().hide(); //划出隐藏下一个元素\n    })\n    ```\n    ```javascript\n    $('#panel h5.head').toggle(function() {\n        $(this).next().show(); //点击时显示下一个元素\n    }, function() {\n        $(this).next().hide(); //再次点击时隐藏下一个元素\n    })\n    ```\n- 事件对象的属性\n    - event.type 事件类型，字符串格式，如'click', 'dbclick', 'load'等。\n    - event.preventDefault()阻止默认行为，可以用return false代替。\n    - event.stopProgagation()组织事件冒泡，可以用return false代替。\n    - event.target 触发事件的元素。\n    - event.pageX event.pageY,相对于页面的x，y坐标。\n    - event.which 不同事件含义不同，鼠标事件表示那个键，键盘事件表示键值。\n    - event.metaKey ctl键是否按下。\n- 移除事件 unbind([type],[data]) \n    - 如果没有参数，表示删除所有事件。\n    - 如果只提供type，表示移除所有type对应的事件回调。\n    - 如果传递了2个参数，表示对应的处理函数会被删除。\n- 单次事件 one(type, [data], fn);执行一次后，事件回被移除。\n- 事件模拟\n    - 原生事件 $('#btn').trigger('click')或者$('#btn').click();\n    - 自定义事件\n    ```javascript\n    $('#btn').bind('myClick', function(){\n        $('#test').append('&lt;p>我的自定义事件&lt;/p>')\n    });\n\n    $('#btn').trigger('myClick'); //触发事件。\n    ```    \n    - 传递数据\n    ```javascript\n    $('#btn').bind('myClick', function(event, msg1, msg2){\n        $('#test').append('&lt;p>我的自定义事件&lt;/p>')\n    });\n\n    $('#btn').trigger('myClick'. ['参数1'，'参数2']); //触发事件。\n    ```   \n    - 执行默认操作 triggerHandler，例如，只触发focus事件，但是不获取焦点（浏览器默认行为）\n    ```javascript\n    $('input').triggerHandler('focus');\n    ```\n- 事件命名空间\n    - 添加命名空间\n    ```javascript\n    $('#div').bind('mouseover.plugin', function() {\n\n    })\n    $('#btn').click(function() {\n        $('#div').unbind('.plugin'); //移除上面的事件。\n    })\n    ```\n    \n## 动画\n - show(duration) 显示元素，duration不为0时，表示显示动画。将元素display属性从’none‘设置为原来的值\n - hide(duration) 隐藏元素，duration不为0时，表示隐藏动画。将元素display属性设置为'none'\n - fadeIn(duration) 与show一样，但是不改变display样式。\n - fadeOut(duration) 与hide一样，但是不改变display样式。\n - slideUp(duration)和slideDown(duration)，只改变高度。\n - animate(param, speed, callback)\n    - param 包含样式属性值，如{left: '400px', top: '400px'}，可累加或累减，如{left: '+=400px'}\n    - speed 动画时间\n    - callback 动画完成回调\n    -累加动画\n    ```javascript\n    $('#panel').animate({left:'400px', height:'200px', opacity:1}, 3000)\n        .animate({top:'200px', width:'200px'}, 3000， function() {\n            consle.log('animate done');\n        })\n        .fadeOut('slow');\n    ```\n    - 停止动画stop([clearQueue], [gotoEnd])\n    - 判断是否处于动画状态 $(element).is(':animated')\n    - 延迟动画delay(duration),延迟一段时间开始动画，$(this).animate({left:'400px'}).delay(200);\n    - 其他动画方法\n        - toggle(speed, [callback]) 显示/隐藏元素\n        - slideToggle(speed, [easing], [callback])通过改变高度来显示/隐藏元素\n        - fadeTo(speed, opacity, [callback]) 通过改变不透明度来显示/隐藏元素\n        - fadeToggle(speed, [easing], [callback]) 通过不透明度来显示/隐藏元素。\n","source":"_posts/chapter-4.md","raw":"---\ntitle: 锋利的jQeury 第四章-笔记 \ndate: 2016-9-5 18:04:19\ntags: jQuery\n---\n\n## 第四章 jQuery中的事件和动画\n\n- window.onload方法，相当于`jQuery`中的$(window).load(function(){})方法。都是等文档中的所有元素加载完成时调用，包括关联css文件和javascript文件。\n- $(document).ready(function() {})则不会等待关联文件下载完，在DOM准备好之后就会调用。\n- $(window).load(function(){})可以调用多次，都会执行，而window.onload只会调用最后一次赋予的函数。\n- $(document).ready(function() {})可以简写为$(function() {});\n\n<!--more-->\n\n### 事件绑定 \n- bind(type [, data], fn);第1个参数是事件类型，包括focus、load、click、dbclik等。，第2个参数可选，作为event.data传递，第3个参数是回调函数。示例：\n```javascript\n$(function(){\n    $('#panel h5.head').bind('click', function(e) {\n        $(this).next().show();\n    })\n})\n```\n- bind函数可以级联，如\n```javascript\n$('#panel h5.head').bind('mouseover', function(e) {\n    $(this).next().show();\n}).bind('mouseout', function(e) {\n    $(this).next().hide();\n})\n```\n- bind可以简写，如\n```javascript\n$('#panel h5.head').click(function(e) {\n    $(this).next().toggle();\n})\n```\n- 合成事件\n\n    `jQuery`有两个合成事件，hover()和toggle(),都有两个回调函数作为参数，可以看成是语法糖。hover表示移入移出两个事件，toggle表示前后两次点击事件，如\n    ```javascript\n    $('#panel h5.head').hover(function() {\n        $(this).next().show(); //划过时显示下一个元素\n    }, function() {\n        $(this).next().hide(); //划出隐藏下一个元素\n    })\n    ```\n    ```javascript\n    $('#panel h5.head').toggle(function() {\n        $(this).next().show(); //点击时显示下一个元素\n    }, function() {\n        $(this).next().hide(); //再次点击时隐藏下一个元素\n    })\n    ```\n- 事件对象的属性\n    - event.type 事件类型，字符串格式，如'click', 'dbclick', 'load'等。\n    - event.preventDefault()阻止默认行为，可以用return false代替。\n    - event.stopProgagation()组织事件冒泡，可以用return false代替。\n    - event.target 触发事件的元素。\n    - event.pageX event.pageY,相对于页面的x，y坐标。\n    - event.which 不同事件含义不同，鼠标事件表示那个键，键盘事件表示键值。\n    - event.metaKey ctl键是否按下。\n- 移除事件 unbind([type],[data]) \n    - 如果没有参数，表示删除所有事件。\n    - 如果只提供type，表示移除所有type对应的事件回调。\n    - 如果传递了2个参数，表示对应的处理函数会被删除。\n- 单次事件 one(type, [data], fn);执行一次后，事件回被移除。\n- 事件模拟\n    - 原生事件 $('#btn').trigger('click')或者$('#btn').click();\n    - 自定义事件\n    ```javascript\n    $('#btn').bind('myClick', function(){\n        $('#test').append('&lt;p>我的自定义事件&lt;/p>')\n    });\n\n    $('#btn').trigger('myClick'); //触发事件。\n    ```    \n    - 传递数据\n    ```javascript\n    $('#btn').bind('myClick', function(event, msg1, msg2){\n        $('#test').append('&lt;p>我的自定义事件&lt;/p>')\n    });\n\n    $('#btn').trigger('myClick'. ['参数1'，'参数2']); //触发事件。\n    ```   \n    - 执行默认操作 triggerHandler，例如，只触发focus事件，但是不获取焦点（浏览器默认行为）\n    ```javascript\n    $('input').triggerHandler('focus');\n    ```\n- 事件命名空间\n    - 添加命名空间\n    ```javascript\n    $('#div').bind('mouseover.plugin', function() {\n\n    })\n    $('#btn').click(function() {\n        $('#div').unbind('.plugin'); //移除上面的事件。\n    })\n    ```\n    \n## 动画\n - show(duration) 显示元素，duration不为0时，表示显示动画。将元素display属性从’none‘设置为原来的值\n - hide(duration) 隐藏元素，duration不为0时，表示隐藏动画。将元素display属性设置为'none'\n - fadeIn(duration) 与show一样，但是不改变display样式。\n - fadeOut(duration) 与hide一样，但是不改变display样式。\n - slideUp(duration)和slideDown(duration)，只改变高度。\n - animate(param, speed, callback)\n    - param 包含样式属性值，如{left: '400px', top: '400px'}，可累加或累减，如{left: '+=400px'}\n    - speed 动画时间\n    - callback 动画完成回调\n    -累加动画\n    ```javascript\n    $('#panel').animate({left:'400px', height:'200px', opacity:1}, 3000)\n        .animate({top:'200px', width:'200px'}, 3000， function() {\n            consle.log('animate done');\n        })\n        .fadeOut('slow');\n    ```\n    - 停止动画stop([clearQueue], [gotoEnd])\n    - 判断是否处于动画状态 $(element).is(':animated')\n    - 延迟动画delay(duration),延迟一段时间开始动画，$(this).animate({left:'400px'}).delay(200);\n    - 其他动画方法\n        - toggle(speed, [callback]) 显示/隐藏元素\n        - slideToggle(speed, [easing], [callback])通过改变高度来显示/隐藏元素\n        - fadeTo(speed, opacity, [callback]) 通过改变不透明度来显示/隐藏元素\n        - fadeToggle(speed, [easing], [callback]) 通过不透明度来显示/隐藏元素。\n","slug":"chapter-4","published":1,"updated":"2016-11-15T10:08:44.328Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw7pnwso000e3opqb4u865jw","content":"<h2 id=\"第四章-jQuery中的事件和动画\"><a href=\"#第四章-jQuery中的事件和动画\" class=\"headerlink\" title=\"第四章 jQuery中的事件和动画\"></a>第四章 jQuery中的事件和动画</h2><ul>\n<li>window.onload方法，相当于<code>jQuery</code>中的$(window).load(function(){})方法。都是等文档中的所有元素加载完成时调用，包括关联css文件和javascript文件。</li>\n<li>$(document).ready(function() {})则不会等待关联文件下载完，在DOM准备好之后就会调用。</li>\n<li>$(window).load(function(){})可以调用多次，都会执行，而window.onload只会调用最后一次赋予的函数。</li>\n<li>$(document).ready(function() {})可以简写为$(function() {});</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h3><ul>\n<li><p>bind(type [, data], fn);第1个参数是事件类型，包括focus、load、click、dbclik等。，第2个参数可选，作为event.data传递，第3个参数是回调函数。示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#panel h5.head'</span>).bind(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        $(<span class=\"keyword\">this</span>).next().show();</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>bind函数可以级联，如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).bind(<span class=\"string\">'mouseover'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().show();</div><div class=\"line\">&#125;).bind(<span class=\"string\">'mouseout'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>bind可以简写，如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().toggle();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>合成事件</p>\n<p>  <code>jQuery</code>有两个合成事件，hover()和toggle(),都有两个回调函数作为参数，可以看成是语法糖。hover表示移入移出两个事件，toggle表示前后两次点击事件，如</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).hover(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().show(); <span class=\"comment\">//划过时显示下一个元素</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide(); <span class=\"comment\">//划出隐藏下一个元素</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).toggle(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().show(); <span class=\"comment\">//点击时显示下一个元素</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide(); <span class=\"comment\">//再次点击时隐藏下一个元素</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>事件对象的属性</p>\n<ul>\n<li>event.type 事件类型，字符串格式，如’click’, ‘dbclick’, ‘load’等。</li>\n<li>event.preventDefault()阻止默认行为，可以用return false代替。</li>\n<li>event.stopProgagation()组织事件冒泡，可以用return false代替。</li>\n<li>event.target 触发事件的元素。</li>\n<li>event.pageX event.pageY,相对于页面的x，y坐标。</li>\n<li>event.which 不同事件含义不同，鼠标事件表示那个键，键盘事件表示键值。</li>\n<li>event.metaKey ctl键是否按下。</li>\n</ul>\n</li>\n<li>移除事件 unbind([type],[data]) <ul>\n<li>如果没有参数，表示删除所有事件。</li>\n<li>如果只提供type，表示移除所有type对应的事件回调。</li>\n<li>如果传递了2个参数，表示对应的处理函数会被删除。</li>\n</ul>\n</li>\n<li>单次事件 one(type, [data], fn);执行一次后，事件回被移除。</li>\n<li><p>事件模拟</p>\n<ul>\n<li>原生事件 $(‘#btn’).trigger(‘click’)或者$(‘#btn’).click();</li>\n<li>自定义事件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#btn'</span>).bind(<span class=\"string\">'myClick'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#test'</span>).append(<span class=\"string\">'&amp;lt;p&gt;我的自定义事件&amp;lt;/p&gt;'</span>)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).trigger(<span class=\"string\">'myClick'</span>); <span class=\"comment\">//触发事件。</span></div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">`    </span></div><div class=\"line\">- 传递数据</div><div class=\"line\">`<span class=\"string\">``</span>javascript</div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).bind(<span class=\"string\">'myClick'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event, msg1, msg2</span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#test'</span>).append(<span class=\"string\">'&amp;lt;p&gt;我的自定义事件&amp;lt;/p&gt;'</span>)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).trigger(<span class=\"string\">'myClick'</span>. [<span class=\"string\">'参数1'</span>，<span class=\"string\">'参数2'</span>]); <span class=\"comment\">//触发事件。</span></div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">`   </span></div><div class=\"line\">- 执行默认操作 triggerHandler，例如，只触发focus事件，但是不获取焦点（浏览器默认行为）</div><div class=\"line\">`<span class=\"string\">``</span>javascript</div><div class=\"line\">$(<span class=\"string\">'input'</span>).triggerHandler(<span class=\"string\">'focus'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>事件命名空间</p>\n<ul>\n<li>添加命名空间<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#div'</span>).bind(<span class=\"string\">'mouseover.plugin'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;)</div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#div'</span>).unbind(<span class=\"string\">'.plugin'</span>); <span class=\"comment\">//移除上面的事件。</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h2><ul>\n<li>show(duration) 显示元素，duration不为0时，表示显示动画。将元素display属性从’none‘设置为原来的值</li>\n<li>hide(duration) 隐藏元素，duration不为0时，表示隐藏动画。将元素display属性设置为’none’</li>\n<li>fadeIn(duration) 与show一样，但是不改变display样式。</li>\n<li>fadeOut(duration) 与hide一样，但是不改变display样式。</li>\n<li>slideUp(duration)和slideDown(duration)，只改变高度。</li>\n<li><p>animate(param, speed, callback)</p>\n<ul>\n<li>param 包含样式属性值，如{left: ‘400px’, top: ‘400px’}，可累加或累减，如{left: ‘+=400px’}</li>\n<li>speed 动画时间</li>\n<li><p>callback 动画完成回调<br>-累加动画</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel'</span>).animate(&#123;left:<span class=\"string\">'400px'</span>, height:<span class=\"string\">'200px'</span>, opacity:<span class=\"number\">1</span>&#125;, <span class=\"number\">3000</span>)</div><div class=\"line\">    .animate(&#123;top:<span class=\"string\">'200px'</span>, width:<span class=\"string\">'200px'</span>&#125;, <span class=\"number\">3000</span>， <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        consle.log(<span class=\"string\">'animate done'</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .fadeOut(<span class=\"string\">'slow'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>停止动画stop([clearQueue], [gotoEnd])</p>\n</li>\n<li>判断是否处于动画状态 $(element).is(‘:animated’)</li>\n<li>延迟动画delay(duration),延迟一段时间开始动画，$(this).animate({left:’400px’}).delay(200);</li>\n<li>其他动画方法<ul>\n<li>toggle(speed, [callback]) 显示/隐藏元素</li>\n<li>slideToggle(speed, [easing], [callback])通过改变高度来显示/隐藏元素</li>\n<li>fadeTo(speed, opacity, [callback]) 通过改变不透明度来显示/隐藏元素</li>\n<li>fadeToggle(speed, [easing], [callback]) 通过不透明度来显示/隐藏元素。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","excerpt":"<h2 id=\"第四章-jQuery中的事件和动画\"><a href=\"#第四章-jQuery中的事件和动画\" class=\"headerlink\" title=\"第四章 jQuery中的事件和动画\"></a>第四章 jQuery中的事件和动画</h2><ul>\n<li>window.onload方法，相当于<code>jQuery</code>中的$(window).load(function(){})方法。都是等文档中的所有元素加载完成时调用，包括关联css文件和javascript文件。</li>\n<li>$(document).ready(function() {})则不会等待关联文件下载完，在DOM准备好之后就会调用。</li>\n<li>$(window).load(function(){})可以调用多次，都会执行，而window.onload只会调用最后一次赋予的函数。</li>\n<li>$(document).ready(function() {})可以简写为$(function() {});</li>\n</ul>","more":"<h3 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h3><ul>\n<li><p>bind(type [, data], fn);第1个参数是事件类型，包括focus、load、click、dbclik等。，第2个参数可选，作为event.data传递，第3个参数是回调函数。示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#panel h5.head'</span>).bind(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        $(<span class=\"keyword\">this</span>).next().show();</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>bind函数可以级联，如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).bind(<span class=\"string\">'mouseover'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().show();</div><div class=\"line\">&#125;).bind(<span class=\"string\">'mouseout'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>bind可以简写，如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().toggle();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>合成事件</p>\n<p>  <code>jQuery</code>有两个合成事件，hover()和toggle(),都有两个回调函数作为参数，可以看成是语法糖。hover表示移入移出两个事件，toggle表示前后两次点击事件，如</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).hover(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().show(); <span class=\"comment\">//划过时显示下一个元素</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide(); <span class=\"comment\">//划出隐藏下一个元素</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).toggle(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().show(); <span class=\"comment\">//点击时显示下一个元素</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide(); <span class=\"comment\">//再次点击时隐藏下一个元素</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>事件对象的属性</p>\n<ul>\n<li>event.type 事件类型，字符串格式，如’click’, ‘dbclick’, ‘load’等。</li>\n<li>event.preventDefault()阻止默认行为，可以用return false代替。</li>\n<li>event.stopProgagation()组织事件冒泡，可以用return false代替。</li>\n<li>event.target 触发事件的元素。</li>\n<li>event.pageX event.pageY,相对于页面的x，y坐标。</li>\n<li>event.which 不同事件含义不同，鼠标事件表示那个键，键盘事件表示键值。</li>\n<li>event.metaKey ctl键是否按下。</li>\n</ul>\n</li>\n<li>移除事件 unbind([type],[data]) <ul>\n<li>如果没有参数，表示删除所有事件。</li>\n<li>如果只提供type，表示移除所有type对应的事件回调。</li>\n<li>如果传递了2个参数，表示对应的处理函数会被删除。</li>\n</ul>\n</li>\n<li>单次事件 one(type, [data], fn);执行一次后，事件回被移除。</li>\n<li><p>事件模拟</p>\n<ul>\n<li>原生事件 $(‘#btn’).trigger(‘click’)或者$(‘#btn’).click();</li>\n<li>自定义事件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#btn'</span>).bind(<span class=\"string\">'myClick'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#test'</span>).append(<span class=\"string\">'&amp;lt;p&gt;我的自定义事件&amp;lt;/p&gt;'</span>)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).trigger(<span class=\"string\">'myClick'</span>); <span class=\"comment\">//触发事件。</span></div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">`    </div><div class=\"line\">- 传递数据</div><div class=\"line\">`</span><span class=\"string\">``</span>javascript</div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).bind(<span class=\"string\">'myClick'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event, msg1, msg2</span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#test'</span>).append(<span class=\"string\">'&amp;lt;p&gt;我的自定义事件&amp;lt;/p&gt;'</span>)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).trigger(<span class=\"string\">'myClick'</span>. [<span class=\"string\">'参数1'</span>，<span class=\"string\">'参数2'</span>]); <span class=\"comment\">//触发事件。</span></div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">`   </div><div class=\"line\">- 执行默认操作 triggerHandler，例如，只触发focus事件，但是不获取焦点（浏览器默认行为）</div><div class=\"line\">`</span><span class=\"string\">``</span>javascript</div><div class=\"line\">$(<span class=\"string\">'input'</span>).triggerHandler(<span class=\"string\">'focus'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>事件命名空间</p>\n<ul>\n<li>添加命名空间<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#div'</span>).bind(<span class=\"string\">'mouseover.plugin'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;)</div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#div'</span>).unbind(<span class=\"string\">'.plugin'</span>); <span class=\"comment\">//移除上面的事件。</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h2><ul>\n<li>show(duration) 显示元素，duration不为0时，表示显示动画。将元素display属性从’none‘设置为原来的值</li>\n<li>hide(duration) 隐藏元素，duration不为0时，表示隐藏动画。将元素display属性设置为’none’</li>\n<li>fadeIn(duration) 与show一样，但是不改变display样式。</li>\n<li>fadeOut(duration) 与hide一样，但是不改变display样式。</li>\n<li>slideUp(duration)和slideDown(duration)，只改变高度。</li>\n<li><p>animate(param, speed, callback)</p>\n<ul>\n<li>param 包含样式属性值，如{left: ‘400px’, top: ‘400px’}，可累加或累减，如{left: ‘+=400px’}</li>\n<li>speed 动画时间</li>\n<li><p>callback 动画完成回调<br>-累加动画</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel'</span>).animate(&#123;left:<span class=\"string\">'400px'</span>, height:<span class=\"string\">'200px'</span>, opacity:<span class=\"number\">1</span>&#125;, <span class=\"number\">3000</span>)</div><div class=\"line\">    .animate(&#123;top:<span class=\"string\">'200px'</span>, width:<span class=\"string\">'200px'</span>&#125;, <span class=\"number\">3000</span>， <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        consle.log(<span class=\"string\">'animate done'</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .fadeOut(<span class=\"string\">'slow'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>停止动画stop([clearQueue], [gotoEnd])</p>\n</li>\n<li>判断是否处于动画状态 $(element).is(‘:animated’)</li>\n<li>延迟动画delay(duration),延迟一段时间开始动画，$(this).animate({left:’400px’}).delay(200);</li>\n<li>其他动画方法<ul>\n<li>toggle(speed, [callback]) 显示/隐藏元素</li>\n<li>slideToggle(speed, [easing], [callback])通过改变高度来显示/隐藏元素</li>\n<li>fadeTo(speed, opacity, [callback]) 通过改变不透明度来显示/隐藏元素</li>\n<li>fadeToggle(speed, [easing], [callback]) 通过不透明度来显示/隐藏元素。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>"},{"title":"如何下载安装openJDK","date":"2016-11-15T12:04:44.000Z","_content":"\n## JDK 8\n\n### **Debian, Ubuntu**\n```\n$ sudo apt-get install openjdk-8-jre\n```\nopenjdk-8-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-8-jdk。\n\n<!--more-->\n\n### **Fedora, Oracle Linux, Red Hat Enterprise Linux**\n```\n$ su -c \"yum install java-1.8.0-openjdk\"\n```\njava-1.8.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.8.0-openjdk-devel。\n\n## JDK 7\n\n### **Debian, Ubuntu**\n```\n$ sudo apt-get install openjdk-7-jre\n```\nopenjdk-7-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-7-jdk。\n\n### **Fedora, Oracle Linux, Red Hat Enterprise Linux**\n```\n$ su -c \"yum install java-1.7.0-openjdk\"\n```\njava-1.7.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.7.0-openjdk-devel。\n\n## JDK 6\n\n### **Debian, Ubuntu**\n```\n$ sudo apt-get install openjdk-6-jre\n```\nopenjdk-6-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-6-jdk。\n\n### **Fedora, Oracle Linux, Red Hat Enterprise Linux**\n```\n$ su -c \"yum install java-1.6.0-openjdk\"\n```\njava-1.6.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.6.0-openjdk-devel。\n\n\n参考[http://openjdk.java.net/install/](http://openjdk.java.net/install/)","source":"_posts/how-to-download-openjdk.md","raw":"---\ntitle: 如何下载安装openJDK\ndate: 2016-11-15 20:04:44\ntags: [openjdk, java]\n---\n\n## JDK 8\n\n### **Debian, Ubuntu**\n```\n$ sudo apt-get install openjdk-8-jre\n```\nopenjdk-8-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-8-jdk。\n\n<!--more-->\n\n### **Fedora, Oracle Linux, Red Hat Enterprise Linux**\n```\n$ su -c \"yum install java-1.8.0-openjdk\"\n```\njava-1.8.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.8.0-openjdk-devel。\n\n## JDK 7\n\n### **Debian, Ubuntu**\n```\n$ sudo apt-get install openjdk-7-jre\n```\nopenjdk-7-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-7-jdk。\n\n### **Fedora, Oracle Linux, Red Hat Enterprise Linux**\n```\n$ su -c \"yum install java-1.7.0-openjdk\"\n```\njava-1.7.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.7.0-openjdk-devel。\n\n## JDK 6\n\n### **Debian, Ubuntu**\n```\n$ sudo apt-get install openjdk-6-jre\n```\nopenjdk-6-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-6-jdk。\n\n### **Fedora, Oracle Linux, Red Hat Enterprise Linux**\n```\n$ su -c \"yum install java-1.6.0-openjdk\"\n```\njava-1.6.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.6.0-openjdk-devel。\n\n\n参考[http://openjdk.java.net/install/](http://openjdk.java.net/install/)","slug":"how-to-download-openjdk","published":1,"updated":"2016-11-16T11:38:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw7pnwsp000g3opq2w6itwn8","content":"<h2 id=\"JDK-8\"><a href=\"#JDK-8\" class=\"headerlink\" title=\"JDK 8\"></a>JDK 8</h2><h3 id=\"Debian-Ubuntu\"><a href=\"#Debian-Ubuntu\" class=\"headerlink\" title=\"Debian, Ubuntu\"></a><strong>Debian, Ubuntu</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install openjdk-8-jre</div></pre></td></tr></table></figure>\n<p>openjdk-8-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-8-jdk。</p>\n<a id=\"more\"></a>\n<h3 id=\"Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux\"><a href=\"#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux\" class=\"headerlink\" title=\"Fedora, Oracle Linux, Red Hat Enterprise Linux\"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ su -c &quot;yum install java-1.8.0-openjdk&quot;</div></pre></td></tr></table></figure>\n<p>java-1.8.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.8.0-openjdk-devel。</p>\n<h2 id=\"JDK-7\"><a href=\"#JDK-7\" class=\"headerlink\" title=\"JDK 7\"></a>JDK 7</h2><h3 id=\"Debian-Ubuntu-1\"><a href=\"#Debian-Ubuntu-1\" class=\"headerlink\" title=\"Debian, Ubuntu\"></a><strong>Debian, Ubuntu</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install openjdk-7-jre</div></pre></td></tr></table></figure>\n<p>openjdk-7-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-7-jdk。</p>\n<h3 id=\"Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-1\"><a href=\"#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-1\" class=\"headerlink\" title=\"Fedora, Oracle Linux, Red Hat Enterprise Linux\"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ su -c &quot;yum install java-1.7.0-openjdk&quot;</div></pre></td></tr></table></figure>\n<p>java-1.7.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.7.0-openjdk-devel。</p>\n<h2 id=\"JDK-6\"><a href=\"#JDK-6\" class=\"headerlink\" title=\"JDK 6\"></a>JDK 6</h2><h3 id=\"Debian-Ubuntu-2\"><a href=\"#Debian-Ubuntu-2\" class=\"headerlink\" title=\"Debian, Ubuntu\"></a><strong>Debian, Ubuntu</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install openjdk-6-jre</div></pre></td></tr></table></figure>\n<p>openjdk-6-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-6-jdk。</p>\n<h3 id=\"Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-2\"><a href=\"#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-2\" class=\"headerlink\" title=\"Fedora, Oracle Linux, Red Hat Enterprise Linux\"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ su -c &quot;yum install java-1.6.0-openjdk&quot;</div></pre></td></tr></table></figure>\n<p>java-1.6.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.6.0-openjdk-devel。</p>\n<p>参考<a href=\"http://openjdk.java.net/install/\" target=\"_blank\" rel=\"external\">http://openjdk.java.net/install/</a></p>\n","excerpt":"<h2 id=\"JDK-8\"><a href=\"#JDK-8\" class=\"headerlink\" title=\"JDK 8\"></a>JDK 8</h2><h3 id=\"Debian-Ubuntu\"><a href=\"#Debian-Ubuntu\" class=\"headerlink\" title=\"Debian, Ubuntu\"></a><strong>Debian, Ubuntu</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install openjdk-8-jre</div></pre></td></tr></table></figure>\n<p>openjdk-8-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-8-jdk。</p>","more":"<h3 id=\"Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux\"><a href=\"#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux\" class=\"headerlink\" title=\"Fedora, Oracle Linux, Red Hat Enterprise Linux\"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ su -c &quot;yum install java-1.8.0-openjdk&quot;</div></pre></td></tr></table></figure>\n<p>java-1.8.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.8.0-openjdk-devel。</p>\n<h2 id=\"JDK-7\"><a href=\"#JDK-7\" class=\"headerlink\" title=\"JDK 7\"></a>JDK 7</h2><h3 id=\"Debian-Ubuntu-1\"><a href=\"#Debian-Ubuntu-1\" class=\"headerlink\" title=\"Debian, Ubuntu\"></a><strong>Debian, Ubuntu</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install openjdk-7-jre</div></pre></td></tr></table></figure>\n<p>openjdk-7-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-7-jdk。</p>\n<h3 id=\"Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-1\"><a href=\"#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-1\" class=\"headerlink\" title=\"Fedora, Oracle Linux, Red Hat Enterprise Linux\"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ su -c &quot;yum install java-1.7.0-openjdk&quot;</div></pre></td></tr></table></figure>\n<p>java-1.7.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.7.0-openjdk-devel。</p>\n<h2 id=\"JDK-6\"><a href=\"#JDK-6\" class=\"headerlink\" title=\"JDK 6\"></a>JDK 6</h2><h3 id=\"Debian-Ubuntu-2\"><a href=\"#Debian-Ubuntu-2\" class=\"headerlink\" title=\"Debian, Ubuntu\"></a><strong>Debian, Ubuntu</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install openjdk-6-jre</div></pre></td></tr></table></figure>\n<p>openjdk-6-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-6-jdk。</p>\n<h3 id=\"Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-2\"><a href=\"#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-2\" class=\"headerlink\" title=\"Fedora, Oracle Linux, Red Hat Enterprise Linux\"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ su -c &quot;yum install java-1.6.0-openjdk&quot;</div></pre></td></tr></table></figure>\n<p>java-1.6.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.6.0-openjdk-devel。</p>\n<p>参考<a href=\"http://openjdk.java.net/install/\">http://openjdk.java.net/install/</a></p>"},{"title":"git配置user.name和user.email","date":"2016-11-15T10:02:54.000Z","_content":"\ngithub在统计提交的时候，会判断邮箱是否跟github的登陆邮箱匹配，不匹配则不计算活跃度，即不生成小绿块。\n\n获取配置\n```\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email\naaa@aaa.com\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.name\naaa\n```\n<!--more-->\n\n设置当前仓库的user.name/user.email\n```\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa@aaa.com\n```\n设置全局user.name/user.email\n```\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.name yinlijun\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.email yinlijun2004@gmail.com\n```\n如果当前仓库未设置user.name/user.email则采用全局的user.name/user.email，否则当前仓库的user.name/user.email会覆盖全局的user.name/user.email。","source":"_posts/git配置user-name和user-email.md","raw":"---\ntitle: git配置user.name和user.email\ndate: 2016-11-15 18:02:54\ntags: git\n---\n\ngithub在统计提交的时候，会判断邮箱是否跟github的登陆邮箱匹配，不匹配则不计算活跃度，即不生成小绿块。\n\n获取配置\n```\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email\naaa@aaa.com\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.name\naaa\n```\n<!--more-->\n\n设置当前仓库的user.name/user.email\n```\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa@aaa.com\n```\n设置全局user.name/user.email\n```\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.name yinlijun\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.email yinlijun2004@gmail.com\n```\n如果当前仓库未设置user.name/user.email则采用全局的user.name/user.email，否则当前仓库的user.name/user.email会覆盖全局的user.name/user.email。","slug":"git配置user-name和user-email","published":1,"updated":"2016-11-15T12:17:44.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw7pnwsr000i3opqaw0q9i1e","content":"<p>github在统计提交的时候，会判断邮箱是否跟github的登陆邮箱匹配，不匹配则不计算活跃度，即不生成小绿块。</p>\n<p>获取配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email</div><div class=\"line\">aaa@aaa.com</div><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.name</div><div class=\"line\">aaa</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>设置当前仓库的user.name/user.email<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa</div><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa@aaa.com</div></pre></td></tr></table></figure></p>\n<p>设置全局user.name/user.email<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.name yinlijun</div><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.email yinlijun2004@gmail.com</div></pre></td></tr></table></figure></p>\n<p>如果当前仓库未设置user.name/user.email则采用全局的user.name/user.email，否则当前仓库的user.name/user.email会覆盖全局的user.name/user.email。</p>\n","excerpt":"<p>github在统计提交的时候，会判断邮箱是否跟github的登陆邮箱匹配，不匹配则不计算活跃度，即不生成小绿块。</p>\n<p>获取配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email</div><div class=\"line\">aaa@aaa.com</div><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.name</div><div class=\"line\">aaa</div></pre></td></tr></table></figure></p>","more":"<p>设置当前仓库的user.name/user.email<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa</div><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa@aaa.com</div></pre></td></tr></table></figure></p>\n<p>设置全局user.name/user.email<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.name yinlijun</div><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.email yinlijun2004@gmail.com</div></pre></td></tr></table></figure></p>\n<p>如果当前仓库未设置user.name/user.email则采用全局的user.name/user.email，否则当前仓库的user.name/user.email会覆盖全局的user.name/user.email。</p>"},{"title":"BrowserRouter-react router 4.0.0 api中文文档","date":"2016-11-24T06:54:00.000Z","_content":"[原文链接](https://react-router.now.sh/BrowserRouter)\n\n<font size='6em'>&lt;BrowserRouter&gt;</font>\n\n保持你的界面与浏览器历史记录保持同步。\n```html5\n<BrowserRouter>\n  <App/>\n</BrowserRouter>\n```\n<!--more-->\n\n<font color='#FF0000'>basename</font>\n\n所有路由的根URL，如果你的应用处于服务端的子目录, 你可以设置这个值为该子目录。\n\n```html5\n<BrowserRouter basename=\"/calendar\" />\n\n// 假设Link标签如下所示：\n<Link to=\"/today\"/>\n// 那么超链接指向 \"/calendar/today\"\n</BrowserRouter>\n```\n<font size='6em'>&lt;/BrowserRouter&gt;</font>\n","source":"_posts/react-router-4-0-0-api-BrowserRouter.md","raw":"---\ntitle: BrowserRouter-react router 4.0.0 api中文文档\ndate: 2016-11-24 14:54:00\ntags: [react, react-router, 翻译文档]\ncategories: react router 4.0.0 api中文文档\n---\n[原文链接](https://react-router.now.sh/BrowserRouter)\n\n<font size='6em'>&lt;BrowserRouter&gt;</font>\n\n保持你的界面与浏览器历史记录保持同步。\n```html5\n<BrowserRouter>\n  <App/>\n</BrowserRouter>\n```\n<!--more-->\n\n<font color='#FF0000'>basename</font>\n\n所有路由的根URL，如果你的应用处于服务端的子目录, 你可以设置这个值为该子目录。\n\n```html5\n<BrowserRouter basename=\"/calendar\" />\n\n// 假设Link标签如下所示：\n<Link to=\"/today\"/>\n// 那么超链接指向 \"/calendar/today\"\n</BrowserRouter>\n```\n<font size='6em'>&lt;/BrowserRouter&gt;</font>\n","slug":"react-router-4-0-0-api-BrowserRouter","published":1,"updated":"2016-11-29T06:14:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw7pnwss000k3opq0ffewiqo","content":"<p><a href=\"https://react-router.now.sh/BrowserRouter\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n<font size=\"6em\">&lt;BrowserRouter&gt;</font>\n\n<p>保持你的界面与浏览器历史记录保持同步。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;BrowserRouter&gt;</div><div class=\"line\">  &lt;App/&gt;</div><div class=\"line\">&lt;/BrowserRouter&gt;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<font color=\"#FF0000\">basename</font>\n\n<p>所有路由的根URL，如果你的应用处于服务端的子目录, 你可以设置这个值为该子目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;BrowserRouter basename=&quot;/calendar&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">// 假设Link标签如下所示：</div><div class=\"line\">&lt;Link to=&quot;/today&quot;/&gt;</div><div class=\"line\">// 那么超链接指向 &quot;/calendar/today&quot;</div><div class=\"line\">&lt;/BrowserRouter&gt;</div></pre></td></tr></table></figure>\n<font size=\"6em\">&lt;/BrowserRouter&gt;</font>\n","excerpt":"<p><a href=\"https://react-router.now.sh/BrowserRouter\">原文链接</a></p>\n<font size='6em'>&lt;BrowserRouter&gt;</font>\n\n<p>保持你的界面与浏览器历史记录保持同步。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;BrowserRouter&gt;</div><div class=\"line\">  &lt;App/&gt;</div><div class=\"line\">&lt;/BrowserRouter&gt;</div></pre></td></tr></table></figure></p>","more":"<font color='#FF0000'>basename</font>\n\n<p>所有路由的根URL，如果你的应用处于服务端的子目录, 你可以设置这个值为该子目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;BrowserRouter basename=&quot;/calendar&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">// 假设Link标签如下所示：</div><div class=\"line\">&lt;Link to=&quot;/today&quot;/&gt;</div><div class=\"line\">// 那么超链接指向 &quot;/calendar/today&quot;</div><div class=\"line\">&lt;/BrowserRouter&gt;</div></pre></td></tr></table></figure>\n<font size='6em'>&lt;/BrowserRouter&gt;</font>"},{"title":"Match-react router 4.0.0 api中文文档","date":"2016-11-25T05:05:50.000Z","_content":"[原文链接](https://react-router.now.sh/Match)\n\n<font size='6em'>&lt;Match&gt;<font>\n\n匹配到地址(location)时进行UI渲染\n\n### <font color='red'>pattern: string</font>\n\n任何[path-to-regexp](https://www.npmjs.com/package/path-to-regexp)可以理解的URL模式表达式\n```html\n<Match pattern=\"/users/:id\" component={User}/>\n```\n<!--more-->\n\n### <font color='red'>exactly: bool</font>\n\n当为true时，只有模式表达式严格匹配时，才算匹配上。\n\n| pattern |\tlocation.pathname | exactly? | matches? |\n| --- | :---: | :----: | :----: |\n| /foo | /foo/bar |\tyes |\tno\n| /foo | /foo/bar |\tno | yes\n```html\n<Match pattern=\"/foo\" exactly component={Foo}/>\n```\n\n### <font color='red'>location</font>\n\n如果你不想匹配上下文(context)中的地址(location)时，你可以传入一个location参数来替代。\n```html\n<Match pattern=\"/foo\" location={{ pathname: '/foo' }}/>\n```\n\n### <font color='red'>component</font>\n当匹配到地址时渲染的React组件，渲染该组件时，会传入如下属性(props)：\n- pattern: (string) 匹配表达式.\n- pathname: (string) 匹配后的路径.\n- isExact: (bool) 是否严格匹配 (v. partial).\n- location: 匹配到的location对象.\n- params: 根据匹配模式解析出来的参数\n\n如下所示：\n```javascript\nclass User extends React.Component {\n    render() {\n        const {params, pattern, pathname, isExact, location} = this.props;\n        return (<div>\n            <h2>User</h2>\n            <div>\n                location:{JSON.stringify(location)}\n                <br />\n                pattern:{pattern}\n                <br />\n                pathname:{pathname}\n                <br />\n                isExact:{isExact ? \"true\" : \"false\"}\n                <br />\n                params:{JSON.stringify(params, null, 2)}\n                <br />\n            </div>\n        </div>)\n    }\n}\n\n<Match pattern=\"/:user\" component={User}/>\n```\n效果如下\n```\nlocation:{\"pathname\":\"/kim\",\"search\":\"\",\"hash\":\"\",\"state\":null,\"query\":null,\"key\":\"a21zge\"}\npattern:/:user\npathname:/kim\nisExact:true\nparams:{ \"user\": \"kim\" }\n```\n\n### <font color='red'>render: func</font>\n\n相对于直接渲染一个组件，你可以之间传一个渲染函数，该函数被调用时，会传入组件一样的参数。\n\n这相当于提供了一种内联(inline rendering)渲染方式，或者对Match的封装(wrapping)。\n```javascript\n// 非常方便的内联渲染\n<Match pattern=\"/home\" render={() => <div>Home</div>}/>\n\n// 对Match进行封装\nconst MatchWithFade = ({ component:Component, ...rest }) => (\n  <Match {...rest} render={(matchProps) => (\n    <FadeIn>\n      <Component {...matchProps}/>\n    </FadeIn>\n  )}/>\n)\n\n<MatchWithFade pattern=\"/cool\" component={Something}/>\n```\n### <font color='red'>children: func</font>\n\n有时你可能需要根据匹配与否进行不同的渲染，这时，你可以使用children属性，它的类型为function，\n它的表现有点象render函数，但是有以下不同：\n \n(1) 不管有没有匹配上都会被调用。 \n\n(2) 回传递一个matched属性表示有没有被匹配上。\n\nIt seems unlikely you’ll need this for anything besides animating when a component transitions from matching to not matching and back, but who knows?\n\n```javascript\n<Match children={({ matched, ...rest}) => (\n  {/* 因为Animate 总是能被渲染，所以你可以利用组件的生命周期(lifecycle)来实现动画。*/}\n  <Animate>\n    {matched && (\n      <Something {...rest}/>\n    )}\n  </Animate>\n)}/>\n```\n<font size='6em'>&lt;/Match&gt;</font>","source":"_posts/react-router-4-0-0-api-Match.md","raw":"---\ntitle: Match-react router 4.0.0 api中文文档\ndate: 2016-11-25 13:05:50\ntags: [react, react-router, 翻译文档]\ncategories: react router 4.0.0 api中文文档\n---\n[原文链接](https://react-router.now.sh/Match)\n\n<font size='6em'>&lt;Match&gt;<font>\n\n匹配到地址(location)时进行UI渲染\n\n### <font color='red'>pattern: string</font>\n\n任何[path-to-regexp](https://www.npmjs.com/package/path-to-regexp)可以理解的URL模式表达式\n```html\n<Match pattern=\"/users/:id\" component={User}/>\n```\n<!--more-->\n\n### <font color='red'>exactly: bool</font>\n\n当为true时，只有模式表达式严格匹配时，才算匹配上。\n\n| pattern |\tlocation.pathname | exactly? | matches? |\n| --- | :---: | :----: | :----: |\n| /foo | /foo/bar |\tyes |\tno\n| /foo | /foo/bar |\tno | yes\n```html\n<Match pattern=\"/foo\" exactly component={Foo}/>\n```\n\n### <font color='red'>location</font>\n\n如果你不想匹配上下文(context)中的地址(location)时，你可以传入一个location参数来替代。\n```html\n<Match pattern=\"/foo\" location={{ pathname: '/foo' }}/>\n```\n\n### <font color='red'>component</font>\n当匹配到地址时渲染的React组件，渲染该组件时，会传入如下属性(props)：\n- pattern: (string) 匹配表达式.\n- pathname: (string) 匹配后的路径.\n- isExact: (bool) 是否严格匹配 (v. partial).\n- location: 匹配到的location对象.\n- params: 根据匹配模式解析出来的参数\n\n如下所示：\n```javascript\nclass User extends React.Component {\n    render() {\n        const {params, pattern, pathname, isExact, location} = this.props;\n        return (<div>\n            <h2>User</h2>\n            <div>\n                location:{JSON.stringify(location)}\n                <br />\n                pattern:{pattern}\n                <br />\n                pathname:{pathname}\n                <br />\n                isExact:{isExact ? \"true\" : \"false\"}\n                <br />\n                params:{JSON.stringify(params, null, 2)}\n                <br />\n            </div>\n        </div>)\n    }\n}\n\n<Match pattern=\"/:user\" component={User}/>\n```\n效果如下\n```\nlocation:{\"pathname\":\"/kim\",\"search\":\"\",\"hash\":\"\",\"state\":null,\"query\":null,\"key\":\"a21zge\"}\npattern:/:user\npathname:/kim\nisExact:true\nparams:{ \"user\": \"kim\" }\n```\n\n### <font color='red'>render: func</font>\n\n相对于直接渲染一个组件，你可以之间传一个渲染函数，该函数被调用时，会传入组件一样的参数。\n\n这相当于提供了一种内联(inline rendering)渲染方式，或者对Match的封装(wrapping)。\n```javascript\n// 非常方便的内联渲染\n<Match pattern=\"/home\" render={() => <div>Home</div>}/>\n\n// 对Match进行封装\nconst MatchWithFade = ({ component:Component, ...rest }) => (\n  <Match {...rest} render={(matchProps) => (\n    <FadeIn>\n      <Component {...matchProps}/>\n    </FadeIn>\n  )}/>\n)\n\n<MatchWithFade pattern=\"/cool\" component={Something}/>\n```\n### <font color='red'>children: func</font>\n\n有时你可能需要根据匹配与否进行不同的渲染，这时，你可以使用children属性，它的类型为function，\n它的表现有点象render函数，但是有以下不同：\n \n(1) 不管有没有匹配上都会被调用。 \n\n(2) 回传递一个matched属性表示有没有被匹配上。\n\nIt seems unlikely you’ll need this for anything besides animating when a component transitions from matching to not matching and back, but who knows?\n\n```javascript\n<Match children={({ matched, ...rest}) => (\n  {/* 因为Animate 总是能被渲染，所以你可以利用组件的生命周期(lifecycle)来实现动画。*/}\n  <Animate>\n    {matched && (\n      <Something {...rest}/>\n    )}\n  </Animate>\n)}/>\n```\n<font size='6em'>&lt;/Match&gt;</font>","slug":"react-router-4-0-0-api-Match","published":1,"updated":"2016-11-29T06:15:43.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw7pnwsu000n3opqs0rtmv93","content":"<p><a href=\"https://react-router.now.sh/Match\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n<font size=\"6em\">&lt;Match&gt;<font><br><br>匹配到地址(location)时进行UI渲染<br><br>### <font color=\"red\">pattern: string</font>\n\n<p>任何<a href=\"https://www.npmjs.com/package/path-to-regexp\" target=\"_blank\" rel=\"external\">path-to-regexp</a>可以理解的URL模式表达式<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Match</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/users/:id\"</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;User&#125;/</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"exactly-bool\"><a href=\"#exactly-bool\" class=\"headerlink\" title=\"exactly: bool\"></a><font color=\"red\">exactly: bool</font></h3><p>当为true时，只有模式表达式严格匹配时，才算匹配上。</p>\n<table>\n<thead>\n<tr>\n<th>pattern</th>\n<th style=\"text-align:center\">location.pathname</th>\n<th style=\"text-align:center\">exactly?</th>\n<th style=\"text-align:center\">matches?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/foo</td>\n<td style=\"text-align:center\">/foo/bar</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">no</td>\n</tr>\n<tr>\n<td>/foo</td>\n<td style=\"text-align:center\">/foo/bar</td>\n<td style=\"text-align:center\">no</td>\n<td style=\"text-align:center\">yes</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Match</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/foo\"</span> <span class=\"attr\">exactly</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Foo&#125;/</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a><font color=\"red\">location</font></h3><p>如果你不想匹配上下文(context)中的地址(location)时，你可以传入一个location参数来替代。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Match</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/foo\"</span> <span class=\"attr\">location</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">pathname:</span> '/<span class=\"attr\">foo</span>' &#125;&#125;/&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"component\"><a href=\"#component\" class=\"headerlink\" title=\"component\"></a><font color=\"red\">component</font></h3><p>当匹配到地址时渲染的React组件，渲染该组件时，会传入如下属性(props)：</p>\n<ul>\n<li>pattern: (string) 匹配表达式.</li>\n<li>pathname: (string) 匹配后的路径.</li>\n<li>isExact: (bool) 是否严格匹配 (v. partial).</li>\n<li>location: 匹配到的location对象.</li>\n<li>params: 根据匹配模式解析出来的参数</li>\n</ul>\n<p>如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> &#123;params, pattern, pathname, isExact, location&#125; = <span class=\"keyword\">this</span>.props;</div><div class=\"line\">        <span class=\"keyword\">return</span> (&lt;div&gt;</div><div class=\"line\">            &lt;h2&gt;User&lt;/h2&gt;</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">                location:&#123;JSON.stringify(location)&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">                pattern:&#123;pattern&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">                pathname:&#123;pathname&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">                isExact:&#123;isExact ? \"true\" : \"false\"&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">                params:&#123;JSON.stringify(params, null, 2)&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">        &lt;/div&gt;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;Match pattern=\"/:user\" component=&#123;User&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<p>效果如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">location:&#123;&quot;pathname&quot;:&quot;/kim&quot;,&quot;search&quot;:&quot;&quot;,&quot;hash&quot;:&quot;&quot;,&quot;state&quot;:null,&quot;query&quot;:null,&quot;key&quot;:&quot;a21zge&quot;&#125;</div><div class=\"line\">pattern:/:user</div><div class=\"line\">pathname:/kim</div><div class=\"line\">isExact:true</div><div class=\"line\">params:&#123; &quot;user&quot;: &quot;kim&quot; &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"render-func\"><a href=\"#render-func\" class=\"headerlink\" title=\"render: func\"></a><font color=\"red\">render: func</font></h3><p>相对于直接渲染一个组件，你可以之间传一个渲染函数，该函数被调用时，会传入组件一样的参数。</p>\n<p>这相当于提供了一种内联(inline rendering)渲染方式，或者对Match的封装(wrapping)。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 非常方便的内联渲染</span></div><div class=\"line\">&lt;Match pattern=<span class=\"string\">\"/home\"</span> render=&#123;() =&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>&#125;/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 对Match进行封装</span></div><div class=\"line\"><span class=\"keyword\">const</span> MatchWithFade = (&#123; component:Component, ...rest &#125;) =&gt; (</div><div class=\"line\">  &lt;Match &#123;...rest&#125; render=&#123;(matchProps) =&gt; (</div><div class=\"line\">    &lt;FadeIn&gt;</div><div class=\"line\">      &lt;Component &#123;...matchProps&#125;/&gt;</div><div class=\"line\">    &lt;/FadeIn&gt;</div><div class=\"line\">  )&#125;/&gt;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">&lt;MatchWithFade pattern=\"/cool\" component=&#123;Something&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"children-func\"><a href=\"#children-func\" class=\"headerlink\" title=\"children: func\"></a><font color=\"red\">children: func</font></h3><p>有时你可能需要根据匹配与否进行不同的渲染，这时，你可以使用children属性，它的类型为function，<br>它的表现有点象render函数，但是有以下不同：</p>\n<p>(1) 不管有没有匹配上都会被调用。 </p>\n<p>(2) 回传递一个matched属性表示有没有被匹配上。</p>\n<p>It seems unlikely you’ll need this for anything besides animating when a component transitions from matching to not matching and back, but who knows?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Match children=&#123;(&#123; matched, ...rest&#125;) =&gt; (</div><div class=\"line\">  &#123;<span class=\"comment\">/* 因为Animate 总是能被渲染，所以你可以利用组件的生命周期(lifecycle)来实现动画。*/</span>&#125;</div><div class=\"line\">  &lt;Animate&gt;</div><div class=\"line\">    &#123;matched &amp;&amp; (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Something</span> &#123;<span class=\"attr\">...rest</span>&#125;/&gt;</span></span></div><div class=\"line\">    )&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Animate</span>&gt;</span></div><div class=\"line\">)&#125;/&gt;</div></pre></td></tr></table></figure>\n<font size=\"6em\">&lt;/Match&gt;</font></font></font>","excerpt":"<p><a href=\"https://react-router.now.sh/Match\">原文链接</a></p>\n<font size='6em'>&lt;Match&gt;<font><br><br>匹配到地址(location)时进行UI渲染<br><br>### <font color='red'>pattern: string</font>\n\n<p>任何<a href=\"https://www.npmjs.com/package/path-to-regexp\">path-to-regexp</a>可以理解的URL模式表达式<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Match</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/users/:id\"</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;User&#125;/</span>&gt;</span></div></pre></td></tr></table></figure></p>","more":"<h3 id=\"exactly-bool\"><a href=\"#exactly-bool\" class=\"headerlink\" title=\"exactly: bool\"></a><font color='red'>exactly: bool</font></h3><p>当为true时，只有模式表达式严格匹配时，才算匹配上。</p>\n<table>\n<thead>\n<tr>\n<th>pattern</th>\n<th style=\"text-align:center\">location.pathname</th>\n<th style=\"text-align:center\">exactly?</th>\n<th style=\"text-align:center\">matches?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/foo</td>\n<td style=\"text-align:center\">/foo/bar</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">no</td>\n</tr>\n<tr>\n<td>/foo</td>\n<td style=\"text-align:center\">/foo/bar</td>\n<td style=\"text-align:center\">no</td>\n<td style=\"text-align:center\">yes</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Match</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/foo\"</span> <span class=\"attr\">exactly</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Foo&#125;/</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a><font color='red'>location</font></h3><p>如果你不想匹配上下文(context)中的地址(location)时，你可以传入一个location参数来替代。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Match</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/foo\"</span> <span class=\"attr\">location</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">pathname:</span> '/<span class=\"attr\">foo</span>' &#125;&#125;/&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"component\"><a href=\"#component\" class=\"headerlink\" title=\"component\"></a><font color='red'>component</font></h3><p>当匹配到地址时渲染的React组件，渲染该组件时，会传入如下属性(props)：</p>\n<ul>\n<li>pattern: (string) 匹配表达式.</li>\n<li>pathname: (string) 匹配后的路径.</li>\n<li>isExact: (bool) 是否严格匹配 (v. partial).</li>\n<li>location: 匹配到的location对象.</li>\n<li>params: 根据匹配模式解析出来的参数</li>\n</ul>\n<p>如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> &#123;params, pattern, pathname, isExact, location&#125; = <span class=\"keyword\">this</span>.props;</div><div class=\"line\">        <span class=\"keyword\">return</span> (&lt;div&gt;</div><div class=\"line\">            &lt;h2&gt;User&lt;/h2&gt;</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">                location:&#123;JSON.stringify(location)&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">                pattern:&#123;pattern&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">                pathname:&#123;pathname&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">                isExact:&#123;isExact ? \"true\" : \"false\"&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">                params:&#123;JSON.stringify(params, null, 2)&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">        &lt;/div&gt;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;Match pattern=\"/:user\" component=&#123;User&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<p>效果如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">location:&#123;&quot;pathname&quot;:&quot;/kim&quot;,&quot;search&quot;:&quot;&quot;,&quot;hash&quot;:&quot;&quot;,&quot;state&quot;:null,&quot;query&quot;:null,&quot;key&quot;:&quot;a21zge&quot;&#125;</div><div class=\"line\">pattern:/:user</div><div class=\"line\">pathname:/kim</div><div class=\"line\">isExact:true</div><div class=\"line\">params:&#123; &quot;user&quot;: &quot;kim&quot; &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"render-func\"><a href=\"#render-func\" class=\"headerlink\" title=\"render: func\"></a><font color='red'>render: func</font></h3><p>相对于直接渲染一个组件，你可以之间传一个渲染函数，该函数被调用时，会传入组件一样的参数。</p>\n<p>这相当于提供了一种内联(inline rendering)渲染方式，或者对Match的封装(wrapping)。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 非常方便的内联渲染</span></div><div class=\"line\">&lt;Match pattern=<span class=\"string\">\"/home\"</span> render=&#123;() =&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>&#125;/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 对Match进行封装</span></div><div class=\"line\"><span class=\"keyword\">const</span> MatchWithFade = (&#123; component:Component, ...rest &#125;) =&gt; (</div><div class=\"line\">  &lt;Match &#123;...rest&#125; render=&#123;(matchProps) =&gt; (</div><div class=\"line\">    &lt;FadeIn&gt;</div><div class=\"line\">      &lt;Component &#123;...matchProps&#125;/&gt;</div><div class=\"line\">    &lt;/FadeIn&gt;</div><div class=\"line\">  )&#125;/&gt;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">&lt;MatchWithFade pattern=\"/cool\" component=&#123;Something&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"children-func\"><a href=\"#children-func\" class=\"headerlink\" title=\"children: func\"></a><font color='red'>children: func</font></h3><p>有时你可能需要根据匹配与否进行不同的渲染，这时，你可以使用children属性，它的类型为function，<br>它的表现有点象render函数，但是有以下不同：</p>\n<p>(1) 不管有没有匹配上都会被调用。 </p>\n<p>(2) 回传递一个matched属性表示有没有被匹配上。</p>\n<p>It seems unlikely you’ll need this for anything besides animating when a component transitions from matching to not matching and back, but who knows?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Match children=&#123;(&#123; matched, ...rest&#125;) =&gt; (</div><div class=\"line\">  &#123;<span class=\"comment\">/* 因为Animate 总是能被渲染，所以你可以利用组件的生命周期(lifecycle)来实现动画。*/</span>&#125;</div><div class=\"line\">  &lt;Animate&gt;</div><div class=\"line\">    &#123;matched &amp;&amp; (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Something</span> &#123;<span class=\"attr\">...rest</span>&#125;/&gt;</span></div><div class=\"line\">    )&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Animate</span>&gt;</span></span></div><div class=\"line\">)&#125;/&gt;</div></pre></td></tr></table></figure>\n<font size='6em'>&lt;/Match&gt;</font>"},{"title":"NavigationPrompt-react router 4.0.0 api中文文档","date":"2016-12-02T11:16:00.000Z","_content":"<font size=\"6em\">&lt;NavigationPrompt&gt;</font>\n\n当你的应用进入一个状态，但是需要防止用户从当前状态离开时（比如填了一半的表单），渲染出一个导航确认（NavigationPrompt）。\n```\n{formIsHalfFilledOut && (\n  <NavigationPrompt message=\"Are you sure you want to leave?\"/>\n)}\n```\n### <font color=\"red\">message: string</font>\n\n<!-- more -->\n\n当用户试图从当前状态离开时显示的信息。\n```\n<NavigationPrompt message=\"Are you sure you want to leave?\"/>\n```\n### <font color=\"red\">message: func</font>\n\n这个函数返回一个提示用户跳转的信息，如果返回true，则允许跳转，函数的参数是用户将要跳转的下一个链接，\n```\n<NavigationPrompt message={(location) => (\n  `Are you sure you want to go to ${location.pathname}?`\n)}/>\n```\n### <font color=\"red\">when: bool</font>\nwhen是一个逻辑变量，为true时，将显示message内容的弹窗，为false时，直接跳转。\n\n<NavigationPrompt when={formIsHalfFilledOut} message=\"Are you sure?\"/>\n<font size=\"6em\">&lt;/NavigationPrompt&gt;</font>\n\n","source":"_posts/react-router-4-0-0-api-NavigationPrompt.md","raw":"---\ntitle: NavigationPrompt-react router 4.0.0 api中文文档\ndate: 2016-12-02 19:16:00\ntags: [react, react-router, 翻译文档]\ncategories: react router 4.0.0 api中文文档\n---\n<font size=\"6em\">&lt;NavigationPrompt&gt;</font>\n\n当你的应用进入一个状态，但是需要防止用户从当前状态离开时（比如填了一半的表单），渲染出一个导航确认（NavigationPrompt）。\n```\n{formIsHalfFilledOut && (\n  <NavigationPrompt message=\"Are you sure you want to leave?\"/>\n)}\n```\n### <font color=\"red\">message: string</font>\n\n<!-- more -->\n\n当用户试图从当前状态离开时显示的信息。\n```\n<NavigationPrompt message=\"Are you sure you want to leave?\"/>\n```\n### <font color=\"red\">message: func</font>\n\n这个函数返回一个提示用户跳转的信息，如果返回true，则允许跳转，函数的参数是用户将要跳转的下一个链接，\n```\n<NavigationPrompt message={(location) => (\n  `Are you sure you want to go to ${location.pathname}?`\n)}/>\n```\n### <font color=\"red\">when: bool</font>\nwhen是一个逻辑变量，为true时，将显示message内容的弹窗，为false时，直接跳转。\n\n<NavigationPrompt when={formIsHalfFilledOut} message=\"Are you sure?\"/>\n<font size=\"6em\">&lt;/NavigationPrompt&gt;</font>\n\n","slug":"react-router-4-0-0-api-NavigationPrompt","published":1,"updated":"2016-12-02T11:32:25.843Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw7pnwsw000q3opqrbfph4e1","content":"<font size=\"6em\">&lt;NavigationPrompt&gt;</font>\n\n<p>当你的应用进入一个状态，但是需要防止用户从当前状态离开时（比如填了一半的表单），渲染出一个导航确认（NavigationPrompt）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;formIsHalfFilledOut &amp;&amp; (</div><div class=\"line\">  &lt;NavigationPrompt message=&quot;Are you sure you want to leave?&quot;/&gt;</div><div class=\"line\">)&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"message-string\"><a href=\"#message-string\" class=\"headerlink\" title=\"message: string\"></a><font color=\"red\">message: string</font></h3><a id=\"more\"></a>\n<p>当用户试图从当前状态离开时显示的信息。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;NavigationPrompt message=&quot;Are you sure you want to leave?&quot;/&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"message-func\"><a href=\"#message-func\" class=\"headerlink\" title=\"message: func\"></a><font color=\"red\">message: func</font></h3><p>这个函数返回一个提示用户跳转的信息，如果返回true，则允许跳转，函数的参数是用户将要跳转的下一个链接，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;NavigationPrompt message=&#123;(location) =&gt; (</div><div class=\"line\">  `Are you sure you want to go to $&#123;location.pathname&#125;?`</div><div class=\"line\">)&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"when-bool\"><a href=\"#when-bool\" class=\"headerlink\" title=\"when: bool\"></a><font color=\"red\">when: bool</font></h3><p>when是一个逻辑变量，为true时，将显示message内容的弹窗，为false时，直接跳转。</p>\n<p><navigationprompt when=\"{formIsHalfFilledOut}\" message=\"Are you sure?\"></navigationprompt></p>\n<font size=\"6em\">&lt;/NavigationPrompt&gt;</font>\n\n","excerpt":"<font size=\"6em\">&lt;NavigationPrompt&gt;</font>\n\n<p>当你的应用进入一个状态，但是需要防止用户从当前状态离开时（比如填了一半的表单），渲染出一个导航确认（NavigationPrompt）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;formIsHalfFilledOut &amp;&amp; (</div><div class=\"line\">  &lt;NavigationPrompt message=&quot;Are you sure you want to leave?&quot;/&gt;</div><div class=\"line\">)&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"message-string\"><a href=\"#message-string\" class=\"headerlink\" title=\"message: string\"></a><font color=\"red\">message: string</font></h3>","more":"<p>当用户试图从当前状态离开时显示的信息。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;NavigationPrompt message=&quot;Are you sure you want to leave?&quot;/&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"message-func\"><a href=\"#message-func\" class=\"headerlink\" title=\"message: func\"></a><font color=\"red\">message: func</font></h3><p>这个函数返回一个提示用户跳转的信息，如果返回true，则允许跳转，函数的参数是用户将要跳转的下一个链接，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;NavigationPrompt message=&#123;(location) =&gt; (</div><div class=\"line\">  `Are you sure you want to go to $&#123;location.pathname&#125;?`</div><div class=\"line\">)&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"when-bool\"><a href=\"#when-bool\" class=\"headerlink\" title=\"when: bool\"></a><font color=\"red\">when: bool</font></h3><p>when是一个逻辑变量，为true时，将显示message内容的弹窗，为false时，直接跳转。</p>\n<p><NavigationPrompt when={formIsHalfFilledOut} message=\"Are you sure?\"/></p>\n<font size=\"6em\">&lt;/NavigationPrompt&gt;</font>"},{"title":"Miss-react router 4.0.0 api中文文档","date":"2016-11-29T05:55:49.000Z","_content":"[原文链接](https://react-router.now.sh/Miss)\n\n<font size='6em'>&lt;Miss&gt;</font>\n\n当没有匹配到当前的地址时，将会渲染Miss。\n```javascript\nconst App = () => (\n  <Router>\n    <Match pattern=\"/foo\"/>\n    <Match pattern=\"/bar\"/>\n    <Miss component={NoMatch}/>\n  </Router>\n)\n\nconst NoMatch = ({ location }) => (\n  <div>Nothing matched {location.pathname}.</div>\n)\n```\n<!-- more -->\n### <font color='red'>component</font>\n跟Match一样的，表示将要渲染的组建，但是不同的是只有location一个prop传进去。\n```\n<Miss component={NoMatch}/>\n```\n### <font color=red>render: func</font>\n\n跟Match一样的，可以提供一个渲染函数，同样，也只有location一个prop传进去。\n```\n<Miss render={({ location }) => (\n  <div>Nothing matched {location.pathname}.</div>\n)}/>\n```\n<font size='6em'>&lt;/Miss&gt;<font>","source":"_posts/react-router-4-0-0-api-Miss.md","raw":"---\ntitle: Miss-react router 4.0.0 api中文文档\ndate: 2016-11-29 13:55:49\ntags: [react, react-router, 翻译文档]\ncategories: react router 4.0.0 api中文文档\n---\n[原文链接](https://react-router.now.sh/Miss)\n\n<font size='6em'>&lt;Miss&gt;</font>\n\n当没有匹配到当前的地址时，将会渲染Miss。\n```javascript\nconst App = () => (\n  <Router>\n    <Match pattern=\"/foo\"/>\n    <Match pattern=\"/bar\"/>\n    <Miss component={NoMatch}/>\n  </Router>\n)\n\nconst NoMatch = ({ location }) => (\n  <div>Nothing matched {location.pathname}.</div>\n)\n```\n<!-- more -->\n### <font color='red'>component</font>\n跟Match一样的，表示将要渲染的组建，但是不同的是只有location一个prop传进去。\n```\n<Miss component={NoMatch}/>\n```\n### <font color=red>render: func</font>\n\n跟Match一样的，可以提供一个渲染函数，同样，也只有location一个prop传进去。\n```\n<Miss render={({ location }) => (\n  <div>Nothing matched {location.pathname}.</div>\n)}/>\n```\n<font size='6em'>&lt;/Miss&gt;<font>","slug":"react-router-4-0-0-api-Miss","published":1,"updated":"2016-11-29T06:13:53.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw7pnwsy000t3opqmuy74at1","content":"<p><a href=\"https://react-router.now.sh/Miss\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n<font size=\"6em\">&lt;Miss&gt;</font>\n\n<p>当没有匹配到当前的地址时，将会渲染Miss。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> App = () =&gt; (</div><div class=\"line\">  &lt;Router&gt;</div><div class=\"line\">    &lt;Match pattern=\"/foo\"/&gt;</div><div class=\"line\">    &lt;Match pattern=\"/bar\"/&gt;</div><div class=\"line\">    &lt;Miss component=&#123;NoMatch&#125;/&gt;</div><div class=\"line\">  &lt;/Router&gt;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">const NoMatch = (&#123; location &#125;) =&gt; (</div><div class=\"line\">  &lt;div&gt;Nothing matched &#123;location.pathname&#125;.&lt;/div&gt;</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"component\"><a href=\"#component\" class=\"headerlink\" title=\"component\"></a><font color=\"red\">component</font></h3><p>跟Match一样的，表示将要渲染的组建，但是不同的是只有location一个prop传进去。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Miss component=&#123;NoMatch&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"render-func\"><a href=\"#render-func\" class=\"headerlink\" title=\"render: func\"></a><font color=\"red\">render: func</font></h3><p>跟Match一样的，可以提供一个渲染函数，同样，也只有location一个prop传进去。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Miss render=&#123;(&#123; location &#125;) =&gt; (</div><div class=\"line\">  &lt;div&gt;Nothing matched &#123;location.pathname&#125;.&lt;/div&gt;</div><div class=\"line\">)&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<p><font size=\"6em\">&lt;/Miss&gt;<font></font></font></p>\n","excerpt":"<p><a href=\"https://react-router.now.sh/Miss\">原文链接</a></p>\n<font size='6em'>&lt;Miss&gt;</font>\n\n<p>当没有匹配到当前的地址时，将会渲染Miss。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> App = () =&gt; (</div><div class=\"line\">  &lt;Router&gt;</div><div class=\"line\">    &lt;Match pattern=\"/foo\"/&gt;</div><div class=\"line\">    &lt;Match pattern=\"/bar\"/&gt;</div><div class=\"line\">    &lt;Miss component=&#123;NoMatch&#125;/&gt;</div><div class=\"line\">  &lt;/Router&gt;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">const NoMatch = (&#123; location &#125;) =&gt; (</div><div class=\"line\">  &lt;div&gt;Nothing matched &#123;location.pathname&#125;.&lt;/div&gt;</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>","more":"<h3 id=\"component\"><a href=\"#component\" class=\"headerlink\" title=\"component\"></a><font color='red'>component</font></h3><p>跟Match一样的，表示将要渲染的组建，但是不同的是只有location一个prop传进去。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Miss component=&#123;NoMatch&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"render-func\"><a href=\"#render-func\" class=\"headerlink\" title=\"render: func\"></a><font color=red>render: func</font></h3><p>跟Match一样的，可以提供一个渲染函数，同样，也只有location一个prop传进去。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Miss render=&#123;(&#123; location &#125;) =&gt; (</div><div class=\"line\">  &lt;div&gt;Nothing matched &#123;location.pathname&#125;.&lt;/div&gt;</div><div class=\"line\">)&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<p><font size='6em'>&lt;/Miss&gt;<font></p>"},{"title":"ubuntu利用update-alternatives配置java","date":"2016-11-15T11:32:21.000Z","_content":"\n利用Android Studio开发，经常会碰到JDK版本的切换问题，安装好新版本的[jdk](http://www.oracle.com/technetwork/java/javase/downloads/index.html)之后，需要先配置到可选项。\n```bash\nyinlijun@sj:~$ sudo update-alternatives --install /usr/bin/java java /opt/jdk1.8.0_101/bin/java 100\nupdate-alternatives: 警告: /etc/alternatives/java has been changed (manually or by a script); switching to manual updates only\nyinlijun@sj:~$ sudo update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_101/bin/javac 100\n```\n\n<!--more-->\n\n然后，选择默认的JDK版本：\n```bash\nyinlijun@sj:~$ sudo update-alternatives --config java\n有 3 个候选项可用于替换 java (提供 /usr/bin/java)。\n\n  选择       路径                                          优先级  状态\n------------------------------------------------------------\n  0            /opt/jdk1.6.0_37/bin/java                        10000     自动模式\n  1            /opt/jdk1.6.0_37/bin/java                        10000     手动模式\n  2            /opt/jdk1.8.0_101/bin/java                       100       手动模式\n  3            /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java   1051      手动模式\n\n要维持当前值[*]请按回车键，或者键入选择的编号：2\nupdate-alternatives: using /opt/jdk1.8.0_101/bin/java to provide /usr/bin/java (java) in 手动模式\nyinlijun@sj:~$ sudo update-alternatives --config javac\n有 3 个候选项可用于替换 javac (提供 /usr/bin/javac)。\n\n  选择       路径                                       优先级  状态\n------------------------------------------------------------\n  0            /opt/jdk1.6.0_37/bin/javac                    10000     自动模式\n  1            /opt/jdk1.6.0_37/bin/javac                    10000     手动模式\n  2            /opt/jdk1.8.0_101/bin/javac                   100       手动模式\n* 3            /usr/lib/jvm/java-7-openjdk-amd64/bin/javac   1051      手动模式\n\n要维持当前值[*]请按回车键，或者键入选择的编号：2\n```\n","source":"_posts/ubuntu利用update-alternatives配置java.md","raw":"---\ntitle: ubuntu利用update-alternatives配置java\ndate: 2016-11-15 19:32:21\ntags: [ubuntu, update-alternatives]\n---\n\n利用Android Studio开发，经常会碰到JDK版本的切换问题，安装好新版本的[jdk](http://www.oracle.com/technetwork/java/javase/downloads/index.html)之后，需要先配置到可选项。\n```bash\nyinlijun@sj:~$ sudo update-alternatives --install /usr/bin/java java /opt/jdk1.8.0_101/bin/java 100\nupdate-alternatives: 警告: /etc/alternatives/java has been changed (manually or by a script); switching to manual updates only\nyinlijun@sj:~$ sudo update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_101/bin/javac 100\n```\n\n<!--more-->\n\n然后，选择默认的JDK版本：\n```bash\nyinlijun@sj:~$ sudo update-alternatives --config java\n有 3 个候选项可用于替换 java (提供 /usr/bin/java)。\n\n  选择       路径                                          优先级  状态\n------------------------------------------------------------\n  0            /opt/jdk1.6.0_37/bin/java                        10000     自动模式\n  1            /opt/jdk1.6.0_37/bin/java                        10000     手动模式\n  2            /opt/jdk1.8.0_101/bin/java                       100       手动模式\n  3            /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java   1051      手动模式\n\n要维持当前值[*]请按回车键，或者键入选择的编号：2\nupdate-alternatives: using /opt/jdk1.8.0_101/bin/java to provide /usr/bin/java (java) in 手动模式\nyinlijun@sj:~$ sudo update-alternatives --config javac\n有 3 个候选项可用于替换 javac (提供 /usr/bin/javac)。\n\n  选择       路径                                       优先级  状态\n------------------------------------------------------------\n  0            /opt/jdk1.6.0_37/bin/javac                    10000     自动模式\n  1            /opt/jdk1.6.0_37/bin/javac                    10000     手动模式\n  2            /opt/jdk1.8.0_101/bin/javac                   100       手动模式\n* 3            /usr/lib/jvm/java-7-openjdk-amd64/bin/javac   1051      手动模式\n\n要维持当前值[*]请按回车键，或者键入选择的编号：2\n```\n","slug":"ubuntu利用update-alternatives配置java","published":1,"updated":"2016-11-16T01:14:37.507Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw7pnwsz000v3opq39viix3z","content":"<p>利用Android Studio开发，经常会碰到JDK版本的切换问题，安装好新版本的<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"external\">jdk</a>之后，需要先配置到可选项。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@sj:~$ sudo update-alternatives --install /usr/bin/java java /opt/jdk1.8.0_101/bin/java 100</div><div class=\"line\">update-alternatives: 警告: /etc/alternatives/java has been changed (manually or by a script); switching to manual updates only</div><div class=\"line\">yinlijun@sj:~$ sudo update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_101/bin/javac 100</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>然后，选择默认的JDK版本：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@sj:~$ sudo update-alternatives --config java</div><div class=\"line\">有 3 个候选项可用于替换 java (提供 /usr/bin/java)。</div><div class=\"line\"></div><div class=\"line\">  选择       路径                                          优先级  状态</div><div class=\"line\">------------------------------------------------------------</div><div class=\"line\">  0            /opt/jdk1.6.0_37/bin/java                        10000     自动模式</div><div class=\"line\">  1            /opt/jdk1.6.0_37/bin/java                        10000     手动模式</div><div class=\"line\">  2            /opt/jdk1.8.0_101/bin/java                       100       手动模式</div><div class=\"line\">  3            /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java   1051      手动模式</div><div class=\"line\"></div><div class=\"line\">要维持当前值[*]请按回车键，或者键入选择的编号：2</div><div class=\"line\">update-alternatives: using /opt/jdk1.8.0_101/bin/java to provide /usr/bin/java (java) <span class=\"keyword\">in</span> 手动模式</div><div class=\"line\">yinlijun@sj:~$ sudo update-alternatives --config javac</div><div class=\"line\">有 3 个候选项可用于替换 javac (提供 /usr/bin/javac)。</div><div class=\"line\"></div><div class=\"line\">  选择       路径                                       优先级  状态</div><div class=\"line\">------------------------------------------------------------</div><div class=\"line\">  0            /opt/jdk1.6.0_37/bin/javac                    10000     自动模式</div><div class=\"line\">  1            /opt/jdk1.6.0_37/bin/javac                    10000     手动模式</div><div class=\"line\">  2            /opt/jdk1.8.0_101/bin/javac                   100       手动模式</div><div class=\"line\">* 3            /usr/lib/jvm/java-7-openjdk-amd64/bin/javac   1051      手动模式</div><div class=\"line\"></div><div class=\"line\">要维持当前值[*]请按回车键，或者键入选择的编号：2</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>利用Android Studio开发，经常会碰到JDK版本的切换问题，安装好新版本的<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\">jdk</a>之后，需要先配置到可选项。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@sj:~$ sudo update-alternatives --install /usr/bin/java java /opt/jdk1.8.0_101/bin/java 100</div><div class=\"line\">update-alternatives: 警告: /etc/alternatives/java has been changed (manually or by a script); switching to manual updates only</div><div class=\"line\">yinlijun@sj:~$ sudo update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_101/bin/javac 100</div></pre></td></tr></table></figure></p>","more":"<p>然后，选择默认的JDK版本：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@sj:~$ sudo update-alternatives --config java</div><div class=\"line\">有 3 个候选项可用于替换 java (提供 /usr/bin/java)。</div><div class=\"line\"></div><div class=\"line\">  选择       路径                                          优先级  状态</div><div class=\"line\">------------------------------------------------------------</div><div class=\"line\">  0            /opt/jdk1.6.0_37/bin/java                        10000     自动模式</div><div class=\"line\">  1            /opt/jdk1.6.0_37/bin/java                        10000     手动模式</div><div class=\"line\">  2            /opt/jdk1.8.0_101/bin/java                       100       手动模式</div><div class=\"line\">  3            /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java   1051      手动模式</div><div class=\"line\"></div><div class=\"line\">要维持当前值[*]请按回车键，或者键入选择的编号：2</div><div class=\"line\">update-alternatives: using /opt/jdk1.8.0_101/bin/java to provide /usr/bin/java (java) <span class=\"keyword\">in</span> 手动模式</div><div class=\"line\">yinlijun@sj:~$ sudo update-alternatives --config javac</div><div class=\"line\">有 3 个候选项可用于替换 javac (提供 /usr/bin/javac)。</div><div class=\"line\"></div><div class=\"line\">  选择       路径                                       优先级  状态</div><div class=\"line\">------------------------------------------------------------</div><div class=\"line\">  0            /opt/jdk1.6.0_37/bin/javac                    10000     自动模式</div><div class=\"line\">  1            /opt/jdk1.6.0_37/bin/javac                    10000     手动模式</div><div class=\"line\">  2            /opt/jdk1.8.0_101/bin/javac                   100       手动模式</div><div class=\"line\">* 3            /usr/lib/jvm/java-7-openjdk-amd64/bin/javac   1051      手动模式</div><div class=\"line\"></div><div class=\"line\">要维持当前值[*]请按回车键，或者键入选择的编号：2</div></pre></td></tr></table></figure></p>"},{"title":"Link-react router 4.0.0 api中文文档","date":"2016-11-29T06:18:08.000Z","_content":"\n[原文链接](https://react-router.now.sh/Link)\n\n<font size='6em'>&lt;Link&gt;</font>\n\n为你的应用提供可以声明的，可访问的导航功能。\n```javascript\n<Link to=\"/about\" activeClassName=\"active\">\n  About\n</Link>\n```\n\n<font color='red'>children: node | func</font>\n\nLink组件可以接受一个函数作为子控件，使得允许你使用自定义的组件渲染Link对象。\n\n<!-- more -->\n\n子控件函数的参数是一个对象，包含如下属性：\n- isActive: (bool) 当前链接是否激活\n- location: 传递给Link的链接\n- href: (string) 路由的url\n- onClick: (func) dom的onClick处理函数\n- transition: (func) 它是router.transitionTo的快捷方式，代表Link对象的to属性。\n```javascript\n<Link to=\"/courses\">{\n  ({isActive, location, href, onClick, transition}) => \n    <RaisedButton label=\"Courses\" onClick={onClick} primary={isActive} href={href} />\n}</Link>\n```\n\n<font color='red'>to: string | object</font>\n\n链接的描述。\n```\n<Link to=\"/courses\"/>\n<Link to={{\n  pathname: '/courses',\n  query: { sort: 'name' },\n  state: { fromDashboard: true }\n}}/>\n```\n\n<font color='red'>activeStyle: object</font>\n\n当链接匹配到<font color='grey' size='5em'>**to**</font>属性时的样式对象。它会和tyle对象合并之后生效。\n```\n<Link\n  to=\"/courses\"\n  style={{ color: 'blue', background: 'gray' }}\n  activeStyle={{ color: 'red' }}\n/>\n// 总是有灰色背景\n// 链接为/foo时字体为blue\n// 为/courses为red(激活状态)\n```\n\n<font color='red'>activeClassName: string</font>\n\n当匹配到链接时，生效的className。\n```javascript\n<Link\n  to=\"/courses\"\n  className=\"course-link\"\n  activeClassName=\"active\"\n/>\n// will always have \"course-link\"\n// at /courses it will be \"course-link active\"\n```\n\n<font color='red'>activeOnlyWhenExact: bool</font>\n\n为true时, 只有当严格匹配，activeClassName和activeStyle才会生效。\n\n```\n<Link to=\"/courses\" activeOnlyWhenExact activeClassName=\"active\"/>\n// /courses 被激活\n// /courses/123 不被激活\n```\n\n<font color='red'>isActive: func</font>\n\n允许自定义当前链接是否被激活，激活时返回true，否则返回false。\n```javascript\n<Link\n  to=\"/\"\n  activeStyle={{ color: 'red' }}\n  isActive={(location) => (\n    // 只有当没有query字段时被激活\n    !Object.keys(location.query).length\n  )}\n/>\n\n<Link\n  to=\"/courses\"\n  activeStyle={{ color: 'red' }}\n  isActive={(location, props) => (\n    // 匹配到\"/courses\" 或者 \"/course/123\"被激活\n    // 尽管这不是真正意义上的被激活, it is\n    // theoretically for the sake of a navigation menu\n    location.pathname.match(/course(s)?/)\n  )}\n/>\n```\n<font color='red'>location</font>\n\n如果你不想使用上下文中的location, 可以传递一个location的属性作为替代，这在链接比较深的redux应用中很有用。\n```\n<Match pattern=\"/foo\" location={this.props.location}/>\n```\n<font size='6em'>&lt;/Link&gt;</font>","source":"_posts/react-router-4-0-0-api-Link.md","raw":"---\ntitle: Link-react router 4.0.0 api中文文档\ntags:\n  - react\n  - react-router\n  - 翻译文档\ncategories: react router 4.0.0 api中文文档\ndate: 2016-11-29 14:18:08\n---\n\n[原文链接](https://react-router.now.sh/Link)\n\n<font size='6em'>&lt;Link&gt;</font>\n\n为你的应用提供可以声明的，可访问的导航功能。\n```javascript\n<Link to=\"/about\" activeClassName=\"active\">\n  About\n</Link>\n```\n\n<font color='red'>children: node | func</font>\n\nLink组件可以接受一个函数作为子控件，使得允许你使用自定义的组件渲染Link对象。\n\n<!-- more -->\n\n子控件函数的参数是一个对象，包含如下属性：\n- isActive: (bool) 当前链接是否激活\n- location: 传递给Link的链接\n- href: (string) 路由的url\n- onClick: (func) dom的onClick处理函数\n- transition: (func) 它是router.transitionTo的快捷方式，代表Link对象的to属性。\n```javascript\n<Link to=\"/courses\">{\n  ({isActive, location, href, onClick, transition}) => \n    <RaisedButton label=\"Courses\" onClick={onClick} primary={isActive} href={href} />\n}</Link>\n```\n\n<font color='red'>to: string | object</font>\n\n链接的描述。\n```\n<Link to=\"/courses\"/>\n<Link to={{\n  pathname: '/courses',\n  query: { sort: 'name' },\n  state: { fromDashboard: true }\n}}/>\n```\n\n<font color='red'>activeStyle: object</font>\n\n当链接匹配到<font color='grey' size='5em'>**to**</font>属性时的样式对象。它会和tyle对象合并之后生效。\n```\n<Link\n  to=\"/courses\"\n  style={{ color: 'blue', background: 'gray' }}\n  activeStyle={{ color: 'red' }}\n/>\n// 总是有灰色背景\n// 链接为/foo时字体为blue\n// 为/courses为red(激活状态)\n```\n\n<font color='red'>activeClassName: string</font>\n\n当匹配到链接时，生效的className。\n```javascript\n<Link\n  to=\"/courses\"\n  className=\"course-link\"\n  activeClassName=\"active\"\n/>\n// will always have \"course-link\"\n// at /courses it will be \"course-link active\"\n```\n\n<font color='red'>activeOnlyWhenExact: bool</font>\n\n为true时, 只有当严格匹配，activeClassName和activeStyle才会生效。\n\n```\n<Link to=\"/courses\" activeOnlyWhenExact activeClassName=\"active\"/>\n// /courses 被激活\n// /courses/123 不被激活\n```\n\n<font color='red'>isActive: func</font>\n\n允许自定义当前链接是否被激活，激活时返回true，否则返回false。\n```javascript\n<Link\n  to=\"/\"\n  activeStyle={{ color: 'red' }}\n  isActive={(location) => (\n    // 只有当没有query字段时被激活\n    !Object.keys(location.query).length\n  )}\n/>\n\n<Link\n  to=\"/courses\"\n  activeStyle={{ color: 'red' }}\n  isActive={(location, props) => (\n    // 匹配到\"/courses\" 或者 \"/course/123\"被激活\n    // 尽管这不是真正意义上的被激活, it is\n    // theoretically for the sake of a navigation menu\n    location.pathname.match(/course(s)?/)\n  )}\n/>\n```\n<font color='red'>location</font>\n\n如果你不想使用上下文中的location, 可以传递一个location的属性作为替代，这在链接比较深的redux应用中很有用。\n```\n<Match pattern=\"/foo\" location={this.props.location}/>\n```\n<font size='6em'>&lt;/Link&gt;</font>","slug":"react-router-4-0-0-api-Link","published":1,"updated":"2016-12-02T11:15:33.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw7pnwt1000y3opqe715c6wz","content":"<p><a href=\"https://react-router.now.sh/Link\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n<font size=\"6em\">&lt;Link&gt;</font>\n\n<p>为你的应用提供可以声明的，可访问的导航功能。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Link to=<span class=\"string\">\"/about\"</span> activeClassName=<span class=\"string\">\"active\"</span>&gt;</div><div class=\"line\">  About</div><div class=\"line\">&lt;<span class=\"regexp\">/Link&gt;</span></div></pre></td></tr></table></figure></p>\n<font color=\"red\">children: node | func</font>\n\n<p>Link组件可以接受一个函数作为子控件，使得允许你使用自定义的组件渲染Link对象。</p>\n<a id=\"more\"></a>\n<p>子控件函数的参数是一个对象，包含如下属性：</p>\n<ul>\n<li>isActive: (bool) 当前链接是否激活</li>\n<li>location: 传递给Link的链接</li>\n<li>href: (string) 路由的url</li>\n<li>onClick: (func) dom的onClick处理函数</li>\n<li>transition: (func) 它是router.transitionTo的快捷方式，代表Link对象的to属性。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Link to=<span class=\"string\">\"/courses\"</span>&gt;&#123;</div><div class=\"line\">  (&#123;isActive, location, href, onClick, transition&#125;) =&gt; </div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">RaisedButton</span> <span class=\"attr\">label</span>=<span class=\"string\">\"Courses\"</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;onClick&#125;</span> <span class=\"attr\">primary</span>=<span class=\"string\">&#123;isActive&#125;</span> <span class=\"attr\">href</span>=<span class=\"string\">&#123;href&#125;</span> /&gt;</span></span></div><div class=\"line\">&#125;<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<font color=\"red\">to: string | object</font>\n\n<p>链接的描述。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Link to=&quot;/courses&quot;/&gt;</div><div class=\"line\">&lt;Link to=&#123;&#123;</div><div class=\"line\">  pathname: &apos;/courses&apos;,</div><div class=\"line\">  query: &#123; sort: &apos;name&apos; &#125;,</div><div class=\"line\">  state: &#123; fromDashboard: true &#125;</div><div class=\"line\">&#125;&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<font color=\"red\">activeStyle: object</font>\n\n<p>当链接匹配到<font color=\"grey\" size=\"5em\"><strong>to</strong></font>属性时的样式对象。它会和tyle对象合并之后生效。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Link</div><div class=\"line\">  to=&quot;/courses&quot;</div><div class=\"line\">  style=&#123;&#123; color: &apos;blue&apos;, background: &apos;gray&apos; &#125;&#125;</div><div class=\"line\">  activeStyle=&#123;&#123; color: &apos;red&apos; &#125;&#125;</div><div class=\"line\">/&gt;</div><div class=\"line\">// 总是有灰色背景</div><div class=\"line\">// 链接为/foo时字体为blue</div><div class=\"line\">// 为/courses为red(激活状态)</div></pre></td></tr></table></figure></p>\n<font color=\"red\">activeClassName: string</font>\n\n<p>当匹配到链接时，生效的className。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Link</div><div class=\"line\">  to=<span class=\"string\">\"/courses\"</span></div><div class=\"line\">  className=<span class=\"string\">\"course-link\"</span></div><div class=\"line\">  activeClassName=<span class=\"string\">\"active\"</span></div><div class=\"line\">/&gt;</div><div class=\"line\"><span class=\"comment\">// will always have \"course-link\"</span></div><div class=\"line\"><span class=\"comment\">// at /courses it will be \"course-link active\"</span></div></pre></td></tr></table></figure></p>\n<font color=\"red\">activeOnlyWhenExact: bool</font>\n\n<p>为true时, 只有当严格匹配，activeClassName和activeStyle才会生效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Link to=&quot;/courses&quot; activeOnlyWhenExact activeClassName=&quot;active&quot;/&gt;</div><div class=\"line\">// /courses 被激活</div><div class=\"line\">// /courses/123 不被激活</div></pre></td></tr></table></figure>\n<font color=\"red\">isActive: func</font>\n\n<p>允许自定义当前链接是否被激活，激活时返回true，否则返回false。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Link</div><div class=\"line\">  to=<span class=\"string\">\"/\"</span></div><div class=\"line\">  activeStyle=&#123;&#123; color: <span class=\"string\">'red'</span> &#125;&#125;</div><div class=\"line\">  isActive=&#123;(location) =&gt; (</div><div class=\"line\">    <span class=\"comment\">// 只有当没有query字段时被激活</span></div><div class=\"line\">    !<span class=\"built_in\">Object</span>.keys(location.query).length</div><div class=\"line\">  )&#125;</div><div class=\"line\">/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span></span></span></div><div class=\"line\">  <span class=\"attr\">to</span>=<span class=\"string\">\"/courses\"</span></div><div class=\"line\">  <span class=\"attr\">activeStyle</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> '<span class=\"attr\">red</span>' &#125;&#125;</div><div class=\"line\">  <span class=\"attr\">isActive</span>=<span class=\"string\">&#123;(location,</span> <span class=\"attr\">props</span>) =&gt; (</div><div class=\"line\">    // 匹配到\"/courses\" 或者 \"/course/123\"被激活</div><div class=\"line\">    // 尽管这不是真正意义上的被激活, it is</div><div class=\"line\">    // theoretically for the sake of a navigation menu</div><div class=\"line\">    location.pathname.match(/course(s)?/)</div><div class=\"line\">  )&#125;</div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure></p>\n<font color=\"red\">location</font>\n\n<p>如果你不想使用上下文中的location, 可以传递一个location的属性作为替代，这在链接比较深的redux应用中很有用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Match pattern=&quot;/foo&quot; location=&#123;this.props.location&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<font size=\"6em\">&lt;/Link&gt;</font>","excerpt":"<p><a href=\"https://react-router.now.sh/Link\">原文链接</a></p>\n<font size='6em'>&lt;Link&gt;</font>\n\n<p>为你的应用提供可以声明的，可访问的导航功能。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Link to=<span class=\"string\">\"/about\"</span> activeClassName=<span class=\"string\">\"active\"</span>&gt;</div><div class=\"line\">  About</div><div class=\"line\">&lt;<span class=\"regexp\">/Link&gt;</span></div></pre></td></tr></table></figure></p>\n<font color='red'>children: node | func</font>\n\n<p>Link组件可以接受一个函数作为子控件，使得允许你使用自定义的组件渲染Link对象。</p>","more":"<p>子控件函数的参数是一个对象，包含如下属性：</p>\n<ul>\n<li>isActive: (bool) 当前链接是否激活</li>\n<li>location: 传递给Link的链接</li>\n<li>href: (string) 路由的url</li>\n<li>onClick: (func) dom的onClick处理函数</li>\n<li>transition: (func) 它是router.transitionTo的快捷方式，代表Link对象的to属性。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Link to=<span class=\"string\">\"/courses\"</span>&gt;&#123;</div><div class=\"line\">  (&#123;isActive, location, href, onClick, transition&#125;) =&gt; </div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">RaisedButton</span> <span class=\"attr\">label</span>=<span class=\"string\">\"Courses\"</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;onClick&#125;</span> <span class=\"attr\">primary</span>=<span class=\"string\">&#123;isActive&#125;</span> <span class=\"attr\">href</span>=<span class=\"string\">&#123;href&#125;</span> /&gt;</span></div><div class=\"line\">&#125;<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<font color='red'>to: string | object</font>\n\n<p>链接的描述。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Link to=&quot;/courses&quot;/&gt;</div><div class=\"line\">&lt;Link to=&#123;&#123;</div><div class=\"line\">  pathname: &apos;/courses&apos;,</div><div class=\"line\">  query: &#123; sort: &apos;name&apos; &#125;,</div><div class=\"line\">  state: &#123; fromDashboard: true &#125;</div><div class=\"line\">&#125;&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<font color='red'>activeStyle: object</font>\n\n<p>当链接匹配到<font color='grey' size='5em'><strong>to</strong></font>属性时的样式对象。它会和tyle对象合并之后生效。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Link</div><div class=\"line\">  to=&quot;/courses&quot;</div><div class=\"line\">  style=&#123;&#123; color: &apos;blue&apos;, background: &apos;gray&apos; &#125;&#125;</div><div class=\"line\">  activeStyle=&#123;&#123; color: &apos;red&apos; &#125;&#125;</div><div class=\"line\">/&gt;</div><div class=\"line\">// 总是有灰色背景</div><div class=\"line\">// 链接为/foo时字体为blue</div><div class=\"line\">// 为/courses为red(激活状态)</div></pre></td></tr></table></figure></p>\n<font color='red'>activeClassName: string</font>\n\n<p>当匹配到链接时，生效的className。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Link</div><div class=\"line\">  to=<span class=\"string\">\"/courses\"</span></div><div class=\"line\">  className=<span class=\"string\">\"course-link\"</span></div><div class=\"line\">  activeClassName=<span class=\"string\">\"active\"</span></div><div class=\"line\">/&gt;</div><div class=\"line\"><span class=\"comment\">// will always have \"course-link\"</span></div><div class=\"line\"><span class=\"comment\">// at /courses it will be \"course-link active\"</span></div></pre></td></tr></table></figure></p>\n<font color='red'>activeOnlyWhenExact: bool</font>\n\n<p>为true时, 只有当严格匹配，activeClassName和activeStyle才会生效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Link to=&quot;/courses&quot; activeOnlyWhenExact activeClassName=&quot;active&quot;/&gt;</div><div class=\"line\">// /courses 被激活</div><div class=\"line\">// /courses/123 不被激活</div></pre></td></tr></table></figure>\n<font color='red'>isActive: func</font>\n\n<p>允许自定义当前链接是否被激活，激活时返回true，否则返回false。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Link</div><div class=\"line\">  to=<span class=\"string\">\"/\"</span></div><div class=\"line\">  activeStyle=&#123;&#123; color: <span class=\"string\">'red'</span> &#125;&#125;</div><div class=\"line\">  isActive=&#123;(location) =&gt; (</div><div class=\"line\">    <span class=\"comment\">// 只有当没有query字段时被激活</span></div><div class=\"line\">    !<span class=\"built_in\">Object</span>.keys(location.query).length</div><div class=\"line\">  )&#125;</div><div class=\"line\">/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span></div><div class=\"line\">  <span class=\"attr\">to</span>=<span class=\"string\">\"/courses\"</span></div><div class=\"line\">  <span class=\"attr\">activeStyle</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> '<span class=\"attr\">red</span>' &#125;&#125;</div><div class=\"line\">  <span class=\"attr\">isActive</span>=<span class=\"string\">&#123;(location,</span> <span class=\"attr\">props</span>) =&gt;</span> (</div><div class=\"line\">    // 匹配到\"/courses\" 或者 \"/course/123\"被激活</div><div class=\"line\">    // 尽管这不是真正意义上的被激活, it is</div><div class=\"line\">    // theoretically for the sake of a navigation menu</div><div class=\"line\">    location.pathname.match(/course(s)?/)</div><div class=\"line\">  )&#125;</div><div class=\"line\">/&gt;</span></div></pre></td></tr></table></figure></p>\n<font color='red'>location</font>\n\n<p>如果你不想使用上下文中的location, 可以传递一个location的属性作为替代，这在链接比较深的redux应用中很有用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Match pattern=&quot;/foo&quot; location=&#123;this.props.location&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<font size='6em'>&lt;/Link&gt;</font>"},{"title":".gitignore无效，不能过滤某些文件","date":"2016-11-06T10:03:31.000Z","_content":"\n利用.gitignore过滤文件，如编译过程中的中间文件，等等，这些文件不需要被追踪管理。\n\n现象：\n\n在.gitignore添加file1文件，以过滤该文件，但是通过Git status查看仍显示file1文件的状态。\n\n<!--more-->\n\n原因：\n\n在git库中已存在了这个文件，之前push提交过该文件。\n\n.gitignore文件只对还没有加入版本管理的文件起作用，如果之前已经用git把这些文件纳入了版本库，就不起作用了\n\n解决：\n\n需要在git库中删除该文件，并更新。\n\n然后再次git status查看状态，file1文件不再显示状态。\n","source":"_posts/gitignore无效，不能过滤某些文件.md","raw":"---\ntitle: .gitignore无效，不能过滤某些文件\ndate: 2016-11-6 18:03:31\ntags: [git, .gitignore]\n---\n\n利用.gitignore过滤文件，如编译过程中的中间文件，等等，这些文件不需要被追踪管理。\n\n现象：\n\n在.gitignore添加file1文件，以过滤该文件，但是通过Git status查看仍显示file1文件的状态。\n\n<!--more-->\n\n原因：\n\n在git库中已存在了这个文件，之前push提交过该文件。\n\n.gitignore文件只对还没有加入版本管理的文件起作用，如果之前已经用git把这些文件纳入了版本库，就不起作用了\n\n解决：\n\n需要在git库中删除该文件，并更新。\n\n然后再次git status查看状态，file1文件不再显示状态。\n","slug":"gitignore无效，不能过滤某些文件","published":1,"updated":"2016-11-16T01:14:20.883Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw7pnwt300113opqmto7po2p","content":"<p>利用.gitignore过滤文件，如编译过程中的中间文件，等等，这些文件不需要被追踪管理。</p>\n<p>现象：</p>\n<p>在.gitignore添加file1文件，以过滤该文件，但是通过Git status查看仍显示file1文件的状态。</p>\n<a id=\"more\"></a>\n<p>原因：</p>\n<p>在git库中已存在了这个文件，之前push提交过该文件。</p>\n<p>.gitignore文件只对还没有加入版本管理的文件起作用，如果之前已经用git把这些文件纳入了版本库，就不起作用了</p>\n<p>解决：</p>\n<p>需要在git库中删除该文件，并更新。</p>\n<p>然后再次git status查看状态，file1文件不再显示状态。</p>\n","excerpt":"<p>利用.gitignore过滤文件，如编译过程中的中间文件，等等，这些文件不需要被追踪管理。</p>\n<p>现象：</p>\n<p>在.gitignore添加file1文件，以过滤该文件，但是通过Git status查看仍显示file1文件的状态。</p>","more":"<p>原因：</p>\n<p>在git库中已存在了这个文件，之前push提交过该文件。</p>\n<p>.gitignore文件只对还没有加入版本管理的文件起作用，如果之前已经用git把这些文件纳入了版本库，就不起作用了</p>\n<p>解决：</p>\n<p>需要在git库中删除该文件，并更新。</p>\n<p>然后再次git status查看状态，file1文件不再显示状态。</p>"},{"title":"Ubuntu 12.04 生成桌面图标","date":"2016-11-15T10:04:19.000Z","_content":"\n在Ubuntu上从网上下载压缩包版本（非.deb包）的应用程序之后，是不生成桌面图表的，比如网上下载的[Android Studio](http://www.android-studio.org/), 所以需要自己做一个桌面图标。\n\n1. 进入到/usr/share/applications/目录下\n```bash\ncd /usr/share/applications/\n```\n\n2. 新建一个android-studio.desktop文件。\n```bash\nvim android-studio.desktop\n```\n<!--more-->\n\n3. 输入一下内容\n```bash\nVersion=2.2\nName=Android Studio\nGenericName=Android IDE\nComment=Android Development\nExec=/home/yinlijun/android_toolchain/android-studio/bin/studio.sh %U\nTerminal=false\nIcon=/home/yinlijun/android_toolchain/android-studio/bin/studio.png\nType=Application\nCategories=Android;IDE;\n```\n\n保存退出之后，在应用程序里面就可以找到，绑定了图标的应用程序，可以将其固定到启动器上。","source":"_posts/make-ubutun-desktop.md","raw":"---\ntitle: Ubuntu 12.04 生成桌面图标 \ndate: 2016-11-15 18:04:19\ntags: [ubuntu, android studio]\n---\n\n在Ubuntu上从网上下载压缩包版本（非.deb包）的应用程序之后，是不生成桌面图表的，比如网上下载的[Android Studio](http://www.android-studio.org/), 所以需要自己做一个桌面图标。\n\n1. 进入到/usr/share/applications/目录下\n```bash\ncd /usr/share/applications/\n```\n\n2. 新建一个android-studio.desktop文件。\n```bash\nvim android-studio.desktop\n```\n<!--more-->\n\n3. 输入一下内容\n```bash\nVersion=2.2\nName=Android Studio\nGenericName=Android IDE\nComment=Android Development\nExec=/home/yinlijun/android_toolchain/android-studio/bin/studio.sh %U\nTerminal=false\nIcon=/home/yinlijun/android_toolchain/android-studio/bin/studio.png\nType=Application\nCategories=Android;IDE;\n```\n\n保存退出之后，在应用程序里面就可以找到，绑定了图标的应用程序，可以将其固定到启动器上。","slug":"make-ubutun-desktop","published":1,"updated":"2016-11-16T01:14:28.807Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw7pnwt400153opql3oxb12k","content":"<p>在Ubuntu上从网上下载压缩包版本（非.deb包）的应用程序之后，是不生成桌面图表的，比如网上下载的<a href=\"http://www.android-studio.org/\" target=\"_blank\" rel=\"external\">Android Studio</a>, 所以需要自己做一个桌面图标。</p>\n<ol>\n<li><p>进入到/usr/share/applications/目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /usr/share/applications/</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建一个android-studio.desktop文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim android-studio.desktop</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol>\n<li>输入一下内容<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Version=2.2</div><div class=\"line\">Name=Android Studio</div><div class=\"line\">GenericName=Android IDE</div><div class=\"line\">Comment=Android Development</div><div class=\"line\">Exec=/home/yinlijun/android_toolchain/android-studio/bin/studio.sh %U</div><div class=\"line\">Terminal=<span class=\"literal\">false</span></div><div class=\"line\">Icon=/home/yinlijun/android_toolchain/android-studio/bin/studio.png</div><div class=\"line\">Type=Application</div><div class=\"line\">Categories=Android;IDE;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>保存退出之后，在应用程序里面就可以找到，绑定了图标的应用程序，可以将其固定到启动器上。</p>\n","excerpt":"<p>在Ubuntu上从网上下载压缩包版本（非.deb包）的应用程序之后，是不生成桌面图表的，比如网上下载的<a href=\"http://www.android-studio.org/\">Android Studio</a>, 所以需要自己做一个桌面图标。</p>\n<ol>\n<li><p>进入到/usr/share/applications/目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /usr/share/applications/</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建一个android-studio.desktop文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim android-studio.desktop</div></pre></td></tr></table></figure>\n</li>\n</ol>","more":"<ol>\n<li>输入一下内容<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Version=2.2</div><div class=\"line\">Name=Android Studio</div><div class=\"line\">GenericName=Android IDE</div><div class=\"line\">Comment=Android Development</div><div class=\"line\">Exec=/home/yinlijun/android_toolchain/android-studio/bin/studio.sh %U</div><div class=\"line\">Terminal=<span class=\"literal\">false</span></div><div class=\"line\">Icon=/home/yinlijun/android_toolchain/android-studio/bin/studio.png</div><div class=\"line\">Type=Application</div><div class=\"line\">Categories=Android;IDE;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>保存退出之后，在应用程序里面就可以找到，绑定了图标的应用程序，可以将其固定到启动器上。</p>"},{"title":"windows下文件路径太深，无法删除解决办法","date":"2016-11-08T10:02:04.000Z","_content":"\nwindows下npm开发时，有时候node_modules/下的目录嵌套太深，导致无法删除项目。\n\nnpm社区贡献了一个工具[windows-node-deps-deleter](https://www.npmjs.com/package/windows-node-deps-deleter)可供删除这样的目录。\n\n<!--more-->\n\n```\nE:\\vscode>npm install -g windows-node-deps-deleter\nC:\\Users\\xx\\AppData\\Roaming\\npm\\wnddel -> C:\\Users\\xx\\AppData\\Roaming\\npm\\no\nde_modules\\windows-node-deps-deleter\\wnddel.js\nwindows-node-deps-deleter@0.1.1 C:\\Users\\xx\\AppData\\Roaming\\npm\\node_modules\\w\nindows-node-deps-deleter\n└── fs-extra@0.13.0 (ncp@1.0.1, jsonfile@2.4.0, rimraf@2.5.4)\n\nE:\\vscode>wnddel react-todo-list\nDeleting \"react-todo-list\" ...\n\"react-todo-list\" deleted.\n```\n\n参考：[windows-node-deps-delete](https://www.npmjs.com/package/windows-node-deps-deleter#readme)\n","source":"_posts/windows下文件路径太深，无法删除解决办法.md","raw":"---\ntitle: windows下文件路径太深，无法删除解决办法\ndate: 2016-11-8 18:02:04\ntags: [windows, npm]\n---\n\nwindows下npm开发时，有时候node_modules/下的目录嵌套太深，导致无法删除项目。\n\nnpm社区贡献了一个工具[windows-node-deps-deleter](https://www.npmjs.com/package/windows-node-deps-deleter)可供删除这样的目录。\n\n<!--more-->\n\n```\nE:\\vscode>npm install -g windows-node-deps-deleter\nC:\\Users\\xx\\AppData\\Roaming\\npm\\wnddel -> C:\\Users\\xx\\AppData\\Roaming\\npm\\no\nde_modules\\windows-node-deps-deleter\\wnddel.js\nwindows-node-deps-deleter@0.1.1 C:\\Users\\xx\\AppData\\Roaming\\npm\\node_modules\\w\nindows-node-deps-deleter\n└── fs-extra@0.13.0 (ncp@1.0.1, jsonfile@2.4.0, rimraf@2.5.4)\n\nE:\\vscode>wnddel react-todo-list\nDeleting \"react-todo-list\" ...\n\"react-todo-list\" deleted.\n```\n\n参考：[windows-node-deps-delete](https://www.npmjs.com/package/windows-node-deps-deleter#readme)\n","slug":"windows下文件路径太深，无法删除解决办法","published":1,"updated":"2016-11-16T01:14:48.487Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw7pnwt500183opqbxgi36n8","content":"<p>windows下npm开发时，有时候node_modules/下的目录嵌套太深，导致无法删除项目。</p>\n<p>npm社区贡献了一个工具<a href=\"https://www.npmjs.com/package/windows-node-deps-deleter\" target=\"_blank\" rel=\"external\">windows-node-deps-deleter</a>可供删除这样的目录。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">E:\\vscode&gt;npm install -g windows-node-deps-deleter</div><div class=\"line\">C:\\Users\\xx\\AppData\\Roaming\\npm\\wnddel -&gt; C:\\Users\\xx\\AppData\\Roaming\\npm\\no</div><div class=\"line\">de_modules\\windows-node-deps-deleter\\wnddel.js</div><div class=\"line\">windows-node-deps-deleter@0.1.1 C:\\Users\\xx\\AppData\\Roaming\\npm\\node_modules\\w</div><div class=\"line\">indows-node-deps-deleter</div><div class=\"line\">└── fs-extra@0.13.0 (ncp@1.0.1, jsonfile@2.4.0, rimraf@2.5.4)</div><div class=\"line\"></div><div class=\"line\">E:\\vscode&gt;wnddel react-todo-list</div><div class=\"line\">Deleting &quot;react-todo-list&quot; ...</div><div class=\"line\">&quot;react-todo-list&quot; deleted.</div></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://www.npmjs.com/package/windows-node-deps-deleter#readme\" target=\"_blank\" rel=\"external\">windows-node-deps-delete</a></p>\n","excerpt":"<p>windows下npm开发时，有时候node_modules/下的目录嵌套太深，导致无法删除项目。</p>\n<p>npm社区贡献了一个工具<a href=\"https://www.npmjs.com/package/windows-node-deps-deleter\">windows-node-deps-deleter</a>可供删除这样的目录。</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">E:\\vscode&gt;npm install -g windows-node-deps-deleter</div><div class=\"line\">C:\\Users\\xx\\AppData\\Roaming\\npm\\wnddel -&gt; C:\\Users\\xx\\AppData\\Roaming\\npm\\no</div><div class=\"line\">de_modules\\windows-node-deps-deleter\\wnddel.js</div><div class=\"line\">windows-node-deps-deleter@0.1.1 C:\\Users\\xx\\AppData\\Roaming\\npm\\node_modules\\w</div><div class=\"line\">indows-node-deps-deleter</div><div class=\"line\">└── fs-extra@0.13.0 (ncp@1.0.1, jsonfile@2.4.0, rimraf@2.5.4)</div><div class=\"line\"></div><div class=\"line\">E:\\vscode&gt;wnddel react-todo-list</div><div class=\"line\">Deleting &quot;react-todo-list&quot; ...</div><div class=\"line\">&quot;react-todo-list&quot; deleted.</div></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://www.npmjs.com/package/windows-node-deps-deleter#readme\">windows-node-deps-delete</a></p>"},{"title":"windows配置mongdb记录","date":"2016-11-09T09:55:51.000Z","_content":"\n刚给windows电脑配置了mongdb记录一下。\n\n- 前往[官网](https://www.mongodb.com/download-center)下载合适的安装包，我选择的是msi安装包，也可以选择下载zip包。\n\n- 运行msi安装包（默认安装在C盘，没找到在哪里可以修改盘符）。\n\n- 在D:\\下创建好相关文件夹\n![这里写图片描述](http://img.blog.csdn.net/20161109194149759)\n\n<!--more-->\n\n- 打开命令提示符，进入到mongodb安装文件夹下的bin目录\n![这里写图片描述](http://img.blog.csdn.net/20161109194331090)\n\n- 输入如下命令，注册MongoDB服务 \n\n```bash\n mongod.exe --logpath D:\\MongoDB\\data\\log\\MongoDB.log --logappend --dbpath D:\\MongoDB\\data\\db --directoryperdb --storageEngin=mmappv1 --serviceName MongoDB --install\n```\n\n![这里写图片描述](http://img.blog.csdn.net/20161109194436279)\n\n- 启动MongoDB服务\n\n```bash\n net start MongoDB\n```\n\n![这里写图片描述](http://img.blog.csdn.net/20161109194520874)\n","source":"_posts/windows配置mongdb记录.md","raw":"---\ntitle: windows配置mongdb记录\ndate: 2016-11-9 17:55:51\ntags: [windows, mongodb]\n---\n\n刚给windows电脑配置了mongdb记录一下。\n\n- 前往[官网](https://www.mongodb.com/download-center)下载合适的安装包，我选择的是msi安装包，也可以选择下载zip包。\n\n- 运行msi安装包（默认安装在C盘，没找到在哪里可以修改盘符）。\n\n- 在D:\\下创建好相关文件夹\n![这里写图片描述](http://img.blog.csdn.net/20161109194149759)\n\n<!--more-->\n\n- 打开命令提示符，进入到mongodb安装文件夹下的bin目录\n![这里写图片描述](http://img.blog.csdn.net/20161109194331090)\n\n- 输入如下命令，注册MongoDB服务 \n\n```bash\n mongod.exe --logpath D:\\MongoDB\\data\\log\\MongoDB.log --logappend --dbpath D:\\MongoDB\\data\\db --directoryperdb --storageEngin=mmappv1 --serviceName MongoDB --install\n```\n\n![这里写图片描述](http://img.blog.csdn.net/20161109194436279)\n\n- 启动MongoDB服务\n\n```bash\n net start MongoDB\n```\n\n![这里写图片描述](http://img.blog.csdn.net/20161109194520874)\n","slug":"windows配置mongdb记录","published":1,"updated":"2016-11-16T01:14:55.479Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw7pnwt6001a3opqo0jpetu2","content":"<p>刚给windows电脑配置了mongdb记录一下。</p>\n<ul>\n<li><p>前往<a href=\"https://www.mongodb.com/download-center\" target=\"_blank\" rel=\"external\">官网</a>下载合适的安装包，我选择的是msi安装包，也可以选择下载zip包。</p>\n</li>\n<li><p>运行msi安装包（默认安装在C盘，没找到在哪里可以修改盘符）。</p>\n</li>\n<li><p>在D:\\下创建好相关文件夹<br><img src=\"http://img.blog.csdn.net/20161109194149759\" alt=\"这里写图片描述\"></p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>打开命令提示符，进入到mongodb安装文件夹下的bin目录<br><img src=\"http://img.blog.csdn.net/20161109194331090\" alt=\"这里写图片描述\"></p>\n</li>\n<li><p>输入如下命令，注册MongoDB服务 </p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongod.exe --logpath D:\\MongoDB\\data\\<span class=\"built_in\">log</span>\\MongoDB.log --logappend --dbpath D:\\MongoDB\\data\\db --directoryperdb --storageEngin=mmappv1 --serviceName MongoDB --install</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161109194436279\" alt=\"这里写图片描述\"></p>\n<ul>\n<li>启动MongoDB服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">net start MongoDB</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161109194520874\" alt=\"这里写图片描述\"></p>\n","excerpt":"<p>刚给windows电脑配置了mongdb记录一下。</p>\n<ul>\n<li><p>前往<a href=\"https://www.mongodb.com/download-center\">官网</a>下载合适的安装包，我选择的是msi安装包，也可以选择下载zip包。</p>\n</li>\n<li><p>运行msi安装包（默认安装在C盘，没找到在哪里可以修改盘符）。</p>\n</li>\n<li><p>在D:\\下创建好相关文件夹<br><img src=\"http://img.blog.csdn.net/20161109194149759\" alt=\"这里写图片描述\"></p>\n</li>\n</ul>","more":"<ul>\n<li><p>打开命令提示符，进入到mongodb安装文件夹下的bin目录<br><img src=\"http://img.blog.csdn.net/20161109194331090\" alt=\"这里写图片描述\"></p>\n</li>\n<li><p>输入如下命令，注册MongoDB服务 </p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongod.exe --logpath D:\\MongoDB\\data\\<span class=\"built_in\">log</span>\\MongoDB.log --logappend --dbpath D:\\MongoDB\\data\\db --directoryperdb --storageEngin=mmappv1 --serviceName MongoDB --install</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161109194436279\" alt=\"这里写图片描述\"></p>\n<ul>\n<li>启动MongoDB服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">net start MongoDB</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161109194520874\" alt=\"这里写图片描述\"></p>"},{"title":"React组件生命周期","date":"2016-11-24T07:23:54.000Z","_content":"[原文链接](http://blog.flappyend.com/react-component-lifecycle/)\n\n## 实例化\n### 首次实例化\n\n- getDefaultProps\n- getInitialState\n- componentWillMount\n- render\n- componentDidMount\n\n<!--more-->\n\n### 实例化完成后的更新\n\ngetInitialState\ncomponentWillMount\nrender\ncomponentDidMount\n\n## 存在期\n\n### 组件已存在时的状态改变\n\n- componentWillReceiveProps\n- shouldComponentUpdate\n- componentWillUpdate\n- render\n- componentDidUpdate\n\n## 销毁&清理期\n- componentWillUnmount\n\n## 说明\n生命周期共提供了10个不同的API。\n\n1. getDefaultProps\n\n作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享。\n\n2. getInitialState\n\n作用于组件的实例，在实例创建时调用一次，用于初始化每个实例的state，此时可以访问this.props。\n\n3. componentWillMount\n\n在完成首次渲染之前调用，此时仍可以修改组件的state。\n\n4. render\n\n必选的方法，创建虚拟DOM，该方法具有特殊的规则：\n\n- 只能通过this.props和this.state访问数据\n- 可以返回null、false或任何React组件\n- 只能出现一个顶级组件（不能返回数组）\n- 不能改变组件的状态\n- 不能修改DOM的输出\n5. componentDidMount\n\n真实的DOM被渲染出来后调用，在该方法中可通过this.getDOMNode()访问到真实的DOM元素。此时已可以使用其他类库来操作这个DOM。\n\n*在服务端中，该方法不会被调用。*\n\n6. componentWillReceiveProps\n\n组件接收到新的props时调用，并将其作为参数nextProps使用，此时可以更改组件props及state。\n```javascript\n    componentWillReceiveProps: function(nextProps) {\n        if (nextProps.bool) {\n            this.setState({\n                bool: true\n            });\n        }\n    }\n```\n7. shouldComponentUpdate\n\n组件是否应当渲染新的props或state，返回false表示跳过后续的生命周期方法，通常不需要使用以避免出现bug。在出现应用的瓶颈时，可通过该方法进行适当的优化。\n\n*在首次渲染期间或者调用了forceUpdate方法后，该方法不会被调用*\n\n8. componentWillUpdate\n\n接收到新的props或者state后，进行渲染之前调用，此时不允许更新props或state。\n\n9. componentDidUpdate\n\n完成渲染新的props或者state后调用，此时可以访问到新的DOM元素。\n\n10. componentWillUnmount\n\n组件被移除之前被调用，可以用于做一些清理工作，在componentDidMount方法中添加的所有任务都需要在该方法中撤销，比如创建的定时器或添加的事件监听器。\n\n## 参考资料\n- React：引领未来的用户界面开发框架/寸志 范洪春 杨森 陈涌 译 -- 电子工业出版社\n- [Component Specs and Lifecycle190](https://facebook.github.io/react/docs/component-specs.html)","source":"_posts/react-lifecycle.md","raw":"---\ntitle: React组件生命周期\ndate: 2016-11-24 15:23:54\ntags: react\n---\n[原文链接](http://blog.flappyend.com/react-component-lifecycle/)\n\n## 实例化\n### 首次实例化\n\n- getDefaultProps\n- getInitialState\n- componentWillMount\n- render\n- componentDidMount\n\n<!--more-->\n\n### 实例化完成后的更新\n\ngetInitialState\ncomponentWillMount\nrender\ncomponentDidMount\n\n## 存在期\n\n### 组件已存在时的状态改变\n\n- componentWillReceiveProps\n- shouldComponentUpdate\n- componentWillUpdate\n- render\n- componentDidUpdate\n\n## 销毁&清理期\n- componentWillUnmount\n\n## 说明\n生命周期共提供了10个不同的API。\n\n1. getDefaultProps\n\n作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享。\n\n2. getInitialState\n\n作用于组件的实例，在实例创建时调用一次，用于初始化每个实例的state，此时可以访问this.props。\n\n3. componentWillMount\n\n在完成首次渲染之前调用，此时仍可以修改组件的state。\n\n4. render\n\n必选的方法，创建虚拟DOM，该方法具有特殊的规则：\n\n- 只能通过this.props和this.state访问数据\n- 可以返回null、false或任何React组件\n- 只能出现一个顶级组件（不能返回数组）\n- 不能改变组件的状态\n- 不能修改DOM的输出\n5. componentDidMount\n\n真实的DOM被渲染出来后调用，在该方法中可通过this.getDOMNode()访问到真实的DOM元素。此时已可以使用其他类库来操作这个DOM。\n\n*在服务端中，该方法不会被调用。*\n\n6. componentWillReceiveProps\n\n组件接收到新的props时调用，并将其作为参数nextProps使用，此时可以更改组件props及state。\n```javascript\n    componentWillReceiveProps: function(nextProps) {\n        if (nextProps.bool) {\n            this.setState({\n                bool: true\n            });\n        }\n    }\n```\n7. shouldComponentUpdate\n\n组件是否应当渲染新的props或state，返回false表示跳过后续的生命周期方法，通常不需要使用以避免出现bug。在出现应用的瓶颈时，可通过该方法进行适当的优化。\n\n*在首次渲染期间或者调用了forceUpdate方法后，该方法不会被调用*\n\n8. componentWillUpdate\n\n接收到新的props或者state后，进行渲染之前调用，此时不允许更新props或state。\n\n9. componentDidUpdate\n\n完成渲染新的props或者state后调用，此时可以访问到新的DOM元素。\n\n10. componentWillUnmount\n\n组件被移除之前被调用，可以用于做一些清理工作，在componentDidMount方法中添加的所有任务都需要在该方法中撤销，比如创建的定时器或添加的事件监听器。\n\n## 参考资料\n- React：引领未来的用户界面开发框架/寸志 范洪春 杨森 陈涌 译 -- 电子工业出版社\n- [Component Specs and Lifecycle190](https://facebook.github.io/react/docs/component-specs.html)","slug":"react-lifecycle","published":1,"updated":"2016-11-28T11:43:16.461Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw7pnwt6001d3opqq8trjjn3","content":"<p><a href=\"http://blog.flappyend.com/react-component-lifecycle/\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n<h2 id=\"实例化\"><a href=\"#实例化\" class=\"headerlink\" title=\"实例化\"></a>实例化</h2><h3 id=\"首次实例化\"><a href=\"#首次实例化\" class=\"headerlink\" title=\"首次实例化\"></a>首次实例化</h3><ul>\n<li>getDefaultProps</li>\n<li>getInitialState</li>\n<li>componentWillMount</li>\n<li>render</li>\n<li>componentDidMount</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"实例化完成后的更新\"><a href=\"#实例化完成后的更新\" class=\"headerlink\" title=\"实例化完成后的更新\"></a>实例化完成后的更新</h3><p>getInitialState<br>componentWillMount<br>render<br>componentDidMount</p>\n<h2 id=\"存在期\"><a href=\"#存在期\" class=\"headerlink\" title=\"存在期\"></a>存在期</h2><h3 id=\"组件已存在时的状态改变\"><a href=\"#组件已存在时的状态改变\" class=\"headerlink\" title=\"组件已存在时的状态改变\"></a>组件已存在时的状态改变</h3><ul>\n<li>componentWillReceiveProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n<li>render</li>\n<li>componentDidUpdate</li>\n</ul>\n<h2 id=\"销毁-amp-清理期\"><a href=\"#销毁-amp-清理期\" class=\"headerlink\" title=\"销毁&amp;清理期\"></a>销毁&amp;清理期</h2><ul>\n<li>componentWillUnmount</li>\n</ul>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>生命周期共提供了10个不同的API。</p>\n<ol>\n<li>getDefaultProps</li>\n</ol>\n<p>作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享。</p>\n<ol>\n<li>getInitialState</li>\n</ol>\n<p>作用于组件的实例，在实例创建时调用一次，用于初始化每个实例的state，此时可以访问this.props。</p>\n<ol>\n<li>componentWillMount</li>\n</ol>\n<p>在完成首次渲染之前调用，此时仍可以修改组件的state。</p>\n<ol>\n<li>render</li>\n</ol>\n<p>必选的方法，创建虚拟DOM，该方法具有特殊的规则：</p>\n<ul>\n<li>只能通过this.props和this.state访问数据</li>\n<li>可以返回null、false或任何React组件</li>\n<li>只能出现一个顶级组件（不能返回数组）</li>\n<li>不能改变组件的状态</li>\n<li>不能修改DOM的输出</li>\n</ul>\n<ol>\n<li>componentDidMount</li>\n</ol>\n<p>真实的DOM被渲染出来后调用，在该方法中可通过this.getDOMNode()访问到真实的DOM元素。此时已可以使用其他类库来操作这个DOM。</p>\n<p><em>在服务端中，该方法不会被调用。</em></p>\n<ol>\n<li>componentWillReceiveProps</li>\n</ol>\n<p>组件接收到新的props时调用，并将其作为参数nextProps使用，此时可以更改组件props及state。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">componentWillReceiveProps: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nextProps</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (nextProps.bool) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">            bool: <span class=\"literal\">true</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ol>\n<li>shouldComponentUpdate</li>\n</ol>\n<p>组件是否应当渲染新的props或state，返回false表示跳过后续的生命周期方法，通常不需要使用以避免出现bug。在出现应用的瓶颈时，可通过该方法进行适当的优化。</p>\n<p><em>在首次渲染期间或者调用了forceUpdate方法后，该方法不会被调用</em></p>\n<ol>\n<li>componentWillUpdate</li>\n</ol>\n<p>接收到新的props或者state后，进行渲染之前调用，此时不允许更新props或state。</p>\n<ol>\n<li>componentDidUpdate</li>\n</ol>\n<p>完成渲染新的props或者state后调用，此时可以访问到新的DOM元素。</p>\n<ol>\n<li>componentWillUnmount</li>\n</ol>\n<p>组件被移除之前被调用，可以用于做一些清理工作，在componentDidMount方法中添加的所有任务都需要在该方法中撤销，比如创建的定时器或添加的事件监听器。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>React：引领未来的用户界面开发框架/寸志 范洪春 杨森 陈涌 译 – 电子工业出版社</li>\n<li><a href=\"https://facebook.github.io/react/docs/component-specs.html\" target=\"_blank\" rel=\"external\">Component Specs and Lifecycle190</a></li>\n</ul>\n","excerpt":"<p><a href=\"http://blog.flappyend.com/react-component-lifecycle/\">原文链接</a></p>\n<h2 id=\"实例化\"><a href=\"#实例化\" class=\"headerlink\" title=\"实例化\"></a>实例化</h2><h3 id=\"首次实例化\"><a href=\"#首次实例化\" class=\"headerlink\" title=\"首次实例化\"></a>首次实例化</h3><ul>\n<li>getDefaultProps</li>\n<li>getInitialState</li>\n<li>componentWillMount</li>\n<li>render</li>\n<li>componentDidMount</li>\n</ul>","more":"<h3 id=\"实例化完成后的更新\"><a href=\"#实例化完成后的更新\" class=\"headerlink\" title=\"实例化完成后的更新\"></a>实例化完成后的更新</h3><p>getInitialState<br>componentWillMount<br>render<br>componentDidMount</p>\n<h2 id=\"存在期\"><a href=\"#存在期\" class=\"headerlink\" title=\"存在期\"></a>存在期</h2><h3 id=\"组件已存在时的状态改变\"><a href=\"#组件已存在时的状态改变\" class=\"headerlink\" title=\"组件已存在时的状态改变\"></a>组件已存在时的状态改变</h3><ul>\n<li>componentWillReceiveProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n<li>render</li>\n<li>componentDidUpdate</li>\n</ul>\n<h2 id=\"销毁-amp-清理期\"><a href=\"#销毁-amp-清理期\" class=\"headerlink\" title=\"销毁&amp;清理期\"></a>销毁&amp;清理期</h2><ul>\n<li>componentWillUnmount</li>\n</ul>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>生命周期共提供了10个不同的API。</p>\n<ol>\n<li>getDefaultProps</li>\n</ol>\n<p>作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享。</p>\n<ol>\n<li>getInitialState</li>\n</ol>\n<p>作用于组件的实例，在实例创建时调用一次，用于初始化每个实例的state，此时可以访问this.props。</p>\n<ol>\n<li>componentWillMount</li>\n</ol>\n<p>在完成首次渲染之前调用，此时仍可以修改组件的state。</p>\n<ol>\n<li>render</li>\n</ol>\n<p>必选的方法，创建虚拟DOM，该方法具有特殊的规则：</p>\n<ul>\n<li>只能通过this.props和this.state访问数据</li>\n<li>可以返回null、false或任何React组件</li>\n<li>只能出现一个顶级组件（不能返回数组）</li>\n<li>不能改变组件的状态</li>\n<li>不能修改DOM的输出</li>\n</ul>\n<ol>\n<li>componentDidMount</li>\n</ol>\n<p>真实的DOM被渲染出来后调用，在该方法中可通过this.getDOMNode()访问到真实的DOM元素。此时已可以使用其他类库来操作这个DOM。</p>\n<p><em>在服务端中，该方法不会被调用。</em></p>\n<ol>\n<li>componentWillReceiveProps</li>\n</ol>\n<p>组件接收到新的props时调用，并将其作为参数nextProps使用，此时可以更改组件props及state。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">componentWillReceiveProps: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nextProps</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (nextProps.bool) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">            bool: <span class=\"literal\">true</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ol>\n<li>shouldComponentUpdate</li>\n</ol>\n<p>组件是否应当渲染新的props或state，返回false表示跳过后续的生命周期方法，通常不需要使用以避免出现bug。在出现应用的瓶颈时，可通过该方法进行适当的优化。</p>\n<p><em>在首次渲染期间或者调用了forceUpdate方法后，该方法不会被调用</em></p>\n<ol>\n<li>componentWillUpdate</li>\n</ol>\n<p>接收到新的props或者state后，进行渲染之前调用，此时不允许更新props或state。</p>\n<ol>\n<li>componentDidUpdate</li>\n</ol>\n<p>完成渲染新的props或者state后调用，此时可以访问到新的DOM元素。</p>\n<ol>\n<li>componentWillUnmount</li>\n</ol>\n<p>组件被移除之前被调用，可以用于做一些清理工作，在componentDidMount方法中添加的所有任务都需要在该方法中撤销，比如创建的定时器或添加的事件监听器。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>React：引领未来的用户界面开发框架/寸志 范洪春 杨森 陈涌 译 – 电子工业出版社</li>\n<li><a href=\"https://facebook.github.io/react/docs/component-specs.html\">Component Specs and Lifecycle190</a></li>\n</ul>"},{"title":"ubuntu编译android 6.0源代码环境搭建","date":"2016-11-16T01:04:37.000Z","_content":"\n\n## 安装jdk\n```bash\nsudo apt-get install openjdk-7-jdk openjdk-7-jre \n```\n如果之前系统是其他版本的JDK，需要把环境变量切换过来。\n\n<!--more-->\n\njdk版本错误会导致编译错误，如\n```\nprebuilts/sdk/api/23.txt:41822: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)\nprebuilts/sdk/api/23.txt:41823: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(MarginLayoutParams)\nprebuilts/sdk/api/23.txt:41824: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)\nprebuilts/sdk/api/23.txt:42895: error 9: Removed public constructor java.io.ObjectInputStream.GetField.ObjectInputStream.GetField()\nprebuilts/sdk/api/23.txt:42955: error 9: Removed public constructor java.io.ObjectOutputStream.PutField.ObjectOutputStream.PutField()\nprebuilts/sdk/api/23.txt:43623: error 9: Removed public constructor java.lang.Character.Subset.Character.Subset(String)\nprebuilts/sdk/api/23.txt:46730: error 9: Removed public constructor java.nio.channels.Pipe.SinkChannel.Pipe.SinkChannel(SelectorProvider)\nprebuilts/sdk/api/23.txt:46735: error 9: Removed public constructor java.nio.channels.Pipe.SourceChannel.Pipe.SourceChannel(SelectorProvider)\nprebuilts/sdk/api/23.txt:47370: error 9: Removed public constructor java.security.KeyStore.Builder.KeyStore.Builder()\nprebuilts/sdk/api/23.txt:47379: error 9: Removed public constructor java.security.KeyStore.CallbackHandlerProtection.KeyStore.CallbackHandlerProtection(CallbackHandler)\nprebuilts/sdk/api/23.txt:47391: error 9: Removed public constructor java.security.KeyStore.PasswordProtection.KeyStore.PasswordProtection(char)\n```\n\n## 安装其他工具包\n```bash\nsudo apt-get install git gitg gnupg flex bison gperf build-essential  zip curl libc6-dev  libncurses5-dev:i386 x11proto-core-dev  libx11-dev:i386 libreadline6-dev:i386   libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown\tlibxml2-utils xsltproc zlib1g-dev:i386 libarchive-zip-perl \n```\n\n","source":"_posts/ubuntu编译android源代码环境搭建.md","raw":"---\ntitle: ubuntu编译android 6.0源代码环境搭建\ntags:\n  - ubuntu\n  - android\n  - 环境搭建\ndate: 2016-11-16 09:04:37\n---\n\n\n## 安装jdk\n```bash\nsudo apt-get install openjdk-7-jdk openjdk-7-jre \n```\n如果之前系统是其他版本的JDK，需要把环境变量切换过来。\n\n<!--more-->\n\njdk版本错误会导致编译错误，如\n```\nprebuilts/sdk/api/23.txt:41822: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)\nprebuilts/sdk/api/23.txt:41823: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(MarginLayoutParams)\nprebuilts/sdk/api/23.txt:41824: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)\nprebuilts/sdk/api/23.txt:42895: error 9: Removed public constructor java.io.ObjectInputStream.GetField.ObjectInputStream.GetField()\nprebuilts/sdk/api/23.txt:42955: error 9: Removed public constructor java.io.ObjectOutputStream.PutField.ObjectOutputStream.PutField()\nprebuilts/sdk/api/23.txt:43623: error 9: Removed public constructor java.lang.Character.Subset.Character.Subset(String)\nprebuilts/sdk/api/23.txt:46730: error 9: Removed public constructor java.nio.channels.Pipe.SinkChannel.Pipe.SinkChannel(SelectorProvider)\nprebuilts/sdk/api/23.txt:46735: error 9: Removed public constructor java.nio.channels.Pipe.SourceChannel.Pipe.SourceChannel(SelectorProvider)\nprebuilts/sdk/api/23.txt:47370: error 9: Removed public constructor java.security.KeyStore.Builder.KeyStore.Builder()\nprebuilts/sdk/api/23.txt:47379: error 9: Removed public constructor java.security.KeyStore.CallbackHandlerProtection.KeyStore.CallbackHandlerProtection(CallbackHandler)\nprebuilts/sdk/api/23.txt:47391: error 9: Removed public constructor java.security.KeyStore.PasswordProtection.KeyStore.PasswordProtection(char)\n```\n\n## 安装其他工具包\n```bash\nsudo apt-get install git gitg gnupg flex bison gperf build-essential  zip curl libc6-dev  libncurses5-dev:i386 x11proto-core-dev  libx11-dev:i386 libreadline6-dev:i386   libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown\tlibxml2-utils xsltproc zlib1g-dev:i386 libarchive-zip-perl \n```\n\n","slug":"ubuntu编译android源代码环境搭建","published":1,"updated":"2016-11-16T11:18:54.718Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw7pnwu8003f3opqyxtk2mel","content":"<h2 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install openjdk-7-jdk openjdk-7-jre</div></pre></td></tr></table></figure>\n<p>如果之前系统是其他版本的JDK，需要把环境变量切换过来。</p>\n<a id=\"more\"></a>\n<p>jdk版本错误会导致编译错误，如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">prebuilts/sdk/api/23.txt:41822: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)</div><div class=\"line\">prebuilts/sdk/api/23.txt:41823: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(MarginLayoutParams)</div><div class=\"line\">prebuilts/sdk/api/23.txt:41824: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)</div><div class=\"line\">prebuilts/sdk/api/23.txt:42895: error 9: Removed public constructor java.io.ObjectInputStream.GetField.ObjectInputStream.GetField()</div><div class=\"line\">prebuilts/sdk/api/23.txt:42955: error 9: Removed public constructor java.io.ObjectOutputStream.PutField.ObjectOutputStream.PutField()</div><div class=\"line\">prebuilts/sdk/api/23.txt:43623: error 9: Removed public constructor java.lang.Character.Subset.Character.Subset(String)</div><div class=\"line\">prebuilts/sdk/api/23.txt:46730: error 9: Removed public constructor java.nio.channels.Pipe.SinkChannel.Pipe.SinkChannel(SelectorProvider)</div><div class=\"line\">prebuilts/sdk/api/23.txt:46735: error 9: Removed public constructor java.nio.channels.Pipe.SourceChannel.Pipe.SourceChannel(SelectorProvider)</div><div class=\"line\">prebuilts/sdk/api/23.txt:47370: error 9: Removed public constructor java.security.KeyStore.Builder.KeyStore.Builder()</div><div class=\"line\">prebuilts/sdk/api/23.txt:47379: error 9: Removed public constructor java.security.KeyStore.CallbackHandlerProtection.KeyStore.CallbackHandlerProtection(CallbackHandler)</div><div class=\"line\">prebuilts/sdk/api/23.txt:47391: error 9: Removed public constructor java.security.KeyStore.PasswordProtection.KeyStore.PasswordProtection(char)</div></pre></td></tr></table></figure></p>\n<h2 id=\"安装其他工具包\"><a href=\"#安装其他工具包\" class=\"headerlink\" title=\"安装其他工具包\"></a>安装其他工具包</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install git gitg gnupg flex bison gperf build-essential  zip curl libc6-dev  libncurses5-dev:i386 x11proto-core-dev  libx11-dev:i386 libreadline6-dev:i386   libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown\tlibxml2-utils xsltproc zlib1g-dev:i386 libarchive-zip-perl</div></pre></td></tr></table></figure>\n","excerpt":"<h2 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install openjdk-7-jdk openjdk-7-jre</div></pre></td></tr></table></figure>\n<p>如果之前系统是其他版本的JDK，需要把环境变量切换过来。</p>","more":"<p>jdk版本错误会导致编译错误，如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">prebuilts/sdk/api/23.txt:41822: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)</div><div class=\"line\">prebuilts/sdk/api/23.txt:41823: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(MarginLayoutParams)</div><div class=\"line\">prebuilts/sdk/api/23.txt:41824: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)</div><div class=\"line\">prebuilts/sdk/api/23.txt:42895: error 9: Removed public constructor java.io.ObjectInputStream.GetField.ObjectInputStream.GetField()</div><div class=\"line\">prebuilts/sdk/api/23.txt:42955: error 9: Removed public constructor java.io.ObjectOutputStream.PutField.ObjectOutputStream.PutField()</div><div class=\"line\">prebuilts/sdk/api/23.txt:43623: error 9: Removed public constructor java.lang.Character.Subset.Character.Subset(String)</div><div class=\"line\">prebuilts/sdk/api/23.txt:46730: error 9: Removed public constructor java.nio.channels.Pipe.SinkChannel.Pipe.SinkChannel(SelectorProvider)</div><div class=\"line\">prebuilts/sdk/api/23.txt:46735: error 9: Removed public constructor java.nio.channels.Pipe.SourceChannel.Pipe.SourceChannel(SelectorProvider)</div><div class=\"line\">prebuilts/sdk/api/23.txt:47370: error 9: Removed public constructor java.security.KeyStore.Builder.KeyStore.Builder()</div><div class=\"line\">prebuilts/sdk/api/23.txt:47379: error 9: Removed public constructor java.security.KeyStore.CallbackHandlerProtection.KeyStore.CallbackHandlerProtection(CallbackHandler)</div><div class=\"line\">prebuilts/sdk/api/23.txt:47391: error 9: Removed public constructor java.security.KeyStore.PasswordProtection.KeyStore.PasswordProtection(char)</div></pre></td></tr></table></figure></p>\n<h2 id=\"安装其他工具包\"><a href=\"#安装其他工具包\" class=\"headerlink\" title=\"安装其他工具包\"></a>安装其他工具包</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install git gitg gnupg flex bison gperf build-essential  zip curl libc6-dev  libncurses5-dev:i386 x11proto-core-dev  libx11-dev:i386 libreadline6-dev:i386   libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown\tlibxml2-utils xsltproc zlib1g-dev:i386 libarchive-zip-perl</div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciw7pnwsy000t3opqmuy74at1","category_id":"ciw7pnwsv000p3opqumfkqg5x","_id":"ciw7pnwt200103opqj1251vtm"},{"post_id":"ciw7pnwss000k3opq0ffewiqo","category_id":"ciw7pnwsv000p3opqumfkqg5x","_id":"ciw7pnwt400133opqys5x9ixp"},{"post_id":"ciw7pnwt1000y3opqe715c6wz","category_id":"ciw7pnwsv000p3opqumfkqg5x","_id":"ciw7pnwt500173opq18c8w257"},{"post_id":"ciw7pnwsu000n3opqs0rtmv93","category_id":"ciw7pnwsv000p3opqumfkqg5x","_id":"ciw7pnwt500193opq3kljnj9t"},{"post_id":"ciw7pnwsw000q3opqrbfph4e1","category_id":"ciw7pnwsv000p3opqumfkqg5x","_id":"ciw7pnwt6001c3opqqetqzp25"}],"PostTag":[{"post_id":"ciw7pnws200003opqkeiap185","tag_id":"ciw7pnws800023opqc3q9wwt9","_id":"ciw7pnwsr000h3opq7quq9fu5"},{"post_id":"ciw7pnws200003opqkeiap185","tag_id":"ciw7pnwsc00063opqg7tz2qoq","_id":"ciw7pnwss000j3opq9nt4auzl"},{"post_id":"ciw7pnws200003opqkeiap185","tag_id":"ciw7pnwsg00093opqfm3yztj9","_id":"ciw7pnwst000m3opqzqm8vqda"},{"post_id":"ciw7pnws200003opqkeiap185","tag_id":"ciw7pnwsm000c3opqutcez8yj","_id":"ciw7pnwsv000o3opq7np5zjiq"},{"post_id":"ciw7pnws900033opqbxmgntcm","tag_id":"ciw7pnwsp000f3opqcbcti3uh","_id":"ciw7pnwsy000s3opq6o161274"},{"post_id":"ciw7pnwsa00043opqil4vyjns","tag_id":"ciw7pnwst000l3opqeyseqggc","_id":"ciw7pnwsy000u3opqy0rgg4ei"},{"post_id":"ciw7pnwsb00053opqjjndjxvi","tag_id":"ciw7pnwsx000r3opqa57ho6b3","_id":"ciw7pnwt2000z3opq1vattm6o"},{"post_id":"ciw7pnwsc00073opq7yjm4x63","tag_id":"ciw7pnwt0000x3opqtqjalbpm","_id":"ciw7pnwt400163opq0kqmxg6y"},{"post_id":"ciw7pnwse00083opqkmx8fxws","tag_id":"ciw7pnwsc00063opqg7tz2qoq","_id":"ciw7pnwt9001g3opqf0coxl6k"},{"post_id":"ciw7pnwse00083opqkmx8fxws","tag_id":"ciw7pnwt400143opqb66nou2n","_id":"ciw7pnwta001h3opqmznsaxlt"},{"post_id":"ciw7pnwse00083opqkmx8fxws","tag_id":"ciw7pnwt6001b3opqxjmooqfd","_id":"ciw7pnwtb001j3opqtujal2ky"},{"post_id":"ciw7pnwse00083opqkmx8fxws","tag_id":"ciw7pnwt9001e3opq95mor4w1","_id":"ciw7pnwtb001k3opqgw65mmvn"},{"post_id":"ciw7pnwsh000a3opqu20cnwnk","tag_id":"ciw7pnwsc00063opqg7tz2qoq","_id":"ciw7pnwtc001m3opql8xuby1g"},{"post_id":"ciw7pnwsh000a3opqu20cnwnk","tag_id":"ciw7pnws800023opqc3q9wwt9","_id":"ciw7pnwtc001n3opqo261m58w"},{"post_id":"ciw7pnwsh000a3opqu20cnwnk","tag_id":"ciw7pnwt9001f3opqi4f75kv7","_id":"ciw7pnwtc001p3opqqagv7pjt"},{"post_id":"ciw7pnwsl000b3opq2szxfq4g","tag_id":"ciw7pnwt9001f3opqi4f75kv7","_id":"ciw7pnwtc001q3opq5vj6ecxa"},{"post_id":"ciw7pnwsl000b3opq2szxfq4g","tag_id":"ciw7pnwsc00063opqg7tz2qoq","_id":"ciw7pnwte001s3opqe0lg20i3"},{"post_id":"ciw7pnwsn000d3opqojaq9htt","tag_id":"ciw7pnwst000l3opqeyseqggc","_id":"ciw7pnwte001t3opqo0rm58jw"},{"post_id":"ciw7pnwso000e3opqb4u865jw","tag_id":"ciw7pnwst000l3opqeyseqggc","_id":"ciw7pnwtf001v3opqgtmk5anj"},{"post_id":"ciw7pnwsp000g3opq2w6itwn8","tag_id":"ciw7pnwtd001r3opqq9f7nacn","_id":"ciw7pnwtg001x3opqrc5khoa7"},{"post_id":"ciw7pnwsp000g3opq2w6itwn8","tag_id":"ciw7pnwte001u3opqzni32opx","_id":"ciw7pnwth001y3opqfq6006rn"},{"post_id":"ciw7pnwsr000i3opqaw0q9i1e","tag_id":"ciw7pnwtg001w3opq9ktcd3di","_id":"ciw7pnwth00203opqd0abu9pn"},{"post_id":"ciw7pnwss000k3opq0ffewiqo","tag_id":"ciw7pnwth001z3opq5zp3p0dp","_id":"ciw7pnwtj00243opqibsows96"},{"post_id":"ciw7pnwss000k3opq0ffewiqo","tag_id":"ciw7pnwth00213opqh4fbjt58","_id":"ciw7pnwtj00253opqikbphqfi"},{"post_id":"ciw7pnwss000k3opq0ffewiqo","tag_id":"ciw7pnwth00223opqa714tqyf","_id":"ciw7pnwtj00273opqlaqpka2q"},{"post_id":"ciw7pnwsu000n3opqs0rtmv93","tag_id":"ciw7pnwth001z3opq5zp3p0dp","_id":"ciw7pnwtk002a3opq21y26sqk"},{"post_id":"ciw7pnwsu000n3opqs0rtmv93","tag_id":"ciw7pnwth00213opqh4fbjt58","_id":"ciw7pnwtl002b3opqqc61buzl"},{"post_id":"ciw7pnwsu000n3opqs0rtmv93","tag_id":"ciw7pnwth00223opqa714tqyf","_id":"ciw7pnwtl002d3opqc3ybin8o"},{"post_id":"ciw7pnwsw000q3opqrbfph4e1","tag_id":"ciw7pnwth001z3opq5zp3p0dp","_id":"ciw7pnwtm002g3opqaup1jql4"},{"post_id":"ciw7pnwsw000q3opqrbfph4e1","tag_id":"ciw7pnwth00213opqh4fbjt58","_id":"ciw7pnwtm002h3opqnl8m526t"},{"post_id":"ciw7pnwsw000q3opqrbfph4e1","tag_id":"ciw7pnwth00223opqa714tqyf","_id":"ciw7pnwtm002j3opqen5eqngr"},{"post_id":"ciw7pnwsy000t3opqmuy74at1","tag_id":"ciw7pnwth001z3opq5zp3p0dp","_id":"ciw7pnwtm002m3opq326md8xp"},{"post_id":"ciw7pnwsy000t3opqmuy74at1","tag_id":"ciw7pnwth00213opqh4fbjt58","_id":"ciw7pnwtm002n3opqaagqhjq3"},{"post_id":"ciw7pnwsy000t3opqmuy74at1","tag_id":"ciw7pnwth00223opqa714tqyf","_id":"ciw7pnwtn002p3opqsvtnc21v"},{"post_id":"ciw7pnwsz000v3opq39viix3z","tag_id":"ciw7pnws800023opqc3q9wwt9","_id":"ciw7pnwtn002q3opq47v3u8w0"},{"post_id":"ciw7pnwsz000v3opq39viix3z","tag_id":"ciw7pnwtm002l3opq7o88ky4r","_id":"ciw7pnwtn002s3opq9ri9im41"},{"post_id":"ciw7pnwt1000y3opqe715c6wz","tag_id":"ciw7pnwth001z3opq5zp3p0dp","_id":"ciw7pnwto002v3opqym1lpzl1"},{"post_id":"ciw7pnwt1000y3opqe715c6wz","tag_id":"ciw7pnwth00213opqh4fbjt58","_id":"ciw7pnwto002w3opq04hmx4vd"},{"post_id":"ciw7pnwt1000y3opqe715c6wz","tag_id":"ciw7pnwth00223opqa714tqyf","_id":"ciw7pnwto002y3opqu0m79mv4"},{"post_id":"ciw7pnwt300113opqmto7po2p","tag_id":"ciw7pnwtg001w3opq9ktcd3di","_id":"ciw7pnwto00303opq4xbck4tf"},{"post_id":"ciw7pnwt300113opqmto7po2p","tag_id":"ciw7pnwto002x3opqfkgqphoi","_id":"ciw7pnwto00313opqp9ee7hch"},{"post_id":"ciw7pnwt400153opql3oxb12k","tag_id":"ciw7pnws800023opqc3q9wwt9","_id":"ciw7pnwtp00333opqsgac9868"},{"post_id":"ciw7pnwt400153opql3oxb12k","tag_id":"ciw7pnwt9001f3opqi4f75kv7","_id":"ciw7pnwtp00343opqgr6phq1e"},{"post_id":"ciw7pnwt500183opqbxgi36n8","tag_id":"ciw7pnwto00323opqkh5z8hf8","_id":"ciw7pnwtp00373opqz9k0occ7"},{"post_id":"ciw7pnwt500183opqbxgi36n8","tag_id":"ciw7pnwtp00353opqgnbet31d","_id":"ciw7pnwtp00383opqq77ac6i9"},{"post_id":"ciw7pnwt6001a3opqo0jpetu2","tag_id":"ciw7pnwto00323opqkh5z8hf8","_id":"ciw7pnwtq003b3opqtxkhguz3"},{"post_id":"ciw7pnwt6001a3opqo0jpetu2","tag_id":"ciw7pnwtp00393opqdl27cdxl","_id":"ciw7pnwtq003c3opqgbb4ms4h"},{"post_id":"ciw7pnwt6001d3opqq8trjjn3","tag_id":"ciw7pnwth001z3opq5zp3p0dp","_id":"ciw7pnwtq003d3opqmkmw8rxk"},{"post_id":"ciw7pnwu8003f3opqyxtk2mel","tag_id":"ciw7pnws800023opqc3q9wwt9","_id":"ciw7pnwuc003i3opqw5fsq6zm"},{"post_id":"ciw7pnwu8003f3opqyxtk2mel","tag_id":"ciw7pnwsc00063opqg7tz2qoq","_id":"ciw7pnwuc003j3opqriymerz1"},{"post_id":"ciw7pnwu8003f3opqyxtk2mel","tag_id":"ciw7pnwub003h3opq5eonsatc","_id":"ciw7pnwuc003k3opqjg0gl6te"}],"Tag":[{"name":"ubuntu","_id":"ciw7pnws800023opqc3q9wwt9"},{"name":"android","_id":"ciw7pnwsc00063opqg7tz2qoq"},{"name":"apk","_id":"ciw7pnwsg00093opqfm3yztj9"},{"name":"reverse engineering","_id":"ciw7pnwsm000c3opqutcez8yj"},{"name":"son","_id":"ciw7pnwsp000f3opqcbcti3uh"},{"name":"jQuery","_id":"ciw7pnwst000l3opqeyseqggc"},{"name":"css","_id":"ciw7pnwsx000r3opqa57ho6b3"},{"name":"javascript","_id":"ciw7pnwt0000x3opqtqjalbpm"},{"name":"nodejs","_id":"ciw7pnwt400143opqb66nou2n"},{"name":"https","_id":"ciw7pnwt6001b3opqxjmooqfd"},{"name":"openssl","_id":"ciw7pnwt9001e3opq95mor4w1"},{"name":"android studio","_id":"ciw7pnwt9001f3opqi4f75kv7"},{"name":"openjdk","_id":"ciw7pnwtd001r3opqq9f7nacn"},{"name":"java","_id":"ciw7pnwte001u3opqzni32opx"},{"name":"git","_id":"ciw7pnwtg001w3opq9ktcd3di"},{"name":"react","_id":"ciw7pnwth001z3opq5zp3p0dp"},{"name":"react-router","_id":"ciw7pnwth00213opqh4fbjt58"},{"name":"翻译文档","_id":"ciw7pnwth00223opqa714tqyf"},{"name":"update-alternatives","_id":"ciw7pnwtm002l3opq7o88ky4r"},{"name":".gitignore","_id":"ciw7pnwto002x3opqfkgqphoi"},{"name":"windows","_id":"ciw7pnwto00323opqkh5z8hf8"},{"name":"npm","_id":"ciw7pnwtp00353opqgnbet31d"},{"name":"mongodb","_id":"ciw7pnwtp00393opqdl27cdxl"},{"name":"环境搭建","_id":"ciw7pnwub003h3opq5eonsatc"}]}}