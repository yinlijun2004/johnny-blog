{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1495701185995},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1495701185997},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1495701185995},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1495701185999},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1495701185998},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1495701185995},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1495701185998},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1495701186001},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1495701186002},{"_id":"themes/next/_config.yml","hash":"825fe994f09736f55d8c795b23249df8badc971b","modified":1514206722204},{"_id":"themes/next/bower.json","hash":"936b9aed1934471bb74cdaacc3fb8031eb01fe23","modified":1495701186003},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1495701186002},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1495701186000},{"_id":"themes/next/package.json","hash":"a5c189d4c4e946e936d3b5e29e2d81ddaf03ff96","modified":1495701186043},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1495701186004},{"_id":"source/_posts/CSS-The-Definitive-Guide.md","hash":"0210f6a0ee76694eec7ecb57bfff8e20f55f260f","modified":1495683678230},{"_id":"source/_posts/High-Performance-Javascript.md","hash":"96eacd0b65cbb68197478ec925f54fac61e8cae2","modified":1495683678231},{"_id":"source/_posts/android-studio编译错误-目标模式不含有“-”。-停止。.md","hash":"7c98417de932d613499774861a04c9d11c46105f","modified":1495683678232},{"_id":"source/_posts/android-https-verify-ways.md","hash":"68902b455cdb4a7fa8e191a83a96cdd2ff8dc5df","modified":1495683678231},{"_id":"source/_posts/chapter-2.md","hash":"ecd43c97c97ccc4f5682caa9c6ebc5b2f651c53d","modified":1495683678232},{"_id":"source/_posts/chapter-4.md","hash":"b4a6b20e8394497b7f42662876806016e578a3fb","modified":1495683678233},{"_id":"source/_posts/hexo-to-ali-ecs.md","hash":"7a15a5776d7723aba11397e7d225f993c3f15c59","modified":1513666527476},{"_id":"source/_posts/fix-dev-kvm-is-not-found.md","hash":"78dab130f7e89a2814e9be742d454f3885532033","modified":1495683678233},{"_id":"source/_posts/chapter-3.md","hash":"42c699aa3e7bb475e9b86e3cbbc96d3c1b6e2ada","modified":1495683678233},{"_id":"source/_posts/git配置user-name和user-email.md","hash":"264ea0341af09e5631b50153b7b7bde68c57e39d","modified":1495683678234},{"_id":"source/_posts/gitignore无效，不能过滤某些文件.md","hash":"c62cc3765316f4ca03a922695d23638c8616a993","modified":1495683678233},{"_id":"source/_posts/how-to-download-openjdk.md","hash":"02c3f5af55aea5e6ebfaa79623d3bebd1fd4f4da","modified":1495683678234},{"_id":"source/_posts/my-ota-tutorial-2.md","hash":"ee64113f03972e090ec80048835c0ce3a6035500","modified":1513858531311},{"_id":"source/_posts/react-lifecycle.md","hash":"9cc2f02375721aca1e601a3c2f608e485c2c1d64","modified":1495683678235},{"_id":"source/_posts/kotlin-sample.md","hash":"265664bf81cbf882ed63f49a12422cfc153f7f07","modified":1495702319868},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1495701186002},{"_id":"source/_posts/react-router-4-0-0-api-Link.md","hash":"9a76aa7b6e972950869aa4c2306eca03ca5034b3","modified":1495683678235},{"_id":"source/_posts/make-ubutun-desktop.md","hash":"9aa6207fbed6285c32a8f269cf2ca9f0124f30dd","modified":1495683678234},{"_id":"source/_posts/my-ota-tutorial-1.md","hash":"72cf71ca3258660ad8bc81f2bb52d288bc487fa8","modified":1513856478997},{"_id":"source/_posts/react-router-4-0-0-api-Match.md","hash":"a867db41dcfb7dd4a500c7b0afebdb138c948de3","modified":1495704225984},{"_id":"source/_posts/react-router-4-0-0-api-Miss.md","hash":"ea0b3f754dc3ef800d974376e8c6129c441fb99b","modified":1495683678236},{"_id":"source/_posts/react-router-4-0-0-api-BrowserRouter.md","hash":"84237860854da6610f96937a5047141b0349d9d6","modified":1495683678235},{"_id":"source/_posts/react-router-4-0-0-api-NavigationPrompt.md","hash":"bc4278b85e3855f26deaa782ccb925beaea55db0","modified":1495683678236},{"_id":"source/_posts/react-router-4-0-0-api.md","hash":"4ce89c746ff8a2677ade5e6226d354e30ee8e3e8","modified":1495683678236},{"_id":"source/_posts/ubuntu利用update-alternatives配置java.md","hash":"51f6d70e2373ba10f2e5bdcc83371153547e28ae","modified":1495683678237},{"_id":"source/_posts/ubuntu编译android源代码环境搭建.md","hash":"03ee5608815d8f3761250e68967f50a8dff49b71","modified":1495683678237},{"_id":"source/_posts/windows下文件路径太深，无法删除解决办法.md","hash":"72f6c68d453a1472577c2607e26416ebaa82751b","modified":1495683678237},{"_id":"source/categories/index.md","hash":"a0e51752f654c428f1e02c0b4e656f3bc80467ef","modified":1495683678238},{"_id":"source/_posts/windows配置mongdb记录.md","hash":"c24f93f7fa2bffaf7714ba4f6779075024b5e83f","modified":1495683678237},{"_id":"source/_drafts/my-son-2016-11-21.md","hash":"9f3d49dea22a6c1c61f3b0a7e165c0339cf94710","modified":1495683678228},{"_id":"source/_drafts/qrcode.md","hash":"2841f94c615409606dd6127807f9578d863719f9","modified":1495683678229},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1495701185996},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"4de856de657a27f340f245eb491a1f52ceba1735","modified":1495701185997},{"_id":"source/tags/index.md","hash":"04bc60dd420ab525660ecff2551d582e4be83df5","modified":1495683678238},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1495701186006},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1495701186005},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1495701186007},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1495701186005},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1495701186007},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1495701186004},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1495701186007},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1495701186006},{"_id":"themes/next/languages/ru.yml","hash":"84d41a111e497236b2c1fa16e9b91668a1f37037","modified":1495701186008},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1495701186009},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1495701186009},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1495701186008},{"_id":"source/_posts/kotlin惯用法.md","hash":"cec891d3c5550c0f31331a5d33e05194508608fd","modified":1495770478791},{"_id":"source/_drafts/reverse-engineering-apk.md","hash":"d52a5129e4c039399b2da1138e3a4dd89cdff40e","modified":1513147082099},{"_id":"themes/next/layout/page.swig","hash":"79297b9b9abd684ba025ba2d1551e9e0591b5a63","modified":1495701186042},{"_id":"themes/next/layout/category.swig","hash":"f315f12651de8065fdad73b003da4335ef177173","modified":1495701186041},{"_id":"themes/next/layout/archive.swig","hash":"a1d1e91013baaaeb7deaf35c6d3975971ce38e02","modified":1495701186040},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1495701186042},{"_id":"themes/next/layout/schedule.swig","hash":"8086f1163b10460258ecbbbe48b057b22bb2f02e","modified":1495701186042},{"_id":"themes/next/layout/_layout.swig","hash":"efa71671290bb4b497d83720282b36482b6b0efb","modified":1495701186011},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1495701186043},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1495701186044},{"_id":"themes/next/layout/tag.swig","hash":"cc9878932580c890f8f3e569225e29bb37e25b49","modified":1495701186043},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1495701186009},{"_id":"themes/next/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1495701186041},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1495701186139},{"_id":"source/_posts/my-ota-tutorial.md","hash":"31c40e509feb805fdc324ce4f40a6386cdafb497","modified":1513856328048},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1495701186139},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1495701186139},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495701186083},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1495701186011},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5258c03149aa18e9abfeb8de10e435a406d9c924","modified":1495701186015},{"_id":"themes/next/layout/_partials/footer.swig","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1495701186015},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1495701186010},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1495701186019},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1495701186019},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1495701186019},{"_id":"themes/next/layout/_partials/header.swig","hash":"f30679a5216b482beda69d395640b9571fdeef15","modified":1514205526311},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1495701186012},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1495701186012},{"_id":"themes/next/layout/_macro/post.swig","hash":"3c6ef2ec749f2102ea5006016261263d34b6d162","modified":1495701186013},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1495701186013},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1495701186014},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1495701186023},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1495701186024},{"_id":"themes/next/layout/_partials/head.swig","hash":"881556e5387d760d7b67c49f4f3c3ccc2240436b","modified":1495701186016},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1495701186036},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1495701186035},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1495701186026},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1495701186037},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1495701186045},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1495701186045},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1495701186045},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1495701186046},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1495701186046},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1495701186047},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1495701186036},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1495701186083},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1495701186084},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1495701186084},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1495701186085},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1495701186085},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1495701186036},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1495701186086},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1495701186086},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e7f58154ac734088372888742e0029ce7c690511","modified":1495701186014},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1495701186087},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1495701186087},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1495701186087},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1495701186087},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1495701186088},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1495701186088},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1495701186088},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495701186025},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495701186025},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495701186073},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495701186073},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495701186074},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495701186082},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1495701186083},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1495701186018},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1495701186086},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1495701186020},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1495701186018},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1495701186021},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1514205955899},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1495701186022},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1495701186023},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1495701186025},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1495701186024},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1495701186028},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1495701186027},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1495701186029},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1495701186022},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1495701186029},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1495701186027},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1495701186030},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1495701186029},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1495701186030},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1495701186030},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1495701186022},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1495701186031},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1495701186031},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1495701186033},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1495701186033},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1495701186032},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"0399bbdc524ba50930cb6f8e2d5628ff682fc612","modified":1495701186034},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1495701186035},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1495701186034},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1495701186040},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1495701186032},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1495701186038},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1495701186089},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1495701186039},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1495701186089},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ec035e20d1f26bf553a79877180ba312bea885c","modified":1495701186090},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1495701186090},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1495701186091},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1495701186091},{"_id":"themes/next/source/js/src/post-details.js","hash":"bfaf52b69aad96566aa21b785973441a2555b4ba","modified":1495701186091},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1495701186090},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1495701186092},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1495701186092},{"_id":"themes/next/source/js/src/utils.js","hash":"092a32149b67a7af271c6c2c45f4c737f64b7e54","modified":1495701186093},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1495701186072},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"a0c042a74ea1afcb19daac7e2604a2bc5495037b","modified":1495701186039},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1495701186073},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1495701186074},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1495701186082},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1495701186082},{"_id":"themes/next/source/css/_variables/base.styl","hash":"dacede1cc110c762e7a5468dc0e34ae1a962d5aa","modified":1495701186083},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1495701186102},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"68db2c0bf1064176627199394f25f6dc37ea23ad","modified":1495701186102},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1495701186109},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1495701186103},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"c75024151fc63220e7d01035d8a1aff9affdecc7","modified":1495701186034},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1495701186099},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1495701186110},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1495701186110},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1495701186103},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1495701186112},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1495701186113},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1495701186111},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1495701186112},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1495701186125},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1495701186112},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1495701186127},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1495701186127},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1495701186128},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1495701186128},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1495701186128},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1495701186129},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1495701186130},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1495701186127},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1495701186109},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1495701186135},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1495701186135},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1495701186129},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1495701186137},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1495701186138},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1495701186138},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1495701186126},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1495701186037},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1495701186038},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1495701186092},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1495701186048},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1495701186070},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1495701186048},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1495701186064},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1495701186049},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1495701186056},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1495701186070},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1495701186071},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1495701186070},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1495701186071},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1495701186075},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1495701186048},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1495701186074},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1495701186075},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1495701186076},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1495701186075},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1495701186076},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1495701186049},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1495701186081},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1495701186071},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1495701186080},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1495701186076},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1495701186081},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1495701186080},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1495701186077},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1495701186077},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1495701186078},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1495701186079},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1495701186079},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1495701186081},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1495701186104},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1495701186104},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1495701186104},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1495701186105},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1495701186098},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1495701186105},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"95518d298d3c5c271faec2e4977df9e5dedd5d84","modified":1495701186096},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1495701186105},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1495701186109},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1495701186108},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1495701186111},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1495701186111},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1495701186108},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1495701186114},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1495701186114},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1495701186080},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1495701186134},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1495701186134},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1495701186113},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1495701186096},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"524cfca7b6ab135d81ea723d8de06fdf0dbe7e56","modified":1495701186095},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1495701186137},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1495701186124},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1495701186125},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1495701186050},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1495701186050},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1495701186050},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1495701186052},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1495701186052},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1495701186053},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1495701186053},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1495701186054},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1495701186054},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1495701186055},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1495701186055},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1495701186054},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e1a7a0828e3c93cc044250084c1ae0c9a22a6d4c","modified":1495701186056},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1495701186050},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1495701186055},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1495701186056},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"3d3e0200716ceb276ac755cc400def9c1b437489","modified":1495701186058},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1495701186057},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1495701186057},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1495701186058},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1495701186058},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1495701186057},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1495701186060},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1495701186059},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1495701186060},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a497ea244df7dd97d1b961412b56f94cc4031e23","modified":1495701186061},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1495701186062},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1495701186061},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1495701186061},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1495701186062},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1495701186063},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1495701186062},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1495701186063},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1495701186064},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1495701186064},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1495701186066},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1495701186063},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1495701186065},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1495701186065},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1495701186067},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1495701186066},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1495701186065},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1495701186067},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1495701186067},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1495701186066},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1495701186068},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1495701186068},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1495701186069},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1495701186068},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1495701186068},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1495701186077},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1495701186093},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1495701186079},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1495701186077},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"eb45ee16051624c6e36a274c0a9538e961f10c4d","modified":1495701186069},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1495701186093},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1495701186094},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1495701186106},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1495701186107},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1495701186106},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1495701186106},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1495701186094},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1495701186116},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1495701186107},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1495701186118},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1495701186123},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1495701186107},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1495701186101},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1495701186133},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1495701186122},{"_id":"source/_drafts/my-ota-tutorial-2.md","hash":"defd483ff6ddd6c0821e224a7d18770f13147746","modified":1514199251511},{"_id":"source/search/index.md","hash":"655bd84f379cc41031a0dc016d1b89813c38f550","modified":1514204386894},{"_id":"public/atom.xml","hash":"a6eef92dae4485bb110aa1dd69f9e96398ed0fc4","modified":1514204630241},{"_id":"public/categories/index.html","hash":"253a7656f1e8dc45d9a63f7473f504c140b7a93c","modified":1514206730595},{"_id":"public/tags/index.html","hash":"f6b17813bb7879886b7265f8e2344e4b46596646","modified":1514206730595},{"_id":"public/2016/11/06/gitignore无效，不能过滤某些文件/index.html","hash":"568df1dfa8ee6c3c23b1f43db4b34d9b899b1f05","modified":1514206730597},{"_id":"public/2016/11/05/android-studio编译错误-目标模式不含有“-”。-停止。/index.html","hash":"4214ccbed0a73c3295c6d4846fee2e0fc900d1bd","modified":1514206730597},{"_id":"public/archives/2016/page/3/index.html","hash":"7b98afa580686edc95b4a081464ed628d13b875e","modified":1514206730598},{"_id":"public/archives/2016/09/index.html","hash":"0e9f7885e3a22312225447b6a4862a36e22aa471","modified":1514206730598},{"_id":"public/archives/2016/12/index.html","hash":"b9cc667aa5429f93abfae065b6c3ada5393ba7bc","modified":1514206730598},{"_id":"public/archives/2017/index.html","hash":"b8f55411576b3fc93fbed5e9331e6c6a6dc8f7cd","modified":1514206730598},{"_id":"public/archives/2017/05/index.html","hash":"046a60f5a4c9f217eee94860d0ae98e75ed02732","modified":1514206730598},{"_id":"public/archives/2017/12/index.html","hash":"9f32d80b94ef87580e104438a0de37610f25a6d9","modified":1514206730599},{"_id":"public/categories/react-router-4-0-0-api中文文档/index.html","hash":"2ea691c302d79549492bfc11b343c627dcdcce0c","modified":1514206730600},{"_id":"public/tags/css/index.html","hash":"91fda33bf3db1a513ad83ea0e507395130f1dffd","modified":1514206730601},{"_id":"public/tags/javascript/index.html","hash":"7ec305e9cc9728e30fb8fef20ada1d4e859a3542","modified":1514206730601},{"_id":"public/tags/android-studio/index.html","hash":"49ca6bd8221306e982f122e88934fcd386f3c9e8","modified":1514206730601},{"_id":"public/tags/android/index.html","hash":"575de38a1acc9c3ba1e2c374dc77236e5d6f590d","modified":1514206730601},{"_id":"public/tags/nodejs/index.html","hash":"ad576e4d3006ed8bada6b8b0b37811ced16cb945","modified":1514206730601},{"_id":"public/tags/https/index.html","hash":"4f7be14872dfee2b3f5f666001abdc50aa13205a","modified":1514206730601},{"_id":"public/tags/openssl/index.html","hash":"cf6973c9c86967628309d3a521669e831b907d61","modified":1514206730601},{"_id":"public/tags/jQuery/index.html","hash":"d6354de951820e59dec642df272c16f382a11ff1","modified":1514206730601},{"_id":"public/tags/hexo/index.html","hash":"8ce69638b3e36970d6acb29420569916b233696d","modified":1514206730601},{"_id":"public/tags/ECS/index.html","hash":"01a545ae66e27352b8399e77867837d7d19de25d","modified":1514206730601},{"_id":"public/tags/git/index.html","hash":"8cb073d7d462f672ef99a34a4eb463518c06e9ae","modified":1514206730601},{"_id":"public/tags/ubuntu/index.html","hash":"bb311f348584f985ffb88dadca23de3e76e1f73e","modified":1514206730601},{"_id":"public/tags/gitignore/index.html","hash":"886f086e156dfb8b0b3e893b43b6e56113dd3c9e","modified":1514206730601},{"_id":"public/tags/openjdk/index.html","hash":"54b3451c2aeb4bacd52448aac52fccf9073c1156","modified":1514206730601},{"_id":"public/tags/java/index.html","hash":"e7f30e9352f72c26d299bc8131043283a7cb8022","modified":1514206730601},{"_id":"public/tags/kotlin/index.html","hash":"968307934fc565301bfd54c773fd2b57b0871a8c","modified":1514206730601},{"_id":"public/tags/react-router/index.html","hash":"90ecde8c40b94c2307b24ed19e8302f8ad1c3848","modified":1514206730602},{"_id":"public/tags/翻译文档/index.html","hash":"7087fd0b36f060823c30579b16036e016a4158eb","modified":1514206730602},{"_id":"public/tags/express/index.html","hash":"aac7b320695fe3a8a8d92a1d3bd59bc40deae196","modified":1514206730602},{"_id":"public/tags/update-alternatives/index.html","hash":"c8a229e601545731c517791b2db05c715abe41b5","modified":1514206730602},{"_id":"public/tags/环境搭建/index.html","hash":"95a6d5b920b0ab19215d5f092a5d749268c3d8a8","modified":1514206730602},{"_id":"public/tags/windows/index.html","hash":"42e881b6edbc0280bdf633d7c2e47a2b4d9d8348","modified":1514206730602},{"_id":"public/tags/npm/index.html","hash":"04a29158058f23b42e9dd658800c89f815712bd4","modified":1514206730602},{"_id":"public/tags/mongodb/index.html","hash":"dfb4b915d06cb3a6737e27aec3a8d5608c759333","modified":1514206730602},{"_id":"public/2017/12/20/my-ota-tutorial-1/index.html","hash":"c4cf511904300c50e23f93ca361cbd2f9ec6c941","modified":1514206730595},{"_id":"public/2017/12/20/my-ota-tutorial/index.html","hash":"0be1782106ffd2093fef8d1a0c5fc8ec017b96a0","modified":1514206730595},{"_id":"public/2017/12/18/hexo-to-ali-ecs/index.html","hash":"e5a6782c1f4ce2c84abc87c3021faa103306ad2d","modified":1514206730596},{"_id":"public/2017/05/26/kotlin惯用法/index.html","hash":"02d77f5e3a05fdbb8b181a1f026828848ce7e41c","modified":1514206730596},{"_id":"public/2017/05/25/kotlin-sample/index.html","hash":"c9566c764727fac297c700c6a8d0bcbdc21a67f1","modified":1514206730596},{"_id":"public/2016/12/02/react-router-4-0-0-api-NavigationPrompt/index.html","hash":"e6f9035a84b727d77378e7ce84baef6956879e70","modified":1514206730596},{"_id":"public/2016/11/29/react-router-4-0-0-api-Link/index.html","hash":"ada4e103de924b7c020c475687a5b701387e44d5","modified":1514206730596},{"_id":"public/2016/11/29/react-router-4-0-0-api-Miss/index.html","hash":"c157742ecab955da50fc2fc13b90c58860230a6d","modified":1514206730596},{"_id":"public/2016/11/28/fix-dev-kvm-is-not-found/index.html","hash":"ec026a056579930d72ea5e3ea82b91732dfac03f","modified":1514206730596},{"_id":"public/2016/11/28/android-https-verify-ways/index.html","hash":"b19c164c953d0c7fcfb85973a40c2be02d00b3ca","modified":1514206730596},{"_id":"public/2016/11/25/react-router-4-0-0-api-Match/index.html","hash":"592e88744510907c87bd6c46b0c888c518a72808","modified":1514206730596},{"_id":"public/2016/11/24/react-lifecycle/index.html","hash":"2243e9d86c3c6a8394428d435919084a7001de72","modified":1514206730596},{"_id":"public/2016/11/24/react-router-4-0-0-api-BrowserRouter/index.html","hash":"fc7831e09ecbfd50b6a5c81a675b3c7f8e14cec0","modified":1514206730596},{"_id":"public/2016/11/24/react-router-4-0-0-api/index.html","hash":"3290c82ebececfcea8ca2d13c2b1f8831cd68718","modified":1514206730596},{"_id":"public/2016/11/16/ubuntu编译android源代码环境搭建/index.html","hash":"f61ea365556fe65727b55a76e9d690c69af3c6cc","modified":1514206730597},{"_id":"public/2016/11/15/how-to-download-openjdk/index.html","hash":"05c7ae5f7e3e7fa8d599cd0d05101f0421b44414","modified":1514206730597},{"_id":"public/2016/11/15/ubuntu利用update-alternatives配置java/index.html","hash":"dc1be2dcc6d648a4c1079e3c90591afe532725f5","modified":1514206730597},{"_id":"public/2016/11/15/make-ubutun-desktop/index.html","hash":"ecf33f0bde9262779e8e7420bd27002a60cd54a4","modified":1514206730597},{"_id":"public/2016/11/15/git配置user-name和user-email/index.html","hash":"e32409370e48b206468141a41ad397a25d8a5e5c","modified":1514206730597},{"_id":"public/2016/11/08/windows下文件路径太深，无法删除解决办法/index.html","hash":"b3761d0596ca46ffa4d9ab547a463efa3cd3e5d5","modified":1514206730597},{"_id":"public/2016/11/09/windows配置mongdb记录/index.html","hash":"4b1c55af9f56c76936a31ccfa9c2587b44aa541b","modified":1514206730597},{"_id":"public/2016/11/05/High-Performance-Javascript/index.html","hash":"96bf88b8a99a4ad366cb3851500542ed158aa6cf","modified":1514206730597},{"_id":"public/2016/09/06/CSS-The-Definitive-Guide/index.html","hash":"5794ed5dd6f85e3abd38de96a39f26cf4d21e68c","modified":1514206730597},{"_id":"public/2016/09/05/chapter-4/index.html","hash":"96820c20cfdf820bb59a4400b36da449bce3fd4e","modified":1514206730597},{"_id":"public/2016/09/03/chapter-3/index.html","hash":"b5e6336e2d9c788d02d0ddeeb57b8a54c961382d","modified":1514206730597},{"_id":"public/archives/index.html","hash":"71e58dff59ee05fbe9ce451bcb7e5011f1933cf7","modified":1514206730598},{"_id":"public/2016/09/02/chapter-2/index.html","hash":"fdc3b78417a6a2c661b8fd98abfb41c7736b6109","modified":1514206730597},{"_id":"public/archives/page/2/index.html","hash":"13b76db13a843de7684fe67756a529d8581e9530","modified":1514206730598},{"_id":"public/archives/page/3/index.html","hash":"96851bb401f3cd7e82258c023b79e30f7e949c27","modified":1514206730598},{"_id":"public/archives/2016/index.html","hash":"8c1e788d646728ec34b247d486e3ec711192c156","modified":1514206730598},{"_id":"public/archives/2016/page/2/index.html","hash":"0c87d8767cef267a4b7d1b1e8a6db84e03bfbaf7","modified":1514206730598},{"_id":"public/archives/2016/11/page/2/index.html","hash":"a7a570623511b6a54a58f7f2837e23366c8e0f96","modified":1514206730598},{"_id":"public/archives/2016/11/index.html","hash":"dbeabc8e6f75e3e209448afb12263a36608b9fd6","modified":1514206730598},{"_id":"public/index.html","hash":"0a7f5c7e7669e38d8f9e76e09a1b4d7db8ab8084","modified":1514206730600},{"_id":"public/page/2/index.html","hash":"24177f7b5ed0556b2537d24de068fc1c2b35ec47","modified":1514206730601},{"_id":"public/page/3/index.html","hash":"a7caaba2d4a47c94324591b9d7d39258f514c2d0","modified":1514206730601},{"_id":"public/tags/react/index.html","hash":"56097f6c3738c84bb4ecead3b079dff8c90d267d","modified":1514206730601},{"_id":"public/search/index.html","hash":"c10ce4a67e1bba05196bbce8f03afee4c7f090cb","modified":1514206356190},{"_id":"themes/next/._config.yml.swp","hash":"7956f864f5604ec7bca02bdf897d159c6aa24062","modified":1514205101169},{"_id":"themes/next/layout/_partials/.header.swig.swp","hash":"10d6ae63fff7dbb1e95653fdc95eef351af7d1d8","modified":1514206176096},{"_id":"public/search.xml","hash":"6c595238fe65ac59ea5ea1fe9db0552645ba9c16","modified":1514206730595}],"Category":[{"name":"react router 4.0.0 api中文文档","_id":"cjbm32o45000uiwl74bar9kyb"}],"Data":[],"Page":[{"title":"categories","date":"2016-11-15T10:17:07.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-11-15 18:17:07\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-05-25T03:41:18.238Z","path":"categories/index.html","layout":"page","_id":"cjbm32o2l0001iwl75uegcn5p","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2016-11-15T10:19:01.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-11-15 18:19:01\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-05-25T03:41:18.238Z","path":"tags/index.html","layout":"page","_id":"cjbm32o2p0003iwl7tsajfima","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"CSS权威值南-笔记","date":"2016-09-06T10:04:19.000Z","_content":"\n## 第一章 css和文档\n\n-  文档内定义样式\n\n        <style type=\"text/css\">\n            @import url(sheet2.css)\n            h1 {color: maroon;}\n        </style>\n\n-   引入css文件\n\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"sheet1.css\" media=\"all\" />\n\n<!--more-->\n\n## 第二章 选择器\n\n- ID选择器和指定id的属性选择器不是一回事，h1#page-title和h1[id=\"page-title\"]之间有差别。\n- p.warning和p[class~=\"warning\"]是等价的，但是p[class=\"warning\"]匹配只有一个class的p元素。\n\n    - 类似的还有[foo^=\"bar\"] 选择foo属性值以bar开头的所有元素\n    - [foo$=\"bar\"] 选择foo属性值以bar结尾的所有元素\n    - [foo*=\"bar\"] 选择foo属性值中含有bar子串的所有元素\n\n- 后代选择器中，两个元素之间的层次间隔可以是无限的，如果想匹配直接相连的父子元素，可以使用子结合符\">\"\n\n- 兄弟元素选择器 h1 +  p {margin-top: 0}\n\n- 伪类选择器，伪类的顺序很重要 link-visited-focus-hover-active\n\n    - 连接伪类\n        - :link 未访问的超连接\n        - :visited  已访问的超连接\n\n    - 动态伪类\n        - :focus 拥有焦点的元素（可以接受键盘输入或者能已某种方式激活的元素）\n        - :hover 鼠标指针悬停的元素\n        - :active 用户输入激活的元素\n\n    - 静态伪类\n        - :first-child 第一个子元素\n        - :first-letter 第一个字母\n        - :first-line 第一行\n        - :lang(fr) 根据语言选择\n    - :first-letter和:first-line只能用于标记或段落之类的块元素，不能用于超连接等行内元素。\n\n## 第三章 结构和层叠\n\n- 选择器的特殊性\n\n    - 给定的各个ID属性值，加0，1，0，0\n\n    - 给形的各个类的属性值，属性选择或者伪类，加0，0，1，0\n\n    - 给定的各个元素和伪元素加0，0，0，1\n\n    - 结合符和通配选择器对特属性没有任何贡献\n\n- 样式继承\n\n    - 文本颜色可被继承\n    - border不能被继承，一般的大多数框模型属性不能被继承（包括外边框，内边距，背景和边框）\n\n    - 继承的值没有特殊性，连0特殊性都没有p(61)，因此需要避免不加区别的使用通配选择器。\n\n- 层叠权重大小顺序\n\n    - 读者的重要声明\n\n    - 创作人员的重要声明\n\n    - 创作人员的正常声明\n\n    - 读者的正常声明\n\n    - 用户代理声明\n\n## 第四章 值和单位\n\n- 颜色表示\n\n    - 命名颜色 {color: gray;}\n\n    - 函数式RGB {color: rgb(100%, 50%, 50%);}，或者{color: rgb(52, 95, 153);}\n\n    - 十六进制RGB {color: #ff0000;} 如果3组各自成对，可以简写#f00，相当于#ff0000\n- WEB安全颜色\n    - RGB百分表示法，能被20整除的颜色，如rgb(60, 40, 120)\n\n    - 十六进制，使用00，33，66，99，cc，ff，如#99ffcc\n\n- 长度单位\n\n    - 绝对长度单位 在打印文档的样式表时更为有用，Web设计中不使用绝对长度单位。\n\n        - 英寸 (in)\n\n        - 厘米(cm) 1in = 2.54cm\n\n        - 毫米(mm) 1in = 25.4mm\n\n        - 点(pt) 1in = 72pt\n\n        - 派卡(pc)  1pc = 12pt, 6pc = 1in\n\n    - 相对长度单位\n        - em (em-height) 1em定义未一种给定字体的font-size的值，随元素的不同而不同，国外最常用，也是未来的趋势，更容易适配移动端。\n        - ex (x-height) 1ex定位未一种给定字体的小写x的高度，不同字体ex的值不同。\n        - px像素\n\n## 第五章 字体\ncss定义了5中通用字体\n\n- Serif 成比例的有上下短线的字体\n- Sans-serif 成比例的，没有上下短线\n- Monospace 不成比例，通常用于模拟打字机打出的问题\n- Cursive  手写体\n- Fantasy 无法用任何特征来定义的字体\n\n特定字体：如Times，Verdana, Helvetica, Arial等，每一种特定的字体都会落入上述通用系列中。\n\n- font-family 如h1 {font-family: Georgia, serif}, Georgia是特定字体，serif是通用字体。\n- font-weight\n    - normal\n    - bold\n    - bolder\n    - lighter\n    - 100/200/300/400/500/600/700/800/900\n- font-size\n    - xx-small/x-small/small/medium/large/x-large/xx-large/smaller/larger\n    - &lt;length>/&lt;percentage>\n- font-style字体风格\n    - italic/oblique/normal/inherit\n- font-variant 字体变形\n    - small-caps 首字母大写\n    - normal\n    - inherit\n\n## 第六章 文本属性\n\n- text-indent 首行缩进\n    - &lt;length> 如：p {text-indent: 3em}\n    - &lt;percentag> 相对于父元素宽度\n    - inhert\n- text-align 水平对齐\n    - left\n    - right\n    - center\n    - justify 两端对齐，在打印领域很常见\n    - inherit\n- line-height 行高，定义了基线之间的距离，而不是字体大小，可以控制行间距。行间距=行高-字体大小\n    - &lt;length>\n    - &lt;percentage>\n    - &lt;number>\n    - normal\n    - inherit\n- vertical-align 行内元素和表单元格的垂直方向对齐\n    - base-line 基线对齐，元素的底端和副元素的基线对齐\n    - sub/super 上标/下标，相对于基线升高/降低\n    -  bottom 元素行内框的底端和行框的底端对齐\n    - text-bottom 元素行内框的底端和文本的底端对齐\n    - top 与bottom相反\n    - text-top 与text-bottom相反\n    - middle 居中对齐\n    - &lt;percentage>\n    - &lt;length>\n    - inherit\n- word-spacing 字间隔\n    - &lt;length>\n    - normal\n    - inherit\n- letter-spacing 字母间隔\n    - &lt;length>\n    - normal\n    - inherit\n- text-transform\n    - uppercase 全大写\n    - lowercase 全小写\n    - capitalize 单词首字母大写\n    - none\n    - inherit\n- text-decoration 文字效果\n    - none\n    - underline 下划线\n    - overline 上划线\n    - line-through 中划线\n    - blink\n    - inherit\n- text-shadow\n    - none\n\n    - 颜色值和三个长度值 text-shadow: silver 2px 2px 2px;\n- white-space\n    - normal 合并空白符，忽略换行符，允许自动换行。\n    - nowrap 合并空白符，忽略换行符号，不允许自动换行。\n    - pre 保留空白符号，保留换行符号，不允许自动换行。\n    - pre-wrap 保留空白符，保留换行符，允许自动换行。\n    - pre-line 合并空白符，保留换行符，允许自动换行。\n    - inherit\n- direction 文本方向\n    - ltr\n    - rtl\n    - inherit\n\n## 第七章 基本视觉格式化\n\n水平格式化\n七大水平属性\n\n- margin-left\n- border-left\n- padding-left\n- width\n- padding-right\n- border-right\n- maring-right\n\n这7个属性值加起来就是元素包含块的宽度，这往往是副元素的width值。\nwidth就是左内边距到右内边距的距离。\n这7个属性中，只有3个属性可以设置为auto: margin-left, width, margin-right，可以用auto弥补实际值和所需总和的差距。如果三个值都为非auto的某个值，这些格式化属性过分受限，此时会强制设置margin-right为auto.\n不止一个auto的情况：\n\n-  margin-left和margin-right为auto，此时元素居中，与text-align:center的区别，text-align只应用块级元素的内联内容，并不能使元素居中。\n- margin-left和width为auto，此时margin-left为0，width会填满剩余包块。\n- margin-right和width为auto，此时margin-right为0，width填满剩余包块。\n- margin-left和margin-right和width都为auto，此时margin-left和margin-right都为0,width会填满包块。这种情况和默认是相同的。\n\n水平外边距不会合并，父元素的内边距，边距和外边距可能影响子元素。\n\n负外边距\n   负外边距时，  会使得内容宽度超出包块，因为根据等式父包块width=7大水平之和，margin-left或margin-right为负时，width要增大。\n\n垂直格式化\n如果元素的内容的高度，大于元素框的高度，用户代理的具体行为将取决于overflow属性。\n垂直格式化的七大属性\n\n- margin-top\n- border-top\n- padding-top\n- height\n- padding-bottom\n- border-bottom\n- margin-bottom\n\n这7个属性值的值和必须等于含块的height，其中，3个值可以设置为auto，margin-top，height，margin-bottom，如果margin-top或margin-bottom设置为auto则自动计算0，这就是为什么不容易设置元素为垂直居中，这与水平时不一样的。对于定位元素，上下边距为auto时，处理不同。\n\n如果没有显式声明包含块的height，百分数高度为重置为auto，如果块级中场元素的height设置为auto，显示时的高度将恰好足以包含其内联内容。\n如果块级正常流元素高度设置为auto，而且只有块级子元素，其默认高度将是从最高块级子元素的外边框边界到最低块级子元素外边框边界之间的距离。\n不过，如果块级元素有padding或者border，则高度则是最高子元素的上外边距到其最低子元素的下外边距边界之间的距离。\n\n合并垂直外边距\n垂直合并只引用与外边距，不会应用于内边距和边框。\n负的下外边距会使段落看上去向下拉，负的上边会使段落看上去向上拉。\n\n## 第八章 内边距、边框和外边距\n\n- border-style\n    - none\n    - hidden\n    - dotted\n    - dashed\n    - solid\n    - double\n    - groove\n    - ridge\n    - inset\n    - outset\n\n- 设置多个边框样式 p.asize {boder-style:  solid dashed dotted solid;}\n- boder-top-style/boder-right-style/border-bottom-style/border-left-style 单独设置边框样式\n- border-width边框宽度\n    - thin\n    - medium\n    - thick\n    - &lt;length>\n- border-top-width/border-right-width/border-bottom-width/border-left-width单独设置宽度\n- boder-color边框颜色\n    - &lt;color>\n    - transparent 透明\n- border-top-color/border-right-color/border-bottom-color/border-left-color单独设置颜色\n- border-top/boder-right/border-bottom/border-left单独设置边框\n    - [&lt;border-width>] [&lt;border-style>][boder-color]\n- border 全局边框，应用到四条边\n    - [&lt;border-width>] [&lt;border-style>][boder-color]\n\n对于只包含文本的行，能改变行间距离的属性只有line-height, font-size和vertical-align。\n行内元素使用正左右外边距，可以多出来水平空间，负的左右外边距会使行内元素与其他内容重叠。\n行内元素的边框，不会改变行高。\n行内元素使用正的左右边框可以多出来水平空间。\n\n- padding 内边距\n    - &lt;length>\n    - &lt;percentage>\n\n行内非替换元素使用左右内边距时，可以多出来水平空间，而上下边距不会改变行高。\n可以想图像使用内边距,外边距，边框时，它可以改变行高，也可以水平方向留出距离。\n\n- background-color 背景元素\n    - &lt;color>\n    - transparent\n- background-image 如body {background-image: url(bg23.gif)}\n    - &lt;uri>\n    - none\n- background-repeat 有方向的重复\n    - repeat\n    - repeat-x\n    - repeat-y\n    - no-repeat\n- background-position 背景定位\n    - &lt;percentage>\n    - &lt;length>\n    - left/center/right/top/bottom\n\nbackground-position单个关键字等价\ncenter: cener center\ntop: top center或者center top\nbottom: bottom center或者center bottom\nleft: left center 或者center left\nright: right center 或者center right\n\n- background-attachment\n    - scroll 跟随文档滚动\n    - fixed 不跟随文档滚动\n\n- background 简写属性\n    - &lt;background-color> || &lt;background-image> || &lt;backgroud-repeat> || &lt;background-attachment> || &lt;background-position>\n\n## 第十章 浮动和定位\n\n- float\n    - left\n    - right\n    - none\n\n浮动元素会从文档的正常流中删除，它还是会影响布局。其他内容会环绕元素，浮动元素的外边距不会合并\n\n- position\n    - static 默认 块元素生成一个矩形框，行内元素创建一个或多个行框，置于父元素中\n    - relative 元素偏移某个距离，元素仍保持未定位前的形状，它原本占据的空间仍保留\n    - absolute 元素框从文档流中完全删除，并相对于其包含块定位。\n    - fixed 元素的表现类似于absolute，不过，其包含块是视窗本身。\n\n- 偏移属性，在position为relative,absolute和fixed时，可以设置偏移属性top right bottom left\n    - &lt;length>\n    - &lt;percentage>\n    - auto 初始值\n\n包含块\n\n根元素的包含块，由用户代理建立，即html元素或body元素\n对于一个非根元素，如果其position时relative或static，包含块则由最近的块级框，表单元格或行内块祖先框的内容边界构成。\n对于一个非根元素，如果其position时absolute，包含块则由最近的position值不是static的祖先元素。\n\n- overflow\n    - visible\n    - hidden\n    - scroll\n    - auto\n","source":"_posts/CSS-The-Definitive-Guide.md","raw":"---\ntitle: CSS权威值南-笔记\ndate: 2016-9-6 18:04:19\ntags: css\n---\n\n## 第一章 css和文档\n\n-  文档内定义样式\n\n        <style type=\"text/css\">\n            @import url(sheet2.css)\n            h1 {color: maroon;}\n        </style>\n\n-   引入css文件\n\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"sheet1.css\" media=\"all\" />\n\n<!--more-->\n\n## 第二章 选择器\n\n- ID选择器和指定id的属性选择器不是一回事，h1#page-title和h1[id=\"page-title\"]之间有差别。\n- p.warning和p[class~=\"warning\"]是等价的，但是p[class=\"warning\"]匹配只有一个class的p元素。\n\n    - 类似的还有[foo^=\"bar\"] 选择foo属性值以bar开头的所有元素\n    - [foo$=\"bar\"] 选择foo属性值以bar结尾的所有元素\n    - [foo*=\"bar\"] 选择foo属性值中含有bar子串的所有元素\n\n- 后代选择器中，两个元素之间的层次间隔可以是无限的，如果想匹配直接相连的父子元素，可以使用子结合符\">\"\n\n- 兄弟元素选择器 h1 +  p {margin-top: 0}\n\n- 伪类选择器，伪类的顺序很重要 link-visited-focus-hover-active\n\n    - 连接伪类\n        - :link 未访问的超连接\n        - :visited  已访问的超连接\n\n    - 动态伪类\n        - :focus 拥有焦点的元素（可以接受键盘输入或者能已某种方式激活的元素）\n        - :hover 鼠标指针悬停的元素\n        - :active 用户输入激活的元素\n\n    - 静态伪类\n        - :first-child 第一个子元素\n        - :first-letter 第一个字母\n        - :first-line 第一行\n        - :lang(fr) 根据语言选择\n    - :first-letter和:first-line只能用于标记或段落之类的块元素，不能用于超连接等行内元素。\n\n## 第三章 结构和层叠\n\n- 选择器的特殊性\n\n    - 给定的各个ID属性值，加0，1，0，0\n\n    - 给形的各个类的属性值，属性选择或者伪类，加0，0，1，0\n\n    - 给定的各个元素和伪元素加0，0，0，1\n\n    - 结合符和通配选择器对特属性没有任何贡献\n\n- 样式继承\n\n    - 文本颜色可被继承\n    - border不能被继承，一般的大多数框模型属性不能被继承（包括外边框，内边距，背景和边框）\n\n    - 继承的值没有特殊性，连0特殊性都没有p(61)，因此需要避免不加区别的使用通配选择器。\n\n- 层叠权重大小顺序\n\n    - 读者的重要声明\n\n    - 创作人员的重要声明\n\n    - 创作人员的正常声明\n\n    - 读者的正常声明\n\n    - 用户代理声明\n\n## 第四章 值和单位\n\n- 颜色表示\n\n    - 命名颜色 {color: gray;}\n\n    - 函数式RGB {color: rgb(100%, 50%, 50%);}，或者{color: rgb(52, 95, 153);}\n\n    - 十六进制RGB {color: #ff0000;} 如果3组各自成对，可以简写#f00，相当于#ff0000\n- WEB安全颜色\n    - RGB百分表示法，能被20整除的颜色，如rgb(60, 40, 120)\n\n    - 十六进制，使用00，33，66，99，cc，ff，如#99ffcc\n\n- 长度单位\n\n    - 绝对长度单位 在打印文档的样式表时更为有用，Web设计中不使用绝对长度单位。\n\n        - 英寸 (in)\n\n        - 厘米(cm) 1in = 2.54cm\n\n        - 毫米(mm) 1in = 25.4mm\n\n        - 点(pt) 1in = 72pt\n\n        - 派卡(pc)  1pc = 12pt, 6pc = 1in\n\n    - 相对长度单位\n        - em (em-height) 1em定义未一种给定字体的font-size的值，随元素的不同而不同，国外最常用，也是未来的趋势，更容易适配移动端。\n        - ex (x-height) 1ex定位未一种给定字体的小写x的高度，不同字体ex的值不同。\n        - px像素\n\n## 第五章 字体\ncss定义了5中通用字体\n\n- Serif 成比例的有上下短线的字体\n- Sans-serif 成比例的，没有上下短线\n- Monospace 不成比例，通常用于模拟打字机打出的问题\n- Cursive  手写体\n- Fantasy 无法用任何特征来定义的字体\n\n特定字体：如Times，Verdana, Helvetica, Arial等，每一种特定的字体都会落入上述通用系列中。\n\n- font-family 如h1 {font-family: Georgia, serif}, Georgia是特定字体，serif是通用字体。\n- font-weight\n    - normal\n    - bold\n    - bolder\n    - lighter\n    - 100/200/300/400/500/600/700/800/900\n- font-size\n    - xx-small/x-small/small/medium/large/x-large/xx-large/smaller/larger\n    - &lt;length>/&lt;percentage>\n- font-style字体风格\n    - italic/oblique/normal/inherit\n- font-variant 字体变形\n    - small-caps 首字母大写\n    - normal\n    - inherit\n\n## 第六章 文本属性\n\n- text-indent 首行缩进\n    - &lt;length> 如：p {text-indent: 3em}\n    - &lt;percentag> 相对于父元素宽度\n    - inhert\n- text-align 水平对齐\n    - left\n    - right\n    - center\n    - justify 两端对齐，在打印领域很常见\n    - inherit\n- line-height 行高，定义了基线之间的距离，而不是字体大小，可以控制行间距。行间距=行高-字体大小\n    - &lt;length>\n    - &lt;percentage>\n    - &lt;number>\n    - normal\n    - inherit\n- vertical-align 行内元素和表单元格的垂直方向对齐\n    - base-line 基线对齐，元素的底端和副元素的基线对齐\n    - sub/super 上标/下标，相对于基线升高/降低\n    -  bottom 元素行内框的底端和行框的底端对齐\n    - text-bottom 元素行内框的底端和文本的底端对齐\n    - top 与bottom相反\n    - text-top 与text-bottom相反\n    - middle 居中对齐\n    - &lt;percentage>\n    - &lt;length>\n    - inherit\n- word-spacing 字间隔\n    - &lt;length>\n    - normal\n    - inherit\n- letter-spacing 字母间隔\n    - &lt;length>\n    - normal\n    - inherit\n- text-transform\n    - uppercase 全大写\n    - lowercase 全小写\n    - capitalize 单词首字母大写\n    - none\n    - inherit\n- text-decoration 文字效果\n    - none\n    - underline 下划线\n    - overline 上划线\n    - line-through 中划线\n    - blink\n    - inherit\n- text-shadow\n    - none\n\n    - 颜色值和三个长度值 text-shadow: silver 2px 2px 2px;\n- white-space\n    - normal 合并空白符，忽略换行符，允许自动换行。\n    - nowrap 合并空白符，忽略换行符号，不允许自动换行。\n    - pre 保留空白符号，保留换行符号，不允许自动换行。\n    - pre-wrap 保留空白符，保留换行符，允许自动换行。\n    - pre-line 合并空白符，保留换行符，允许自动换行。\n    - inherit\n- direction 文本方向\n    - ltr\n    - rtl\n    - inherit\n\n## 第七章 基本视觉格式化\n\n水平格式化\n七大水平属性\n\n- margin-left\n- border-left\n- padding-left\n- width\n- padding-right\n- border-right\n- maring-right\n\n这7个属性值加起来就是元素包含块的宽度，这往往是副元素的width值。\nwidth就是左内边距到右内边距的距离。\n这7个属性中，只有3个属性可以设置为auto: margin-left, width, margin-right，可以用auto弥补实际值和所需总和的差距。如果三个值都为非auto的某个值，这些格式化属性过分受限，此时会强制设置margin-right为auto.\n不止一个auto的情况：\n\n-  margin-left和margin-right为auto，此时元素居中，与text-align:center的区别，text-align只应用块级元素的内联内容，并不能使元素居中。\n- margin-left和width为auto，此时margin-left为0，width会填满剩余包块。\n- margin-right和width为auto，此时margin-right为0，width填满剩余包块。\n- margin-left和margin-right和width都为auto，此时margin-left和margin-right都为0,width会填满包块。这种情况和默认是相同的。\n\n水平外边距不会合并，父元素的内边距，边距和外边距可能影响子元素。\n\n负外边距\n   负外边距时，  会使得内容宽度超出包块，因为根据等式父包块width=7大水平之和，margin-left或margin-right为负时，width要增大。\n\n垂直格式化\n如果元素的内容的高度，大于元素框的高度，用户代理的具体行为将取决于overflow属性。\n垂直格式化的七大属性\n\n- margin-top\n- border-top\n- padding-top\n- height\n- padding-bottom\n- border-bottom\n- margin-bottom\n\n这7个属性值的值和必须等于含块的height，其中，3个值可以设置为auto，margin-top，height，margin-bottom，如果margin-top或margin-bottom设置为auto则自动计算0，这就是为什么不容易设置元素为垂直居中，这与水平时不一样的。对于定位元素，上下边距为auto时，处理不同。\n\n如果没有显式声明包含块的height，百分数高度为重置为auto，如果块级中场元素的height设置为auto，显示时的高度将恰好足以包含其内联内容。\n如果块级正常流元素高度设置为auto，而且只有块级子元素，其默认高度将是从最高块级子元素的外边框边界到最低块级子元素外边框边界之间的距离。\n不过，如果块级元素有padding或者border，则高度则是最高子元素的上外边距到其最低子元素的下外边距边界之间的距离。\n\n合并垂直外边距\n垂直合并只引用与外边距，不会应用于内边距和边框。\n负的下外边距会使段落看上去向下拉，负的上边会使段落看上去向上拉。\n\n## 第八章 内边距、边框和外边距\n\n- border-style\n    - none\n    - hidden\n    - dotted\n    - dashed\n    - solid\n    - double\n    - groove\n    - ridge\n    - inset\n    - outset\n\n- 设置多个边框样式 p.asize {boder-style:  solid dashed dotted solid;}\n- boder-top-style/boder-right-style/border-bottom-style/border-left-style 单独设置边框样式\n- border-width边框宽度\n    - thin\n    - medium\n    - thick\n    - &lt;length>\n- border-top-width/border-right-width/border-bottom-width/border-left-width单独设置宽度\n- boder-color边框颜色\n    - &lt;color>\n    - transparent 透明\n- border-top-color/border-right-color/border-bottom-color/border-left-color单独设置颜色\n- border-top/boder-right/border-bottom/border-left单独设置边框\n    - [&lt;border-width>] [&lt;border-style>][boder-color]\n- border 全局边框，应用到四条边\n    - [&lt;border-width>] [&lt;border-style>][boder-color]\n\n对于只包含文本的行，能改变行间距离的属性只有line-height, font-size和vertical-align。\n行内元素使用正左右外边距，可以多出来水平空间，负的左右外边距会使行内元素与其他内容重叠。\n行内元素的边框，不会改变行高。\n行内元素使用正的左右边框可以多出来水平空间。\n\n- padding 内边距\n    - &lt;length>\n    - &lt;percentage>\n\n行内非替换元素使用左右内边距时，可以多出来水平空间，而上下边距不会改变行高。\n可以想图像使用内边距,外边距，边框时，它可以改变行高，也可以水平方向留出距离。\n\n- background-color 背景元素\n    - &lt;color>\n    - transparent\n- background-image 如body {background-image: url(bg23.gif)}\n    - &lt;uri>\n    - none\n- background-repeat 有方向的重复\n    - repeat\n    - repeat-x\n    - repeat-y\n    - no-repeat\n- background-position 背景定位\n    - &lt;percentage>\n    - &lt;length>\n    - left/center/right/top/bottom\n\nbackground-position单个关键字等价\ncenter: cener center\ntop: top center或者center top\nbottom: bottom center或者center bottom\nleft: left center 或者center left\nright: right center 或者center right\n\n- background-attachment\n    - scroll 跟随文档滚动\n    - fixed 不跟随文档滚动\n\n- background 简写属性\n    - &lt;background-color> || &lt;background-image> || &lt;backgroud-repeat> || &lt;background-attachment> || &lt;background-position>\n\n## 第十章 浮动和定位\n\n- float\n    - left\n    - right\n    - none\n\n浮动元素会从文档的正常流中删除，它还是会影响布局。其他内容会环绕元素，浮动元素的外边距不会合并\n\n- position\n    - static 默认 块元素生成一个矩形框，行内元素创建一个或多个行框，置于父元素中\n    - relative 元素偏移某个距离，元素仍保持未定位前的形状，它原本占据的空间仍保留\n    - absolute 元素框从文档流中完全删除，并相对于其包含块定位。\n    - fixed 元素的表现类似于absolute，不过，其包含块是视窗本身。\n\n- 偏移属性，在position为relative,absolute和fixed时，可以设置偏移属性top right bottom left\n    - &lt;length>\n    - &lt;percentage>\n    - auto 初始值\n\n包含块\n\n根元素的包含块，由用户代理建立，即html元素或body元素\n对于一个非根元素，如果其position时relative或static，包含块则由最近的块级框，表单元格或行内块祖先框的内容边界构成。\n对于一个非根元素，如果其position时absolute，包含块则由最近的position值不是static的祖先元素。\n\n- overflow\n    - visible\n    - hidden\n    - scroll\n    - auto\n","slug":"CSS-The-Definitive-Guide","published":1,"updated":"2017-05-25T03:41:18.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o2f0000iwl790hmxn4o","content":"<h2 id=\"第一章-css和文档\"><a href=\"#第一章-css和文档\" class=\"headerlink\" title=\"第一章 css和文档\"></a>第一章 css和文档</h2><ul>\n<li><p>文档内定义样式</p>\n<pre><code>&lt;style type=&quot;text/css&quot;&gt;\n    @import url(sheet2.css)\n    h1 {color: maroon;}\n&lt;/style&gt;\n</code></pre></li>\n<li><p>引入css文件</p>\n<pre><code>&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;sheet1.css&quot; media=&quot;all&quot; /&gt;\n</code></pre></li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"第二章-选择器\"><a href=\"#第二章-选择器\" class=\"headerlink\" title=\"第二章 选择器\"></a>第二章 选择器</h2><ul>\n<li>ID选择器和指定id的属性选择器不是一回事，h1#page-title和h1[id=”page-title”]之间有差别。</li>\n<li><p>p.warning和p[class~=”warning”]是等价的，但是p[class=”warning”]匹配只有一个class的p元素。</p>\n<ul>\n<li>类似的还有[foo^=”bar”] 选择foo属性值以bar开头的所有元素</li>\n<li>[foo$=”bar”] 选择foo属性值以bar结尾的所有元素</li>\n<li>[foo*=”bar”] 选择foo属性值中含有bar子串的所有元素</li>\n</ul>\n</li>\n<li><p>后代选择器中，两个元素之间的层次间隔可以是无限的，如果想匹配直接相连的父子元素，可以使用子结合符”&gt;”</p>\n</li>\n<li><p>兄弟元素选择器 h1 +  p {margin-top: 0}</p>\n</li>\n<li><p>伪类选择器，伪类的顺序很重要 link-visited-focus-hover-active</p>\n<ul>\n<li><p>连接伪类</p>\n<ul>\n<li>:link 未访问的超连接</li>\n<li>:visited  已访问的超连接</li>\n</ul>\n</li>\n<li><p>动态伪类</p>\n<ul>\n<li>:focus 拥有焦点的元素（可以接受键盘输入或者能已某种方式激活的元素）</li>\n<li>:hover 鼠标指针悬停的元素</li>\n<li>:active 用户输入激活的元素</li>\n</ul>\n</li>\n<li><p>静态伪类</p>\n<ul>\n<li>:first-child 第一个子元素</li>\n<li>:first-letter 第一个字母</li>\n<li>:first-line 第一行</li>\n<li>:lang(fr) 根据语言选择</li>\n</ul>\n</li>\n<li>:first-letter和:first-line只能用于标记或段落之类的块元素，不能用于超连接等行内元素。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三章-结构和层叠\"><a href=\"#第三章-结构和层叠\" class=\"headerlink\" title=\"第三章 结构和层叠\"></a>第三章 结构和层叠</h2><ul>\n<li><p>选择器的特殊性</p>\n<ul>\n<li><p>给定的各个ID属性值，加0，1，0，0</p>\n</li>\n<li><p>给形的各个类的属性值，属性选择或者伪类，加0，0，1，0</p>\n</li>\n<li><p>给定的各个元素和伪元素加0，0，0，1</p>\n</li>\n<li><p>结合符和通配选择器对特属性没有任何贡献</p>\n</li>\n</ul>\n</li>\n<li><p>样式继承</p>\n<ul>\n<li>文本颜色可被继承</li>\n<li><p>border不能被继承，一般的大多数框模型属性不能被继承（包括外边框，内边距，背景和边框）</p>\n</li>\n<li><p>继承的值没有特殊性，连0特殊性都没有p(61)，因此需要避免不加区别的使用通配选择器。</p>\n</li>\n</ul>\n</li>\n<li><p>层叠权重大小顺序</p>\n<ul>\n<li><p>读者的重要声明</p>\n</li>\n<li><p>创作人员的重要声明</p>\n</li>\n<li><p>创作人员的正常声明</p>\n</li>\n<li><p>读者的正常声明</p>\n</li>\n<li><p>用户代理声明</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第四章-值和单位\"><a href=\"#第四章-值和单位\" class=\"headerlink\" title=\"第四章 值和单位\"></a>第四章 值和单位</h2><ul>\n<li><p>颜色表示</p>\n<ul>\n<li><p>命名颜色 {color: gray;}</p>\n</li>\n<li><p>函数式RGB {color: rgb(100%, 50%, 50%);}，或者{color: rgb(52, 95, 153);}</p>\n</li>\n<li><p>十六进制RGB {color: #ff0000;} 如果3组各自成对，可以简写#f00，相当于#ff0000</p>\n</li>\n</ul>\n</li>\n<li><p>WEB安全颜色</p>\n<ul>\n<li><p>RGB百分表示法，能被20整除的颜色，如rgb(60, 40, 120)</p>\n</li>\n<li><p>十六进制，使用00，33，66，99，cc，ff，如#99ffcc</p>\n</li>\n</ul>\n</li>\n<li><p>长度单位</p>\n<ul>\n<li><p>绝对长度单位 在打印文档的样式表时更为有用，Web设计中不使用绝对长度单位。</p>\n<ul>\n<li><p>英寸 (in)</p>\n</li>\n<li><p>厘米(cm) 1in = 2.54cm</p>\n</li>\n<li><p>毫米(mm) 1in = 25.4mm</p>\n</li>\n<li><p>点(pt) 1in = 72pt</p>\n</li>\n<li><p>派卡(pc)  1pc = 12pt, 6pc = 1in</p>\n</li>\n</ul>\n</li>\n<li><p>相对长度单位</p>\n<ul>\n<li>em (em-height) 1em定义未一种给定字体的font-size的值，随元素的不同而不同，国外最常用，也是未来的趋势，更容易适配移动端。</li>\n<li>ex (x-height) 1ex定位未一种给定字体的小写x的高度，不同字体ex的值不同。</li>\n<li>px像素</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第五章-字体\"><a href=\"#第五章-字体\" class=\"headerlink\" title=\"第五章 字体\"></a>第五章 字体</h2><p>css定义了5中通用字体</p>\n<ul>\n<li>Serif 成比例的有上下短线的字体</li>\n<li>Sans-serif 成比例的，没有上下短线</li>\n<li>Monospace 不成比例，通常用于模拟打字机打出的问题</li>\n<li>Cursive  手写体</li>\n<li>Fantasy 无法用任何特征来定义的字体</li>\n</ul>\n<p>特定字体：如Times，Verdana, Helvetica, Arial等，每一种特定的字体都会落入上述通用系列中。</p>\n<ul>\n<li>font-family 如h1 {font-family: Georgia, serif}, Georgia是特定字体，serif是通用字体。</li>\n<li>font-weight<ul>\n<li>normal</li>\n<li>bold</li>\n<li>bolder</li>\n<li>lighter</li>\n<li>100/200/300/400/500/600/700/800/900</li>\n</ul>\n</li>\n<li>font-size<ul>\n<li>xx-small/x-small/small/medium/large/x-large/xx-large/smaller/larger</li>\n<li>&lt;length&gt;/&lt;percentage&gt;</li>\n</ul>\n</li>\n<li>font-style字体风格<ul>\n<li>italic/oblique/normal/inherit</li>\n</ul>\n</li>\n<li>font-variant 字体变形<ul>\n<li>small-caps 首字母大写</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第六章-文本属性\"><a href=\"#第六章-文本属性\" class=\"headerlink\" title=\"第六章 文本属性\"></a>第六章 文本属性</h2><ul>\n<li>text-indent 首行缩进<ul>\n<li>&lt;length&gt; 如：p {text-indent: 3em}</li>\n<li>&lt;percentag&gt; 相对于父元素宽度</li>\n<li>inhert</li>\n</ul>\n</li>\n<li>text-align 水平对齐<ul>\n<li>left</li>\n<li>right</li>\n<li>center</li>\n<li>justify 两端对齐，在打印领域很常见</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>line-height 行高，定义了基线之间的距离，而不是字体大小，可以控制行间距。行间距=行高-字体大小<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n<li>&lt;number&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>vertical-align 行内元素和表单元格的垂直方向对齐<ul>\n<li>base-line 基线对齐，元素的底端和副元素的基线对齐</li>\n<li>sub/super 上标/下标，相对于基线升高/降低</li>\n<li>bottom 元素行内框的底端和行框的底端对齐</li>\n<li>text-bottom 元素行内框的底端和文本的底端对齐</li>\n<li>top 与bottom相反</li>\n<li>text-top 与text-bottom相反</li>\n<li>middle 居中对齐</li>\n<li>&lt;percentage&gt;</li>\n<li>&lt;length&gt;</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>word-spacing 字间隔<ul>\n<li>&lt;length&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>letter-spacing 字母间隔<ul>\n<li>&lt;length&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>text-transform<ul>\n<li>uppercase 全大写</li>\n<li>lowercase 全小写</li>\n<li>capitalize 单词首字母大写</li>\n<li>none</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>text-decoration 文字效果<ul>\n<li>none</li>\n<li>underline 下划线</li>\n<li>overline 上划线</li>\n<li>line-through 中划线</li>\n<li>blink</li>\n<li>inherit</li>\n</ul>\n</li>\n<li><p>text-shadow</p>\n<ul>\n<li><p>none</p>\n</li>\n<li><p>颜色值和三个长度值 text-shadow: silver 2px 2px 2px;</p>\n</li>\n</ul>\n</li>\n<li>white-space<ul>\n<li>normal 合并空白符，忽略换行符，允许自动换行。</li>\n<li>nowrap 合并空白符，忽略换行符号，不允许自动换行。</li>\n<li>pre 保留空白符号，保留换行符号，不允许自动换行。</li>\n<li>pre-wrap 保留空白符，保留换行符，允许自动换行。</li>\n<li>pre-line 合并空白符，保留换行符，允许自动换行。</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>direction 文本方向<ul>\n<li>ltr</li>\n<li>rtl</li>\n<li>inherit</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第七章-基本视觉格式化\"><a href=\"#第七章-基本视觉格式化\" class=\"headerlink\" title=\"第七章 基本视觉格式化\"></a>第七章 基本视觉格式化</h2><p>水平格式化<br>七大水平属性</p>\n<ul>\n<li>margin-left</li>\n<li>border-left</li>\n<li>padding-left</li>\n<li>width</li>\n<li>padding-right</li>\n<li>border-right</li>\n<li>maring-right</li>\n</ul>\n<p>这7个属性值加起来就是元素包含块的宽度，这往往是副元素的width值。<br>width就是左内边距到右内边距的距离。<br>这7个属性中，只有3个属性可以设置为auto: margin-left, width, margin-right，可以用auto弥补实际值和所需总和的差距。如果三个值都为非auto的某个值，这些格式化属性过分受限，此时会强制设置margin-right为auto.<br>不止一个auto的情况：</p>\n<ul>\n<li>margin-left和margin-right为auto，此时元素居中，与text-align:center的区别，text-align只应用块级元素的内联内容，并不能使元素居中。</li>\n<li>margin-left和width为auto，此时margin-left为0，width会填满剩余包块。</li>\n<li>margin-right和width为auto，此时margin-right为0，width填满剩余包块。</li>\n<li>margin-left和margin-right和width都为auto，此时margin-left和margin-right都为0,width会填满包块。这种情况和默认是相同的。</li>\n</ul>\n<p>水平外边距不会合并，父元素的内边距，边距和外边距可能影响子元素。</p>\n<p>负外边距<br>   负外边距时，  会使得内容宽度超出包块，因为根据等式父包块width=7大水平之和，margin-left或margin-right为负时，width要增大。</p>\n<p>垂直格式化<br>如果元素的内容的高度，大于元素框的高度，用户代理的具体行为将取决于overflow属性。<br>垂直格式化的七大属性</p>\n<ul>\n<li>margin-top</li>\n<li>border-top</li>\n<li>padding-top</li>\n<li>height</li>\n<li>padding-bottom</li>\n<li>border-bottom</li>\n<li>margin-bottom</li>\n</ul>\n<p>这7个属性值的值和必须等于含块的height，其中，3个值可以设置为auto，margin-top，height，margin-bottom，如果margin-top或margin-bottom设置为auto则自动计算0，这就是为什么不容易设置元素为垂直居中，这与水平时不一样的。对于定位元素，上下边距为auto时，处理不同。</p>\n<p>如果没有显式声明包含块的height，百分数高度为重置为auto，如果块级中场元素的height设置为auto，显示时的高度将恰好足以包含其内联内容。<br>如果块级正常流元素高度设置为auto，而且只有块级子元素，其默认高度将是从最高块级子元素的外边框边界到最低块级子元素外边框边界之间的距离。<br>不过，如果块级元素有padding或者border，则高度则是最高子元素的上外边距到其最低子元素的下外边距边界之间的距离。</p>\n<p>合并垂直外边距<br>垂直合并只引用与外边距，不会应用于内边距和边框。<br>负的下外边距会使段落看上去向下拉，负的上边会使段落看上去向上拉。</p>\n<h2 id=\"第八章-内边距、边框和外边距\"><a href=\"#第八章-内边距、边框和外边距\" class=\"headerlink\" title=\"第八章 内边距、边框和外边距\"></a>第八章 内边距、边框和外边距</h2><ul>\n<li><p>border-style</p>\n<ul>\n<li>none</li>\n<li>hidden</li>\n<li>dotted</li>\n<li>dashed</li>\n<li>solid</li>\n<li>double</li>\n<li>groove</li>\n<li>ridge</li>\n<li>inset</li>\n<li>outset</li>\n</ul>\n</li>\n<li><p>设置多个边框样式 p.asize {boder-style:  solid dashed dotted solid;}</p>\n</li>\n<li>boder-top-style/boder-right-style/border-bottom-style/border-left-style 单独设置边框样式</li>\n<li>border-width边框宽度<ul>\n<li>thin</li>\n<li>medium</li>\n<li>thick</li>\n<li>&lt;length&gt;</li>\n</ul>\n</li>\n<li>border-top-width/border-right-width/border-bottom-width/border-left-width单独设置宽度</li>\n<li>boder-color边框颜色<ul>\n<li>&lt;color&gt;</li>\n<li>transparent 透明</li>\n</ul>\n</li>\n<li>border-top-color/border-right-color/border-bottom-color/border-left-color单独设置颜色</li>\n<li>border-top/boder-right/border-bottom/border-left单独设置边框<ul>\n<li>[&lt;border-width&gt;] [&lt;border-style&gt;][boder-color]</li>\n</ul>\n</li>\n<li>border 全局边框，应用到四条边<ul>\n<li>[&lt;border-width&gt;] [&lt;border-style&gt;][boder-color]</li>\n</ul>\n</li>\n</ul>\n<p>对于只包含文本的行，能改变行间距离的属性只有line-height, font-size和vertical-align。<br>行内元素使用正左右外边距，可以多出来水平空间，负的左右外边距会使行内元素与其他内容重叠。<br>行内元素的边框，不会改变行高。<br>行内元素使用正的左右边框可以多出来水平空间。</p>\n<ul>\n<li>padding 内边距<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n</ul>\n</li>\n</ul>\n<p>行内非替换元素使用左右内边距时，可以多出来水平空间，而上下边距不会改变行高。<br>可以想图像使用内边距,外边距，边框时，它可以改变行高，也可以水平方向留出距离。</p>\n<ul>\n<li>background-color 背景元素<ul>\n<li>&lt;color&gt;</li>\n<li>transparent</li>\n</ul>\n</li>\n<li>background-image 如body {background-image: url(bg23.gif)}<ul>\n<li>&lt;uri&gt;</li>\n<li>none</li>\n</ul>\n</li>\n<li>background-repeat 有方向的重复<ul>\n<li>repeat</li>\n<li>repeat-x</li>\n<li>repeat-y</li>\n<li>no-repeat</li>\n</ul>\n</li>\n<li>background-position 背景定位<ul>\n<li>&lt;percentage&gt;</li>\n<li>&lt;length&gt;</li>\n<li>left/center/right/top/bottom</li>\n</ul>\n</li>\n</ul>\n<p>background-position单个关键字等价<br>center: cener center<br>top: top center或者center top<br>bottom: bottom center或者center bottom<br>left: left center 或者center left<br>right: right center 或者center right</p>\n<ul>\n<li><p>background-attachment</p>\n<ul>\n<li>scroll 跟随文档滚动</li>\n<li>fixed 不跟随文档滚动</li>\n</ul>\n</li>\n<li><p>background 简写属性</p>\n<ul>\n<li>&lt;background-color&gt; || &lt;background-image&gt; || &lt;backgroud-repeat&gt; || &lt;background-attachment&gt; || &lt;background-position&gt;</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第十章-浮动和定位\"><a href=\"#第十章-浮动和定位\" class=\"headerlink\" title=\"第十章 浮动和定位\"></a>第十章 浮动和定位</h2><ul>\n<li>float<ul>\n<li>left</li>\n<li>right</li>\n<li>none</li>\n</ul>\n</li>\n</ul>\n<p>浮动元素会从文档的正常流中删除，它还是会影响布局。其他内容会环绕元素，浮动元素的外边距不会合并</p>\n<ul>\n<li><p>position</p>\n<ul>\n<li>static 默认 块元素生成一个矩形框，行内元素创建一个或多个行框，置于父元素中</li>\n<li>relative 元素偏移某个距离，元素仍保持未定位前的形状，它原本占据的空间仍保留</li>\n<li>absolute 元素框从文档流中完全删除，并相对于其包含块定位。</li>\n<li>fixed 元素的表现类似于absolute，不过，其包含块是视窗本身。</li>\n</ul>\n</li>\n<li><p>偏移属性，在position为relative,absolute和fixed时，可以设置偏移属性top right bottom left</p>\n<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n<li>auto 初始值</li>\n</ul>\n</li>\n</ul>\n<p>包含块</p>\n<p>根元素的包含块，由用户代理建立，即html元素或body元素<br>对于一个非根元素，如果其position时relative或static，包含块则由最近的块级框，表单元格或行内块祖先框的内容边界构成。<br>对于一个非根元素，如果其position时absolute，包含块则由最近的position值不是static的祖先元素。</p>\n<ul>\n<li>overflow<ul>\n<li>visible</li>\n<li>hidden</li>\n<li>scroll</li>\n<li>auto</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"第一章-css和文档\"><a href=\"#第一章-css和文档\" class=\"headerlink\" title=\"第一章 css和文档\"></a>第一章 css和文档</h2><ul>\n<li><p>文档内定义样式</p>\n<pre><code>&lt;style type=&quot;text/css&quot;&gt;\n    @import url(sheet2.css)\n    h1 {color: maroon;}\n&lt;/style&gt;\n</code></pre></li>\n<li><p>引入css文件</p>\n<pre><code>&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;sheet1.css&quot; media=&quot;all&quot; /&gt;\n</code></pre></li>\n</ul>","more":"<h2 id=\"第二章-选择器\"><a href=\"#第二章-选择器\" class=\"headerlink\" title=\"第二章 选择器\"></a>第二章 选择器</h2><ul>\n<li>ID选择器和指定id的属性选择器不是一回事，h1#page-title和h1[id=”page-title”]之间有差别。</li>\n<li><p>p.warning和p[class~=”warning”]是等价的，但是p[class=”warning”]匹配只有一个class的p元素。</p>\n<ul>\n<li>类似的还有[foo^=”bar”] 选择foo属性值以bar开头的所有元素</li>\n<li>[foo$=”bar”] 选择foo属性值以bar结尾的所有元素</li>\n<li>[foo*=”bar”] 选择foo属性值中含有bar子串的所有元素</li>\n</ul>\n</li>\n<li><p>后代选择器中，两个元素之间的层次间隔可以是无限的，如果想匹配直接相连的父子元素，可以使用子结合符”&gt;”</p>\n</li>\n<li><p>兄弟元素选择器 h1 +  p {margin-top: 0}</p>\n</li>\n<li><p>伪类选择器，伪类的顺序很重要 link-visited-focus-hover-active</p>\n<ul>\n<li><p>连接伪类</p>\n<ul>\n<li>:link 未访问的超连接</li>\n<li>:visited  已访问的超连接</li>\n</ul>\n</li>\n<li><p>动态伪类</p>\n<ul>\n<li>:focus 拥有焦点的元素（可以接受键盘输入或者能已某种方式激活的元素）</li>\n<li>:hover 鼠标指针悬停的元素</li>\n<li>:active 用户输入激活的元素</li>\n</ul>\n</li>\n<li><p>静态伪类</p>\n<ul>\n<li>:first-child 第一个子元素</li>\n<li>:first-letter 第一个字母</li>\n<li>:first-line 第一行</li>\n<li>:lang(fr) 根据语言选择</li>\n</ul>\n</li>\n<li>:first-letter和:first-line只能用于标记或段落之类的块元素，不能用于超连接等行内元素。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三章-结构和层叠\"><a href=\"#第三章-结构和层叠\" class=\"headerlink\" title=\"第三章 结构和层叠\"></a>第三章 结构和层叠</h2><ul>\n<li><p>选择器的特殊性</p>\n<ul>\n<li><p>给定的各个ID属性值，加0，1，0，0</p>\n</li>\n<li><p>给形的各个类的属性值，属性选择或者伪类，加0，0，1，0</p>\n</li>\n<li><p>给定的各个元素和伪元素加0，0，0，1</p>\n</li>\n<li><p>结合符和通配选择器对特属性没有任何贡献</p>\n</li>\n</ul>\n</li>\n<li><p>样式继承</p>\n<ul>\n<li>文本颜色可被继承</li>\n<li><p>border不能被继承，一般的大多数框模型属性不能被继承（包括外边框，内边距，背景和边框）</p>\n</li>\n<li><p>继承的值没有特殊性，连0特殊性都没有p(61)，因此需要避免不加区别的使用通配选择器。</p>\n</li>\n</ul>\n</li>\n<li><p>层叠权重大小顺序</p>\n<ul>\n<li><p>读者的重要声明</p>\n</li>\n<li><p>创作人员的重要声明</p>\n</li>\n<li><p>创作人员的正常声明</p>\n</li>\n<li><p>读者的正常声明</p>\n</li>\n<li><p>用户代理声明</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第四章-值和单位\"><a href=\"#第四章-值和单位\" class=\"headerlink\" title=\"第四章 值和单位\"></a>第四章 值和单位</h2><ul>\n<li><p>颜色表示</p>\n<ul>\n<li><p>命名颜色 {color: gray;}</p>\n</li>\n<li><p>函数式RGB {color: rgb(100%, 50%, 50%);}，或者{color: rgb(52, 95, 153);}</p>\n</li>\n<li><p>十六进制RGB {color: #ff0000;} 如果3组各自成对，可以简写#f00，相当于#ff0000</p>\n</li>\n</ul>\n</li>\n<li><p>WEB安全颜色</p>\n<ul>\n<li><p>RGB百分表示法，能被20整除的颜色，如rgb(60, 40, 120)</p>\n</li>\n<li><p>十六进制，使用00，33，66，99，cc，ff，如#99ffcc</p>\n</li>\n</ul>\n</li>\n<li><p>长度单位</p>\n<ul>\n<li><p>绝对长度单位 在打印文档的样式表时更为有用，Web设计中不使用绝对长度单位。</p>\n<ul>\n<li><p>英寸 (in)</p>\n</li>\n<li><p>厘米(cm) 1in = 2.54cm</p>\n</li>\n<li><p>毫米(mm) 1in = 25.4mm</p>\n</li>\n<li><p>点(pt) 1in = 72pt</p>\n</li>\n<li><p>派卡(pc)  1pc = 12pt, 6pc = 1in</p>\n</li>\n</ul>\n</li>\n<li><p>相对长度单位</p>\n<ul>\n<li>em (em-height) 1em定义未一种给定字体的font-size的值，随元素的不同而不同，国外最常用，也是未来的趋势，更容易适配移动端。</li>\n<li>ex (x-height) 1ex定位未一种给定字体的小写x的高度，不同字体ex的值不同。</li>\n<li>px像素</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第五章-字体\"><a href=\"#第五章-字体\" class=\"headerlink\" title=\"第五章 字体\"></a>第五章 字体</h2><p>css定义了5中通用字体</p>\n<ul>\n<li>Serif 成比例的有上下短线的字体</li>\n<li>Sans-serif 成比例的，没有上下短线</li>\n<li>Monospace 不成比例，通常用于模拟打字机打出的问题</li>\n<li>Cursive  手写体</li>\n<li>Fantasy 无法用任何特征来定义的字体</li>\n</ul>\n<p>特定字体：如Times，Verdana, Helvetica, Arial等，每一种特定的字体都会落入上述通用系列中。</p>\n<ul>\n<li>font-family 如h1 {font-family: Georgia, serif}, Georgia是特定字体，serif是通用字体。</li>\n<li>font-weight<ul>\n<li>normal</li>\n<li>bold</li>\n<li>bolder</li>\n<li>lighter</li>\n<li>100/200/300/400/500/600/700/800/900</li>\n</ul>\n</li>\n<li>font-size<ul>\n<li>xx-small/x-small/small/medium/large/x-large/xx-large/smaller/larger</li>\n<li>&lt;length&gt;/&lt;percentage&gt;</li>\n</ul>\n</li>\n<li>font-style字体风格<ul>\n<li>italic/oblique/normal/inherit</li>\n</ul>\n</li>\n<li>font-variant 字体变形<ul>\n<li>small-caps 首字母大写</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第六章-文本属性\"><a href=\"#第六章-文本属性\" class=\"headerlink\" title=\"第六章 文本属性\"></a>第六章 文本属性</h2><ul>\n<li>text-indent 首行缩进<ul>\n<li>&lt;length&gt; 如：p {text-indent: 3em}</li>\n<li>&lt;percentag&gt; 相对于父元素宽度</li>\n<li>inhert</li>\n</ul>\n</li>\n<li>text-align 水平对齐<ul>\n<li>left</li>\n<li>right</li>\n<li>center</li>\n<li>justify 两端对齐，在打印领域很常见</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>line-height 行高，定义了基线之间的距离，而不是字体大小，可以控制行间距。行间距=行高-字体大小<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n<li>&lt;number&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>vertical-align 行内元素和表单元格的垂直方向对齐<ul>\n<li>base-line 基线对齐，元素的底端和副元素的基线对齐</li>\n<li>sub/super 上标/下标，相对于基线升高/降低</li>\n<li>bottom 元素行内框的底端和行框的底端对齐</li>\n<li>text-bottom 元素行内框的底端和文本的底端对齐</li>\n<li>top 与bottom相反</li>\n<li>text-top 与text-bottom相反</li>\n<li>middle 居中对齐</li>\n<li>&lt;percentage&gt;</li>\n<li>&lt;length&gt;</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>word-spacing 字间隔<ul>\n<li>&lt;length&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>letter-spacing 字母间隔<ul>\n<li>&lt;length&gt;</li>\n<li>normal</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>text-transform<ul>\n<li>uppercase 全大写</li>\n<li>lowercase 全小写</li>\n<li>capitalize 单词首字母大写</li>\n<li>none</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>text-decoration 文字效果<ul>\n<li>none</li>\n<li>underline 下划线</li>\n<li>overline 上划线</li>\n<li>line-through 中划线</li>\n<li>blink</li>\n<li>inherit</li>\n</ul>\n</li>\n<li><p>text-shadow</p>\n<ul>\n<li><p>none</p>\n</li>\n<li><p>颜色值和三个长度值 text-shadow: silver 2px 2px 2px;</p>\n</li>\n</ul>\n</li>\n<li>white-space<ul>\n<li>normal 合并空白符，忽略换行符，允许自动换行。</li>\n<li>nowrap 合并空白符，忽略换行符号，不允许自动换行。</li>\n<li>pre 保留空白符号，保留换行符号，不允许自动换行。</li>\n<li>pre-wrap 保留空白符，保留换行符，允许自动换行。</li>\n<li>pre-line 合并空白符，保留换行符，允许自动换行。</li>\n<li>inherit</li>\n</ul>\n</li>\n<li>direction 文本方向<ul>\n<li>ltr</li>\n<li>rtl</li>\n<li>inherit</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第七章-基本视觉格式化\"><a href=\"#第七章-基本视觉格式化\" class=\"headerlink\" title=\"第七章 基本视觉格式化\"></a>第七章 基本视觉格式化</h2><p>水平格式化<br>七大水平属性</p>\n<ul>\n<li>margin-left</li>\n<li>border-left</li>\n<li>padding-left</li>\n<li>width</li>\n<li>padding-right</li>\n<li>border-right</li>\n<li>maring-right</li>\n</ul>\n<p>这7个属性值加起来就是元素包含块的宽度，这往往是副元素的width值。<br>width就是左内边距到右内边距的距离。<br>这7个属性中，只有3个属性可以设置为auto: margin-left, width, margin-right，可以用auto弥补实际值和所需总和的差距。如果三个值都为非auto的某个值，这些格式化属性过分受限，此时会强制设置margin-right为auto.<br>不止一个auto的情况：</p>\n<ul>\n<li>margin-left和margin-right为auto，此时元素居中，与text-align:center的区别，text-align只应用块级元素的内联内容，并不能使元素居中。</li>\n<li>margin-left和width为auto，此时margin-left为0，width会填满剩余包块。</li>\n<li>margin-right和width为auto，此时margin-right为0，width填满剩余包块。</li>\n<li>margin-left和margin-right和width都为auto，此时margin-left和margin-right都为0,width会填满包块。这种情况和默认是相同的。</li>\n</ul>\n<p>水平外边距不会合并，父元素的内边距，边距和外边距可能影响子元素。</p>\n<p>负外边距<br>   负外边距时，  会使得内容宽度超出包块，因为根据等式父包块width=7大水平之和，margin-left或margin-right为负时，width要增大。</p>\n<p>垂直格式化<br>如果元素的内容的高度，大于元素框的高度，用户代理的具体行为将取决于overflow属性。<br>垂直格式化的七大属性</p>\n<ul>\n<li>margin-top</li>\n<li>border-top</li>\n<li>padding-top</li>\n<li>height</li>\n<li>padding-bottom</li>\n<li>border-bottom</li>\n<li>margin-bottom</li>\n</ul>\n<p>这7个属性值的值和必须等于含块的height，其中，3个值可以设置为auto，margin-top，height，margin-bottom，如果margin-top或margin-bottom设置为auto则自动计算0，这就是为什么不容易设置元素为垂直居中，这与水平时不一样的。对于定位元素，上下边距为auto时，处理不同。</p>\n<p>如果没有显式声明包含块的height，百分数高度为重置为auto，如果块级中场元素的height设置为auto，显示时的高度将恰好足以包含其内联内容。<br>如果块级正常流元素高度设置为auto，而且只有块级子元素，其默认高度将是从最高块级子元素的外边框边界到最低块级子元素外边框边界之间的距离。<br>不过，如果块级元素有padding或者border，则高度则是最高子元素的上外边距到其最低子元素的下外边距边界之间的距离。</p>\n<p>合并垂直外边距<br>垂直合并只引用与外边距，不会应用于内边距和边框。<br>负的下外边距会使段落看上去向下拉，负的上边会使段落看上去向上拉。</p>\n<h2 id=\"第八章-内边距、边框和外边距\"><a href=\"#第八章-内边距、边框和外边距\" class=\"headerlink\" title=\"第八章 内边距、边框和外边距\"></a>第八章 内边距、边框和外边距</h2><ul>\n<li><p>border-style</p>\n<ul>\n<li>none</li>\n<li>hidden</li>\n<li>dotted</li>\n<li>dashed</li>\n<li>solid</li>\n<li>double</li>\n<li>groove</li>\n<li>ridge</li>\n<li>inset</li>\n<li>outset</li>\n</ul>\n</li>\n<li><p>设置多个边框样式 p.asize {boder-style:  solid dashed dotted solid;}</p>\n</li>\n<li>boder-top-style/boder-right-style/border-bottom-style/border-left-style 单独设置边框样式</li>\n<li>border-width边框宽度<ul>\n<li>thin</li>\n<li>medium</li>\n<li>thick</li>\n<li>&lt;length&gt;</li>\n</ul>\n</li>\n<li>border-top-width/border-right-width/border-bottom-width/border-left-width单独设置宽度</li>\n<li>boder-color边框颜色<ul>\n<li>&lt;color&gt;</li>\n<li>transparent 透明</li>\n</ul>\n</li>\n<li>border-top-color/border-right-color/border-bottom-color/border-left-color单独设置颜色</li>\n<li>border-top/boder-right/border-bottom/border-left单独设置边框<ul>\n<li>[&lt;border-width&gt;] [&lt;border-style&gt;][boder-color]</li>\n</ul>\n</li>\n<li>border 全局边框，应用到四条边<ul>\n<li>[&lt;border-width&gt;] [&lt;border-style&gt;][boder-color]</li>\n</ul>\n</li>\n</ul>\n<p>对于只包含文本的行，能改变行间距离的属性只有line-height, font-size和vertical-align。<br>行内元素使用正左右外边距，可以多出来水平空间，负的左右外边距会使行内元素与其他内容重叠。<br>行内元素的边框，不会改变行高。<br>行内元素使用正的左右边框可以多出来水平空间。</p>\n<ul>\n<li>padding 内边距<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n</ul>\n</li>\n</ul>\n<p>行内非替换元素使用左右内边距时，可以多出来水平空间，而上下边距不会改变行高。<br>可以想图像使用内边距,外边距，边框时，它可以改变行高，也可以水平方向留出距离。</p>\n<ul>\n<li>background-color 背景元素<ul>\n<li>&lt;color&gt;</li>\n<li>transparent</li>\n</ul>\n</li>\n<li>background-image 如body {background-image: url(bg23.gif)}<ul>\n<li>&lt;uri&gt;</li>\n<li>none</li>\n</ul>\n</li>\n<li>background-repeat 有方向的重复<ul>\n<li>repeat</li>\n<li>repeat-x</li>\n<li>repeat-y</li>\n<li>no-repeat</li>\n</ul>\n</li>\n<li>background-position 背景定位<ul>\n<li>&lt;percentage&gt;</li>\n<li>&lt;length&gt;</li>\n<li>left/center/right/top/bottom</li>\n</ul>\n</li>\n</ul>\n<p>background-position单个关键字等价<br>center: cener center<br>top: top center或者center top<br>bottom: bottom center或者center bottom<br>left: left center 或者center left<br>right: right center 或者center right</p>\n<ul>\n<li><p>background-attachment</p>\n<ul>\n<li>scroll 跟随文档滚动</li>\n<li>fixed 不跟随文档滚动</li>\n</ul>\n</li>\n<li><p>background 简写属性</p>\n<ul>\n<li>&lt;background-color&gt; || &lt;background-image&gt; || &lt;backgroud-repeat&gt; || &lt;background-attachment&gt; || &lt;background-position&gt;</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第十章-浮动和定位\"><a href=\"#第十章-浮动和定位\" class=\"headerlink\" title=\"第十章 浮动和定位\"></a>第十章 浮动和定位</h2><ul>\n<li>float<ul>\n<li>left</li>\n<li>right</li>\n<li>none</li>\n</ul>\n</li>\n</ul>\n<p>浮动元素会从文档的正常流中删除，它还是会影响布局。其他内容会环绕元素，浮动元素的外边距不会合并</p>\n<ul>\n<li><p>position</p>\n<ul>\n<li>static 默认 块元素生成一个矩形框，行内元素创建一个或多个行框，置于父元素中</li>\n<li>relative 元素偏移某个距离，元素仍保持未定位前的形状，它原本占据的空间仍保留</li>\n<li>absolute 元素框从文档流中完全删除，并相对于其包含块定位。</li>\n<li>fixed 元素的表现类似于absolute，不过，其包含块是视窗本身。</li>\n</ul>\n</li>\n<li><p>偏移属性，在position为relative,absolute和fixed时，可以设置偏移属性top right bottom left</p>\n<ul>\n<li>&lt;length&gt;</li>\n<li>&lt;percentage&gt;</li>\n<li>auto 初始值</li>\n</ul>\n</li>\n</ul>\n<p>包含块</p>\n<p>根元素的包含块，由用户代理建立，即html元素或body元素<br>对于一个非根元素，如果其position时relative或static，包含块则由最近的块级框，表单元格或行内块祖先框的内容边界构成。<br>对于一个非根元素，如果其position时absolute，包含块则由最近的position值不是static的祖先元素。</p>\n<ul>\n<li>overflow<ul>\n<li>visible</li>\n<li>hidden</li>\n<li>scroll</li>\n<li>auto</li>\n</ul>\n</li>\n</ul>"},{"title":"高性能Javscript - 笔记","date":"2016-11-05T10:04:19.000Z","_content":"\n## 第一章 加载和执行\n\n### 减少Javascript加载对性能的影响\n\n- &lt;/body>闭合标签之前，将所有&lt;javascript>标签放到页面底部。这能确保在脚本执行前页面已经完成了渲染\n- 合并脚本，减少&lt;javascript>标签\n- 使用&lt;javascript>标签的defer属性\n```javascript\n    <script type='text/javascript' src='file1.js' defer></script>\n```\n\n<!--more-->\n\n- 利用动态创建的&lt;javascript>元素来下载并执行代码\n```javascript\n    var script = document.createElemnet('script');\n    script.type = 'text/javascript';\n    script.onload = function() {\n        alert('Script loaded!');\n    }\n    script.src = 'file1.js';\n    document.getElementByTagName('head')[0].appendChild(script);\n```\n- 使用XHR对象下载Javascript代码并注入页面中\n```javascript\n    var xhr = new XMLHttpRequest();\n    xhr.open('get', 'file1.js', true);\n    xhr.onreadystatechange = function() {\n        if(xhr.readyState == 4) {\n            if(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n                var script = document.createElemnet('script');\n                script.type = 'text/javascript';\n                script.text = xhr.responseText;\n                document.body.appendChild(script);\n            }\n        }\n    }\n```\n\n### 几种类库加载js的方式\n- YUI3\n```javascript\n    <script type='text/javascript' src='http://yui.yahooapis.com/combo?3.0.0/build/yui/yui-min.js'></script>\n    <script type='text/javascript'>\n        YUI().use('dom', function(Y) {\n            Y.DOM.addClass(document.body, 'loaded');\n        })\n    </script>\n```\n- LazyLoad\n```javascript\n    <script type='text/javascript' src='lazyload-min.js'></script>\n    <script type='text/javascript'>\n        LazyLoad.js('the-rest.js', function() {\n            Applicationn.init();\n        })\n    </script>\n```\n- LABjs\n```javascript\n    <script type='text/javascript' src='lab.js'></script>\n    <script type='text/javascript'> \n        $LAB.script('first-file.js')\n            .wait()\n            .script('the-rest.js')\n            .wait(function() {\n                Applicationn.init();\n            })\n```\n\n## 第二章 数据存取\n\n在Javascript中，数据存储的位置会对代码整体性能产成重大影响。数据存储共有4中方式：字面量、变量、数组项、对象成员。它们有着各自的性能特点。\n\n\n- 访问字面量和局部变量的速度最快，相反，访问数组元素和对象成员相对较慢。\n- 由于局部变量存在于作用域链的起始位置，因此访问局部变量比访问跨作用域变量更快。变量在作用域中的位置越深，访问所需时间就越长。由于全局变量总处在作用域的最末端，因此访问速度时最慢的。\n- 避免使用with语句。\n- 嵌套的对象成员会明显影响性能，尽量少用。\n- 属性或方法在原型链中的位置越深，访问它的速度也越慢。\n- 通常来说，你可以通过把常用的对象成员、数组元素、跨域变量保存在局部变量中来改善Javascript性能，因为局部变量访问速度更快。\n\n## 第三章 DOM编程\n\n访问和操作DOM时现在Web应用的重要部分。但每次穿越链接ECMAScript和DOM都会有性能消耗，为了减少DOM编程带来的消耗，请记住以下几点：\n\n- 最小化DOM访问次数，尽可能在Javascript端处理。\n- 如果需要多次访问某个DOM节点，请使用局部变量存储它的引用。\n- 小心处理HTML集合，把集合的长度缓存到一个变量中，并在迭代中使用它。如果需要经常操作集合，建议把它靠背到一个数组中。\n- 如果可能的话，使用速度更快的API，比如querySelecetAll()和firstElementChild。\n- 要留意重排和重绘，批量修改样式时，离线操作DOM树，使用缓存，并减少布局信息的次数。\n- 动画中使用绝对定位，使用拖放代理。\n- 使用事件委托来减少事件处理器的数量。","source":"_posts/High-Performance-Javascript.md","raw":"---\ntitle: 高性能Javscript - 笔记\ndate: 2016-11-5 18:04:19\ntags: javascript\n---\n\n## 第一章 加载和执行\n\n### 减少Javascript加载对性能的影响\n\n- &lt;/body>闭合标签之前，将所有&lt;javascript>标签放到页面底部。这能确保在脚本执行前页面已经完成了渲染\n- 合并脚本，减少&lt;javascript>标签\n- 使用&lt;javascript>标签的defer属性\n```javascript\n    <script type='text/javascript' src='file1.js' defer></script>\n```\n\n<!--more-->\n\n- 利用动态创建的&lt;javascript>元素来下载并执行代码\n```javascript\n    var script = document.createElemnet('script');\n    script.type = 'text/javascript';\n    script.onload = function() {\n        alert('Script loaded!');\n    }\n    script.src = 'file1.js';\n    document.getElementByTagName('head')[0].appendChild(script);\n```\n- 使用XHR对象下载Javascript代码并注入页面中\n```javascript\n    var xhr = new XMLHttpRequest();\n    xhr.open('get', 'file1.js', true);\n    xhr.onreadystatechange = function() {\n        if(xhr.readyState == 4) {\n            if(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n                var script = document.createElemnet('script');\n                script.type = 'text/javascript';\n                script.text = xhr.responseText;\n                document.body.appendChild(script);\n            }\n        }\n    }\n```\n\n### 几种类库加载js的方式\n- YUI3\n```javascript\n    <script type='text/javascript' src='http://yui.yahooapis.com/combo?3.0.0/build/yui/yui-min.js'></script>\n    <script type='text/javascript'>\n        YUI().use('dom', function(Y) {\n            Y.DOM.addClass(document.body, 'loaded');\n        })\n    </script>\n```\n- LazyLoad\n```javascript\n    <script type='text/javascript' src='lazyload-min.js'></script>\n    <script type='text/javascript'>\n        LazyLoad.js('the-rest.js', function() {\n            Applicationn.init();\n        })\n    </script>\n```\n- LABjs\n```javascript\n    <script type='text/javascript' src='lab.js'></script>\n    <script type='text/javascript'> \n        $LAB.script('first-file.js')\n            .wait()\n            .script('the-rest.js')\n            .wait(function() {\n                Applicationn.init();\n            })\n```\n\n## 第二章 数据存取\n\n在Javascript中，数据存储的位置会对代码整体性能产成重大影响。数据存储共有4中方式：字面量、变量、数组项、对象成员。它们有着各自的性能特点。\n\n\n- 访问字面量和局部变量的速度最快，相反，访问数组元素和对象成员相对较慢。\n- 由于局部变量存在于作用域链的起始位置，因此访问局部变量比访问跨作用域变量更快。变量在作用域中的位置越深，访问所需时间就越长。由于全局变量总处在作用域的最末端，因此访问速度时最慢的。\n- 避免使用with语句。\n- 嵌套的对象成员会明显影响性能，尽量少用。\n- 属性或方法在原型链中的位置越深，访问它的速度也越慢。\n- 通常来说，你可以通过把常用的对象成员、数组元素、跨域变量保存在局部变量中来改善Javascript性能，因为局部变量访问速度更快。\n\n## 第三章 DOM编程\n\n访问和操作DOM时现在Web应用的重要部分。但每次穿越链接ECMAScript和DOM都会有性能消耗，为了减少DOM编程带来的消耗，请记住以下几点：\n\n- 最小化DOM访问次数，尽可能在Javascript端处理。\n- 如果需要多次访问某个DOM节点，请使用局部变量存储它的引用。\n- 小心处理HTML集合，把集合的长度缓存到一个变量中，并在迭代中使用它。如果需要经常操作集合，建议把它靠背到一个数组中。\n- 如果可能的话，使用速度更快的API，比如querySelecetAll()和firstElementChild。\n- 要留意重排和重绘，批量修改样式时，离线操作DOM树，使用缓存，并减少布局信息的次数。\n- 动画中使用绝对定位，使用拖放代理。\n- 使用事件委托来减少事件处理器的数量。","slug":"High-Performance-Javascript","published":1,"updated":"2017-05-25T03:41:18.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o2m0002iwl7spa93t0u","content":"<h2 id=\"第一章-加载和执行\"><a href=\"#第一章-加载和执行\" class=\"headerlink\" title=\"第一章 加载和执行\"></a>第一章 加载和执行</h2><h3 id=\"减少Javascript加载对性能的影响\"><a href=\"#减少Javascript加载对性能的影响\" class=\"headerlink\" title=\"减少Javascript加载对性能的影响\"></a>减少Javascript加载对性能的影响</h3><ul>\n<li>&lt;/body&gt;闭合标签之前，将所有&lt;javascript&gt;标签放到页面底部。这能确保在脚本执行前页面已经完成了渲染</li>\n<li>合并脚本，减少&lt;javascript&gt;标签</li>\n<li>使用&lt;javascript&gt;标签的defer属性<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'file1.js'</span> defer&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>利用动态创建的&lt;javascript&gt;元素来下载并执行代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElemnet(<span class=\"string\">'script'</span>);</div><div class=\"line\">script.type = <span class=\"string\">'text/javascript'</span>;</div><div class=\"line\">script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'Script loaded!'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">script.src = <span class=\"string\">'file1.js'</span>;</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(script);</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用XHR对象下载Javascript代码并注入页面中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">xhr.open(<span class=\"string\">'get'</span>, <span class=\"string\">'file1.js'</span>, <span class=\"literal\">true</span>);</div><div class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(xhr.readyState == <span class=\"number\">4</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span> || xhr.status === <span class=\"number\">304</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElemnet(<span class=\"string\">'script'</span>);</div><div class=\"line\">            script.type = <span class=\"string\">'text/javascript'</span>;</div><div class=\"line\">            script.text = xhr.responseText;</div><div class=\"line\">            <span class=\"built_in\">document</span>.body.appendChild(script);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"几种类库加载js的方式\"><a href=\"#几种类库加载js的方式\" class=\"headerlink\" title=\"几种类库加载js的方式\"></a>几种类库加载js的方式</h3><ul>\n<li><p>YUI3</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'http://yui.yahooapis.com/combo?3.0.0/build/yui/yui-min.js'</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt;</div><div class=\"line\">    YUI().use(<span class=\"string\">'dom'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Y</span>) </span>&#123;</div><div class=\"line\">        Y.DOM.addClass(<span class=\"built_in\">document</span>.body, <span class=\"string\">'loaded'</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>LazyLoad</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'lazyload-min.js'</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt;</div><div class=\"line\">    LazyLoad.js(<span class=\"string\">'the-rest.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        Applicationn.init();</div><div class=\"line\">    &#125;)</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>LABjs</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'lab.js'</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt; </div><div class=\"line\">    $LAB.script(<span class=\"string\">'first-file.js'</span>)</div><div class=\"line\">        .wait()</div><div class=\"line\">        .script(<span class=\"string\">'the-rest.js'</span>)</div><div class=\"line\">        .wait(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            Applicationn.init();</div><div class=\"line\">        &#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"第二章-数据存取\"><a href=\"#第二章-数据存取\" class=\"headerlink\" title=\"第二章 数据存取\"></a>第二章 数据存取</h2><p>在Javascript中，数据存储的位置会对代码整体性能产成重大影响。数据存储共有4中方式：字面量、变量、数组项、对象成员。它们有着各自的性能特点。</p>\n<ul>\n<li>访问字面量和局部变量的速度最快，相反，访问数组元素和对象成员相对较慢。</li>\n<li>由于局部变量存在于作用域链的起始位置，因此访问局部变量比访问跨作用域变量更快。变量在作用域中的位置越深，访问所需时间就越长。由于全局变量总处在作用域的最末端，因此访问速度时最慢的。</li>\n<li>避免使用with语句。</li>\n<li>嵌套的对象成员会明显影响性能，尽量少用。</li>\n<li>属性或方法在原型链中的位置越深，访问它的速度也越慢。</li>\n<li>通常来说，你可以通过把常用的对象成员、数组元素、跨域变量保存在局部变量中来改善Javascript性能，因为局部变量访问速度更快。</li>\n</ul>\n<h2 id=\"第三章-DOM编程\"><a href=\"#第三章-DOM编程\" class=\"headerlink\" title=\"第三章 DOM编程\"></a>第三章 DOM编程</h2><p>访问和操作DOM时现在Web应用的重要部分。但每次穿越链接ECMAScript和DOM都会有性能消耗，为了减少DOM编程带来的消耗，请记住以下几点：</p>\n<ul>\n<li>最小化DOM访问次数，尽可能在Javascript端处理。</li>\n<li>如果需要多次访问某个DOM节点，请使用局部变量存储它的引用。</li>\n<li>小心处理HTML集合，把集合的长度缓存到一个变量中，并在迭代中使用它。如果需要经常操作集合，建议把它靠背到一个数组中。</li>\n<li>如果可能的话，使用速度更快的API，比如querySelecetAll()和firstElementChild。</li>\n<li>要留意重排和重绘，批量修改样式时，离线操作DOM树，使用缓存，并减少布局信息的次数。</li>\n<li>动画中使用绝对定位，使用拖放代理。</li>\n<li>使用事件委托来减少事件处理器的数量。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"第一章-加载和执行\"><a href=\"#第一章-加载和执行\" class=\"headerlink\" title=\"第一章 加载和执行\"></a>第一章 加载和执行</h2><h3 id=\"减少Javascript加载对性能的影响\"><a href=\"#减少Javascript加载对性能的影响\" class=\"headerlink\" title=\"减少Javascript加载对性能的影响\"></a>减少Javascript加载对性能的影响</h3><ul>\n<li>&lt;/body&gt;闭合标签之前，将所有&lt;javascript&gt;标签放到页面底部。这能确保在脚本执行前页面已经完成了渲染</li>\n<li>合并脚本，减少&lt;javascript&gt;标签</li>\n<li>使用&lt;javascript&gt;标签的defer属性<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'file1.js'</span> defer&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<ul>\n<li><p>利用动态创建的&lt;javascript&gt;元素来下载并执行代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElemnet(<span class=\"string\">'script'</span>);</div><div class=\"line\">script.type = <span class=\"string\">'text/javascript'</span>;</div><div class=\"line\">script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'Script loaded!'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">script.src = <span class=\"string\">'file1.js'</span>;</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(script);</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用XHR对象下载Javascript代码并注入页面中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">xhr.open(<span class=\"string\">'get'</span>, <span class=\"string\">'file1.js'</span>, <span class=\"literal\">true</span>);</div><div class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(xhr.readyState == <span class=\"number\">4</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span> || xhr.status === <span class=\"number\">304</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElemnet(<span class=\"string\">'script'</span>);</div><div class=\"line\">            script.type = <span class=\"string\">'text/javascript'</span>;</div><div class=\"line\">            script.text = xhr.responseText;</div><div class=\"line\">            <span class=\"built_in\">document</span>.body.appendChild(script);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"几种类库加载js的方式\"><a href=\"#几种类库加载js的方式\" class=\"headerlink\" title=\"几种类库加载js的方式\"></a>几种类库加载js的方式</h3><ul>\n<li><p>YUI3</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'http://yui.yahooapis.com/combo?3.0.0/build/yui/yui-min.js'</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt;</div><div class=\"line\">    YUI().use(<span class=\"string\">'dom'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Y</span>) </span>&#123;</div><div class=\"line\">        Y.DOM.addClass(<span class=\"built_in\">document</span>.body, <span class=\"string\">'loaded'</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>LazyLoad</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'lazyload-min.js'</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt;</div><div class=\"line\">    LazyLoad.js(<span class=\"string\">'the-rest.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        Applicationn.init();</div><div class=\"line\">    &#125;)</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>LABjs</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span> src=<span class=\"string\">'lab.js'</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">'text/javascript'</span>&gt; </div><div class=\"line\">    $LAB.script(<span class=\"string\">'first-file.js'</span>)</div><div class=\"line\">        .wait()</div><div class=\"line\">        .script(<span class=\"string\">'the-rest.js'</span>)</div><div class=\"line\">        .wait(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            Applicationn.init();</div><div class=\"line\">        &#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"第二章-数据存取\"><a href=\"#第二章-数据存取\" class=\"headerlink\" title=\"第二章 数据存取\"></a>第二章 数据存取</h2><p>在Javascript中，数据存储的位置会对代码整体性能产成重大影响。数据存储共有4中方式：字面量、变量、数组项、对象成员。它们有着各自的性能特点。</p>\n<ul>\n<li>访问字面量和局部变量的速度最快，相反，访问数组元素和对象成员相对较慢。</li>\n<li>由于局部变量存在于作用域链的起始位置，因此访问局部变量比访问跨作用域变量更快。变量在作用域中的位置越深，访问所需时间就越长。由于全局变量总处在作用域的最末端，因此访问速度时最慢的。</li>\n<li>避免使用with语句。</li>\n<li>嵌套的对象成员会明显影响性能，尽量少用。</li>\n<li>属性或方法在原型链中的位置越深，访问它的速度也越慢。</li>\n<li>通常来说，你可以通过把常用的对象成员、数组元素、跨域变量保存在局部变量中来改善Javascript性能，因为局部变量访问速度更快。</li>\n</ul>\n<h2 id=\"第三章-DOM编程\"><a href=\"#第三章-DOM编程\" class=\"headerlink\" title=\"第三章 DOM编程\"></a>第三章 DOM编程</h2><p>访问和操作DOM时现在Web应用的重要部分。但每次穿越链接ECMAScript和DOM都会有性能消耗，为了减少DOM编程带来的消耗，请记住以下几点：</p>\n<ul>\n<li>最小化DOM访问次数，尽可能在Javascript端处理。</li>\n<li>如果需要多次访问某个DOM节点，请使用局部变量存储它的引用。</li>\n<li>小心处理HTML集合，把集合的长度缓存到一个变量中，并在迭代中使用它。如果需要经常操作集合，建议把它靠背到一个数组中。</li>\n<li>如果可能的话，使用速度更快的API，比如querySelecetAll()和firstElementChild。</li>\n<li>要留意重排和重绘，批量修改样式时，离线操作DOM树，使用缓存，并减少布局信息的次数。</li>\n<li>动画中使用绝对定位，使用拖放代理。</li>\n<li>使用事件委托来减少事件处理器的数量。</li>\n</ul>"},{"title":"android studio编译错误: *** 目标模式不含有“%”。 停止。","date":"2016-11-05T10:04:19.000Z","_content":"\nAndroid Studio NDK编译出现如下错误：\n*** target pattern contains no `%'. Stop\n中文：\n*** 目标模式不含有“%”。 停止。\n可能是obj目录的问题，需要删掉。\n在工程目录下find所有的obj目录\n```bash\nfind . -name obj\n```","source":"_posts/android-studio编译错误-目标模式不含有“-”。-停止。.md","raw":"---\ntitle: 'android studio编译错误: *** 目标模式不含有“%”。 停止。'\ndate: 2016-11-5 18:04:19\ntags: [android studio, android]\n---\n\nAndroid Studio NDK编译出现如下错误：\n*** target pattern contains no `%'. Stop\n中文：\n*** 目标模式不含有“%”。 停止。\n可能是obj目录的问题，需要删掉。\n在工程目录下find所有的obj目录\n```bash\nfind . -name obj\n```","slug":"android-studio编译错误-目标模式不含有“-”。-停止。","published":1,"updated":"2017-05-25T03:41:18.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o2x0005iwl79jgpq2vz","content":"<p>Android Studio NDK编译出现如下错误：<br><strong><em> target pattern contains no `%’. Stop<br>中文：\n</em></strong> 目标模式不含有“%”。 停止。<br>可能是obj目录的问题，需要删掉。<br>在工程目录下find所有的obj目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">find . -name obj</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Android Studio NDK编译出现如下错误：<br><strong><em> target pattern contains no `%’. Stop<br>中文：\n</em></strong> 目标模式不含有“%”。 停止。<br>可能是obj目录的问题，需要删掉。<br>在工程目录下find所有的obj目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">find . -name obj</div></pre></td></tr></table></figure></p>\n"},{"title":"https双向验证功能的实现","date":"2016-11-28T00:51:23.000Z","_content":"本文介绍一个简单echo服务器的实现，服务端用nodejs，客户端用android。\n\n## <font size='6em'>用openssl一系列证书</font>\n\n### <font size='5em'>生成自己的CA根证书</font>\n\n#### <font size='4em'>生成跟证书私钥ca.key</font>\n```\n$ openssl genrsa -des3 -out ca.key 1024\n```\n#### <font size='4em'>生成X.509证书签名请求文件ca.csr</font>\n在生成ca.csr的过程中，会让输入一些组织信息等。\n```\n$ openssl req -new -key ca.key -out ca.csr \n```\n<!-- more --> \n\n输出如下\n```\nEnter pass phrase for ca.key:\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:CN\nState or Province Name (full name) [Some-State]:GuangDong\nLocality Name (eg, city) []:ShenZhen\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:IBoxPay\nOrganizational Unit Name (eg, section) []:IBoxPay\nCommon Name (e.g. server FQDN or YOUR name) []:\nEmail Address []:admin@iboxpay.com\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []:\nAn optional company name []:\n```\n\n#### <font size='4em'>生成X.509格式的CA根证书ca.crt</font>\n```\n$ openssl x509 -req -days 365 -in ca.csr -out ca.crt -signkey ca.key\n```\n输出如下\n```\nSignature ok\nsubject=/C=CN/ST=GuangDong/L=ShenZhen/O=IBoxPay/OU=IBoxPay/emailAddress=admin@iboxpay.com\nGetting Private key\nEnter pass phrase for ca.key:\n```\n\n### <font size='5em'>生成服务端的证书</font>\n\n#### <font size='4em'>生成服务端私钥文件 server.key</font>\n```\n$ openssl genrsa -des3 -out server.key 1024\n```\n#### <font size='4em'>服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server.csr</font>\n这一步需要填写一个组织信息，不要跟根证书的组织的一样。另外Common Name填一个自己的域名（如果没有实际的域名也可以写，后面在/etc/hosts映射一个，我写的就是yinlijun.com），不要填localhost，android会报错。\n```\nopenssl req -new -key server.key -out server.csr\n```\n输出如下\n```\nEnter pass phrase for server.key:\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:CN\nState or Province Name (full name) [Some-State]:GuangDong\nLocality Name (eg, city) []:ShenZhen\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:yinlijun\nOrganizational Unit Name (eg, section) []:yinlijun\nCommon Name (e.g. server FQDN or YOUR name) []:yinlijun.com\nEmail Address []:admin@yinlijun.com\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []: \n```\n\n#### <font size='4em'>删除私钥的密码，这一步非常**重要**，一定要执行,否则会影响后面的步骤。</font>\n```\n$ cp server.key server.key.passphrase\n$ openssl rsa -in server.key.passphrase -out server.key\n```\n输出如下\n```\nEnter pass phrase for server.key.passphrase:\nwriting RSA key\n```\n#### <font size='4em'>签发服务器证书server.crt：</font>\n```\nopenssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt\n```\n输出如下：\n```\nSignature ok\nsubject=/C=CN/ST=GuangDong/L=ShenZhen/O=yinlijun/OU=yinlijun/CN=yinlijun.com/emailAddress=admin@yinlijun.com\nGetting Private key\n```\n到现在为止，你目录下的文件应该有：\n```\nls -la\ntotal 36\ndrwxr-xr-x  2 user user 4096 Sep  5 16:19 .\ndrwxr-xr-x 12 user user 4096 Sep  5 16:09 ..\n-rw-r--r--  1 user user  757 Sep  5 16:12 ca.crt\n-rw-r--r--  1 user user  603 Sep  5 16:10 ca.csr\n-rw-r--r--  1 user user  963 Sep  5 16:09 ca.key\n-rw-r--r--  1 user user  757 Sep  5 16:19 server.crt\n-rw-r--r--  1 user user  603 Sep  5 16:16 server.csr\n-rw-r--r--  1 user user  887 Sep  5 16:18 server.key\n-rw-r--r--  1 user user  951 Sep  5 16:17 server.key.passphrase\n```\n\n#### 生成之后察看服务器证书信息。\n```\nopenssl x509 -in server.crt -text -noout\n```\n\n#### 生成服务器的pfx文件，这个文件node服务器要用到。\n```\nopenssl pkcs12 -export -in server.crt -inkey server.key -certfile ca.crt -out server.pfx\n```\n输出如下\n```\nEnter Export Password:\nVerifying - Enter Export Password:\n```\n#### 生成服务端的p12文件。，这个是为了生成服务端bks文件用的\n```\nopenssl pkcs12 -export -clcerts -in server.crt -inkey server.key -out server.p12\n```\n### 下载一个bcprov-jdk16-141.jar，也是为了生成服务端bks文件要用到的。\n```\n下载地址：[http://www.java2s.com/Code/JarDownload/bcprov/bcprov-jdk16-141.jar.zip](http://www.java2s.com/Code/JarDownload/bcprov/bcprov-jdk16-141.jar.zip)\n```\n### 生成服务端的bks文件，这个android程序要用到\n```\nkeytool -importkeystore -srckeystore server.p12 -srcstoretype pkcs12 -destkeystore server.bks -deststoretype bks -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath bcprov-jdk16-141.jar\n```\n输出如下\n```\n输入目标密钥库口令:  \n再次输入新密码: \n输入源密钥库口令:  \n已成功导入别名 1 项。\n已完成导入命令: 1 项成功导入，0 项失败或取消\n```\n因为要进行双向验证，还需要生成客户端证书。\n#### 生成客户端密钥\n```\nopenssl genrsa -des3 -out client.key 1024\n```\n#### 生成客户端证书请求签名文件\n```\nopenssl req -new -out client.csr -key client.key\n```\n输出如下\n```\nEnter pass phrase for client.key:\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:CN\nState or Province Name (full name) [Some-State]:GuangDong \nLocality Name (eg, city) []:ShenZhen\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:ruochen\nOrganizational Unit Name (eg, section) []:ruochen\nCommon Name (e.g. server FQDN or YOUR name) []:\nEmail Address []:admin@ruochen.com\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []:\nAn optional company name []:\n```\n\n#### 创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。\n```\nopenssl x509 -req -in client.csr -out client.cert -signkey client.key -CA ca.crt -CAkey ca.key -CAcreateserial -days 3650\n```\n输入如下\n```\nSignature ok\nsubject=/C=CN/ST=GuangDong/L=ShenZhen/O=ruochen/OU=ruochen/emailAddress=admin@ruochen.com\nGetting Private key\nEnter pass phrase for client.key:\nGetting CA Private Key\nEnter pass phrase for ca.key:\nyinlijun@yinlijun:~/personal_github/echo-https-server/keys$ ls\nca.crt  ca.csr  ca.key  ca.srl  client.cert  client.csr  client.key  server.crt  server.csr  server.key  server.key.passphrase  server.pfx\nyinlijun@yinlijun:~/personal_github/echo-https-server/keys$ openssl pkcs12 -export -clcerts -in client.cert -inkey client.key -out client.p12\nEnter pass phrase for client.key:\nEnter Export Password:\nVerifying - Enter Export Password:\n```\n\n#### 生成浏览器支持的p12文件\n```\nopenssl pkcs12 -export -clcerts -in client.cert -inkey client.key -out client.p12\n```\n#### 将客户端证书文件client.crt和客户端证书密钥文件client.key合并成客户端证书安装包client.pfx\n```\nopenssl pkcs12 -export -in client.crt -inkey client.key -out client.pfx\n```\n\n以上的文件我只用到了一部分，应该有替代关系，具体我也搞不清楚:)。 不同的实现方式有用到不同的文件。\n我的android客户端用到了\n- server.bks\n- client.p12\n\n看了网上的一些例子，好像server.bks可以用server.crt替代。\n\nnode用到了\n- server.pfx\n\n察看node的文档，server.pfx可以用server.crt和server.key替代。\n\n\n## 服务端（nodejs）的代码\n```javascript\nvar https =require('https'), fs = require('fs');\n\nvar options = {\n    key: fs.readFileSync('./keys/server.key'),\n    cert: fs.readFileSync('./keys/server.crt'),\n};\n\nvar app = express();\nvar server = https.createServer(options, app);\nserver.listen(443, function() {\n    console.log('Https server listening on port ' + 443);\n});\n```\n\n## android应用自有证书的验证方式\n将服务端证书拷贝到app资源目录下，一般是<project_dir>/assets/server.crt\n\n### 方法一：直接根据server.crt初始化TrustManagerFactory\n```java\n    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n    InputStream caInput = new BufferedInputStream(getAssets().open(\"server.crt\"));\n    final Certificate ca;\n    try {\n        ca = cf.generateCertificate(caInput);\n        Log.i(TAG, \"ca=\" + ((X509Certificate) ca).getSubjectDN());\n        Log.i(TAG, \"key=\" + ((X509Certificate) ca).getPublicKey());\n    } finally {\n        caInput.close();\n    }\n\n    String keyStoreType = KeyStore.getDefaultType();\n    Log.d(TAG, \"keystore type:\" + keyStoreType);\n    KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n    keyStore.load(null, null);\n    keyStore.setCertificateEntry(\"cert\", ca);\n\n    String tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();\n    Log.d(TAG, \"tmfAlgorithm:\" + tmfAlgorithm);\n    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(tmfAlgorithm);\n    trustManagerFactory.init(keyStore);\n\n    mSSLContext = SSLContext.getInstance(\"TLS\");\n    mSSLContext.init(null, trustManagerFactory.getTrustManagers(), null);\n\n    URL url = new URL(\"https://yinlijun.com\");\n    HttpsURLConnection urlConnection =\n            (HttpsURLConnection)url.openConnection();\n    urlConnection.setSSLSocketFactory(mSSLContext.getSocketFactory());\n    InputStream in = urlConnection.getInputStream();\n    copyInputStreamToOutputStream(in, System.out);\n} catch (CertificateException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n} catch (NoSuchAlgorithmException e) {\n    e.printStackTrace();\n} catch (KeyManagementException e) {\n    e.printStackTrace();\n} catch (KeyStoreException e) {\n    e.printStackTrace();\n}\n```\ncopyInputStreamToOutputStream方法如下：\n\n```java\n    private void copyInputStreamToOutputStream(InputStream in, PrintStream out) throws IOException {\n        byte[] buffer = new byte[1024];\n        int c = 0;\n        while ((c = in.read(buffer)) != -1) {\n            out.write(buffer, 0, c);\n        }\n    }\n```\n\n### 方法二 \n\n```java\n    try {\n        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n        InputStream caInput = new BufferedInputStream(getAssets().open(\"server.crt\"));\n        final Certificate ca;\n        try {\n            ca = cf.generateCertificate(caInput);\n            Log.i(\"Longer\", \"ca=\" + ((X509Certificate) ca).getSubjectDN());\n            Log.i(\"Longer\", \"key=\" + ((X509Certificate) ca).getPublicKey());\n        } finally {\n            caInput.close();\n        }\n\n        // Create an SSLContext that uses our TrustManager\n        SSLContext context = SSLContext.getInstance(\"TLSv1\",\"AndroidOpenSSL\");\n        context.init(null, new TrustManager[]{\n                new X509TrustManager() {\n                    @Override\n                    public void checkClientTrusted(X509Certificate[] chain,\n                                                    String authType)\n                            throws CertificateException {\n\n                    }\n\n                    @Override\n                    public void checkServerTrusted(X509Certificate[] chain,\n                                                    String authType)\n                            throws CertificateException {\n                        for (X509Certificate cert : chain) {\n\n                            // Make sure that it hasn't expired.\n                            cert.checkValidity();\n\n                            // Verify the certificate's public key chain.\n                            try {\n                                cert.verify(((X509Certificate) ca).getPublicKey());\n                            } catch (NoSuchAlgorithmException e) {\n                                e.printStackTrace();\n                            } catch (InvalidKeyException e) {\n                                e.printStackTrace();\n                            } catch (NoSuchProviderException e) {\n                                e.printStackTrace();\n                            } catch (SignatureException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                    }\n\n                    @Override\n                    public X509Certificate[] getAcceptedIssuers() {\n                        return new X509Certificate[0];\n                    }\n                }\n        }, null);\n\n        URL url = new URL(\"https://yinlijun.com/\");\n        HttpsURLConnection urlConnection =\n                (HttpsURLConnection)url.openConnection();\n        urlConnection.setSSLSocketFactory(context.getSocketFactory());\n        InputStream in = urlConnection.getInputStream();\n        copyInputStreamToOutputStream(in, System.out);\n```\n\n\n## 双向认证\n单向验证只能验证服务器，如果服务器也想对客户端进行验证，即所谓（双向验证），需要在连接是一起发送客户端证书。\n\n### 双向认证，服务器代码\n```javascript\nconst tls = require('tls');\nconst fs = require('fs');\n\nconst options = {\n  pfx: fs.readFileSync('./server.pfx'),\n  passphrase: \"123456\",\n  // This is necessary only if using the client certificate authentication.\n  requestCert: true,\n  rejectUnauthorized: true //如果接受也非认证链接，可以删除此行。\n};\n//需要双向认证才需要配置requestCert为true。\nconst server = tls.createServer(options, (socket) => {\n  console.log('server connected',\n              socket.authorized ? 'authorized' : 'unauthorized');\n  socket.setEncoding('utf8');\n  socket.on('data', (data) => {\n      console.log(data);\n      socket.write(data);\n  });\n  socket.on('end', (socket) => {\n    console.log(\"socket closed\");\n  });\n});\nserver.listen(8000, () => {\n  console.log('server bound');\n});\n\n```\n### 双向认证，android的代码，实现方式一\n\nserver.pfx和client.p12放到<project_dir>/assets/目录下\n```java\n    try {\n        KeyStore trustStore = KeyStore.getInstance(\"bks\");\n        InputStream tsIn = getResources().getAssets().open(\"server.bks\");\n\n        KeyStore keyStore = KeyStore.getInstance(\"PKCS12\");\n        InputStream ksIn = getResources().getAssets().open(\"client.p12\");\n\n        try {\n            keyStore.load(ksIn, \"123456\".toCharArray());\n            trustStore.load(tsIn, \"123456\".toCharArray());\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                ksIn.close();\n            } catch (Exception ignore) {\n            }\n            try {\n                tsIn.close();\n            } catch (Exception ignore) {\n            }\n        }\n        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(\"X509\");\n        keyManagerFactory.init(keyStore, \"123456\".toCharArray());\n        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n        trustManagerFactory.init(trustStore);\n        mSSLContext = SSLContext.getInstance(\"TLS\");\n        mSSLContext.init(null, trustManagerFactory.getTrustManagers(), null);\n\n        mSSLSocket = (SSLSocket) mSSLContext.getSocketFactory().createSocket(\"yinlijun.com\", 8000);\n        mSSLSocket.startHandshake();\n        //...\n    } catch (IOException e) {\n        e.printStackTrace();\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (KeyManagementException e) {\n        e.printStackTrace();\n    } catch (KeyStoreException e) {\n        e.printStackTrace();\n    } catch (UnrecoverableKeyException e) {\n        e.printStackTrace();\n    }\n\n```\n\n### 双向认证，android的代码，实现方式2，用server.crt替代server.bks\n\nserver.crt和client.p12放到<project_dir>/assets/目录下\n\n```java\n    try {\n        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n        InputStream caInput = new BufferedInputStream(getAssets().open(\"server.crt\"));\n        final Certificate ca;\n        try {\n            ca = cf.generateCertificate(caInput);\n            Log.i(\"Longer\", \"ca=\" + ((X509Certificate) ca).getSubjectDN());\n            Log.i(\"Longer\", \"key=\" + ((X509Certificate) ca).getPublicKey());\n        } finally {\n            caInput.close();\n        }\n\n        KeyStore keyStore = KeyStore.getInstance(\"PKCS12\");\n        InputStream ksIn = getResources().getAssets().open(\"client.p12\");\n\n        try {\n            keyStore.load(ksIn, \"123456\".toCharArray());\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                ksIn.close();\n            } catch (Exception ignore) {\n            }\n        }\n        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(\"X509\");\n        keyManagerFactory.init(keyStore, \"123456\".toCharArray());\n\n        // Create an SSLContext that uses our TrustManager\n        SSLContext context = SSLContext.getInstance(\"TLSv1\",\"AndroidOpenSSL\");\n        context.init(keyManagerFactory.getKeyManagers(), new TrustManager[]{\n                new X509TrustManager() {\n                    @Override\n                    public void checkClientTrusted(X509Certificate[] chain,\n                                                    String authType)\n                            throws CertificateException {\n\n                    }\n\n                    @Override\n                    public void checkServerTrusted(X509Certificate[] chain,\n                                                    String authType)\n                            throws CertificateException {\n                        for (X509Certificate cert : chain) {\n\n                            // Make sure that it hasn't expired.\n                            cert.checkValidity();\n\n                            // Verify the certificate's public key chain.\n                            try {\n                                cert.verify(((X509Certificate) ca).getPublicKey());\n                            } catch (NoSuchAlgorithmException e) {\n                                e.printStackTrace();\n                            } catch (InvalidKeyException e) {\n                                e.printStackTrace();\n                            } catch (NoSuchProviderException e) {\n                                e.printStackTrace();\n                            } catch (SignatureException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                    }\n\n                    @Override\n                    public X509Certificate[] getAcceptedIssuers() {\n                        return new X509Certificate[0];\n                    }\n                }\n        }, null);\n        //...\n```\n\n项目地址：\n\n## 参考文档\n- [How to generate self-signed certificate for usage in Express4 or Node.js HTTP](https://matoski.com/article/node-express-generate-ssl/)\n- [SSL证书生成方法](http://blog.csdn.net/fyang2007/article/details/6180361)\n- [Android安全开发之安全使用HTTPS](https://zhuanlan.zhihu.com/p/22816331)\n- [通过 HTTPS 和 SSL 确保安全](https://developer.android.com/training/articles/security-ssl.html#nogotofail) (要翻墙)\n- [https://nodejs.org/api/tls.html](https://nodejs.org/api/tls.html)\n- [https://gist.github.com/Frank-Zhu/41e21a00df26d63cd38d](https://gist.github.com/Frank-Zhu/41e21a00df26d63cd38d)\n","source":"_posts/android-https-verify-ways.md","raw":"---\ntitle: https双向验证功能的实现\ndate: 2016-11-28 08:51:23\ntags: [android, nodejs, https, openssl]\n---\n本文介绍一个简单echo服务器的实现，服务端用nodejs，客户端用android。\n\n## <font size='6em'>用openssl一系列证书</font>\n\n### <font size='5em'>生成自己的CA根证书</font>\n\n#### <font size='4em'>生成跟证书私钥ca.key</font>\n```\n$ openssl genrsa -des3 -out ca.key 1024\n```\n#### <font size='4em'>生成X.509证书签名请求文件ca.csr</font>\n在生成ca.csr的过程中，会让输入一些组织信息等。\n```\n$ openssl req -new -key ca.key -out ca.csr \n```\n<!-- more --> \n\n输出如下\n```\nEnter pass phrase for ca.key:\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:CN\nState or Province Name (full name) [Some-State]:GuangDong\nLocality Name (eg, city) []:ShenZhen\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:IBoxPay\nOrganizational Unit Name (eg, section) []:IBoxPay\nCommon Name (e.g. server FQDN or YOUR name) []:\nEmail Address []:admin@iboxpay.com\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []:\nAn optional company name []:\n```\n\n#### <font size='4em'>生成X.509格式的CA根证书ca.crt</font>\n```\n$ openssl x509 -req -days 365 -in ca.csr -out ca.crt -signkey ca.key\n```\n输出如下\n```\nSignature ok\nsubject=/C=CN/ST=GuangDong/L=ShenZhen/O=IBoxPay/OU=IBoxPay/emailAddress=admin@iboxpay.com\nGetting Private key\nEnter pass phrase for ca.key:\n```\n\n### <font size='5em'>生成服务端的证书</font>\n\n#### <font size='4em'>生成服务端私钥文件 server.key</font>\n```\n$ openssl genrsa -des3 -out server.key 1024\n```\n#### <font size='4em'>服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server.csr</font>\n这一步需要填写一个组织信息，不要跟根证书的组织的一样。另外Common Name填一个自己的域名（如果没有实际的域名也可以写，后面在/etc/hosts映射一个，我写的就是yinlijun.com），不要填localhost，android会报错。\n```\nopenssl req -new -key server.key -out server.csr\n```\n输出如下\n```\nEnter pass phrase for server.key:\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:CN\nState or Province Name (full name) [Some-State]:GuangDong\nLocality Name (eg, city) []:ShenZhen\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:yinlijun\nOrganizational Unit Name (eg, section) []:yinlijun\nCommon Name (e.g. server FQDN or YOUR name) []:yinlijun.com\nEmail Address []:admin@yinlijun.com\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []: \n```\n\n#### <font size='4em'>删除私钥的密码，这一步非常**重要**，一定要执行,否则会影响后面的步骤。</font>\n```\n$ cp server.key server.key.passphrase\n$ openssl rsa -in server.key.passphrase -out server.key\n```\n输出如下\n```\nEnter pass phrase for server.key.passphrase:\nwriting RSA key\n```\n#### <font size='4em'>签发服务器证书server.crt：</font>\n```\nopenssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt\n```\n输出如下：\n```\nSignature ok\nsubject=/C=CN/ST=GuangDong/L=ShenZhen/O=yinlijun/OU=yinlijun/CN=yinlijun.com/emailAddress=admin@yinlijun.com\nGetting Private key\n```\n到现在为止，你目录下的文件应该有：\n```\nls -la\ntotal 36\ndrwxr-xr-x  2 user user 4096 Sep  5 16:19 .\ndrwxr-xr-x 12 user user 4096 Sep  5 16:09 ..\n-rw-r--r--  1 user user  757 Sep  5 16:12 ca.crt\n-rw-r--r--  1 user user  603 Sep  5 16:10 ca.csr\n-rw-r--r--  1 user user  963 Sep  5 16:09 ca.key\n-rw-r--r--  1 user user  757 Sep  5 16:19 server.crt\n-rw-r--r--  1 user user  603 Sep  5 16:16 server.csr\n-rw-r--r--  1 user user  887 Sep  5 16:18 server.key\n-rw-r--r--  1 user user  951 Sep  5 16:17 server.key.passphrase\n```\n\n#### 生成之后察看服务器证书信息。\n```\nopenssl x509 -in server.crt -text -noout\n```\n\n#### 生成服务器的pfx文件，这个文件node服务器要用到。\n```\nopenssl pkcs12 -export -in server.crt -inkey server.key -certfile ca.crt -out server.pfx\n```\n输出如下\n```\nEnter Export Password:\nVerifying - Enter Export Password:\n```\n#### 生成服务端的p12文件。，这个是为了生成服务端bks文件用的\n```\nopenssl pkcs12 -export -clcerts -in server.crt -inkey server.key -out server.p12\n```\n### 下载一个bcprov-jdk16-141.jar，也是为了生成服务端bks文件要用到的。\n```\n下载地址：[http://www.java2s.com/Code/JarDownload/bcprov/bcprov-jdk16-141.jar.zip](http://www.java2s.com/Code/JarDownload/bcprov/bcprov-jdk16-141.jar.zip)\n```\n### 生成服务端的bks文件，这个android程序要用到\n```\nkeytool -importkeystore -srckeystore server.p12 -srcstoretype pkcs12 -destkeystore server.bks -deststoretype bks -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath bcprov-jdk16-141.jar\n```\n输出如下\n```\n输入目标密钥库口令:  \n再次输入新密码: \n输入源密钥库口令:  \n已成功导入别名 1 项。\n已完成导入命令: 1 项成功导入，0 项失败或取消\n```\n因为要进行双向验证，还需要生成客户端证书。\n#### 生成客户端密钥\n```\nopenssl genrsa -des3 -out client.key 1024\n```\n#### 生成客户端证书请求签名文件\n```\nopenssl req -new -out client.csr -key client.key\n```\n输出如下\n```\nEnter pass phrase for client.key:\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:CN\nState or Province Name (full name) [Some-State]:GuangDong \nLocality Name (eg, city) []:ShenZhen\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:ruochen\nOrganizational Unit Name (eg, section) []:ruochen\nCommon Name (e.g. server FQDN or YOUR name) []:\nEmail Address []:admin@ruochen.com\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []:\nAn optional company name []:\n```\n\n#### 创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。\n```\nopenssl x509 -req -in client.csr -out client.cert -signkey client.key -CA ca.crt -CAkey ca.key -CAcreateserial -days 3650\n```\n输入如下\n```\nSignature ok\nsubject=/C=CN/ST=GuangDong/L=ShenZhen/O=ruochen/OU=ruochen/emailAddress=admin@ruochen.com\nGetting Private key\nEnter pass phrase for client.key:\nGetting CA Private Key\nEnter pass phrase for ca.key:\nyinlijun@yinlijun:~/personal_github/echo-https-server/keys$ ls\nca.crt  ca.csr  ca.key  ca.srl  client.cert  client.csr  client.key  server.crt  server.csr  server.key  server.key.passphrase  server.pfx\nyinlijun@yinlijun:~/personal_github/echo-https-server/keys$ openssl pkcs12 -export -clcerts -in client.cert -inkey client.key -out client.p12\nEnter pass phrase for client.key:\nEnter Export Password:\nVerifying - Enter Export Password:\n```\n\n#### 生成浏览器支持的p12文件\n```\nopenssl pkcs12 -export -clcerts -in client.cert -inkey client.key -out client.p12\n```\n#### 将客户端证书文件client.crt和客户端证书密钥文件client.key合并成客户端证书安装包client.pfx\n```\nopenssl pkcs12 -export -in client.crt -inkey client.key -out client.pfx\n```\n\n以上的文件我只用到了一部分，应该有替代关系，具体我也搞不清楚:)。 不同的实现方式有用到不同的文件。\n我的android客户端用到了\n- server.bks\n- client.p12\n\n看了网上的一些例子，好像server.bks可以用server.crt替代。\n\nnode用到了\n- server.pfx\n\n察看node的文档，server.pfx可以用server.crt和server.key替代。\n\n\n## 服务端（nodejs）的代码\n```javascript\nvar https =require('https'), fs = require('fs');\n\nvar options = {\n    key: fs.readFileSync('./keys/server.key'),\n    cert: fs.readFileSync('./keys/server.crt'),\n};\n\nvar app = express();\nvar server = https.createServer(options, app);\nserver.listen(443, function() {\n    console.log('Https server listening on port ' + 443);\n});\n```\n\n## android应用自有证书的验证方式\n将服务端证书拷贝到app资源目录下，一般是<project_dir>/assets/server.crt\n\n### 方法一：直接根据server.crt初始化TrustManagerFactory\n```java\n    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n    InputStream caInput = new BufferedInputStream(getAssets().open(\"server.crt\"));\n    final Certificate ca;\n    try {\n        ca = cf.generateCertificate(caInput);\n        Log.i(TAG, \"ca=\" + ((X509Certificate) ca).getSubjectDN());\n        Log.i(TAG, \"key=\" + ((X509Certificate) ca).getPublicKey());\n    } finally {\n        caInput.close();\n    }\n\n    String keyStoreType = KeyStore.getDefaultType();\n    Log.d(TAG, \"keystore type:\" + keyStoreType);\n    KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n    keyStore.load(null, null);\n    keyStore.setCertificateEntry(\"cert\", ca);\n\n    String tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();\n    Log.d(TAG, \"tmfAlgorithm:\" + tmfAlgorithm);\n    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(tmfAlgorithm);\n    trustManagerFactory.init(keyStore);\n\n    mSSLContext = SSLContext.getInstance(\"TLS\");\n    mSSLContext.init(null, trustManagerFactory.getTrustManagers(), null);\n\n    URL url = new URL(\"https://yinlijun.com\");\n    HttpsURLConnection urlConnection =\n            (HttpsURLConnection)url.openConnection();\n    urlConnection.setSSLSocketFactory(mSSLContext.getSocketFactory());\n    InputStream in = urlConnection.getInputStream();\n    copyInputStreamToOutputStream(in, System.out);\n} catch (CertificateException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n} catch (NoSuchAlgorithmException e) {\n    e.printStackTrace();\n} catch (KeyManagementException e) {\n    e.printStackTrace();\n} catch (KeyStoreException e) {\n    e.printStackTrace();\n}\n```\ncopyInputStreamToOutputStream方法如下：\n\n```java\n    private void copyInputStreamToOutputStream(InputStream in, PrintStream out) throws IOException {\n        byte[] buffer = new byte[1024];\n        int c = 0;\n        while ((c = in.read(buffer)) != -1) {\n            out.write(buffer, 0, c);\n        }\n    }\n```\n\n### 方法二 \n\n```java\n    try {\n        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n        InputStream caInput = new BufferedInputStream(getAssets().open(\"server.crt\"));\n        final Certificate ca;\n        try {\n            ca = cf.generateCertificate(caInput);\n            Log.i(\"Longer\", \"ca=\" + ((X509Certificate) ca).getSubjectDN());\n            Log.i(\"Longer\", \"key=\" + ((X509Certificate) ca).getPublicKey());\n        } finally {\n            caInput.close();\n        }\n\n        // Create an SSLContext that uses our TrustManager\n        SSLContext context = SSLContext.getInstance(\"TLSv1\",\"AndroidOpenSSL\");\n        context.init(null, new TrustManager[]{\n                new X509TrustManager() {\n                    @Override\n                    public void checkClientTrusted(X509Certificate[] chain,\n                                                    String authType)\n                            throws CertificateException {\n\n                    }\n\n                    @Override\n                    public void checkServerTrusted(X509Certificate[] chain,\n                                                    String authType)\n                            throws CertificateException {\n                        for (X509Certificate cert : chain) {\n\n                            // Make sure that it hasn't expired.\n                            cert.checkValidity();\n\n                            // Verify the certificate's public key chain.\n                            try {\n                                cert.verify(((X509Certificate) ca).getPublicKey());\n                            } catch (NoSuchAlgorithmException e) {\n                                e.printStackTrace();\n                            } catch (InvalidKeyException e) {\n                                e.printStackTrace();\n                            } catch (NoSuchProviderException e) {\n                                e.printStackTrace();\n                            } catch (SignatureException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                    }\n\n                    @Override\n                    public X509Certificate[] getAcceptedIssuers() {\n                        return new X509Certificate[0];\n                    }\n                }\n        }, null);\n\n        URL url = new URL(\"https://yinlijun.com/\");\n        HttpsURLConnection urlConnection =\n                (HttpsURLConnection)url.openConnection();\n        urlConnection.setSSLSocketFactory(context.getSocketFactory());\n        InputStream in = urlConnection.getInputStream();\n        copyInputStreamToOutputStream(in, System.out);\n```\n\n\n## 双向认证\n单向验证只能验证服务器，如果服务器也想对客户端进行验证，即所谓（双向验证），需要在连接是一起发送客户端证书。\n\n### 双向认证，服务器代码\n```javascript\nconst tls = require('tls');\nconst fs = require('fs');\n\nconst options = {\n  pfx: fs.readFileSync('./server.pfx'),\n  passphrase: \"123456\",\n  // This is necessary only if using the client certificate authentication.\n  requestCert: true,\n  rejectUnauthorized: true //如果接受也非认证链接，可以删除此行。\n};\n//需要双向认证才需要配置requestCert为true。\nconst server = tls.createServer(options, (socket) => {\n  console.log('server connected',\n              socket.authorized ? 'authorized' : 'unauthorized');\n  socket.setEncoding('utf8');\n  socket.on('data', (data) => {\n      console.log(data);\n      socket.write(data);\n  });\n  socket.on('end', (socket) => {\n    console.log(\"socket closed\");\n  });\n});\nserver.listen(8000, () => {\n  console.log('server bound');\n});\n\n```\n### 双向认证，android的代码，实现方式一\n\nserver.pfx和client.p12放到<project_dir>/assets/目录下\n```java\n    try {\n        KeyStore trustStore = KeyStore.getInstance(\"bks\");\n        InputStream tsIn = getResources().getAssets().open(\"server.bks\");\n\n        KeyStore keyStore = KeyStore.getInstance(\"PKCS12\");\n        InputStream ksIn = getResources().getAssets().open(\"client.p12\");\n\n        try {\n            keyStore.load(ksIn, \"123456\".toCharArray());\n            trustStore.load(tsIn, \"123456\".toCharArray());\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                ksIn.close();\n            } catch (Exception ignore) {\n            }\n            try {\n                tsIn.close();\n            } catch (Exception ignore) {\n            }\n        }\n        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(\"X509\");\n        keyManagerFactory.init(keyStore, \"123456\".toCharArray());\n        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n        trustManagerFactory.init(trustStore);\n        mSSLContext = SSLContext.getInstance(\"TLS\");\n        mSSLContext.init(null, trustManagerFactory.getTrustManagers(), null);\n\n        mSSLSocket = (SSLSocket) mSSLContext.getSocketFactory().createSocket(\"yinlijun.com\", 8000);\n        mSSLSocket.startHandshake();\n        //...\n    } catch (IOException e) {\n        e.printStackTrace();\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    } catch (KeyManagementException e) {\n        e.printStackTrace();\n    } catch (KeyStoreException e) {\n        e.printStackTrace();\n    } catch (UnrecoverableKeyException e) {\n        e.printStackTrace();\n    }\n\n```\n\n### 双向认证，android的代码，实现方式2，用server.crt替代server.bks\n\nserver.crt和client.p12放到<project_dir>/assets/目录下\n\n```java\n    try {\n        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n        InputStream caInput = new BufferedInputStream(getAssets().open(\"server.crt\"));\n        final Certificate ca;\n        try {\n            ca = cf.generateCertificate(caInput);\n            Log.i(\"Longer\", \"ca=\" + ((X509Certificate) ca).getSubjectDN());\n            Log.i(\"Longer\", \"key=\" + ((X509Certificate) ca).getPublicKey());\n        } finally {\n            caInput.close();\n        }\n\n        KeyStore keyStore = KeyStore.getInstance(\"PKCS12\");\n        InputStream ksIn = getResources().getAssets().open(\"client.p12\");\n\n        try {\n            keyStore.load(ksIn, \"123456\".toCharArray());\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                ksIn.close();\n            } catch (Exception ignore) {\n            }\n        }\n        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(\"X509\");\n        keyManagerFactory.init(keyStore, \"123456\".toCharArray());\n\n        // Create an SSLContext that uses our TrustManager\n        SSLContext context = SSLContext.getInstance(\"TLSv1\",\"AndroidOpenSSL\");\n        context.init(keyManagerFactory.getKeyManagers(), new TrustManager[]{\n                new X509TrustManager() {\n                    @Override\n                    public void checkClientTrusted(X509Certificate[] chain,\n                                                    String authType)\n                            throws CertificateException {\n\n                    }\n\n                    @Override\n                    public void checkServerTrusted(X509Certificate[] chain,\n                                                    String authType)\n                            throws CertificateException {\n                        for (X509Certificate cert : chain) {\n\n                            // Make sure that it hasn't expired.\n                            cert.checkValidity();\n\n                            // Verify the certificate's public key chain.\n                            try {\n                                cert.verify(((X509Certificate) ca).getPublicKey());\n                            } catch (NoSuchAlgorithmException e) {\n                                e.printStackTrace();\n                            } catch (InvalidKeyException e) {\n                                e.printStackTrace();\n                            } catch (NoSuchProviderException e) {\n                                e.printStackTrace();\n                            } catch (SignatureException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                    }\n\n                    @Override\n                    public X509Certificate[] getAcceptedIssuers() {\n                        return new X509Certificate[0];\n                    }\n                }\n        }, null);\n        //...\n```\n\n项目地址：\n\n## 参考文档\n- [How to generate self-signed certificate for usage in Express4 or Node.js HTTP](https://matoski.com/article/node-express-generate-ssl/)\n- [SSL证书生成方法](http://blog.csdn.net/fyang2007/article/details/6180361)\n- [Android安全开发之安全使用HTTPS](https://zhuanlan.zhihu.com/p/22816331)\n- [通过 HTTPS 和 SSL 确保安全](https://developer.android.com/training/articles/security-ssl.html#nogotofail) (要翻墙)\n- [https://nodejs.org/api/tls.html](https://nodejs.org/api/tls.html)\n- [https://gist.github.com/Frank-Zhu/41e21a00df26d63cd38d](https://gist.github.com/Frank-Zhu/41e21a00df26d63cd38d)\n","slug":"android-https-verify-ways","published":1,"updated":"2017-05-25T03:41:18.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o300006iwl7qfd99uhj","content":"<p>本文介绍一个简单echo服务器的实现，服务端用nodejs，客户端用android。</p>\n<h2 id=\"用openssl一系列证书\"><a href=\"#用openssl一系列证书\" class=\"headerlink\" title=\"用openssl一系列证书\"></a><font size=\"6em\">用openssl一系列证书</font></h2><h3 id=\"生成自己的CA根证书\"><a href=\"#生成自己的CA根证书\" class=\"headerlink\" title=\"生成自己的CA根证书\"></a><font size=\"5em\">生成自己的CA根证书</font></h3><h4 id=\"生成跟证书私钥ca-key\"><a href=\"#生成跟证书私钥ca-key\" class=\"headerlink\" title=\"生成跟证书私钥ca.key\"></a><font size=\"4em\">生成跟证书私钥ca.key</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ openssl genrsa -des3 -out ca.key 1024</div></pre></td></tr></table></figure>\n<h4 id=\"生成X-509证书签名请求文件ca-csr\"><a href=\"#生成X-509证书签名请求文件ca-csr\" class=\"headerlink\" title=\"生成X.509证书签名请求文件ca.csr\"></a><font size=\"4em\">生成X.509证书签名请求文件ca.csr</font></h4><p>在生成ca.csr的过程中，会让输入一些组织信息等。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ openssl req -new -key ca.key -out ca.csr</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a> \n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enter pass phrase for ca.key:</div><div class=\"line\">You are about to be asked to enter information that will be incorporated</div><div class=\"line\">into your certificate request.</div><div class=\"line\">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class=\"line\">There are quite a few fields but you can leave some blank</div><div class=\"line\">For some fields there will be a default value,</div><div class=\"line\">If you enter &apos;.&apos;, the field will be left blank.</div><div class=\"line\">-----</div><div class=\"line\">Country Name (2 letter code) [AU]:CN</div><div class=\"line\">State or Province Name (full name) [Some-State]:GuangDong</div><div class=\"line\">Locality Name (eg, city) []:ShenZhen</div><div class=\"line\">Organization Name (eg, company) [Internet Widgits Pty Ltd]:IBoxPay</div><div class=\"line\">Organizational Unit Name (eg, section) []:IBoxPay</div><div class=\"line\">Common Name (e.g. server FQDN or YOUR name) []:</div><div class=\"line\">Email Address []:admin@iboxpay.com</div><div class=\"line\"></div><div class=\"line\">Please enter the following &apos;extra&apos; attributes</div><div class=\"line\">to be sent with your certificate request</div><div class=\"line\">A challenge password []:</div><div class=\"line\">An optional company name []:</div></pre></td></tr></table></figure></p>\n<h4 id=\"生成X-509格式的CA根证书ca-crt\"><a href=\"#生成X-509格式的CA根证书ca-crt\" class=\"headerlink\" title=\"生成X.509格式的CA根证书ca.crt\"></a><font size=\"4em\">生成X.509格式的CA根证书ca.crt</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ openssl x509 -req -days 365 -in ca.csr -out ca.crt -signkey ca.key</div></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Signature ok</div><div class=\"line\">subject=/C=CN/ST=GuangDong/L=ShenZhen/O=IBoxPay/OU=IBoxPay/emailAddress=admin@iboxpay.com</div><div class=\"line\">Getting Private key</div><div class=\"line\">Enter pass phrase for ca.key:</div></pre></td></tr></table></figure></p>\n<h3 id=\"生成服务端的证书\"><a href=\"#生成服务端的证书\" class=\"headerlink\" title=\"生成服务端的证书\"></a><font size=\"5em\">生成服务端的证书</font></h3><h4 id=\"生成服务端私钥文件-server-key\"><a href=\"#生成服务端私钥文件-server-key\" class=\"headerlink\" title=\"生成服务端私钥文件 server.key\"></a><font size=\"4em\">生成服务端私钥文件 server.key</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ openssl genrsa -des3 -out server.key 1024</div></pre></td></tr></table></figure>\n<h4 id=\"服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server-csr\"><a href=\"#服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server-csr\" class=\"headerlink\" title=\"服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server.csr\"></a><font size=\"4em\">服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server.csr</font></h4><p>这一步需要填写一个组织信息，不要跟根证书的组织的一样。另外Common Name填一个自己的域名（如果没有实际的域名也可以写，后面在/etc/hosts映射一个，我写的就是yinlijun.com），不要填localhost，android会报错。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl req -new -key server.key -out server.csr</div></pre></td></tr></table></figure></p>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enter pass phrase for server.key:</div><div class=\"line\">You are about to be asked to enter information that will be incorporated</div><div class=\"line\">into your certificate request.</div><div class=\"line\">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class=\"line\">There are quite a few fields but you can leave some blank</div><div class=\"line\">For some fields there will be a default value,</div><div class=\"line\">If you enter &apos;.&apos;, the field will be left blank.</div><div class=\"line\">-----</div><div class=\"line\">Country Name (2 letter code) [AU]:CN</div><div class=\"line\">State or Province Name (full name) [Some-State]:GuangDong</div><div class=\"line\">Locality Name (eg, city) []:ShenZhen</div><div class=\"line\">Organization Name (eg, company) [Internet Widgits Pty Ltd]:yinlijun</div><div class=\"line\">Organizational Unit Name (eg, section) []:yinlijun</div><div class=\"line\">Common Name (e.g. server FQDN or YOUR name) []:yinlijun.com</div><div class=\"line\">Email Address []:admin@yinlijun.com</div><div class=\"line\"></div><div class=\"line\">Please enter the following &apos;extra&apos; attributes</div><div class=\"line\">to be sent with your certificate request</div><div class=\"line\">A challenge password []:</div></pre></td></tr></table></figure></p>\n<h4 id=\"删除私钥的密码，这一步非常重要，一定要执行-否则会影响后面的步骤。\"><a href=\"#删除私钥的密码，这一步非常重要，一定要执行-否则会影响后面的步骤。\" class=\"headerlink\" title=\"删除私钥的密码，这一步非常重要，一定要执行,否则会影响后面的步骤。\"></a><font size=\"4em\">删除私钥的密码，这一步非常<strong>重要</strong>，一定要执行,否则会影响后面的步骤。</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cp server.key server.key.passphrase</div><div class=\"line\">$ openssl rsa -in server.key.passphrase -out server.key</div></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enter pass phrase for server.key.passphrase:</div><div class=\"line\">writing RSA key</div></pre></td></tr></table></figure></p>\n<h4 id=\"签发服务器证书server-crt：\"><a href=\"#签发服务器证书server-crt：\" class=\"headerlink\" title=\"签发服务器证书server.crt：\"></a><font size=\"4em\">签发服务器证书server.crt：</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt</div></pre></td></tr></table></figure>\n<p>输出如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Signature ok</div><div class=\"line\">subject=/C=CN/ST=GuangDong/L=ShenZhen/O=yinlijun/OU=yinlijun/CN=yinlijun.com/emailAddress=admin@yinlijun.com</div><div class=\"line\">Getting Private key</div></pre></td></tr></table></figure></p>\n<p>到现在为止，你目录下的文件应该有：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls -la</div><div class=\"line\">total 36</div><div class=\"line\">drwxr-xr-x  2 user user 4096 Sep  5 16:19 .</div><div class=\"line\">drwxr-xr-x 12 user user 4096 Sep  5 16:09 ..</div><div class=\"line\">-rw-r--r--  1 user user  757 Sep  5 16:12 ca.crt</div><div class=\"line\">-rw-r--r--  1 user user  603 Sep  5 16:10 ca.csr</div><div class=\"line\">-rw-r--r--  1 user user  963 Sep  5 16:09 ca.key</div><div class=\"line\">-rw-r--r--  1 user user  757 Sep  5 16:19 server.crt</div><div class=\"line\">-rw-r--r--  1 user user  603 Sep  5 16:16 server.csr</div><div class=\"line\">-rw-r--r--  1 user user  887 Sep  5 16:18 server.key</div><div class=\"line\">-rw-r--r--  1 user user  951 Sep  5 16:17 server.key.passphrase</div></pre></td></tr></table></figure></p>\n<h4 id=\"生成之后察看服务器证书信息。\"><a href=\"#生成之后察看服务器证书信息。\" class=\"headerlink\" title=\"生成之后察看服务器证书信息。\"></a>生成之后察看服务器证书信息。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl x509 -in server.crt -text -noout</div></pre></td></tr></table></figure>\n<h4 id=\"生成服务器的pfx文件，这个文件node服务器要用到。\"><a href=\"#生成服务器的pfx文件，这个文件node服务器要用到。\" class=\"headerlink\" title=\"生成服务器的pfx文件，这个文件node服务器要用到。\"></a>生成服务器的pfx文件，这个文件node服务器要用到。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl pkcs12 -export -in server.crt -inkey server.key -certfile ca.crt -out server.pfx</div></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enter Export Password:</div><div class=\"line\">Verifying - Enter Export Password:</div></pre></td></tr></table></figure></p>\n<h4 id=\"生成服务端的p12文件。，这个是为了生成服务端bks文件用的\"><a href=\"#生成服务端的p12文件。，这个是为了生成服务端bks文件用的\" class=\"headerlink\" title=\"生成服务端的p12文件。，这个是为了生成服务端bks文件用的\"></a>生成服务端的p12文件。，这个是为了生成服务端bks文件用的</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl pkcs12 -export -clcerts -in server.crt -inkey server.key -out server.p12</div></pre></td></tr></table></figure>\n<h3 id=\"下载一个bcprov-jdk16-141-jar，也是为了生成服务端bks文件要用到的。\"><a href=\"#下载一个bcprov-jdk16-141-jar，也是为了生成服务端bks文件要用到的。\" class=\"headerlink\" title=\"下载一个bcprov-jdk16-141.jar，也是为了生成服务端bks文件要用到的。\"></a>下载一个bcprov-jdk16-141.jar，也是为了生成服务端bks文件要用到的。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">下载地址：[http://www.java2s.com/Code/JarDownload/bcprov/bcprov-jdk16-141.jar.zip](http://www.java2s.com/Code/JarDownload/bcprov/bcprov-jdk16-141.jar.zip)</div></pre></td></tr></table></figure>\n<h3 id=\"生成服务端的bks文件，这个android程序要用到\"><a href=\"#生成服务端的bks文件，这个android程序要用到\" class=\"headerlink\" title=\"生成服务端的bks文件，这个android程序要用到\"></a>生成服务端的bks文件，这个android程序要用到</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">keytool -importkeystore -srckeystore server.p12 -srcstoretype pkcs12 -destkeystore server.bks -deststoretype bks -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath bcprov-jdk16-141.jar</div></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">输入目标密钥库口令:  </div><div class=\"line\">再次输入新密码: </div><div class=\"line\">输入源密钥库口令:  </div><div class=\"line\">已成功导入别名 1 项。</div><div class=\"line\">已完成导入命令: 1 项成功导入，0 项失败或取消</div></pre></td></tr></table></figure></p>\n<p>因为要进行双向验证，还需要生成客户端证书。</p>\n<h4 id=\"生成客户端密钥\"><a href=\"#生成客户端密钥\" class=\"headerlink\" title=\"生成客户端密钥\"></a>生成客户端密钥</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl genrsa -des3 -out client.key 1024</div></pre></td></tr></table></figure>\n<h4 id=\"生成客户端证书请求签名文件\"><a href=\"#生成客户端证书请求签名文件\" class=\"headerlink\" title=\"生成客户端证书请求签名文件\"></a>生成客户端证书请求签名文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl req -new -out client.csr -key client.key</div></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enter pass phrase for client.key:</div><div class=\"line\">You are about to be asked to enter information that will be incorporated</div><div class=\"line\">into your certificate request.</div><div class=\"line\">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class=\"line\">There are quite a few fields but you can leave some blank</div><div class=\"line\">For some fields there will be a default value,</div><div class=\"line\">If you enter &apos;.&apos;, the field will be left blank.</div><div class=\"line\">-----</div><div class=\"line\">Country Name (2 letter code) [AU]:CN</div><div class=\"line\">State or Province Name (full name) [Some-State]:GuangDong </div><div class=\"line\">Locality Name (eg, city) []:ShenZhen</div><div class=\"line\">Organization Name (eg, company) [Internet Widgits Pty Ltd]:ruochen</div><div class=\"line\">Organizational Unit Name (eg, section) []:ruochen</div><div class=\"line\">Common Name (e.g. server FQDN or YOUR name) []:</div><div class=\"line\">Email Address []:admin@ruochen.com</div><div class=\"line\"></div><div class=\"line\">Please enter the following &apos;extra&apos; attributes</div><div class=\"line\">to be sent with your certificate request</div><div class=\"line\">A challenge password []:</div><div class=\"line\">An optional company name []:</div></pre></td></tr></table></figure></p>\n<h4 id=\"创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。\"><a href=\"#创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。\" class=\"headerlink\" title=\"创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。\"></a>创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl x509 -req -in client.csr -out client.cert -signkey client.key -CA ca.crt -CAkey ca.key -CAcreateserial -days 3650</div></pre></td></tr></table></figure>\n<p>输入如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Signature ok</div><div class=\"line\">subject=/C=CN/ST=GuangDong/L=ShenZhen/O=ruochen/OU=ruochen/emailAddress=admin@ruochen.com</div><div class=\"line\">Getting Private key</div><div class=\"line\">Enter pass phrase for client.key:</div><div class=\"line\">Getting CA Private Key</div><div class=\"line\">Enter pass phrase for ca.key:</div><div class=\"line\">yinlijun@yinlijun:~/personal_github/echo-https-server/keys$ ls</div><div class=\"line\">ca.crt  ca.csr  ca.key  ca.srl  client.cert  client.csr  client.key  server.crt  server.csr  server.key  server.key.passphrase  server.pfx</div><div class=\"line\">yinlijun@yinlijun:~/personal_github/echo-https-server/keys$ openssl pkcs12 -export -clcerts -in client.cert -inkey client.key -out client.p12</div><div class=\"line\">Enter pass phrase for client.key:</div><div class=\"line\">Enter Export Password:</div><div class=\"line\">Verifying - Enter Export Password:</div></pre></td></tr></table></figure></p>\n<h4 id=\"生成浏览器支持的p12文件\"><a href=\"#生成浏览器支持的p12文件\" class=\"headerlink\" title=\"生成浏览器支持的p12文件\"></a>生成浏览器支持的p12文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl pkcs12 -export -clcerts -in client.cert -inkey client.key -out client.p12</div></pre></td></tr></table></figure>\n<h4 id=\"将客户端证书文件client-crt和客户端证书密钥文件client-key合并成客户端证书安装包client-pfx\"><a href=\"#将客户端证书文件client-crt和客户端证书密钥文件client-key合并成客户端证书安装包client-pfx\" class=\"headerlink\" title=\"将客户端证书文件client.crt和客户端证书密钥文件client.key合并成客户端证书安装包client.pfx\"></a>将客户端证书文件client.crt和客户端证书密钥文件client.key合并成客户端证书安装包client.pfx</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl pkcs12 -export -in client.crt -inkey client.key -out client.pfx</div></pre></td></tr></table></figure>\n<p>以上的文件我只用到了一部分，应该有替代关系，具体我也搞不清楚:)。 不同的实现方式有用到不同的文件。<br>我的android客户端用到了</p>\n<ul>\n<li>server.bks</li>\n<li>client.p12</li>\n</ul>\n<p>看了网上的一些例子，好像server.bks可以用server.crt替代。</p>\n<p>node用到了</p>\n<ul>\n<li>server.pfx</li>\n</ul>\n<p>察看node的文档，server.pfx可以用server.crt和server.key替代。</p>\n<h2 id=\"服务端（nodejs）的代码\"><a href=\"#服务端（nodejs）的代码\" class=\"headerlink\" title=\"服务端（nodejs）的代码\"></a>服务端（nodejs）的代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> https =<span class=\"built_in\">require</span>(<span class=\"string\">'https'</span>), fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">    key: fs.readFileSync(<span class=\"string\">'./keys/server.key'</span>),</div><div class=\"line\">    cert: fs.readFileSync(<span class=\"string\">'./keys/server.crt'</span>),</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"keyword\">var</span> server = https.createServer(options, app);</div><div class=\"line\">server.listen(<span class=\"number\">443</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Https server listening on port '</span> + <span class=\"number\">443</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"android应用自有证书的验证方式\"><a href=\"#android应用自有证书的验证方式\" class=\"headerlink\" title=\"android应用自有证书的验证方式\"></a>android应用自有证书的验证方式</h2><p>将服务端证书拷贝到app资源目录下，一般是<project_dir>/assets/server.crt</project_dir></p>\n<h3 id=\"方法一：直接根据server-crt初始化TrustManagerFactory\"><a href=\"#方法一：直接根据server-crt初始化TrustManagerFactory\" class=\"headerlink\" title=\"方法一：直接根据server.crt初始化TrustManagerFactory\"></a>方法一：直接根据server.crt初始化TrustManagerFactory</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">    CertificateFactory cf = CertificateFactory.getInstance(<span class=\"string\">\"X.509\"</span>);</div><div class=\"line\">    InputStream caInput = <span class=\"keyword\">new</span> BufferedInputStream(getAssets().open(<span class=\"string\">\"server.crt\"</span>));</div><div class=\"line\">    <span class=\"keyword\">final</span> Certificate ca;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        ca = cf.generateCertificate(caInput);</div><div class=\"line\">        Log.i(TAG, <span class=\"string\">\"ca=\"</span> + ((X509Certificate) ca).getSubjectDN());</div><div class=\"line\">        Log.i(TAG, <span class=\"string\">\"key=\"</span> + ((X509Certificate) ca).getPublicKey());</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        caInput.close();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    String keyStoreType = KeyStore.getDefaultType();</div><div class=\"line\">    Log.d(TAG, <span class=\"string\">\"keystore type:\"</span> + keyStoreType);</div><div class=\"line\">    KeyStore keyStore = KeyStore.getInstance(keyStoreType);</div><div class=\"line\">    keyStore.load(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">    keyStore.setCertificateEntry(<span class=\"string\">\"cert\"</span>, ca);</div><div class=\"line\"></div><div class=\"line\">    String tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();</div><div class=\"line\">    Log.d(TAG, <span class=\"string\">\"tmfAlgorithm:\"</span> + tmfAlgorithm);</div><div class=\"line\">    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(tmfAlgorithm);</div><div class=\"line\">    trustManagerFactory.init(keyStore);</div><div class=\"line\"></div><div class=\"line\">    mSSLContext = SSLContext.getInstance(<span class=\"string\">\"TLS\"</span>);</div><div class=\"line\">    mSSLContext.init(<span class=\"keyword\">null</span>, trustManagerFactory.getTrustManagers(), <span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">    URL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"https://yinlijun.com\"</span>);</div><div class=\"line\">    HttpsURLConnection urlConnection =</div><div class=\"line\">            (HttpsURLConnection)url.openConnection();</div><div class=\"line\">    urlConnection.setSSLSocketFactory(mSSLContext.getSocketFactory());</div><div class=\"line\">    InputStream in = urlConnection.getInputStream();</div><div class=\"line\">    copyInputStreamToOutputStream(in, System.out);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (CertificateException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (KeyManagementException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (KeyStoreException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>copyInputStreamToOutputStream方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">copyInputStreamToOutputStream</span><span class=\"params\">(InputStream in, PrintStream out)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</div><div class=\"line\">    <span class=\"keyword\">int</span> c = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> ((c = in.read(buffer)) != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">        out.write(buffer, <span class=\"number\">0</span>, c);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    CertificateFactory cf = CertificateFactory.getInstance(<span class=\"string\">\"X.509\"</span>);</div><div class=\"line\">    InputStream caInput = <span class=\"keyword\">new</span> BufferedInputStream(getAssets().open(<span class=\"string\">\"server.crt\"</span>));</div><div class=\"line\">    <span class=\"keyword\">final</span> Certificate ca;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        ca = cf.generateCertificate(caInput);</div><div class=\"line\">        Log.i(<span class=\"string\">\"Longer\"</span>, <span class=\"string\">\"ca=\"</span> + ((X509Certificate) ca).getSubjectDN());</div><div class=\"line\">        Log.i(<span class=\"string\">\"Longer\"</span>, <span class=\"string\">\"key=\"</span> + ((X509Certificate) ca).getPublicKey());</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        caInput.close();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Create an SSLContext that uses our TrustManager</span></div><div class=\"line\">    SSLContext context = SSLContext.getInstance(<span class=\"string\">\"TLSv1\"</span>,<span class=\"string\">\"AndroidOpenSSL\"</span>);</div><div class=\"line\">    context.init(<span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> TrustManager[]&#123;</div><div class=\"line\">            <span class=\"keyword\">new</span> X509TrustManager() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkClientTrusted</span><span class=\"params\">(X509Certificate[] chain,</span></span></div><div class=\"line\">                                                String authType)</div><div class=\"line\">                        <span class=\"keyword\">throws</span> CertificateException &#123;</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkServerTrusted</span><span class=\"params\">(X509Certificate[] chain,</span></span></div><div class=\"line\">                                                String authType)</div><div class=\"line\">                        <span class=\"keyword\">throws</span> CertificateException &#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (X509Certificate cert : chain) &#123;</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"comment\">// Make sure that it hasn't expired.</span></div><div class=\"line\">                        cert.checkValidity();</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"comment\">// Verify the certificate's public key chain.</span></div><div class=\"line\">                        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                            cert.verify(((X509Certificate) ca).getPublicKey());</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (InvalidKeyException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (NoSuchProviderException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (SignatureException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"keyword\">public</span> X509Certificate[] getAcceptedIssuers() &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> X509Certificate[<span class=\"number\">0</span>];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">    &#125;, <span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">    URL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"https://yinlijun.com/\"</span>);</div><div class=\"line\">    HttpsURLConnection urlConnection =</div><div class=\"line\">            (HttpsURLConnection)url.openConnection();</div><div class=\"line\">    urlConnection.setSSLSocketFactory(context.getSocketFactory());</div><div class=\"line\">    InputStream in = urlConnection.getInputStream();</div><div class=\"line\">    copyInputStreamToOutputStream(in, System.out);</div></pre></td></tr></table></figure>\n<h2 id=\"双向认证\"><a href=\"#双向认证\" class=\"headerlink\" title=\"双向认证\"></a>双向认证</h2><p>单向验证只能验证服务器，如果服务器也想对客户端进行验证，即所谓（双向验证），需要在连接是一起发送客户端证书。</p>\n<h3 id=\"双向认证，服务器代码\"><a href=\"#双向认证，服务器代码\" class=\"headerlink\" title=\"双向认证，服务器代码\"></a>双向认证，服务器代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> tls = <span class=\"built_in\">require</span>(<span class=\"string\">'tls'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> options = &#123;</div><div class=\"line\">  pfx: fs.readFileSync(<span class=\"string\">'./server.pfx'</span>),</div><div class=\"line\">  passphrase: <span class=\"string\">\"123456\"</span>,</div><div class=\"line\">  <span class=\"comment\">// This is necessary only if using the client certificate authentication.</span></div><div class=\"line\">  requestCert: <span class=\"literal\">true</span>,</div><div class=\"line\">  rejectUnauthorized: <span class=\"literal\">true</span> <span class=\"comment\">//如果接受也非认证链接，可以删除此行。</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//需要双向认证才需要配置requestCert为true。</span></div><div class=\"line\"><span class=\"keyword\">const</span> server = tls.createServer(options, (socket) =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'server connected'</span>,</div><div class=\"line\">              socket.authorized ? <span class=\"string\">'authorized'</span> : <span class=\"string\">'unauthorized'</span>);</div><div class=\"line\">  socket.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\">  socket.on(<span class=\"string\">'data'</span>, (data) =&gt; &#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">      socket.write(data);</div><div class=\"line\">  &#125;);</div><div class=\"line\">  socket.on(<span class=\"string\">'end'</span>, (socket) =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"socket closed\"</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.listen(<span class=\"number\">8000</span>, () =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'server bound'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"双向认证，android的代码，实现方式一\"><a href=\"#双向认证，android的代码，实现方式一\" class=\"headerlink\" title=\"双向认证，android的代码，实现方式一\"></a>双向认证，android的代码，实现方式一</h3><p>server.pfx和client.p12放到<project_dir>/assets/目录下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    KeyStore trustStore = KeyStore.getInstance(<span class=\"string\">\"bks\"</span>);</div><div class=\"line\">    InputStream tsIn = getResources().getAssets().open(<span class=\"string\">\"server.bks\"</span>);</div><div class=\"line\"></div><div class=\"line\">    KeyStore keyStore = KeyStore.getInstance(<span class=\"string\">\"PKCS12\"</span>);</div><div class=\"line\">    InputStream ksIn = getResources().getAssets().open(<span class=\"string\">\"client.p12\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        keyStore.load(ksIn, <span class=\"string\">\"123456\"</span>.toCharArray());</div><div class=\"line\">        trustStore.load(tsIn, <span class=\"string\">\"123456\"</span>.toCharArray());</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ksIn.close();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ignore) &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            tsIn.close();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ignore) &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(<span class=\"string\">\"X509\"</span>);</div><div class=\"line\">    keyManagerFactory.init(keyStore, <span class=\"string\">\"123456\"</span>.toCharArray());</div><div class=\"line\">    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());</div><div class=\"line\">    trustManagerFactory.init(trustStore);</div><div class=\"line\">    mSSLContext = SSLContext.getInstance(<span class=\"string\">\"TLS\"</span>);</div><div class=\"line\">    mSSLContext.init(<span class=\"keyword\">null</span>, trustManagerFactory.getTrustManagers(), <span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">    mSSLSocket = (SSLSocket) mSSLContext.getSocketFactory().createSocket(<span class=\"string\">\"yinlijun.com\"</span>, <span class=\"number\">8000</span>);</div><div class=\"line\">    mSSLSocket.startHandshake();</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (KeyManagementException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (KeyStoreException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (UnrecoverableKeyException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></project_dir></p>\n<h3 id=\"双向认证，android的代码，实现方式2，用server-crt替代server-bks\"><a href=\"#双向认证，android的代码，实现方式2，用server-crt替代server-bks\" class=\"headerlink\" title=\"双向认证，android的代码，实现方式2，用server.crt替代server.bks\"></a>双向认证，android的代码，实现方式2，用server.crt替代server.bks</h3><p>server.crt和client.p12放到<project_dir>/assets/目录下</project_dir></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    CertificateFactory cf = CertificateFactory.getInstance(<span class=\"string\">\"X.509\"</span>);</div><div class=\"line\">    InputStream caInput = <span class=\"keyword\">new</span> BufferedInputStream(getAssets().open(<span class=\"string\">\"server.crt\"</span>));</div><div class=\"line\">    <span class=\"keyword\">final</span> Certificate ca;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        ca = cf.generateCertificate(caInput);</div><div class=\"line\">        Log.i(<span class=\"string\">\"Longer\"</span>, <span class=\"string\">\"ca=\"</span> + ((X509Certificate) ca).getSubjectDN());</div><div class=\"line\">        Log.i(<span class=\"string\">\"Longer\"</span>, <span class=\"string\">\"key=\"</span> + ((X509Certificate) ca).getPublicKey());</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        caInput.close();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    KeyStore keyStore = KeyStore.getInstance(<span class=\"string\">\"PKCS12\"</span>);</div><div class=\"line\">    InputStream ksIn = getResources().getAssets().open(<span class=\"string\">\"client.p12\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        keyStore.load(ksIn, <span class=\"string\">\"123456\"</span>.toCharArray());</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ksIn.close();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ignore) &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(<span class=\"string\">\"X509\"</span>);</div><div class=\"line\">    keyManagerFactory.init(keyStore, <span class=\"string\">\"123456\"</span>.toCharArray());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Create an SSLContext that uses our TrustManager</span></div><div class=\"line\">    SSLContext context = SSLContext.getInstance(<span class=\"string\">\"TLSv1\"</span>,<span class=\"string\">\"AndroidOpenSSL\"</span>);</div><div class=\"line\">    context.init(keyManagerFactory.getKeyManagers(), <span class=\"keyword\">new</span> TrustManager[]&#123;</div><div class=\"line\">            <span class=\"keyword\">new</span> X509TrustManager() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkClientTrusted</span><span class=\"params\">(X509Certificate[] chain,</span></span></div><div class=\"line\">                                                String authType)</div><div class=\"line\">                        <span class=\"keyword\">throws</span> CertificateException &#123;</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkServerTrusted</span><span class=\"params\">(X509Certificate[] chain,</span></span></div><div class=\"line\">                                                String authType)</div><div class=\"line\">                        <span class=\"keyword\">throws</span> CertificateException &#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (X509Certificate cert : chain) &#123;</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"comment\">// Make sure that it hasn't expired.</span></div><div class=\"line\">                        cert.checkValidity();</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"comment\">// Verify the certificate's public key chain.</span></div><div class=\"line\">                        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                            cert.verify(((X509Certificate) ca).getPublicKey());</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (InvalidKeyException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (NoSuchProviderException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (SignatureException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"keyword\">public</span> X509Certificate[] getAcceptedIssuers() &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> X509Certificate[<span class=\"number\">0</span>];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">    &#125;, <span class=\"keyword\">null</span>);</div><div class=\"line\">    <span class=\"comment\">//...</span></div></pre></td></tr></table></figure>\n<p>项目地址：</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><a href=\"https://matoski.com/article/node-express-generate-ssl/\" target=\"_blank\" rel=\"external\">How to generate self-signed certificate for usage in Express4 or Node.js HTTP</a></li>\n<li><a href=\"http://blog.csdn.net/fyang2007/article/details/6180361\" target=\"_blank\" rel=\"external\">SSL证书生成方法</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/22816331\" target=\"_blank\" rel=\"external\">Android安全开发之安全使用HTTPS</a></li>\n<li><a href=\"https://developer.android.com/training/articles/security-ssl.html#nogotofail\" target=\"_blank\" rel=\"external\">通过 HTTPS 和 SSL 确保安全</a> (要翻墙)</li>\n<li><a href=\"https://nodejs.org/api/tls.html\" target=\"_blank\" rel=\"external\">https://nodejs.org/api/tls.html</a></li>\n<li><a href=\"https://gist.github.com/Frank-Zhu/41e21a00df26d63cd38d\" target=\"_blank\" rel=\"external\">https://gist.github.com/Frank-Zhu/41e21a00df26d63cd38d</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>本文介绍一个简单echo服务器的实现，服务端用nodejs，客户端用android。</p>\n<h2 id=\"用openssl一系列证书\"><a href=\"#用openssl一系列证书\" class=\"headerlink\" title=\"用openssl一系列证书\"></a><font size=\"6em\">用openssl一系列证书</font></h2><h3 id=\"生成自己的CA根证书\"><a href=\"#生成自己的CA根证书\" class=\"headerlink\" title=\"生成自己的CA根证书\"></a><font size=\"5em\">生成自己的CA根证书</font></h3><h4 id=\"生成跟证书私钥ca-key\"><a href=\"#生成跟证书私钥ca-key\" class=\"headerlink\" title=\"生成跟证书私钥ca.key\"></a><font size=\"4em\">生成跟证书私钥ca.key</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ openssl genrsa -des3 -out ca.key 1024</div></pre></td></tr></table></figure>\n<h4 id=\"生成X-509证书签名请求文件ca-csr\"><a href=\"#生成X-509证书签名请求文件ca-csr\" class=\"headerlink\" title=\"生成X.509证书签名请求文件ca.csr\"></a><font size=\"4em\">生成X.509证书签名请求文件ca.csr</font></h4><p>在生成ca.csr的过程中，会让输入一些组织信息等。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ openssl req -new -key ca.key -out ca.csr</div></pre></td></tr></table></figure></p>","more":"<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enter pass phrase for ca.key:</div><div class=\"line\">You are about to be asked to enter information that will be incorporated</div><div class=\"line\">into your certificate request.</div><div class=\"line\">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class=\"line\">There are quite a few fields but you can leave some blank</div><div class=\"line\">For some fields there will be a default value,</div><div class=\"line\">If you enter &apos;.&apos;, the field will be left blank.</div><div class=\"line\">-----</div><div class=\"line\">Country Name (2 letter code) [AU]:CN</div><div class=\"line\">State or Province Name (full name) [Some-State]:GuangDong</div><div class=\"line\">Locality Name (eg, city) []:ShenZhen</div><div class=\"line\">Organization Name (eg, company) [Internet Widgits Pty Ltd]:IBoxPay</div><div class=\"line\">Organizational Unit Name (eg, section) []:IBoxPay</div><div class=\"line\">Common Name (e.g. server FQDN or YOUR name) []:</div><div class=\"line\">Email Address []:admin@iboxpay.com</div><div class=\"line\"></div><div class=\"line\">Please enter the following &apos;extra&apos; attributes</div><div class=\"line\">to be sent with your certificate request</div><div class=\"line\">A challenge password []:</div><div class=\"line\">An optional company name []:</div></pre></td></tr></table></figure></p>\n<h4 id=\"生成X-509格式的CA根证书ca-crt\"><a href=\"#生成X-509格式的CA根证书ca-crt\" class=\"headerlink\" title=\"生成X.509格式的CA根证书ca.crt\"></a><font size=\"4em\">生成X.509格式的CA根证书ca.crt</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ openssl x509 -req -days 365 -in ca.csr -out ca.crt -signkey ca.key</div></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Signature ok</div><div class=\"line\">subject=/C=CN/ST=GuangDong/L=ShenZhen/O=IBoxPay/OU=IBoxPay/emailAddress=admin@iboxpay.com</div><div class=\"line\">Getting Private key</div><div class=\"line\">Enter pass phrase for ca.key:</div></pre></td></tr></table></figure></p>\n<h3 id=\"生成服务端的证书\"><a href=\"#生成服务端的证书\" class=\"headerlink\" title=\"生成服务端的证书\"></a><font size=\"5em\">生成服务端的证书</font></h3><h4 id=\"生成服务端私钥文件-server-key\"><a href=\"#生成服务端私钥文件-server-key\" class=\"headerlink\" title=\"生成服务端私钥文件 server.key\"></a><font size=\"4em\">生成服务端私钥文件 server.key</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ openssl genrsa -des3 -out server.key 1024</div></pre></td></tr></table></figure>\n<h4 id=\"服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server-csr\"><a href=\"#服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server-csr\" class=\"headerlink\" title=\"服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server.csr\"></a><font size=\"4em\">服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server.csr</font></h4><p>这一步需要填写一个组织信息，不要跟根证书的组织的一样。另外Common Name填一个自己的域名（如果没有实际的域名也可以写，后面在/etc/hosts映射一个，我写的就是yinlijun.com），不要填localhost，android会报错。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl req -new -key server.key -out server.csr</div></pre></td></tr></table></figure></p>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enter pass phrase for server.key:</div><div class=\"line\">You are about to be asked to enter information that will be incorporated</div><div class=\"line\">into your certificate request.</div><div class=\"line\">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class=\"line\">There are quite a few fields but you can leave some blank</div><div class=\"line\">For some fields there will be a default value,</div><div class=\"line\">If you enter &apos;.&apos;, the field will be left blank.</div><div class=\"line\">-----</div><div class=\"line\">Country Name (2 letter code) [AU]:CN</div><div class=\"line\">State or Province Name (full name) [Some-State]:GuangDong</div><div class=\"line\">Locality Name (eg, city) []:ShenZhen</div><div class=\"line\">Organization Name (eg, company) [Internet Widgits Pty Ltd]:yinlijun</div><div class=\"line\">Organizational Unit Name (eg, section) []:yinlijun</div><div class=\"line\">Common Name (e.g. server FQDN or YOUR name) []:yinlijun.com</div><div class=\"line\">Email Address []:admin@yinlijun.com</div><div class=\"line\"></div><div class=\"line\">Please enter the following &apos;extra&apos; attributes</div><div class=\"line\">to be sent with your certificate request</div><div class=\"line\">A challenge password []:</div></pre></td></tr></table></figure></p>\n<h4 id=\"删除私钥的密码，这一步非常重要，一定要执行-否则会影响后面的步骤。\"><a href=\"#删除私钥的密码，这一步非常重要，一定要执行-否则会影响后面的步骤。\" class=\"headerlink\" title=\"删除私钥的密码，这一步非常重要，一定要执行,否则会影响后面的步骤。\"></a><font size=\"4em\">删除私钥的密码，这一步非常<strong>重要</strong>，一定要执行,否则会影响后面的步骤。</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cp server.key server.key.passphrase</div><div class=\"line\">$ openssl rsa -in server.key.passphrase -out server.key</div></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enter pass phrase for server.key.passphrase:</div><div class=\"line\">writing RSA key</div></pre></td></tr></table></figure></p>\n<h4 id=\"签发服务器证书server-crt：\"><a href=\"#签发服务器证书server-crt：\" class=\"headerlink\" title=\"签发服务器证书server.crt：\"></a><font size=\"4em\">签发服务器证书server.crt：</font></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt</div></pre></td></tr></table></figure>\n<p>输出如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Signature ok</div><div class=\"line\">subject=/C=CN/ST=GuangDong/L=ShenZhen/O=yinlijun/OU=yinlijun/CN=yinlijun.com/emailAddress=admin@yinlijun.com</div><div class=\"line\">Getting Private key</div></pre></td></tr></table></figure></p>\n<p>到现在为止，你目录下的文件应该有：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls -la</div><div class=\"line\">total 36</div><div class=\"line\">drwxr-xr-x  2 user user 4096 Sep  5 16:19 .</div><div class=\"line\">drwxr-xr-x 12 user user 4096 Sep  5 16:09 ..</div><div class=\"line\">-rw-r--r--  1 user user  757 Sep  5 16:12 ca.crt</div><div class=\"line\">-rw-r--r--  1 user user  603 Sep  5 16:10 ca.csr</div><div class=\"line\">-rw-r--r--  1 user user  963 Sep  5 16:09 ca.key</div><div class=\"line\">-rw-r--r--  1 user user  757 Sep  5 16:19 server.crt</div><div class=\"line\">-rw-r--r--  1 user user  603 Sep  5 16:16 server.csr</div><div class=\"line\">-rw-r--r--  1 user user  887 Sep  5 16:18 server.key</div><div class=\"line\">-rw-r--r--  1 user user  951 Sep  5 16:17 server.key.passphrase</div></pre></td></tr></table></figure></p>\n<h4 id=\"生成之后察看服务器证书信息。\"><a href=\"#生成之后察看服务器证书信息。\" class=\"headerlink\" title=\"生成之后察看服务器证书信息。\"></a>生成之后察看服务器证书信息。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl x509 -in server.crt -text -noout</div></pre></td></tr></table></figure>\n<h4 id=\"生成服务器的pfx文件，这个文件node服务器要用到。\"><a href=\"#生成服务器的pfx文件，这个文件node服务器要用到。\" class=\"headerlink\" title=\"生成服务器的pfx文件，这个文件node服务器要用到。\"></a>生成服务器的pfx文件，这个文件node服务器要用到。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl pkcs12 -export -in server.crt -inkey server.key -certfile ca.crt -out server.pfx</div></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enter Export Password:</div><div class=\"line\">Verifying - Enter Export Password:</div></pre></td></tr></table></figure></p>\n<h4 id=\"生成服务端的p12文件。，这个是为了生成服务端bks文件用的\"><a href=\"#生成服务端的p12文件。，这个是为了生成服务端bks文件用的\" class=\"headerlink\" title=\"生成服务端的p12文件。，这个是为了生成服务端bks文件用的\"></a>生成服务端的p12文件。，这个是为了生成服务端bks文件用的</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl pkcs12 -export -clcerts -in server.crt -inkey server.key -out server.p12</div></pre></td></tr></table></figure>\n<h3 id=\"下载一个bcprov-jdk16-141-jar，也是为了生成服务端bks文件要用到的。\"><a href=\"#下载一个bcprov-jdk16-141-jar，也是为了生成服务端bks文件要用到的。\" class=\"headerlink\" title=\"下载一个bcprov-jdk16-141.jar，也是为了生成服务端bks文件要用到的。\"></a>下载一个bcprov-jdk16-141.jar，也是为了生成服务端bks文件要用到的。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">下载地址：[http://www.java2s.com/Code/JarDownload/bcprov/bcprov-jdk16-141.jar.zip](http://www.java2s.com/Code/JarDownload/bcprov/bcprov-jdk16-141.jar.zip)</div></pre></td></tr></table></figure>\n<h3 id=\"生成服务端的bks文件，这个android程序要用到\"><a href=\"#生成服务端的bks文件，这个android程序要用到\" class=\"headerlink\" title=\"生成服务端的bks文件，这个android程序要用到\"></a>生成服务端的bks文件，这个android程序要用到</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">keytool -importkeystore -srckeystore server.p12 -srcstoretype pkcs12 -destkeystore server.bks -deststoretype bks -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath bcprov-jdk16-141.jar</div></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">输入目标密钥库口令:  </div><div class=\"line\">再次输入新密码: </div><div class=\"line\">输入源密钥库口令:  </div><div class=\"line\">已成功导入别名 1 项。</div><div class=\"line\">已完成导入命令: 1 项成功导入，0 项失败或取消</div></pre></td></tr></table></figure></p>\n<p>因为要进行双向验证，还需要生成客户端证书。</p>\n<h4 id=\"生成客户端密钥\"><a href=\"#生成客户端密钥\" class=\"headerlink\" title=\"生成客户端密钥\"></a>生成客户端密钥</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl genrsa -des3 -out client.key 1024</div></pre></td></tr></table></figure>\n<h4 id=\"生成客户端证书请求签名文件\"><a href=\"#生成客户端证书请求签名文件\" class=\"headerlink\" title=\"生成客户端证书请求签名文件\"></a>生成客户端证书请求签名文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl req -new -out client.csr -key client.key</div></pre></td></tr></table></figure>\n<p>输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">Enter pass phrase for client.key:</div><div class=\"line\">You are about to be asked to enter information that will be incorporated</div><div class=\"line\">into your certificate request.</div><div class=\"line\">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class=\"line\">There are quite a few fields but you can leave some blank</div><div class=\"line\">For some fields there will be a default value,</div><div class=\"line\">If you enter &apos;.&apos;, the field will be left blank.</div><div class=\"line\">-----</div><div class=\"line\">Country Name (2 letter code) [AU]:CN</div><div class=\"line\">State or Province Name (full name) [Some-State]:GuangDong </div><div class=\"line\">Locality Name (eg, city) []:ShenZhen</div><div class=\"line\">Organization Name (eg, company) [Internet Widgits Pty Ltd]:ruochen</div><div class=\"line\">Organizational Unit Name (eg, section) []:ruochen</div><div class=\"line\">Common Name (e.g. server FQDN or YOUR name) []:</div><div class=\"line\">Email Address []:admin@ruochen.com</div><div class=\"line\"></div><div class=\"line\">Please enter the following &apos;extra&apos; attributes</div><div class=\"line\">to be sent with your certificate request</div><div class=\"line\">A challenge password []:</div><div class=\"line\">An optional company name []:</div></pre></td></tr></table></figure></p>\n<h4 id=\"创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。\"><a href=\"#创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。\" class=\"headerlink\" title=\"创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。\"></a>创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl x509 -req -in client.csr -out client.cert -signkey client.key -CA ca.crt -CAkey ca.key -CAcreateserial -days 3650</div></pre></td></tr></table></figure>\n<p>输入如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Signature ok</div><div class=\"line\">subject=/C=CN/ST=GuangDong/L=ShenZhen/O=ruochen/OU=ruochen/emailAddress=admin@ruochen.com</div><div class=\"line\">Getting Private key</div><div class=\"line\">Enter pass phrase for client.key:</div><div class=\"line\">Getting CA Private Key</div><div class=\"line\">Enter pass phrase for ca.key:</div><div class=\"line\">yinlijun@yinlijun:~/personal_github/echo-https-server/keys$ ls</div><div class=\"line\">ca.crt  ca.csr  ca.key  ca.srl  client.cert  client.csr  client.key  server.crt  server.csr  server.key  server.key.passphrase  server.pfx</div><div class=\"line\">yinlijun@yinlijun:~/personal_github/echo-https-server/keys$ openssl pkcs12 -export -clcerts -in client.cert -inkey client.key -out client.p12</div><div class=\"line\">Enter pass phrase for client.key:</div><div class=\"line\">Enter Export Password:</div><div class=\"line\">Verifying - Enter Export Password:</div></pre></td></tr></table></figure></p>\n<h4 id=\"生成浏览器支持的p12文件\"><a href=\"#生成浏览器支持的p12文件\" class=\"headerlink\" title=\"生成浏览器支持的p12文件\"></a>生成浏览器支持的p12文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl pkcs12 -export -clcerts -in client.cert -inkey client.key -out client.p12</div></pre></td></tr></table></figure>\n<h4 id=\"将客户端证书文件client-crt和客户端证书密钥文件client-key合并成客户端证书安装包client-pfx\"><a href=\"#将客户端证书文件client-crt和客户端证书密钥文件client-key合并成客户端证书安装包client-pfx\" class=\"headerlink\" title=\"将客户端证书文件client.crt和客户端证书密钥文件client.key合并成客户端证书安装包client.pfx\"></a>将客户端证书文件client.crt和客户端证书密钥文件client.key合并成客户端证书安装包client.pfx</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl pkcs12 -export -in client.crt -inkey client.key -out client.pfx</div></pre></td></tr></table></figure>\n<p>以上的文件我只用到了一部分，应该有替代关系，具体我也搞不清楚:)。 不同的实现方式有用到不同的文件。<br>我的android客户端用到了</p>\n<ul>\n<li>server.bks</li>\n<li>client.p12</li>\n</ul>\n<p>看了网上的一些例子，好像server.bks可以用server.crt替代。</p>\n<p>node用到了</p>\n<ul>\n<li>server.pfx</li>\n</ul>\n<p>察看node的文档，server.pfx可以用server.crt和server.key替代。</p>\n<h2 id=\"服务端（nodejs）的代码\"><a href=\"#服务端（nodejs）的代码\" class=\"headerlink\" title=\"服务端（nodejs）的代码\"></a>服务端（nodejs）的代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> https =<span class=\"built_in\">require</span>(<span class=\"string\">'https'</span>), fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">    key: fs.readFileSync(<span class=\"string\">'./keys/server.key'</span>),</div><div class=\"line\">    cert: fs.readFileSync(<span class=\"string\">'./keys/server.crt'</span>),</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"keyword\">var</span> server = https.createServer(options, app);</div><div class=\"line\">server.listen(<span class=\"number\">443</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Https server listening on port '</span> + <span class=\"number\">443</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"android应用自有证书的验证方式\"><a href=\"#android应用自有证书的验证方式\" class=\"headerlink\" title=\"android应用自有证书的验证方式\"></a>android应用自有证书的验证方式</h2><p>将服务端证书拷贝到app资源目录下，一般是<project_dir>/assets/server.crt</project_dir></p>\n<h3 id=\"方法一：直接根据server-crt初始化TrustManagerFactory\"><a href=\"#方法一：直接根据server-crt初始化TrustManagerFactory\" class=\"headerlink\" title=\"方法一：直接根据server.crt初始化TrustManagerFactory\"></a>方法一：直接根据server.crt初始化TrustManagerFactory</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">    CertificateFactory cf = CertificateFactory.getInstance(<span class=\"string\">\"X.509\"</span>);</div><div class=\"line\">    InputStream caInput = <span class=\"keyword\">new</span> BufferedInputStream(getAssets().open(<span class=\"string\">\"server.crt\"</span>));</div><div class=\"line\">    <span class=\"keyword\">final</span> Certificate ca;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        ca = cf.generateCertificate(caInput);</div><div class=\"line\">        Log.i(TAG, <span class=\"string\">\"ca=\"</span> + ((X509Certificate) ca).getSubjectDN());</div><div class=\"line\">        Log.i(TAG, <span class=\"string\">\"key=\"</span> + ((X509Certificate) ca).getPublicKey());</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        caInput.close();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    String keyStoreType = KeyStore.getDefaultType();</div><div class=\"line\">    Log.d(TAG, <span class=\"string\">\"keystore type:\"</span> + keyStoreType);</div><div class=\"line\">    KeyStore keyStore = KeyStore.getInstance(keyStoreType);</div><div class=\"line\">    keyStore.load(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">    keyStore.setCertificateEntry(<span class=\"string\">\"cert\"</span>, ca);</div><div class=\"line\"></div><div class=\"line\">    String tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();</div><div class=\"line\">    Log.d(TAG, <span class=\"string\">\"tmfAlgorithm:\"</span> + tmfAlgorithm);</div><div class=\"line\">    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(tmfAlgorithm);</div><div class=\"line\">    trustManagerFactory.init(keyStore);</div><div class=\"line\"></div><div class=\"line\">    mSSLContext = SSLContext.getInstance(<span class=\"string\">\"TLS\"</span>);</div><div class=\"line\">    mSSLContext.init(<span class=\"keyword\">null</span>, trustManagerFactory.getTrustManagers(), <span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">    URL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"https://yinlijun.com\"</span>);</div><div class=\"line\">    HttpsURLConnection urlConnection =</div><div class=\"line\">            (HttpsURLConnection)url.openConnection();</div><div class=\"line\">    urlConnection.setSSLSocketFactory(mSSLContext.getSocketFactory());</div><div class=\"line\">    InputStream in = urlConnection.getInputStream();</div><div class=\"line\">    copyInputStreamToOutputStream(in, System.out);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (CertificateException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (KeyManagementException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (KeyStoreException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>copyInputStreamToOutputStream方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">copyInputStreamToOutputStream</span><span class=\"params\">(InputStream in, PrintStream out)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</div><div class=\"line\">    <span class=\"keyword\">int</span> c = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> ((c = in.read(buffer)) != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">        out.write(buffer, <span class=\"number\">0</span>, c);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    CertificateFactory cf = CertificateFactory.getInstance(<span class=\"string\">\"X.509\"</span>);</div><div class=\"line\">    InputStream caInput = <span class=\"keyword\">new</span> BufferedInputStream(getAssets().open(<span class=\"string\">\"server.crt\"</span>));</div><div class=\"line\">    <span class=\"keyword\">final</span> Certificate ca;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        ca = cf.generateCertificate(caInput);</div><div class=\"line\">        Log.i(<span class=\"string\">\"Longer\"</span>, <span class=\"string\">\"ca=\"</span> + ((X509Certificate) ca).getSubjectDN());</div><div class=\"line\">        Log.i(<span class=\"string\">\"Longer\"</span>, <span class=\"string\">\"key=\"</span> + ((X509Certificate) ca).getPublicKey());</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        caInput.close();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Create an SSLContext that uses our TrustManager</span></div><div class=\"line\">    SSLContext context = SSLContext.getInstance(<span class=\"string\">\"TLSv1\"</span>,<span class=\"string\">\"AndroidOpenSSL\"</span>);</div><div class=\"line\">    context.init(<span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> TrustManager[]&#123;</div><div class=\"line\">            <span class=\"keyword\">new</span> X509TrustManager() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkClientTrusted</span><span class=\"params\">(X509Certificate[] chain,</span></span></div><div class=\"line\">                                                String authType)</div><div class=\"line\">                        <span class=\"keyword\">throws</span> CertificateException &#123;</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkServerTrusted</span><span class=\"params\">(X509Certificate[] chain,</span></span></div><div class=\"line\">                                                String authType)</div><div class=\"line\">                        <span class=\"keyword\">throws</span> CertificateException &#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (X509Certificate cert : chain) &#123;</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"comment\">// Make sure that it hasn't expired.</span></div><div class=\"line\">                        cert.checkValidity();</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"comment\">// Verify the certificate's public key chain.</span></div><div class=\"line\">                        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                            cert.verify(((X509Certificate) ca).getPublicKey());</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (InvalidKeyException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (NoSuchProviderException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (SignatureException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"keyword\">public</span> X509Certificate[] getAcceptedIssuers() &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> X509Certificate[<span class=\"number\">0</span>];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">    &#125;, <span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">    URL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"https://yinlijun.com/\"</span>);</div><div class=\"line\">    HttpsURLConnection urlConnection =</div><div class=\"line\">            (HttpsURLConnection)url.openConnection();</div><div class=\"line\">    urlConnection.setSSLSocketFactory(context.getSocketFactory());</div><div class=\"line\">    InputStream in = urlConnection.getInputStream();</div><div class=\"line\">    copyInputStreamToOutputStream(in, System.out);</div></pre></td></tr></table></figure>\n<h2 id=\"双向认证\"><a href=\"#双向认证\" class=\"headerlink\" title=\"双向认证\"></a>双向认证</h2><p>单向验证只能验证服务器，如果服务器也想对客户端进行验证，即所谓（双向验证），需要在连接是一起发送客户端证书。</p>\n<h3 id=\"双向认证，服务器代码\"><a href=\"#双向认证，服务器代码\" class=\"headerlink\" title=\"双向认证，服务器代码\"></a>双向认证，服务器代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> tls = <span class=\"built_in\">require</span>(<span class=\"string\">'tls'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> options = &#123;</div><div class=\"line\">  pfx: fs.readFileSync(<span class=\"string\">'./server.pfx'</span>),</div><div class=\"line\">  passphrase: <span class=\"string\">\"123456\"</span>,</div><div class=\"line\">  <span class=\"comment\">// This is necessary only if using the client certificate authentication.</span></div><div class=\"line\">  requestCert: <span class=\"literal\">true</span>,</div><div class=\"line\">  rejectUnauthorized: <span class=\"literal\">true</span> <span class=\"comment\">//如果接受也非认证链接，可以删除此行。</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//需要双向认证才需要配置requestCert为true。</span></div><div class=\"line\"><span class=\"keyword\">const</span> server = tls.createServer(options, (socket) =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'server connected'</span>,</div><div class=\"line\">              socket.authorized ? <span class=\"string\">'authorized'</span> : <span class=\"string\">'unauthorized'</span>);</div><div class=\"line\">  socket.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\">  socket.on(<span class=\"string\">'data'</span>, (data) =&gt; &#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">      socket.write(data);</div><div class=\"line\">  &#125;);</div><div class=\"line\">  socket.on(<span class=\"string\">'end'</span>, (socket) =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"socket closed\"</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.listen(<span class=\"number\">8000</span>, () =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'server bound'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"双向认证，android的代码，实现方式一\"><a href=\"#双向认证，android的代码，实现方式一\" class=\"headerlink\" title=\"双向认证，android的代码，实现方式一\"></a>双向认证，android的代码，实现方式一</h3><p>server.pfx和client.p12放到<project_dir>/assets/目录下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    KeyStore trustStore = KeyStore.getInstance(<span class=\"string\">\"bks\"</span>);</div><div class=\"line\">    InputStream tsIn = getResources().getAssets().open(<span class=\"string\">\"server.bks\"</span>);</div><div class=\"line\"></div><div class=\"line\">    KeyStore keyStore = KeyStore.getInstance(<span class=\"string\">\"PKCS12\"</span>);</div><div class=\"line\">    InputStream ksIn = getResources().getAssets().open(<span class=\"string\">\"client.p12\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        keyStore.load(ksIn, <span class=\"string\">\"123456\"</span>.toCharArray());</div><div class=\"line\">        trustStore.load(tsIn, <span class=\"string\">\"123456\"</span>.toCharArray());</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ksIn.close();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ignore) &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            tsIn.close();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ignore) &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(<span class=\"string\">\"X509\"</span>);</div><div class=\"line\">    keyManagerFactory.init(keyStore, <span class=\"string\">\"123456\"</span>.toCharArray());</div><div class=\"line\">    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());</div><div class=\"line\">    trustManagerFactory.init(trustStore);</div><div class=\"line\">    mSSLContext = SSLContext.getInstance(<span class=\"string\">\"TLS\"</span>);</div><div class=\"line\">    mSSLContext.init(<span class=\"keyword\">null</span>, trustManagerFactory.getTrustManagers(), <span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">    mSSLSocket = (SSLSocket) mSSLContext.getSocketFactory().createSocket(<span class=\"string\">\"yinlijun.com\"</span>, <span class=\"number\">8000</span>);</div><div class=\"line\">    mSSLSocket.startHandshake();</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (KeyManagementException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (KeyStoreException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (UnrecoverableKeyException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></project_dir></p>\n<h3 id=\"双向认证，android的代码，实现方式2，用server-crt替代server-bks\"><a href=\"#双向认证，android的代码，实现方式2，用server-crt替代server-bks\" class=\"headerlink\" title=\"双向认证，android的代码，实现方式2，用server.crt替代server.bks\"></a>双向认证，android的代码，实现方式2，用server.crt替代server.bks</h3><p>server.crt和client.p12放到<project_dir>/assets/目录下</project_dir></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    CertificateFactory cf = CertificateFactory.getInstance(<span class=\"string\">\"X.509\"</span>);</div><div class=\"line\">    InputStream caInput = <span class=\"keyword\">new</span> BufferedInputStream(getAssets().open(<span class=\"string\">\"server.crt\"</span>));</div><div class=\"line\">    <span class=\"keyword\">final</span> Certificate ca;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        ca = cf.generateCertificate(caInput);</div><div class=\"line\">        Log.i(<span class=\"string\">\"Longer\"</span>, <span class=\"string\">\"ca=\"</span> + ((X509Certificate) ca).getSubjectDN());</div><div class=\"line\">        Log.i(<span class=\"string\">\"Longer\"</span>, <span class=\"string\">\"key=\"</span> + ((X509Certificate) ca).getPublicKey());</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        caInput.close();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    KeyStore keyStore = KeyStore.getInstance(<span class=\"string\">\"PKCS12\"</span>);</div><div class=\"line\">    InputStream ksIn = getResources().getAssets().open(<span class=\"string\">\"client.p12\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        keyStore.load(ksIn, <span class=\"string\">\"123456\"</span>.toCharArray());</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ksIn.close();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ignore) &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(<span class=\"string\">\"X509\"</span>);</div><div class=\"line\">    keyManagerFactory.init(keyStore, <span class=\"string\">\"123456\"</span>.toCharArray());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Create an SSLContext that uses our TrustManager</span></div><div class=\"line\">    SSLContext context = SSLContext.getInstance(<span class=\"string\">\"TLSv1\"</span>,<span class=\"string\">\"AndroidOpenSSL\"</span>);</div><div class=\"line\">    context.init(keyManagerFactory.getKeyManagers(), <span class=\"keyword\">new</span> TrustManager[]&#123;</div><div class=\"line\">            <span class=\"keyword\">new</span> X509TrustManager() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkClientTrusted</span><span class=\"params\">(X509Certificate[] chain,</span></span></div><div class=\"line\">                                                String authType)</div><div class=\"line\">                        <span class=\"keyword\">throws</span> CertificateException &#123;</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkServerTrusted</span><span class=\"params\">(X509Certificate[] chain,</span></span></div><div class=\"line\">                                                String authType)</div><div class=\"line\">                        <span class=\"keyword\">throws</span> CertificateException &#123;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (X509Certificate cert : chain) &#123;</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"comment\">// Make sure that it hasn't expired.</span></div><div class=\"line\">                        cert.checkValidity();</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"comment\">// Verify the certificate's public key chain.</span></div><div class=\"line\">                        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                            cert.verify(((X509Certificate) ca).getPublicKey());</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (InvalidKeyException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (NoSuchProviderException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (SignatureException e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"keyword\">public</span> X509Certificate[] getAcceptedIssuers() &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> X509Certificate[<span class=\"number\">0</span>];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">    &#125;, <span class=\"keyword\">null</span>);</div><div class=\"line\">    <span class=\"comment\">//...</span></div></pre></td></tr></table></figure>\n<p>项目地址：</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><a href=\"https://matoski.com/article/node-express-generate-ssl/\" target=\"_blank\" rel=\"external\">How to generate self-signed certificate for usage in Express4 or Node.js HTTP</a></li>\n<li><a href=\"http://blog.csdn.net/fyang2007/article/details/6180361\" target=\"_blank\" rel=\"external\">SSL证书生成方法</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/22816331\" target=\"_blank\" rel=\"external\">Android安全开发之安全使用HTTPS</a></li>\n<li><a href=\"https://developer.android.com/training/articles/security-ssl.html#nogotofail\" target=\"_blank\" rel=\"external\">通过 HTTPS 和 SSL 确保安全</a> (要翻墙)</li>\n<li><a href=\"https://nodejs.org/api/tls.html\" target=\"_blank\" rel=\"external\">https://nodejs.org/api/tls.html</a></li>\n<li><a href=\"https://gist.github.com/Frank-Zhu/41e21a00df26d63cd38d\" target=\"_blank\" rel=\"external\">https://gist.github.com/Frank-Zhu/41e21a00df26d63cd38d</a></li>\n</ul>"},{"title":"锋利的jQeury 第二章-笔记","date":"2016-09-02T10:04:19.000Z","_content":"\n## 第二章 jQuery选择器\n\n### 基本选择器\n\n- `#id` 匹配id,  `$('#test')`\n- `.class` 匹配类, `$('.test')`\n- `element` 匹配标签, `$('div')`\n- `*` 匹配所有元素, `$('*')`\n- `selector1, select2,...,selectN` 匹配集合，如$('div, span, p.myClass')\n\n<!--more-->\n\n### 层次选择器\n\n- `$('ancestor decendant')` 选择后代元素\n- `$('parent > child')` 选择子元素\n- `$('prev + next')` 选择紧接在`prev`后的`next`元素，如: `$('.one + div')`，选择`one`之后的下个一个`div`同辈元素\n- `$('prev ~ siblings')` 选择prev后的所有siblings元素，如`$('#two ~ div')`选择`two`之后的所有`div`同辈元素\n\n### 过滤选择器\n\n- `:first` 选取第一个元素，它只返回一个元素。 如`$('div:first')`选取第一个div元素。\n- `:last` 选取最后一个元素，它只返回一个元素。\n- `:not(selector)` 取出所有给定选择器匹配的元素，如`$('input:not(.myClass)')`,选取`class`不是`myClass`的`input`元素\n- `:even` 选取索引为偶数的元素，索引从**0**开始\n- `:odd` 选取奇数索引元素\n- `:eq(index)` 选取指定索引元素\n- `:gt(index)` 选取大于索引的元素\n- `:lt(index)` 选取小于索引的元素\n- `:header` 选取所有标题元素 如`$(':header')`，选取网页中所有`&lt;h1>,&lt;h2>,&lt;h3>;....`\n- `:animated` 选取所有正在执行动画的元素 如：`$('div:animated')`选取正在执行动画的所有`div`元素\n- `:focus` 选取当前获取焦点的元素 如`$(':focus')`，获取当前获取焦点的元素\n\n### 内容过滤选择器\n\n- `:contains(text)` 选取文本内容含有text的元素, 如`$('div:contains(\"我\")')`,选取文本含有`我`的`div`元素\n- `:empty` 选取不包含子元素或者文本为空的元素, 如`$('div:empty')`选取不包含子元素的`div`元素\n- `:has(selector)` 选取含有选择器的所匹配的元素的元素，如`$('div:has(p)')`，选取含有`p`元素的`div`元素\n- `:parent` 选取含有子元素或文本的元素 如`$('div:parent')`,选取拥有子元素的`div`元素\n\n### 可见性过滤器\n\n- `:hidden` 选取所有不可见元素, 如`$(':hidden')`, 选取所有不可见元素，`$('input:hidden')`选取所有不可见的input元素\n- `:visible` 选取所有可见元素\n\n### 属性过滤选择器\n\n- `[attr]` 选取拥有此属性的元素, 如`$('div[id]')`, 选取拥有属性`id`的元素\n- `[attr=val]` 选取`attr`属性为`val`的元素如, `$('div[title=test]')`选取`title`为`test`的`div`元素\n- `[attr!=val]` 选取`attr`的值不为`val`的元素\n- `[attr^=val]` 选取`attr`的值以`val`开始的元素\n- `[attr$=val]` 选取`attr`的值以`val`结束的元素\n- `[attr*=val]` 选取`attr`的值包含`val`的元素\n- `[attr|=val]` 选取`attr`的值为`val`或以`val-`开始的元素\n- `[attr~=val]` 选取`attr`的值包含`' val'`的元素（注意val前面要有空格）\n- `[attr1][attr2][attrN]` 选取同时满足几个条件的元素，如`$('div[id][title$=\"test\"]')`，选取拥有属性id，并且属性title以test结束的div元素\n\n### 子元素过滤选择器\n\n- `:nth-child(index/even/odd/equation)` 选取每个父元素下的第`index`个或者奇偶子元素\n- `:first-child` 选取每个父元素的第一个子元素，如`$('ul li:first-child')`, 选择ul的第一个li元素\n- `:last-child` 选取每个父元素的子元素\n- `:only-child` 如果父控件一个子元素，那么匹配到，否则不被匹配。`$('ul li:only-child')`返回只有一个子元素且为li的li元素\n\n### 表单对象属性过滤选择器\n\n- `:enabled` 选取所有可用元素。`$('#form1 :enabled')`,选取`id`为`form1`的表单内的所有可用元素。\n- `:disbaled` 选取所有不可用元素。\n- `:checked` 选取所有被选中元素(单选框，复选框)。`$('input:checked')`,选取所有被选中的`input`元素\n- `:selected` 选取所有被选中的选项元素（下拉列表）。`$('select option:seleted')`\n\n### 表单选择器\n\n- `:input` 选取所有`&lt;input>,&lt;textarea>,&lt;select>,&lt;button>`元素。如`$('#form1 :input')`\n- `:text` 选取所有单行文本框。\n- `:password` 选取所有密码框\n- `:radio` 选取所有单选框\n- `:submit` 选取所有提交按钮\n- `:image` 选取所有的图像按钮\n- `:reset` 选取所有的重置按钮\n- `:button` 选取所有的按钮\n- `:file` 选取所有的上川域\n- `:hidden` 选取所有不可见元素\n","source":"_posts/chapter-2.md","raw":"---\ntitle: 锋利的jQeury 第二章-笔记 \ndate: 2016-9-2 18:04:19\ntags: jQuery\n---\n\n## 第二章 jQuery选择器\n\n### 基本选择器\n\n- `#id` 匹配id,  `$('#test')`\n- `.class` 匹配类, `$('.test')`\n- `element` 匹配标签, `$('div')`\n- `*` 匹配所有元素, `$('*')`\n- `selector1, select2,...,selectN` 匹配集合，如$('div, span, p.myClass')\n\n<!--more-->\n\n### 层次选择器\n\n- `$('ancestor decendant')` 选择后代元素\n- `$('parent > child')` 选择子元素\n- `$('prev + next')` 选择紧接在`prev`后的`next`元素，如: `$('.one + div')`，选择`one`之后的下个一个`div`同辈元素\n- `$('prev ~ siblings')` 选择prev后的所有siblings元素，如`$('#two ~ div')`选择`two`之后的所有`div`同辈元素\n\n### 过滤选择器\n\n- `:first` 选取第一个元素，它只返回一个元素。 如`$('div:first')`选取第一个div元素。\n- `:last` 选取最后一个元素，它只返回一个元素。\n- `:not(selector)` 取出所有给定选择器匹配的元素，如`$('input:not(.myClass)')`,选取`class`不是`myClass`的`input`元素\n- `:even` 选取索引为偶数的元素，索引从**0**开始\n- `:odd` 选取奇数索引元素\n- `:eq(index)` 选取指定索引元素\n- `:gt(index)` 选取大于索引的元素\n- `:lt(index)` 选取小于索引的元素\n- `:header` 选取所有标题元素 如`$(':header')`，选取网页中所有`&lt;h1>,&lt;h2>,&lt;h3>;....`\n- `:animated` 选取所有正在执行动画的元素 如：`$('div:animated')`选取正在执行动画的所有`div`元素\n- `:focus` 选取当前获取焦点的元素 如`$(':focus')`，获取当前获取焦点的元素\n\n### 内容过滤选择器\n\n- `:contains(text)` 选取文本内容含有text的元素, 如`$('div:contains(\"我\")')`,选取文本含有`我`的`div`元素\n- `:empty` 选取不包含子元素或者文本为空的元素, 如`$('div:empty')`选取不包含子元素的`div`元素\n- `:has(selector)` 选取含有选择器的所匹配的元素的元素，如`$('div:has(p)')`，选取含有`p`元素的`div`元素\n- `:parent` 选取含有子元素或文本的元素 如`$('div:parent')`,选取拥有子元素的`div`元素\n\n### 可见性过滤器\n\n- `:hidden` 选取所有不可见元素, 如`$(':hidden')`, 选取所有不可见元素，`$('input:hidden')`选取所有不可见的input元素\n- `:visible` 选取所有可见元素\n\n### 属性过滤选择器\n\n- `[attr]` 选取拥有此属性的元素, 如`$('div[id]')`, 选取拥有属性`id`的元素\n- `[attr=val]` 选取`attr`属性为`val`的元素如, `$('div[title=test]')`选取`title`为`test`的`div`元素\n- `[attr!=val]` 选取`attr`的值不为`val`的元素\n- `[attr^=val]` 选取`attr`的值以`val`开始的元素\n- `[attr$=val]` 选取`attr`的值以`val`结束的元素\n- `[attr*=val]` 选取`attr`的值包含`val`的元素\n- `[attr|=val]` 选取`attr`的值为`val`或以`val-`开始的元素\n- `[attr~=val]` 选取`attr`的值包含`' val'`的元素（注意val前面要有空格）\n- `[attr1][attr2][attrN]` 选取同时满足几个条件的元素，如`$('div[id][title$=\"test\"]')`，选取拥有属性id，并且属性title以test结束的div元素\n\n### 子元素过滤选择器\n\n- `:nth-child(index/even/odd/equation)` 选取每个父元素下的第`index`个或者奇偶子元素\n- `:first-child` 选取每个父元素的第一个子元素，如`$('ul li:first-child')`, 选择ul的第一个li元素\n- `:last-child` 选取每个父元素的子元素\n- `:only-child` 如果父控件一个子元素，那么匹配到，否则不被匹配。`$('ul li:only-child')`返回只有一个子元素且为li的li元素\n\n### 表单对象属性过滤选择器\n\n- `:enabled` 选取所有可用元素。`$('#form1 :enabled')`,选取`id`为`form1`的表单内的所有可用元素。\n- `:disbaled` 选取所有不可用元素。\n- `:checked` 选取所有被选中元素(单选框，复选框)。`$('input:checked')`,选取所有被选中的`input`元素\n- `:selected` 选取所有被选中的选项元素（下拉列表）。`$('select option:seleted')`\n\n### 表单选择器\n\n- `:input` 选取所有`&lt;input>,&lt;textarea>,&lt;select>,&lt;button>`元素。如`$('#form1 :input')`\n- `:text` 选取所有单行文本框。\n- `:password` 选取所有密码框\n- `:radio` 选取所有单选框\n- `:submit` 选取所有提交按钮\n- `:image` 选取所有的图像按钮\n- `:reset` 选取所有的重置按钮\n- `:button` 选取所有的按钮\n- `:file` 选取所有的上川域\n- `:hidden` 选取所有不可见元素\n","slug":"chapter-2","published":1,"updated":"2017-05-25T03:41:18.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o330007iwl7rux3y4yh","content":"<h2 id=\"第二章-jQuery选择器\"><a href=\"#第二章-jQuery选择器\" class=\"headerlink\" title=\"第二章 jQuery选择器\"></a>第二章 jQuery选择器</h2><h3 id=\"基本选择器\"><a href=\"#基本选择器\" class=\"headerlink\" title=\"基本选择器\"></a>基本选择器</h3><ul>\n<li><code>#id</code> 匹配id,  <code>$(&#39;#test&#39;)</code></li>\n<li><code>.class</code> 匹配类, <code>$(&#39;.test&#39;)</code></li>\n<li><code>element</code> 匹配标签, <code>$(&#39;div&#39;)</code></li>\n<li><code>*</code> 匹配所有元素, <code>$(&#39;*&#39;)</code></li>\n<li><code>selector1, select2,...,selectN</code> 匹配集合，如$(‘div, span, p.myClass’)</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"层次选择器\"><a href=\"#层次选择器\" class=\"headerlink\" title=\"层次选择器\"></a>层次选择器</h3><ul>\n<li><code>$(&#39;ancestor decendant&#39;)</code> 选择后代元素</li>\n<li><code>$(&#39;parent &gt; child&#39;)</code> 选择子元素</li>\n<li><code>$(&#39;prev + next&#39;)</code> 选择紧接在<code>prev</code>后的<code>next</code>元素，如: <code>$(&#39;.one + div&#39;)</code>，选择<code>one</code>之后的下个一个<code>div</code>同辈元素</li>\n<li><code>$(&#39;prev ~ siblings&#39;)</code> 选择prev后的所有siblings元素，如<code>$(&#39;#two ~ div&#39;)</code>选择<code>two</code>之后的所有<code>div</code>同辈元素</li>\n</ul>\n<h3 id=\"过滤选择器\"><a href=\"#过滤选择器\" class=\"headerlink\" title=\"过滤选择器\"></a>过滤选择器</h3><ul>\n<li><code>:first</code> 选取第一个元素，它只返回一个元素。 如<code>$(&#39;div:first&#39;)</code>选取第一个div元素。</li>\n<li><code>:last</code> 选取最后一个元素，它只返回一个元素。</li>\n<li><code>:not(selector)</code> 取出所有给定选择器匹配的元素，如<code>$(&#39;input:not(.myClass)&#39;)</code>,选取<code>class</code>不是<code>myClass</code>的<code>input</code>元素</li>\n<li><code>:even</code> 选取索引为偶数的元素，索引从<strong>0</strong>开始</li>\n<li><code>:odd</code> 选取奇数索引元素</li>\n<li><code>:eq(index)</code> 选取指定索引元素</li>\n<li><code>:gt(index)</code> 选取大于索引的元素</li>\n<li><code>:lt(index)</code> 选取小于索引的元素</li>\n<li><code>:header</code> 选取所有标题元素 如<code>$(&#39;:header&#39;)</code>，选取网页中所有<code>&amp;lt;h1&gt;,&amp;lt;h2&gt;,&amp;lt;h3&gt;;....</code></li>\n<li><code>:animated</code> 选取所有正在执行动画的元素 如：<code>$(&#39;div:animated&#39;)</code>选取正在执行动画的所有<code>div</code>元素</li>\n<li><code>:focus</code> 选取当前获取焦点的元素 如<code>$(&#39;:focus&#39;)</code>，获取当前获取焦点的元素</li>\n</ul>\n<h3 id=\"内容过滤选择器\"><a href=\"#内容过滤选择器\" class=\"headerlink\" title=\"内容过滤选择器\"></a>内容过滤选择器</h3><ul>\n<li><code>:contains(text)</code> 选取文本内容含有text的元素, 如<code>$(&#39;div:contains(&quot;我&quot;)&#39;)</code>,选取文本含有<code>我</code>的<code>div</code>元素</li>\n<li><code>:empty</code> 选取不包含子元素或者文本为空的元素, 如<code>$(&#39;div:empty&#39;)</code>选取不包含子元素的<code>div</code>元素</li>\n<li><code>:has(selector)</code> 选取含有选择器的所匹配的元素的元素，如<code>$(&#39;div:has(p)&#39;)</code>，选取含有<code>p</code>元素的<code>div</code>元素</li>\n<li><code>:parent</code> 选取含有子元素或文本的元素 如<code>$(&#39;div:parent&#39;)</code>,选取拥有子元素的<code>div</code>元素</li>\n</ul>\n<h3 id=\"可见性过滤器\"><a href=\"#可见性过滤器\" class=\"headerlink\" title=\"可见性过滤器\"></a>可见性过滤器</h3><ul>\n<li><code>:hidden</code> 选取所有不可见元素, 如<code>$(&#39;:hidden&#39;)</code>, 选取所有不可见元素，<code>$(&#39;input:hidden&#39;)</code>选取所有不可见的input元素</li>\n<li><code>:visible</code> 选取所有可见元素</li>\n</ul>\n<h3 id=\"属性过滤选择器\"><a href=\"#属性过滤选择器\" class=\"headerlink\" title=\"属性过滤选择器\"></a>属性过滤选择器</h3><ul>\n<li><code>[attr]</code> 选取拥有此属性的元素, 如<code>$(&#39;div[id]&#39;)</code>, 选取拥有属性<code>id</code>的元素</li>\n<li><code>[attr=val]</code> 选取<code>attr</code>属性为<code>val</code>的元素如, <code>$(&#39;div[title=test]&#39;)</code>选取<code>title</code>为<code>test</code>的<code>div</code>元素</li>\n<li><code>[attr!=val]</code> 选取<code>attr</code>的值不为<code>val</code>的元素</li>\n<li><code>[attr^=val]</code> 选取<code>attr</code>的值以<code>val</code>开始的元素</li>\n<li><code>[attr$=val]</code> 选取<code>attr</code>的值以<code>val</code>结束的元素</li>\n<li><code>[attr*=val]</code> 选取<code>attr</code>的值包含<code>val</code>的元素</li>\n<li><code>[attr|=val]</code> 选取<code>attr</code>的值为<code>val</code>或以<code>val-</code>开始的元素</li>\n<li><code>[attr~=val]</code> 选取<code>attr</code>的值包含<code>&#39; val&#39;</code>的元素（注意val前面要有空格）</li>\n<li><code>[attr1][attr2][attrN]</code> 选取同时满足几个条件的元素，如<code>$(&#39;div[id][title$=&quot;test&quot;]&#39;)</code>，选取拥有属性id，并且属性title以test结束的div元素</li>\n</ul>\n<h3 id=\"子元素过滤选择器\"><a href=\"#子元素过滤选择器\" class=\"headerlink\" title=\"子元素过滤选择器\"></a>子元素过滤选择器</h3><ul>\n<li><code>:nth-child(index/even/odd/equation)</code> 选取每个父元素下的第<code>index</code>个或者奇偶子元素</li>\n<li><code>:first-child</code> 选取每个父元素的第一个子元素，如<code>$(&#39;ul li:first-child&#39;)</code>, 选择ul的第一个li元素</li>\n<li><code>:last-child</code> 选取每个父元素的子元素</li>\n<li><code>:only-child</code> 如果父控件一个子元素，那么匹配到，否则不被匹配。<code>$(&#39;ul li:only-child&#39;)</code>返回只有一个子元素且为li的li元素</li>\n</ul>\n<h3 id=\"表单对象属性过滤选择器\"><a href=\"#表单对象属性过滤选择器\" class=\"headerlink\" title=\"表单对象属性过滤选择器\"></a>表单对象属性过滤选择器</h3><ul>\n<li><code>:enabled</code> 选取所有可用元素。<code>$(&#39;#form1 :enabled&#39;)</code>,选取<code>id</code>为<code>form1</code>的表单内的所有可用元素。</li>\n<li><code>:disbaled</code> 选取所有不可用元素。</li>\n<li><code>:checked</code> 选取所有被选中元素(单选框，复选框)。<code>$(&#39;input:checked&#39;)</code>,选取所有被选中的<code>input</code>元素</li>\n<li><code>:selected</code> 选取所有被选中的选项元素（下拉列表）。<code>$(&#39;select option:seleted&#39;)</code></li>\n</ul>\n<h3 id=\"表单选择器\"><a href=\"#表单选择器\" class=\"headerlink\" title=\"表单选择器\"></a>表单选择器</h3><ul>\n<li><code>:input</code> 选取所有<code>&amp;lt;input&gt;,&amp;lt;textarea&gt;,&amp;lt;select&gt;,&amp;lt;button&gt;</code>元素。如<code>$(&#39;#form1 :input&#39;)</code></li>\n<li><code>:text</code> 选取所有单行文本框。</li>\n<li><code>:password</code> 选取所有密码框</li>\n<li><code>:radio</code> 选取所有单选框</li>\n<li><code>:submit</code> 选取所有提交按钮</li>\n<li><code>:image</code> 选取所有的图像按钮</li>\n<li><code>:reset</code> 选取所有的重置按钮</li>\n<li><code>:button</code> 选取所有的按钮</li>\n<li><code>:file</code> 选取所有的上川域</li>\n<li><code>:hidden</code> 选取所有不可见元素</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"第二章-jQuery选择器\"><a href=\"#第二章-jQuery选择器\" class=\"headerlink\" title=\"第二章 jQuery选择器\"></a>第二章 jQuery选择器</h2><h3 id=\"基本选择器\"><a href=\"#基本选择器\" class=\"headerlink\" title=\"基本选择器\"></a>基本选择器</h3><ul>\n<li><code>#id</code> 匹配id,  <code>$(&#39;#test&#39;)</code></li>\n<li><code>.class</code> 匹配类, <code>$(&#39;.test&#39;)</code></li>\n<li><code>element</code> 匹配标签, <code>$(&#39;div&#39;)</code></li>\n<li><code>*</code> 匹配所有元素, <code>$(&#39;*&#39;)</code></li>\n<li><code>selector1, select2,...,selectN</code> 匹配集合，如$(‘div, span, p.myClass’)</li>\n</ul>","more":"<h3 id=\"层次选择器\"><a href=\"#层次选择器\" class=\"headerlink\" title=\"层次选择器\"></a>层次选择器</h3><ul>\n<li><code>$(&#39;ancestor decendant&#39;)</code> 选择后代元素</li>\n<li><code>$(&#39;parent &gt; child&#39;)</code> 选择子元素</li>\n<li><code>$(&#39;prev + next&#39;)</code> 选择紧接在<code>prev</code>后的<code>next</code>元素，如: <code>$(&#39;.one + div&#39;)</code>，选择<code>one</code>之后的下个一个<code>div</code>同辈元素</li>\n<li><code>$(&#39;prev ~ siblings&#39;)</code> 选择prev后的所有siblings元素，如<code>$(&#39;#two ~ div&#39;)</code>选择<code>two</code>之后的所有<code>div</code>同辈元素</li>\n</ul>\n<h3 id=\"过滤选择器\"><a href=\"#过滤选择器\" class=\"headerlink\" title=\"过滤选择器\"></a>过滤选择器</h3><ul>\n<li><code>:first</code> 选取第一个元素，它只返回一个元素。 如<code>$(&#39;div:first&#39;)</code>选取第一个div元素。</li>\n<li><code>:last</code> 选取最后一个元素，它只返回一个元素。</li>\n<li><code>:not(selector)</code> 取出所有给定选择器匹配的元素，如<code>$(&#39;input:not(.myClass)&#39;)</code>,选取<code>class</code>不是<code>myClass</code>的<code>input</code>元素</li>\n<li><code>:even</code> 选取索引为偶数的元素，索引从<strong>0</strong>开始</li>\n<li><code>:odd</code> 选取奇数索引元素</li>\n<li><code>:eq(index)</code> 选取指定索引元素</li>\n<li><code>:gt(index)</code> 选取大于索引的元素</li>\n<li><code>:lt(index)</code> 选取小于索引的元素</li>\n<li><code>:header</code> 选取所有标题元素 如<code>$(&#39;:header&#39;)</code>，选取网页中所有<code>&amp;lt;h1&gt;,&amp;lt;h2&gt;,&amp;lt;h3&gt;;....</code></li>\n<li><code>:animated</code> 选取所有正在执行动画的元素 如：<code>$(&#39;div:animated&#39;)</code>选取正在执行动画的所有<code>div</code>元素</li>\n<li><code>:focus</code> 选取当前获取焦点的元素 如<code>$(&#39;:focus&#39;)</code>，获取当前获取焦点的元素</li>\n</ul>\n<h3 id=\"内容过滤选择器\"><a href=\"#内容过滤选择器\" class=\"headerlink\" title=\"内容过滤选择器\"></a>内容过滤选择器</h3><ul>\n<li><code>:contains(text)</code> 选取文本内容含有text的元素, 如<code>$(&#39;div:contains(&quot;我&quot;)&#39;)</code>,选取文本含有<code>我</code>的<code>div</code>元素</li>\n<li><code>:empty</code> 选取不包含子元素或者文本为空的元素, 如<code>$(&#39;div:empty&#39;)</code>选取不包含子元素的<code>div</code>元素</li>\n<li><code>:has(selector)</code> 选取含有选择器的所匹配的元素的元素，如<code>$(&#39;div:has(p)&#39;)</code>，选取含有<code>p</code>元素的<code>div</code>元素</li>\n<li><code>:parent</code> 选取含有子元素或文本的元素 如<code>$(&#39;div:parent&#39;)</code>,选取拥有子元素的<code>div</code>元素</li>\n</ul>\n<h3 id=\"可见性过滤器\"><a href=\"#可见性过滤器\" class=\"headerlink\" title=\"可见性过滤器\"></a>可见性过滤器</h3><ul>\n<li><code>:hidden</code> 选取所有不可见元素, 如<code>$(&#39;:hidden&#39;)</code>, 选取所有不可见元素，<code>$(&#39;input:hidden&#39;)</code>选取所有不可见的input元素</li>\n<li><code>:visible</code> 选取所有可见元素</li>\n</ul>\n<h3 id=\"属性过滤选择器\"><a href=\"#属性过滤选择器\" class=\"headerlink\" title=\"属性过滤选择器\"></a>属性过滤选择器</h3><ul>\n<li><code>[attr]</code> 选取拥有此属性的元素, 如<code>$(&#39;div[id]&#39;)</code>, 选取拥有属性<code>id</code>的元素</li>\n<li><code>[attr=val]</code> 选取<code>attr</code>属性为<code>val</code>的元素如, <code>$(&#39;div[title=test]&#39;)</code>选取<code>title</code>为<code>test</code>的<code>div</code>元素</li>\n<li><code>[attr!=val]</code> 选取<code>attr</code>的值不为<code>val</code>的元素</li>\n<li><code>[attr^=val]</code> 选取<code>attr</code>的值以<code>val</code>开始的元素</li>\n<li><code>[attr$=val]</code> 选取<code>attr</code>的值以<code>val</code>结束的元素</li>\n<li><code>[attr*=val]</code> 选取<code>attr</code>的值包含<code>val</code>的元素</li>\n<li><code>[attr|=val]</code> 选取<code>attr</code>的值为<code>val</code>或以<code>val-</code>开始的元素</li>\n<li><code>[attr~=val]</code> 选取<code>attr</code>的值包含<code>&#39; val&#39;</code>的元素（注意val前面要有空格）</li>\n<li><code>[attr1][attr2][attrN]</code> 选取同时满足几个条件的元素，如<code>$(&#39;div[id][title$=&quot;test&quot;]&#39;)</code>，选取拥有属性id，并且属性title以test结束的div元素</li>\n</ul>\n<h3 id=\"子元素过滤选择器\"><a href=\"#子元素过滤选择器\" class=\"headerlink\" title=\"子元素过滤选择器\"></a>子元素过滤选择器</h3><ul>\n<li><code>:nth-child(index/even/odd/equation)</code> 选取每个父元素下的第<code>index</code>个或者奇偶子元素</li>\n<li><code>:first-child</code> 选取每个父元素的第一个子元素，如<code>$(&#39;ul li:first-child&#39;)</code>, 选择ul的第一个li元素</li>\n<li><code>:last-child</code> 选取每个父元素的子元素</li>\n<li><code>:only-child</code> 如果父控件一个子元素，那么匹配到，否则不被匹配。<code>$(&#39;ul li:only-child&#39;)</code>返回只有一个子元素且为li的li元素</li>\n</ul>\n<h3 id=\"表单对象属性过滤选择器\"><a href=\"#表单对象属性过滤选择器\" class=\"headerlink\" title=\"表单对象属性过滤选择器\"></a>表单对象属性过滤选择器</h3><ul>\n<li><code>:enabled</code> 选取所有可用元素。<code>$(&#39;#form1 :enabled&#39;)</code>,选取<code>id</code>为<code>form1</code>的表单内的所有可用元素。</li>\n<li><code>:disbaled</code> 选取所有不可用元素。</li>\n<li><code>:checked</code> 选取所有被选中元素(单选框，复选框)。<code>$(&#39;input:checked&#39;)</code>,选取所有被选中的<code>input</code>元素</li>\n<li><code>:selected</code> 选取所有被选中的选项元素（下拉列表）。<code>$(&#39;select option:seleted&#39;)</code></li>\n</ul>\n<h3 id=\"表单选择器\"><a href=\"#表单选择器\" class=\"headerlink\" title=\"表单选择器\"></a>表单选择器</h3><ul>\n<li><code>:input</code> 选取所有<code>&amp;lt;input&gt;,&amp;lt;textarea&gt;,&amp;lt;select&gt;,&amp;lt;button&gt;</code>元素。如<code>$(&#39;#form1 :input&#39;)</code></li>\n<li><code>:text</code> 选取所有单行文本框。</li>\n<li><code>:password</code> 选取所有密码框</li>\n<li><code>:radio</code> 选取所有单选框</li>\n<li><code>:submit</code> 选取所有提交按钮</li>\n<li><code>:image</code> 选取所有的图像按钮</li>\n<li><code>:reset</code> 选取所有的重置按钮</li>\n<li><code>:button</code> 选取所有的按钮</li>\n<li><code>:file</code> 选取所有的上川域</li>\n<li><code>:hidden</code> 选取所有不可见元素</li>\n</ul>"},{"title":"锋利的jQeury 第四章-笔记","date":"2016-09-05T10:04:19.000Z","_content":"\n## 第四章 jQuery中的事件和动画\n\n- window.onload方法，相当于`jQuery`中的$(window).load(function(){})方法。都是等文档中的所有元素加载完成时调用，包括关联css文件和javascript文件。\n- $(document).ready(function() {})则不会等待关联文件下载完，在DOM准备好之后就会调用。\n- $(window).load(function(){})可以调用多次，都会执行，而window.onload只会调用最后一次赋予的函数。\n- $(document).ready(function() {})可以简写为$(function() {});\n\n<!--more-->\n\n### 事件绑定 \n- bind(type [, data], fn);第1个参数是事件类型，包括focus、load、click、dbclik等。，第2个参数可选，作为event.data传递，第3个参数是回调函数。示例：\n```javascript\n$(function(){\n    $('#panel h5.head').bind('click', function(e) {\n        $(this).next().show();\n    })\n})\n```\n- bind函数可以级联，如\n```javascript\n$('#panel h5.head').bind('mouseover', function(e) {\n    $(this).next().show();\n}).bind('mouseout', function(e) {\n    $(this).next().hide();\n})\n```\n- bind可以简写，如\n```javascript\n$('#panel h5.head').click(function(e) {\n    $(this).next().toggle();\n})\n```\n- 合成事件\n\n    `jQuery`有两个合成事件，hover()和toggle(),都有两个回调函数作为参数，可以看成是语法糖。hover表示移入移出两个事件，toggle表示前后两次点击事件，如\n    ```javascript\n    $('#panel h5.head').hover(function() {\n        $(this).next().show(); //划过时显示下一个元素\n    }, function() {\n        $(this).next().hide(); //划出隐藏下一个元素\n    })\n    ```\n    ```javascript\n    $('#panel h5.head').toggle(function() {\n        $(this).next().show(); //点击时显示下一个元素\n    }, function() {\n        $(this).next().hide(); //再次点击时隐藏下一个元素\n    })\n    ```\n- 事件对象的属性\n    - event.type 事件类型，字符串格式，如'click', 'dbclick', 'load'等。\n    - event.preventDefault()阻止默认行为，可以用return false代替。\n    - event.stopProgagation()组织事件冒泡，可以用return false代替。\n    - event.target 触发事件的元素。\n    - event.pageX event.pageY,相对于页面的x，y坐标。\n    - event.which 不同事件含义不同，鼠标事件表示那个键，键盘事件表示键值。\n    - event.metaKey ctl键是否按下。\n- 移除事件 unbind([type],[data]) \n    - 如果没有参数，表示删除所有事件。\n    - 如果只提供type，表示移除所有type对应的事件回调。\n    - 如果传递了2个参数，表示对应的处理函数会被删除。\n- 单次事件 one(type, [data], fn);执行一次后，事件回被移除。\n- 事件模拟\n    - 原生事件 $('#btn').trigger('click')或者$('#btn').click();\n    - 自定义事件\n    ```javascript\n    $('#btn').bind('myClick', function(){\n        $('#test').append('&lt;p>我的自定义事件&lt;/p>')\n    });\n\n    $('#btn').trigger('myClick'); //触发事件。\n    ```    \n    - 传递数据\n    ```javascript\n    $('#btn').bind('myClick', function(event, msg1, msg2){\n        $('#test').append('&lt;p>我的自定义事件&lt;/p>')\n    });\n\n    $('#btn').trigger('myClick'. ['参数1'，'参数2']); //触发事件。\n    ```   \n    - 执行默认操作 triggerHandler，例如，只触发focus事件，但是不获取焦点（浏览器默认行为）\n    ```javascript\n    $('input').triggerHandler('focus');\n    ```\n- 事件命名空间\n    - 添加命名空间\n    ```javascript\n    $('#div').bind('mouseover.plugin', function() {\n\n    })\n    $('#btn').click(function() {\n        $('#div').unbind('.plugin'); //移除上面的事件。\n    })\n    ```\n    \n## 动画\n - show(duration) 显示元素，duration不为0时，表示显示动画。将元素display属性从’none‘设置为原来的值\n - hide(duration) 隐藏元素，duration不为0时，表示隐藏动画。将元素display属性设置为'none'\n - fadeIn(duration) 与show一样，但是不改变display样式。\n - fadeOut(duration) 与hide一样，但是不改变display样式。\n - slideUp(duration)和slideDown(duration)，只改变高度。\n - animate(param, speed, callback)\n    - param 包含样式属性值，如{left: '400px', top: '400px'}，可累加或累减，如{left: '+=400px'}\n    - speed 动画时间\n    - callback 动画完成回调\n    -累加动画\n    ```javascript\n    $('#panel').animate({left:'400px', height:'200px', opacity:1}, 3000)\n        .animate({top:'200px', width:'200px'}, 3000， function() {\n            consle.log('animate done');\n        })\n        .fadeOut('slow');\n    ```\n    - 停止动画stop([clearQueue], [gotoEnd])\n    - 判断是否处于动画状态 $(element).is(':animated')\n    - 延迟动画delay(duration),延迟一段时间开始动画，$(this).animate({left:'400px'}).delay(200);\n    - 其他动画方法\n        - toggle(speed, [callback]) 显示/隐藏元素\n        - slideToggle(speed, [easing], [callback])通过改变高度来显示/隐藏元素\n        - fadeTo(speed, opacity, [callback]) 通过改变不透明度来显示/隐藏元素\n        - fadeToggle(speed, [easing], [callback]) 通过不透明度来显示/隐藏元素。\n","source":"_posts/chapter-4.md","raw":"---\ntitle: 锋利的jQeury 第四章-笔记 \ndate: 2016-9-5 18:04:19\ntags: jQuery\n---\n\n## 第四章 jQuery中的事件和动画\n\n- window.onload方法，相当于`jQuery`中的$(window).load(function(){})方法。都是等文档中的所有元素加载完成时调用，包括关联css文件和javascript文件。\n- $(document).ready(function() {})则不会等待关联文件下载完，在DOM准备好之后就会调用。\n- $(window).load(function(){})可以调用多次，都会执行，而window.onload只会调用最后一次赋予的函数。\n- $(document).ready(function() {})可以简写为$(function() {});\n\n<!--more-->\n\n### 事件绑定 \n- bind(type [, data], fn);第1个参数是事件类型，包括focus、load、click、dbclik等。，第2个参数可选，作为event.data传递，第3个参数是回调函数。示例：\n```javascript\n$(function(){\n    $('#panel h5.head').bind('click', function(e) {\n        $(this).next().show();\n    })\n})\n```\n- bind函数可以级联，如\n```javascript\n$('#panel h5.head').bind('mouseover', function(e) {\n    $(this).next().show();\n}).bind('mouseout', function(e) {\n    $(this).next().hide();\n})\n```\n- bind可以简写，如\n```javascript\n$('#panel h5.head').click(function(e) {\n    $(this).next().toggle();\n})\n```\n- 合成事件\n\n    `jQuery`有两个合成事件，hover()和toggle(),都有两个回调函数作为参数，可以看成是语法糖。hover表示移入移出两个事件，toggle表示前后两次点击事件，如\n    ```javascript\n    $('#panel h5.head').hover(function() {\n        $(this).next().show(); //划过时显示下一个元素\n    }, function() {\n        $(this).next().hide(); //划出隐藏下一个元素\n    })\n    ```\n    ```javascript\n    $('#panel h5.head').toggle(function() {\n        $(this).next().show(); //点击时显示下一个元素\n    }, function() {\n        $(this).next().hide(); //再次点击时隐藏下一个元素\n    })\n    ```\n- 事件对象的属性\n    - event.type 事件类型，字符串格式，如'click', 'dbclick', 'load'等。\n    - event.preventDefault()阻止默认行为，可以用return false代替。\n    - event.stopProgagation()组织事件冒泡，可以用return false代替。\n    - event.target 触发事件的元素。\n    - event.pageX event.pageY,相对于页面的x，y坐标。\n    - event.which 不同事件含义不同，鼠标事件表示那个键，键盘事件表示键值。\n    - event.metaKey ctl键是否按下。\n- 移除事件 unbind([type],[data]) \n    - 如果没有参数，表示删除所有事件。\n    - 如果只提供type，表示移除所有type对应的事件回调。\n    - 如果传递了2个参数，表示对应的处理函数会被删除。\n- 单次事件 one(type, [data], fn);执行一次后，事件回被移除。\n- 事件模拟\n    - 原生事件 $('#btn').trigger('click')或者$('#btn').click();\n    - 自定义事件\n    ```javascript\n    $('#btn').bind('myClick', function(){\n        $('#test').append('&lt;p>我的自定义事件&lt;/p>')\n    });\n\n    $('#btn').trigger('myClick'); //触发事件。\n    ```    \n    - 传递数据\n    ```javascript\n    $('#btn').bind('myClick', function(event, msg1, msg2){\n        $('#test').append('&lt;p>我的自定义事件&lt;/p>')\n    });\n\n    $('#btn').trigger('myClick'. ['参数1'，'参数2']); //触发事件。\n    ```   \n    - 执行默认操作 triggerHandler，例如，只触发focus事件，但是不获取焦点（浏览器默认行为）\n    ```javascript\n    $('input').triggerHandler('focus');\n    ```\n- 事件命名空间\n    - 添加命名空间\n    ```javascript\n    $('#div').bind('mouseover.plugin', function() {\n\n    })\n    $('#btn').click(function() {\n        $('#div').unbind('.plugin'); //移除上面的事件。\n    })\n    ```\n    \n## 动画\n - show(duration) 显示元素，duration不为0时，表示显示动画。将元素display属性从’none‘设置为原来的值\n - hide(duration) 隐藏元素，duration不为0时，表示隐藏动画。将元素display属性设置为'none'\n - fadeIn(duration) 与show一样，但是不改变display样式。\n - fadeOut(duration) 与hide一样，但是不改变display样式。\n - slideUp(duration)和slideDown(duration)，只改变高度。\n - animate(param, speed, callback)\n    - param 包含样式属性值，如{left: '400px', top: '400px'}，可累加或累减，如{left: '+=400px'}\n    - speed 动画时间\n    - callback 动画完成回调\n    -累加动画\n    ```javascript\n    $('#panel').animate({left:'400px', height:'200px', opacity:1}, 3000)\n        .animate({top:'200px', width:'200px'}, 3000， function() {\n            consle.log('animate done');\n        })\n        .fadeOut('slow');\n    ```\n    - 停止动画stop([clearQueue], [gotoEnd])\n    - 判断是否处于动画状态 $(element).is(':animated')\n    - 延迟动画delay(duration),延迟一段时间开始动画，$(this).animate({left:'400px'}).delay(200);\n    - 其他动画方法\n        - toggle(speed, [callback]) 显示/隐藏元素\n        - slideToggle(speed, [easing], [callback])通过改变高度来显示/隐藏元素\n        - fadeTo(speed, opacity, [callback]) 通过改变不透明度来显示/隐藏元素\n        - fadeToggle(speed, [easing], [callback]) 通过不透明度来显示/隐藏元素。\n","slug":"chapter-4","published":1,"updated":"2017-05-25T03:41:18.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o3c000aiwl75ege1k3x","content":"<h2 id=\"第四章-jQuery中的事件和动画\"><a href=\"#第四章-jQuery中的事件和动画\" class=\"headerlink\" title=\"第四章 jQuery中的事件和动画\"></a>第四章 jQuery中的事件和动画</h2><ul>\n<li>window.onload方法，相当于<code>jQuery</code>中的$(window).load(function(){})方法。都是等文档中的所有元素加载完成时调用，包括关联css文件和javascript文件。</li>\n<li>$(document).ready(function() {})则不会等待关联文件下载完，在DOM准备好之后就会调用。</li>\n<li>$(window).load(function(){})可以调用多次，都会执行，而window.onload只会调用最后一次赋予的函数。</li>\n<li>$(document).ready(function() {})可以简写为$(function() {});</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h3><ul>\n<li><p>bind(type [, data], fn);第1个参数是事件类型，包括focus、load、click、dbclik等。，第2个参数可选，作为event.data传递，第3个参数是回调函数。示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#panel h5.head'</span>).bind(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        $(<span class=\"keyword\">this</span>).next().show();</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>bind函数可以级联，如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).bind(<span class=\"string\">'mouseover'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().show();</div><div class=\"line\">&#125;).bind(<span class=\"string\">'mouseout'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>bind可以简写，如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().toggle();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>合成事件</p>\n<p>  <code>jQuery</code>有两个合成事件，hover()和toggle(),都有两个回调函数作为参数，可以看成是语法糖。hover表示移入移出两个事件，toggle表示前后两次点击事件，如</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).hover(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().show(); <span class=\"comment\">//划过时显示下一个元素</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide(); <span class=\"comment\">//划出隐藏下一个元素</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).toggle(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().show(); <span class=\"comment\">//点击时显示下一个元素</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide(); <span class=\"comment\">//再次点击时隐藏下一个元素</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>事件对象的属性</p>\n<ul>\n<li>event.type 事件类型，字符串格式，如’click’, ‘dbclick’, ‘load’等。</li>\n<li>event.preventDefault()阻止默认行为，可以用return false代替。</li>\n<li>event.stopProgagation()组织事件冒泡，可以用return false代替。</li>\n<li>event.target 触发事件的元素。</li>\n<li>event.pageX event.pageY,相对于页面的x，y坐标。</li>\n<li>event.which 不同事件含义不同，鼠标事件表示那个键，键盘事件表示键值。</li>\n<li>event.metaKey ctl键是否按下。</li>\n</ul>\n</li>\n<li>移除事件 unbind([type],[data]) <ul>\n<li>如果没有参数，表示删除所有事件。</li>\n<li>如果只提供type，表示移除所有type对应的事件回调。</li>\n<li>如果传递了2个参数，表示对应的处理函数会被删除。</li>\n</ul>\n</li>\n<li>单次事件 one(type, [data], fn);执行一次后，事件回被移除。</li>\n<li><p>事件模拟</p>\n<ul>\n<li>原生事件 $(‘#btn’).trigger(‘click’)或者$(‘#btn’).click();</li>\n<li>自定义事件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#btn'</span>).bind(<span class=\"string\">'myClick'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#test'</span>).append(<span class=\"string\">'&amp;lt;p&gt;我的自定义事件&amp;lt;/p&gt;'</span>)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).trigger(<span class=\"string\">'myClick'</span>); <span class=\"comment\">//触发事件。</span></div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">`    </span></div><div class=\"line\">- 传递数据</div><div class=\"line\">`<span class=\"string\">``</span>javascript</div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).bind(<span class=\"string\">'myClick'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event, msg1, msg2</span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#test'</span>).append(<span class=\"string\">'&amp;lt;p&gt;我的自定义事件&amp;lt;/p&gt;'</span>)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).trigger(<span class=\"string\">'myClick'</span>. [<span class=\"string\">'参数1'</span>，<span class=\"string\">'参数2'</span>]); <span class=\"comment\">//触发事件。</span></div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">`   </span></div><div class=\"line\">- 执行默认操作 triggerHandler，例如，只触发focus事件，但是不获取焦点（浏览器默认行为）</div><div class=\"line\">`<span class=\"string\">``</span>javascript</div><div class=\"line\">$(<span class=\"string\">'input'</span>).triggerHandler(<span class=\"string\">'focus'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>事件命名空间</p>\n<ul>\n<li>添加命名空间<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#div'</span>).bind(<span class=\"string\">'mouseover.plugin'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;)</div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#div'</span>).unbind(<span class=\"string\">'.plugin'</span>); <span class=\"comment\">//移除上面的事件。</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h2><ul>\n<li>show(duration) 显示元素，duration不为0时，表示显示动画。将元素display属性从’none‘设置为原来的值</li>\n<li>hide(duration) 隐藏元素，duration不为0时，表示隐藏动画。将元素display属性设置为’none’</li>\n<li>fadeIn(duration) 与show一样，但是不改变display样式。</li>\n<li>fadeOut(duration) 与hide一样，但是不改变display样式。</li>\n<li>slideUp(duration)和slideDown(duration)，只改变高度。</li>\n<li><p>animate(param, speed, callback)</p>\n<ul>\n<li>param 包含样式属性值，如{left: ‘400px’, top: ‘400px’}，可累加或累减，如{left: ‘+=400px’}</li>\n<li>speed 动画时间</li>\n<li><p>callback 动画完成回调<br>-累加动画</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel'</span>).animate(&#123;left:<span class=\"string\">'400px'</span>, height:<span class=\"string\">'200px'</span>, opacity:<span class=\"number\">1</span>&#125;, <span class=\"number\">3000</span>)</div><div class=\"line\">    .animate(&#123;top:<span class=\"string\">'200px'</span>, width:<span class=\"string\">'200px'</span>&#125;, <span class=\"number\">3000</span>， <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        consle.log(<span class=\"string\">'animate done'</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .fadeOut(<span class=\"string\">'slow'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>停止动画stop([clearQueue], [gotoEnd])</p>\n</li>\n<li>判断是否处于动画状态 $(element).is(‘:animated’)</li>\n<li>延迟动画delay(duration),延迟一段时间开始动画，$(this).animate({left:’400px’}).delay(200);</li>\n<li>其他动画方法<ul>\n<li>toggle(speed, [callback]) 显示/隐藏元素</li>\n<li>slideToggle(speed, [easing], [callback])通过改变高度来显示/隐藏元素</li>\n<li>fadeTo(speed, opacity, [callback]) 通过改变不透明度来显示/隐藏元素</li>\n<li>fadeToggle(speed, [easing], [callback]) 通过不透明度来显示/隐藏元素。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"第四章-jQuery中的事件和动画\"><a href=\"#第四章-jQuery中的事件和动画\" class=\"headerlink\" title=\"第四章 jQuery中的事件和动画\"></a>第四章 jQuery中的事件和动画</h2><ul>\n<li>window.onload方法，相当于<code>jQuery</code>中的$(window).load(function(){})方法。都是等文档中的所有元素加载完成时调用，包括关联css文件和javascript文件。</li>\n<li>$(document).ready(function() {})则不会等待关联文件下载完，在DOM准备好之后就会调用。</li>\n<li>$(window).load(function(){})可以调用多次，都会执行，而window.onload只会调用最后一次赋予的函数。</li>\n<li>$(document).ready(function() {})可以简写为$(function() {});</li>\n</ul>","more":"<h3 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h3><ul>\n<li><p>bind(type [, data], fn);第1个参数是事件类型，包括focus、load、click、dbclik等。，第2个参数可选，作为event.data传递，第3个参数是回调函数。示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#panel h5.head'</span>).bind(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        $(<span class=\"keyword\">this</span>).next().show();</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>bind函数可以级联，如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).bind(<span class=\"string\">'mouseover'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().show();</div><div class=\"line\">&#125;).bind(<span class=\"string\">'mouseout'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>bind可以简写，如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().toggle();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>合成事件</p>\n<p>  <code>jQuery</code>有两个合成事件，hover()和toggle(),都有两个回调函数作为参数，可以看成是语法糖。hover表示移入移出两个事件，toggle表示前后两次点击事件，如</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).hover(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().show(); <span class=\"comment\">//划过时显示下一个元素</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide(); <span class=\"comment\">//划出隐藏下一个元素</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel h5.head'</span>).toggle(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().show(); <span class=\"comment\">//点击时显示下一个元素</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).next().hide(); <span class=\"comment\">//再次点击时隐藏下一个元素</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>事件对象的属性</p>\n<ul>\n<li>event.type 事件类型，字符串格式，如’click’, ‘dbclick’, ‘load’等。</li>\n<li>event.preventDefault()阻止默认行为，可以用return false代替。</li>\n<li>event.stopProgagation()组织事件冒泡，可以用return false代替。</li>\n<li>event.target 触发事件的元素。</li>\n<li>event.pageX event.pageY,相对于页面的x，y坐标。</li>\n<li>event.which 不同事件含义不同，鼠标事件表示那个键，键盘事件表示键值。</li>\n<li>event.metaKey ctl键是否按下。</li>\n</ul>\n</li>\n<li>移除事件 unbind([type],[data]) <ul>\n<li>如果没有参数，表示删除所有事件。</li>\n<li>如果只提供type，表示移除所有type对应的事件回调。</li>\n<li>如果传递了2个参数，表示对应的处理函数会被删除。</li>\n</ul>\n</li>\n<li>单次事件 one(type, [data], fn);执行一次后，事件回被移除。</li>\n<li><p>事件模拟</p>\n<ul>\n<li>原生事件 $(‘#btn’).trigger(‘click’)或者$(‘#btn’).click();</li>\n<li>自定义事件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#btn'</span>).bind(<span class=\"string\">'myClick'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#test'</span>).append(<span class=\"string\">'&amp;lt;p&gt;我的自定义事件&amp;lt;/p&gt;'</span>)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).trigger(<span class=\"string\">'myClick'</span>); <span class=\"comment\">//触发事件。</span></div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">`    </span></div><div class=\"line\">- 传递数据</div><div class=\"line\">`<span class=\"string\">``</span>javascript</div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).bind(<span class=\"string\">'myClick'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event, msg1, msg2</span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#test'</span>).append(<span class=\"string\">'&amp;lt;p&gt;我的自定义事件&amp;lt;/p&gt;'</span>)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).trigger(<span class=\"string\">'myClick'</span>. [<span class=\"string\">'参数1'</span>，<span class=\"string\">'参数2'</span>]); <span class=\"comment\">//触发事件。</span></div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">`   </span></div><div class=\"line\">- 执行默认操作 triggerHandler，例如，只触发focus事件，但是不获取焦点（浏览器默认行为）</div><div class=\"line\">`<span class=\"string\">``</span>javascript</div><div class=\"line\">$(<span class=\"string\">'input'</span>).triggerHandler(<span class=\"string\">'focus'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>事件命名空间</p>\n<ul>\n<li>添加命名空间<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#div'</span>).bind(<span class=\"string\">'mouseover.plugin'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;)</div><div class=\"line\">$(<span class=\"string\">'#btn'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#div'</span>).unbind(<span class=\"string\">'.plugin'</span>); <span class=\"comment\">//移除上面的事件。</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h2><ul>\n<li>show(duration) 显示元素，duration不为0时，表示显示动画。将元素display属性从’none‘设置为原来的值</li>\n<li>hide(duration) 隐藏元素，duration不为0时，表示隐藏动画。将元素display属性设置为’none’</li>\n<li>fadeIn(duration) 与show一样，但是不改变display样式。</li>\n<li>fadeOut(duration) 与hide一样，但是不改变display样式。</li>\n<li>slideUp(duration)和slideDown(duration)，只改变高度。</li>\n<li><p>animate(param, speed, callback)</p>\n<ul>\n<li>param 包含样式属性值，如{left: ‘400px’, top: ‘400px’}，可累加或累减，如{left: ‘+=400px’}</li>\n<li>speed 动画时间</li>\n<li><p>callback 动画完成回调<br>-累加动画</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#panel'</span>).animate(&#123;left:<span class=\"string\">'400px'</span>, height:<span class=\"string\">'200px'</span>, opacity:<span class=\"number\">1</span>&#125;, <span class=\"number\">3000</span>)</div><div class=\"line\">    .animate(&#123;top:<span class=\"string\">'200px'</span>, width:<span class=\"string\">'200px'</span>&#125;, <span class=\"number\">3000</span>， <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        consle.log(<span class=\"string\">'animate done'</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .fadeOut(<span class=\"string\">'slow'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>停止动画stop([clearQueue], [gotoEnd])</p>\n</li>\n<li>判断是否处于动画状态 $(element).is(‘:animated’)</li>\n<li>延迟动画delay(duration),延迟一段时间开始动画，$(this).animate({left:’400px’}).delay(200);</li>\n<li>其他动画方法<ul>\n<li>toggle(speed, [callback]) 显示/隐藏元素</li>\n<li>slideToggle(speed, [easing], [callback])通过改变高度来显示/隐藏元素</li>\n<li>fadeTo(speed, opacity, [callback]) 通过改变不透明度来显示/隐藏元素</li>\n<li>fadeToggle(speed, [easing], [callback]) 通过不透明度来显示/隐藏元素。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>"},{"title":"部署HEXO博客到阿里云ECS","date":"2017-12-18T09:46:56.000Z","_content":"\n本文假设你具备如下条件：\n- 熟悉hexo操作\n- 熟悉linux基本指令\n- 熟悉express(nodejs)框架\n- 在github上已经部署了hexo博客\n\n## ECS准备\n### 购买ECS\n前往阿里云购买[ECS](https://ecs-buy.aliyun.com)，根据个人需要和财务状况，选择对应规模的ECS。\n我购买的是这个配置，费用是330.00¥。\n![img](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/a6b1134939a35cdf34dab8f9d564c777b7aafbb5518fae80c8450e0ba8d5280bf07d7e677b3b3c2028e2f7a5c778e5a8?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=1GE9BH_P%29%600QGAZLQY6E%7D0G.png&size=1024)\n\n### 配置ECS\n购买之后，可以远程登录ECS实例，可以选择网页登录，即点击上图的远程连接，此时需要输入远程连接密码。\n![img](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/8f23cd09eff9be82c51f1dcbe340257766d02aae3ea6c33a920a3fbdf917426660d0df1eecce1e99548aa7aafad45df3?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=2RK%5D3A%28ZCW9N7%7DRB801Q92V.png&size=1024)\n这个密码在创建ECS实例的时候会提供给你，点击确认之后，就可以登录root用户。\n\n我的本地是ubuntu系统，所以可以利用ssh登录。\n``` bash\nssh root@xx.xx.xx.xx\n```\n登录之后，创建一个非root用户。\n``` bash\nadduser yinlijun\n```\n切换到该用户\n``` bash\nsu yinlijun\n```\n### 上传本地公钥，方便部署。\n``` bash\nssh-copy-id -i ~/.ssh/id_rsa.pub yinlijun@xx.xx.xx.xx\n```\n\n如果需要绑定域名，还需要如下申请域名和备案：\n\n## 购买域名\n前往[阿里域名服务](https://wanwang.aliyun.com/domain)选购域名。\n\n## 域名备案\n前往[备案专区](https://beian.aliyun.com/)，进行备案，需要时间比较长，我花了12天，备案完成后，阿里云会给你的ECS续费，续费的天数就是你的备案花的天数。\n期间要填写资料，上传备案照片等等。\n\n备案完成之后，需要设置域名解析。\n![img](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/02ad73354fe97dd378b486349444aeebd3f5fc81ebe1853b1773f70416c90e7878a24b24afa25c27f122c679c20d523b?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=AJTAI%40%601%7DB3GU6Q%60ZWZO%24Z3.png&size=1024)\n上图的记录值，填写你的ECS的公网IP。\n\n### 在ECS上创建hexo仓库\n````\ngit init --bare ~/project/hexo.git\n````\n\n### 捕获post操作\n\n``` bash\ntouch ~/project/hexo.git/hooks/post-receive\n```\n\n输入如下内容\n\n``` bash\n#!/bin/bash -l\nGIT_REPO=<到hexo.git的目录>\nTMP_GIT_CLONE=<到临时blog的目录>\nPUBLIC_WWW=<到blog服务的目录/public/blog>\n\nrm -rf ${TMP_GIT_CLONE}\ngit clone ${GIT_REPO} ${TMP_GIT_CLONE}\nrm -rf ${PUBLIC_WWW}/*\ncp -rf ${TMP_GIT_CLONE}/* ${PUBLIC_WWW} \n```\n\n### 本地blog(express)服务\n新建express服务\n``` bash\nexpress blog-server\n```\n\n修改app.js，配置静态文件目录\n``` javascript\napp.use(express.static(path.join(__dirname, 'public/blog/')));\n```\n### 启动blog服务\n``` bash\npm2 start bin/www\n```\n### 安装nginx，反向代理二级域名\n通过域名访问默认的80端口，blog默认监听3000端口，因此需要配置代理。\n创建blog.conf配置文件\n``` bash\ntouch /etc/nginx/conf.d/blog.conf\n```\n输入如下内容\n``` \nserver {\n    listen 80;\n    server_name yinlijun.com www.yinlijun.com bloc.yinlijun.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n```\n\n## 本地操作\n\n### 把github上的blog目录clone下来\n``` bash\ngit clone git@github.com:yinlijun2004/johnny-blog.git\n```\n如果你原来没有在github上部署hexo博客，也可以用hexo新建一个，然后托管到某个git仓库。\n\n### 修改_config.yml配置\n```\ndeploy:\n  type: git\n  repo: yinlijun@www.yinlijun.com:project/hexo.git\n  branch: master\n```\n\n### 发布博客\n撰写好博客后，如下命令部署。\n``` bash\nhexo clean\nhexo g\nhexo d\n```\n\n### 最终效果\n[www.yinlijun.com](http://www.yinlijun.com)\n\n## 有可能碰到的问题\n\n### 外网无法访问端口\n需要配置安全组规则。\n![img](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/87f1aead6dd1582f56cae6e0179540db4090e83c7f3636e20bd26f24faf1bb04340403773fc999742081809ea9168224?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=3VAK%25~%7DO0ZZZXL9M%60%2963UF7.png&size=1024)\n上图是默认开通的端口，如果你的端口不在里面，则需要自行添加安全组规则。\n\n### hexo deploy之后没有反应\n- 检查有没有上传本机公钥\n- 检查hexo.git仓库的路径是否正确\n- 检查备案的域名是否能正常访问\n\n\n\n\n","source":"_posts/hexo-to-ali-ecs.md","raw":"---\ntitle: 部署HEXO博客到阿里云ECS\ndate: 2017-12-18 17:46:56\ntags: [hexo, ECS, git]\n---\n\n本文假设你具备如下条件：\n- 熟悉hexo操作\n- 熟悉linux基本指令\n- 熟悉express(nodejs)框架\n- 在github上已经部署了hexo博客\n\n## ECS准备\n### 购买ECS\n前往阿里云购买[ECS](https://ecs-buy.aliyun.com)，根据个人需要和财务状况，选择对应规模的ECS。\n我购买的是这个配置，费用是330.00¥。\n![img](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/a6b1134939a35cdf34dab8f9d564c777b7aafbb5518fae80c8450e0ba8d5280bf07d7e677b3b3c2028e2f7a5c778e5a8?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=1GE9BH_P%29%600QGAZLQY6E%7D0G.png&size=1024)\n\n### 配置ECS\n购买之后，可以远程登录ECS实例，可以选择网页登录，即点击上图的远程连接，此时需要输入远程连接密码。\n![img](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/8f23cd09eff9be82c51f1dcbe340257766d02aae3ea6c33a920a3fbdf917426660d0df1eecce1e99548aa7aafad45df3?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=2RK%5D3A%28ZCW9N7%7DRB801Q92V.png&size=1024)\n这个密码在创建ECS实例的时候会提供给你，点击确认之后，就可以登录root用户。\n\n我的本地是ubuntu系统，所以可以利用ssh登录。\n``` bash\nssh root@xx.xx.xx.xx\n```\n登录之后，创建一个非root用户。\n``` bash\nadduser yinlijun\n```\n切换到该用户\n``` bash\nsu yinlijun\n```\n### 上传本地公钥，方便部署。\n``` bash\nssh-copy-id -i ~/.ssh/id_rsa.pub yinlijun@xx.xx.xx.xx\n```\n\n如果需要绑定域名，还需要如下申请域名和备案：\n\n## 购买域名\n前往[阿里域名服务](https://wanwang.aliyun.com/domain)选购域名。\n\n## 域名备案\n前往[备案专区](https://beian.aliyun.com/)，进行备案，需要时间比较长，我花了12天，备案完成后，阿里云会给你的ECS续费，续费的天数就是你的备案花的天数。\n期间要填写资料，上传备案照片等等。\n\n备案完成之后，需要设置域名解析。\n![img](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/02ad73354fe97dd378b486349444aeebd3f5fc81ebe1853b1773f70416c90e7878a24b24afa25c27f122c679c20d523b?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=AJTAI%40%601%7DB3GU6Q%60ZWZO%24Z3.png&size=1024)\n上图的记录值，填写你的ECS的公网IP。\n\n### 在ECS上创建hexo仓库\n````\ngit init --bare ~/project/hexo.git\n````\n\n### 捕获post操作\n\n``` bash\ntouch ~/project/hexo.git/hooks/post-receive\n```\n\n输入如下内容\n\n``` bash\n#!/bin/bash -l\nGIT_REPO=<到hexo.git的目录>\nTMP_GIT_CLONE=<到临时blog的目录>\nPUBLIC_WWW=<到blog服务的目录/public/blog>\n\nrm -rf ${TMP_GIT_CLONE}\ngit clone ${GIT_REPO} ${TMP_GIT_CLONE}\nrm -rf ${PUBLIC_WWW}/*\ncp -rf ${TMP_GIT_CLONE}/* ${PUBLIC_WWW} \n```\n\n### 本地blog(express)服务\n新建express服务\n``` bash\nexpress blog-server\n```\n\n修改app.js，配置静态文件目录\n``` javascript\napp.use(express.static(path.join(__dirname, 'public/blog/')));\n```\n### 启动blog服务\n``` bash\npm2 start bin/www\n```\n### 安装nginx，反向代理二级域名\n通过域名访问默认的80端口，blog默认监听3000端口，因此需要配置代理。\n创建blog.conf配置文件\n``` bash\ntouch /etc/nginx/conf.d/blog.conf\n```\n输入如下内容\n``` \nserver {\n    listen 80;\n    server_name yinlijun.com www.yinlijun.com bloc.yinlijun.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n```\n\n## 本地操作\n\n### 把github上的blog目录clone下来\n``` bash\ngit clone git@github.com:yinlijun2004/johnny-blog.git\n```\n如果你原来没有在github上部署hexo博客，也可以用hexo新建一个，然后托管到某个git仓库。\n\n### 修改_config.yml配置\n```\ndeploy:\n  type: git\n  repo: yinlijun@www.yinlijun.com:project/hexo.git\n  branch: master\n```\n\n### 发布博客\n撰写好博客后，如下命令部署。\n``` bash\nhexo clean\nhexo g\nhexo d\n```\n\n### 最终效果\n[www.yinlijun.com](http://www.yinlijun.com)\n\n## 有可能碰到的问题\n\n### 外网无法访问端口\n需要配置安全组规则。\n![img](https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/87f1aead6dd1582f56cae6e0179540db4090e83c7f3636e20bd26f24faf1bb04340403773fc999742081809ea9168224?pictype=scale&from=30113&version=2.0.0.2&uin=474724984&fname=3VAK%25~%7DO0ZZZXL9M%60%2963UF7.png&size=1024)\n上图是默认开通的端口，如果你的端口不在里面，则需要自行添加安全组规则。\n\n### hexo deploy之后没有反应\n- 检查有没有上传本机公钥\n- 检查hexo.git仓库的路径是否正确\n- 检查备案的域名是否能正常访问\n\n\n\n\n","slug":"hexo-to-ali-ecs","published":1,"updated":"2017-12-19T06:55:27.476Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o3f000biwl7b2ypkb78","content":"<p>本文假设你具备如下条件：</p>\n<ul>\n<li>熟悉hexo操作</li>\n<li>熟悉linux基本指令</li>\n<li>熟悉express(nodejs)框架</li>\n<li>在github上已经部署了hexo博客</li>\n</ul>\n<h2 id=\"ECS准备\"><a href=\"#ECS准备\" class=\"headerlink\" title=\"ECS准备\"></a>ECS准备</h2><h3 id=\"购买ECS\"><a href=\"#购买ECS\" class=\"headerlink\" title=\"购买ECS\"></a>购买ECS</h3><p>前往阿里云购买<a href=\"https://ecs-buy.aliyun.com\" target=\"_blank\" rel=\"external\">ECS</a>，根据个人需要和财务状况，选择对应规模的ECS。<br>我购买的是这个配置，费用是330.00¥。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/a6b1134939a35cdf34dab8f9d564c777b7aafbb5518fae80c8450e0ba8d5280bf07d7e677b3b3c2028e2f7a5c778e5a8?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=1GE9BH_P%29%600QGAZLQY6E%7D0G.png&amp;size=1024\" alt=\"img\"></p>\n<h3 id=\"配置ECS\"><a href=\"#配置ECS\" class=\"headerlink\" title=\"配置ECS\"></a>配置ECS</h3><p>购买之后，可以远程登录ECS实例，可以选择网页登录，即点击上图的远程连接，此时需要输入远程连接密码。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/8f23cd09eff9be82c51f1dcbe340257766d02aae3ea6c33a920a3fbdf917426660d0df1eecce1e99548aa7aafad45df3?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=2RK%5D3A%28ZCW9N7%7DRB801Q92V.png&amp;size=1024\" alt=\"img\"><br>这个密码在创建ECS实例的时候会提供给你，点击确认之后，就可以登录root用户。</p>\n<p>我的本地是ubuntu系统，所以可以利用ssh登录。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh root@xx.xx.xx.xx</div></pre></td></tr></table></figure></p>\n<p>登录之后，创建一个非root用户。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adduser yinlijun</div></pre></td></tr></table></figure></p>\n<p>切换到该用户<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">su yinlijun</div></pre></td></tr></table></figure></p>\n<h3 id=\"上传本地公钥，方便部署。\"><a href=\"#上传本地公钥，方便部署。\" class=\"headerlink\" title=\"上传本地公钥，方便部署。\"></a>上传本地公钥，方便部署。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-copy-id -i ~/.ssh/id_rsa.pub yinlijun@xx.xx.xx.xx</div></pre></td></tr></table></figure>\n<p>如果需要绑定域名，还需要如下申请域名和备案：</p>\n<h2 id=\"购买域名\"><a href=\"#购买域名\" class=\"headerlink\" title=\"购买域名\"></a>购买域名</h2><p>前往<a href=\"https://wanwang.aliyun.com/domain\" target=\"_blank\" rel=\"external\">阿里域名服务</a>选购域名。</p>\n<h2 id=\"域名备案\"><a href=\"#域名备案\" class=\"headerlink\" title=\"域名备案\"></a>域名备案</h2><p>前往<a href=\"https://beian.aliyun.com/\" target=\"_blank\" rel=\"external\">备案专区</a>，进行备案，需要时间比较长，我花了12天，备案完成后，阿里云会给你的ECS续费，续费的天数就是你的备案花的天数。<br>期间要填写资料，上传备案照片等等。</p>\n<p>备案完成之后，需要设置域名解析。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/02ad73354fe97dd378b486349444aeebd3f5fc81ebe1853b1773f70416c90e7878a24b24afa25c27f122c679c20d523b?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=AJTAI%40%601%7DB3GU6Q%60ZWZO%24Z3.png&amp;size=1024\" alt=\"img\"><br>上图的记录值，填写你的ECS的公网IP。</p>\n<h3 id=\"在ECS上创建hexo仓库\"><a href=\"#在ECS上创建hexo仓库\" class=\"headerlink\" title=\"在ECS上创建hexo仓库\"></a>在ECS上创建hexo仓库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init --bare ~/project/hexo.git</div></pre></td></tr></table></figure>\n<h3 id=\"捕获post操作\"><a href=\"#捕获post操作\" class=\"headerlink\" title=\"捕获post操作\"></a>捕获post操作</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">touch ~/project/hexo.git/hooks/post-receive</div></pre></td></tr></table></figure>\n<p>输入如下内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/bin/bash -l</span></div><div class=\"line\">GIT_REPO=&lt;到hexo.git的目录&gt;</div><div class=\"line\">TMP_GIT_CLONE=&lt;到临时blog的目录&gt;</div><div class=\"line\">PUBLIC_WWW=&lt;到blog服务的目录/public/blog&gt;</div><div class=\"line\"></div><div class=\"line\">rm -rf <span class=\"variable\">$&#123;TMP_GIT_CLONE&#125;</span></div><div class=\"line\">git <span class=\"built_in\">clone</span> <span class=\"variable\">$&#123;GIT_REPO&#125;</span> <span class=\"variable\">$&#123;TMP_GIT_CLONE&#125;</span></div><div class=\"line\">rm -rf <span class=\"variable\">$&#123;PUBLIC_WWW&#125;</span>/*</div><div class=\"line\">cp -rf <span class=\"variable\">$&#123;TMP_GIT_CLONE&#125;</span>/* <span class=\"variable\">$&#123;PUBLIC_WWW&#125;</span></div></pre></td></tr></table></figure>\n<h3 id=\"本地blog-express-服务\"><a href=\"#本地blog-express-服务\" class=\"headerlink\" title=\"本地blog(express)服务\"></a>本地blog(express)服务</h3><p>新建express服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">express blog-server</div></pre></td></tr></table></figure></p>\n<p>修改app.js，配置静态文件目录<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use(express.static(path.join(__dirname, <span class=\"string\">'public/blog/'</span>)));</div></pre></td></tr></table></figure></p>\n<h3 id=\"启动blog服务\"><a href=\"#启动blog服务\" class=\"headerlink\" title=\"启动blog服务\"></a>启动blog服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pm2 start bin/www</div></pre></td></tr></table></figure>\n<h3 id=\"安装nginx，反向代理二级域名\"><a href=\"#安装nginx，反向代理二级域名\" class=\"headerlink\" title=\"安装nginx，反向代理二级域名\"></a>安装nginx，反向代理二级域名</h3><p>通过域名访问默认的80端口，blog默认监听3000端口，因此需要配置代理。<br>创建blog.conf配置文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">touch /etc/nginx/conf.d/blog.conf</div></pre></td></tr></table></figure></p>\n<p>输入如下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen 80;</div><div class=\"line\">    server_name yinlijun.com www.yinlijun.com bloc.yinlijun.com;</div><div class=\"line\"></div><div class=\"line\">    location / &#123;</div><div class=\"line\">        proxy_pass http://127.0.0.1:3000;</div><div class=\"line\">        proxy_http_version 1.1;</div><div class=\"line\">        proxy_set_header Upgrade $http_upgrade;</div><div class=\"line\">        proxy_set_header Connection &apos;upgrade&apos;;</div><div class=\"line\">        proxy_set_header Host $host;</div><div class=\"line\">        proxy_cache_bypass $http_upgrade;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"本地操作\"><a href=\"#本地操作\" class=\"headerlink\" title=\"本地操作\"></a>本地操作</h2><h3 id=\"把github上的blog目录clone下来\"><a href=\"#把github上的blog目录clone下来\" class=\"headerlink\" title=\"把github上的blog目录clone下来\"></a>把github上的blog目录clone下来</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:yinlijun2004/johnny-blog.git</div></pre></td></tr></table></figure>\n<p>如果你原来没有在github上部署hexo博客，也可以用hexo新建一个，然后托管到某个git仓库。</p>\n<h3 id=\"修改-config-yml配置\"><a href=\"#修改-config-yml配置\" class=\"headerlink\" title=\"修改_config.yml配置\"></a>修改_config.yml配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: yinlijun@www.yinlijun.com:project/hexo.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<h3 id=\"发布博客\"><a href=\"#发布博客\" class=\"headerlink\" title=\"发布博客\"></a>发布博客</h3><p>撰写好博客后，如下命令部署。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\">hexo g</div><div class=\"line\">hexo d</div></pre></td></tr></table></figure></p>\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p><a href=\"http://www.yinlijun.com\">www.yinlijun.com</a></p>\n<h2 id=\"有可能碰到的问题\"><a href=\"#有可能碰到的问题\" class=\"headerlink\" title=\"有可能碰到的问题\"></a>有可能碰到的问题</h2><h3 id=\"外网无法访问端口\"><a href=\"#外网无法访问端口\" class=\"headerlink\" title=\"外网无法访问端口\"></a>外网无法访问端口</h3><p>需要配置安全组规则。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/87f1aead6dd1582f56cae6e0179540db4090e83c7f3636e20bd26f24faf1bb04340403773fc999742081809ea9168224?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=3VAK%25~%7DO0ZZZXL9M%60%2963UF7.png&amp;size=1024\" alt=\"img\"><br>上图是默认开通的端口，如果你的端口不在里面，则需要自行添加安全组规则。</p>\n<h3 id=\"hexo-deploy之后没有反应\"><a href=\"#hexo-deploy之后没有反应\" class=\"headerlink\" title=\"hexo deploy之后没有反应\"></a>hexo deploy之后没有反应</h3><ul>\n<li>检查有没有上传本机公钥</li>\n<li>检查hexo.git仓库的路径是否正确</li>\n<li>检查备案的域名是否能正常访问</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>本文假设你具备如下条件：</p>\n<ul>\n<li>熟悉hexo操作</li>\n<li>熟悉linux基本指令</li>\n<li>熟悉express(nodejs)框架</li>\n<li>在github上已经部署了hexo博客</li>\n</ul>\n<h2 id=\"ECS准备\"><a href=\"#ECS准备\" class=\"headerlink\" title=\"ECS准备\"></a>ECS准备</h2><h3 id=\"购买ECS\"><a href=\"#购买ECS\" class=\"headerlink\" title=\"购买ECS\"></a>购买ECS</h3><p>前往阿里云购买<a href=\"https://ecs-buy.aliyun.com\" target=\"_blank\" rel=\"external\">ECS</a>，根据个人需要和财务状况，选择对应规模的ECS。<br>我购买的是这个配置，费用是330.00¥。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/a6b1134939a35cdf34dab8f9d564c777b7aafbb5518fae80c8450e0ba8d5280bf07d7e677b3b3c2028e2f7a5c778e5a8?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=1GE9BH_P%29%600QGAZLQY6E%7D0G.png&amp;size=1024\" alt=\"img\"></p>\n<h3 id=\"配置ECS\"><a href=\"#配置ECS\" class=\"headerlink\" title=\"配置ECS\"></a>配置ECS</h3><p>购买之后，可以远程登录ECS实例，可以选择网页登录，即点击上图的远程连接，此时需要输入远程连接密码。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/8f23cd09eff9be82c51f1dcbe340257766d02aae3ea6c33a920a3fbdf917426660d0df1eecce1e99548aa7aafad45df3?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=2RK%5D3A%28ZCW9N7%7DRB801Q92V.png&amp;size=1024\" alt=\"img\"><br>这个密码在创建ECS实例的时候会提供给你，点击确认之后，就可以登录root用户。</p>\n<p>我的本地是ubuntu系统，所以可以利用ssh登录。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh root@xx.xx.xx.xx</div></pre></td></tr></table></figure></p>\n<p>登录之后，创建一个非root用户。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adduser yinlijun</div></pre></td></tr></table></figure></p>\n<p>切换到该用户<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">su yinlijun</div></pre></td></tr></table></figure></p>\n<h3 id=\"上传本地公钥，方便部署。\"><a href=\"#上传本地公钥，方便部署。\" class=\"headerlink\" title=\"上传本地公钥，方便部署。\"></a>上传本地公钥，方便部署。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-copy-id -i ~/.ssh/id_rsa.pub yinlijun@xx.xx.xx.xx</div></pre></td></tr></table></figure>\n<p>如果需要绑定域名，还需要如下申请域名和备案：</p>\n<h2 id=\"购买域名\"><a href=\"#购买域名\" class=\"headerlink\" title=\"购买域名\"></a>购买域名</h2><p>前往<a href=\"https://wanwang.aliyun.com/domain\" target=\"_blank\" rel=\"external\">阿里域名服务</a>选购域名。</p>\n<h2 id=\"域名备案\"><a href=\"#域名备案\" class=\"headerlink\" title=\"域名备案\"></a>域名备案</h2><p>前往<a href=\"https://beian.aliyun.com/\" target=\"_blank\" rel=\"external\">备案专区</a>，进行备案，需要时间比较长，我花了12天，备案完成后，阿里云会给你的ECS续费，续费的天数就是你的备案花的天数。<br>期间要填写资料，上传备案照片等等。</p>\n<p>备案完成之后，需要设置域名解析。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/02ad73354fe97dd378b486349444aeebd3f5fc81ebe1853b1773f70416c90e7878a24b24afa25c27f122c679c20d523b?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=AJTAI%40%601%7DB3GU6Q%60ZWZO%24Z3.png&amp;size=1024\" alt=\"img\"><br>上图的记录值，填写你的ECS的公网IP。</p>\n<h3 id=\"在ECS上创建hexo仓库\"><a href=\"#在ECS上创建hexo仓库\" class=\"headerlink\" title=\"在ECS上创建hexo仓库\"></a>在ECS上创建hexo仓库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init --bare ~/project/hexo.git</div></pre></td></tr></table></figure>\n<h3 id=\"捕获post操作\"><a href=\"#捕获post操作\" class=\"headerlink\" title=\"捕获post操作\"></a>捕获post操作</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">touch ~/project/hexo.git/hooks/post-receive</div></pre></td></tr></table></figure>\n<p>输入如下内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/bin/bash -l</span></div><div class=\"line\">GIT_REPO=&lt;到hexo.git的目录&gt;</div><div class=\"line\">TMP_GIT_CLONE=&lt;到临时blog的目录&gt;</div><div class=\"line\">PUBLIC_WWW=&lt;到blog服务的目录/public/blog&gt;</div><div class=\"line\"></div><div class=\"line\">rm -rf <span class=\"variable\">$&#123;TMP_GIT_CLONE&#125;</span></div><div class=\"line\">git <span class=\"built_in\">clone</span> <span class=\"variable\">$&#123;GIT_REPO&#125;</span> <span class=\"variable\">$&#123;TMP_GIT_CLONE&#125;</span></div><div class=\"line\">rm -rf <span class=\"variable\">$&#123;PUBLIC_WWW&#125;</span>/*</div><div class=\"line\">cp -rf <span class=\"variable\">$&#123;TMP_GIT_CLONE&#125;</span>/* <span class=\"variable\">$&#123;PUBLIC_WWW&#125;</span></div></pre></td></tr></table></figure>\n<h3 id=\"本地blog-express-服务\"><a href=\"#本地blog-express-服务\" class=\"headerlink\" title=\"本地blog(express)服务\"></a>本地blog(express)服务</h3><p>新建express服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">express blog-server</div></pre></td></tr></table></figure></p>\n<p>修改app.js，配置静态文件目录<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use(express.static(path.join(__dirname, <span class=\"string\">'public/blog/'</span>)));</div></pre></td></tr></table></figure></p>\n<h3 id=\"启动blog服务\"><a href=\"#启动blog服务\" class=\"headerlink\" title=\"启动blog服务\"></a>启动blog服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pm2 start bin/www</div></pre></td></tr></table></figure>\n<h3 id=\"安装nginx，反向代理二级域名\"><a href=\"#安装nginx，反向代理二级域名\" class=\"headerlink\" title=\"安装nginx，反向代理二级域名\"></a>安装nginx，反向代理二级域名</h3><p>通过域名访问默认的80端口，blog默认监听3000端口，因此需要配置代理。<br>创建blog.conf配置文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">touch /etc/nginx/conf.d/blog.conf</div></pre></td></tr></table></figure></p>\n<p>输入如下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen 80;</div><div class=\"line\">    server_name yinlijun.com www.yinlijun.com bloc.yinlijun.com;</div><div class=\"line\"></div><div class=\"line\">    location / &#123;</div><div class=\"line\">        proxy_pass http://127.0.0.1:3000;</div><div class=\"line\">        proxy_http_version 1.1;</div><div class=\"line\">        proxy_set_header Upgrade $http_upgrade;</div><div class=\"line\">        proxy_set_header Connection &apos;upgrade&apos;;</div><div class=\"line\">        proxy_set_header Host $host;</div><div class=\"line\">        proxy_cache_bypass $http_upgrade;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"本地操作\"><a href=\"#本地操作\" class=\"headerlink\" title=\"本地操作\"></a>本地操作</h2><h3 id=\"把github上的blog目录clone下来\"><a href=\"#把github上的blog目录clone下来\" class=\"headerlink\" title=\"把github上的blog目录clone下来\"></a>把github上的blog目录clone下来</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:yinlijun2004/johnny-blog.git</div></pre></td></tr></table></figure>\n<p>如果你原来没有在github上部署hexo博客，也可以用hexo新建一个，然后托管到某个git仓库。</p>\n<h3 id=\"修改-config-yml配置\"><a href=\"#修改-config-yml配置\" class=\"headerlink\" title=\"修改_config.yml配置\"></a>修改_config.yml配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: yinlijun@www.yinlijun.com:project/hexo.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<h3 id=\"发布博客\"><a href=\"#发布博客\" class=\"headerlink\" title=\"发布博客\"></a>发布博客</h3><p>撰写好博客后，如下命令部署。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\">hexo g</div><div class=\"line\">hexo d</div></pre></td></tr></table></figure></p>\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p><a href=\"http://www.yinlijun.com\">www.yinlijun.com</a></p>\n<h2 id=\"有可能碰到的问题\"><a href=\"#有可能碰到的问题\" class=\"headerlink\" title=\"有可能碰到的问题\"></a>有可能碰到的问题</h2><h3 id=\"外网无法访问端口\"><a href=\"#外网无法访问端口\" class=\"headerlink\" title=\"外网无法访问端口\"></a>外网无法访问端口</h3><p>需要配置安全组规则。<br><img src=\"https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/87f1aead6dd1582f56cae6e0179540db4090e83c7f3636e20bd26f24faf1bb04340403773fc999742081809ea9168224?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=3VAK%25~%7DO0ZZZXL9M%60%2963UF7.png&amp;size=1024\" alt=\"img\"><br>上图是默认开通的端口，如果你的端口不在里面，则需要自行添加安全组规则。</p>\n<h3 id=\"hexo-deploy之后没有反应\"><a href=\"#hexo-deploy之后没有反应\" class=\"headerlink\" title=\"hexo deploy之后没有反应\"></a>hexo deploy之后没有反应</h3><ul>\n<li>检查有没有上传本机公钥</li>\n<li>检查hexo.git仓库的路径是否正确</li>\n<li>检查备案的域名是否能正常访问</li>\n</ul>\n"},{"title":"解决 /dev/kvm is not found 的问题","date":"2016-11-28T11:44:23.000Z","_content":"\n## 问题出现环境\n- Ubuntu 12.04\n- Android Studio 2.2.2\n\n## 解决步骤\n### 开启VT-x\n在ubuntu上使用Android Studio创建模拟器时，会提示一个错误：\n```\n/dev/kvm is not found\n```\n并且提示要在*BIOS*里面开启<font size='4em'>**VT-x**</font>。\n\n<!-- more -->\n重启电脑，按*DEL*键进入*BIOS*,发现确实没有启用，于是启用后再此重启电脑。\n\n此时打开Android Studio，仍然提示一样的错误。\n\n再次在网上搜寻，发现如下解决方案，记录一下。\n\n[http://askubuntu.com/questions/600727/replacement-for-haxm-on-ubuntu-says-intel-x86-emulator-accelerator-is-not-comp](http://askubuntu.com/questions/600727/replacement-for-haxm-on-ubuntu-says-intel-x86-emulator-accelerator-is-not-comp)\n\n### \nCheck if your CPU supports hardware virtualization, by typing:\n```\negrep -c '(vmx|svm)' /proc/cpuinfo\n```\nIf the result is 0, your CPU does not support hardware virtualization, which is necessary to run the KVM. If you get 1 or more, that means you’re fine.\n\nNext, install KVM. First make sure if your processor supports KVM by typing:\n```\nkvm-ok\n```\nYou will see this if that’s the case:\n\nINFO: Your CPU supports KVM extensions INFO: /dev/kvm exists KVM acceleration can be used\nIf this is the result, you need to turn on Intel VT in BIOS:\n\nINFO: KVM is disabled by your BIOS HINT: Enter your BIOS setup and enable Virtualization Technology (VT), and then hard poweroff/poweron your system KVM acceleration can NOT be used\nThe next step is to install the KVM and a few other packages needed. To do so, type:\n```\nsudo apt-get install qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils\n```\nAdd your user to some groups, replacing by your own username:\n```\nsudo adduser <user> libvirtd\nsudo adduser <user> kvm\n```\nCheck if everything is ok:\n```\nsudo virsh -c qemu:///system list\n```","source":"_posts/fix-dev-kvm-is-not-found.md","raw":"---\ntitle: 解决 /dev/kvm is not found 的问题\ntags:\n  - android\n  - ubuntu\n  - android studio\ndate: 2016-11-28 19:44:23\n---\n\n## 问题出现环境\n- Ubuntu 12.04\n- Android Studio 2.2.2\n\n## 解决步骤\n### 开启VT-x\n在ubuntu上使用Android Studio创建模拟器时，会提示一个错误：\n```\n/dev/kvm is not found\n```\n并且提示要在*BIOS*里面开启<font size='4em'>**VT-x**</font>。\n\n<!-- more -->\n重启电脑，按*DEL*键进入*BIOS*,发现确实没有启用，于是启用后再此重启电脑。\n\n此时打开Android Studio，仍然提示一样的错误。\n\n再次在网上搜寻，发现如下解决方案，记录一下。\n\n[http://askubuntu.com/questions/600727/replacement-for-haxm-on-ubuntu-says-intel-x86-emulator-accelerator-is-not-comp](http://askubuntu.com/questions/600727/replacement-for-haxm-on-ubuntu-says-intel-x86-emulator-accelerator-is-not-comp)\n\n### \nCheck if your CPU supports hardware virtualization, by typing:\n```\negrep -c '(vmx|svm)' /proc/cpuinfo\n```\nIf the result is 0, your CPU does not support hardware virtualization, which is necessary to run the KVM. If you get 1 or more, that means you’re fine.\n\nNext, install KVM. First make sure if your processor supports KVM by typing:\n```\nkvm-ok\n```\nYou will see this if that’s the case:\n\nINFO: Your CPU supports KVM extensions INFO: /dev/kvm exists KVM acceleration can be used\nIf this is the result, you need to turn on Intel VT in BIOS:\n\nINFO: KVM is disabled by your BIOS HINT: Enter your BIOS setup and enable Virtualization Technology (VT), and then hard poweroff/poweron your system KVM acceleration can NOT be used\nThe next step is to install the KVM and a few other packages needed. To do so, type:\n```\nsudo apt-get install qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils\n```\nAdd your user to some groups, replacing by your own username:\n```\nsudo adduser <user> libvirtd\nsudo adduser <user> kvm\n```\nCheck if everything is ok:\n```\nsudo virsh -c qemu:///system list\n```","slug":"fix-dev-kvm-is-not-found","published":1,"updated":"2017-05-25T03:41:18.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o3h000diwl73e1om14g","content":"<h2 id=\"问题出现环境\"><a href=\"#问题出现环境\" class=\"headerlink\" title=\"问题出现环境\"></a>问题出现环境</h2><ul>\n<li>Ubuntu 12.04</li>\n<li>Android Studio 2.2.2</li>\n</ul>\n<h2 id=\"解决步骤\"><a href=\"#解决步骤\" class=\"headerlink\" title=\"解决步骤\"></a>解决步骤</h2><h3 id=\"开启VT-x\"><a href=\"#开启VT-x\" class=\"headerlink\" title=\"开启VT-x\"></a>开启VT-x</h3><p>在ubuntu上使用Android Studio创建模拟器时，会提示一个错误：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/dev/kvm is not found</div></pre></td></tr></table></figure></p>\n<p>并且提示要在<em>BIOS</em>里面开启<font size=\"4em\"><strong>VT-x</strong></font>。</p>\n<a id=\"more\"></a>\n<p>重启电脑，按<em>DEL</em>键进入<em>BIOS</em>,发现确实没有启用，于是启用后再此重启电脑。</p>\n<p>此时打开Android Studio，仍然提示一样的错误。</p>\n<p>再次在网上搜寻，发现如下解决方案，记录一下。</p>\n<p><a href=\"http://askubuntu.com/questions/600727/replacement-for-haxm-on-ubuntu-says-intel-x86-emulator-accelerator-is-not-comp\" target=\"_blank\" rel=\"external\">http://askubuntu.com/questions/600727/replacement-for-haxm-on-ubuntu-says-intel-x86-emulator-accelerator-is-not-comp</a></p>\n<p>###<br>Check if your CPU supports hardware virtualization, by typing:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">egrep -c &apos;(vmx|svm)&apos; /proc/cpuinfo</div></pre></td></tr></table></figure></p>\n<p>If the result is 0, your CPU does not support hardware virtualization, which is necessary to run the KVM. If you get 1 or more, that means you’re fine.</p>\n<p>Next, install KVM. First make sure if your processor supports KVM by typing:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">kvm-ok</div></pre></td></tr></table></figure></p>\n<p>You will see this if that’s the case:</p>\n<p>INFO: Your CPU supports KVM extensions INFO: /dev/kvm exists KVM acceleration can be used<br>If this is the result, you need to turn on Intel VT in BIOS:</p>\n<p>INFO: KVM is disabled by your BIOS HINT: Enter your BIOS setup and enable Virtualization Technology (VT), and then hard poweroff/poweron your system KVM acceleration can NOT be used<br>The next step is to install the KVM and a few other packages needed. To do so, type:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils</div></pre></td></tr></table></figure></p>\n<p>Add your user to some groups, replacing by your own username:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo adduser &lt;user&gt; libvirtd</div><div class=\"line\">sudo adduser &lt;user&gt; kvm</div></pre></td></tr></table></figure></p>\n<p>Check if everything is ok:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo virsh -c qemu:///system list</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"问题出现环境\"><a href=\"#问题出现环境\" class=\"headerlink\" title=\"问题出现环境\"></a>问题出现环境</h2><ul>\n<li>Ubuntu 12.04</li>\n<li>Android Studio 2.2.2</li>\n</ul>\n<h2 id=\"解决步骤\"><a href=\"#解决步骤\" class=\"headerlink\" title=\"解决步骤\"></a>解决步骤</h2><h3 id=\"开启VT-x\"><a href=\"#开启VT-x\" class=\"headerlink\" title=\"开启VT-x\"></a>开启VT-x</h3><p>在ubuntu上使用Android Studio创建模拟器时，会提示一个错误：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/dev/kvm is not found</div></pre></td></tr></table></figure></p>\n<p>并且提示要在<em>BIOS</em>里面开启<font size=\"4em\"><strong>VT-x</strong></font>。</p>","more":"<p>重启电脑，按<em>DEL</em>键进入<em>BIOS</em>,发现确实没有启用，于是启用后再此重启电脑。</p>\n<p>此时打开Android Studio，仍然提示一样的错误。</p>\n<p>再次在网上搜寻，发现如下解决方案，记录一下。</p>\n<p><a href=\"http://askubuntu.com/questions/600727/replacement-for-haxm-on-ubuntu-says-intel-x86-emulator-accelerator-is-not-comp\" target=\"_blank\" rel=\"external\">http://askubuntu.com/questions/600727/replacement-for-haxm-on-ubuntu-says-intel-x86-emulator-accelerator-is-not-comp</a></p>\n<p>###<br>Check if your CPU supports hardware virtualization, by typing:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">egrep -c &apos;(vmx|svm)&apos; /proc/cpuinfo</div></pre></td></tr></table></figure></p>\n<p>If the result is 0, your CPU does not support hardware virtualization, which is necessary to run the KVM. If you get 1 or more, that means you’re fine.</p>\n<p>Next, install KVM. First make sure if your processor supports KVM by typing:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">kvm-ok</div></pre></td></tr></table></figure></p>\n<p>You will see this if that’s the case:</p>\n<p>INFO: Your CPU supports KVM extensions INFO: /dev/kvm exists KVM acceleration can be used<br>If this is the result, you need to turn on Intel VT in BIOS:</p>\n<p>INFO: KVM is disabled by your BIOS HINT: Enter your BIOS setup and enable Virtualization Technology (VT), and then hard poweroff/poweron your system KVM acceleration can NOT be used<br>The next step is to install the KVM and a few other packages needed. To do so, type:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils</div></pre></td></tr></table></figure></p>\n<p>Add your user to some groups, replacing by your own username:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo adduser &lt;user&gt; libvirtd</div><div class=\"line\">sudo adduser &lt;user&gt; kvm</div></pre></td></tr></table></figure></p>\n<p>Check if everything is ok:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo virsh -c qemu:///system list</div></pre></td></tr></table></figure></p>"},{"title":"锋利的jQeury 第三章-笔记","date":"2016-09-03T10:04:19.000Z","_content":"\n## 第三章 jQuery中的DOM操作\n - 查找`DOM`节点\n\n    ```javascript\n    var $li = $('ul li:eq(1)'); //获取<ul>里的第二个<li>节点\n    ```\n\n<!--more-->\n\n - 查找属性节点\n\n    ```javascript\n    var $para = $('p'); \n    var p_txt = $para.attr('title');\n    ```\n<!--more-->\n\n - 创建元素节点\n\n    ```javascript\n    var $li = $('<li></li>');\n    ```\n\n - 创建文本节点\n\n    ```javascript\n    var $li = $('<li>香蕉</li>');\n    ```\n\n - 创建属性节点\n\n    ```javascript\n    var $li = $('<li title=\"香蕉\">香蕉</li>');\n    ```\n    \n - 插入节点的方法\n    - append 追加元素。$('p').append($(\"&lt;b>你好&lt;/b>\"))，A.append(B)之后，A和B是父子关系。\n    - appendTo 跟append相反，A.append(B) 相当于 B.appendTo(A)\n    - prepend 插入到前面\n    - prependTo 跟prepend相反\n    - after 在每个匹配元素之后插入内容，A.after(B)之后，A与B是兄弟元素\n    - intertAfter跟after相反，A.after(B)相当于B.instertAfter(A)\n    - before，跟after相反\n    - insertBefore，A.before(B)相当于B.insertBefore(A)\n    - 删除节点的方法\n    - remove 删除匹配的元素 $('ul li:eq(1)').remove()，删除第二个li元素，remove返回值是删除的元素\n    - detach 与remove不同，detach会保留所有该元素绑定的事件，附加的数据等。\n    - empty 清空节点\n\n- 复制节点 clone，可以传入一个boolean参数表示是否同时复制元素中所绑定的事件。\n\n- 替换节点\n    - replaceWith， A.replaceWith(B)，用B替换A\n    - replaceAll 跟replaceWith相反，A.replaceWith(B)相当于B.replaceAll(A)\n\n- 包裹节点\n    - wrap $('strong').wrap('&lt;b>&lt;/b>') 用&lt;b>标签将&lt;strong>标签包起来，如果有多个匹配，则每个元素单独包裹。\n    - wrapAll，将所有的元素用一个元素来包裹。如果匹配的节点之间有其他节点，其他节点会被放到包裹元素之后。\n    - wrapInner 将子内容（包括文本节点）包裹起来。\n\n- 获取属性，$('p').atter('title')\n\n- 设置属性\n\n    - $('p').attr('title', 'your title') 设置单个属性\n\n    - $('p').attr({'title', 'your title', 'name': 'test'})，设置多个属性\n\n- 删除属性 $('p').removeAttr('title');\n\n- 获取样式 $('p').attr('class')获取&lt;p>元素的class\n\n- 设置样式 $('p').attr('class', 'high') 设置样式\n\n- 追加样式 $('p').addClass('another')\n\n- 移除样式\n\n    - $('p').removeClass('another') 移除一个样式\n\n    - $('p').removeClass('another high') 移除多个样式\n\n- 切换样式 $('p').toggleClass('another')，如果another类名不存在则添加之，否则删除之\n\n- 判断是否含有某个样式 $('p').hasClass('another')\n- html()方法 获取或设置html内容，相当于javascript的innerHTML属性\n- text() 获取或设置文本内容，相当于javascript的innerText属性\n\n    - 获取: var text = $('p').text()\n\n    - 设置 $('p').text('你喜欢的水果是')\n- val()方法 获取或设置value，相当于javascript的value属性\n\n- 遍历节点\n    - children() 返回子节点（DOM原声节点，非jQuery节点）\n    - next()方法，获取紧临的同辈元素，也就是返回下一个兄弟节点。\n    - prev()，跟next相反，返回上一个兄弟节点\n    - siblings()返回前后所有的同辈元素。\n    - closest() 取得最近的匹配元素，往父控件追溯。如$(e.target).closest('li').css('color', 'red');给点击的目标元素附近的li元素添加颜色。\n    - parents() 获得集合中每个匹配元素的祖先元素。\n    - parent() 获得集合中每个匹配元素的父级元素。\n    - find() / filter() / nextAll() / prevAll() 等。\n\n- 获取样式 $('p').css('color') 获取&lt;p>的样式颜色\n\n- 设置样式\n\n    - $('p').css('color', 'red');\n\n    - $('p').css({\"fontSize\": \"30px\", \"backgroundColor\": \"#888888\"'});\n\n    - 元素定位\n        - offset()，获取元素在当前视窗中的相对偏移。\n        - position() 获取元素相对于最近的一个position样式为relative或absolute（为啥）的父节点的相对偏移。\n    - scrollLeft() 获取或设置水平滚动条的位置\n    - scrollRight() 获取或设置垂直滚动条的位置。\n","source":"_posts/chapter-3.md","raw":"---\ntitle: 锋利的jQeury 第三章-笔记 \ndate: 2016-9-3 18:04:19\ntags: jQuery\n---\n\n## 第三章 jQuery中的DOM操作\n - 查找`DOM`节点\n\n    ```javascript\n    var $li = $('ul li:eq(1)'); //获取<ul>里的第二个<li>节点\n    ```\n\n<!--more-->\n\n - 查找属性节点\n\n    ```javascript\n    var $para = $('p'); \n    var p_txt = $para.attr('title');\n    ```\n<!--more-->\n\n - 创建元素节点\n\n    ```javascript\n    var $li = $('<li></li>');\n    ```\n\n - 创建文本节点\n\n    ```javascript\n    var $li = $('<li>香蕉</li>');\n    ```\n\n - 创建属性节点\n\n    ```javascript\n    var $li = $('<li title=\"香蕉\">香蕉</li>');\n    ```\n    \n - 插入节点的方法\n    - append 追加元素。$('p').append($(\"&lt;b>你好&lt;/b>\"))，A.append(B)之后，A和B是父子关系。\n    - appendTo 跟append相反，A.append(B) 相当于 B.appendTo(A)\n    - prepend 插入到前面\n    - prependTo 跟prepend相反\n    - after 在每个匹配元素之后插入内容，A.after(B)之后，A与B是兄弟元素\n    - intertAfter跟after相反，A.after(B)相当于B.instertAfter(A)\n    - before，跟after相反\n    - insertBefore，A.before(B)相当于B.insertBefore(A)\n    - 删除节点的方法\n    - remove 删除匹配的元素 $('ul li:eq(1)').remove()，删除第二个li元素，remove返回值是删除的元素\n    - detach 与remove不同，detach会保留所有该元素绑定的事件，附加的数据等。\n    - empty 清空节点\n\n- 复制节点 clone，可以传入一个boolean参数表示是否同时复制元素中所绑定的事件。\n\n- 替换节点\n    - replaceWith， A.replaceWith(B)，用B替换A\n    - replaceAll 跟replaceWith相反，A.replaceWith(B)相当于B.replaceAll(A)\n\n- 包裹节点\n    - wrap $('strong').wrap('&lt;b>&lt;/b>') 用&lt;b>标签将&lt;strong>标签包起来，如果有多个匹配，则每个元素单独包裹。\n    - wrapAll，将所有的元素用一个元素来包裹。如果匹配的节点之间有其他节点，其他节点会被放到包裹元素之后。\n    - wrapInner 将子内容（包括文本节点）包裹起来。\n\n- 获取属性，$('p').atter('title')\n\n- 设置属性\n\n    - $('p').attr('title', 'your title') 设置单个属性\n\n    - $('p').attr({'title', 'your title', 'name': 'test'})，设置多个属性\n\n- 删除属性 $('p').removeAttr('title');\n\n- 获取样式 $('p').attr('class')获取&lt;p>元素的class\n\n- 设置样式 $('p').attr('class', 'high') 设置样式\n\n- 追加样式 $('p').addClass('another')\n\n- 移除样式\n\n    - $('p').removeClass('another') 移除一个样式\n\n    - $('p').removeClass('another high') 移除多个样式\n\n- 切换样式 $('p').toggleClass('another')，如果another类名不存在则添加之，否则删除之\n\n- 判断是否含有某个样式 $('p').hasClass('another')\n- html()方法 获取或设置html内容，相当于javascript的innerHTML属性\n- text() 获取或设置文本内容，相当于javascript的innerText属性\n\n    - 获取: var text = $('p').text()\n\n    - 设置 $('p').text('你喜欢的水果是')\n- val()方法 获取或设置value，相当于javascript的value属性\n\n- 遍历节点\n    - children() 返回子节点（DOM原声节点，非jQuery节点）\n    - next()方法，获取紧临的同辈元素，也就是返回下一个兄弟节点。\n    - prev()，跟next相反，返回上一个兄弟节点\n    - siblings()返回前后所有的同辈元素。\n    - closest() 取得最近的匹配元素，往父控件追溯。如$(e.target).closest('li').css('color', 'red');给点击的目标元素附近的li元素添加颜色。\n    - parents() 获得集合中每个匹配元素的祖先元素。\n    - parent() 获得集合中每个匹配元素的父级元素。\n    - find() / filter() / nextAll() / prevAll() 等。\n\n- 获取样式 $('p').css('color') 获取&lt;p>的样式颜色\n\n- 设置样式\n\n    - $('p').css('color', 'red');\n\n    - $('p').css({\"fontSize\": \"30px\", \"backgroundColor\": \"#888888\"'});\n\n    - 元素定位\n        - offset()，获取元素在当前视窗中的相对偏移。\n        - position() 获取元素相对于最近的一个position样式为relative或absolute（为啥）的父节点的相对偏移。\n    - scrollLeft() 获取或设置水平滚动条的位置\n    - scrollRight() 获取或设置垂直滚动条的位置。\n","slug":"chapter-3","published":1,"updated":"2017-05-25T03:41:18.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o3j000fiwl70q3e8j5h","content":"<h2 id=\"第三章-jQuery中的DOM操作\"><a href=\"#第三章-jQuery中的DOM操作\" class=\"headerlink\" title=\"第三章 jQuery中的DOM操作\"></a>第三章 jQuery中的DOM操作</h2><ul>\n<li><p>查找<code>DOM</code>节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'ul li:eq(1)'</span>); <span class=\"comment\">//获取&lt;ul&gt;里的第二个&lt;li&gt;节点</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>查找属性节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $para = $(<span class=\"string\">'p'</span>); </div><div class=\"line\"><span class=\"keyword\">var</span> p_txt = $para.attr(<span class=\"string\">'title'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<!--more-->\n<ul>\n<li><p>创建元素节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li&gt;&lt;/li&gt;'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建文本节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li&gt;香蕉&lt;/li&gt;'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建属性节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li title=\"香蕉\"&gt;香蕉&lt;/li&gt;'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>插入节点的方法<ul>\n<li>append 追加元素。$(‘p’).append($(“&lt;b&gt;你好&lt;/b&gt;”))，A.append(B)之后，A和B是父子关系。</li>\n<li>appendTo 跟append相反，A.append(B) 相当于 B.appendTo(A)</li>\n<li>prepend 插入到前面</li>\n<li>prependTo 跟prepend相反</li>\n<li>after 在每个匹配元素之后插入内容，A.after(B)之后，A与B是兄弟元素</li>\n<li>intertAfter跟after相反，A.after(B)相当于B.instertAfter(A)</li>\n<li>before，跟after相反</li>\n<li>insertBefore，A.before(B)相当于B.insertBefore(A)</li>\n<li>删除节点的方法</li>\n<li>remove 删除匹配的元素 $(‘ul li:eq(1)’).remove()，删除第二个li元素，remove返回值是删除的元素</li>\n<li>detach 与remove不同，detach会保留所有该元素绑定的事件，附加的数据等。</li>\n<li>empty 清空节点</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>复制节点 clone，可以传入一个boolean参数表示是否同时复制元素中所绑定的事件。</p>\n</li>\n<li><p>替换节点</p>\n<ul>\n<li>replaceWith， A.replaceWith(B)，用B替换A</li>\n<li>replaceAll 跟replaceWith相反，A.replaceWith(B)相当于B.replaceAll(A)</li>\n</ul>\n</li>\n<li><p>包裹节点</p>\n<ul>\n<li>wrap $(‘strong’).wrap(‘&lt;b&gt;&lt;/b&gt;’) 用&lt;b&gt;标签将&lt;strong&gt;标签包起来，如果有多个匹配，则每个元素单独包裹。</li>\n<li>wrapAll，将所有的元素用一个元素来包裹。如果匹配的节点之间有其他节点，其他节点会被放到包裹元素之后。</li>\n<li>wrapInner 将子内容（包括文本节点）包裹起来。</li>\n</ul>\n</li>\n<li><p>获取属性，$(‘p’).atter(‘title’)</p>\n</li>\n<li><p>设置属性</p>\n<ul>\n<li><p>$(‘p’).attr(‘title’, ‘your title’) 设置单个属性</p>\n</li>\n<li><p>$(‘p’).attr({‘title’, ‘your title’, ‘name’: ‘test’})，设置多个属性</p>\n</li>\n</ul>\n</li>\n<li><p>删除属性 $(‘p’).removeAttr(‘title’);</p>\n</li>\n<li><p>获取样式 $(‘p’).attr(‘class’)获取&lt;p&gt;元素的class</p>\n</li>\n<li><p>设置样式 $(‘p’).attr(‘class’, ‘high’) 设置样式</p>\n</li>\n<li><p>追加样式 $(‘p’).addClass(‘another’)</p>\n</li>\n<li><p>移除样式</p>\n<ul>\n<li><p>$(‘p’).removeClass(‘another’) 移除一个样式</p>\n</li>\n<li><p>$(‘p’).removeClass(‘another high’) 移除多个样式</p>\n</li>\n</ul>\n</li>\n<li><p>切换样式 $(‘p’).toggleClass(‘another’)，如果another类名不存在则添加之，否则删除之</p>\n</li>\n<li><p>判断是否含有某个样式 $(‘p’).hasClass(‘another’)</p>\n</li>\n<li>html()方法 获取或设置html内容，相当于javascript的innerHTML属性</li>\n<li><p>text() 获取或设置文本内容，相当于javascript的innerText属性</p>\n<ul>\n<li><p>获取: var text = $(‘p’).text()</p>\n</li>\n<li><p>设置 $(‘p’).text(‘你喜欢的水果是’)</p>\n</li>\n</ul>\n</li>\n<li><p>val()方法 获取或设置value，相当于javascript的value属性</p>\n</li>\n<li><p>遍历节点</p>\n<ul>\n<li>children() 返回子节点（DOM原声节点，非jQuery节点）</li>\n<li>next()方法，获取紧临的同辈元素，也就是返回下一个兄弟节点。</li>\n<li>prev()，跟next相反，返回上一个兄弟节点</li>\n<li>siblings()返回前后所有的同辈元素。</li>\n<li>closest() 取得最近的匹配元素，往父控件追溯。如$(e.target).closest(‘li’).css(‘color’, ‘red’);给点击的目标元素附近的li元素添加颜色。</li>\n<li>parents() 获得集合中每个匹配元素的祖先元素。</li>\n<li>parent() 获得集合中每个匹配元素的父级元素。</li>\n<li>find() / filter() / nextAll() / prevAll() 等。</li>\n</ul>\n</li>\n<li><p>获取样式 $(‘p’).css(‘color’) 获取&lt;p&gt;的样式颜色</p>\n</li>\n<li><p>设置样式</p>\n<ul>\n<li><p>$(‘p’).css(‘color’, ‘red’);</p>\n</li>\n<li><p>$(‘p’).css({“fontSize”: “30px”, “backgroundColor”: “#888888”‘});</p>\n</li>\n<li><p>元素定位</p>\n<ul>\n<li>offset()，获取元素在当前视窗中的相对偏移。</li>\n<li>position() 获取元素相对于最近的一个position样式为relative或absolute（为啥）的父节点的相对偏移。</li>\n</ul>\n</li>\n<li>scrollLeft() 获取或设置水平滚动条的位置</li>\n<li>scrollRight() 获取或设置垂直滚动条的位置。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"第三章-jQuery中的DOM操作\"><a href=\"#第三章-jQuery中的DOM操作\" class=\"headerlink\" title=\"第三章 jQuery中的DOM操作\"></a>第三章 jQuery中的DOM操作</h2><ul>\n<li><p>查找<code>DOM</code>节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'ul li:eq(1)'</span>); <span class=\"comment\">//获取&lt;ul&gt;里的第二个&lt;li&gt;节点</span></div></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<ul>\n<li><p>查找属性节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $para = $(<span class=\"string\">'p'</span>); </div><div class=\"line\"><span class=\"keyword\">var</span> p_txt = $para.attr(<span class=\"string\">'title'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<!--more-->\n<ul>\n<li><p>创建元素节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li&gt;&lt;/li&gt;'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建文本节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li&gt;香蕉&lt;/li&gt;'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建属性节点</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $li = $(<span class=\"string\">'&lt;li title=\"香蕉\"&gt;香蕉&lt;/li&gt;'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>插入节点的方法<ul>\n<li>append 追加元素。$(‘p’).append($(“&lt;b&gt;你好&lt;/b&gt;”))，A.append(B)之后，A和B是父子关系。</li>\n<li>appendTo 跟append相反，A.append(B) 相当于 B.appendTo(A)</li>\n<li>prepend 插入到前面</li>\n<li>prependTo 跟prepend相反</li>\n<li>after 在每个匹配元素之后插入内容，A.after(B)之后，A与B是兄弟元素</li>\n<li>intertAfter跟after相反，A.after(B)相当于B.instertAfter(A)</li>\n<li>before，跟after相反</li>\n<li>insertBefore，A.before(B)相当于B.insertBefore(A)</li>\n<li>删除节点的方法</li>\n<li>remove 删除匹配的元素 $(‘ul li:eq(1)’).remove()，删除第二个li元素，remove返回值是删除的元素</li>\n<li>detach 与remove不同，detach会保留所有该元素绑定的事件，附加的数据等。</li>\n<li>empty 清空节点</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>复制节点 clone，可以传入一个boolean参数表示是否同时复制元素中所绑定的事件。</p>\n</li>\n<li><p>替换节点</p>\n<ul>\n<li>replaceWith， A.replaceWith(B)，用B替换A</li>\n<li>replaceAll 跟replaceWith相反，A.replaceWith(B)相当于B.replaceAll(A)</li>\n</ul>\n</li>\n<li><p>包裹节点</p>\n<ul>\n<li>wrap $(‘strong’).wrap(‘&lt;b&gt;&lt;/b&gt;’) 用&lt;b&gt;标签将&lt;strong&gt;标签包起来，如果有多个匹配，则每个元素单独包裹。</li>\n<li>wrapAll，将所有的元素用一个元素来包裹。如果匹配的节点之间有其他节点，其他节点会被放到包裹元素之后。</li>\n<li>wrapInner 将子内容（包括文本节点）包裹起来。</li>\n</ul>\n</li>\n<li><p>获取属性，$(‘p’).atter(‘title’)</p>\n</li>\n<li><p>设置属性</p>\n<ul>\n<li><p>$(‘p’).attr(‘title’, ‘your title’) 设置单个属性</p>\n</li>\n<li><p>$(‘p’).attr({‘title’, ‘your title’, ‘name’: ‘test’})，设置多个属性</p>\n</li>\n</ul>\n</li>\n<li><p>删除属性 $(‘p’).removeAttr(‘title’);</p>\n</li>\n<li><p>获取样式 $(‘p’).attr(‘class’)获取&lt;p&gt;元素的class</p>\n</li>\n<li><p>设置样式 $(‘p’).attr(‘class’, ‘high’) 设置样式</p>\n</li>\n<li><p>追加样式 $(‘p’).addClass(‘another’)</p>\n</li>\n<li><p>移除样式</p>\n<ul>\n<li><p>$(‘p’).removeClass(‘another’) 移除一个样式</p>\n</li>\n<li><p>$(‘p’).removeClass(‘another high’) 移除多个样式</p>\n</li>\n</ul>\n</li>\n<li><p>切换样式 $(‘p’).toggleClass(‘another’)，如果another类名不存在则添加之，否则删除之</p>\n</li>\n<li><p>判断是否含有某个样式 $(‘p’).hasClass(‘another’)</p>\n</li>\n<li>html()方法 获取或设置html内容，相当于javascript的innerHTML属性</li>\n<li><p>text() 获取或设置文本内容，相当于javascript的innerText属性</p>\n<ul>\n<li><p>获取: var text = $(‘p’).text()</p>\n</li>\n<li><p>设置 $(‘p’).text(‘你喜欢的水果是’)</p>\n</li>\n</ul>\n</li>\n<li><p>val()方法 获取或设置value，相当于javascript的value属性</p>\n</li>\n<li><p>遍历节点</p>\n<ul>\n<li>children() 返回子节点（DOM原声节点，非jQuery节点）</li>\n<li>next()方法，获取紧临的同辈元素，也就是返回下一个兄弟节点。</li>\n<li>prev()，跟next相反，返回上一个兄弟节点</li>\n<li>siblings()返回前后所有的同辈元素。</li>\n<li>closest() 取得最近的匹配元素，往父控件追溯。如$(e.target).closest(‘li’).css(‘color’, ‘red’);给点击的目标元素附近的li元素添加颜色。</li>\n<li>parents() 获得集合中每个匹配元素的祖先元素。</li>\n<li>parent() 获得集合中每个匹配元素的父级元素。</li>\n<li>find() / filter() / nextAll() / prevAll() 等。</li>\n</ul>\n</li>\n<li><p>获取样式 $(‘p’).css(‘color’) 获取&lt;p&gt;的样式颜色</p>\n</li>\n<li><p>设置样式</p>\n<ul>\n<li><p>$(‘p’).css(‘color’, ‘red’);</p>\n</li>\n<li><p>$(‘p’).css({“fontSize”: “30px”, “backgroundColor”: “#888888”‘});</p>\n</li>\n<li><p>元素定位</p>\n<ul>\n<li>offset()，获取元素在当前视窗中的相对偏移。</li>\n<li>position() 获取元素相对于最近的一个position样式为relative或absolute（为啥）的父节点的相对偏移。</li>\n</ul>\n</li>\n<li>scrollLeft() 获取或设置水平滚动条的位置</li>\n<li>scrollRight() 获取或设置垂直滚动条的位置。</li>\n</ul>\n</li>\n</ul>"},{"title":"git配置user.name和user.email","date":"2016-11-15T10:02:54.000Z","_content":"\ngithub在统计提交的时候，会判断邮箱是否跟github的登陆邮箱匹配，不匹配则不计算活跃度，即不生成小绿块。\n\n获取配置\n```\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email\naaa@aaa.com\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.name\naaa\n```\n<!--more-->\n\n设置当前仓库的user.name/user.email\n```\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa@aaa.com\n```\n设置全局user.name/user.email\n```\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.name yinlijun\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.email yinlijun2004@gmail.com\n```\n如果当前仓库未设置user.name/user.email则采用全局的user.name/user.email，否则当前仓库的user.name/user.email会覆盖全局的user.name/user.email。","source":"_posts/git配置user-name和user-email.md","raw":"---\ntitle: git配置user.name和user.email\ndate: 2016-11-15 18:02:54\ntags: git\n---\n\ngithub在统计提交的时候，会判断邮箱是否跟github的登陆邮箱匹配，不匹配则不计算活跃度，即不生成小绿块。\n\n获取配置\n```\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email\naaa@aaa.com\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.name\naaa\n```\n<!--more-->\n\n设置当前仓库的user.name/user.email\n```\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa@aaa.com\n```\n设置全局user.name/user.email\n```\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.name yinlijun\nyinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.email yinlijun2004@gmail.com\n```\n如果当前仓库未设置user.name/user.email则采用全局的user.name/user.email，否则当前仓库的user.name/user.email会覆盖全局的user.name/user.email。","slug":"git配置user-name和user-email","published":1,"updated":"2017-05-25T03:41:18.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o3m000hiwl7xe6sanzq","content":"<p>github在统计提交的时候，会判断邮箱是否跟github的登陆邮箱匹配，不匹配则不计算活跃度，即不生成小绿块。</p>\n<p>获取配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email</div><div class=\"line\">aaa@aaa.com</div><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.name</div><div class=\"line\">aaa</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>设置当前仓库的user.name/user.email<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa</div><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa@aaa.com</div></pre></td></tr></table></figure></p>\n<p>设置全局user.name/user.email<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.name yinlijun</div><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.email yinlijun2004@gmail.com</div></pre></td></tr></table></figure></p>\n<p>如果当前仓库未设置user.name/user.email则采用全局的user.name/user.email，否则当前仓库的user.name/user.email会覆盖全局的user.name/user.email。</p>\n","site":{"data":{}},"excerpt":"<p>github在统计提交的时候，会判断邮箱是否跟github的登陆邮箱匹配，不匹配则不计算活跃度，即不生成小绿块。</p>\n<p>获取配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email</div><div class=\"line\">aaa@aaa.com</div><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.name</div><div class=\"line\">aaa</div></pre></td></tr></table></figure></p>","more":"<p>设置当前仓库的user.name/user.email<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa</div><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa@aaa.com</div></pre></td></tr></table></figure></p>\n<p>设置全局user.name/user.email<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.name yinlijun</div><div class=\"line\">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.email yinlijun2004@gmail.com</div></pre></td></tr></table></figure></p>\n<p>如果当前仓库未设置user.name/user.email则采用全局的user.name/user.email，否则当前仓库的user.name/user.email会覆盖全局的user.name/user.email。</p>"},{"title":".gitignore无效，不能过滤某些文件","date":"2016-11-06T10:03:31.000Z","_content":"\n利用.gitignore过滤文件，如编译过程中的中间文件，等等，这些文件不需要被追踪管理。\n\n现象：\n\n在.gitignore添加file1文件，以过滤该文件，但是通过Git status查看仍显示file1文件的状态。\n\n<!--more-->\n\n原因：\n\n在git库中已存在了这个文件，之前push提交过该文件。\n\n.gitignore文件只对还没有加入版本管理的文件起作用，如果之前已经用git把这些文件纳入了版本库，就不起作用了\n\n解决：\n\n需要在git库中删除该文件，并更新。\n\n然后再次git status查看状态，file1文件不再显示状态。\n","source":"_posts/gitignore无效，不能过滤某些文件.md","raw":"---\ntitle: .gitignore无效，不能过滤某些文件\ndate: 2016-11-6 18:03:31\ntags: [git, .gitignore]\n---\n\n利用.gitignore过滤文件，如编译过程中的中间文件，等等，这些文件不需要被追踪管理。\n\n现象：\n\n在.gitignore添加file1文件，以过滤该文件，但是通过Git status查看仍显示file1文件的状态。\n\n<!--more-->\n\n原因：\n\n在git库中已存在了这个文件，之前push提交过该文件。\n\n.gitignore文件只对还没有加入版本管理的文件起作用，如果之前已经用git把这些文件纳入了版本库，就不起作用了\n\n解决：\n\n需要在git库中删除该文件，并更新。\n\n然后再次git status查看状态，file1文件不再显示状态。\n","slug":"gitignore无效，不能过滤某些文件","published":1,"updated":"2017-05-25T03:41:18.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o3n000iiwl73yp1rxy3","content":"<p>利用.gitignore过滤文件，如编译过程中的中间文件，等等，这些文件不需要被追踪管理。</p>\n<p>现象：</p>\n<p>在.gitignore添加file1文件，以过滤该文件，但是通过Git status查看仍显示file1文件的状态。</p>\n<a id=\"more\"></a>\n<p>原因：</p>\n<p>在git库中已存在了这个文件，之前push提交过该文件。</p>\n<p>.gitignore文件只对还没有加入版本管理的文件起作用，如果之前已经用git把这些文件纳入了版本库，就不起作用了</p>\n<p>解决：</p>\n<p>需要在git库中删除该文件，并更新。</p>\n<p>然后再次git status查看状态，file1文件不再显示状态。</p>\n","site":{"data":{}},"excerpt":"<p>利用.gitignore过滤文件，如编译过程中的中间文件，等等，这些文件不需要被追踪管理。</p>\n<p>现象：</p>\n<p>在.gitignore添加file1文件，以过滤该文件，但是通过Git status查看仍显示file1文件的状态。</p>","more":"<p>原因：</p>\n<p>在git库中已存在了这个文件，之前push提交过该文件。</p>\n<p>.gitignore文件只对还没有加入版本管理的文件起作用，如果之前已经用git把这些文件纳入了版本库，就不起作用了</p>\n<p>解决：</p>\n<p>需要在git库中删除该文件，并更新。</p>\n<p>然后再次git status查看状态，file1文件不再显示状态。</p>"},{"title":"如何下载安装openJDK","date":"2016-11-15T12:04:44.000Z","_content":"\n## JDK 8\n\n### **Debian, Ubuntu**\n```\n$ sudo apt-get install openjdk-8-jre\n```\nopenjdk-8-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-8-jdk。\n\n<!--more-->\n\n### **Fedora, Oracle Linux, Red Hat Enterprise Linux**\n```\n$ su -c \"yum install java-1.8.0-openjdk\"\n```\njava-1.8.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.8.0-openjdk-devel。\n\n## JDK 7\n\n### **Debian, Ubuntu**\n```\n$ sudo apt-get install openjdk-7-jre\n```\nopenjdk-7-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-7-jdk。\n\n### **Fedora, Oracle Linux, Red Hat Enterprise Linux**\n```\n$ su -c \"yum install java-1.7.0-openjdk\"\n```\njava-1.7.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.7.0-openjdk-devel。\n\n## JDK 6\n\n### **Debian, Ubuntu**\n```\n$ sudo apt-get install openjdk-6-jre\n```\nopenjdk-6-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-6-jdk。\n\n### **Fedora, Oracle Linux, Red Hat Enterprise Linux**\n```\n$ su -c \"yum install java-1.6.0-openjdk\"\n```\njava-1.6.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.6.0-openjdk-devel。\n\n\n参考[http://openjdk.java.net/install/](http://openjdk.java.net/install/)","source":"_posts/how-to-download-openjdk.md","raw":"---\ntitle: 如何下载安装openJDK\ndate: 2016-11-15 20:04:44\ntags: [openjdk, java]\n---\n\n## JDK 8\n\n### **Debian, Ubuntu**\n```\n$ sudo apt-get install openjdk-8-jre\n```\nopenjdk-8-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-8-jdk。\n\n<!--more-->\n\n### **Fedora, Oracle Linux, Red Hat Enterprise Linux**\n```\n$ su -c \"yum install java-1.8.0-openjdk\"\n```\njava-1.8.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.8.0-openjdk-devel。\n\n## JDK 7\n\n### **Debian, Ubuntu**\n```\n$ sudo apt-get install openjdk-7-jre\n```\nopenjdk-7-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-7-jdk。\n\n### **Fedora, Oracle Linux, Red Hat Enterprise Linux**\n```\n$ su -c \"yum install java-1.7.0-openjdk\"\n```\njava-1.7.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.7.0-openjdk-devel。\n\n## JDK 6\n\n### **Debian, Ubuntu**\n```\n$ sudo apt-get install openjdk-6-jre\n```\nopenjdk-6-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-6-jdk。\n\n### **Fedora, Oracle Linux, Red Hat Enterprise Linux**\n```\n$ su -c \"yum install java-1.6.0-openjdk\"\n```\njava-1.6.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.6.0-openjdk-devel。\n\n\n参考[http://openjdk.java.net/install/](http://openjdk.java.net/install/)","slug":"how-to-download-openjdk","published":1,"updated":"2017-05-25T03:41:18.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o3r000kiwl7g7wiwpb1","content":"<h2 id=\"JDK-8\"><a href=\"#JDK-8\" class=\"headerlink\" title=\"JDK 8\"></a>JDK 8</h2><h3 id=\"Debian-Ubuntu\"><a href=\"#Debian-Ubuntu\" class=\"headerlink\" title=\"Debian, Ubuntu\"></a><strong>Debian, Ubuntu</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install openjdk-8-jre</div></pre></td></tr></table></figure>\n<p>openjdk-8-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-8-jdk。</p>\n<a id=\"more\"></a>\n<h3 id=\"Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux\"><a href=\"#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux\" class=\"headerlink\" title=\"Fedora, Oracle Linux, Red Hat Enterprise Linux\"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ su -c &quot;yum install java-1.8.0-openjdk&quot;</div></pre></td></tr></table></figure>\n<p>java-1.8.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.8.0-openjdk-devel。</p>\n<h2 id=\"JDK-7\"><a href=\"#JDK-7\" class=\"headerlink\" title=\"JDK 7\"></a>JDK 7</h2><h3 id=\"Debian-Ubuntu-1\"><a href=\"#Debian-Ubuntu-1\" class=\"headerlink\" title=\"Debian, Ubuntu\"></a><strong>Debian, Ubuntu</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install openjdk-7-jre</div></pre></td></tr></table></figure>\n<p>openjdk-7-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-7-jdk。</p>\n<h3 id=\"Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-1\"><a href=\"#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-1\" class=\"headerlink\" title=\"Fedora, Oracle Linux, Red Hat Enterprise Linux\"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ su -c &quot;yum install java-1.7.0-openjdk&quot;</div></pre></td></tr></table></figure>\n<p>java-1.7.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.7.0-openjdk-devel。</p>\n<h2 id=\"JDK-6\"><a href=\"#JDK-6\" class=\"headerlink\" title=\"JDK 6\"></a>JDK 6</h2><h3 id=\"Debian-Ubuntu-2\"><a href=\"#Debian-Ubuntu-2\" class=\"headerlink\" title=\"Debian, Ubuntu\"></a><strong>Debian, Ubuntu</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install openjdk-6-jre</div></pre></td></tr></table></figure>\n<p>openjdk-6-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-6-jdk。</p>\n<h3 id=\"Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-2\"><a href=\"#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-2\" class=\"headerlink\" title=\"Fedora, Oracle Linux, Red Hat Enterprise Linux\"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ su -c &quot;yum install java-1.6.0-openjdk&quot;</div></pre></td></tr></table></figure>\n<p>java-1.6.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.6.0-openjdk-devel。</p>\n<p>参考<a href=\"http://openjdk.java.net/install/\" target=\"_blank\" rel=\"external\">http://openjdk.java.net/install/</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"JDK-8\"><a href=\"#JDK-8\" class=\"headerlink\" title=\"JDK 8\"></a>JDK 8</h2><h3 id=\"Debian-Ubuntu\"><a href=\"#Debian-Ubuntu\" class=\"headerlink\" title=\"Debian, Ubuntu\"></a><strong>Debian, Ubuntu</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install openjdk-8-jre</div></pre></td></tr></table></figure>\n<p>openjdk-8-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-8-jdk。</p>","more":"<h3 id=\"Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux\"><a href=\"#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux\" class=\"headerlink\" title=\"Fedora, Oracle Linux, Red Hat Enterprise Linux\"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ su -c &quot;yum install java-1.8.0-openjdk&quot;</div></pre></td></tr></table></figure>\n<p>java-1.8.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.8.0-openjdk-devel。</p>\n<h2 id=\"JDK-7\"><a href=\"#JDK-7\" class=\"headerlink\" title=\"JDK 7\"></a>JDK 7</h2><h3 id=\"Debian-Ubuntu-1\"><a href=\"#Debian-Ubuntu-1\" class=\"headerlink\" title=\"Debian, Ubuntu\"></a><strong>Debian, Ubuntu</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install openjdk-7-jre</div></pre></td></tr></table></figure>\n<p>openjdk-7-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-7-jdk。</p>\n<h3 id=\"Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-1\"><a href=\"#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-1\" class=\"headerlink\" title=\"Fedora, Oracle Linux, Red Hat Enterprise Linux\"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ su -c &quot;yum install java-1.7.0-openjdk&quot;</div></pre></td></tr></table></figure>\n<p>java-1.7.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.7.0-openjdk-devel。</p>\n<h2 id=\"JDK-6\"><a href=\"#JDK-6\" class=\"headerlink\" title=\"JDK 6\"></a>JDK 6</h2><h3 id=\"Debian-Ubuntu-2\"><a href=\"#Debian-Ubuntu-2\" class=\"headerlink\" title=\"Debian, Ubuntu\"></a><strong>Debian, Ubuntu</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install openjdk-6-jre</div></pre></td></tr></table></figure>\n<p>openjdk-6-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-6-jdk。</p>\n<h3 id=\"Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-2\"><a href=\"#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-2\" class=\"headerlink\" title=\"Fedora, Oracle Linux, Red Hat Enterprise Linux\"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ su -c &quot;yum install java-1.6.0-openjdk&quot;</div></pre></td></tr></table></figure>\n<p>java-1.6.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.6.0-openjdk-devel。</p>\n<p>参考<a href=\"http://openjdk.java.net/install/\" target=\"_blank\" rel=\"external\">http://openjdk.java.net/install/</a></p>"},{"title":"React组件生命周期","date":"2016-11-24T07:23:54.000Z","_content":"[原文链接](http://blog.flappyend.com/react-component-lifecycle/)\n\n## 实例化\n### 首次实例化\n\n- getDefaultProps\n- getInitialState\n- componentWillMount\n- render\n- componentDidMount\n\n<!--more-->\n\n### 实例化完成后的更新\n\ngetInitialState\ncomponentWillMount\nrender\ncomponentDidMount\n\n## 存在期\n\n### 组件已存在时的状态改变\n\n- componentWillReceiveProps\n- shouldComponentUpdate\n- componentWillUpdate\n- render\n- componentDidUpdate\n\n## 销毁&清理期\n- componentWillUnmount\n\n## 说明\n生命周期共提供了10个不同的API。\n\n1. getDefaultProps\n\n作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享。\n\n2. getInitialState\n\n作用于组件的实例，在实例创建时调用一次，用于初始化每个实例的state，此时可以访问this.props。\n\n3. componentWillMount\n\n在完成首次渲染之前调用，此时仍可以修改组件的state。\n\n4. render\n\n必选的方法，创建虚拟DOM，该方法具有特殊的规则：\n\n- 只能通过this.props和this.state访问数据\n- 可以返回null、false或任何React组件\n- 只能出现一个顶级组件（不能返回数组）\n- 不能改变组件的状态\n- 不能修改DOM的输出\n5. componentDidMount\n\n真实的DOM被渲染出来后调用，在该方法中可通过this.getDOMNode()访问到真实的DOM元素。此时已可以使用其他类库来操作这个DOM。\n\n*在服务端中，该方法不会被调用。*\n\n6. componentWillReceiveProps\n\n组件接收到新的props时调用，并将其作为参数nextProps使用，此时可以更改组件props及state。\n```javascript\n    componentWillReceiveProps: function(nextProps) {\n        if (nextProps.bool) {\n            this.setState({\n                bool: true\n            });\n        }\n    }\n```\n7. shouldComponentUpdate\n\n组件是否应当渲染新的props或state，返回false表示跳过后续的生命周期方法，通常不需要使用以避免出现bug。在出现应用的瓶颈时，可通过该方法进行适当的优化。\n\n*在首次渲染期间或者调用了forceUpdate方法后，该方法不会被调用*\n\n8. componentWillUpdate\n\n接收到新的props或者state后，进行渲染之前调用，此时不允许更新props或state。\n\n9. componentDidUpdate\n\n完成渲染新的props或者state后调用，此时可以访问到新的DOM元素。\n\n10. componentWillUnmount\n\n组件被移除之前被调用，可以用于做一些清理工作，在componentDidMount方法中添加的所有任务都需要在该方法中撤销，比如创建的定时器或添加的事件监听器。\n\n## 参考资料\n- React：引领未来的用户界面开发框架/寸志 范洪春 杨森 陈涌 译 -- 电子工业出版社\n- [Component Specs and Lifecycle190](https://facebook.github.io/react/docs/component-specs.html)","source":"_posts/react-lifecycle.md","raw":"---\ntitle: React组件生命周期\ndate: 2016-11-24 15:23:54\ntags: react\n---\n[原文链接](http://blog.flappyend.com/react-component-lifecycle/)\n\n## 实例化\n### 首次实例化\n\n- getDefaultProps\n- getInitialState\n- componentWillMount\n- render\n- componentDidMount\n\n<!--more-->\n\n### 实例化完成后的更新\n\ngetInitialState\ncomponentWillMount\nrender\ncomponentDidMount\n\n## 存在期\n\n### 组件已存在时的状态改变\n\n- componentWillReceiveProps\n- shouldComponentUpdate\n- componentWillUpdate\n- render\n- componentDidUpdate\n\n## 销毁&清理期\n- componentWillUnmount\n\n## 说明\n生命周期共提供了10个不同的API。\n\n1. getDefaultProps\n\n作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享。\n\n2. getInitialState\n\n作用于组件的实例，在实例创建时调用一次，用于初始化每个实例的state，此时可以访问this.props。\n\n3. componentWillMount\n\n在完成首次渲染之前调用，此时仍可以修改组件的state。\n\n4. render\n\n必选的方法，创建虚拟DOM，该方法具有特殊的规则：\n\n- 只能通过this.props和this.state访问数据\n- 可以返回null、false或任何React组件\n- 只能出现一个顶级组件（不能返回数组）\n- 不能改变组件的状态\n- 不能修改DOM的输出\n5. componentDidMount\n\n真实的DOM被渲染出来后调用，在该方法中可通过this.getDOMNode()访问到真实的DOM元素。此时已可以使用其他类库来操作这个DOM。\n\n*在服务端中，该方法不会被调用。*\n\n6. componentWillReceiveProps\n\n组件接收到新的props时调用，并将其作为参数nextProps使用，此时可以更改组件props及state。\n```javascript\n    componentWillReceiveProps: function(nextProps) {\n        if (nextProps.bool) {\n            this.setState({\n                bool: true\n            });\n        }\n    }\n```\n7. shouldComponentUpdate\n\n组件是否应当渲染新的props或state，返回false表示跳过后续的生命周期方法，通常不需要使用以避免出现bug。在出现应用的瓶颈时，可通过该方法进行适当的优化。\n\n*在首次渲染期间或者调用了forceUpdate方法后，该方法不会被调用*\n\n8. componentWillUpdate\n\n接收到新的props或者state后，进行渲染之前调用，此时不允许更新props或state。\n\n9. componentDidUpdate\n\n完成渲染新的props或者state后调用，此时可以访问到新的DOM元素。\n\n10. componentWillUnmount\n\n组件被移除之前被调用，可以用于做一些清理工作，在componentDidMount方法中添加的所有任务都需要在该方法中撤销，比如创建的定时器或添加的事件监听器。\n\n## 参考资料\n- React：引领未来的用户界面开发框架/寸志 范洪春 杨森 陈涌 译 -- 电子工业出版社\n- [Component Specs and Lifecycle190](https://facebook.github.io/react/docs/component-specs.html)","slug":"react-lifecycle","published":1,"updated":"2017-05-25T03:41:18.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o3y000piwl729ja0912","content":"<p><a href=\"http://blog.flappyend.com/react-component-lifecycle/\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n<h2 id=\"实例化\"><a href=\"#实例化\" class=\"headerlink\" title=\"实例化\"></a>实例化</h2><h3 id=\"首次实例化\"><a href=\"#首次实例化\" class=\"headerlink\" title=\"首次实例化\"></a>首次实例化</h3><ul>\n<li>getDefaultProps</li>\n<li>getInitialState</li>\n<li>componentWillMount</li>\n<li>render</li>\n<li>componentDidMount</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"实例化完成后的更新\"><a href=\"#实例化完成后的更新\" class=\"headerlink\" title=\"实例化完成后的更新\"></a>实例化完成后的更新</h3><p>getInitialState<br>componentWillMount<br>render<br>componentDidMount</p>\n<h2 id=\"存在期\"><a href=\"#存在期\" class=\"headerlink\" title=\"存在期\"></a>存在期</h2><h3 id=\"组件已存在时的状态改变\"><a href=\"#组件已存在时的状态改变\" class=\"headerlink\" title=\"组件已存在时的状态改变\"></a>组件已存在时的状态改变</h3><ul>\n<li>componentWillReceiveProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n<li>render</li>\n<li>componentDidUpdate</li>\n</ul>\n<h2 id=\"销毁-amp-清理期\"><a href=\"#销毁-amp-清理期\" class=\"headerlink\" title=\"销毁&amp;清理期\"></a>销毁&amp;清理期</h2><ul>\n<li>componentWillUnmount</li>\n</ul>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>生命周期共提供了10个不同的API。</p>\n<ol>\n<li>getDefaultProps</li>\n</ol>\n<p>作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享。</p>\n<ol>\n<li>getInitialState</li>\n</ol>\n<p>作用于组件的实例，在实例创建时调用一次，用于初始化每个实例的state，此时可以访问this.props。</p>\n<ol>\n<li>componentWillMount</li>\n</ol>\n<p>在完成首次渲染之前调用，此时仍可以修改组件的state。</p>\n<ol>\n<li>render</li>\n</ol>\n<p>必选的方法，创建虚拟DOM，该方法具有特殊的规则：</p>\n<ul>\n<li>只能通过this.props和this.state访问数据</li>\n<li>可以返回null、false或任何React组件</li>\n<li>只能出现一个顶级组件（不能返回数组）</li>\n<li>不能改变组件的状态</li>\n<li>不能修改DOM的输出</li>\n</ul>\n<ol>\n<li>componentDidMount</li>\n</ol>\n<p>真实的DOM被渲染出来后调用，在该方法中可通过this.getDOMNode()访问到真实的DOM元素。此时已可以使用其他类库来操作这个DOM。</p>\n<p><em>在服务端中，该方法不会被调用。</em></p>\n<ol>\n<li>componentWillReceiveProps</li>\n</ol>\n<p>组件接收到新的props时调用，并将其作为参数nextProps使用，此时可以更改组件props及state。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">componentWillReceiveProps: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nextProps</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (nextProps.bool) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">            bool: <span class=\"literal\">true</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ol>\n<li>shouldComponentUpdate</li>\n</ol>\n<p>组件是否应当渲染新的props或state，返回false表示跳过后续的生命周期方法，通常不需要使用以避免出现bug。在出现应用的瓶颈时，可通过该方法进行适当的优化。</p>\n<p><em>在首次渲染期间或者调用了forceUpdate方法后，该方法不会被调用</em></p>\n<ol>\n<li>componentWillUpdate</li>\n</ol>\n<p>接收到新的props或者state后，进行渲染之前调用，此时不允许更新props或state。</p>\n<ol>\n<li>componentDidUpdate</li>\n</ol>\n<p>完成渲染新的props或者state后调用，此时可以访问到新的DOM元素。</p>\n<ol>\n<li>componentWillUnmount</li>\n</ol>\n<p>组件被移除之前被调用，可以用于做一些清理工作，在componentDidMount方法中添加的所有任务都需要在该方法中撤销，比如创建的定时器或添加的事件监听器。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>React：引领未来的用户界面开发框架/寸志 范洪春 杨森 陈涌 译 – 电子工业出版社</li>\n<li><a href=\"https://facebook.github.io/react/docs/component-specs.html\" target=\"_blank\" rel=\"external\">Component Specs and Lifecycle190</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://blog.flappyend.com/react-component-lifecycle/\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n<h2 id=\"实例化\"><a href=\"#实例化\" class=\"headerlink\" title=\"实例化\"></a>实例化</h2><h3 id=\"首次实例化\"><a href=\"#首次实例化\" class=\"headerlink\" title=\"首次实例化\"></a>首次实例化</h3><ul>\n<li>getDefaultProps</li>\n<li>getInitialState</li>\n<li>componentWillMount</li>\n<li>render</li>\n<li>componentDidMount</li>\n</ul>","more":"<h3 id=\"实例化完成后的更新\"><a href=\"#实例化完成后的更新\" class=\"headerlink\" title=\"实例化完成后的更新\"></a>实例化完成后的更新</h3><p>getInitialState<br>componentWillMount<br>render<br>componentDidMount</p>\n<h2 id=\"存在期\"><a href=\"#存在期\" class=\"headerlink\" title=\"存在期\"></a>存在期</h2><h3 id=\"组件已存在时的状态改变\"><a href=\"#组件已存在时的状态改变\" class=\"headerlink\" title=\"组件已存在时的状态改变\"></a>组件已存在时的状态改变</h3><ul>\n<li>componentWillReceiveProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n<li>render</li>\n<li>componentDidUpdate</li>\n</ul>\n<h2 id=\"销毁-amp-清理期\"><a href=\"#销毁-amp-清理期\" class=\"headerlink\" title=\"销毁&amp;清理期\"></a>销毁&amp;清理期</h2><ul>\n<li>componentWillUnmount</li>\n</ul>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>生命周期共提供了10个不同的API。</p>\n<ol>\n<li>getDefaultProps</li>\n</ol>\n<p>作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享。</p>\n<ol>\n<li>getInitialState</li>\n</ol>\n<p>作用于组件的实例，在实例创建时调用一次，用于初始化每个实例的state，此时可以访问this.props。</p>\n<ol>\n<li>componentWillMount</li>\n</ol>\n<p>在完成首次渲染之前调用，此时仍可以修改组件的state。</p>\n<ol>\n<li>render</li>\n</ol>\n<p>必选的方法，创建虚拟DOM，该方法具有特殊的规则：</p>\n<ul>\n<li>只能通过this.props和this.state访问数据</li>\n<li>可以返回null、false或任何React组件</li>\n<li>只能出现一个顶级组件（不能返回数组）</li>\n<li>不能改变组件的状态</li>\n<li>不能修改DOM的输出</li>\n</ul>\n<ol>\n<li>componentDidMount</li>\n</ol>\n<p>真实的DOM被渲染出来后调用，在该方法中可通过this.getDOMNode()访问到真实的DOM元素。此时已可以使用其他类库来操作这个DOM。</p>\n<p><em>在服务端中，该方法不会被调用。</em></p>\n<ol>\n<li>componentWillReceiveProps</li>\n</ol>\n<p>组件接收到新的props时调用，并将其作为参数nextProps使用，此时可以更改组件props及state。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">componentWillReceiveProps: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nextProps</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (nextProps.bool) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">            bool: <span class=\"literal\">true</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ol>\n<li>shouldComponentUpdate</li>\n</ol>\n<p>组件是否应当渲染新的props或state，返回false表示跳过后续的生命周期方法，通常不需要使用以避免出现bug。在出现应用的瓶颈时，可通过该方法进行适当的优化。</p>\n<p><em>在首次渲染期间或者调用了forceUpdate方法后，该方法不会被调用</em></p>\n<ol>\n<li>componentWillUpdate</li>\n</ol>\n<p>接收到新的props或者state后，进行渲染之前调用，此时不允许更新props或state。</p>\n<ol>\n<li>componentDidUpdate</li>\n</ol>\n<p>完成渲染新的props或者state后调用，此时可以访问到新的DOM元素。</p>\n<ol>\n<li>componentWillUnmount</li>\n</ol>\n<p>组件被移除之前被调用，可以用于做一些清理工作，在componentDidMount方法中添加的所有任务都需要在该方法中撤销，比如创建的定时器或添加的事件监听器。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>React：引领未来的用户界面开发框架/寸志 范洪春 杨森 陈涌 译 – 电子工业出版社</li>\n<li><a href=\"https://facebook.github.io/react/docs/component-specs.html\" target=\"_blank\" rel=\"external\">Component Specs and Lifecycle190</a></li>\n</ul>"},{"title":"kotlin初探","date":"2017-05-25T04:33:34.000Z","_content":"\n最近google推出了新的Android开发语言[kotlin](http://kotlinlang.org/)，花了点时间了解一下皮毛。\n\n在[kotlin](http://kotlinlang.org/)官网上的资料还是比较丰富的，提供了一个在线的[编辑器](https://try.kotlinlang.org/#/Examples/Hello,%20world!/Simplest%20version/Simplest%20version.kt)，可以写一些小的程序片段。另外提供了一个代码翻译的工具，可以直接将java代码片段翻译成kotlin。\n\n例如以下java代码：\n```java\n class Greeting {\n\tprivate String greeting;\n\tpublic Greeting(String g) {\n\t\tgreeting = g;\n\t}\n\tpublic void sayHello(String you) {\n\t\tSystem.out.println(greeting + \" \" + you);\n\t}\n\tpublic static void main(String[] argv) {\n\t\tGreeting greeting = new Greeting(\"Hello\");\n\t\tgreeting.sayHello(argv[0]);\n\t}\n}\n```\n对应的kotlin代码如下：\n<!--more-->\n```kotlin\ninternal class Greeting(g:String) {\n  private val greeting:String\n  init{\n    greeting = g\n  }\n  fun sayHello(you:String) {\n    println(greeting + \" \" + you)\n  }\n  companion object {\n    @JvmStatic fun main(argv:Array<String>) {\n      val greeting = Greeting(\"Hello\")\n      greeting.sayHello(argv[0])\n    }\n  }\n}\n```\n\n## 语法\nkotlin语法很多特性都有javascript ES6的影子，比如字符串模板，解构赋值，箭头函数，元编程。\n\n### 包定义。\n包定义必需位于源文件的顶端，格式如下\n```kotlin\npackage my.demo\n\nimport java.util.*\n\n// ...\n```\n这个跟java是一样的。\n\n### 函数\n#### 定义两个Int类型参数的求和函数 \n```kotlin \nfun sum(a: Int, b: Int): Int {\n    return a + b\n}\n```\n上面的函数可以有更简单的表达式写法\n#### 定义表达式函数\n可以看出表达式函数的返回值是自动推断的。\n```kotlin\nfun sum(a: Int, b: Int) = a + b\n```\n### 定义空返回值函数\n```kotlin\nfun printSum(a: Int, b: Int): Unit {\n    println(\"sum of $a and $b is ${a + b}\")\n}\n```\n其中<b>Unit</b>可以省略\n```kotlin\nfun printSum(a: Int, b: Int): {\n    println(\"sum of $a and $b is ${a + b}\")\n}\n```\n参见[函数](http://kotlinlang.org/docs/reference/functions.html)\n\n### 局部变量\n#### 定义常量（只允许赋值一次）\n```kotlin\nval a: Int = 1  // 立即赋值\nval b = 2   // 类型推断，为`Int`\nval c: Int  // 如果没有给出初始化的值，需要给出变量类型\nc = 3       // 延迟赋值\n```\n\n#### 定义变量\n```kotlin\nvar x = 5 // 类型推断\nx += 1\n```\n参见[属性和域](http://kotlinlang.org/docs/reference/properties.html)\n\n\n### 注释\nkotlin的注释跟java是一样的，支持行和块两种注释方式：\n```\n// This is an end-of-line comment\n\n/* This is a block comment\n   on multiple lines. */\n```\n跟java不一样的是，kotlin的块注释是可以嵌套的。\n```kotlin\n/*\n *This is a block comment\n *  on multiple lines\n /* This is a nested block comment.*/\n *This is a block comment\n *  on multiple lines\n */\n```\n参见[注释](http://kotlinlang.org/docs/reference/kotlin-doc.html)\n\n### 字符串模板\n```kotlin\nvar a = 1\n// 简单的字符串模板：\nval s1 = \"a is $a\" \n\na = 2\n// 任意表达式的模板：\nval s2 = \"${s1.replace(\"is\", \"was\")}, but now is $a\"\n```\n参见[字符串模板](http://kotlinlang.org/docs/reference/basic-types.html#string-templates)\n\n### 条件表达式\nkotlin没有三目运算符，取而代之的是条件表达式。\n\n例如一个常规的求最大值函数\n```kotlin\nfun maxOf(a: Int, b: Int): Int {\n    if(a > b) {\n        return a\n    } else {\n        return b\n    }\n}\n```\n假如用条件表达式可以这样写\n```kotlin\nfun maxOf(a: Int, b: Int) = if(a > b) a else b\n```\n参见[if表达式](http://kotlinlang.org/docs/reference/control-flow.html#if-expression)\n\n### 使用nullable和判断null\n如果一个值可能是null的话必须显示的标记出来，如\n如果<b>str</b>转换成<b>Int</b>失败，返回<b>null</b>:\n```kotlin\nfun parseInt(str: String): Int? {\n    //...\n}\n```\n使用返回nullable的函数。\n```kotlin\nfun printProduct(arg1: String, arg2: String) {\n    val x = parseInt(arg1)\n    val y = parseInt(arg2)\n    if(x != null && y != null) {\n        println(x * y)\n    } else {\n        println(\"'$arg1' 或者 '$arg2' 不是数字\")\n    }\n}\n```\n参见[安全的null](http://kotlinlang.org/docs/reference/null-safety.html)\n\n### 类型检查和自动转换\n这个操作用来检查一个对象的类型，局部变量或者属性经过判断之后，不用再显示的转换了，例如。\n\n```kotlin\nfun getStringLength(obj: Any): Int? {\n    if(obj is String) {\n        //obj在这个分支内自动转为\"String\"类型\n        return obj.length\n    }\n    //在上面的类型检查分支之外，类型仍然为\"Any\"\n    return null\n}\n```\n另一种方式\n```kotlin\nfun getStringLength(obj: Any): Int? {\n    if(obj !is String) {\n        return null\n    }\n    return obj.length\n}\n```\n甚至可以这样\n```kotlin\nfun getStringLength(obj: Any): Int? {\n    //obj在&&右侧自动转换为String类型\n    if(obj is String && obj.length > 0) {\n        return obj.length\n    }\n    return null\n}\n```\n参见[类](http://kotlinlang.org/docs/reference/classes.html)和[类型转换](http://kotlinlang.org/docs/reference/typecasts.html)\n\n### for循环\n```kotlin\nval items = listOf(\"apple\", \"banana\", \"kiwi\")\nfor(item in items) {\n    println(item)\n}\n```\n或者\n```kotlin\nval items = listOf(\"apple\", \"banana\", \"kiwi\")\nfor(i in items.indices) {\n    println(\"item at $i is ${item[i]}\")\n}\n```\n参见[for循环](http://kotlinlang.org/docs/reference/control-flow.html#for-loops)\n\n### while循环\n```kotlin\nval items = listOf(\"apple\", \"banana\", \"kiwi\")\nvar i = 0\nwhile(i < items.size) {\n    println(\"item at $i is ${item[i]}\")\n    i++\n}\n```\n参见[while循环](http://kotlinlang.org/docs/reference/control-flow.html#while-loops)\n\n### when表达式\nwhen通常用来代替switch和多个if else，且功能强大的多。如\n```kotlin\nfun describe(obj: Any): String = \nwhen(obj) {\n    1 -> \"One\"\n    \"Hello\" -> \"Greeting\"\n    is Long -> \"Long\"\n    !is String -> \"Not a String\"\n    else -> \"Unknow\"\n}\n```\n参见[when表达式](http://kotlinlang.org/docs/reference/control-flow.html#when-expression)\n\n### 使用范围表达式(<b>..</b>)\n#### 用in运算符检查一个数字是否在一个范围内。\n```kotlin\nval x = 10\nval y = 9\n//这是个闭区间,1和y+1都算进去。\nif(x in 1..y+1) {\n    println(\"fits in range\")\n}\n```\n#### 检查一个数字是否超出范围\n```kotlin\nval list = listOf(\"a\", \"b\", \"c\")\nif(-1 !in 0..list.lastIndex) {\n    println(\"-1 is out of range\")\n} \nif(list.size !is list.indices) {\n    println(\"list size is out of valid list indices range too\")\n}\n```\n#### 遍历一个范围\n```kotlin\nfor(x in 1..5) {\n    print(x)\n}\n```\n\n#### 使用步进遍历范围\n```kotlin\nfor(x in 1..10 step 2) {\n    print(x)\n}\nfor(x in 9 downTo 0 step 3) {\n    print(x)\n}\n```\n参见[范围](http://kotlinlang.org/docs/reference/ranges.html)\n\n### 集合\n遍历一个集合\n```kotlin\nfor (item in items) {\n    println(item)\n}\n```\n\n使用in操作判断集合是否含有某元素，如\n```kotlin\nfun main(args: Array<String>) {\n    val items = setOf(\"apple\", \"banana\", \"kiwi\")\n    when {\n        \"orange\" in items -> println(\"juicy\")\n        \"apple\" in items -> println(\"apple is fine too\")\n    }\n}\n```\n上述代码输出\n```\napple is fine too\n```\n\n使用lambda表达式过滤map集合\n```kotlin\nfun main(args: Array<String>) {\n    val fruits = listOf(\"banana\", \"avocado\", \"apple\", \"kiwi\")\n    fruits\n    .filter { it.startsWith(\"a\") }\n    .sortedBy { it }\n    .map { it.toUpperCase() }\n    .forEach { println(it) }\n}\n```\n上述代码输出\n```\nAPPLE\nAVOCADO\n```\n参见[高阶函数和lambda](http://kotlinlang.org/docs/reference/lambdas.html)\n\n## 习题\n#### 数组求和\n```kotlin\n/*\n * Your task is to implement the sum() function so that it computes the sum of\n * all elements in the given array a.\n */\npackage sum\n\nfun sum(a: IntArray): Int {\n    var s = 0\n    for(n in a) {\n        s += n\n    }\n    return s\n}\n```\n\n#### 求数组最大值索引\n```kotlin\n/*\n * Your task is to implement the indexOfMax() function so that it returns\n * the index of the largest element in the array, or null if the array is empty.\n */\npackage maxindex\n\nfun indexOfMax(a: IntArray): Int? {\n\tif(a.size == 0) {\n        return null\n    }\n    var m = Integer.MIN_VALUE\n    var ret = -1\n    for(i in a.indices) {\n        if(a[i] >= m) {\n            m = a[i]\n            ret = i;\n        }\n    } \n    return ret\n}\n\n```\n\n#### 这是求个什么？自己看解释吧\n```kotlin\n/*\n * Any array may be viewed as a number of \"runs\" of equal numbers.\n * For example, the following array has two runs:\n *   1, 1, 1, 2, 2\n * Three 1's in a row form the first run, and two 2's form the second.\n * This array has two runs of length one:\n *   3, 4\n * And this one has five runs:\n *   1, 0, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0\n * Your task is to implement the runs() function so that it returns the number\n * of runs in the given array.\n */\npackage runs\n\nfun runs(a: IntArray): Int {\n    if(a.size == 0) {\n        return 0\n    }\n    var ret = 1\n    var cur = a[0]\n    for(n in a) {\n    \tif(n != cur) {\n            ++ret\n            cur = n\n        }\n    }\n    return ret\n}\n```\n\n#### 求是否是回文字符串\n```kotlin\n/*\n * Your task is to implement a palindrome test.\n *\n * A string is called a palindrome when it reads the same way left-to-right\n * and right-to-left.\n *\n * See http://en.wikipedia.org/wiki/Palindrome\n */\npackage palindrome\n\nfun isPalindrome(s: String): Boolean {\n    if(s.length < 2) {\n        return true\n    }\n    var len = s.length / 2\n    for(i in 0..len - 1) {\n        if(s[i] != s[s.length - i - 1]) {\n            return false\n        }\n    }\n    return true\n}\n```\n\n#### 求落单数字\n```kotlin\n/*\n * Think of a perfect world where everybody has a soulmate.\n * Now, the real world is imperfect: there is exactly one number in the array\n * that does not have a pair. A pair is an element with the same value.\n * For example in this array:\n *   1, 2, 1, 2\n * every number has a pair, but in this one:\n *   1, 1, 1\n * one of the ones is lonely.\n *\n * Your task is to implement the findPairless() function so that it finds the\n * lonely number and returns it.\n *\n * A hint: there's a solution that looks at each element only once and uses no\n * data structures like collections or trees.\n */\npackage pairless\n\nfun findPairless(a: IntArray): Int {\n    // Write your solution here\n    var map = hashMapOf<Int, Int>();\n    for(n in a) {\n        var i = map.get(n)\n        \n        map.put(n, if(i == null) 1 else i + 1)\n    }\n    \n    for((k, v) in map) {\n        if(v % 2 == 1) {\n            return k\n        }\n    }\n    return 0\n}\n\n```","source":"_posts/kotlin-sample.md","raw":"---\ntitle: kotlin初探\ndate: 2017-05-25 12:33:34\ntags: [android, java, kotlin]\n---\n\n最近google推出了新的Android开发语言[kotlin](http://kotlinlang.org/)，花了点时间了解一下皮毛。\n\n在[kotlin](http://kotlinlang.org/)官网上的资料还是比较丰富的，提供了一个在线的[编辑器](https://try.kotlinlang.org/#/Examples/Hello,%20world!/Simplest%20version/Simplest%20version.kt)，可以写一些小的程序片段。另外提供了一个代码翻译的工具，可以直接将java代码片段翻译成kotlin。\n\n例如以下java代码：\n```java\n class Greeting {\n\tprivate String greeting;\n\tpublic Greeting(String g) {\n\t\tgreeting = g;\n\t}\n\tpublic void sayHello(String you) {\n\t\tSystem.out.println(greeting + \" \" + you);\n\t}\n\tpublic static void main(String[] argv) {\n\t\tGreeting greeting = new Greeting(\"Hello\");\n\t\tgreeting.sayHello(argv[0]);\n\t}\n}\n```\n对应的kotlin代码如下：\n<!--more-->\n```kotlin\ninternal class Greeting(g:String) {\n  private val greeting:String\n  init{\n    greeting = g\n  }\n  fun sayHello(you:String) {\n    println(greeting + \" \" + you)\n  }\n  companion object {\n    @JvmStatic fun main(argv:Array<String>) {\n      val greeting = Greeting(\"Hello\")\n      greeting.sayHello(argv[0])\n    }\n  }\n}\n```\n\n## 语法\nkotlin语法很多特性都有javascript ES6的影子，比如字符串模板，解构赋值，箭头函数，元编程。\n\n### 包定义。\n包定义必需位于源文件的顶端，格式如下\n```kotlin\npackage my.demo\n\nimport java.util.*\n\n// ...\n```\n这个跟java是一样的。\n\n### 函数\n#### 定义两个Int类型参数的求和函数 \n```kotlin \nfun sum(a: Int, b: Int): Int {\n    return a + b\n}\n```\n上面的函数可以有更简单的表达式写法\n#### 定义表达式函数\n可以看出表达式函数的返回值是自动推断的。\n```kotlin\nfun sum(a: Int, b: Int) = a + b\n```\n### 定义空返回值函数\n```kotlin\nfun printSum(a: Int, b: Int): Unit {\n    println(\"sum of $a and $b is ${a + b}\")\n}\n```\n其中<b>Unit</b>可以省略\n```kotlin\nfun printSum(a: Int, b: Int): {\n    println(\"sum of $a and $b is ${a + b}\")\n}\n```\n参见[函数](http://kotlinlang.org/docs/reference/functions.html)\n\n### 局部变量\n#### 定义常量（只允许赋值一次）\n```kotlin\nval a: Int = 1  // 立即赋值\nval b = 2   // 类型推断，为`Int`\nval c: Int  // 如果没有给出初始化的值，需要给出变量类型\nc = 3       // 延迟赋值\n```\n\n#### 定义变量\n```kotlin\nvar x = 5 // 类型推断\nx += 1\n```\n参见[属性和域](http://kotlinlang.org/docs/reference/properties.html)\n\n\n### 注释\nkotlin的注释跟java是一样的，支持行和块两种注释方式：\n```\n// This is an end-of-line comment\n\n/* This is a block comment\n   on multiple lines. */\n```\n跟java不一样的是，kotlin的块注释是可以嵌套的。\n```kotlin\n/*\n *This is a block comment\n *  on multiple lines\n /* This is a nested block comment.*/\n *This is a block comment\n *  on multiple lines\n */\n```\n参见[注释](http://kotlinlang.org/docs/reference/kotlin-doc.html)\n\n### 字符串模板\n```kotlin\nvar a = 1\n// 简单的字符串模板：\nval s1 = \"a is $a\" \n\na = 2\n// 任意表达式的模板：\nval s2 = \"${s1.replace(\"is\", \"was\")}, but now is $a\"\n```\n参见[字符串模板](http://kotlinlang.org/docs/reference/basic-types.html#string-templates)\n\n### 条件表达式\nkotlin没有三目运算符，取而代之的是条件表达式。\n\n例如一个常规的求最大值函数\n```kotlin\nfun maxOf(a: Int, b: Int): Int {\n    if(a > b) {\n        return a\n    } else {\n        return b\n    }\n}\n```\n假如用条件表达式可以这样写\n```kotlin\nfun maxOf(a: Int, b: Int) = if(a > b) a else b\n```\n参见[if表达式](http://kotlinlang.org/docs/reference/control-flow.html#if-expression)\n\n### 使用nullable和判断null\n如果一个值可能是null的话必须显示的标记出来，如\n如果<b>str</b>转换成<b>Int</b>失败，返回<b>null</b>:\n```kotlin\nfun parseInt(str: String): Int? {\n    //...\n}\n```\n使用返回nullable的函数。\n```kotlin\nfun printProduct(arg1: String, arg2: String) {\n    val x = parseInt(arg1)\n    val y = parseInt(arg2)\n    if(x != null && y != null) {\n        println(x * y)\n    } else {\n        println(\"'$arg1' 或者 '$arg2' 不是数字\")\n    }\n}\n```\n参见[安全的null](http://kotlinlang.org/docs/reference/null-safety.html)\n\n### 类型检查和自动转换\n这个操作用来检查一个对象的类型，局部变量或者属性经过判断之后，不用再显示的转换了，例如。\n\n```kotlin\nfun getStringLength(obj: Any): Int? {\n    if(obj is String) {\n        //obj在这个分支内自动转为\"String\"类型\n        return obj.length\n    }\n    //在上面的类型检查分支之外，类型仍然为\"Any\"\n    return null\n}\n```\n另一种方式\n```kotlin\nfun getStringLength(obj: Any): Int? {\n    if(obj !is String) {\n        return null\n    }\n    return obj.length\n}\n```\n甚至可以这样\n```kotlin\nfun getStringLength(obj: Any): Int? {\n    //obj在&&右侧自动转换为String类型\n    if(obj is String && obj.length > 0) {\n        return obj.length\n    }\n    return null\n}\n```\n参见[类](http://kotlinlang.org/docs/reference/classes.html)和[类型转换](http://kotlinlang.org/docs/reference/typecasts.html)\n\n### for循环\n```kotlin\nval items = listOf(\"apple\", \"banana\", \"kiwi\")\nfor(item in items) {\n    println(item)\n}\n```\n或者\n```kotlin\nval items = listOf(\"apple\", \"banana\", \"kiwi\")\nfor(i in items.indices) {\n    println(\"item at $i is ${item[i]}\")\n}\n```\n参见[for循环](http://kotlinlang.org/docs/reference/control-flow.html#for-loops)\n\n### while循环\n```kotlin\nval items = listOf(\"apple\", \"banana\", \"kiwi\")\nvar i = 0\nwhile(i < items.size) {\n    println(\"item at $i is ${item[i]}\")\n    i++\n}\n```\n参见[while循环](http://kotlinlang.org/docs/reference/control-flow.html#while-loops)\n\n### when表达式\nwhen通常用来代替switch和多个if else，且功能强大的多。如\n```kotlin\nfun describe(obj: Any): String = \nwhen(obj) {\n    1 -> \"One\"\n    \"Hello\" -> \"Greeting\"\n    is Long -> \"Long\"\n    !is String -> \"Not a String\"\n    else -> \"Unknow\"\n}\n```\n参见[when表达式](http://kotlinlang.org/docs/reference/control-flow.html#when-expression)\n\n### 使用范围表达式(<b>..</b>)\n#### 用in运算符检查一个数字是否在一个范围内。\n```kotlin\nval x = 10\nval y = 9\n//这是个闭区间,1和y+1都算进去。\nif(x in 1..y+1) {\n    println(\"fits in range\")\n}\n```\n#### 检查一个数字是否超出范围\n```kotlin\nval list = listOf(\"a\", \"b\", \"c\")\nif(-1 !in 0..list.lastIndex) {\n    println(\"-1 is out of range\")\n} \nif(list.size !is list.indices) {\n    println(\"list size is out of valid list indices range too\")\n}\n```\n#### 遍历一个范围\n```kotlin\nfor(x in 1..5) {\n    print(x)\n}\n```\n\n#### 使用步进遍历范围\n```kotlin\nfor(x in 1..10 step 2) {\n    print(x)\n}\nfor(x in 9 downTo 0 step 3) {\n    print(x)\n}\n```\n参见[范围](http://kotlinlang.org/docs/reference/ranges.html)\n\n### 集合\n遍历一个集合\n```kotlin\nfor (item in items) {\n    println(item)\n}\n```\n\n使用in操作判断集合是否含有某元素，如\n```kotlin\nfun main(args: Array<String>) {\n    val items = setOf(\"apple\", \"banana\", \"kiwi\")\n    when {\n        \"orange\" in items -> println(\"juicy\")\n        \"apple\" in items -> println(\"apple is fine too\")\n    }\n}\n```\n上述代码输出\n```\napple is fine too\n```\n\n使用lambda表达式过滤map集合\n```kotlin\nfun main(args: Array<String>) {\n    val fruits = listOf(\"banana\", \"avocado\", \"apple\", \"kiwi\")\n    fruits\n    .filter { it.startsWith(\"a\") }\n    .sortedBy { it }\n    .map { it.toUpperCase() }\n    .forEach { println(it) }\n}\n```\n上述代码输出\n```\nAPPLE\nAVOCADO\n```\n参见[高阶函数和lambda](http://kotlinlang.org/docs/reference/lambdas.html)\n\n## 习题\n#### 数组求和\n```kotlin\n/*\n * Your task is to implement the sum() function so that it computes the sum of\n * all elements in the given array a.\n */\npackage sum\n\nfun sum(a: IntArray): Int {\n    var s = 0\n    for(n in a) {\n        s += n\n    }\n    return s\n}\n```\n\n#### 求数组最大值索引\n```kotlin\n/*\n * Your task is to implement the indexOfMax() function so that it returns\n * the index of the largest element in the array, or null if the array is empty.\n */\npackage maxindex\n\nfun indexOfMax(a: IntArray): Int? {\n\tif(a.size == 0) {\n        return null\n    }\n    var m = Integer.MIN_VALUE\n    var ret = -1\n    for(i in a.indices) {\n        if(a[i] >= m) {\n            m = a[i]\n            ret = i;\n        }\n    } \n    return ret\n}\n\n```\n\n#### 这是求个什么？自己看解释吧\n```kotlin\n/*\n * Any array may be viewed as a number of \"runs\" of equal numbers.\n * For example, the following array has two runs:\n *   1, 1, 1, 2, 2\n * Three 1's in a row form the first run, and two 2's form the second.\n * This array has two runs of length one:\n *   3, 4\n * And this one has five runs:\n *   1, 0, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0\n * Your task is to implement the runs() function so that it returns the number\n * of runs in the given array.\n */\npackage runs\n\nfun runs(a: IntArray): Int {\n    if(a.size == 0) {\n        return 0\n    }\n    var ret = 1\n    var cur = a[0]\n    for(n in a) {\n    \tif(n != cur) {\n            ++ret\n            cur = n\n        }\n    }\n    return ret\n}\n```\n\n#### 求是否是回文字符串\n```kotlin\n/*\n * Your task is to implement a palindrome test.\n *\n * A string is called a palindrome when it reads the same way left-to-right\n * and right-to-left.\n *\n * See http://en.wikipedia.org/wiki/Palindrome\n */\npackage palindrome\n\nfun isPalindrome(s: String): Boolean {\n    if(s.length < 2) {\n        return true\n    }\n    var len = s.length / 2\n    for(i in 0..len - 1) {\n        if(s[i] != s[s.length - i - 1]) {\n            return false\n        }\n    }\n    return true\n}\n```\n\n#### 求落单数字\n```kotlin\n/*\n * Think of a perfect world where everybody has a soulmate.\n * Now, the real world is imperfect: there is exactly one number in the array\n * that does not have a pair. A pair is an element with the same value.\n * For example in this array:\n *   1, 2, 1, 2\n * every number has a pair, but in this one:\n *   1, 1, 1\n * one of the ones is lonely.\n *\n * Your task is to implement the findPairless() function so that it finds the\n * lonely number and returns it.\n *\n * A hint: there's a solution that looks at each element only once and uses no\n * data structures like collections or trees.\n */\npackage pairless\n\nfun findPairless(a: IntArray): Int {\n    // Write your solution here\n    var map = hashMapOf<Int, Int>();\n    for(n in a) {\n        var i = map.get(n)\n        \n        map.put(n, if(i == null) 1 else i + 1)\n    }\n    \n    for((k, v) in map) {\n        if(v % 2 == 1) {\n            return k\n        }\n    }\n    return 0\n}\n\n```","slug":"kotlin-sample","published":1,"updated":"2017-05-25T08:51:59.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o3z000qiwl7zjx9g47r","content":"<p>最近google推出了新的Android开发语言<a href=\"http://kotlinlang.org/\" target=\"_blank\" rel=\"external\">kotlin</a>，花了点时间了解一下皮毛。</p>\n<p>在<a href=\"http://kotlinlang.org/\" target=\"_blank\" rel=\"external\">kotlin</a>官网上的资料还是比较丰富的，提供了一个在线的<a href=\"https://try.kotlinlang.org/#/Examples/Hello,%20world!/Simplest%20version/Simplest%20version.kt\" target=\"_blank\" rel=\"external\">编辑器</a>，可以写一些小的程序片段。另外提供了一个代码翻译的工具，可以直接将java代码片段翻译成kotlin。</p>\n<p>例如以下java代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeting</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String greeting;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Greeting</span><span class=\"params\">(String g)</span> </span>&#123;</div><div class=\"line\">\t\tgreeting = g;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">(String you)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(greeting + <span class=\"string\">\" \"</span> + you);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] argv)</span> </span>&#123;</div><div class=\"line\">\t\tGreeting greeting = <span class=\"keyword\">new</span> Greeting(<span class=\"string\">\"Hello\"</span>);</div><div class=\"line\">\t\tgreeting.sayHello(argv[<span class=\"number\">0</span>]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>对应的kotlin代码如下：<br><a id=\"more\"></a><br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">internal</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeting</span></span>(g:String) &#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> greeting:String</div><div class=\"line\">  init&#123;</div><div class=\"line\">    greeting = g</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sayHello</span><span class=\"params\">(you:<span class=\"type\">String</span>)</span></span> &#123;</div><div class=\"line\">    println(greeting + <span class=\"string\">\" \"</span> + you)</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</div><div class=\"line\">    <span class=\"meta\">@JvmStatic</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(argv:<span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</div><div class=\"line\">      <span class=\"keyword\">val</span> greeting = Greeting(<span class=\"string\">\"Hello\"</span>)</div><div class=\"line\">      greeting.sayHello(argv[<span class=\"number\">0</span>])</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>kotlin语法很多特性都有javascript ES6的影子，比如字符串模板，解构赋值，箭头函数，元编程。</p>\n<h3 id=\"包定义。\"><a href=\"#包定义。\" class=\"headerlink\" title=\"包定义。\"></a>包定义。</h3><p>包定义必需位于源文件的顶端，格式如下<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> my.demo</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.*</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ...</span></div></pre></td></tr></table></figure></p>\n<p>这个跟java是一样的。</p>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><h4 id=\"定义两个Int类型参数的求和函数\"><a href=\"#定义两个Int类型参数的求和函数\" class=\"headerlink\" title=\"定义两个Int类型参数的求和函数\"></a>定义两个Int类型参数的求和函数</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sum</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a + b</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的函数可以有更简单的表达式写法</p>\n<h4 id=\"定义表达式函数\"><a href=\"#定义表达式函数\" class=\"headerlink\" title=\"定义表达式函数\"></a>定义表达式函数</h4><p>可以看出表达式函数的返回值是自动推断的。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sum</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span> = a + b</div></pre></td></tr></table></figure></p>\n<h3 id=\"定义空返回值函数\"><a href=\"#定义空返回值函数\" class=\"headerlink\" title=\"定义空返回值函数\"></a>定义空返回值函数</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printSum</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Unit</span> &#123;</div><div class=\"line\">    println(<span class=\"string\">\"sum of <span class=\"subst\">$a</span> and <span class=\"subst\">$b</span> is <span class=\"subst\">$&#123;a + b&#125;</span>\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中<b>Unit</b>可以省略<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printSum</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span>: &#123;</div><div class=\"line\">    println(<span class=\"string\">\"sum of <span class=\"subst\">$a</span> and <span class=\"subst\">$b</span> is <span class=\"subst\">$&#123;a + b&#125;</span>\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/functions.html\" target=\"_blank\" rel=\"external\">函数</a></p>\n<h3 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h3><h4 id=\"定义常量（只允许赋值一次）\"><a href=\"#定义常量（只允许赋值一次）\" class=\"headerlink\" title=\"定义常量（只允许赋值一次）\"></a>定义常量（只允许赋值一次）</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> a: <span class=\"built_in\">Int</span> = <span class=\"number\">1</span>  <span class=\"comment\">// 立即赋值</span></div><div class=\"line\"><span class=\"keyword\">val</span> b = <span class=\"number\">2</span>   <span class=\"comment\">// 类型推断，为`Int`</span></div><div class=\"line\"><span class=\"keyword\">val</span> c: <span class=\"built_in\">Int</span>  <span class=\"comment\">// 如果没有给出初始化的值，需要给出变量类型</span></div><div class=\"line\">c = <span class=\"number\">3</span>       <span class=\"comment\">// 延迟赋值</span></div></pre></td></tr></table></figure>\n<h4 id=\"定义变量\"><a href=\"#定义变量\" class=\"headerlink\" title=\"定义变量\"></a>定义变量</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">5</span> <span class=\"comment\">// 类型推断</span></div><div class=\"line\">x += <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/properties.html\" target=\"_blank\" rel=\"external\">属性和域</a></p>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>kotlin的注释跟java是一样的，支持行和块两种注释方式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// This is an end-of-line comment</div><div class=\"line\"></div><div class=\"line\">/* This is a block comment</div><div class=\"line\">   on multiple lines. */</div></pre></td></tr></table></figure></p>\n<p>跟java不一样的是，kotlin的块注释是可以嵌套的。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> *This is a block comment</div><div class=\"line\"> *  on multiple lines</div><div class=\"line\"> /* This is a nested block comment.*/</div><div class=\"line\"> *This <span class=\"keyword\">is</span> a block comment</div><div class=\"line\"> *  on multiple lines</div><div class=\"line\"> */</div></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/kotlin-doc.html\" target=\"_blank\" rel=\"external\">注释</a></p>\n<h3 id=\"字符串模板\"><a href=\"#字符串模板\" class=\"headerlink\" title=\"字符串模板\"></a>字符串模板</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"comment\">// 简单的字符串模板：</span></div><div class=\"line\"><span class=\"keyword\">val</span> s1 = <span class=\"string\">\"a is <span class=\"subst\">$a</span>\"</span> </div><div class=\"line\"></div><div class=\"line\">a = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"comment\">// 任意表达式的模板：</span></div><div class=\"line\"><span class=\"keyword\">val</span> s2 = <span class=\"string\">\"<span class=\"subst\">$&#123;s1.replace(\"is\", \"was\")&#125;</span>, but now is <span class=\"subst\">$a</span>\"</span></div></pre></td></tr></table></figure>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/basic-types.html#string-templates\" target=\"_blank\" rel=\"external\">字符串模板</a></p>\n<h3 id=\"条件表达式\"><a href=\"#条件表达式\" class=\"headerlink\" title=\"条件表达式\"></a>条件表达式</h3><p>kotlin没有三目运算符，取而代之的是条件表达式。</p>\n<p>例如一个常规的求最大值函数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">maxOf</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(a &gt; b) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> a</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> b</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>假如用条件表达式可以这样写<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">maxOf</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span> = <span class=\"keyword\">if</span>(a &gt; b) a <span class=\"keyword\">else</span> b</div></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/control-flow.html#if-expression\" target=\"_blank\" rel=\"external\">if表达式</a></p>\n<h3 id=\"使用nullable和判断null\"><a href=\"#使用nullable和判断null\" class=\"headerlink\" title=\"使用nullable和判断null\"></a>使用nullable和判断null</h3><p>如果一个值可能是null的话必须显示的标记出来，如<br>如果<b>str</b>转换成<b>Int</b>失败，返回<b>null</b>:<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">parseInt</span><span class=\"params\">(str: <span class=\"type\">String</span>)</span></span>: <span class=\"built_in\">Int</span>? &#123;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用返回nullable的函数。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printProduct</span><span class=\"params\">(arg1: <span class=\"type\">String</span>, arg2: <span class=\"type\">String</span>)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> x = parseInt(arg1)</div><div class=\"line\">    <span class=\"keyword\">val</span> y = parseInt(arg2)</div><div class=\"line\">    <span class=\"keyword\">if</span>(x != <span class=\"literal\">null</span> &amp;&amp; y != <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">        println(x * y)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        println(<span class=\"string\">\"'<span class=\"subst\">$arg1</span>' 或者 '<span class=\"subst\">$arg2</span>' 不是数字\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/null-safety.html\" target=\"_blank\" rel=\"external\">安全的null</a></p>\n<h3 id=\"类型检查和自动转换\"><a href=\"#类型检查和自动转换\" class=\"headerlink\" title=\"类型检查和自动转换\"></a>类型检查和自动转换</h3><p>这个操作用来检查一个对象的类型，局部变量或者属性经过判断之后，不用再显示的转换了，例如。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getStringLength</span><span class=\"params\">(obj: <span class=\"type\">Any</span>)</span></span>: <span class=\"built_in\">Int</span>? &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(obj <span class=\"keyword\">is</span> String) &#123;</div><div class=\"line\">        <span class=\"comment\">//obj在这个分支内自动转为\"String\"类型</span></div><div class=\"line\">        <span class=\"keyword\">return</span> obj.length</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//在上面的类型检查分支之外，类型仍然为\"Any\"</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>另一种方式<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getStringLength</span><span class=\"params\">(obj: <span class=\"type\">Any</span>)</span></span>: <span class=\"built_in\">Int</span>? &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(obj !<span class=\"keyword\">is</span> String) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj.length</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>甚至可以这样<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getStringLength</span><span class=\"params\">(obj: <span class=\"type\">Any</span>)</span></span>: <span class=\"built_in\">Int</span>? &#123;</div><div class=\"line\">    <span class=\"comment\">//obj在&amp;&amp;右侧自动转换为String类型</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(obj <span class=\"keyword\">is</span> String &amp;&amp; obj.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> obj.length</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/classes.html\" target=\"_blank\" rel=\"external\">类</a>和<a href=\"http://kotlinlang.org/docs/reference/typecasts.html\" target=\"_blank\" rel=\"external\">类型转换</a></p>\n<h3 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> items = listOf(<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"banana\"</span>, <span class=\"string\">\"kiwi\"</span>)</div><div class=\"line\"><span class=\"keyword\">for</span>(item <span class=\"keyword\">in</span> items) &#123;</div><div class=\"line\">    println(item)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>或者<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> items = listOf(<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"banana\"</span>, <span class=\"string\">\"kiwi\"</span>)</div><div class=\"line\"><span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> items.indices) &#123;</div><div class=\"line\">    println(<span class=\"string\">\"item at <span class=\"subst\">$i</span> is <span class=\"subst\">$&#123;item[i]&#125;</span>\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/control-flow.html#for-loops\" target=\"_blank\" rel=\"external\">for循环</a></p>\n<h3 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> items = listOf(<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"banana\"</span>, <span class=\"string\">\"kiwi\"</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">while</span>(i &lt; items.size) &#123;</div><div class=\"line\">    println(<span class=\"string\">\"item at <span class=\"subst\">$i</span> is <span class=\"subst\">$&#123;item[i]&#125;</span>\"</span>)</div><div class=\"line\">    i++</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/control-flow.html#while-loops\" target=\"_blank\" rel=\"external\">while循环</a></p>\n<h3 id=\"when表达式\"><a href=\"#when表达式\" class=\"headerlink\" title=\"when表达式\"></a>when表达式</h3><p>when通常用来代替switch和多个if else，且功能强大的多。如<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">describe</span><span class=\"params\">(obj: <span class=\"type\">Any</span>)</span></span>: String = </div><div class=\"line\"><span class=\"keyword\">when</span>(obj) &#123;</div><div class=\"line\">    <span class=\"number\">1</span> -&gt; <span class=\"string\">\"One\"</span></div><div class=\"line\">    <span class=\"string\">\"Hello\"</span> -&gt; <span class=\"string\">\"Greeting\"</span></div><div class=\"line\">    <span class=\"keyword\">is</span> <span class=\"built_in\">Long</span> -&gt; <span class=\"string\">\"Long\"</span></div><div class=\"line\">    !<span class=\"keyword\">is</span> String -&gt; <span class=\"string\">\"Not a String\"</span></div><div class=\"line\">    <span class=\"keyword\">else</span> -&gt; <span class=\"string\">\"Unknow\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/control-flow.html#when-expression\" target=\"_blank\" rel=\"external\">when表达式</a></p>\n<h3 id=\"使用范围表达式\"><a href=\"#使用范围表达式\" class=\"headerlink\" title=\"使用范围表达式(..)\"></a>使用范围表达式(<b>..</b>)</h3><h4 id=\"用in运算符检查一个数字是否在一个范围内。\"><a href=\"#用in运算符检查一个数字是否在一个范围内。\" class=\"headerlink\" title=\"用in运算符检查一个数字是否在一个范围内。\"></a>用in运算符检查一个数字是否在一个范围内。</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> x = <span class=\"number\">10</span></div><div class=\"line\"><span class=\"keyword\">val</span> y = <span class=\"number\">9</span></div><div class=\"line\"><span class=\"comment\">//这是个闭区间,1和y+1都算进去。</span></div><div class=\"line\"><span class=\"keyword\">if</span>(x <span class=\"keyword\">in</span> <span class=\"number\">1.</span>.y+<span class=\"number\">1</span>) &#123;</div><div class=\"line\">    println(<span class=\"string\">\"fits in range\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"检查一个数字是否超出范围\"><a href=\"#检查一个数字是否超出范围\" class=\"headerlink\" title=\"检查一个数字是否超出范围\"></a>检查一个数字是否超出范围</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> list = listOf(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>)</div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"number\">-1</span> !<span class=\"keyword\">in</span> <span class=\"number\">0.</span>.list.lastIndex) &#123;</div><div class=\"line\">    println(<span class=\"string\">\"-1 is out of range\"</span>)</div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"keyword\">if</span>(list.size !<span class=\"keyword\">is</span> list.indices) &#123;</div><div class=\"line\">    println(<span class=\"string\">\"list size is out of valid list indices range too\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"遍历一个范围\"><a href=\"#遍历一个范围\" class=\"headerlink\" title=\"遍历一个范围\"></a>遍历一个范围</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(x <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.5</span>) &#123;</div><div class=\"line\">    print(x)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"使用步进遍历范围\"><a href=\"#使用步进遍历范围\" class=\"headerlink\" title=\"使用步进遍历范围\"></a>使用步进遍历范围</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(x <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.10</span> step <span class=\"number\">2</span>) &#123;</div><div class=\"line\">    print(x)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span>(x <span class=\"keyword\">in</span> <span class=\"number\">9</span> downTo <span class=\"number\">0</span> step <span class=\"number\">3</span>) &#123;</div><div class=\"line\">    print(x)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/ranges.html\" target=\"_blank\" rel=\"external\">范围</a></p>\n<h3 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h3><p>遍历一个集合<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (item <span class=\"keyword\">in</span> items) &#123;</div><div class=\"line\">    println(item)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用in操作判断集合是否含有某元素，如<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> items = setOf(<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"banana\"</span>, <span class=\"string\">\"kiwi\"</span>)</div><div class=\"line\">    <span class=\"keyword\">when</span> &#123;</div><div class=\"line\">        <span class=\"string\">\"orange\"</span> <span class=\"keyword\">in</span> items -&gt; println(<span class=\"string\">\"juicy\"</span>)</div><div class=\"line\">        <span class=\"string\">\"apple\"</span> <span class=\"keyword\">in</span> items -&gt; println(<span class=\"string\">\"apple is fine too\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上述代码输出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apple is fine too</div></pre></td></tr></table></figure></p>\n<p>使用lambda表达式过滤map集合<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> fruits = listOf(<span class=\"string\">\"banana\"</span>, <span class=\"string\">\"avocado\"</span>, <span class=\"string\">\"apple\"</span>, <span class=\"string\">\"kiwi\"</span>)</div><div class=\"line\">    fruits</div><div class=\"line\">    .filter &#123; it.startsWith(<span class=\"string\">\"a\"</span>) &#125;</div><div class=\"line\">    .sortedBy &#123; it &#125;</div><div class=\"line\">    .map &#123; it.toUpperCase() &#125;</div><div class=\"line\">    .forEach &#123; println(it) &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上述代码输出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">APPLE</div><div class=\"line\">AVOCADO</div></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/lambdas.html\" target=\"_blank\" rel=\"external\">高阶函数和lambda</a></p>\n<h2 id=\"习题\"><a href=\"#习题\" class=\"headerlink\" title=\"习题\"></a>习题</h2><h4 id=\"数组求和\"><a href=\"#数组求和\" class=\"headerlink\" title=\"数组求和\"></a>数组求和</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Your task is to implement the sum() function so that it computes the sum of</div><div class=\"line\"> * all elements in the given array a.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">package</span> sum</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sum</span><span class=\"params\">(a: <span class=\"type\">IntArray</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(n <span class=\"keyword\">in</span> a) &#123;</div><div class=\"line\">        s += n</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> s</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"求数组最大值索引\"><a href=\"#求数组最大值索引\" class=\"headerlink\" title=\"求数组最大值索引\"></a>求数组最大值索引</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Your task is to implement the indexOfMax() function so that it returns</div><div class=\"line\"> * the index of the largest element in the array, or null if the array is empty.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">package</span> maxindex</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">indexOfMax</span><span class=\"params\">(a: <span class=\"type\">IntArray</span>)</span></span>: <span class=\"built_in\">Int</span>? &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(a.size == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> m = Integer.MIN_VALUE</div><div class=\"line\">    <span class=\"keyword\">var</span> ret = <span class=\"number\">-1</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> a.indices) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(a[i] &gt;= m) &#123;</div><div class=\"line\">            m = a[i]</div><div class=\"line\">            ret = i;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"keyword\">return</span> ret</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"这是求个什么？自己看解释吧\"><a href=\"#这是求个什么？自己看解释吧\" class=\"headerlink\" title=\"这是求个什么？自己看解释吧\"></a>这是求个什么？自己看解释吧</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Any array may be viewed as a number of \"runs\" of equal numbers.</div><div class=\"line\"> * For example, the following array has two runs:</div><div class=\"line\"> *   1, 1, 1, 2, 2</div><div class=\"line\"> * Three 1's in a row form the first run, and two 2's form the second.</div><div class=\"line\"> * This array has two runs of length one:</div><div class=\"line\"> *   3, 4</div><div class=\"line\"> * And this one has five runs:</div><div class=\"line\"> *   1, 0, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0</div><div class=\"line\"> * Your task is to implement the runs() function so that it returns the number</div><div class=\"line\"> * of runs in the given array.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">package</span> runs</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">runs</span><span class=\"params\">(a: <span class=\"type\">IntArray</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(a.size == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> ret = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">var</span> cur = a[<span class=\"number\">0</span>]</div><div class=\"line\">    <span class=\"keyword\">for</span>(n <span class=\"keyword\">in</span> a) &#123;</div><div class=\"line\">    \t<span class=\"keyword\">if</span>(n != cur) &#123;</div><div class=\"line\">            ++ret</div><div class=\"line\">            cur = n</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"求是否是回文字符串\"><a href=\"#求是否是回文字符串\" class=\"headerlink\" title=\"求是否是回文字符串\"></a>求是否是回文字符串</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Your task is to implement a palindrome test.</div><div class=\"line\"> *</div><div class=\"line\"> * A string is called a palindrome when it reads the same way left-to-right</div><div class=\"line\"> * and right-to-left.</div><div class=\"line\"> *</div><div class=\"line\"> * See http://en.wikipedia.org/wiki/Palindrome</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">package</span> palindrome</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(s: <span class=\"type\">String</span>)</span></span>: <span class=\"built_in\">Boolean</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(s.length &lt; <span class=\"number\">2</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> len = s.length / <span class=\"number\">2</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">0.</span>.len - <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(s[i] != s[s.length - i - <span class=\"number\">1</span>]) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"求落单数字\"><a href=\"#求落单数字\" class=\"headerlink\" title=\"求落单数字\"></a>求落单数字</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Think of a perfect world where everybody has a soulmate.</div><div class=\"line\"> * Now, the real world is imperfect: there is exactly one number in the array</div><div class=\"line\"> * that does not have a pair. A pair is an element with the same value.</div><div class=\"line\"> * For example in this array:</div><div class=\"line\"> *   1, 2, 1, 2</div><div class=\"line\"> * every number has a pair, but in this one:</div><div class=\"line\"> *   1, 1, 1</div><div class=\"line\"> * one of the ones is lonely.</div><div class=\"line\"> *</div><div class=\"line\"> * Your task is to implement the findPairless() function so that it finds the</div><div class=\"line\"> * lonely number and returns it.</div><div class=\"line\"> *</div><div class=\"line\"> * A hint: there's a solution that looks at each element only once and uses no</div><div class=\"line\"> * data structures like collections or trees.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">package</span> pairless</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">findPairless</span><span class=\"params\">(a: <span class=\"type\">IntArray</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// Write your solution here</span></div><div class=\"line\">    <span class=\"keyword\">var</span> map = hashMapOf&lt;<span class=\"built_in\">Int</span>, <span class=\"built_in\">Int</span>&gt;();</div><div class=\"line\">    <span class=\"keyword\">for</span>(n <span class=\"keyword\">in</span> a) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> i = map.<span class=\"keyword\">get</span>(n)</div><div class=\"line\">        </div><div class=\"line\">        map.put(n, <span class=\"keyword\">if</span>(i == <span class=\"literal\">null</span>) <span class=\"number\">1</span> <span class=\"keyword\">else</span> i + <span class=\"number\">1</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span>((k, v) <span class=\"keyword\">in</span> map) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(v % <span class=\"number\">2</span> == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> k</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>最近google推出了新的Android开发语言<a href=\"http://kotlinlang.org/\" target=\"_blank\" rel=\"external\">kotlin</a>，花了点时间了解一下皮毛。</p>\n<p>在<a href=\"http://kotlinlang.org/\" target=\"_blank\" rel=\"external\">kotlin</a>官网上的资料还是比较丰富的，提供了一个在线的<a href=\"https://try.kotlinlang.org/#/Examples/Hello,%20world!/Simplest%20version/Simplest%20version.kt\" target=\"_blank\" rel=\"external\">编辑器</a>，可以写一些小的程序片段。另外提供了一个代码翻译的工具，可以直接将java代码片段翻译成kotlin。</p>\n<p>例如以下java代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeting</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String greeting;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Greeting</span><span class=\"params\">(String g)</span> </span>&#123;</div><div class=\"line\">\t\tgreeting = g;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">(String you)</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(greeting + <span class=\"string\">\" \"</span> + you);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] argv)</span> </span>&#123;</div><div class=\"line\">\t\tGreeting greeting = <span class=\"keyword\">new</span> Greeting(<span class=\"string\">\"Hello\"</span>);</div><div class=\"line\">\t\tgreeting.sayHello(argv[<span class=\"number\">0</span>]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>对应的kotlin代码如下：<br>","more":"<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">internal</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeting</span></span>(g:String) &#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> greeting:String</div><div class=\"line\">  init&#123;</div><div class=\"line\">    greeting = g</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sayHello</span><span class=\"params\">(you:<span class=\"type\">String</span>)</span></span> &#123;</div><div class=\"line\">    println(greeting + <span class=\"string\">\" \"</span> + you)</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</div><div class=\"line\">    <span class=\"meta\">@JvmStatic</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(argv:<span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</div><div class=\"line\">      <span class=\"keyword\">val</span> greeting = Greeting(<span class=\"string\">\"Hello\"</span>)</div><div class=\"line\">      greeting.sayHello(argv[<span class=\"number\">0</span>])</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>kotlin语法很多特性都有javascript ES6的影子，比如字符串模板，解构赋值，箭头函数，元编程。</p>\n<h3 id=\"包定义。\"><a href=\"#包定义。\" class=\"headerlink\" title=\"包定义。\"></a>包定义。</h3><p>包定义必需位于源文件的顶端，格式如下<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> my.demo</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.*</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ...</span></div></pre></td></tr></table></figure></p>\n<p>这个跟java是一样的。</p>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><h4 id=\"定义两个Int类型参数的求和函数\"><a href=\"#定义两个Int类型参数的求和函数\" class=\"headerlink\" title=\"定义两个Int类型参数的求和函数\"></a>定义两个Int类型参数的求和函数</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sum</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a + b</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的函数可以有更简单的表达式写法</p>\n<h4 id=\"定义表达式函数\"><a href=\"#定义表达式函数\" class=\"headerlink\" title=\"定义表达式函数\"></a>定义表达式函数</h4><p>可以看出表达式函数的返回值是自动推断的。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sum</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span> = a + b</div></pre></td></tr></table></figure></p>\n<h3 id=\"定义空返回值函数\"><a href=\"#定义空返回值函数\" class=\"headerlink\" title=\"定义空返回值函数\"></a>定义空返回值函数</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printSum</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Unit</span> &#123;</div><div class=\"line\">    println(<span class=\"string\">\"sum of <span class=\"subst\">$a</span> and <span class=\"subst\">$b</span> is <span class=\"subst\">$&#123;a + b&#125;</span>\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中<b>Unit</b>可以省略<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printSum</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span>: &#123;</div><div class=\"line\">    println(<span class=\"string\">\"sum of <span class=\"subst\">$a</span> and <span class=\"subst\">$b</span> is <span class=\"subst\">$&#123;a + b&#125;</span>\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/functions.html\" target=\"_blank\" rel=\"external\">函数</a></p>\n<h3 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h3><h4 id=\"定义常量（只允许赋值一次）\"><a href=\"#定义常量（只允许赋值一次）\" class=\"headerlink\" title=\"定义常量（只允许赋值一次）\"></a>定义常量（只允许赋值一次）</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> a: <span class=\"built_in\">Int</span> = <span class=\"number\">1</span>  <span class=\"comment\">// 立即赋值</span></div><div class=\"line\"><span class=\"keyword\">val</span> b = <span class=\"number\">2</span>   <span class=\"comment\">// 类型推断，为`Int`</span></div><div class=\"line\"><span class=\"keyword\">val</span> c: <span class=\"built_in\">Int</span>  <span class=\"comment\">// 如果没有给出初始化的值，需要给出变量类型</span></div><div class=\"line\">c = <span class=\"number\">3</span>       <span class=\"comment\">// 延迟赋值</span></div></pre></td></tr></table></figure>\n<h4 id=\"定义变量\"><a href=\"#定义变量\" class=\"headerlink\" title=\"定义变量\"></a>定义变量</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">5</span> <span class=\"comment\">// 类型推断</span></div><div class=\"line\">x += <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/properties.html\" target=\"_blank\" rel=\"external\">属性和域</a></p>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>kotlin的注释跟java是一样的，支持行和块两种注释方式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// This is an end-of-line comment</div><div class=\"line\"></div><div class=\"line\">/* This is a block comment</div><div class=\"line\">   on multiple lines. */</div></pre></td></tr></table></figure></p>\n<p>跟java不一样的是，kotlin的块注释是可以嵌套的。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> *This is a block comment</div><div class=\"line\"> *  on multiple lines</div><div class=\"line\"> /* This is a nested block comment.*/</div><div class=\"line\"> *This <span class=\"keyword\">is</span> a block comment</div><div class=\"line\"> *  on multiple lines</div><div class=\"line\"> */</div></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/kotlin-doc.html\" target=\"_blank\" rel=\"external\">注释</a></p>\n<h3 id=\"字符串模板\"><a href=\"#字符串模板\" class=\"headerlink\" title=\"字符串模板\"></a>字符串模板</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"comment\">// 简单的字符串模板：</span></div><div class=\"line\"><span class=\"keyword\">val</span> s1 = <span class=\"string\">\"a is <span class=\"subst\">$a</span>\"</span> </div><div class=\"line\"></div><div class=\"line\">a = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"comment\">// 任意表达式的模板：</span></div><div class=\"line\"><span class=\"keyword\">val</span> s2 = <span class=\"string\">\"<span class=\"subst\">$&#123;s1.replace(\"is\", \"was\")&#125;</span>, but now is <span class=\"subst\">$a</span>\"</span></div></pre></td></tr></table></figure>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/basic-types.html#string-templates\" target=\"_blank\" rel=\"external\">字符串模板</a></p>\n<h3 id=\"条件表达式\"><a href=\"#条件表达式\" class=\"headerlink\" title=\"条件表达式\"></a>条件表达式</h3><p>kotlin没有三目运算符，取而代之的是条件表达式。</p>\n<p>例如一个常规的求最大值函数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">maxOf</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(a &gt; b) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> a</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> b</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>假如用条件表达式可以这样写<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">maxOf</span><span class=\"params\">(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>)</span></span> = <span class=\"keyword\">if</span>(a &gt; b) a <span class=\"keyword\">else</span> b</div></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/control-flow.html#if-expression\" target=\"_blank\" rel=\"external\">if表达式</a></p>\n<h3 id=\"使用nullable和判断null\"><a href=\"#使用nullable和判断null\" class=\"headerlink\" title=\"使用nullable和判断null\"></a>使用nullable和判断null</h3><p>如果一个值可能是null的话必须显示的标记出来，如<br>如果<b>str</b>转换成<b>Int</b>失败，返回<b>null</b>:<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">parseInt</span><span class=\"params\">(str: <span class=\"type\">String</span>)</span></span>: <span class=\"built_in\">Int</span>? &#123;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用返回nullable的函数。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printProduct</span><span class=\"params\">(arg1: <span class=\"type\">String</span>, arg2: <span class=\"type\">String</span>)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> x = parseInt(arg1)</div><div class=\"line\">    <span class=\"keyword\">val</span> y = parseInt(arg2)</div><div class=\"line\">    <span class=\"keyword\">if</span>(x != <span class=\"literal\">null</span> &amp;&amp; y != <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">        println(x * y)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        println(<span class=\"string\">\"'<span class=\"subst\">$arg1</span>' 或者 '<span class=\"subst\">$arg2</span>' 不是数字\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/null-safety.html\" target=\"_blank\" rel=\"external\">安全的null</a></p>\n<h3 id=\"类型检查和自动转换\"><a href=\"#类型检查和自动转换\" class=\"headerlink\" title=\"类型检查和自动转换\"></a>类型检查和自动转换</h3><p>这个操作用来检查一个对象的类型，局部变量或者属性经过判断之后，不用再显示的转换了，例如。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getStringLength</span><span class=\"params\">(obj: <span class=\"type\">Any</span>)</span></span>: <span class=\"built_in\">Int</span>? &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(obj <span class=\"keyword\">is</span> String) &#123;</div><div class=\"line\">        <span class=\"comment\">//obj在这个分支内自动转为\"String\"类型</span></div><div class=\"line\">        <span class=\"keyword\">return</span> obj.length</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//在上面的类型检查分支之外，类型仍然为\"Any\"</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>另一种方式<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getStringLength</span><span class=\"params\">(obj: <span class=\"type\">Any</span>)</span></span>: <span class=\"built_in\">Int</span>? &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(obj !<span class=\"keyword\">is</span> String) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj.length</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>甚至可以这样<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getStringLength</span><span class=\"params\">(obj: <span class=\"type\">Any</span>)</span></span>: <span class=\"built_in\">Int</span>? &#123;</div><div class=\"line\">    <span class=\"comment\">//obj在&amp;&amp;右侧自动转换为String类型</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(obj <span class=\"keyword\">is</span> String &amp;&amp; obj.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> obj.length</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/classes.html\" target=\"_blank\" rel=\"external\">类</a>和<a href=\"http://kotlinlang.org/docs/reference/typecasts.html\" target=\"_blank\" rel=\"external\">类型转换</a></p>\n<h3 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> items = listOf(<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"banana\"</span>, <span class=\"string\">\"kiwi\"</span>)</div><div class=\"line\"><span class=\"keyword\">for</span>(item <span class=\"keyword\">in</span> items) &#123;</div><div class=\"line\">    println(item)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>或者<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> items = listOf(<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"banana\"</span>, <span class=\"string\">\"kiwi\"</span>)</div><div class=\"line\"><span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> items.indices) &#123;</div><div class=\"line\">    println(<span class=\"string\">\"item at <span class=\"subst\">$i</span> is <span class=\"subst\">$&#123;item[i]&#125;</span>\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/control-flow.html#for-loops\" target=\"_blank\" rel=\"external\">for循环</a></p>\n<h3 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> items = listOf(<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"banana\"</span>, <span class=\"string\">\"kiwi\"</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">while</span>(i &lt; items.size) &#123;</div><div class=\"line\">    println(<span class=\"string\">\"item at <span class=\"subst\">$i</span> is <span class=\"subst\">$&#123;item[i]&#125;</span>\"</span>)</div><div class=\"line\">    i++</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/control-flow.html#while-loops\" target=\"_blank\" rel=\"external\">while循环</a></p>\n<h3 id=\"when表达式\"><a href=\"#when表达式\" class=\"headerlink\" title=\"when表达式\"></a>when表达式</h3><p>when通常用来代替switch和多个if else，且功能强大的多。如<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">describe</span><span class=\"params\">(obj: <span class=\"type\">Any</span>)</span></span>: String = </div><div class=\"line\"><span class=\"keyword\">when</span>(obj) &#123;</div><div class=\"line\">    <span class=\"number\">1</span> -&gt; <span class=\"string\">\"One\"</span></div><div class=\"line\">    <span class=\"string\">\"Hello\"</span> -&gt; <span class=\"string\">\"Greeting\"</span></div><div class=\"line\">    <span class=\"keyword\">is</span> <span class=\"built_in\">Long</span> -&gt; <span class=\"string\">\"Long\"</span></div><div class=\"line\">    !<span class=\"keyword\">is</span> String -&gt; <span class=\"string\">\"Not a String\"</span></div><div class=\"line\">    <span class=\"keyword\">else</span> -&gt; <span class=\"string\">\"Unknow\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/control-flow.html#when-expression\" target=\"_blank\" rel=\"external\">when表达式</a></p>\n<h3 id=\"使用范围表达式\"><a href=\"#使用范围表达式\" class=\"headerlink\" title=\"使用范围表达式(..)\"></a>使用范围表达式(<b>..</b>)</h3><h4 id=\"用in运算符检查一个数字是否在一个范围内。\"><a href=\"#用in运算符检查一个数字是否在一个范围内。\" class=\"headerlink\" title=\"用in运算符检查一个数字是否在一个范围内。\"></a>用in运算符检查一个数字是否在一个范围内。</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> x = <span class=\"number\">10</span></div><div class=\"line\"><span class=\"keyword\">val</span> y = <span class=\"number\">9</span></div><div class=\"line\"><span class=\"comment\">//这是个闭区间,1和y+1都算进去。</span></div><div class=\"line\"><span class=\"keyword\">if</span>(x <span class=\"keyword\">in</span> <span class=\"number\">1.</span>.y+<span class=\"number\">1</span>) &#123;</div><div class=\"line\">    println(<span class=\"string\">\"fits in range\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"检查一个数字是否超出范围\"><a href=\"#检查一个数字是否超出范围\" class=\"headerlink\" title=\"检查一个数字是否超出范围\"></a>检查一个数字是否超出范围</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> list = listOf(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>)</div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"number\">-1</span> !<span class=\"keyword\">in</span> <span class=\"number\">0.</span>.list.lastIndex) &#123;</div><div class=\"line\">    println(<span class=\"string\">\"-1 is out of range\"</span>)</div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"keyword\">if</span>(list.size !<span class=\"keyword\">is</span> list.indices) &#123;</div><div class=\"line\">    println(<span class=\"string\">\"list size is out of valid list indices range too\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"遍历一个范围\"><a href=\"#遍历一个范围\" class=\"headerlink\" title=\"遍历一个范围\"></a>遍历一个范围</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(x <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.5</span>) &#123;</div><div class=\"line\">    print(x)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"使用步进遍历范围\"><a href=\"#使用步进遍历范围\" class=\"headerlink\" title=\"使用步进遍历范围\"></a>使用步进遍历范围</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(x <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.10</span> step <span class=\"number\">2</span>) &#123;</div><div class=\"line\">    print(x)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span>(x <span class=\"keyword\">in</span> <span class=\"number\">9</span> downTo <span class=\"number\">0</span> step <span class=\"number\">3</span>) &#123;</div><div class=\"line\">    print(x)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/ranges.html\" target=\"_blank\" rel=\"external\">范围</a></p>\n<h3 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h3><p>遍历一个集合<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (item <span class=\"keyword\">in</span> items) &#123;</div><div class=\"line\">    println(item)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用in操作判断集合是否含有某元素，如<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> items = setOf(<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"banana\"</span>, <span class=\"string\">\"kiwi\"</span>)</div><div class=\"line\">    <span class=\"keyword\">when</span> &#123;</div><div class=\"line\">        <span class=\"string\">\"orange\"</span> <span class=\"keyword\">in</span> items -&gt; println(<span class=\"string\">\"juicy\"</span>)</div><div class=\"line\">        <span class=\"string\">\"apple\"</span> <span class=\"keyword\">in</span> items -&gt; println(<span class=\"string\">\"apple is fine too\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上述代码输出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apple is fine too</div></pre></td></tr></table></figure></p>\n<p>使用lambda表达式过滤map集合<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> fruits = listOf(<span class=\"string\">\"banana\"</span>, <span class=\"string\">\"avocado\"</span>, <span class=\"string\">\"apple\"</span>, <span class=\"string\">\"kiwi\"</span>)</div><div class=\"line\">    fruits</div><div class=\"line\">    .filter &#123; it.startsWith(<span class=\"string\">\"a\"</span>) &#125;</div><div class=\"line\">    .sortedBy &#123; it &#125;</div><div class=\"line\">    .map &#123; it.toUpperCase() &#125;</div><div class=\"line\">    .forEach &#123; println(it) &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上述代码输出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">APPLE</div><div class=\"line\">AVOCADO</div></pre></td></tr></table></figure></p>\n<p>参见<a href=\"http://kotlinlang.org/docs/reference/lambdas.html\" target=\"_blank\" rel=\"external\">高阶函数和lambda</a></p>\n<h2 id=\"习题\"><a href=\"#习题\" class=\"headerlink\" title=\"习题\"></a>习题</h2><h4 id=\"数组求和\"><a href=\"#数组求和\" class=\"headerlink\" title=\"数组求和\"></a>数组求和</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Your task is to implement the sum() function so that it computes the sum of</div><div class=\"line\"> * all elements in the given array a.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">package</span> sum</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sum</span><span class=\"params\">(a: <span class=\"type\">IntArray</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(n <span class=\"keyword\">in</span> a) &#123;</div><div class=\"line\">        s += n</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> s</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"求数组最大值索引\"><a href=\"#求数组最大值索引\" class=\"headerlink\" title=\"求数组最大值索引\"></a>求数组最大值索引</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Your task is to implement the indexOfMax() function so that it returns</div><div class=\"line\"> * the index of the largest element in the array, or null if the array is empty.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">package</span> maxindex</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">indexOfMax</span><span class=\"params\">(a: <span class=\"type\">IntArray</span>)</span></span>: <span class=\"built_in\">Int</span>? &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(a.size == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> m = Integer.MIN_VALUE</div><div class=\"line\">    <span class=\"keyword\">var</span> ret = <span class=\"number\">-1</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> a.indices) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(a[i] &gt;= m) &#123;</div><div class=\"line\">            m = a[i]</div><div class=\"line\">            ret = i;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"keyword\">return</span> ret</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"这是求个什么？自己看解释吧\"><a href=\"#这是求个什么？自己看解释吧\" class=\"headerlink\" title=\"这是求个什么？自己看解释吧\"></a>这是求个什么？自己看解释吧</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Any array may be viewed as a number of \"runs\" of equal numbers.</div><div class=\"line\"> * For example, the following array has two runs:</div><div class=\"line\"> *   1, 1, 1, 2, 2</div><div class=\"line\"> * Three 1's in a row form the first run, and two 2's form the second.</div><div class=\"line\"> * This array has two runs of length one:</div><div class=\"line\"> *   3, 4</div><div class=\"line\"> * And this one has five runs:</div><div class=\"line\"> *   1, 0, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0</div><div class=\"line\"> * Your task is to implement the runs() function so that it returns the number</div><div class=\"line\"> * of runs in the given array.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">package</span> runs</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">runs</span><span class=\"params\">(a: <span class=\"type\">IntArray</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(a.size == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> ret = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">var</span> cur = a[<span class=\"number\">0</span>]</div><div class=\"line\">    <span class=\"keyword\">for</span>(n <span class=\"keyword\">in</span> a) &#123;</div><div class=\"line\">    \t<span class=\"keyword\">if</span>(n != cur) &#123;</div><div class=\"line\">            ++ret</div><div class=\"line\">            cur = n</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"求是否是回文字符串\"><a href=\"#求是否是回文字符串\" class=\"headerlink\" title=\"求是否是回文字符串\"></a>求是否是回文字符串</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Your task is to implement a palindrome test.</div><div class=\"line\"> *</div><div class=\"line\"> * A string is called a palindrome when it reads the same way left-to-right</div><div class=\"line\"> * and right-to-left.</div><div class=\"line\"> *</div><div class=\"line\"> * See http://en.wikipedia.org/wiki/Palindrome</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">package</span> palindrome</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(s: <span class=\"type\">String</span>)</span></span>: <span class=\"built_in\">Boolean</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(s.length &lt; <span class=\"number\">2</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> len = s.length / <span class=\"number\">2</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">0.</span>.len - <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(s[i] != s[s.length - i - <span class=\"number\">1</span>]) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"求落单数字\"><a href=\"#求落单数字\" class=\"headerlink\" title=\"求落单数字\"></a>求落单数字</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Think of a perfect world where everybody has a soulmate.</div><div class=\"line\"> * Now, the real world is imperfect: there is exactly one number in the array</div><div class=\"line\"> * that does not have a pair. A pair is an element with the same value.</div><div class=\"line\"> * For example in this array:</div><div class=\"line\"> *   1, 2, 1, 2</div><div class=\"line\"> * every number has a pair, but in this one:</div><div class=\"line\"> *   1, 1, 1</div><div class=\"line\"> * one of the ones is lonely.</div><div class=\"line\"> *</div><div class=\"line\"> * Your task is to implement the findPairless() function so that it finds the</div><div class=\"line\"> * lonely number and returns it.</div><div class=\"line\"> *</div><div class=\"line\"> * A hint: there's a solution that looks at each element only once and uses no</div><div class=\"line\"> * data structures like collections or trees.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">package</span> pairless</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">findPairless</span><span class=\"params\">(a: <span class=\"type\">IntArray</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// Write your solution here</span></div><div class=\"line\">    <span class=\"keyword\">var</span> map = hashMapOf&lt;<span class=\"built_in\">Int</span>, <span class=\"built_in\">Int</span>&gt;();</div><div class=\"line\">    <span class=\"keyword\">for</span>(n <span class=\"keyword\">in</span> a) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> i = map.<span class=\"keyword\">get</span>(n)</div><div class=\"line\">        </div><div class=\"line\">        map.put(n, <span class=\"keyword\">if</span>(i == <span class=\"literal\">null</span>) <span class=\"number\">1</span> <span class=\"keyword\">else</span> i + <span class=\"number\">1</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span>((k, v) <span class=\"keyword\">in</span> map) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(v % <span class=\"number\">2</span> == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> k</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Link-react router 4.0.0 api中文文档","date":"2016-11-29T06:18:08.000Z","_content":"\n[原文链接](https://react-router.now.sh/Link)\n\n<font size='6em'>&lt;Link&gt;</font>\n\n为你的应用提供可以声明的，可访问的导航功能。\n```javascript\n<Link to=\"/about\" activeClassName=\"active\">\n  About\n</Link>\n```\n\n<font color='red'>children: node | func</font>\n\nLink组件可以接受一个函数作为子控件，使得允许你使用自定义的组件渲染Link对象。\n\n<!-- more -->\n\n子控件函数的参数是一个对象，包含如下属性：\n- isActive: (bool) 当前链接是否激活\n- location: 传递给Link的链接\n- href: (string) 路由的url\n- onClick: (func) dom的onClick处理函数\n- transition: (func) 它是router.transitionTo的快捷方式，代表Link对象的to属性。\n```javascript\n<Link to=\"/courses\">{\n  ({isActive, location, href, onClick, transition}) => \n    <RaisedButton label=\"Courses\" onClick={onClick} primary={isActive} href={href} />\n}</Link>\n```\n\n<font color='red'>to: string | object</font>\n\n链接的描述。\n```\n<Link to=\"/courses\"/>\n<Link to={{\n  pathname: '/courses',\n  query: { sort: 'name' },\n  state: { fromDashboard: true }\n}}/>\n```\n\n<font color='red'>activeStyle: object</font>\n\n当链接匹配到<font color='grey' size='5em'>**to**</font>属性时的样式对象。它会和tyle对象合并之后生效。\n```\n<Link\n  to=\"/courses\"\n  style={{ color: 'blue', background: 'gray' }}\n  activeStyle={{ color: 'red' }}\n/>\n// 总是有灰色背景\n// 链接为/foo时字体为blue\n// 为/courses为red(激活状态)\n```\n\n<font color='red'>activeClassName: string</font>\n\n当匹配到链接时，生效的className。\n```javascript\n<Link\n  to=\"/courses\"\n  className=\"course-link\"\n  activeClassName=\"active\"\n/>\n// will always have \"course-link\"\n// at /courses it will be \"course-link active\"\n```\n\n<font color='red'>activeOnlyWhenExact: bool</font>\n\n为true时, 只有当严格匹配，activeClassName和activeStyle才会生效。\n\n```\n<Link to=\"/courses\" activeOnlyWhenExact activeClassName=\"active\"/>\n// /courses 被激活\n// /courses/123 不被激活\n```\n\n<font color='red'>isActive: func</font>\n\n允许自定义当前链接是否被激活，激活时返回true，否则返回false。\n```javascript\n<Link\n  to=\"/\"\n  activeStyle={{ color: 'red' }}\n  isActive={(location) => (\n    // 只有当没有query字段时被激活\n    !Object.keys(location.query).length\n  )}\n/>\n\n<Link\n  to=\"/courses\"\n  activeStyle={{ color: 'red' }}\n  isActive={(location, props) => (\n    // 匹配到\"/courses\" 或者 \"/course/123\"被激活\n    // 尽管这不是真正意义上的被激活, it is\n    // theoretically for the sake of a navigation menu\n    location.pathname.match(/course(s)?/)\n  )}\n/>\n```\n<font color='red'>location</font>\n\n如果你不想使用上下文中的location, 可以传递一个location的属性作为替代，这在链接比较深的redux应用中很有用。\n```\n<Match pattern=\"/foo\" location={this.props.location}/>\n```\n<font size='6em'>&lt;/Link&gt;</font>","source":"_posts/react-router-4-0-0-api-Link.md","raw":"---\ntitle: Link-react router 4.0.0 api中文文档\ntags:\n  - react\n  - react-router\n  - 翻译文档\ncategories: react router 4.0.0 api中文文档\ndate: 2016-11-29 14:18:08\n---\n\n[原文链接](https://react-router.now.sh/Link)\n\n<font size='6em'>&lt;Link&gt;</font>\n\n为你的应用提供可以声明的，可访问的导航功能。\n```javascript\n<Link to=\"/about\" activeClassName=\"active\">\n  About\n</Link>\n```\n\n<font color='red'>children: node | func</font>\n\nLink组件可以接受一个函数作为子控件，使得允许你使用自定义的组件渲染Link对象。\n\n<!-- more -->\n\n子控件函数的参数是一个对象，包含如下属性：\n- isActive: (bool) 当前链接是否激活\n- location: 传递给Link的链接\n- href: (string) 路由的url\n- onClick: (func) dom的onClick处理函数\n- transition: (func) 它是router.transitionTo的快捷方式，代表Link对象的to属性。\n```javascript\n<Link to=\"/courses\">{\n  ({isActive, location, href, onClick, transition}) => \n    <RaisedButton label=\"Courses\" onClick={onClick} primary={isActive} href={href} />\n}</Link>\n```\n\n<font color='red'>to: string | object</font>\n\n链接的描述。\n```\n<Link to=\"/courses\"/>\n<Link to={{\n  pathname: '/courses',\n  query: { sort: 'name' },\n  state: { fromDashboard: true }\n}}/>\n```\n\n<font color='red'>activeStyle: object</font>\n\n当链接匹配到<font color='grey' size='5em'>**to**</font>属性时的样式对象。它会和tyle对象合并之后生效。\n```\n<Link\n  to=\"/courses\"\n  style={{ color: 'blue', background: 'gray' }}\n  activeStyle={{ color: 'red' }}\n/>\n// 总是有灰色背景\n// 链接为/foo时字体为blue\n// 为/courses为red(激活状态)\n```\n\n<font color='red'>activeClassName: string</font>\n\n当匹配到链接时，生效的className。\n```javascript\n<Link\n  to=\"/courses\"\n  className=\"course-link\"\n  activeClassName=\"active\"\n/>\n// will always have \"course-link\"\n// at /courses it will be \"course-link active\"\n```\n\n<font color='red'>activeOnlyWhenExact: bool</font>\n\n为true时, 只有当严格匹配，activeClassName和activeStyle才会生效。\n\n```\n<Link to=\"/courses\" activeOnlyWhenExact activeClassName=\"active\"/>\n// /courses 被激活\n// /courses/123 不被激活\n```\n\n<font color='red'>isActive: func</font>\n\n允许自定义当前链接是否被激活，激活时返回true，否则返回false。\n```javascript\n<Link\n  to=\"/\"\n  activeStyle={{ color: 'red' }}\n  isActive={(location) => (\n    // 只有当没有query字段时被激活\n    !Object.keys(location.query).length\n  )}\n/>\n\n<Link\n  to=\"/courses\"\n  activeStyle={{ color: 'red' }}\n  isActive={(location, props) => (\n    // 匹配到\"/courses\" 或者 \"/course/123\"被激活\n    // 尽管这不是真正意义上的被激活, it is\n    // theoretically for the sake of a navigation menu\n    location.pathname.match(/course(s)?/)\n  )}\n/>\n```\n<font color='red'>location</font>\n\n如果你不想使用上下文中的location, 可以传递一个location的属性作为替代，这在链接比较深的redux应用中很有用。\n```\n<Match pattern=\"/foo\" location={this.props.location}/>\n```\n<font size='6em'>&lt;/Link&gt;</font>","slug":"react-router-4-0-0-api-Link","published":1,"updated":"2017-05-25T03:41:18.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o41000riwl79oq9oacx","content":"<p><a href=\"https://react-router.now.sh/Link\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n<font size=\"6em\">&lt;Link&gt;</font>\n\n<p>为你的应用提供可以声明的，可访问的导航功能。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Link to=<span class=\"string\">\"/about\"</span> activeClassName=<span class=\"string\">\"active\"</span>&gt;</div><div class=\"line\">  About</div><div class=\"line\">&lt;<span class=\"regexp\">/Link&gt;</span></div></pre></td></tr></table></figure></p>\n<font color=\"red\">children: node | func</font>\n\n<p>Link组件可以接受一个函数作为子控件，使得允许你使用自定义的组件渲染Link对象。</p>\n<a id=\"more\"></a>\n<p>子控件函数的参数是一个对象，包含如下属性：</p>\n<ul>\n<li>isActive: (bool) 当前链接是否激活</li>\n<li>location: 传递给Link的链接</li>\n<li>href: (string) 路由的url</li>\n<li>onClick: (func) dom的onClick处理函数</li>\n<li>transition: (func) 它是router.transitionTo的快捷方式，代表Link对象的to属性。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Link to=<span class=\"string\">\"/courses\"</span>&gt;&#123;</div><div class=\"line\">  (&#123;isActive, location, href, onClick, transition&#125;) =&gt; </div><div class=\"line\">    &lt;RaisedButton label=\"Courses\" onClick=&#123;onClick&#125; primary=&#123;isActive&#125; href=&#123;href&#125; /&gt;</div><div class=\"line\">&#125;&lt;/Link&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<font color=\"red\">to: string | object</font>\n\n<p>链接的描述。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Link to=&quot;/courses&quot;/&gt;</div><div class=\"line\">&lt;Link to=&#123;&#123;</div><div class=\"line\">  pathname: &apos;/courses&apos;,</div><div class=\"line\">  query: &#123; sort: &apos;name&apos; &#125;,</div><div class=\"line\">  state: &#123; fromDashboard: true &#125;</div><div class=\"line\">&#125;&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<font color=\"red\">activeStyle: object</font>\n\n<p>当链接匹配到<font color=\"grey\" size=\"5em\"><strong>to</strong></font>属性时的样式对象。它会和tyle对象合并之后生效。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Link</div><div class=\"line\">  to=&quot;/courses&quot;</div><div class=\"line\">  style=&#123;&#123; color: &apos;blue&apos;, background: &apos;gray&apos; &#125;&#125;</div><div class=\"line\">  activeStyle=&#123;&#123; color: &apos;red&apos; &#125;&#125;</div><div class=\"line\">/&gt;</div><div class=\"line\">// 总是有灰色背景</div><div class=\"line\">// 链接为/foo时字体为blue</div><div class=\"line\">// 为/courses为red(激活状态)</div></pre></td></tr></table></figure></p>\n<font color=\"red\">activeClassName: string</font>\n\n<p>当匹配到链接时，生效的className。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Link</div><div class=\"line\">  to=<span class=\"string\">\"/courses\"</span></div><div class=\"line\">  className=<span class=\"string\">\"course-link\"</span></div><div class=\"line\">  activeClassName=<span class=\"string\">\"active\"</span></div><div class=\"line\">/&gt;</div><div class=\"line\"><span class=\"comment\">// will always have \"course-link\"</span></div><div class=\"line\"><span class=\"comment\">// at /courses it will be \"course-link active\"</span></div></pre></td></tr></table></figure></p>\n<font color=\"red\">activeOnlyWhenExact: bool</font>\n\n<p>为true时, 只有当严格匹配，activeClassName和activeStyle才会生效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Link to=&quot;/courses&quot; activeOnlyWhenExact activeClassName=&quot;active&quot;/&gt;</div><div class=\"line\">// /courses 被激活</div><div class=\"line\">// /courses/123 不被激活</div></pre></td></tr></table></figure>\n<font color=\"red\">isActive: func</font>\n\n<p>允许自定义当前链接是否被激活，激活时返回true，否则返回false。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Link</div><div class=\"line\">  to=<span class=\"string\">\"/\"</span></div><div class=\"line\">  activeStyle=&#123;&#123; color: <span class=\"string\">'red'</span> &#125;&#125;</div><div class=\"line\">  isActive=&#123;(location) =&gt; (</div><div class=\"line\">    <span class=\"comment\">// 只有当没有query字段时被激活</span></div><div class=\"line\">    !<span class=\"built_in\">Object</span>.keys(location.query).length</div><div class=\"line\">  )&#125;</div><div class=\"line\">/&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;Link</div><div class=\"line\">  to=\"/courses\"</div><div class=\"line\">  activeStyle=&#123;&#123; color: 'red' &#125;&#125;</div><div class=\"line\">  isActive=&#123;(location, props) =&gt; (</div><div class=\"line\">    // 匹配到\"/courses\" 或者 \"/course/123\"被激活</div><div class=\"line\">    // 尽管这不是真正意义上的被激活, it is</div><div class=\"line\">    // theoretically for the sake of a navigation menu</div><div class=\"line\">    location.pathname.match(/course(s)?/)</div><div class=\"line\">  )&#125;</div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure></p>\n<font color=\"red\">location</font>\n\n<p>如果你不想使用上下文中的location, 可以传递一个location的属性作为替代，这在链接比较深的redux应用中很有用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Match pattern=&quot;/foo&quot; location=&#123;this.props.location&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<font size=\"6em\">&lt;/Link&gt;</font>","site":{"data":{}},"excerpt":"<p><a href=\"https://react-router.now.sh/Link\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n<font size=\"6em\">&lt;Link&gt;</font>\n\n<p>为你的应用提供可以声明的，可访问的导航功能。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Link to=<span class=\"string\">\"/about\"</span> activeClassName=<span class=\"string\">\"active\"</span>&gt;</div><div class=\"line\">  About</div><div class=\"line\">&lt;<span class=\"regexp\">/Link&gt;</span></div></pre></td></tr></table></figure></p>\n<font color=\"red\">children: node | func</font>\n\n<p>Link组件可以接受一个函数作为子控件，使得允许你使用自定义的组件渲染Link对象。</p>","more":"<p>子控件函数的参数是一个对象，包含如下属性：</p>\n<ul>\n<li>isActive: (bool) 当前链接是否激活</li>\n<li>location: 传递给Link的链接</li>\n<li>href: (string) 路由的url</li>\n<li>onClick: (func) dom的onClick处理函数</li>\n<li>transition: (func) 它是router.transitionTo的快捷方式，代表Link对象的to属性。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Link to=<span class=\"string\">\"/courses\"</span>&gt;&#123;</div><div class=\"line\">  (&#123;isActive, location, href, onClick, transition&#125;) =&gt; </div><div class=\"line\">    &lt;RaisedButton label=\"Courses\" onClick=&#123;onClick&#125; primary=&#123;isActive&#125; href=&#123;href&#125; /&gt;</div><div class=\"line\">&#125;&lt;/Link&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<font color=\"red\">to: string | object</font>\n\n<p>链接的描述。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Link to=&quot;/courses&quot;/&gt;</div><div class=\"line\">&lt;Link to=&#123;&#123;</div><div class=\"line\">  pathname: &apos;/courses&apos;,</div><div class=\"line\">  query: &#123; sort: &apos;name&apos; &#125;,</div><div class=\"line\">  state: &#123; fromDashboard: true &#125;</div><div class=\"line\">&#125;&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<font color=\"red\">activeStyle: object</font>\n\n<p>当链接匹配到<font color=\"grey\" size=\"5em\"><strong>to</strong></font>属性时的样式对象。它会和tyle对象合并之后生效。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Link</div><div class=\"line\">  to=&quot;/courses&quot;</div><div class=\"line\">  style=&#123;&#123; color: &apos;blue&apos;, background: &apos;gray&apos; &#125;&#125;</div><div class=\"line\">  activeStyle=&#123;&#123; color: &apos;red&apos; &#125;&#125;</div><div class=\"line\">/&gt;</div><div class=\"line\">// 总是有灰色背景</div><div class=\"line\">// 链接为/foo时字体为blue</div><div class=\"line\">// 为/courses为red(激活状态)</div></pre></td></tr></table></figure></p>\n<font color=\"red\">activeClassName: string</font>\n\n<p>当匹配到链接时，生效的className。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Link</div><div class=\"line\">  to=<span class=\"string\">\"/courses\"</span></div><div class=\"line\">  className=<span class=\"string\">\"course-link\"</span></div><div class=\"line\">  activeClassName=<span class=\"string\">\"active\"</span></div><div class=\"line\">/&gt;</div><div class=\"line\"><span class=\"comment\">// will always have \"course-link\"</span></div><div class=\"line\"><span class=\"comment\">// at /courses it will be \"course-link active\"</span></div></pre></td></tr></table></figure></p>\n<font color=\"red\">activeOnlyWhenExact: bool</font>\n\n<p>为true时, 只有当严格匹配，activeClassName和activeStyle才会生效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Link to=&quot;/courses&quot; activeOnlyWhenExact activeClassName=&quot;active&quot;/&gt;</div><div class=\"line\">// /courses 被激活</div><div class=\"line\">// /courses/123 不被激活</div></pre></td></tr></table></figure>\n<font color=\"red\">isActive: func</font>\n\n<p>允许自定义当前链接是否被激活，激活时返回true，否则返回false。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Link</div><div class=\"line\">  to=<span class=\"string\">\"/\"</span></div><div class=\"line\">  activeStyle=&#123;&#123; color: <span class=\"string\">'red'</span> &#125;&#125;</div><div class=\"line\">  isActive=&#123;(location) =&gt; (</div><div class=\"line\">    <span class=\"comment\">// 只有当没有query字段时被激活</span></div><div class=\"line\">    !<span class=\"built_in\">Object</span>.keys(location.query).length</div><div class=\"line\">  )&#125;</div><div class=\"line\">/&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;Link</div><div class=\"line\">  to=\"/courses\"</div><div class=\"line\">  activeStyle=&#123;&#123; color: 'red' &#125;&#125;</div><div class=\"line\">  isActive=&#123;(location, props) =&gt; (</div><div class=\"line\">    // 匹配到\"/courses\" 或者 \"/course/123\"被激活</div><div class=\"line\">    // 尽管这不是真正意义上的被激活, it is</div><div class=\"line\">    // theoretically for the sake of a navigation menu</div><div class=\"line\">    location.pathname.match(/course(s)?/)</div><div class=\"line\">  )&#125;</div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure></p>\n<font color=\"red\">location</font>\n\n<p>如果你不想使用上下文中的location, 可以传递一个location的属性作为替代，这在链接比较深的redux应用中很有用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Match pattern=&quot;/foo&quot; location=&#123;this.props.location&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<font size=\"6em\">&lt;/Link&gt;</font>"},{"title":"Ubuntu 12.04 生成桌面图标","date":"2016-11-15T10:04:19.000Z","_content":"\n在Ubuntu上从网上下载压缩包版本（非.deb包）的应用程序之后，是不生成桌面图表的，比如网上下载的[Android Studio](http://www.android-studio.org/), 所以需要自己做一个桌面图标。\n\n1. 进入到/usr/share/applications/目录下\n```bash\ncd /usr/share/applications/\n```\n\n2. 新建一个android-studio.desktop文件。\n```bash\nvim android-studio.desktop\n```\n<!--more-->\n\n3. 输入一下内容\n```bash\nVersion=2.2\nName=Android Studio\nGenericName=Android IDE\nComment=Android Development\nExec=/home/yinlijun/android_toolchain/android-studio/bin/studio.sh %U\nTerminal=false\nIcon=/home/yinlijun/android_toolchain/android-studio/bin/studio.png\nType=Application\nCategories=Android;IDE;\n```\n\n保存退出之后，在应用程序里面就可以找到，绑定了图标的应用程序，可以将其固定到启动器上。","source":"_posts/make-ubutun-desktop.md","raw":"---\ntitle: Ubuntu 12.04 生成桌面图标 \ndate: 2016-11-15 18:04:19\ntags: [ubuntu, android studio]\n---\n\n在Ubuntu上从网上下载压缩包版本（非.deb包）的应用程序之后，是不生成桌面图表的，比如网上下载的[Android Studio](http://www.android-studio.org/), 所以需要自己做一个桌面图标。\n\n1. 进入到/usr/share/applications/目录下\n```bash\ncd /usr/share/applications/\n```\n\n2. 新建一个android-studio.desktop文件。\n```bash\nvim android-studio.desktop\n```\n<!--more-->\n\n3. 输入一下内容\n```bash\nVersion=2.2\nName=Android Studio\nGenericName=Android IDE\nComment=Android Development\nExec=/home/yinlijun/android_toolchain/android-studio/bin/studio.sh %U\nTerminal=false\nIcon=/home/yinlijun/android_toolchain/android-studio/bin/studio.png\nType=Application\nCategories=Android;IDE;\n```\n\n保存退出之后，在应用程序里面就可以找到，绑定了图标的应用程序，可以将其固定到启动器上。","slug":"make-ubutun-desktop","published":1,"updated":"2017-05-25T03:41:18.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o43000tiwl7w6qlystk","content":"<p>在Ubuntu上从网上下载压缩包版本（非.deb包）的应用程序之后，是不生成桌面图表的，比如网上下载的<a href=\"http://www.android-studio.org/\" target=\"_blank\" rel=\"external\">Android Studio</a>, 所以需要自己做一个桌面图标。</p>\n<ol>\n<li><p>进入到/usr/share/applications/目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /usr/share/applications/</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建一个android-studio.desktop文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim android-studio.desktop</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol>\n<li>输入一下内容<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Version=2.2</div><div class=\"line\">Name=Android Studio</div><div class=\"line\">GenericName=Android IDE</div><div class=\"line\">Comment=Android Development</div><div class=\"line\">Exec=/home/yinlijun/android_toolchain/android-studio/bin/studio.sh %U</div><div class=\"line\">Terminal=<span class=\"literal\">false</span></div><div class=\"line\">Icon=/home/yinlijun/android_toolchain/android-studio/bin/studio.png</div><div class=\"line\">Type=Application</div><div class=\"line\">Categories=Android;IDE;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>保存退出之后，在应用程序里面就可以找到，绑定了图标的应用程序，可以将其固定到启动器上。</p>\n","site":{"data":{}},"excerpt":"<p>在Ubuntu上从网上下载压缩包版本（非.deb包）的应用程序之后，是不生成桌面图表的，比如网上下载的<a href=\"http://www.android-studio.org/\" target=\"_blank\" rel=\"external\">Android Studio</a>, 所以需要自己做一个桌面图标。</p>\n<ol>\n<li><p>进入到/usr/share/applications/目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /usr/share/applications/</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建一个android-studio.desktop文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim android-studio.desktop</div></pre></td></tr></table></figure>\n</li>\n</ol>","more":"<ol>\n<li>输入一下内容<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Version=2.2</div><div class=\"line\">Name=Android Studio</div><div class=\"line\">GenericName=Android IDE</div><div class=\"line\">Comment=Android Development</div><div class=\"line\">Exec=/home/yinlijun/android_toolchain/android-studio/bin/studio.sh %U</div><div class=\"line\">Terminal=<span class=\"literal\">false</span></div><div class=\"line\">Icon=/home/yinlijun/android_toolchain/android-studio/bin/studio.png</div><div class=\"line\">Type=Application</div><div class=\"line\">Categories=Android;IDE;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>保存退出之后，在应用程序里面就可以找到，绑定了图标的应用程序，可以将其固定到启动器上。</p>"},{"title":"小白的全栈梦之从零搭建Android OTA系统（1）","date":"2017-12-20T10:23:04.000Z","_content":"\n本文实现简单的服务端的注册，登录功能，暂时不实现前端界面，用curl模拟前端请求。\n\n### 创建后端项目\n``` bash\nexpress ota_be\n```\n\n#### 目录结构\nmodel存放数据库代码，routes存放路由代码，controller存放处理代码，middleware存放中间件代码。\n```\n├─app.js\n├─config.js\n├─model/\n├─routes/\n├─controller/\n├─middleware/\n```\n\n### 用户注册\n\n#### 实现用户集合\n创建model/user.js，目前只保存username和password，其中username唯一。\n``` javascript\nvar mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\n\nvar UserSchema = new Schema({\n  username: {\n    type: String,\n    unique: true,\n  },\n  password: {\n    type: String, \n  },\n})\nmongoose.model('User', UserSchema);\n```\n\n创建model/index.js，连接数据库。\n``` javascript\nvar mongoose = require('mongoose');\nvar config = require('../config');\n\nmongoose.connect(config.mongodb, {\n  server: {poolSize: 20},\n  useMongoClient: true,\n}, err => {\n  if(err) {\n    console.error(\"connect to %s failed\", config.mongodb, err\n    .message);\n    process.exit(-1);\n  } \n});\n\nrequire('./user');\n\nexports.User = mongoose.model('User');\n```\n\n#### 路由实现\n创建routes/user.js。\n这里的路由，都分发到控制器的user实现功能。\n\n```javascript\nvar express = require('express');\nvar user = require('../controller/user');\nvar router = express.Router();\nvar passport = require('passport');\n\nrouter.post('/user/register',  user.register);\n\nmodule.exports = router;\n```\n\n创建routes/index.js，引入路由文件。\n```` javascript\nvar express = require('express');\nvar router = express.Router();\nvar user = require('./user');\n\nrouter.use(user);\n\nmodule.exports = router;\n````\n\n修改app.js\n\n```javascript\nvar router = require('./routes');\nvar app = express();\n//...\napp.use('/', router);\n```\n#### 实现注册操作\n创建controller/user.js。\n用户密码需要利用bcyptsjs加密，不存储明文密码。\n\n```javascript\nvar Model = require('../model');\nvar User = Model.User;\nvar bcrypt = require('bcryptjs')\n\nvalidUserRequest = body => {\n  //TODO 更详细校验\n  if(!body.username || !body.password) {\n      return {code: -1, message: \"valid param\"};\n  }\n  return null;\n}\n\nexports.register = (req, res, next) => {\n  var error = validUserRequest(req.body);\n  if(error) {\n    res.status(400).send(error);\n    return;\n  }\n  const {username, password} = req.body;\n  bcrypt.hash(password, 10)\n    .then(hash => {\n      var user = new User({\n        username: username,\n        password: hash\n      });\n      return user.save()\n    })\n    .then(user => {\n      res.json({code: 0, message: \"create user success\"});\n    })\n    .catch(err => {\n      res.status(406).send({code: -1, message: err.message});\n    })\n}\n\n```\n\n#### 运行\n因为用到了mongoose库，需要本地先启用mongod服务，端口需要跟config.js中的一致。\nconfig.js\n``` javascript\nvar config = {\n  mongodb: 'mongodb://127.0.0.1:50000/ota_server',\n}\n\nmodule.exports = config;\n```\n然后启动应用。\n``` bash\nyarn start\n```\n\n#### 测试注册接口\n在终端里面用如下指令模拟注册请求。\n``` bash\n$ curl -d \"username=yinlijun&password=123456\" \"http://127.0.0.1:3020/user/register\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    75  100    42  100    33    168    132 --:--:-- --:--:-- --:--:--   168{\"code\":0,\"message\":\"create user success\"}\n```\n\n利用mongo客户端打开集合，查看集合数据，插入成功。\n``` bash\n$ mongo mongodb://127.0.0.1:50000\nMongoDB shell version v3.4.9\nconnecting to: mongodb://127.0.0.1:50000\nMongoDB server version: 3.4.9\n\n$ use ota_server\nswitched to db ota_server\n\n$ db.users.find()\n{ \"_id\" : ObjectId(\"5a3b61b1db2e604ebca6dfc4\"), \"username\" : \"yinlijun\", \"password\" : \"$2a$10$Zc33sn8Zj1kJslfTTXM0deFNUjVMJyWk.tMsuh.aaLtZEFUSedLQW\", \"__v\" : 0 }\n```\n\n再次注册同名用户，报错。\n``` bash\n$ curl -d \"username=yinlijun&password=123456\" \"http://127.0.0.1:3020/user/register\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   158  100   125  100    33   1344    354 --:--:-- --:--:-- --:--:--  1344{\"code\":-1,\"message\":\"E11000 duplicate key error collection: ota_server.users index: username_1 dup key: { : \\\"yinlijun\\\" }\"}\n```\n\n### 用户登录\n\n#### 路由实现\n添加路由routes/user.js\n``` javascript\nrouter.post('/user/login', user.login);\n```\n\n#### 实现登录操作\n在controller/user.js中添加如下代码，校验用户名和密码，校验密码用到了bcrypt.compareSync。\n\n然后生成cookie发到前端。\n\n``` javascript\nexports.login = (req, res, next) => {\n  let {username, password} = req.body;\n  User.findOne({username: username})\n    .then(user => {\n      if(!user) {\n        res.status(400).send({code: -1, message:\"invalid username or password\"});\n        return;\n      }\n      if(!bcrypt.compareSync(password, user.password)) {\n        res.status(400).send({code: -1, message:\"invalid username or password\"});\n        return;\n      }\n      genCookie(user, res);    \n      res.send({code:0, message:\"登录成功\"});\n    })\n};\n\ngenCookie = (user, res) => {\n  var token = user._id + '$$$';\n  var opts = {\n    path: '/',\n    maxAge: config.session_age,\n    httpOnly: true,\n  };\n  res.cookie(config.cookie_name, token);\n}\n```\n\n这里可以看到有个重复调用的validUserRequest函数，可以做成一个middleware。\n\n创建middleware/validRequest.js。\n``` javascript\nexports.validUsernamePassword = (req, res, next) => {\n  //TODO 更详细校验\n  let {username, password} = req.body;\n  if(!username || !password) {\n      res.status(400).send({code: -1, message: \"valid param\"});\n      return;\n  }\n  next();\n}\n```\n然后修改routes/user.js\n``` javascript\nvar validRequest = require('../middleware/validRequest');\n\nrouter.post('/user/register', validRequest.validUsernamePassword, user.register);\n\nrouter.post('/user/login', validRequest.validUsernamePassword, user.login);\n```\n\n把controller/user.js的register中validUserRequest调用去掉。\n\n测试一下这个middleware：\n```` bash\n $ curl -d \"username=yinlijun&password=\" \"http://127.0.0.1:3020/user/register\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    62  100    35  100    27   1093    843 --:--:-- --:--:-- --:--:--  1093{\"code\":-1,\"message\":\"valid param\"}\n````\n\n#### 测试登录接口\n输入错误的用户名:\n``` bash\n$ curl -d \"username=liudehua&password=123456\" \"http://127.0.0.1:3020/user/login\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    85  100    52  100    33   1106    702 --:--:-- --:--:-- --:--:--  1106{\"code\":-1,\"message\":\"invalid username or password\"}\n```\n输入错误密码：\n```bash\n$ curl -d \"username=yinlijun&password=654321\" \"http://127.0.0.1:3020/user/login\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    85  100    52  100    33    553    351 --:--:-- --:--:-- --:--:--   553{\"code\":-1,\"message\":\"invalid username or password\"}\n```\n输入正确的用户名密码:\n```\n$ curl -d \"username=yinlijun&password=123456\" \"http://127.0.0.1:3020/user/login\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    68  100    35  100    33    372    351 --:--:-- --:--:-- --:--:--   372{\"code\":0,\"message\":\"登录成功\"}\n```\n\n### 利用passport校验登录功能。\n社区里面有个passport的组件，可以用来实现校验登录功能。\n\n#### 封装passport中间件\n创建middleware/passport.js，封装passport模块。\n\n将校验密码的操作挪到passport中，校验成功之后用户信息将会保存到req.user。\n```javascript\nvar passport = require('passport');\nvar User = require('../model').User;\nvar LocalStrategy = require('passport-local').Strategy;\n\npassport.use('local.login', new LocalStrategy((username, password, done) => {\n  User.findOne({username: username})\n    .exec()\n    .then(user => {\n      if(!user) {\n        return done(null, false, {code: -1, message: \"invalid username or password\"});\n      } \n      if(!user.validPassword(password)) {\n        return done(null, false, {code: -1, message: \"invalid username or password\"});\n      } \n      return done(null, user);\n    })\n    .catch(err => {\n      done(null, false, {code: -1, message: err.message});\n    })\n}))\n\npassport.serializeUser((user, done) => {\n  done(null, user._id);\n});\n\npassport.deserializeUser((id, done) => {\n  User.findById(id)\n    .exec()\n    .then(user => {\n      done(null, user);\n    })\n    .catch(err => {\n      done(null, false, {code: -1, message: err.message});\n    })\n})\n\nmodule.exports = passport;\n```\n\n#### 重新实现登录操作\n修改controller/user.js的login函数，去掉验证用户名密码的代码。\n```javascript\nexports.login = (req, res, next) => {\n  const user = req.user;\n  genCookie(user, res);    \n  res.send({code:0, message:\"login success\"});\n};\n```\n在middleware/validRequest.js添加一个校验中间件\n```javascript\nexports.validByPassport = (req, res, next) => {\n    passport.authenticate('local.login', {\n      failureMessage: 'invalid username or password',\n    })(req,  res, next);\n}\n```\n\n#### 修改路由\n修改router/user.js路由\n```javascript\nrouter.post('/user/login', validRequest.validByPassport, user.login);\n```\n这样，用户登录就会走passport的校验流程。\n\n### 退出功能\n主要是清除cookie，controller/user.js中添加代码。\n``` javascript\nexports.logout = (req, res, next) => {\n  clearCookie(res);\n  res.send({code:0, message:\"exit success\"});\n}\n\nclearCookie = (res) => {\n  res.clearCookie(config.cookie_name, {path: '/'});\n}\n```\n\n测试\n``` \n$ curl \"http://127.0.0.1:3020/user/logout\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    35  100    35    0     0   2187      0 --:--:-- --:--:-- --:--:--  2187{\"code\":0,\"message\":\"exit success\"}\n```","source":"_posts/my-ota-tutorial-1.md","raw":"---\ntitle: 小白的全栈梦之从零搭建Android OTA系统（1）\ndate: 2017-12-20 18:23:04\ntags: [express, react, nodejs]\n---\n\n本文实现简单的服务端的注册，登录功能，暂时不实现前端界面，用curl模拟前端请求。\n\n### 创建后端项目\n``` bash\nexpress ota_be\n```\n\n#### 目录结构\nmodel存放数据库代码，routes存放路由代码，controller存放处理代码，middleware存放中间件代码。\n```\n├─app.js\n├─config.js\n├─model/\n├─routes/\n├─controller/\n├─middleware/\n```\n\n### 用户注册\n\n#### 实现用户集合\n创建model/user.js，目前只保存username和password，其中username唯一。\n``` javascript\nvar mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\n\nvar UserSchema = new Schema({\n  username: {\n    type: String,\n    unique: true,\n  },\n  password: {\n    type: String, \n  },\n})\nmongoose.model('User', UserSchema);\n```\n\n创建model/index.js，连接数据库。\n``` javascript\nvar mongoose = require('mongoose');\nvar config = require('../config');\n\nmongoose.connect(config.mongodb, {\n  server: {poolSize: 20},\n  useMongoClient: true,\n}, err => {\n  if(err) {\n    console.error(\"connect to %s failed\", config.mongodb, err\n    .message);\n    process.exit(-1);\n  } \n});\n\nrequire('./user');\n\nexports.User = mongoose.model('User');\n```\n\n#### 路由实现\n创建routes/user.js。\n这里的路由，都分发到控制器的user实现功能。\n\n```javascript\nvar express = require('express');\nvar user = require('../controller/user');\nvar router = express.Router();\nvar passport = require('passport');\n\nrouter.post('/user/register',  user.register);\n\nmodule.exports = router;\n```\n\n创建routes/index.js，引入路由文件。\n```` javascript\nvar express = require('express');\nvar router = express.Router();\nvar user = require('./user');\n\nrouter.use(user);\n\nmodule.exports = router;\n````\n\n修改app.js\n\n```javascript\nvar router = require('./routes');\nvar app = express();\n//...\napp.use('/', router);\n```\n#### 实现注册操作\n创建controller/user.js。\n用户密码需要利用bcyptsjs加密，不存储明文密码。\n\n```javascript\nvar Model = require('../model');\nvar User = Model.User;\nvar bcrypt = require('bcryptjs')\n\nvalidUserRequest = body => {\n  //TODO 更详细校验\n  if(!body.username || !body.password) {\n      return {code: -1, message: \"valid param\"};\n  }\n  return null;\n}\n\nexports.register = (req, res, next) => {\n  var error = validUserRequest(req.body);\n  if(error) {\n    res.status(400).send(error);\n    return;\n  }\n  const {username, password} = req.body;\n  bcrypt.hash(password, 10)\n    .then(hash => {\n      var user = new User({\n        username: username,\n        password: hash\n      });\n      return user.save()\n    })\n    .then(user => {\n      res.json({code: 0, message: \"create user success\"});\n    })\n    .catch(err => {\n      res.status(406).send({code: -1, message: err.message});\n    })\n}\n\n```\n\n#### 运行\n因为用到了mongoose库，需要本地先启用mongod服务，端口需要跟config.js中的一致。\nconfig.js\n``` javascript\nvar config = {\n  mongodb: 'mongodb://127.0.0.1:50000/ota_server',\n}\n\nmodule.exports = config;\n```\n然后启动应用。\n``` bash\nyarn start\n```\n\n#### 测试注册接口\n在终端里面用如下指令模拟注册请求。\n``` bash\n$ curl -d \"username=yinlijun&password=123456\" \"http://127.0.0.1:3020/user/register\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    75  100    42  100    33    168    132 --:--:-- --:--:-- --:--:--   168{\"code\":0,\"message\":\"create user success\"}\n```\n\n利用mongo客户端打开集合，查看集合数据，插入成功。\n``` bash\n$ mongo mongodb://127.0.0.1:50000\nMongoDB shell version v3.4.9\nconnecting to: mongodb://127.0.0.1:50000\nMongoDB server version: 3.4.9\n\n$ use ota_server\nswitched to db ota_server\n\n$ db.users.find()\n{ \"_id\" : ObjectId(\"5a3b61b1db2e604ebca6dfc4\"), \"username\" : \"yinlijun\", \"password\" : \"$2a$10$Zc33sn8Zj1kJslfTTXM0deFNUjVMJyWk.tMsuh.aaLtZEFUSedLQW\", \"__v\" : 0 }\n```\n\n再次注册同名用户，报错。\n``` bash\n$ curl -d \"username=yinlijun&password=123456\" \"http://127.0.0.1:3020/user/register\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   158  100   125  100    33   1344    354 --:--:-- --:--:-- --:--:--  1344{\"code\":-1,\"message\":\"E11000 duplicate key error collection: ota_server.users index: username_1 dup key: { : \\\"yinlijun\\\" }\"}\n```\n\n### 用户登录\n\n#### 路由实现\n添加路由routes/user.js\n``` javascript\nrouter.post('/user/login', user.login);\n```\n\n#### 实现登录操作\n在controller/user.js中添加如下代码，校验用户名和密码，校验密码用到了bcrypt.compareSync。\n\n然后生成cookie发到前端。\n\n``` javascript\nexports.login = (req, res, next) => {\n  let {username, password} = req.body;\n  User.findOne({username: username})\n    .then(user => {\n      if(!user) {\n        res.status(400).send({code: -1, message:\"invalid username or password\"});\n        return;\n      }\n      if(!bcrypt.compareSync(password, user.password)) {\n        res.status(400).send({code: -1, message:\"invalid username or password\"});\n        return;\n      }\n      genCookie(user, res);    \n      res.send({code:0, message:\"登录成功\"});\n    })\n};\n\ngenCookie = (user, res) => {\n  var token = user._id + '$$$';\n  var opts = {\n    path: '/',\n    maxAge: config.session_age,\n    httpOnly: true,\n  };\n  res.cookie(config.cookie_name, token);\n}\n```\n\n这里可以看到有个重复调用的validUserRequest函数，可以做成一个middleware。\n\n创建middleware/validRequest.js。\n``` javascript\nexports.validUsernamePassword = (req, res, next) => {\n  //TODO 更详细校验\n  let {username, password} = req.body;\n  if(!username || !password) {\n      res.status(400).send({code: -1, message: \"valid param\"});\n      return;\n  }\n  next();\n}\n```\n然后修改routes/user.js\n``` javascript\nvar validRequest = require('../middleware/validRequest');\n\nrouter.post('/user/register', validRequest.validUsernamePassword, user.register);\n\nrouter.post('/user/login', validRequest.validUsernamePassword, user.login);\n```\n\n把controller/user.js的register中validUserRequest调用去掉。\n\n测试一下这个middleware：\n```` bash\n $ curl -d \"username=yinlijun&password=\" \"http://127.0.0.1:3020/user/register\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    62  100    35  100    27   1093    843 --:--:-- --:--:-- --:--:--  1093{\"code\":-1,\"message\":\"valid param\"}\n````\n\n#### 测试登录接口\n输入错误的用户名:\n``` bash\n$ curl -d \"username=liudehua&password=123456\" \"http://127.0.0.1:3020/user/login\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    85  100    52  100    33   1106    702 --:--:-- --:--:-- --:--:--  1106{\"code\":-1,\"message\":\"invalid username or password\"}\n```\n输入错误密码：\n```bash\n$ curl -d \"username=yinlijun&password=654321\" \"http://127.0.0.1:3020/user/login\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    85  100    52  100    33    553    351 --:--:-- --:--:-- --:--:--   553{\"code\":-1,\"message\":\"invalid username or password\"}\n```\n输入正确的用户名密码:\n```\n$ curl -d \"username=yinlijun&password=123456\" \"http://127.0.0.1:3020/user/login\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    68  100    35  100    33    372    351 --:--:-- --:--:-- --:--:--   372{\"code\":0,\"message\":\"登录成功\"}\n```\n\n### 利用passport校验登录功能。\n社区里面有个passport的组件，可以用来实现校验登录功能。\n\n#### 封装passport中间件\n创建middleware/passport.js，封装passport模块。\n\n将校验密码的操作挪到passport中，校验成功之后用户信息将会保存到req.user。\n```javascript\nvar passport = require('passport');\nvar User = require('../model').User;\nvar LocalStrategy = require('passport-local').Strategy;\n\npassport.use('local.login', new LocalStrategy((username, password, done) => {\n  User.findOne({username: username})\n    .exec()\n    .then(user => {\n      if(!user) {\n        return done(null, false, {code: -1, message: \"invalid username or password\"});\n      } \n      if(!user.validPassword(password)) {\n        return done(null, false, {code: -1, message: \"invalid username or password\"});\n      } \n      return done(null, user);\n    })\n    .catch(err => {\n      done(null, false, {code: -1, message: err.message});\n    })\n}))\n\npassport.serializeUser((user, done) => {\n  done(null, user._id);\n});\n\npassport.deserializeUser((id, done) => {\n  User.findById(id)\n    .exec()\n    .then(user => {\n      done(null, user);\n    })\n    .catch(err => {\n      done(null, false, {code: -1, message: err.message});\n    })\n})\n\nmodule.exports = passport;\n```\n\n#### 重新实现登录操作\n修改controller/user.js的login函数，去掉验证用户名密码的代码。\n```javascript\nexports.login = (req, res, next) => {\n  const user = req.user;\n  genCookie(user, res);    \n  res.send({code:0, message:\"login success\"});\n};\n```\n在middleware/validRequest.js添加一个校验中间件\n```javascript\nexports.validByPassport = (req, res, next) => {\n    passport.authenticate('local.login', {\n      failureMessage: 'invalid username or password',\n    })(req,  res, next);\n}\n```\n\n#### 修改路由\n修改router/user.js路由\n```javascript\nrouter.post('/user/login', validRequest.validByPassport, user.login);\n```\n这样，用户登录就会走passport的校验流程。\n\n### 退出功能\n主要是清除cookie，controller/user.js中添加代码。\n``` javascript\nexports.logout = (req, res, next) => {\n  clearCookie(res);\n  res.send({code:0, message:\"exit success\"});\n}\n\nclearCookie = (res) => {\n  res.clearCookie(config.cookie_name, {path: '/'});\n}\n```\n\n测试\n``` \n$ curl \"http://127.0.0.1:3020/user/logout\"\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    35  100    35    0     0   2187      0 --:--:-- --:--:-- --:--:--  2187{\"code\":0,\"message\":\"exit success\"}\n```","slug":"my-ota-tutorial-1","published":1,"updated":"2017-12-21T11:41:18.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o46000viwl7zpccqg79","content":"<p>本文实现简单的服务端的注册，登录功能，暂时不实现前端界面，用curl模拟前端请求。</p>\n<h3 id=\"创建后端项目\"><a href=\"#创建后端项目\" class=\"headerlink\" title=\"创建后端项目\"></a>创建后端项目</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">express ota_be</div></pre></td></tr></table></figure>\n<h4 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h4><p>model存放数据库代码，routes存放路由代码，controller存放处理代码，middleware存放中间件代码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">├─app.js</div><div class=\"line\">├─config.js</div><div class=\"line\">├─model/</div><div class=\"line\">├─routes/</div><div class=\"line\">├─controller/</div><div class=\"line\">├─middleware/</div></pre></td></tr></table></figure></p>\n<h3 id=\"用户注册\"><a href=\"#用户注册\" class=\"headerlink\" title=\"用户注册\"></a>用户注册</h3><h4 id=\"实现用户集合\"><a href=\"#实现用户集合\" class=\"headerlink\" title=\"实现用户集合\"></a>实现用户集合</h4><p>创建model/user.js，目前只保存username和password，其中username唯一。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> Schema = mongoose.Schema;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> UserSchema = <span class=\"keyword\">new</span> Schema(&#123;</div><div class=\"line\">  username: &#123;</div><div class=\"line\">    type: <span class=\"built_in\">String</span>,</div><div class=\"line\">    unique: <span class=\"literal\">true</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  password: &#123;</div><div class=\"line\">    type: <span class=\"built_in\">String</span>, </div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;)</div><div class=\"line\">mongoose.model(<span class=\"string\">'User'</span>, UserSchema);</div></pre></td></tr></table></figure></p>\n<p>创建model/index.js，连接数据库。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>);</div><div class=\"line\"></div><div class=\"line\">mongoose.connect(config.mongodb, &#123;</div><div class=\"line\">  server: &#123;poolSize: <span class=\"number\">20</span>&#125;,</div><div class=\"line\">  useMongoClient: <span class=\"literal\">true</span>,</div><div class=\"line\">&#125;, err =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(err) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">\"connect to %s failed\"</span>, config.mongodb, err</div><div class=\"line\">    .message);</div><div class=\"line\">    process.exit(<span class=\"number\">-1</span>);</div><div class=\"line\">  &#125; </div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./user'</span>);</div><div class=\"line\"></div><div class=\"line\">exports.User = mongoose.model(<span class=\"string\">'User'</span>);</div></pre></td></tr></table></figure></p>\n<h4 id=\"路由实现\"><a href=\"#路由实现\" class=\"headerlink\" title=\"路由实现\"></a>路由实现</h4><p>创建routes/user.js。<br>这里的路由，都分发到控制器的user实现功能。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"built_in\">require</span>(<span class=\"string\">'../controller/user'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"><span class=\"keyword\">var</span> passport = <span class=\"built_in\">require</span>(<span class=\"string\">'passport'</span>);</div><div class=\"line\"></div><div class=\"line\">router.post(<span class=\"string\">'/user/register'</span>,  user.register);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure>\n<p>创建routes/index.js，引入路由文件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"built_in\">require</span>(<span class=\"string\">'./user'</span>);</div><div class=\"line\"></div><div class=\"line\">router.use(user);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure></p>\n<p>修改app.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"comment\">//...</span></div><div class=\"line\">app.use(<span class=\"string\">'/'</span>, router);</div></pre></td></tr></table></figure>\n<h4 id=\"实现注册操作\"><a href=\"#实现注册操作\" class=\"headerlink\" title=\"实现注册操作\"></a>实现注册操作</h4><p>创建controller/user.js。<br>用户密码需要利用bcyptsjs加密，不存储明文密码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Model = <span class=\"built_in\">require</span>(<span class=\"string\">'../model'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> User = Model.User;</div><div class=\"line\"><span class=\"keyword\">var</span> bcrypt = <span class=\"built_in\">require</span>(<span class=\"string\">'bcryptjs'</span>)</div><div class=\"line\"></div><div class=\"line\">validUserRequest = body =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">//TODO 更详细校验</span></div><div class=\"line\">  <span class=\"keyword\">if</span>(!body.username || !body.password) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;code: <span class=\"number\">-1</span>, message: <span class=\"string\">\"valid param\"</span>&#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.register = (req, res, next) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> error = validUserRequest(req.body);</div><div class=\"line\">  <span class=\"keyword\">if</span>(error) &#123;</div><div class=\"line\">    res.status(<span class=\"number\">400</span>).send(error);</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">const</span> &#123;username, password&#125; = req.body;</div><div class=\"line\">  bcrypt.hash(password, <span class=\"number\">10</span>)</div><div class=\"line\">    .then(hash =&gt; &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> User(&#123;</div><div class=\"line\">        username: username,</div><div class=\"line\">        password: hash</div><div class=\"line\">      &#125;);</div><div class=\"line\">      <span class=\"keyword\">return</span> user.save()</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then(user =&gt; &#123;</div><div class=\"line\">      res.json(&#123;code: <span class=\"number\">0</span>, message: <span class=\"string\">\"create user success\"</span>&#125;);</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .catch(err =&gt; &#123;</div><div class=\"line\">      res.status(<span class=\"number\">406</span>).send(&#123;code: <span class=\"number\">-1</span>, message: err.message&#125;);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><p>因为用到了mongoose库，需要本地先启用mongod服务，端口需要跟config.js中的一致。<br>config.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> config = &#123;</div><div class=\"line\">  mongodb: <span class=\"string\">'mongodb://127.0.0.1:50000/ota_server'</span>,</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = config;</div></pre></td></tr></table></figure></p>\n<p>然后启动应用。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yarn start</div></pre></td></tr></table></figure></p>\n<h4 id=\"测试注册接口\"><a href=\"#测试注册接口\" class=\"headerlink\" title=\"测试注册接口\"></a>测试注册接口</h4><p>在终端里面用如下指令模拟注册请求。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl <span class=\"_\">-d</span> <span class=\"string\">\"username=yinlijun&amp;password=123456\"</span> <span class=\"string\">\"http://127.0.0.1:3020/user/register\"</span></div><div class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class=\"line\">100    75  100    42  100    33    168    132 --:--:-- --:--:-- --:--:--   168&#123;<span class=\"string\">\"code\"</span>:0,<span class=\"string\">\"message\"</span>:<span class=\"string\">\"create user success\"</span>&#125;</div></pre></td></tr></table></figure></p>\n<p>利用mongo客户端打开集合，查看集合数据，插入成功。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mongo mongodb://127.0.0.1:50000</div><div class=\"line\">MongoDB shell version v3.4.9</div><div class=\"line\">connecting to: mongodb://127.0.0.1:50000</div><div class=\"line\">MongoDB server version: 3.4.9</div><div class=\"line\"></div><div class=\"line\">$ use ota_server</div><div class=\"line\">switched to db ota_server</div><div class=\"line\"></div><div class=\"line\">$ db.users.<span class=\"function\"><span class=\"title\">find</span></span>()</div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5a3b61b1db2e604ebca6dfc4\"</span>), <span class=\"string\">\"username\"</span> : <span class=\"string\">\"yinlijun\"</span>, <span class=\"string\">\"password\"</span> : <span class=\"string\">\"<span class=\"variable\">$2a</span><span class=\"variable\">$10</span><span class=\"variable\">$Zc33sn8Zj1kJslfTTXM0deFNUjVMJyWk</span>.tMsuh.aaLtZEFUSedLQW\"</span>, <span class=\"string\">\"__v\"</span> : 0 &#125;</div></pre></td></tr></table></figure></p>\n<p>再次注册同名用户，报错。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl <span class=\"_\">-d</span> <span class=\"string\">\"username=yinlijun&amp;password=123456\"</span> <span class=\"string\">\"http://127.0.0.1:3020/user/register\"</span></div><div class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class=\"line\">100   158  100   125  100    33   1344    354 --:--:-- --:--:-- --:--:--  1344&#123;<span class=\"string\">\"code\"</span>:-1,<span class=\"string\">\"message\"</span>:<span class=\"string\">\"E11000 duplicate key error collection: ota_server.users index: username_1 dup key: &#123; : \\\"yinlijun\\\" &#125;\"</span>&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"用户登录\"><a href=\"#用户登录\" class=\"headerlink\" title=\"用户登录\"></a>用户登录</h3><h4 id=\"路由实现-1\"><a href=\"#路由实现-1\" class=\"headerlink\" title=\"路由实现\"></a>路由实现</h4><p>添加路由routes/user.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">router.post(<span class=\"string\">'/user/login'</span>, user.login);</div></pre></td></tr></table></figure></p>\n<h4 id=\"实现登录操作\"><a href=\"#实现登录操作\" class=\"headerlink\" title=\"实现登录操作\"></a>实现登录操作</h4><p>在controller/user.js中添加如下代码，校验用户名和密码，校验密码用到了bcrypt.compareSync。</p>\n<p>然后生成cookie发到前端。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.login = (req, res, next) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> &#123;username, password&#125; = req.body;</div><div class=\"line\">  User.findOne(&#123;username: username&#125;)</div><div class=\"line\">    .then(user =&gt; &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(!user) &#123;</div><div class=\"line\">        res.status(<span class=\"number\">400</span>).send(&#123;code: <span class=\"number\">-1</span>, message:<span class=\"string\">\"invalid username or password\"</span>&#125;);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span>(!bcrypt.compareSync(password, user.password)) &#123;</div><div class=\"line\">        res.status(<span class=\"number\">400</span>).send(&#123;code: <span class=\"number\">-1</span>, message:<span class=\"string\">\"invalid username or password\"</span>&#125;);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      genCookie(user, res);    </div><div class=\"line\">      res.send(&#123;code:<span class=\"number\">0</span>, message:<span class=\"string\">\"登录成功\"</span>&#125;);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">genCookie = (user, res) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> token = user._id + <span class=\"string\">'$$$'</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> opts = &#123;</div><div class=\"line\">    path: <span class=\"string\">'/'</span>,</div><div class=\"line\">    maxAge: config.session_age,</div><div class=\"line\">    httpOnly: <span class=\"literal\">true</span>,</div><div class=\"line\">  &#125;;</div><div class=\"line\">  res.cookie(config.cookie_name, token);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里可以看到有个重复调用的validUserRequest函数，可以做成一个middleware。</p>\n<p>创建middleware/validRequest.js。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.validUsernamePassword = (req, res, next) =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">//TODO 更详细校验</span></div><div class=\"line\">  <span class=\"keyword\">let</span> &#123;username, password&#125; = req.body;</div><div class=\"line\">  <span class=\"keyword\">if</span>(!username || !password) &#123;</div><div class=\"line\">      res.status(<span class=\"number\">400</span>).send(&#123;code: <span class=\"number\">-1</span>, message: <span class=\"string\">\"valid param\"</span>&#125;);</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  next();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后修改routes/user.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> validRequest = <span class=\"built_in\">require</span>(<span class=\"string\">'../middleware/validRequest'</span>);</div><div class=\"line\"></div><div class=\"line\">router.post(<span class=\"string\">'/user/register'</span>, validRequest.validUsernamePassword, user.register);</div><div class=\"line\"></div><div class=\"line\">router.post(<span class=\"string\">'/user/login'</span>, validRequest.validUsernamePassword, user.login);</div></pre></td></tr></table></figure></p>\n<p>把controller/user.js的register中validUserRequest调用去掉。</p>\n<p>测试一下这个middleware：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"> $ curl <span class=\"_\">-d</span> <span class=\"string\">\"username=yinlijun&amp;password=\"</span> <span class=\"string\">\"http://127.0.0.1:3020/user/register\"</span></div><div class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class=\"line\">100    62  100    35  100    27   1093    843 --:--:-- --:--:-- --:--:--  1093&#123;<span class=\"string\">\"code\"</span>:-1,<span class=\"string\">\"message\"</span>:<span class=\"string\">\"valid param\"</span>&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"测试登录接口\"><a href=\"#测试登录接口\" class=\"headerlink\" title=\"测试登录接口\"></a>测试登录接口</h4><p>输入错误的用户名:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl <span class=\"_\">-d</span> <span class=\"string\">\"username=liudehua&amp;password=123456\"</span> <span class=\"string\">\"http://127.0.0.1:3020/user/login\"</span></div><div class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class=\"line\">100    85  100    52  100    33   1106    702 --:--:-- --:--:-- --:--:--  1106&#123;<span class=\"string\">\"code\"</span>:-1,<span class=\"string\">\"message\"</span>:<span class=\"string\">\"invalid username or password\"</span>&#125;</div></pre></td></tr></table></figure></p>\n<p>输入错误密码：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl <span class=\"_\">-d</span> <span class=\"string\">\"username=yinlijun&amp;password=654321\"</span> <span class=\"string\">\"http://127.0.0.1:3020/user/login\"</span></div><div class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class=\"line\">100    85  100    52  100    33    553    351 --:--:-- --:--:-- --:--:--   553&#123;<span class=\"string\">\"code\"</span>:-1,<span class=\"string\">\"message\"</span>:<span class=\"string\">\"invalid username or password\"</span>&#125;</div></pre></td></tr></table></figure></p>\n<p>输入正确的用户名密码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -d &quot;username=yinlijun&amp;password=123456&quot; &quot;http://127.0.0.1:3020/user/login&quot;</div><div class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class=\"line\">100    68  100    35  100    33    372    351 --:--:-- --:--:-- --:--:--   372&#123;&quot;code&quot;:0,&quot;message&quot;:&quot;登录成功&quot;&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"利用passport校验登录功能。\"><a href=\"#利用passport校验登录功能。\" class=\"headerlink\" title=\"利用passport校验登录功能。\"></a>利用passport校验登录功能。</h3><p>社区里面有个passport的组件，可以用来实现校验登录功能。</p>\n<h4 id=\"封装passport中间件\"><a href=\"#封装passport中间件\" class=\"headerlink\" title=\"封装passport中间件\"></a>封装passport中间件</h4><p>创建middleware/passport.js，封装passport模块。</p>\n<p>将校验密码的操作挪到passport中，校验成功之后用户信息将会保存到req.user。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> passport = <span class=\"built_in\">require</span>(<span class=\"string\">'passport'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> User = <span class=\"built_in\">require</span>(<span class=\"string\">'../model'</span>).User;</div><div class=\"line\"><span class=\"keyword\">var</span> LocalStrategy = <span class=\"built_in\">require</span>(<span class=\"string\">'passport-local'</span>).Strategy;</div><div class=\"line\"></div><div class=\"line\">passport.use(<span class=\"string\">'local.login'</span>, <span class=\"keyword\">new</span> LocalStrategy((username, password, done) =&gt; &#123;</div><div class=\"line\">  User.findOne(&#123;username: username&#125;)</div><div class=\"line\">    .exec()</div><div class=\"line\">    .then(user =&gt; &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(!user) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> done(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>, &#123;code: <span class=\"number\">-1</span>, message: <span class=\"string\">\"invalid username or password\"</span>&#125;);</div><div class=\"line\">      &#125; </div><div class=\"line\">      <span class=\"keyword\">if</span>(!user.validPassword(password)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> done(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>, &#123;code: <span class=\"number\">-1</span>, message: <span class=\"string\">\"invalid username or password\"</span>&#125;);</div><div class=\"line\">      &#125; </div><div class=\"line\">      <span class=\"keyword\">return</span> done(<span class=\"literal\">null</span>, user);</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .catch(err =&gt; &#123;</div><div class=\"line\">      done(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>, &#123;code: <span class=\"number\">-1</span>, message: err.message&#125;);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;))</div><div class=\"line\"></div><div class=\"line\">passport.serializeUser((user, done) =&gt; &#123;</div><div class=\"line\">  done(<span class=\"literal\">null</span>, user._id);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">passport.deserializeUser((id, done) =&gt; &#123;</div><div class=\"line\">  User.findById(id)</div><div class=\"line\">    .exec()</div><div class=\"line\">    .then(user =&gt; &#123;</div><div class=\"line\">      done(<span class=\"literal\">null</span>, user);</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .catch(err =&gt; &#123;</div><div class=\"line\">      done(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>, &#123;code: <span class=\"number\">-1</span>, message: err.message&#125;);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = passport;</div></pre></td></tr></table></figure></p>\n<h4 id=\"重新实现登录操作\"><a href=\"#重新实现登录操作\" class=\"headerlink\" title=\"重新实现登录操作\"></a>重新实现登录操作</h4><p>修改controller/user.js的login函数，去掉验证用户名密码的代码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.login = (req, res, next) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> user = req.user;</div><div class=\"line\">  genCookie(user, res);    </div><div class=\"line\">  res.send(&#123;code:<span class=\"number\">0</span>, message:<span class=\"string\">\"login success\"</span>&#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>在middleware/validRequest.js添加一个校验中间件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.validByPassport = (req, res, next) =&gt; &#123;</div><div class=\"line\">    passport.authenticate(<span class=\"string\">'local.login'</span>, &#123;</div><div class=\"line\">      failureMessage: <span class=\"string\">'invalid username or password'</span>,</div><div class=\"line\">    &#125;)(req,  res, next);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"修改路由\"><a href=\"#修改路由\" class=\"headerlink\" title=\"修改路由\"></a>修改路由</h4><p>修改router/user.js路由<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">router.post(<span class=\"string\">'/user/login'</span>, validRequest.validByPassport, user.login);</div></pre></td></tr></table></figure></p>\n<p>这样，用户登录就会走passport的校验流程。</p>\n<h3 id=\"退出功能\"><a href=\"#退出功能\" class=\"headerlink\" title=\"退出功能\"></a>退出功能</h3><p>主要是清除cookie，controller/user.js中添加代码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.logout = (req, res, next) =&gt; &#123;</div><div class=\"line\">  clearCookie(res);</div><div class=\"line\">  res.send(&#123;code:<span class=\"number\">0</span>, message:<span class=\"string\">\"exit success\"</span>&#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">clearCookie = (res) =&gt; &#123;</div><div class=\"line\">  res.clearCookie(config.cookie_name, &#123;path: <span class=\"string\">'/'</span>&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl &quot;http://127.0.0.1:3020/user/logout&quot;</div><div class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class=\"line\">100    35  100    35    0     0   2187      0 --:--:-- --:--:-- --:--:--  2187&#123;&quot;code&quot;:0,&quot;message&quot;:&quot;exit success&quot;&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文实现简单的服务端的注册，登录功能，暂时不实现前端界面，用curl模拟前端请求。</p>\n<h3 id=\"创建后端项目\"><a href=\"#创建后端项目\" class=\"headerlink\" title=\"创建后端项目\"></a>创建后端项目</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">express ota_be</div></pre></td></tr></table></figure>\n<h4 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h4><p>model存放数据库代码，routes存放路由代码，controller存放处理代码，middleware存放中间件代码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">├─app.js</div><div class=\"line\">├─config.js</div><div class=\"line\">├─model/</div><div class=\"line\">├─routes/</div><div class=\"line\">├─controller/</div><div class=\"line\">├─middleware/</div></pre></td></tr></table></figure></p>\n<h3 id=\"用户注册\"><a href=\"#用户注册\" class=\"headerlink\" title=\"用户注册\"></a>用户注册</h3><h4 id=\"实现用户集合\"><a href=\"#实现用户集合\" class=\"headerlink\" title=\"实现用户集合\"></a>实现用户集合</h4><p>创建model/user.js，目前只保存username和password，其中username唯一。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> Schema = mongoose.Schema;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> UserSchema = <span class=\"keyword\">new</span> Schema(&#123;</div><div class=\"line\">  username: &#123;</div><div class=\"line\">    type: <span class=\"built_in\">String</span>,</div><div class=\"line\">    unique: <span class=\"literal\">true</span>,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  password: &#123;</div><div class=\"line\">    type: <span class=\"built_in\">String</span>, </div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;)</div><div class=\"line\">mongoose.model(<span class=\"string\">'User'</span>, UserSchema);</div></pre></td></tr></table></figure></p>\n<p>创建model/index.js，连接数据库。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>);</div><div class=\"line\"></div><div class=\"line\">mongoose.connect(config.mongodb, &#123;</div><div class=\"line\">  server: &#123;poolSize: <span class=\"number\">20</span>&#125;,</div><div class=\"line\">  useMongoClient: <span class=\"literal\">true</span>,</div><div class=\"line\">&#125;, err =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(err) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">\"connect to %s failed\"</span>, config.mongodb, err</div><div class=\"line\">    .message);</div><div class=\"line\">    process.exit(<span class=\"number\">-1</span>);</div><div class=\"line\">  &#125; </div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./user'</span>);</div><div class=\"line\"></div><div class=\"line\">exports.User = mongoose.model(<span class=\"string\">'User'</span>);</div></pre></td></tr></table></figure></p>\n<h4 id=\"路由实现\"><a href=\"#路由实现\" class=\"headerlink\" title=\"路由实现\"></a>路由实现</h4><p>创建routes/user.js。<br>这里的路由，都分发到控制器的user实现功能。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"built_in\">require</span>(<span class=\"string\">'../controller/user'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"><span class=\"keyword\">var</span> passport = <span class=\"built_in\">require</span>(<span class=\"string\">'passport'</span>);</div><div class=\"line\"></div><div class=\"line\">router.post(<span class=\"string\">'/user/register'</span>,  user.register);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure>\n<p>创建routes/index.js，引入路由文件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"built_in\">require</span>(<span class=\"string\">'./user'</span>);</div><div class=\"line\"></div><div class=\"line\">router.use(user);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure></p>\n<p>修改app.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"comment\">//...</span></div><div class=\"line\">app.use(<span class=\"string\">'/'</span>, router);</div></pre></td></tr></table></figure>\n<h4 id=\"实现注册操作\"><a href=\"#实现注册操作\" class=\"headerlink\" title=\"实现注册操作\"></a>实现注册操作</h4><p>创建controller/user.js。<br>用户密码需要利用bcyptsjs加密，不存储明文密码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Model = <span class=\"built_in\">require</span>(<span class=\"string\">'../model'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> User = Model.User;</div><div class=\"line\"><span class=\"keyword\">var</span> bcrypt = <span class=\"built_in\">require</span>(<span class=\"string\">'bcryptjs'</span>)</div><div class=\"line\"></div><div class=\"line\">validUserRequest = body =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">//TODO 更详细校验</span></div><div class=\"line\">  <span class=\"keyword\">if</span>(!body.username || !body.password) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> &#123;code: <span class=\"number\">-1</span>, message: <span class=\"string\">\"valid param\"</span>&#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.register = (req, res, next) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> error = validUserRequest(req.body);</div><div class=\"line\">  <span class=\"keyword\">if</span>(error) &#123;</div><div class=\"line\">    res.status(<span class=\"number\">400</span>).send(error);</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">const</span> &#123;username, password&#125; = req.body;</div><div class=\"line\">  bcrypt.hash(password, <span class=\"number\">10</span>)</div><div class=\"line\">    .then(hash =&gt; &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> User(&#123;</div><div class=\"line\">        username: username,</div><div class=\"line\">        password: hash</div><div class=\"line\">      &#125;);</div><div class=\"line\">      <span class=\"keyword\">return</span> user.save()</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then(user =&gt; &#123;</div><div class=\"line\">      res.json(&#123;code: <span class=\"number\">0</span>, message: <span class=\"string\">\"create user success\"</span>&#125;);</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .catch(err =&gt; &#123;</div><div class=\"line\">      res.status(<span class=\"number\">406</span>).send(&#123;code: <span class=\"number\">-1</span>, message: err.message&#125;);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><p>因为用到了mongoose库，需要本地先启用mongod服务，端口需要跟config.js中的一致。<br>config.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> config = &#123;</div><div class=\"line\">  mongodb: <span class=\"string\">'mongodb://127.0.0.1:50000/ota_server'</span>,</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = config;</div></pre></td></tr></table></figure></p>\n<p>然后启动应用。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yarn start</div></pre></td></tr></table></figure></p>\n<h4 id=\"测试注册接口\"><a href=\"#测试注册接口\" class=\"headerlink\" title=\"测试注册接口\"></a>测试注册接口</h4><p>在终端里面用如下指令模拟注册请求。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl <span class=\"_\">-d</span> <span class=\"string\">\"username=yinlijun&amp;password=123456\"</span> <span class=\"string\">\"http://127.0.0.1:3020/user/register\"</span></div><div class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class=\"line\">100    75  100    42  100    33    168    132 --:--:-- --:--:-- --:--:--   168&#123;<span class=\"string\">\"code\"</span>:0,<span class=\"string\">\"message\"</span>:<span class=\"string\">\"create user success\"</span>&#125;</div></pre></td></tr></table></figure></p>\n<p>利用mongo客户端打开集合，查看集合数据，插入成功。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mongo mongodb://127.0.0.1:50000</div><div class=\"line\">MongoDB shell version v3.4.9</div><div class=\"line\">connecting to: mongodb://127.0.0.1:50000</div><div class=\"line\">MongoDB server version: 3.4.9</div><div class=\"line\"></div><div class=\"line\">$ use ota_server</div><div class=\"line\">switched to db ota_server</div><div class=\"line\"></div><div class=\"line\">$ db.users.<span class=\"function\"><span class=\"title\">find</span></span>()</div><div class=\"line\">&#123; <span class=\"string\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5a3b61b1db2e604ebca6dfc4\"</span>), <span class=\"string\">\"username\"</span> : <span class=\"string\">\"yinlijun\"</span>, <span class=\"string\">\"password\"</span> : <span class=\"string\">\"<span class=\"variable\">$2a</span><span class=\"variable\">$10</span><span class=\"variable\">$Zc33sn8Zj1kJslfTTXM0deFNUjVMJyWk</span>.tMsuh.aaLtZEFUSedLQW\"</span>, <span class=\"string\">\"__v\"</span> : 0 &#125;</div></pre></td></tr></table></figure></p>\n<p>再次注册同名用户，报错。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl <span class=\"_\">-d</span> <span class=\"string\">\"username=yinlijun&amp;password=123456\"</span> <span class=\"string\">\"http://127.0.0.1:3020/user/register\"</span></div><div class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class=\"line\">100   158  100   125  100    33   1344    354 --:--:-- --:--:-- --:--:--  1344&#123;<span class=\"string\">\"code\"</span>:-1,<span class=\"string\">\"message\"</span>:<span class=\"string\">\"E11000 duplicate key error collection: ota_server.users index: username_1 dup key: &#123; : \\\"yinlijun\\\" &#125;\"</span>&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"用户登录\"><a href=\"#用户登录\" class=\"headerlink\" title=\"用户登录\"></a>用户登录</h3><h4 id=\"路由实现-1\"><a href=\"#路由实现-1\" class=\"headerlink\" title=\"路由实现\"></a>路由实现</h4><p>添加路由routes/user.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">router.post(<span class=\"string\">'/user/login'</span>, user.login);</div></pre></td></tr></table></figure></p>\n<h4 id=\"实现登录操作\"><a href=\"#实现登录操作\" class=\"headerlink\" title=\"实现登录操作\"></a>实现登录操作</h4><p>在controller/user.js中添加如下代码，校验用户名和密码，校验密码用到了bcrypt.compareSync。</p>\n<p>然后生成cookie发到前端。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.login = (req, res, next) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> &#123;username, password&#125; = req.body;</div><div class=\"line\">  User.findOne(&#123;username: username&#125;)</div><div class=\"line\">    .then(user =&gt; &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(!user) &#123;</div><div class=\"line\">        res.status(<span class=\"number\">400</span>).send(&#123;code: <span class=\"number\">-1</span>, message:<span class=\"string\">\"invalid username or password\"</span>&#125;);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span>(!bcrypt.compareSync(password, user.password)) &#123;</div><div class=\"line\">        res.status(<span class=\"number\">400</span>).send(&#123;code: <span class=\"number\">-1</span>, message:<span class=\"string\">\"invalid username or password\"</span>&#125;);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      genCookie(user, res);    </div><div class=\"line\">      res.send(&#123;code:<span class=\"number\">0</span>, message:<span class=\"string\">\"登录成功\"</span>&#125;);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">genCookie = (user, res) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> token = user._id + <span class=\"string\">'$$$'</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> opts = &#123;</div><div class=\"line\">    path: <span class=\"string\">'/'</span>,</div><div class=\"line\">    maxAge: config.session_age,</div><div class=\"line\">    httpOnly: <span class=\"literal\">true</span>,</div><div class=\"line\">  &#125;;</div><div class=\"line\">  res.cookie(config.cookie_name, token);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里可以看到有个重复调用的validUserRequest函数，可以做成一个middleware。</p>\n<p>创建middleware/validRequest.js。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.validUsernamePassword = (req, res, next) =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">//TODO 更详细校验</span></div><div class=\"line\">  <span class=\"keyword\">let</span> &#123;username, password&#125; = req.body;</div><div class=\"line\">  <span class=\"keyword\">if</span>(!username || !password) &#123;</div><div class=\"line\">      res.status(<span class=\"number\">400</span>).send(&#123;code: <span class=\"number\">-1</span>, message: <span class=\"string\">\"valid param\"</span>&#125;);</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  next();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后修改routes/user.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> validRequest = <span class=\"built_in\">require</span>(<span class=\"string\">'../middleware/validRequest'</span>);</div><div class=\"line\"></div><div class=\"line\">router.post(<span class=\"string\">'/user/register'</span>, validRequest.validUsernamePassword, user.register);</div><div class=\"line\"></div><div class=\"line\">router.post(<span class=\"string\">'/user/login'</span>, validRequest.validUsernamePassword, user.login);</div></pre></td></tr></table></figure></p>\n<p>把controller/user.js的register中validUserRequest调用去掉。</p>\n<p>测试一下这个middleware：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"> $ curl <span class=\"_\">-d</span> <span class=\"string\">\"username=yinlijun&amp;password=\"</span> <span class=\"string\">\"http://127.0.0.1:3020/user/register\"</span></div><div class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class=\"line\">100    62  100    35  100    27   1093    843 --:--:-- --:--:-- --:--:--  1093&#123;<span class=\"string\">\"code\"</span>:-1,<span class=\"string\">\"message\"</span>:<span class=\"string\">\"valid param\"</span>&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"测试登录接口\"><a href=\"#测试登录接口\" class=\"headerlink\" title=\"测试登录接口\"></a>测试登录接口</h4><p>输入错误的用户名:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl <span class=\"_\">-d</span> <span class=\"string\">\"username=liudehua&amp;password=123456\"</span> <span class=\"string\">\"http://127.0.0.1:3020/user/login\"</span></div><div class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class=\"line\">100    85  100    52  100    33   1106    702 --:--:-- --:--:-- --:--:--  1106&#123;<span class=\"string\">\"code\"</span>:-1,<span class=\"string\">\"message\"</span>:<span class=\"string\">\"invalid username or password\"</span>&#125;</div></pre></td></tr></table></figure></p>\n<p>输入错误密码：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl <span class=\"_\">-d</span> <span class=\"string\">\"username=yinlijun&amp;password=654321\"</span> <span class=\"string\">\"http://127.0.0.1:3020/user/login\"</span></div><div class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class=\"line\">100    85  100    52  100    33    553    351 --:--:-- --:--:-- --:--:--   553&#123;<span class=\"string\">\"code\"</span>:-1,<span class=\"string\">\"message\"</span>:<span class=\"string\">\"invalid username or password\"</span>&#125;</div></pre></td></tr></table></figure></p>\n<p>输入正确的用户名密码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -d &quot;username=yinlijun&amp;password=123456&quot; &quot;http://127.0.0.1:3020/user/login&quot;</div><div class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class=\"line\">100    68  100    35  100    33    372    351 --:--:-- --:--:-- --:--:--   372&#123;&quot;code&quot;:0,&quot;message&quot;:&quot;登录成功&quot;&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"利用passport校验登录功能。\"><a href=\"#利用passport校验登录功能。\" class=\"headerlink\" title=\"利用passport校验登录功能。\"></a>利用passport校验登录功能。</h3><p>社区里面有个passport的组件，可以用来实现校验登录功能。</p>\n<h4 id=\"封装passport中间件\"><a href=\"#封装passport中间件\" class=\"headerlink\" title=\"封装passport中间件\"></a>封装passport中间件</h4><p>创建middleware/passport.js，封装passport模块。</p>\n<p>将校验密码的操作挪到passport中，校验成功之后用户信息将会保存到req.user。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> passport = <span class=\"built_in\">require</span>(<span class=\"string\">'passport'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> User = <span class=\"built_in\">require</span>(<span class=\"string\">'../model'</span>).User;</div><div class=\"line\"><span class=\"keyword\">var</span> LocalStrategy = <span class=\"built_in\">require</span>(<span class=\"string\">'passport-local'</span>).Strategy;</div><div class=\"line\"></div><div class=\"line\">passport.use(<span class=\"string\">'local.login'</span>, <span class=\"keyword\">new</span> LocalStrategy((username, password, done) =&gt; &#123;</div><div class=\"line\">  User.findOne(&#123;username: username&#125;)</div><div class=\"line\">    .exec()</div><div class=\"line\">    .then(user =&gt; &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(!user) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> done(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>, &#123;code: <span class=\"number\">-1</span>, message: <span class=\"string\">\"invalid username or password\"</span>&#125;);</div><div class=\"line\">      &#125; </div><div class=\"line\">      <span class=\"keyword\">if</span>(!user.validPassword(password)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> done(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>, &#123;code: <span class=\"number\">-1</span>, message: <span class=\"string\">\"invalid username or password\"</span>&#125;);</div><div class=\"line\">      &#125; </div><div class=\"line\">      <span class=\"keyword\">return</span> done(<span class=\"literal\">null</span>, user);</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .catch(err =&gt; &#123;</div><div class=\"line\">      done(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>, &#123;code: <span class=\"number\">-1</span>, message: err.message&#125;);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;))</div><div class=\"line\"></div><div class=\"line\">passport.serializeUser((user, done) =&gt; &#123;</div><div class=\"line\">  done(<span class=\"literal\">null</span>, user._id);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">passport.deserializeUser((id, done) =&gt; &#123;</div><div class=\"line\">  User.findById(id)</div><div class=\"line\">    .exec()</div><div class=\"line\">    .then(user =&gt; &#123;</div><div class=\"line\">      done(<span class=\"literal\">null</span>, user);</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .catch(err =&gt; &#123;</div><div class=\"line\">      done(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>, &#123;code: <span class=\"number\">-1</span>, message: err.message&#125;);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = passport;</div></pre></td></tr></table></figure></p>\n<h4 id=\"重新实现登录操作\"><a href=\"#重新实现登录操作\" class=\"headerlink\" title=\"重新实现登录操作\"></a>重新实现登录操作</h4><p>修改controller/user.js的login函数，去掉验证用户名密码的代码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.login = (req, res, next) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> user = req.user;</div><div class=\"line\">  genCookie(user, res);    </div><div class=\"line\">  res.send(&#123;code:<span class=\"number\">0</span>, message:<span class=\"string\">\"login success\"</span>&#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>在middleware/validRequest.js添加一个校验中间件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.validByPassport = (req, res, next) =&gt; &#123;</div><div class=\"line\">    passport.authenticate(<span class=\"string\">'local.login'</span>, &#123;</div><div class=\"line\">      failureMessage: <span class=\"string\">'invalid username or password'</span>,</div><div class=\"line\">    &#125;)(req,  res, next);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"修改路由\"><a href=\"#修改路由\" class=\"headerlink\" title=\"修改路由\"></a>修改路由</h4><p>修改router/user.js路由<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">router.post(<span class=\"string\">'/user/login'</span>, validRequest.validByPassport, user.login);</div></pre></td></tr></table></figure></p>\n<p>这样，用户登录就会走passport的校验流程。</p>\n<h3 id=\"退出功能\"><a href=\"#退出功能\" class=\"headerlink\" title=\"退出功能\"></a>退出功能</h3><p>主要是清除cookie，controller/user.js中添加代码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.logout = (req, res, next) =&gt; &#123;</div><div class=\"line\">  clearCookie(res);</div><div class=\"line\">  res.send(&#123;code:<span class=\"number\">0</span>, message:<span class=\"string\">\"exit success\"</span>&#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">clearCookie = (res) =&gt; &#123;</div><div class=\"line\">  res.clearCookie(config.cookie_name, &#123;path: <span class=\"string\">'/'</span>&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl &quot;http://127.0.0.1:3020/user/logout&quot;</div><div class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class=\"line\">100    35  100    35    0     0   2187      0 --:--:-- --:--:-- --:--:--  2187&#123;&quot;code&quot;:0,&quot;message&quot;:&quot;exit success&quot;&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"Match-react router 4.0.0 api中文文档","date":"2016-11-25T05:05:50.000Z","_content":"[原文链接](https://react-router.now.sh/Match)\n\n<font size='1em'>&lt;Match&gt;</font>\n\n匹配到地址(location)时进行UI渲染\n\n### <font color='red'>pattern: string</font>\n\n任何[path-to-regexp](https://www.npmjs.com/package/path-to-regexp)可以理解的URL模式表达式\n```html\n<Match pattern=\"/users/:id\" component={User}/>\n```\n<!--more-->\n\n### <font color='red'>exactly: bool</font>\n\n当为true时，只有模式表达式严格匹配时，才算匹配上。\n\n| pattern |\tlocation.pathname | exactly? | matches? |\n| --- | :---: | :----: | :----: |\n| /foo | /foo/bar |\tyes |\tno\n| /foo | /foo/bar |\tno | yes\n```html\n<Match pattern=\"/foo\" exactly component={Foo}/>\n```\n\n### <font color='red'>location</font>\n\n如果你不想匹配上下文(context)中的地址(location)时，你可以传入一个location参数来替代。\n```html\n<Match pattern=\"/foo\" location={{ pathname: '/foo' }}/>\n```\n\n### <font color='red'>component</font>\n当匹配到地址时渲染的React组件，渲染该组件时，会传入如下属性(props)：\n- pattern: (string) 匹配表达式.\n- pathname: (string) 匹配后的路径.\n- isExact: (bool) 是否严格匹配 (v. partial).\n- location: 匹配到的location对象.\n- params: 根据匹配模式解析出来的参数\n\n如下所示：\n```javascript\nclass User extends React.Component {\n    render() {\n        const {params, pattern, pathname, isExact, location} = this.props;\n        return (<div>\n            <h2>User</h2>\n            <div>\n                location:{JSON.stringify(location)}\n                <br />\n                pattern:{pattern}\n                <br />\n                pathname:{pathname}\n                <br />\n                isExact:{isExact ? \"true\" : \"false\"}\n                <br />\n                params:{JSON.stringify(params, null, 2)}\n                <br />\n            </div>\n        </div>)\n    }\n}\n\n<Match pattern=\"/:user\" component={User}/>\n```\n效果如下\n```\nlocation:{\"pathname\":\"/kim\",\"search\":\"\",\"hash\":\"\",\"state\":null,\"query\":null,\"key\":\"a21zge\"}\npattern:/:user\npathname:/kim\nisExact:true\nparams:{ \"user\": \"kim\" }\n```\n\n### <font color='red'>render: func</font>\n\n相对于直接渲染一个组件，你可以之间传一个渲染函数，该函数被调用时，会传入组件一样的参数。\n\n这相当于提供了一种内联(inline rendering)渲染方式，或者对Match的封装(wrapping)。\n```javascript\n// 非常方便的内联渲染\n<Match pattern=\"/home\" render={() => <div>Home</div>}/>\n\n// 对Match进行封装\nconst MatchWithFade = ({ component:Component, ...rest }) => (\n  <Match {...rest} render={(matchProps) => (\n    <FadeIn>\n      <Component {...matchProps}/>\n    </FadeIn>\n  )}/>\n)\n\n<MatchWithFade pattern=\"/cool\" component={Something}/>\n```\n### <font color='red'>children: func</font>\n\n有时你可能需要根据匹配与否进行不同的渲染，这时，你可以使用children属性，它的类型为function，\n它的表现有点象render函数，但是有以下不同：\n \n(1) 不管有没有匹配上都会被调用。 \n\n(2) 回传递一个matched属性表示有没有被匹配上。\n\nIt seems unlikely you’ll need this for anything besides animating when a component transitions from matching to not matching and back, but who knows?\n\n```javascript\n<Match children={({ matched, ...rest}) => (\n  {/* 因为Animate 总是能被渲染，所以你可以利用组件的生命周期(lifecycle)来实现动画。*/}\n  <Animate>\n    {matched && (\n      <Something {...rest}/>\n    )}\n  </Animate>\n)}/>\n```\n<font size='6em'>&lt;/Match&gt;</font>","source":"_posts/react-router-4-0-0-api-Match.md","raw":"---\ntitle: Match-react router 4.0.0 api中文文档\ndate: 2016-11-25 13:05:50\ntags: [react, react-router, 翻译文档]\ncategories: react router 4.0.0 api中文文档\n---\n[原文链接](https://react-router.now.sh/Match)\n\n<font size='1em'>&lt;Match&gt;</font>\n\n匹配到地址(location)时进行UI渲染\n\n### <font color='red'>pattern: string</font>\n\n任何[path-to-regexp](https://www.npmjs.com/package/path-to-regexp)可以理解的URL模式表达式\n```html\n<Match pattern=\"/users/:id\" component={User}/>\n```\n<!--more-->\n\n### <font color='red'>exactly: bool</font>\n\n当为true时，只有模式表达式严格匹配时，才算匹配上。\n\n| pattern |\tlocation.pathname | exactly? | matches? |\n| --- | :---: | :----: | :----: |\n| /foo | /foo/bar |\tyes |\tno\n| /foo | /foo/bar |\tno | yes\n```html\n<Match pattern=\"/foo\" exactly component={Foo}/>\n```\n\n### <font color='red'>location</font>\n\n如果你不想匹配上下文(context)中的地址(location)时，你可以传入一个location参数来替代。\n```html\n<Match pattern=\"/foo\" location={{ pathname: '/foo' }}/>\n```\n\n### <font color='red'>component</font>\n当匹配到地址时渲染的React组件，渲染该组件时，会传入如下属性(props)：\n- pattern: (string) 匹配表达式.\n- pathname: (string) 匹配后的路径.\n- isExact: (bool) 是否严格匹配 (v. partial).\n- location: 匹配到的location对象.\n- params: 根据匹配模式解析出来的参数\n\n如下所示：\n```javascript\nclass User extends React.Component {\n    render() {\n        const {params, pattern, pathname, isExact, location} = this.props;\n        return (<div>\n            <h2>User</h2>\n            <div>\n                location:{JSON.stringify(location)}\n                <br />\n                pattern:{pattern}\n                <br />\n                pathname:{pathname}\n                <br />\n                isExact:{isExact ? \"true\" : \"false\"}\n                <br />\n                params:{JSON.stringify(params, null, 2)}\n                <br />\n            </div>\n        </div>)\n    }\n}\n\n<Match pattern=\"/:user\" component={User}/>\n```\n效果如下\n```\nlocation:{\"pathname\":\"/kim\",\"search\":\"\",\"hash\":\"\",\"state\":null,\"query\":null,\"key\":\"a21zge\"}\npattern:/:user\npathname:/kim\nisExact:true\nparams:{ \"user\": \"kim\" }\n```\n\n### <font color='red'>render: func</font>\n\n相对于直接渲染一个组件，你可以之间传一个渲染函数，该函数被调用时，会传入组件一样的参数。\n\n这相当于提供了一种内联(inline rendering)渲染方式，或者对Match的封装(wrapping)。\n```javascript\n// 非常方便的内联渲染\n<Match pattern=\"/home\" render={() => <div>Home</div>}/>\n\n// 对Match进行封装\nconst MatchWithFade = ({ component:Component, ...rest }) => (\n  <Match {...rest} render={(matchProps) => (\n    <FadeIn>\n      <Component {...matchProps}/>\n    </FadeIn>\n  )}/>\n)\n\n<MatchWithFade pattern=\"/cool\" component={Something}/>\n```\n### <font color='red'>children: func</font>\n\n有时你可能需要根据匹配与否进行不同的渲染，这时，你可以使用children属性，它的类型为function，\n它的表现有点象render函数，但是有以下不同：\n \n(1) 不管有没有匹配上都会被调用。 \n\n(2) 回传递一个matched属性表示有没有被匹配上。\n\nIt seems unlikely you’ll need this for anything besides animating when a component transitions from matching to not matching and back, but who knows?\n\n```javascript\n<Match children={({ matched, ...rest}) => (\n  {/* 因为Animate 总是能被渲染，所以你可以利用组件的生命周期(lifecycle)来实现动画。*/}\n  <Animate>\n    {matched && (\n      <Something {...rest}/>\n    )}\n  </Animate>\n)}/>\n```\n<font size='6em'>&lt;/Match&gt;</font>","slug":"react-router-4-0-0-api-Match","published":1,"updated":"2017-05-25T09:23:45.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o49000xiwl7h0vpddq3","content":"<p><a href=\"https://react-router.now.sh/Match\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n<font size=\"1em\">&lt;Match&gt;</font>\n\n<p>匹配到地址(location)时进行UI渲染</p>\n<h3 id=\"pattern-string\"><a href=\"#pattern-string\" class=\"headerlink\" title=\"pattern: string\"></a><font color=\"red\">pattern: string</font></h3><p>任何<a href=\"https://www.npmjs.com/package/path-to-regexp\" target=\"_blank\" rel=\"external\">path-to-regexp</a>可以理解的URL模式表达式<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Match</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/users/:id\"</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;User&#125;/</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"exactly-bool\"><a href=\"#exactly-bool\" class=\"headerlink\" title=\"exactly: bool\"></a><font color=\"red\">exactly: bool</font></h3><p>当为true时，只有模式表达式严格匹配时，才算匹配上。</p>\n<table>\n<thead>\n<tr>\n<th>pattern</th>\n<th style=\"text-align:center\">location.pathname</th>\n<th style=\"text-align:center\">exactly?</th>\n<th style=\"text-align:center\">matches?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/foo</td>\n<td style=\"text-align:center\">/foo/bar</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">no</td>\n</tr>\n<tr>\n<td>/foo</td>\n<td style=\"text-align:center\">/foo/bar</td>\n<td style=\"text-align:center\">no</td>\n<td style=\"text-align:center\">yes</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Match</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/foo\"</span> <span class=\"attr\">exactly</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Foo&#125;/</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a><font color=\"red\">location</font></h3><p>如果你不想匹配上下文(context)中的地址(location)时，你可以传入一个location参数来替代。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Match</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/foo\"</span> <span class=\"attr\">location</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">pathname:</span> '/<span class=\"attr\">foo</span>' &#125;&#125;/&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"component\"><a href=\"#component\" class=\"headerlink\" title=\"component\"></a><font color=\"red\">component</font></h3><p>当匹配到地址时渲染的React组件，渲染该组件时，会传入如下属性(props)：</p>\n<ul>\n<li>pattern: (string) 匹配表达式.</li>\n<li>pathname: (string) 匹配后的路径.</li>\n<li>isExact: (bool) 是否严格匹配 (v. partial).</li>\n<li>location: 匹配到的location对象.</li>\n<li>params: 根据匹配模式解析出来的参数</li>\n</ul>\n<p>如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> &#123;params, pattern, pathname, isExact, location&#125; = <span class=\"keyword\">this</span>.props;</div><div class=\"line\">        <span class=\"keyword\">return</span> (&lt;div&gt;</div><div class=\"line\">            &lt;h2&gt;User&lt;/h2&gt;</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">                location:&#123;JSON.stringify(location)&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">                pattern:&#123;pattern&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">                pathname:&#123;pathname&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">                isExact:&#123;isExact ? \"true\" : \"false\"&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">                params:&#123;JSON.stringify(params, null, 2)&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">        &lt;/div&gt;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;Match pattern=\"/:user\" component=&#123;User&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<p>效果如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">location:&#123;&quot;pathname&quot;:&quot;/kim&quot;,&quot;search&quot;:&quot;&quot;,&quot;hash&quot;:&quot;&quot;,&quot;state&quot;:null,&quot;query&quot;:null,&quot;key&quot;:&quot;a21zge&quot;&#125;</div><div class=\"line\">pattern:/:user</div><div class=\"line\">pathname:/kim</div><div class=\"line\">isExact:true</div><div class=\"line\">params:&#123; &quot;user&quot;: &quot;kim&quot; &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"render-func\"><a href=\"#render-func\" class=\"headerlink\" title=\"render: func\"></a><font color=\"red\">render: func</font></h3><p>相对于直接渲染一个组件，你可以之间传一个渲染函数，该函数被调用时，会传入组件一样的参数。</p>\n<p>这相当于提供了一种内联(inline rendering)渲染方式，或者对Match的封装(wrapping)。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 非常方便的内联渲染</span></div><div class=\"line\">&lt;Match pattern=<span class=\"string\">\"/home\"</span> render=&#123;() =&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>&#125;/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 对Match进行封装</span></div><div class=\"line\"><span class=\"keyword\">const</span> MatchWithFade = (&#123; component:Component, ...rest &#125;) =&gt; (</div><div class=\"line\">  &lt;Match &#123;...rest&#125; render=&#123;(matchProps) =&gt; (</div><div class=\"line\">    &lt;FadeIn&gt;</div><div class=\"line\">      &lt;Component &#123;...matchProps&#125;/&gt;</div><div class=\"line\">    &lt;/FadeIn&gt;</div><div class=\"line\">  )&#125;/&gt;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">&lt;MatchWithFade pattern=\"/cool\" component=&#123;Something&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"children-func\"><a href=\"#children-func\" class=\"headerlink\" title=\"children: func\"></a><font color=\"red\">children: func</font></h3><p>有时你可能需要根据匹配与否进行不同的渲染，这时，你可以使用children属性，它的类型为function，<br>它的表现有点象render函数，但是有以下不同：</p>\n<p>(1) 不管有没有匹配上都会被调用。 </p>\n<p>(2) 回传递一个matched属性表示有没有被匹配上。</p>\n<p>It seems unlikely you’ll need this for anything besides animating when a component transitions from matching to not matching and back, but who knows?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Match children=&#123;(&#123; matched, ...rest&#125;) =&gt; (</div><div class=\"line\">  &#123;<span class=\"comment\">/* 因为Animate 总是能被渲染，所以你可以利用组件的生命周期(lifecycle)来实现动画。*/</span>&#125;</div><div class=\"line\">  &lt;Animate&gt;</div><div class=\"line\">    &#123;matched &amp;&amp; (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Something</span> &#123;<span class=\"attr\">...rest</span>&#125;/&gt;</span></span></div><div class=\"line\">    )&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Animate</span>&gt;</span></div><div class=\"line\">)&#125;/&gt;</div></pre></td></tr></table></figure>\n<font size=\"6em\">&lt;/Match&gt;</font>","site":{"data":{}},"excerpt":"<p><a href=\"https://react-router.now.sh/Match\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n<font size=\"1em\">&lt;Match&gt;</font>\n\n<p>匹配到地址(location)时进行UI渲染</p>\n<h3 id=\"pattern-string\"><a href=\"#pattern-string\" class=\"headerlink\" title=\"pattern: string\"></a><font color=\"red\">pattern: string</font></h3><p>任何<a href=\"https://www.npmjs.com/package/path-to-regexp\" target=\"_blank\" rel=\"external\">path-to-regexp</a>可以理解的URL模式表达式<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Match</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/users/:id\"</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;User&#125;/</span>&gt;</span></div></pre></td></tr></table></figure></p>","more":"<h3 id=\"exactly-bool\"><a href=\"#exactly-bool\" class=\"headerlink\" title=\"exactly: bool\"></a><font color=\"red\">exactly: bool</font></h3><p>当为true时，只有模式表达式严格匹配时，才算匹配上。</p>\n<table>\n<thead>\n<tr>\n<th>pattern</th>\n<th style=\"text-align:center\">location.pathname</th>\n<th style=\"text-align:center\">exactly?</th>\n<th style=\"text-align:center\">matches?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/foo</td>\n<td style=\"text-align:center\">/foo/bar</td>\n<td style=\"text-align:center\">yes</td>\n<td style=\"text-align:center\">no</td>\n</tr>\n<tr>\n<td>/foo</td>\n<td style=\"text-align:center\">/foo/bar</td>\n<td style=\"text-align:center\">no</td>\n<td style=\"text-align:center\">yes</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Match</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/foo\"</span> <span class=\"attr\">exactly</span> <span class=\"attr\">component</span>=<span class=\"string\">&#123;Foo&#125;/</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a><font color=\"red\">location</font></h3><p>如果你不想匹配上下文(context)中的地址(location)时，你可以传入一个location参数来替代。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Match</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/foo\"</span> <span class=\"attr\">location</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">pathname:</span> '/<span class=\"attr\">foo</span>' &#125;&#125;/&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"component\"><a href=\"#component\" class=\"headerlink\" title=\"component\"></a><font color=\"red\">component</font></h3><p>当匹配到地址时渲染的React组件，渲染该组件时，会传入如下属性(props)：</p>\n<ul>\n<li>pattern: (string) 匹配表达式.</li>\n<li>pathname: (string) 匹配后的路径.</li>\n<li>isExact: (bool) 是否严格匹配 (v. partial).</li>\n<li>location: 匹配到的location对象.</li>\n<li>params: 根据匹配模式解析出来的参数</li>\n</ul>\n<p>如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> &#123;params, pattern, pathname, isExact, location&#125; = <span class=\"keyword\">this</span>.props;</div><div class=\"line\">        <span class=\"keyword\">return</span> (&lt;div&gt;</div><div class=\"line\">            &lt;h2&gt;User&lt;/h2&gt;</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">                location:&#123;JSON.stringify(location)&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">                pattern:&#123;pattern&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">                pathname:&#123;pathname&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">                isExact:&#123;isExact ? \"true\" : \"false\"&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">                params:&#123;JSON.stringify(params, null, 2)&#125;</div><div class=\"line\">                &lt;br /&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">        &lt;/div&gt;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;Match pattern=\"/:user\" component=&#123;User&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<p>效果如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">location:&#123;&quot;pathname&quot;:&quot;/kim&quot;,&quot;search&quot;:&quot;&quot;,&quot;hash&quot;:&quot;&quot;,&quot;state&quot;:null,&quot;query&quot;:null,&quot;key&quot;:&quot;a21zge&quot;&#125;</div><div class=\"line\">pattern:/:user</div><div class=\"line\">pathname:/kim</div><div class=\"line\">isExact:true</div><div class=\"line\">params:&#123; &quot;user&quot;: &quot;kim&quot; &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"render-func\"><a href=\"#render-func\" class=\"headerlink\" title=\"render: func\"></a><font color=\"red\">render: func</font></h3><p>相对于直接渲染一个组件，你可以之间传一个渲染函数，该函数被调用时，会传入组件一样的参数。</p>\n<p>这相当于提供了一种内联(inline rendering)渲染方式，或者对Match的封装(wrapping)。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 非常方便的内联渲染</span></div><div class=\"line\">&lt;Match pattern=<span class=\"string\">\"/home\"</span> render=&#123;() =&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>&#125;/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 对Match进行封装</span></div><div class=\"line\"><span class=\"keyword\">const</span> MatchWithFade = (&#123; component:Component, ...rest &#125;) =&gt; (</div><div class=\"line\">  &lt;Match &#123;...rest&#125; render=&#123;(matchProps) =&gt; (</div><div class=\"line\">    &lt;FadeIn&gt;</div><div class=\"line\">      &lt;Component &#123;...matchProps&#125;/&gt;</div><div class=\"line\">    &lt;/FadeIn&gt;</div><div class=\"line\">  )&#125;/&gt;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">&lt;MatchWithFade pattern=\"/cool\" component=&#123;Something&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"children-func\"><a href=\"#children-func\" class=\"headerlink\" title=\"children: func\"></a><font color=\"red\">children: func</font></h3><p>有时你可能需要根据匹配与否进行不同的渲染，这时，你可以使用children属性，它的类型为function，<br>它的表现有点象render函数，但是有以下不同：</p>\n<p>(1) 不管有没有匹配上都会被调用。 </p>\n<p>(2) 回传递一个matched属性表示有没有被匹配上。</p>\n<p>It seems unlikely you’ll need this for anything besides animating when a component transitions from matching to not matching and back, but who knows?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Match children=&#123;(&#123; matched, ...rest&#125;) =&gt; (</div><div class=\"line\">  &#123;<span class=\"comment\">/* 因为Animate 总是能被渲染，所以你可以利用组件的生命周期(lifecycle)来实现动画。*/</span>&#125;</div><div class=\"line\">  &lt;Animate&gt;</div><div class=\"line\">    &#123;matched &amp;&amp; (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Something</span> &#123;<span class=\"attr\">...rest</span>&#125;/&gt;</span></span></div><div class=\"line\">    )&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Animate</span>&gt;</span></div><div class=\"line\">)&#125;/&gt;</div></pre></td></tr></table></figure>\n<font size=\"6em\">&lt;/Match&gt;</font>"},{"title":"Miss-react router 4.0.0 api中文文档","date":"2016-11-29T05:55:49.000Z","_content":"[原文链接](https://react-router.now.sh/Miss)\n\n<font size='6em'>&lt;Miss&gt;</font>\n\n当没有匹配到当前的地址时，将会渲染Miss。\n```javascript\nconst App = () => (\n  <Router>\n    <Match pattern=\"/foo\"/>\n    <Match pattern=\"/bar\"/>\n    <Miss component={NoMatch}/>\n  </Router>\n)\n\nconst NoMatch = ({ location }) => (\n  <div>Nothing matched {location.pathname}.</div>\n)\n```\n<!-- more -->\n### <font color='red'>component</font>\n跟Match一样的，表示将要渲染的组建，但是不同的是只有location一个prop传进去。\n```\n<Miss component={NoMatch}/>\n```\n### <font color=red>render: func</font>\n\n跟Match一样的，可以提供一个渲染函数，同样，也只有location一个prop传进去。\n```\n<Miss render={({ location }) => (\n  <div>Nothing matched {location.pathname}.</div>\n)}/>\n```\n<font size='6em'>&lt;/Miss&gt;<font>","source":"_posts/react-router-4-0-0-api-Miss.md","raw":"---\ntitle: Miss-react router 4.0.0 api中文文档\ndate: 2016-11-29 13:55:49\ntags: [react, react-router, 翻译文档]\ncategories: react router 4.0.0 api中文文档\n---\n[原文链接](https://react-router.now.sh/Miss)\n\n<font size='6em'>&lt;Miss&gt;</font>\n\n当没有匹配到当前的地址时，将会渲染Miss。\n```javascript\nconst App = () => (\n  <Router>\n    <Match pattern=\"/foo\"/>\n    <Match pattern=\"/bar\"/>\n    <Miss component={NoMatch}/>\n  </Router>\n)\n\nconst NoMatch = ({ location }) => (\n  <div>Nothing matched {location.pathname}.</div>\n)\n```\n<!-- more -->\n### <font color='red'>component</font>\n跟Match一样的，表示将要渲染的组建，但是不同的是只有location一个prop传进去。\n```\n<Miss component={NoMatch}/>\n```\n### <font color=red>render: func</font>\n\n跟Match一样的，可以提供一个渲染函数，同样，也只有location一个prop传进去。\n```\n<Miss render={({ location }) => (\n  <div>Nothing matched {location.pathname}.</div>\n)}/>\n```\n<font size='6em'>&lt;/Miss&gt;<font>","slug":"react-router-4-0-0-api-Miss","published":1,"updated":"2017-05-25T03:41:18.236Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o4b000yiwl7nlzpxape","content":"<p><a href=\"https://react-router.now.sh/Miss\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n<font size=\"6em\">&lt;Miss&gt;</font>\n\n<p>当没有匹配到当前的地址时，将会渲染Miss。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> App = () =&gt; (</div><div class=\"line\">  &lt;Router&gt;</div><div class=\"line\">    &lt;Match pattern=\"/foo\"/&gt;</div><div class=\"line\">    &lt;Match pattern=\"/bar\"/&gt;</div><div class=\"line\">    &lt;Miss component=&#123;NoMatch&#125;/&gt;</div><div class=\"line\">  &lt;/Router&gt;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">const NoMatch = (&#123; location &#125;) =&gt; (</div><div class=\"line\">  &lt;div&gt;Nothing matched &#123;location.pathname&#125;.&lt;/div&gt;</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"component\"><a href=\"#component\" class=\"headerlink\" title=\"component\"></a><font color=\"red\">component</font></h3><p>跟Match一样的，表示将要渲染的组建，但是不同的是只有location一个prop传进去。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Miss component=&#123;NoMatch&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"render-func\"><a href=\"#render-func\" class=\"headerlink\" title=\"render: func\"></a><font color=\"red\">render: func</font></h3><p>跟Match一样的，可以提供一个渲染函数，同样，也只有location一个prop传进去。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Miss render=&#123;(&#123; location &#125;) =&gt; (</div><div class=\"line\">  &lt;div&gt;Nothing matched &#123;location.pathname&#125;.&lt;/div&gt;</div><div class=\"line\">)&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<p><font size=\"6em\">&lt;/Miss&gt;<font></font></font></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://react-router.now.sh/Miss\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n<font size=\"6em\">&lt;Miss&gt;</font>\n\n<p>当没有匹配到当前的地址时，将会渲染Miss。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> App = () =&gt; (</div><div class=\"line\">  &lt;Router&gt;</div><div class=\"line\">    &lt;Match pattern=\"/foo\"/&gt;</div><div class=\"line\">    &lt;Match pattern=\"/bar\"/&gt;</div><div class=\"line\">    &lt;Miss component=&#123;NoMatch&#125;/&gt;</div><div class=\"line\">  &lt;/Router&gt;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">const NoMatch = (&#123; location &#125;) =&gt; (</div><div class=\"line\">  &lt;div&gt;Nothing matched &#123;location.pathname&#125;.&lt;/div&gt;</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>","more":"<h3 id=\"component\"><a href=\"#component\" class=\"headerlink\" title=\"component\"></a><font color=\"red\">component</font></h3><p>跟Match一样的，表示将要渲染的组建，但是不同的是只有location一个prop传进去。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Miss component=&#123;NoMatch&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"render-func\"><a href=\"#render-func\" class=\"headerlink\" title=\"render: func\"></a><font color=\"red\">render: func</font></h3><p>跟Match一样的，可以提供一个渲染函数，同样，也只有location一个prop传进去。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Miss render=&#123;(&#123; location &#125;) =&gt; (</div><div class=\"line\">  &lt;div&gt;Nothing matched &#123;location.pathname&#125;.&lt;/div&gt;</div><div class=\"line\">)&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<p><font size=\"6em\">&lt;/Miss&gt;<font></font></font></p>"},{"title":"BrowserRouter-react router 4.0.0 api中文文档","date":"2016-11-24T06:54:00.000Z","_content":"[原文链接](https://react-router.now.sh/BrowserRouter)\n\n<font size='6em'>&lt;BrowserRouter&gt;</font>\n\n保持你的界面与浏览器历史记录保持同步。\n```html5\n<BrowserRouter>\n  <App/>\n</BrowserRouter>\n```\n<!--more-->\n\n<font color='#FF0000'>basename</font>\n\n所有路由的根URL，如果你的应用处于服务端的子目录, 你可以设置这个值为该子目录。\n\n```html5\n<BrowserRouter basename=\"/calendar\" />\n\n// 假设Link标签如下所示：\n<Link to=\"/today\"/>\n// 那么超链接指向 \"/calendar/today\"\n</BrowserRouter>\n```\n<font size='6em'>&lt;/BrowserRouter&gt;</font>\n","source":"_posts/react-router-4-0-0-api-BrowserRouter.md","raw":"---\ntitle: BrowserRouter-react router 4.0.0 api中文文档\ndate: 2016-11-24 14:54:00\ntags: [react, react-router, 翻译文档]\ncategories: react router 4.0.0 api中文文档\n---\n[原文链接](https://react-router.now.sh/BrowserRouter)\n\n<font size='6em'>&lt;BrowserRouter&gt;</font>\n\n保持你的界面与浏览器历史记录保持同步。\n```html5\n<BrowserRouter>\n  <App/>\n</BrowserRouter>\n```\n<!--more-->\n\n<font color='#FF0000'>basename</font>\n\n所有路由的根URL，如果你的应用处于服务端的子目录, 你可以设置这个值为该子目录。\n\n```html5\n<BrowserRouter basename=\"/calendar\" />\n\n// 假设Link标签如下所示：\n<Link to=\"/today\"/>\n// 那么超链接指向 \"/calendar/today\"\n</BrowserRouter>\n```\n<font size='6em'>&lt;/BrowserRouter&gt;</font>\n","slug":"react-router-4-0-0-api-BrowserRouter","published":1,"updated":"2017-05-25T03:41:18.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o4m0010iwl71gftq1yv","content":"<p><a href=\"https://react-router.now.sh/BrowserRouter\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n<font size=\"6em\">&lt;BrowserRouter&gt;</font>\n\n<p>保持你的界面与浏览器历史记录保持同步。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;BrowserRouter&gt;</div><div class=\"line\">  &lt;App/&gt;</div><div class=\"line\">&lt;/BrowserRouter&gt;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<font color=\"#FF0000\">basename</font>\n\n<p>所有路由的根URL，如果你的应用处于服务端的子目录, 你可以设置这个值为该子目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;BrowserRouter basename=&quot;/calendar&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">// 假设Link标签如下所示：</div><div class=\"line\">&lt;Link to=&quot;/today&quot;/&gt;</div><div class=\"line\">// 那么超链接指向 &quot;/calendar/today&quot;</div><div class=\"line\">&lt;/BrowserRouter&gt;</div></pre></td></tr></table></figure>\n<font size=\"6em\">&lt;/BrowserRouter&gt;</font>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://react-router.now.sh/BrowserRouter\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n<font size=\"6em\">&lt;BrowserRouter&gt;</font>\n\n<p>保持你的界面与浏览器历史记录保持同步。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;BrowserRouter&gt;</div><div class=\"line\">  &lt;App/&gt;</div><div class=\"line\">&lt;/BrowserRouter&gt;</div></pre></td></tr></table></figure></p>","more":"<font color=\"#FF0000\">basename</font>\n\n<p>所有路由的根URL，如果你的应用处于服务端的子目录, 你可以设置这个值为该子目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;BrowserRouter basename=&quot;/calendar&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">// 假设Link标签如下所示：</div><div class=\"line\">&lt;Link to=&quot;/today&quot;/&gt;</div><div class=\"line\">// 那么超链接指向 &quot;/calendar/today&quot;</div><div class=\"line\">&lt;/BrowserRouter&gt;</div></pre></td></tr></table></figure>\n<font size=\"6em\">&lt;/BrowserRouter&gt;</font>"},{"title":"BrowserRouter-react router 4.0.0 api中文文档","date":"2016-11-24T06:54:00.000Z","catagarys":"react router 4.0.0 api中文文档","_content":"\n\n[原文链接](https://react-router.now.sh/BrowserRouter)\n\n<font size='5em'>&lt;BrowserRouter&gt;</font>\n\n保持你的界面与浏览器历史记录保持同步。\n```html5\n<BrowserRouter>\n  <App/>\n</BrowserRouter>\n```\n<!--more-->\n\n<font color='#FF0000'>basename</font>\n\n所有路由的根URL，如果你的应用处于服务端的子目录, 你可以设置这个值为该子目录。\n\n```html5\n<BrowserRouter basename=\"/calendar\" />\n\n// 假设Link标签如下所示：\n<Link to=\"/today\"/>\n// 那么超链接指向 \"/calendar/today\"\n</BrowserRouter>\n```\n<font size='5em'>&lt;/BrowserRouter&gt;</font>\n","source":"_posts/react-router-4-0-0-api.md","raw":"---\ntitle: BrowserRouter-react router 4.0.0 api中文文档\ndate: 2016-11-24 14:54:00\ntags: [react, react-router, 翻译文档]\ncatagarys: react router 4.0.0 api中文文档\n---\n\n\n[原文链接](https://react-router.now.sh/BrowserRouter)\n\n<font size='5em'>&lt;BrowserRouter&gt;</font>\n\n保持你的界面与浏览器历史记录保持同步。\n```html5\n<BrowserRouter>\n  <App/>\n</BrowserRouter>\n```\n<!--more-->\n\n<font color='#FF0000'>basename</font>\n\n所有路由的根URL，如果你的应用处于服务端的子目录, 你可以设置这个值为该子目录。\n\n```html5\n<BrowserRouter basename=\"/calendar\" />\n\n// 假设Link标签如下所示：\n<Link to=\"/today\"/>\n// 那么超链接指向 \"/calendar/today\"\n</BrowserRouter>\n```\n<font size='5em'>&lt;/BrowserRouter&gt;</font>\n","slug":"react-router-4-0-0-api","published":1,"updated":"2017-05-25T03:41:18.236Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o4o0013iwl7ttwqhjnp","content":"<p><a href=\"https://react-router.now.sh/BrowserRouter\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n<font size=\"5em\">&lt;BrowserRouter&gt;</font>\n\n<p>保持你的界面与浏览器历史记录保持同步。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;BrowserRouter&gt;</div><div class=\"line\">  &lt;App/&gt;</div><div class=\"line\">&lt;/BrowserRouter&gt;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<font color=\"#FF0000\">basename</font>\n\n<p>所有路由的根URL，如果你的应用处于服务端的子目录, 你可以设置这个值为该子目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;BrowserRouter basename=&quot;/calendar&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">// 假设Link标签如下所示：</div><div class=\"line\">&lt;Link to=&quot;/today&quot;/&gt;</div><div class=\"line\">// 那么超链接指向 &quot;/calendar/today&quot;</div><div class=\"line\">&lt;/BrowserRouter&gt;</div></pre></td></tr></table></figure>\n<font size=\"5em\">&lt;/BrowserRouter&gt;</font>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://react-router.now.sh/BrowserRouter\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n<font size=\"5em\">&lt;BrowserRouter&gt;</font>\n\n<p>保持你的界面与浏览器历史记录保持同步。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;BrowserRouter&gt;</div><div class=\"line\">  &lt;App/&gt;</div><div class=\"line\">&lt;/BrowserRouter&gt;</div></pre></td></tr></table></figure></p>","more":"<font color=\"#FF0000\">basename</font>\n\n<p>所有路由的根URL，如果你的应用处于服务端的子目录, 你可以设置这个值为该子目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;BrowserRouter basename=&quot;/calendar&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">// 假设Link标签如下所示：</div><div class=\"line\">&lt;Link to=&quot;/today&quot;/&gt;</div><div class=\"line\">// 那么超链接指向 &quot;/calendar/today&quot;</div><div class=\"line\">&lt;/BrowserRouter&gt;</div></pre></td></tr></table></figure>\n<font size=\"5em\">&lt;/BrowserRouter&gt;</font>"},{"title":"NavigationPrompt-react router 4.0.0 api中文文档","date":"2016-12-02T11:16:00.000Z","_content":"<font size=\"6em\">&lt;NavigationPrompt&gt;</font>\n\n当你的应用进入一个状态，但是需要防止用户从当前状态离开时（比如填了一半的表单），渲染出一个导航确认（NavigationPrompt）。\n```\n{formIsHalfFilledOut && (\n  <NavigationPrompt message=\"Are you sure you want to leave?\"/>\n)}\n```\n### <font color=\"red\">message: string</font>\n\n<!-- more -->\n\n当用户试图从当前状态离开时显示的信息。\n```\n<NavigationPrompt message=\"Are you sure you want to leave?\"/>\n```\n### <font color=\"red\">message: func</font>\n\n这个函数返回一个提示用户跳转的信息，如果返回true，则允许跳转，函数的参数是用户将要跳转的下一个链接，\n```\n<NavigationPrompt message={(location) => (\n  `Are you sure you want to go to ${location.pathname}?`\n)}/>\n```\n### <font color=\"red\">when: bool</font>\nwhen是一个逻辑变量，为true时，将显示message内容的弹窗，为false时，直接跳转。\n\n<NavigationPrompt when={formIsHalfFilledOut} message=\"Are you sure?\"/>\n<font size=\"6em\">&lt;/NavigationPrompt&gt;</font>\n\n","source":"_posts/react-router-4-0-0-api-NavigationPrompt.md","raw":"---\ntitle: NavigationPrompt-react router 4.0.0 api中文文档\ndate: 2016-12-02 19:16:00\ntags: [react, react-router, 翻译文档]\ncategories: react router 4.0.0 api中文文档\n---\n<font size=\"6em\">&lt;NavigationPrompt&gt;</font>\n\n当你的应用进入一个状态，但是需要防止用户从当前状态离开时（比如填了一半的表单），渲染出一个导航确认（NavigationPrompt）。\n```\n{formIsHalfFilledOut && (\n  <NavigationPrompt message=\"Are you sure you want to leave?\"/>\n)}\n```\n### <font color=\"red\">message: string</font>\n\n<!-- more -->\n\n当用户试图从当前状态离开时显示的信息。\n```\n<NavigationPrompt message=\"Are you sure you want to leave?\"/>\n```\n### <font color=\"red\">message: func</font>\n\n这个函数返回一个提示用户跳转的信息，如果返回true，则允许跳转，函数的参数是用户将要跳转的下一个链接，\n```\n<NavigationPrompt message={(location) => (\n  `Are you sure you want to go to ${location.pathname}?`\n)}/>\n```\n### <font color=\"red\">when: bool</font>\nwhen是一个逻辑变量，为true时，将显示message内容的弹窗，为false时，直接跳转。\n\n<NavigationPrompt when={formIsHalfFilledOut} message=\"Are you sure?\"/>\n<font size=\"6em\">&lt;/NavigationPrompt&gt;</font>\n\n","slug":"react-router-4-0-0-api-NavigationPrompt","published":1,"updated":"2017-05-25T03:41:18.236Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o4q0017iwl7vbwxdhdq","content":"<font size=\"6em\">&lt;NavigationPrompt&gt;</font>\n\n<p>当你的应用进入一个状态，但是需要防止用户从当前状态离开时（比如填了一半的表单），渲染出一个导航确认（NavigationPrompt）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;formIsHalfFilledOut &amp;&amp; (</div><div class=\"line\">  &lt;NavigationPrompt message=&quot;Are you sure you want to leave?&quot;/&gt;</div><div class=\"line\">)&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"message-string\"><a href=\"#message-string\" class=\"headerlink\" title=\"message: string\"></a><font color=\"red\">message: string</font></h3><a id=\"more\"></a>\n<p>当用户试图从当前状态离开时显示的信息。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;NavigationPrompt message=&quot;Are you sure you want to leave?&quot;/&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"message-func\"><a href=\"#message-func\" class=\"headerlink\" title=\"message: func\"></a><font color=\"red\">message: func</font></h3><p>这个函数返回一个提示用户跳转的信息，如果返回true，则允许跳转，函数的参数是用户将要跳转的下一个链接，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;NavigationPrompt message=&#123;(location) =&gt; (</div><div class=\"line\">  `Are you sure you want to go to $&#123;location.pathname&#125;?`</div><div class=\"line\">)&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"when-bool\"><a href=\"#when-bool\" class=\"headerlink\" title=\"when: bool\"></a><font color=\"red\">when: bool</font></h3><p>when是一个逻辑变量，为true时，将显示message内容的弹窗，为false时，直接跳转。</p>\n<p><navigationprompt when=\"{formIsHalfFilledOut}\" message=\"Are you sure?\"></navigationprompt></p>\n<font size=\"6em\">&lt;/NavigationPrompt&gt;</font>\n\n","site":{"data":{}},"excerpt":"<font size=\"6em\">&lt;NavigationPrompt&gt;</font>\n\n<p>当你的应用进入一个状态，但是需要防止用户从当前状态离开时（比如填了一半的表单），渲染出一个导航确认（NavigationPrompt）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;formIsHalfFilledOut &amp;&amp; (</div><div class=\"line\">  &lt;NavigationPrompt message=&quot;Are you sure you want to leave?&quot;/&gt;</div><div class=\"line\">)&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"message-string\"><a href=\"#message-string\" class=\"headerlink\" title=\"message: string\"></a><font color=\"red\">message: string</font></h3>","more":"<p>当用户试图从当前状态离开时显示的信息。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;NavigationPrompt message=&quot;Are you sure you want to leave?&quot;/&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"message-func\"><a href=\"#message-func\" class=\"headerlink\" title=\"message: func\"></a><font color=\"red\">message: func</font></h3><p>这个函数返回一个提示用户跳转的信息，如果返回true，则允许跳转，函数的参数是用户将要跳转的下一个链接，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;NavigationPrompt message=&#123;(location) =&gt; (</div><div class=\"line\">  `Are you sure you want to go to $&#123;location.pathname&#125;?`</div><div class=\"line\">)&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"when-bool\"><a href=\"#when-bool\" class=\"headerlink\" title=\"when: bool\"></a><font color=\"red\">when: bool</font></h3><p>when是一个逻辑变量，为true时，将显示message内容的弹窗，为false时，直接跳转。</p>\n<p><navigationprompt when=\"{formIsHalfFilledOut}\" message=\"Are you sure?\"></navigationprompt></p>\n<font size=\"6em\">&lt;/NavigationPrompt&gt;</font>"},{"title":"ubuntu利用update-alternatives配置java","date":"2016-11-15T11:32:21.000Z","_content":"\n利用Android Studio开发，经常会碰到JDK版本的切换问题，安装好新版本的[jdk](http://www.oracle.com/technetwork/java/javase/downloads/index.html)之后，需要先配置到可选项。\n```bash\nyinlijun@sj:~$ sudo update-alternatives --install /usr/bin/java java /opt/jdk1.8.0_101/bin/java 100\nupdate-alternatives: 警告: /etc/alternatives/java has been changed (manually or by a script); switching to manual updates only\nyinlijun@sj:~$ sudo update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_101/bin/javac 100\n```\n\n<!--more-->\n\n然后，选择默认的JDK版本：\n```bash\nyinlijun@sj:~$ sudo update-alternatives --config java\n有 3 个候选项可用于替换 java (提供 /usr/bin/java)。\n\n  选择       路径                                          优先级  状态\n------------------------------------------------------------\n  0            /opt/jdk1.6.0_37/bin/java                        10000     自动模式\n  1            /opt/jdk1.6.0_37/bin/java                        10000     手动模式\n  2            /opt/jdk1.8.0_101/bin/java                       100       手动模式\n  3            /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java   1051      手动模式\n\n要维持当前值[*]请按回车键，或者键入选择的编号：2\nupdate-alternatives: using /opt/jdk1.8.0_101/bin/java to provide /usr/bin/java (java) in 手动模式\nyinlijun@sj:~$ sudo update-alternatives --config javac\n有 3 个候选项可用于替换 javac (提供 /usr/bin/javac)。\n\n  选择       路径                                       优先级  状态\n------------------------------------------------------------\n  0            /opt/jdk1.6.0_37/bin/javac                    10000     自动模式\n  1            /opt/jdk1.6.0_37/bin/javac                    10000     手动模式\n  2            /opt/jdk1.8.0_101/bin/javac                   100       手动模式\n* 3            /usr/lib/jvm/java-7-openjdk-amd64/bin/javac   1051      手动模式\n\n要维持当前值[*]请按回车键，或者键入选择的编号：2\n```\n","source":"_posts/ubuntu利用update-alternatives配置java.md","raw":"---\ntitle: ubuntu利用update-alternatives配置java\ndate: 2016-11-15 19:32:21\ntags: [ubuntu, update-alternatives]\n---\n\n利用Android Studio开发，经常会碰到JDK版本的切换问题，安装好新版本的[jdk](http://www.oracle.com/technetwork/java/javase/downloads/index.html)之后，需要先配置到可选项。\n```bash\nyinlijun@sj:~$ sudo update-alternatives --install /usr/bin/java java /opt/jdk1.8.0_101/bin/java 100\nupdate-alternatives: 警告: /etc/alternatives/java has been changed (manually or by a script); switching to manual updates only\nyinlijun@sj:~$ sudo update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_101/bin/javac 100\n```\n\n<!--more-->\n\n然后，选择默认的JDK版本：\n```bash\nyinlijun@sj:~$ sudo update-alternatives --config java\n有 3 个候选项可用于替换 java (提供 /usr/bin/java)。\n\n  选择       路径                                          优先级  状态\n------------------------------------------------------------\n  0            /opt/jdk1.6.0_37/bin/java                        10000     自动模式\n  1            /opt/jdk1.6.0_37/bin/java                        10000     手动模式\n  2            /opt/jdk1.8.0_101/bin/java                       100       手动模式\n  3            /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java   1051      手动模式\n\n要维持当前值[*]请按回车键，或者键入选择的编号：2\nupdate-alternatives: using /opt/jdk1.8.0_101/bin/java to provide /usr/bin/java (java) in 手动模式\nyinlijun@sj:~$ sudo update-alternatives --config javac\n有 3 个候选项可用于替换 javac (提供 /usr/bin/javac)。\n\n  选择       路径                                       优先级  状态\n------------------------------------------------------------\n  0            /opt/jdk1.6.0_37/bin/javac                    10000     自动模式\n  1            /opt/jdk1.6.0_37/bin/javac                    10000     手动模式\n  2            /opt/jdk1.8.0_101/bin/javac                   100       手动模式\n* 3            /usr/lib/jvm/java-7-openjdk-amd64/bin/javac   1051      手动模式\n\n要维持当前值[*]请按回车键，或者键入选择的编号：2\n```\n","slug":"ubuntu利用update-alternatives配置java","published":1,"updated":"2017-05-25T03:41:18.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o4t001aiwl7e8pebxr8","content":"<p>利用Android Studio开发，经常会碰到JDK版本的切换问题，安装好新版本的<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"external\">jdk</a>之后，需要先配置到可选项。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@sj:~$ sudo update-alternatives --install /usr/bin/java java /opt/jdk1.8.0_101/bin/java 100</div><div class=\"line\">update-alternatives: 警告: /etc/alternatives/java has been changed (manually or by a script); switching to manual updates only</div><div class=\"line\">yinlijun@sj:~$ sudo update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_101/bin/javac 100</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>然后，选择默认的JDK版本：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@sj:~$ sudo update-alternatives --config java</div><div class=\"line\">有 3 个候选项可用于替换 java (提供 /usr/bin/java)。</div><div class=\"line\"></div><div class=\"line\">  选择       路径                                          优先级  状态</div><div class=\"line\">------------------------------------------------------------</div><div class=\"line\">  0            /opt/jdk1.6.0_37/bin/java                        10000     自动模式</div><div class=\"line\">  1            /opt/jdk1.6.0_37/bin/java                        10000     手动模式</div><div class=\"line\">  2            /opt/jdk1.8.0_101/bin/java                       100       手动模式</div><div class=\"line\">  3            /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java   1051      手动模式</div><div class=\"line\"></div><div class=\"line\">要维持当前值[*]请按回车键，或者键入选择的编号：2</div><div class=\"line\">update-alternatives: using /opt/jdk1.8.0_101/bin/java to provide /usr/bin/java (java) <span class=\"keyword\">in</span> 手动模式</div><div class=\"line\">yinlijun@sj:~$ sudo update-alternatives --config javac</div><div class=\"line\">有 3 个候选项可用于替换 javac (提供 /usr/bin/javac)。</div><div class=\"line\"></div><div class=\"line\">  选择       路径                                       优先级  状态</div><div class=\"line\">------------------------------------------------------------</div><div class=\"line\">  0            /opt/jdk1.6.0_37/bin/javac                    10000     自动模式</div><div class=\"line\">  1            /opt/jdk1.6.0_37/bin/javac                    10000     手动模式</div><div class=\"line\">  2            /opt/jdk1.8.0_101/bin/javac                   100       手动模式</div><div class=\"line\">* 3            /usr/lib/jvm/java-7-openjdk-amd64/bin/javac   1051      手动模式</div><div class=\"line\"></div><div class=\"line\">要维持当前值[*]请按回车键，或者键入选择的编号：2</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>利用Android Studio开发，经常会碰到JDK版本的切换问题，安装好新版本的<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"external\">jdk</a>之后，需要先配置到可选项。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@sj:~$ sudo update-alternatives --install /usr/bin/java java /opt/jdk1.8.0_101/bin/java 100</div><div class=\"line\">update-alternatives: 警告: /etc/alternatives/java has been changed (manually or by a script); switching to manual updates only</div><div class=\"line\">yinlijun@sj:~$ sudo update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_101/bin/javac 100</div></pre></td></tr></table></figure></p>","more":"<p>然后，选择默认的JDK版本：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">yinlijun@sj:~$ sudo update-alternatives --config java</div><div class=\"line\">有 3 个候选项可用于替换 java (提供 /usr/bin/java)。</div><div class=\"line\"></div><div class=\"line\">  选择       路径                                          优先级  状态</div><div class=\"line\">------------------------------------------------------------</div><div class=\"line\">  0            /opt/jdk1.6.0_37/bin/java                        10000     自动模式</div><div class=\"line\">  1            /opt/jdk1.6.0_37/bin/java                        10000     手动模式</div><div class=\"line\">  2            /opt/jdk1.8.0_101/bin/java                       100       手动模式</div><div class=\"line\">  3            /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java   1051      手动模式</div><div class=\"line\"></div><div class=\"line\">要维持当前值[*]请按回车键，或者键入选择的编号：2</div><div class=\"line\">update-alternatives: using /opt/jdk1.8.0_101/bin/java to provide /usr/bin/java (java) <span class=\"keyword\">in</span> 手动模式</div><div class=\"line\">yinlijun@sj:~$ sudo update-alternatives --config javac</div><div class=\"line\">有 3 个候选项可用于替换 javac (提供 /usr/bin/javac)。</div><div class=\"line\"></div><div class=\"line\">  选择       路径                                       优先级  状态</div><div class=\"line\">------------------------------------------------------------</div><div class=\"line\">  0            /opt/jdk1.6.0_37/bin/javac                    10000     自动模式</div><div class=\"line\">  1            /opt/jdk1.6.0_37/bin/javac                    10000     手动模式</div><div class=\"line\">  2            /opt/jdk1.8.0_101/bin/javac                   100       手动模式</div><div class=\"line\">* 3            /usr/lib/jvm/java-7-openjdk-amd64/bin/javac   1051      手动模式</div><div class=\"line\"></div><div class=\"line\">要维持当前值[*]请按回车键，或者键入选择的编号：2</div></pre></td></tr></table></figure></p>"},{"title":"ubuntu编译android 6.0源代码环境搭建","date":"2016-11-16T01:04:37.000Z","_content":"\n\n## 安装jdk\n```bash\nsudo apt-get install openjdk-7-jdk openjdk-7-jre \n```\n如果之前系统是其他版本的JDK，需要把环境变量切换过来。\n\n<!--more-->\n\njdk版本错误会导致编译错误，如\n```\nprebuilts/sdk/api/23.txt:41822: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)\nprebuilts/sdk/api/23.txt:41823: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(MarginLayoutParams)\nprebuilts/sdk/api/23.txt:41824: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)\nprebuilts/sdk/api/23.txt:42895: error 9: Removed public constructor java.io.ObjectInputStream.GetField.ObjectInputStream.GetField()\nprebuilts/sdk/api/23.txt:42955: error 9: Removed public constructor java.io.ObjectOutputStream.PutField.ObjectOutputStream.PutField()\nprebuilts/sdk/api/23.txt:43623: error 9: Removed public constructor java.lang.Character.Subset.Character.Subset(String)\nprebuilts/sdk/api/23.txt:46730: error 9: Removed public constructor java.nio.channels.Pipe.SinkChannel.Pipe.SinkChannel(SelectorProvider)\nprebuilts/sdk/api/23.txt:46735: error 9: Removed public constructor java.nio.channels.Pipe.SourceChannel.Pipe.SourceChannel(SelectorProvider)\nprebuilts/sdk/api/23.txt:47370: error 9: Removed public constructor java.security.KeyStore.Builder.KeyStore.Builder()\nprebuilts/sdk/api/23.txt:47379: error 9: Removed public constructor java.security.KeyStore.CallbackHandlerProtection.KeyStore.CallbackHandlerProtection(CallbackHandler)\nprebuilts/sdk/api/23.txt:47391: error 9: Removed public constructor java.security.KeyStore.PasswordProtection.KeyStore.PasswordProtection(char)\n```\n\n## 安装其他工具包\n```bash\nsudo apt-get install git gitg gnupg flex bison gperf build-essential  zip curl libc6-dev  libncurses5-dev:i386 x11proto-core-dev  libx11-dev:i386 libreadline6-dev:i386   libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown\tlibxml2-utils xsltproc zlib1g-dev:i386 libarchive-zip-perl \n```\n\n","source":"_posts/ubuntu编译android源代码环境搭建.md","raw":"---\ntitle: ubuntu编译android 6.0源代码环境搭建\ntags:\n  - ubuntu\n  - android\n  - 环境搭建\ndate: 2016-11-16 09:04:37\n---\n\n\n## 安装jdk\n```bash\nsudo apt-get install openjdk-7-jdk openjdk-7-jre \n```\n如果之前系统是其他版本的JDK，需要把环境变量切换过来。\n\n<!--more-->\n\njdk版本错误会导致编译错误，如\n```\nprebuilts/sdk/api/23.txt:41822: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)\nprebuilts/sdk/api/23.txt:41823: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(MarginLayoutParams)\nprebuilts/sdk/api/23.txt:41824: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)\nprebuilts/sdk/api/23.txt:42895: error 9: Removed public constructor java.io.ObjectInputStream.GetField.ObjectInputStream.GetField()\nprebuilts/sdk/api/23.txt:42955: error 9: Removed public constructor java.io.ObjectOutputStream.PutField.ObjectOutputStream.PutField()\nprebuilts/sdk/api/23.txt:43623: error 9: Removed public constructor java.lang.Character.Subset.Character.Subset(String)\nprebuilts/sdk/api/23.txt:46730: error 9: Removed public constructor java.nio.channels.Pipe.SinkChannel.Pipe.SinkChannel(SelectorProvider)\nprebuilts/sdk/api/23.txt:46735: error 9: Removed public constructor java.nio.channels.Pipe.SourceChannel.Pipe.SourceChannel(SelectorProvider)\nprebuilts/sdk/api/23.txt:47370: error 9: Removed public constructor java.security.KeyStore.Builder.KeyStore.Builder()\nprebuilts/sdk/api/23.txt:47379: error 9: Removed public constructor java.security.KeyStore.CallbackHandlerProtection.KeyStore.CallbackHandlerProtection(CallbackHandler)\nprebuilts/sdk/api/23.txt:47391: error 9: Removed public constructor java.security.KeyStore.PasswordProtection.KeyStore.PasswordProtection(char)\n```\n\n## 安装其他工具包\n```bash\nsudo apt-get install git gitg gnupg flex bison gperf build-essential  zip curl libc6-dev  libncurses5-dev:i386 x11proto-core-dev  libx11-dev:i386 libreadline6-dev:i386   libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown\tlibxml2-utils xsltproc zlib1g-dev:i386 libarchive-zip-perl \n```\n\n","slug":"ubuntu编译android源代码环境搭建","published":1,"updated":"2017-05-25T03:41:18.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o4x001eiwl7drr6dofr","content":"<h2 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install openjdk-7-jdk openjdk-7-jre</div></pre></td></tr></table></figure>\n<p>如果之前系统是其他版本的JDK，需要把环境变量切换过来。</p>\n<a id=\"more\"></a>\n<p>jdk版本错误会导致编译错误，如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">prebuilts/sdk/api/23.txt:41822: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)</div><div class=\"line\">prebuilts/sdk/api/23.txt:41823: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(MarginLayoutParams)</div><div class=\"line\">prebuilts/sdk/api/23.txt:41824: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)</div><div class=\"line\">prebuilts/sdk/api/23.txt:42895: error 9: Removed public constructor java.io.ObjectInputStream.GetField.ObjectInputStream.GetField()</div><div class=\"line\">prebuilts/sdk/api/23.txt:42955: error 9: Removed public constructor java.io.ObjectOutputStream.PutField.ObjectOutputStream.PutField()</div><div class=\"line\">prebuilts/sdk/api/23.txt:43623: error 9: Removed public constructor java.lang.Character.Subset.Character.Subset(String)</div><div class=\"line\">prebuilts/sdk/api/23.txt:46730: error 9: Removed public constructor java.nio.channels.Pipe.SinkChannel.Pipe.SinkChannel(SelectorProvider)</div><div class=\"line\">prebuilts/sdk/api/23.txt:46735: error 9: Removed public constructor java.nio.channels.Pipe.SourceChannel.Pipe.SourceChannel(SelectorProvider)</div><div class=\"line\">prebuilts/sdk/api/23.txt:47370: error 9: Removed public constructor java.security.KeyStore.Builder.KeyStore.Builder()</div><div class=\"line\">prebuilts/sdk/api/23.txt:47379: error 9: Removed public constructor java.security.KeyStore.CallbackHandlerProtection.KeyStore.CallbackHandlerProtection(CallbackHandler)</div><div class=\"line\">prebuilts/sdk/api/23.txt:47391: error 9: Removed public constructor java.security.KeyStore.PasswordProtection.KeyStore.PasswordProtection(char)</div></pre></td></tr></table></figure></p>\n<h2 id=\"安装其他工具包\"><a href=\"#安装其他工具包\" class=\"headerlink\" title=\"安装其他工具包\"></a>安装其他工具包</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install git gitg gnupg flex bison gperf build-essential  zip curl libc6-dev  libncurses5-dev:i386 x11proto-core-dev  libx11-dev:i386 libreadline6-dev:i386   libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown\tlibxml2-utils xsltproc zlib1g-dev:i386 libarchive-zip-perl</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install openjdk-7-jdk openjdk-7-jre</div></pre></td></tr></table></figure>\n<p>如果之前系统是其他版本的JDK，需要把环境变量切换过来。</p>","more":"<p>jdk版本错误会导致编译错误，如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">prebuilts/sdk/api/23.txt:41822: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)</div><div class=\"line\">prebuilts/sdk/api/23.txt:41823: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(MarginLayoutParams)</div><div class=\"line\">prebuilts/sdk/api/23.txt:41824: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)</div><div class=\"line\">prebuilts/sdk/api/23.txt:42895: error 9: Removed public constructor java.io.ObjectInputStream.GetField.ObjectInputStream.GetField()</div><div class=\"line\">prebuilts/sdk/api/23.txt:42955: error 9: Removed public constructor java.io.ObjectOutputStream.PutField.ObjectOutputStream.PutField()</div><div class=\"line\">prebuilts/sdk/api/23.txt:43623: error 9: Removed public constructor java.lang.Character.Subset.Character.Subset(String)</div><div class=\"line\">prebuilts/sdk/api/23.txt:46730: error 9: Removed public constructor java.nio.channels.Pipe.SinkChannel.Pipe.SinkChannel(SelectorProvider)</div><div class=\"line\">prebuilts/sdk/api/23.txt:46735: error 9: Removed public constructor java.nio.channels.Pipe.SourceChannel.Pipe.SourceChannel(SelectorProvider)</div><div class=\"line\">prebuilts/sdk/api/23.txt:47370: error 9: Removed public constructor java.security.KeyStore.Builder.KeyStore.Builder()</div><div class=\"line\">prebuilts/sdk/api/23.txt:47379: error 9: Removed public constructor java.security.KeyStore.CallbackHandlerProtection.KeyStore.CallbackHandlerProtection(CallbackHandler)</div><div class=\"line\">prebuilts/sdk/api/23.txt:47391: error 9: Removed public constructor java.security.KeyStore.PasswordProtection.KeyStore.PasswordProtection(char)</div></pre></td></tr></table></figure></p>\n<h2 id=\"安装其他工具包\"><a href=\"#安装其他工具包\" class=\"headerlink\" title=\"安装其他工具包\"></a>安装其他工具包</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install git gitg gnupg flex bison gperf build-essential  zip curl libc6-dev  libncurses5-dev:i386 x11proto-core-dev  libx11-dev:i386 libreadline6-dev:i386   libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown\tlibxml2-utils xsltproc zlib1g-dev:i386 libarchive-zip-perl</div></pre></td></tr></table></figure>"},{"title":"windows下文件路径太深，无法删除解决办法","date":"2016-11-08T10:02:04.000Z","_content":"\nwindows下npm开发时，有时候node_modules/下的目录嵌套太深，导致无法删除项目。\n\nnpm社区贡献了一个工具[windows-node-deps-deleter](https://www.npmjs.com/package/windows-node-deps-deleter)可供删除这样的目录。\n\n<!--more-->\n\n```\nE:\\vscode>npm install -g windows-node-deps-deleter\nC:\\Users\\xx\\AppData\\Roaming\\npm\\wnddel -> C:\\Users\\xx\\AppData\\Roaming\\npm\\no\nde_modules\\windows-node-deps-deleter\\wnddel.js\nwindows-node-deps-deleter@0.1.1 C:\\Users\\xx\\AppData\\Roaming\\npm\\node_modules\\w\nindows-node-deps-deleter\n└── fs-extra@0.13.0 (ncp@1.0.1, jsonfile@2.4.0, rimraf@2.5.4)\n\nE:\\vscode>wnddel react-todo-list\nDeleting \"react-todo-list\" ...\n\"react-todo-list\" deleted.\n```\n\n参考：[windows-node-deps-delete](https://www.npmjs.com/package/windows-node-deps-deleter#readme)\n","source":"_posts/windows下文件路径太深，无法删除解决办法.md","raw":"---\ntitle: windows下文件路径太深，无法删除解决办法\ndate: 2016-11-8 18:02:04\ntags: [windows, npm]\n---\n\nwindows下npm开发时，有时候node_modules/下的目录嵌套太深，导致无法删除项目。\n\nnpm社区贡献了一个工具[windows-node-deps-deleter](https://www.npmjs.com/package/windows-node-deps-deleter)可供删除这样的目录。\n\n<!--more-->\n\n```\nE:\\vscode>npm install -g windows-node-deps-deleter\nC:\\Users\\xx\\AppData\\Roaming\\npm\\wnddel -> C:\\Users\\xx\\AppData\\Roaming\\npm\\no\nde_modules\\windows-node-deps-deleter\\wnddel.js\nwindows-node-deps-deleter@0.1.1 C:\\Users\\xx\\AppData\\Roaming\\npm\\node_modules\\w\nindows-node-deps-deleter\n└── fs-extra@0.13.0 (ncp@1.0.1, jsonfile@2.4.0, rimraf@2.5.4)\n\nE:\\vscode>wnddel react-todo-list\nDeleting \"react-todo-list\" ...\n\"react-todo-list\" deleted.\n```\n\n参考：[windows-node-deps-delete](https://www.npmjs.com/package/windows-node-deps-deleter#readme)\n","slug":"windows下文件路径太深，无法删除解决办法","published":1,"updated":"2017-05-25T03:41:18.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o4y001hiwl7yoyeddff","content":"<p>windows下npm开发时，有时候node_modules/下的目录嵌套太深，导致无法删除项目。</p>\n<p>npm社区贡献了一个工具<a href=\"https://www.npmjs.com/package/windows-node-deps-deleter\" target=\"_blank\" rel=\"external\">windows-node-deps-deleter</a>可供删除这样的目录。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">E:\\vscode&gt;npm install -g windows-node-deps-deleter</div><div class=\"line\">C:\\Users\\xx\\AppData\\Roaming\\npm\\wnddel -&gt; C:\\Users\\xx\\AppData\\Roaming\\npm\\no</div><div class=\"line\">de_modules\\windows-node-deps-deleter\\wnddel.js</div><div class=\"line\">windows-node-deps-deleter@0.1.1 C:\\Users\\xx\\AppData\\Roaming\\npm\\node_modules\\w</div><div class=\"line\">indows-node-deps-deleter</div><div class=\"line\">└── fs-extra@0.13.0 (ncp@1.0.1, jsonfile@2.4.0, rimraf@2.5.4)</div><div class=\"line\"></div><div class=\"line\">E:\\vscode&gt;wnddel react-todo-list</div><div class=\"line\">Deleting &quot;react-todo-list&quot; ...</div><div class=\"line\">&quot;react-todo-list&quot; deleted.</div></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://www.npmjs.com/package/windows-node-deps-deleter#readme\" target=\"_blank\" rel=\"external\">windows-node-deps-delete</a></p>\n","site":{"data":{}},"excerpt":"<p>windows下npm开发时，有时候node_modules/下的目录嵌套太深，导致无法删除项目。</p>\n<p>npm社区贡献了一个工具<a href=\"https://www.npmjs.com/package/windows-node-deps-deleter\" target=\"_blank\" rel=\"external\">windows-node-deps-deleter</a>可供删除这样的目录。</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">E:\\vscode&gt;npm install -g windows-node-deps-deleter</div><div class=\"line\">C:\\Users\\xx\\AppData\\Roaming\\npm\\wnddel -&gt; C:\\Users\\xx\\AppData\\Roaming\\npm\\no</div><div class=\"line\">de_modules\\windows-node-deps-deleter\\wnddel.js</div><div class=\"line\">windows-node-deps-deleter@0.1.1 C:\\Users\\xx\\AppData\\Roaming\\npm\\node_modules\\w</div><div class=\"line\">indows-node-deps-deleter</div><div class=\"line\">└── fs-extra@0.13.0 (ncp@1.0.1, jsonfile@2.4.0, rimraf@2.5.4)</div><div class=\"line\"></div><div class=\"line\">E:\\vscode&gt;wnddel react-todo-list</div><div class=\"line\">Deleting &quot;react-todo-list&quot; ...</div><div class=\"line\">&quot;react-todo-list&quot; deleted.</div></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://www.npmjs.com/package/windows-node-deps-deleter#readme\" target=\"_blank\" rel=\"external\">windows-node-deps-delete</a></p>"},{"title":"windows配置mongdb记录","date":"2016-11-09T09:55:51.000Z","_content":"\n刚给windows电脑配置了mongdb记录一下。\n\n- 前往[官网](https://www.mongodb.com/download-center)下载合适的安装包，我选择的是msi安装包，也可以选择下载zip包。\n\n- 运行msi安装包（默认安装在C盘，没找到在哪里可以修改盘符）。\n\n- 在D:\\下创建好相关文件夹\n![这里写图片描述](http://img.blog.csdn.net/20161109194149759)\n\n<!--more-->\n\n- 打开命令提示符，进入到mongodb安装文件夹下的bin目录\n![这里写图片描述](http://img.blog.csdn.net/20161109194331090)\n\n- 输入如下命令，注册MongoDB服务 \n\n```bash\n mongod.exe --logpath D:\\MongoDB\\data\\log\\MongoDB.log --logappend --dbpath D:\\MongoDB\\data\\db --directoryperdb --storageEngin=mmappv1 --serviceName MongoDB --install\n```\n\n![这里写图片描述](http://img.blog.csdn.net/20161109194436279)\n\n- 启动MongoDB服务\n\n```bash\n net start MongoDB\n```\n\n![这里写图片描述](http://img.blog.csdn.net/20161109194520874)\n","source":"_posts/windows配置mongdb记录.md","raw":"---\ntitle: windows配置mongdb记录\ndate: 2016-11-9 17:55:51\ntags: [windows, mongodb]\n---\n\n刚给windows电脑配置了mongdb记录一下。\n\n- 前往[官网](https://www.mongodb.com/download-center)下载合适的安装包，我选择的是msi安装包，也可以选择下载zip包。\n\n- 运行msi安装包（默认安装在C盘，没找到在哪里可以修改盘符）。\n\n- 在D:\\下创建好相关文件夹\n![这里写图片描述](http://img.blog.csdn.net/20161109194149759)\n\n<!--more-->\n\n- 打开命令提示符，进入到mongodb安装文件夹下的bin目录\n![这里写图片描述](http://img.blog.csdn.net/20161109194331090)\n\n- 输入如下命令，注册MongoDB服务 \n\n```bash\n mongod.exe --logpath D:\\MongoDB\\data\\log\\MongoDB.log --logappend --dbpath D:\\MongoDB\\data\\db --directoryperdb --storageEngin=mmappv1 --serviceName MongoDB --install\n```\n\n![这里写图片描述](http://img.blog.csdn.net/20161109194436279)\n\n- 启动MongoDB服务\n\n```bash\n net start MongoDB\n```\n\n![这里写图片描述](http://img.blog.csdn.net/20161109194520874)\n","slug":"windows配置mongdb记录","published":1,"updated":"2017-05-25T03:41:18.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o50001jiwl7hs4fxf2g","content":"<p>刚给windows电脑配置了mongdb记录一下。</p>\n<ul>\n<li><p>前往<a href=\"https://www.mongodb.com/download-center\" target=\"_blank\" rel=\"external\">官网</a>下载合适的安装包，我选择的是msi安装包，也可以选择下载zip包。</p>\n</li>\n<li><p>运行msi安装包（默认安装在C盘，没找到在哪里可以修改盘符）。</p>\n</li>\n<li><p>在D:\\下创建好相关文件夹<br><img src=\"http://img.blog.csdn.net/20161109194149759\" alt=\"这里写图片描述\"></p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>打开命令提示符，进入到mongodb安装文件夹下的bin目录<br><img src=\"http://img.blog.csdn.net/20161109194331090\" alt=\"这里写图片描述\"></p>\n</li>\n<li><p>输入如下命令，注册MongoDB服务 </p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongod.exe --logpath D:\\MongoDB\\data\\<span class=\"built_in\">log</span>\\MongoDB.log --logappend --dbpath D:\\MongoDB\\data\\db --directoryperdb --storageEngin=mmappv1 --serviceName MongoDB --install</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161109194436279\" alt=\"这里写图片描述\"></p>\n<ul>\n<li>启动MongoDB服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">net start MongoDB</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161109194520874\" alt=\"这里写图片描述\"></p>\n","site":{"data":{}},"excerpt":"<p>刚给windows电脑配置了mongdb记录一下。</p>\n<ul>\n<li><p>前往<a href=\"https://www.mongodb.com/download-center\" target=\"_blank\" rel=\"external\">官网</a>下载合适的安装包，我选择的是msi安装包，也可以选择下载zip包。</p>\n</li>\n<li><p>运行msi安装包（默认安装在C盘，没找到在哪里可以修改盘符）。</p>\n</li>\n<li><p>在D:\\下创建好相关文件夹<br><img src=\"http://img.blog.csdn.net/20161109194149759\" alt=\"这里写图片描述\"></p>\n</li>\n</ul>","more":"<ul>\n<li><p>打开命令提示符，进入到mongodb安装文件夹下的bin目录<br><img src=\"http://img.blog.csdn.net/20161109194331090\" alt=\"这里写图片描述\"></p>\n</li>\n<li><p>输入如下命令，注册MongoDB服务 </p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongod.exe --logpath D:\\MongoDB\\data\\<span class=\"built_in\">log</span>\\MongoDB.log --logappend --dbpath D:\\MongoDB\\data\\db --directoryperdb --storageEngin=mmappv1 --serviceName MongoDB --install</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161109194436279\" alt=\"这里写图片描述\"></p>\n<ul>\n<li>启动MongoDB服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">net start MongoDB</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20161109194520874\" alt=\"这里写图片描述\"></p>"},{"title":"my-son-2016.11.21","_content":"Idina Menze和Caleb Hyles激情对唱Let It Go：\n<iframe height=498 width=510 src=\"http://player.youku.com/embed/XNjcyMDU4Njg0\" frameborder=0 allowfullscreen></iframe>\n","source":"_drafts/my-son-2016-11-21.md","raw":"---\ntitle: my-son-2016.11.21\ntags: son\n---\nIdina Menze和Caleb Hyles激情对唱Let It Go：\n<iframe height=498 width=510 src=\"http://player.youku.com/embed/XNjcyMDU4Njg0\" frameborder=0 allowfullscreen></iframe>\n","slug":"my-son-2016-11-21","published":0,"date":"2017-05-25T03:41:18.228Z","updated":"2017-05-25T03:41:18.228Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o52001liwl7vyjpk89l","content":"<p>Idina Menze和Caleb Hyles激情对唱Let It Go：</p>\n<iframe height=\"498\" width=\"510\" src=\"http://player.youku.com/embed/XNjcyMDU4Njg0\" frameborder=\"0\" allowfullscreen></iframe>\n","site":{"data":{}},"excerpt":"","more":"<p>Idina Menze和Caleb Hyles激情对唱Let It Go：</p>\n<iframe height=\"498\" width=\"510\" src=\"http://player.youku.com/embed/XNjcyMDU4Njg0\" frameborder=\"0\" allowfullscreen></iframe>\n"},{"_content":"二维码又称QR Code，QR全称Quick Response，是一个近几年来移动设备上超流行的一种编码方式，它比传统的Bar Code条形码能存更多的信息，也能表示更多的数据类型：比如：字符，数字，日文，中文等等。这两天学习了一下二维码图片生成的相关细节，觉得这个玩意就是一个密码算法，在此写一这篇文章 ，揭露一下。供好学的人一同学习之。\n\n\n# 基础知识\n\n## 二维码定位\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/QR-Code-Overview.jpeg)\n\n- Position Detection Pattern是定位图案，用于标记二维码的矩形大小。这三个定位图案有白边叫Separators for Postion Detection Patterns。之所以三个而不是四个意思就是三个就可以标识一个矩形了。\n\n- Timing Patterns也是用于定位的。原因是二维码有40种尺寸，尺寸过大了后需要有根标准线，不然扫描的时候可能会扫歪了。\n\n- Alignment Patterns 只有Version 2以上（包括Version2）的二维码需要这个东东，同样是为了定位用的。\n\n## 功能性定位\n\n- Format Information 存在于所有的尺寸中，用于存放一些格式化数据的。\n- Version Information 在 >= Version 7以上，需要预留两块3 x 6的区域存放一些版本信息。\n\n## 数据码和纠错码\n\n- 除了上述的那些地方，剩下的地方存放 Data Code 数据码 和 Error Correction Code 纠错码。\n\n # 数据编码\n\n 我们先来说说数据编码。QR码支持如下的编码：\n\n**Numeric mode** 数字编码，从0到9。如果需要编码的数字的个数不是3的倍数，那么，最后剩下的1或2位数会被转成4或7bits，则其它的每3位数字会被编成 10，12，14bits，编成多长还要看二维码的尺寸（下面有一个表Table 3说明了这点）\n\n**Alphanumeric mode** 字符编码。包括 0-9，大写的A到Z（没有小写），以及符号$ % * + – . / : 包括空格。这些字符会映射成一个字符索引表。如下所示：（其中的SP是空格，Char是字符，Value是其索引值） 编码的过程是把字符两两分组，然后转成下表的45进制，然后转成11bits的二进制，如果最后有一个落单的，那就转成6bits的二进制。而编码模式和字符的个数需要根据不同的Version尺寸编成9, 11或13个二进制（如下表中Table 3）\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Alphanumeric-mode.png)\n\n**Byte mode**, 字节编码，可以是0-255的ISO-8859-1字符。有些二维码的扫描器可以自动检测是否是UTF-8的编码。\n\n**Kanji mode** 这是日文编码，也是双字节编码。同样，也可以用于中文编码。日文和汉字的编码会减去一个值。如：在0X8140 to 0X9FFC中的字符会减去8140，在0XE040到0XEBBF中的字符要减去0XC140，然后把结果前两个16进制位拿出来乘以0XC0，然后再加上后两个16进制位，最后转成13bit的编码。如下图示例:\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Kanji-mode.png)\n\n**Extended Channel Interpretation (ECI) mode** 主要用于特殊的字符集。并不是所有的扫描器都支持这种编码。\n\n**Structured Append mode** 用于混合编码，也就是说，这个二维码中包含了多种编码格式。\n\n**FNC1 mode** 这种编码方式主要是给一些特殊的工业或行业用的。比如GS1条形码之类的。\n\n简单起见，后面三种不会在本文 中讨论。\n\n下面两张表中，\n\n- Table 2 是各个编码格式的“编号”，这个东西要写在Format Information中。注：中文是1101\n- Table 3 表示了，不同版本（尺寸）的二维码，对于，数字，字符，字节和Kanji模式下，对于单个编码的2进制的位数。（在二维码的规格说明书中，有各种各样的编码规范表，后面还会提到）\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Mode-Indicator.png)\n\n下面我们看几个示例，\n\n## **示例一：数字编码**\n\n在Version 1的尺寸下，纠错级别为H的情况下，编码： 01234567\n\n1. 把上述数字分成三组: 012 345 67\n\n2. 把他们转成二进制:  012 转成 0000001100；  345 转成 0101011001；  67 转成 1000011。\n\n3. 把这三个二进制串起来: 0000001100 0101011001 1000011\n\n4. 把数字的个数转成二进制 (version 1-H是10 bits ): 8个数字的二进制是 0000001000\n\n5. 把数字编码的标志0001和第4步的编码加到前面:  0001 0000001000 0000001100 0101011001 1000011\n\n## **示例二：字符编码**\n\n在Version 1的尺寸下，纠错级别为H的情况下，编码: AC-42\n\n1. 从字符索引表中找到 AC-42 这五个字条的索引 (10,12,41,4,2)\n\n2. 两两分组: (10,12) (41,4) (2)\n\n3. 把每一组转成11bits的二进制:\n\n        (10,12) 10*45+12 等于 462 转成 00111001110\n        (41,4) 41*45+4 等于 1849 转成 11100111001\n        (2) 等于 2 转成 000010\n\n4. 把这些二进制连接起来：00111001110 11100111001 000010\n\n5. 把字符的个数转成二进制 (Version 1-H为9 bits ): 5个字符，5转成 000000101\n\n6. 在头上加上编码标识 0010 和第5步的个数编码:  0010 000000101 00111001110 11100111001 000010\n\n## **结束符和补齐符**\n假如我们有个HELLO WORLD的字符串要编码，根据上面的示例二，我们可以得到下面的编码，\n\n| 编码        | 字符数           | HELLO WORLD的编码  |\n| ------------- |:-------------:|:-----: |\n| 0010      | 000001011 | 01100001011 01111000110 10001011100 10110111000 10011010100 001101 |\n| | |\n\n我们还要加上结束符\n| 编码        | 字符数           | HELLO WORLD的编码  | 结束 |\n| ------------- |:-------------:|:-------------:| -----:|\n| 0010      | 000001011 | 01100001011 01111000110 10001011100 10110111000 10011010100 001101 | 0000 |\n| | |\n\n## **按8bits重排**\n如果所有的编码加起来不是8个倍数我们还要在后面加上足够的0，比如上面一共有78个bits，所以，我们还要加上2个0，然后按8个bits分好组：\n\n00100000   01011011   00001011   01111000   11010001   01110010   11011100   01001101   01000011   010000<font color=red>**00**</font>\n\n## **补齐码（Padding Bytes）**\n\n最后，如果如果还没有达到我们最大的bits数的限制，我们还要加一些补齐码（Padding Bytes），Padding Bytes就是重复下面的两个bytes：11101100 00010001 （这两个二进制转成十进制是236和17，我也不知道为什么，只知道Spec上是这么写的）关于每一个Version的每一种纠错级别的最大Bits限制，可以参看QR Code Spec的第28页到32页的Table-7一表。\n\n假设我们需要编码的是Version 1的Q纠错级，那么，其最大需要104个bits，而我们上面只有80个bits，所以，还需要补24个bits，也就是需要3个Padding Bytes，我们就添加三个，于是得到下面的编码：\n\n00100000 01011011 00001011 01111000 11010001 01110010 11011100 01001101 01000011 01000000 <font color=red>**11101100 00010001 11101100**</font>\n\n上面的编码就是数据码了，叫Data Codewords，每一个8bits叫一个codeword，我们还要对这些数据码加上纠错信息。\n\n# **纠错码**\n\n上面我们说到了一些纠错级别，Error Correction Code Level，二维码中有四种级别的纠错，这就是为什么二维码有残缺还能扫出来，也就是为什么有人在二维码的中心位置加入图标。\n\n| 错误修正容量 | |\n|----|:----:|\n| L水平 | 7%的字码可被修正 \n| M水平 | 15%的字码可被修正 \n| Q水平 | 25%的字码可被修正\n| H水平 | 30%的字码可被修正\n\n那么，QR是怎么对数据码加上纠错码的？首先，我们需要对数据码进行分组，也就是分成不同的Block，然后对各个Block进行纠错编码，对于如何分组，我们可以查看QR Code Spec的第33页到44页的Table-13到Table-22的定义表。注意最后两列：\n\n- **Number of Error Code Correction Blocks**：需要分多少个块。\n- **Error Correction Code Per Blocks**：每一个块中的code个数，所谓的code的个数，也就是有多少个8bits的字节。\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Error-Correction-Blocks.png)\n\n举个例子：上述的Version 5 + Q纠错级：需要4个Blocks（2个Blocks为一组，共两组），头一组的两个Blocks中各15个bits数据 + 各 9个bits的纠错码（注：表中的codewords就是一个8bits的byte）（再注：最后一例中的（c, k, r ）的公式为：c = k + 2 * r，因为后脚注解释了：纠错码的容量小于纠错码的一半）\n\n下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）\n\n下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）\n\n| 组 | 块 | 数据 | 对每个块的纠错码 |\n|----|:----|:----|:----|\n| 1 | 1 | 67 85 70 134 87 38 85 194 119 50 6 18 6 103 38 | 213 199 11 45 115 247 241 223 229 248 154 117 154 111 86 161 111 39 |\n|   | 2\t| 246 246 66 7 118 134 242 7 38 86 22 198 199 146 6 | 87 204 96 60 202 182 124 157 200 134 27 129 209 17 163 163 120 133 |\n| 2 | 1 | 182 230 247 119 50 7 118 134 87 38 82 6 134 151 50 7 | 148 116 177 212 76 133 75 242 238 76 195 230 189 10 108 240 192 141 |\n|   | 2 | 70 247 118 86 194 6 151 50 16 236 17 236 17 236 17 236 | 235 159 5 173 24 147 59 33 106 40 255 172 82 2 131 32 178 236 |\n\n注：二维码的纠错码主要是通过[Reed-Solomon error correction](http://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction)（里德-所罗门纠错算法）来实现的。对于这个算法，对于我来说是相当的复杂，里面有很多的数学计算，比如：多项式除法，把1-255的数映射成2的n次方（0<=n<=255）的伽罗瓦域Galois Field之类的神一样的东西，以及基于这些基础的纠错数学公式，因为我的数据基础差，对于我来说太过复杂，所以我一时半会儿还有点没搞明白，还在学习中，所以，我在这里就不展开说这些东西了。还请大家见谅了。（当然，如果有朋友很明白，也繁请教教我）\n\n# **最终编码**\n\n## 穿插放置\n\n如果你以为我们可以开始画图，你就错了。二维码的混乱技术还没有玩完，它还要把数据码和纠错码的各个codewords交替放在一起。如何交替呢，规则如下：\n\n对于数据码：把每个块的第一个codewords先拿出来按顺度排列好，然后再取第一块的第二个，如此类推。如：上述示例中的Data Codewords如下：\n\n||||||||||||||||||\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n|块 1|67|85|70|134|87|38|85|194|119|50|6|18|6|103|38||\n|块 2|246|246|66|7|118|134|242|7|38|86|22|198|199|146|6||\t\n|块 3|182|230|247|119|50|7|118|134|87|38|82|6|134|151|50|7|\n|块 4|70|247|118|86|194|6|151|50|16|236|17|236|17|236|17|236|\n\n我们先取第一列的：67， 246， 182， 70\n\n然后再取第二列的：67， 246， 182， 70， 85，246，230 ，247\n\n如此类推：67， 246， 182， 70， 85，246，230 ，247 ………  ……… ，38，6，50，17，7，236\n\n对于纠错码，也是一样：\n||||||||||||||||||\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n|块 1|\t213|\t199|\t11|\t45|\t115|\t247|\t241|\t223|\t229|\t248|\t154|\t117|\t154|\t111|\t86|\t161|\t111|\t39|\n|块 2|\t87|\t204|\t96|\t60|\t202|\t182|\t124|\t157|\t200|\t134|\t27|\t129|\t209|\t17|\t163|\t163|\t120|\t133|\n|块 3|\t148|\t116|\t177|\t212|\t76|\t133|\t75|\t242|\t238|\t76|\t195|\t230|\t189|\t10|\t108|\t240|\t192|\t141|\n|块 4|\t235|\t159|\t5|\t173|\t24|\t147|\t59|\t33|\t106|\t40|\t255|\t172|\t82|\t2|\t131|\t32|\t178|\t236|\n\n和数据码取的一样，得到：213，87，148，235，199，204，116，159，…… …… 39，133，141，236\n\n然后，再把这两组放在一起（纠错码放在数据码之后）得到：\n\n67, 246, 182, 70, 85, 246, 230, 247, 70, 66, 247, 118, 134, 7, 119, 86, 87, 118, 50, 194, 38, 134, 7, 6, 85, 242, 118, 151, 194, 7, 134, 50, 119, 38, 87, 16, 50, 86, 38, 236, 6, 22, 82, 17, 18, 198, 6, 236, 6, 199, 134, 17, 103, 146, 151, 236, 38, 6, 50, 17, 7, 236, 213, 87, 148, 235, 199, 204, 116, 159, 11, 96, 177, 5, 45, 60, 212, 173, 115, 202, 76, 24, 247, 182, 133, 147, 241, 124, 75, 59, 223, 157, 242, 33, 229, 200, 238, 106, 248, 134, 76, 40, 154, 27, 195, 255, 117, 129, 230, 172, 154, 209, 189, 82, 111, 17, 10, 2, 86, 163, 108, 131, 161, 163, 240, 32, 111, 120, 192, 178, 39, 133, 141, 236\n\n这就是我们的数据区。\n\n## **Remainder Bits**\n最后再加上Reminder Bits，对于某些Version的QR，上面的还不够长度，还要加上Remainder Bits，比如：上述的5Q版的二维码，还要加上7个bits，Remainder Bits加零就好了。关于哪些Version需要多少个Remainder bit，可以参看QR Code Spec的第15页的Table-1的定义表。\n\n# **画二维码图**\n## **Position Detection Pattern**\n首先，先把Position Detection图案画在三个角上。（无论Version如何，这个图案的尺寸就是这么大）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/finder.png)\n\n## **Alignment Pattern**\n然后，再把Alignment图案画上（无论Version如何，这个图案的尺寸就是这么大）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/alignment-pattern.png)\n\n\n关于Alignment的位置，可以查看QR Code Spec的第81页的Table-E.1的定义表（下表是不完全表格）\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Alignment-Position.png)\n\n下图是根据上述表格中的Version8的一个例子（6，24，42）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/alignment-example.png)\n\n## **Timing Pattern**\n接下来是Timing Pattern的线（这个不用多说了）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Timing-Pattern.png)\n\n## **Format Information**\n再接下来是Formation Information，下图中的蓝色部分。\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Format-Information.png)\n\nFormat Information是一个15个bits的信息，每一个bit的位置如下图所示：（注意图中的Dark Module，那是永远出现的）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Format-Info-bits-postion.png)\n\n这15个bits中包括：\n\n- 5个数据bits：其中，2个bits用于表示使用什么样的Error Correction Level， 3个bits表示使用什么样的Mask\n- 10个纠错bits。主要通过BCH Code来计算\n\n然后15个bits还要与101010000010010做XOR操作。这样就保证不会因为我们选用了00的纠错级别和000的Mask，从而造成全部为白色，这会增加我们的扫描器的图像识别的困难。\n\n下面是一个示例：\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Format-Information-Example.png)\n\n关于Error Correction Level如下表所示：\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Error-Correction-Indicator-Code.png)\n\n关于Mask图案如后面的Table 23所示。\n\n## **Version Information**\n再接下来是Version Information（版本7以后需要这个编码），下图中的蓝色部分。\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Version-Information.png)\n\nVersion Information一共是18个bits，其中包括6个bits的版本号以及12个bits的纠错码，下面是一个示例：\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Example.png)\n\n而其填充位置如下：\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Position.png)\n\n## **数据和数据纠错码**\n然后是填接我们的最终编码，最终编码的填充方式如下：从左下角开始沿着红线填我们的各个bits，1是黑色，0是白色。如果遇到了上面的非数据区，则绕开或跳过。\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Data-Placement.png)\n\n## **掩码图案**\n这样下来，我们的图就填好了，但是，也许那些点并不均衡，如果出现大面积的空白或黑块，会告诉我们扫描识别的困难。所以，我们还要做Masking操作（靠，还嫌不复杂）QR的Spec中说了，QR有8个Mask你可以使用，如下所示：其中，各个mask的公式在各个图下面。所谓mask，说白了，就是和上面生成的图做XOR操作。Mask只会和数据区进行XOR，不会影响功能区。（注：选择一个合适的Mask也是有算法的）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/masking-pattern.png)\n\n其Mask的标识码如下所示：（其中的i,j分别对应于上图的x,y）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Mask-Pattern-Code.png)\n\n下面是Mask后的一些样子，我们可以看到被某些Mask XOR了的数据变得比较零散了。\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Masking-Examples.png)\n\nMask过后的二维码就成最终的图了。\n\n好了，大家可以去尝试去写一下QR的编码程序，当然，你可以用网上找个Reed Soloman的纠错算法的库，或是看看别人的源代码是怎么实现这个繁锁的编码。\n\n\n\n\n\n\n\n\n","source":"_drafts/qrcode.md","raw":"二维码又称QR Code，QR全称Quick Response，是一个近几年来移动设备上超流行的一种编码方式，它比传统的Bar Code条形码能存更多的信息，也能表示更多的数据类型：比如：字符，数字，日文，中文等等。这两天学习了一下二维码图片生成的相关细节，觉得这个玩意就是一个密码算法，在此写一这篇文章 ，揭露一下。供好学的人一同学习之。\n\n\n# 基础知识\n\n## 二维码定位\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/QR-Code-Overview.jpeg)\n\n- Position Detection Pattern是定位图案，用于标记二维码的矩形大小。这三个定位图案有白边叫Separators for Postion Detection Patterns。之所以三个而不是四个意思就是三个就可以标识一个矩形了。\n\n- Timing Patterns也是用于定位的。原因是二维码有40种尺寸，尺寸过大了后需要有根标准线，不然扫描的时候可能会扫歪了。\n\n- Alignment Patterns 只有Version 2以上（包括Version2）的二维码需要这个东东，同样是为了定位用的。\n\n## 功能性定位\n\n- Format Information 存在于所有的尺寸中，用于存放一些格式化数据的。\n- Version Information 在 >= Version 7以上，需要预留两块3 x 6的区域存放一些版本信息。\n\n## 数据码和纠错码\n\n- 除了上述的那些地方，剩下的地方存放 Data Code 数据码 和 Error Correction Code 纠错码。\n\n # 数据编码\n\n 我们先来说说数据编码。QR码支持如下的编码：\n\n**Numeric mode** 数字编码，从0到9。如果需要编码的数字的个数不是3的倍数，那么，最后剩下的1或2位数会被转成4或7bits，则其它的每3位数字会被编成 10，12，14bits，编成多长还要看二维码的尺寸（下面有一个表Table 3说明了这点）\n\n**Alphanumeric mode** 字符编码。包括 0-9，大写的A到Z（没有小写），以及符号$ % * + – . / : 包括空格。这些字符会映射成一个字符索引表。如下所示：（其中的SP是空格，Char是字符，Value是其索引值） 编码的过程是把字符两两分组，然后转成下表的45进制，然后转成11bits的二进制，如果最后有一个落单的，那就转成6bits的二进制。而编码模式和字符的个数需要根据不同的Version尺寸编成9, 11或13个二进制（如下表中Table 3）\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Alphanumeric-mode.png)\n\n**Byte mode**, 字节编码，可以是0-255的ISO-8859-1字符。有些二维码的扫描器可以自动检测是否是UTF-8的编码。\n\n**Kanji mode** 这是日文编码，也是双字节编码。同样，也可以用于中文编码。日文和汉字的编码会减去一个值。如：在0X8140 to 0X9FFC中的字符会减去8140，在0XE040到0XEBBF中的字符要减去0XC140，然后把结果前两个16进制位拿出来乘以0XC0，然后再加上后两个16进制位，最后转成13bit的编码。如下图示例:\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Kanji-mode.png)\n\n**Extended Channel Interpretation (ECI) mode** 主要用于特殊的字符集。并不是所有的扫描器都支持这种编码。\n\n**Structured Append mode** 用于混合编码，也就是说，这个二维码中包含了多种编码格式。\n\n**FNC1 mode** 这种编码方式主要是给一些特殊的工业或行业用的。比如GS1条形码之类的。\n\n简单起见，后面三种不会在本文 中讨论。\n\n下面两张表中，\n\n- Table 2 是各个编码格式的“编号”，这个东西要写在Format Information中。注：中文是1101\n- Table 3 表示了，不同版本（尺寸）的二维码，对于，数字，字符，字节和Kanji模式下，对于单个编码的2进制的位数。（在二维码的规格说明书中，有各种各样的编码规范表，后面还会提到）\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Mode-Indicator.png)\n\n下面我们看几个示例，\n\n## **示例一：数字编码**\n\n在Version 1的尺寸下，纠错级别为H的情况下，编码： 01234567\n\n1. 把上述数字分成三组: 012 345 67\n\n2. 把他们转成二进制:  012 转成 0000001100；  345 转成 0101011001；  67 转成 1000011。\n\n3. 把这三个二进制串起来: 0000001100 0101011001 1000011\n\n4. 把数字的个数转成二进制 (version 1-H是10 bits ): 8个数字的二进制是 0000001000\n\n5. 把数字编码的标志0001和第4步的编码加到前面:  0001 0000001000 0000001100 0101011001 1000011\n\n## **示例二：字符编码**\n\n在Version 1的尺寸下，纠错级别为H的情况下，编码: AC-42\n\n1. 从字符索引表中找到 AC-42 这五个字条的索引 (10,12,41,4,2)\n\n2. 两两分组: (10,12) (41,4) (2)\n\n3. 把每一组转成11bits的二进制:\n\n        (10,12) 10*45+12 等于 462 转成 00111001110\n        (41,4) 41*45+4 等于 1849 转成 11100111001\n        (2) 等于 2 转成 000010\n\n4. 把这些二进制连接起来：00111001110 11100111001 000010\n\n5. 把字符的个数转成二进制 (Version 1-H为9 bits ): 5个字符，5转成 000000101\n\n6. 在头上加上编码标识 0010 和第5步的个数编码:  0010 000000101 00111001110 11100111001 000010\n\n## **结束符和补齐符**\n假如我们有个HELLO WORLD的字符串要编码，根据上面的示例二，我们可以得到下面的编码，\n\n| 编码        | 字符数           | HELLO WORLD的编码  |\n| ------------- |:-------------:|:-----: |\n| 0010      | 000001011 | 01100001011 01111000110 10001011100 10110111000 10011010100 001101 |\n| | |\n\n我们还要加上结束符\n| 编码        | 字符数           | HELLO WORLD的编码  | 结束 |\n| ------------- |:-------------:|:-------------:| -----:|\n| 0010      | 000001011 | 01100001011 01111000110 10001011100 10110111000 10011010100 001101 | 0000 |\n| | |\n\n## **按8bits重排**\n如果所有的编码加起来不是8个倍数我们还要在后面加上足够的0，比如上面一共有78个bits，所以，我们还要加上2个0，然后按8个bits分好组：\n\n00100000   01011011   00001011   01111000   11010001   01110010   11011100   01001101   01000011   010000<font color=red>**00**</font>\n\n## **补齐码（Padding Bytes）**\n\n最后，如果如果还没有达到我们最大的bits数的限制，我们还要加一些补齐码（Padding Bytes），Padding Bytes就是重复下面的两个bytes：11101100 00010001 （这两个二进制转成十进制是236和17，我也不知道为什么，只知道Spec上是这么写的）关于每一个Version的每一种纠错级别的最大Bits限制，可以参看QR Code Spec的第28页到32页的Table-7一表。\n\n假设我们需要编码的是Version 1的Q纠错级，那么，其最大需要104个bits，而我们上面只有80个bits，所以，还需要补24个bits，也就是需要3个Padding Bytes，我们就添加三个，于是得到下面的编码：\n\n00100000 01011011 00001011 01111000 11010001 01110010 11011100 01001101 01000011 01000000 <font color=red>**11101100 00010001 11101100**</font>\n\n上面的编码就是数据码了，叫Data Codewords，每一个8bits叫一个codeword，我们还要对这些数据码加上纠错信息。\n\n# **纠错码**\n\n上面我们说到了一些纠错级别，Error Correction Code Level，二维码中有四种级别的纠错，这就是为什么二维码有残缺还能扫出来，也就是为什么有人在二维码的中心位置加入图标。\n\n| 错误修正容量 | |\n|----|:----:|\n| L水平 | 7%的字码可被修正 \n| M水平 | 15%的字码可被修正 \n| Q水平 | 25%的字码可被修正\n| H水平 | 30%的字码可被修正\n\n那么，QR是怎么对数据码加上纠错码的？首先，我们需要对数据码进行分组，也就是分成不同的Block，然后对各个Block进行纠错编码，对于如何分组，我们可以查看QR Code Spec的第33页到44页的Table-13到Table-22的定义表。注意最后两列：\n\n- **Number of Error Code Correction Blocks**：需要分多少个块。\n- **Error Correction Code Per Blocks**：每一个块中的code个数，所谓的code的个数，也就是有多少个8bits的字节。\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Error-Correction-Blocks.png)\n\n举个例子：上述的Version 5 + Q纠错级：需要4个Blocks（2个Blocks为一组，共两组），头一组的两个Blocks中各15个bits数据 + 各 9个bits的纠错码（注：表中的codewords就是一个8bits的byte）（再注：最后一例中的（c, k, r ）的公式为：c = k + 2 * r，因为后脚注解释了：纠错码的容量小于纠错码的一半）\n\n下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）\n\n下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）\n\n| 组 | 块 | 数据 | 对每个块的纠错码 |\n|----|:----|:----|:----|\n| 1 | 1 | 67 85 70 134 87 38 85 194 119 50 6 18 6 103 38 | 213 199 11 45 115 247 241 223 229 248 154 117 154 111 86 161 111 39 |\n|   | 2\t| 246 246 66 7 118 134 242 7 38 86 22 198 199 146 6 | 87 204 96 60 202 182 124 157 200 134 27 129 209 17 163 163 120 133 |\n| 2 | 1 | 182 230 247 119 50 7 118 134 87 38 82 6 134 151 50 7 | 148 116 177 212 76 133 75 242 238 76 195 230 189 10 108 240 192 141 |\n|   | 2 | 70 247 118 86 194 6 151 50 16 236 17 236 17 236 17 236 | 235 159 5 173 24 147 59 33 106 40 255 172 82 2 131 32 178 236 |\n\n注：二维码的纠错码主要是通过[Reed-Solomon error correction](http://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction)（里德-所罗门纠错算法）来实现的。对于这个算法，对于我来说是相当的复杂，里面有很多的数学计算，比如：多项式除法，把1-255的数映射成2的n次方（0<=n<=255）的伽罗瓦域Galois Field之类的神一样的东西，以及基于这些基础的纠错数学公式，因为我的数据基础差，对于我来说太过复杂，所以我一时半会儿还有点没搞明白，还在学习中，所以，我在这里就不展开说这些东西了。还请大家见谅了。（当然，如果有朋友很明白，也繁请教教我）\n\n# **最终编码**\n\n## 穿插放置\n\n如果你以为我们可以开始画图，你就错了。二维码的混乱技术还没有玩完，它还要把数据码和纠错码的各个codewords交替放在一起。如何交替呢，规则如下：\n\n对于数据码：把每个块的第一个codewords先拿出来按顺度排列好，然后再取第一块的第二个，如此类推。如：上述示例中的Data Codewords如下：\n\n||||||||||||||||||\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n|块 1|67|85|70|134|87|38|85|194|119|50|6|18|6|103|38||\n|块 2|246|246|66|7|118|134|242|7|38|86|22|198|199|146|6||\t\n|块 3|182|230|247|119|50|7|118|134|87|38|82|6|134|151|50|7|\n|块 4|70|247|118|86|194|6|151|50|16|236|17|236|17|236|17|236|\n\n我们先取第一列的：67， 246， 182， 70\n\n然后再取第二列的：67， 246， 182， 70， 85，246，230 ，247\n\n如此类推：67， 246， 182， 70， 85，246，230 ，247 ………  ……… ，38，6，50，17，7，236\n\n对于纠错码，也是一样：\n||||||||||||||||||\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n|块 1|\t213|\t199|\t11|\t45|\t115|\t247|\t241|\t223|\t229|\t248|\t154|\t117|\t154|\t111|\t86|\t161|\t111|\t39|\n|块 2|\t87|\t204|\t96|\t60|\t202|\t182|\t124|\t157|\t200|\t134|\t27|\t129|\t209|\t17|\t163|\t163|\t120|\t133|\n|块 3|\t148|\t116|\t177|\t212|\t76|\t133|\t75|\t242|\t238|\t76|\t195|\t230|\t189|\t10|\t108|\t240|\t192|\t141|\n|块 4|\t235|\t159|\t5|\t173|\t24|\t147|\t59|\t33|\t106|\t40|\t255|\t172|\t82|\t2|\t131|\t32|\t178|\t236|\n\n和数据码取的一样，得到：213，87，148，235，199，204，116，159，…… …… 39，133，141，236\n\n然后，再把这两组放在一起（纠错码放在数据码之后）得到：\n\n67, 246, 182, 70, 85, 246, 230, 247, 70, 66, 247, 118, 134, 7, 119, 86, 87, 118, 50, 194, 38, 134, 7, 6, 85, 242, 118, 151, 194, 7, 134, 50, 119, 38, 87, 16, 50, 86, 38, 236, 6, 22, 82, 17, 18, 198, 6, 236, 6, 199, 134, 17, 103, 146, 151, 236, 38, 6, 50, 17, 7, 236, 213, 87, 148, 235, 199, 204, 116, 159, 11, 96, 177, 5, 45, 60, 212, 173, 115, 202, 76, 24, 247, 182, 133, 147, 241, 124, 75, 59, 223, 157, 242, 33, 229, 200, 238, 106, 248, 134, 76, 40, 154, 27, 195, 255, 117, 129, 230, 172, 154, 209, 189, 82, 111, 17, 10, 2, 86, 163, 108, 131, 161, 163, 240, 32, 111, 120, 192, 178, 39, 133, 141, 236\n\n这就是我们的数据区。\n\n## **Remainder Bits**\n最后再加上Reminder Bits，对于某些Version的QR，上面的还不够长度，还要加上Remainder Bits，比如：上述的5Q版的二维码，还要加上7个bits，Remainder Bits加零就好了。关于哪些Version需要多少个Remainder bit，可以参看QR Code Spec的第15页的Table-1的定义表。\n\n# **画二维码图**\n## **Position Detection Pattern**\n首先，先把Position Detection图案画在三个角上。（无论Version如何，这个图案的尺寸就是这么大）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/finder.png)\n\n## **Alignment Pattern**\n然后，再把Alignment图案画上（无论Version如何，这个图案的尺寸就是这么大）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/alignment-pattern.png)\n\n\n关于Alignment的位置，可以查看QR Code Spec的第81页的Table-E.1的定义表（下表是不完全表格）\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Alignment-Position.png)\n\n下图是根据上述表格中的Version8的一个例子（6，24，42）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/alignment-example.png)\n\n## **Timing Pattern**\n接下来是Timing Pattern的线（这个不用多说了）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Timing-Pattern.png)\n\n## **Format Information**\n再接下来是Formation Information，下图中的蓝色部分。\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Format-Information.png)\n\nFormat Information是一个15个bits的信息，每一个bit的位置如下图所示：（注意图中的Dark Module，那是永远出现的）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Format-Info-bits-postion.png)\n\n这15个bits中包括：\n\n- 5个数据bits：其中，2个bits用于表示使用什么样的Error Correction Level， 3个bits表示使用什么样的Mask\n- 10个纠错bits。主要通过BCH Code来计算\n\n然后15个bits还要与101010000010010做XOR操作。这样就保证不会因为我们选用了00的纠错级别和000的Mask，从而造成全部为白色，这会增加我们的扫描器的图像识别的困难。\n\n下面是一个示例：\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Format-Information-Example.png)\n\n关于Error Correction Level如下表所示：\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Error-Correction-Indicator-Code.png)\n\n关于Mask图案如后面的Table 23所示。\n\n## **Version Information**\n再接下来是Version Information（版本7以后需要这个编码），下图中的蓝色部分。\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Version-Information.png)\n\nVersion Information一共是18个bits，其中包括6个bits的版本号以及12个bits的纠错码，下面是一个示例：\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Example.png)\n\n而其填充位置如下：\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Position.png)\n\n## **数据和数据纠错码**\n然后是填接我们的最终编码，最终编码的填充方式如下：从左下角开始沿着红线填我们的各个bits，1是黑色，0是白色。如果遇到了上面的非数据区，则绕开或跳过。\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Data-Placement.png)\n\n## **掩码图案**\n这样下来，我们的图就填好了，但是，也许那些点并不均衡，如果出现大面积的空白或黑块，会告诉我们扫描识别的困难。所以，我们还要做Masking操作（靠，还嫌不复杂）QR的Spec中说了，QR有8个Mask你可以使用，如下所示：其中，各个mask的公式在各个图下面。所谓mask，说白了，就是和上面生成的图做XOR操作。Mask只会和数据区进行XOR，不会影响功能区。（注：选择一个合适的Mask也是有算法的）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/masking-pattern.png)\n\n其Mask的标识码如下所示：（其中的i,j分别对应于上图的x,y）\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Mask-Pattern-Code.png)\n\n下面是Mask后的一些样子，我们可以看到被某些Mask XOR了的数据变得比较零散了。\n\n![alt](http://coolshell.cn/wp-content/uploads/2013/10/Masking-Examples.png)\n\nMask过后的二维码就成最终的图了。\n\n好了，大家可以去尝试去写一下QR的编码程序，当然，你可以用网上找个Reed Soloman的纠错算法的库，或是看看别人的源代码是怎么实现这个繁锁的编码。\n\n\n\n\n\n\n\n\n","slug":"qrcode","published":0,"date":"2017-05-25T03:41:18.228Z","updated":"2017-05-25T03:41:18.229Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o54001miwl773c9k1fi","content":"<p>二维码又称QR Code，QR全称Quick Response，是一个近几年来移动设备上超流行的一种编码方式，它比传统的Bar Code条形码能存更多的信息，也能表示更多的数据类型：比如：字符，数字，日文，中文等等。这两天学习了一下二维码图片生成的相关细节，觉得这个玩意就是一个密码算法，在此写一这篇文章 ，揭露一下。供好学的人一同学习之。</p>\n<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><h2 id=\"二维码定位\"><a href=\"#二维码定位\" class=\"headerlink\" title=\"二维码定位\"></a>二维码定位</h2><p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/QR-Code-Overview.jpeg\" alt=\"alt\"></p>\n<ul>\n<li><p>Position Detection Pattern是定位图案，用于标记二维码的矩形大小。这三个定位图案有白边叫Separators for Postion Detection Patterns。之所以三个而不是四个意思就是三个就可以标识一个矩形了。</p>\n</li>\n<li><p>Timing Patterns也是用于定位的。原因是二维码有40种尺寸，尺寸过大了后需要有根标准线，不然扫描的时候可能会扫歪了。</p>\n</li>\n<li><p>Alignment Patterns 只有Version 2以上（包括Version2）的二维码需要这个东东，同样是为了定位用的。</p>\n</li>\n</ul>\n<h2 id=\"功能性定位\"><a href=\"#功能性定位\" class=\"headerlink\" title=\"功能性定位\"></a>功能性定位</h2><ul>\n<li>Format Information 存在于所有的尺寸中，用于存放一些格式化数据的。</li>\n<li>Version Information 在 &gt;= Version 7以上，需要预留两块3 x 6的区域存放一些版本信息。</li>\n</ul>\n<h2 id=\"数据码和纠错码\"><a href=\"#数据码和纠错码\" class=\"headerlink\" title=\"数据码和纠错码\"></a>数据码和纠错码</h2><ul>\n<li><p>除了上述的那些地方，剩下的地方存放 Data Code 数据码 和 Error Correction Code 纠错码。</p>\n<h1 id=\"数据编码\"><a href=\"#数据编码\" class=\"headerlink\" title=\"数据编码\"></a>数据编码</h1><p>我们先来说说数据编码。QR码支持如下的编码：</p>\n</li>\n</ul>\n<p><strong>Numeric mode</strong> 数字编码，从0到9。如果需要编码的数字的个数不是3的倍数，那么，最后剩下的1或2位数会被转成4或7bits，则其它的每3位数字会被编成 10，12，14bits，编成多长还要看二维码的尺寸（下面有一个表Table 3说明了这点）</p>\n<p><strong>Alphanumeric mode</strong> 字符编码。包括 0-9，大写的A到Z（没有小写），以及符号$ % * + – . / : 包括空格。这些字符会映射成一个字符索引表。如下所示：（其中的SP是空格，Char是字符，Value是其索引值） 编码的过程是把字符两两分组，然后转成下表的45进制，然后转成11bits的二进制，如果最后有一个落单的，那就转成6bits的二进制。而编码模式和字符的个数需要根据不同的Version尺寸编成9, 11或13个二进制（如下表中Table 3）<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Alphanumeric-mode.png\" alt=\"alt\"></p>\n<p><strong>Byte mode</strong>, 字节编码，可以是0-255的ISO-8859-1字符。有些二维码的扫描器可以自动检测是否是UTF-8的编码。</p>\n<p><strong>Kanji mode</strong> 这是日文编码，也是双字节编码。同样，也可以用于中文编码。日文和汉字的编码会减去一个值。如：在0X8140 to 0X9FFC中的字符会减去8140，在0XE040到0XEBBF中的字符要减去0XC140，然后把结果前两个16进制位拿出来乘以0XC0，然后再加上后两个16进制位，最后转成13bit的编码。如下图示例:<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Kanji-mode.png\" alt=\"alt\"></p>\n<p><strong>Extended Channel Interpretation (ECI) mode</strong> 主要用于特殊的字符集。并不是所有的扫描器都支持这种编码。</p>\n<p><strong>Structured Append mode</strong> 用于混合编码，也就是说，这个二维码中包含了多种编码格式。</p>\n<p><strong>FNC1 mode</strong> 这种编码方式主要是给一些特殊的工业或行业用的。比如GS1条形码之类的。</p>\n<p>简单起见，后面三种不会在本文 中讨论。</p>\n<p>下面两张表中，</p>\n<ul>\n<li>Table 2 是各个编码格式的“编号”，这个东西要写在Format Information中。注：中文是1101</li>\n<li>Table 3 表示了，不同版本（尺寸）的二维码，对于，数字，字符，字节和Kanji模式下，对于单个编码的2进制的位数。（在二维码的规格说明书中，有各种各样的编码规范表，后面还会提到）<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Mode-Indicator.png\" alt=\"alt\"></li>\n</ul>\n<p>下面我们看几个示例，</p>\n<h2 id=\"示例一：数字编码\"><a href=\"#示例一：数字编码\" class=\"headerlink\" title=\"示例一：数字编码\"></a><strong>示例一：数字编码</strong></h2><p>在Version 1的尺寸下，纠错级别为H的情况下，编码： 01234567</p>\n<ol>\n<li><p>把上述数字分成三组: 012 345 67</p>\n</li>\n<li><p>把他们转成二进制:  012 转成 0000001100；  345 转成 0101011001；  67 转成 1000011。</p>\n</li>\n<li><p>把这三个二进制串起来: 0000001100 0101011001 1000011</p>\n</li>\n<li><p>把数字的个数转成二进制 (version 1-H是10 bits ): 8个数字的二进制是 0000001000</p>\n</li>\n<li><p>把数字编码的标志0001和第4步的编码加到前面:  0001 0000001000 0000001100 0101011001 1000011</p>\n</li>\n</ol>\n<h2 id=\"示例二：字符编码\"><a href=\"#示例二：字符编码\" class=\"headerlink\" title=\"示例二：字符编码\"></a><strong>示例二：字符编码</strong></h2><p>在Version 1的尺寸下，纠错级别为H的情况下，编码: AC-42</p>\n<ol>\n<li><p>从字符索引表中找到 AC-42 这五个字条的索引 (10,12,41,4,2)</p>\n</li>\n<li><p>两两分组: (10,12) (41,4) (2)</p>\n</li>\n<li><p>把每一组转成11bits的二进制:</p>\n<pre><code>(10,12) 10*45+12 等于 462 转成 00111001110\n(41,4) 41*45+4 等于 1849 转成 11100111001\n(2) 等于 2 转成 000010\n</code></pre></li>\n<li><p>把这些二进制连接起来：00111001110 11100111001 000010</p>\n</li>\n<li><p>把字符的个数转成二进制 (Version 1-H为9 bits ): 5个字符，5转成 000000101</p>\n</li>\n<li><p>在头上加上编码标识 0010 和第5步的个数编码:  0010 000000101 00111001110 11100111001 000010</p>\n</li>\n</ol>\n<h2 id=\"结束符和补齐符\"><a href=\"#结束符和补齐符\" class=\"headerlink\" title=\"结束符和补齐符\"></a><strong>结束符和补齐符</strong></h2><p>假如我们有个HELLO WORLD的字符串要编码，根据上面的示例二，我们可以得到下面的编码，</p>\n<table>\n<thead>\n<tr>\n<th>编码</th>\n<th style=\"text-align:center\">字符数</th>\n<th style=\"text-align:center\">HELLO WORLD的编码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0010</td>\n<td style=\"text-align:center\">000001011</td>\n<td style=\"text-align:center\">01100001011 01111000110 10001011100 10110111000 10011010100 001101</td>\n</tr>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>我们还要加上结束符<br>| 编码        | 字符数           | HELLO WORLD的编码  | 结束 |<br>| ————- |:————-:|:————-:| —–:|<br>| 0010      | 000001011 | 01100001011 01111000110 10001011100 10110111000 10011010100 001101 | 0000 |<br>| | |</p>\n<h2 id=\"按8bits重排\"><a href=\"#按8bits重排\" class=\"headerlink\" title=\"按8bits重排\"></a><strong>按8bits重排</strong></h2><p>如果所有的编码加起来不是8个倍数我们还要在后面加上足够的0，比如上面一共有78个bits，所以，我们还要加上2个0，然后按8个bits分好组：</p>\n<p>00100000   01011011   00001011   01111000   11010001   01110010   11011100   01001101   01000011   010000<font color=\"red\"><strong>00</strong></font></p>\n<h2 id=\"补齐码（Padding-Bytes）\"><a href=\"#补齐码（Padding-Bytes）\" class=\"headerlink\" title=\"补齐码（Padding Bytes）\"></a><strong>补齐码（Padding Bytes）</strong></h2><p>最后，如果如果还没有达到我们最大的bits数的限制，我们还要加一些补齐码（Padding Bytes），Padding Bytes就是重复下面的两个bytes：11101100 00010001 （这两个二进制转成十进制是236和17，我也不知道为什么，只知道Spec上是这么写的）关于每一个Version的每一种纠错级别的最大Bits限制，可以参看QR Code Spec的第28页到32页的Table-7一表。</p>\n<p>假设我们需要编码的是Version 1的Q纠错级，那么，其最大需要104个bits，而我们上面只有80个bits，所以，还需要补24个bits，也就是需要3个Padding Bytes，我们就添加三个，于是得到下面的编码：</p>\n<p>00100000 01011011 00001011 01111000 11010001 01110010 11011100 01001101 01000011 01000000 <font color=\"red\"><strong>11101100 00010001 11101100</strong></font></p>\n<p>上面的编码就是数据码了，叫Data Codewords，每一个8bits叫一个codeword，我们还要对这些数据码加上纠错信息。</p>\n<h1 id=\"纠错码\"><a href=\"#纠错码\" class=\"headerlink\" title=\"纠错码\"></a><strong>纠错码</strong></h1><p>上面我们说到了一些纠错级别，Error Correction Code Level，二维码中有四种级别的纠错，这就是为什么二维码有残缺还能扫出来，也就是为什么有人在二维码的中心位置加入图标。</p>\n<table>\n<thead>\n<tr>\n<th>错误修正容量</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>L水平</td>\n<td style=\"text-align:center\">7%的字码可被修正 </td>\n</tr>\n<tr>\n<td>M水平</td>\n<td style=\"text-align:center\">15%的字码可被修正 </td>\n</tr>\n<tr>\n<td>Q水平</td>\n<td style=\"text-align:center\">25%的字码可被修正</td>\n</tr>\n<tr>\n<td>H水平</td>\n<td style=\"text-align:center\">30%的字码可被修正</td>\n</tr>\n</tbody>\n</table>\n<p>那么，QR是怎么对数据码加上纠错码的？首先，我们需要对数据码进行分组，也就是分成不同的Block，然后对各个Block进行纠错编码，对于如何分组，我们可以查看QR Code Spec的第33页到44页的Table-13到Table-22的定义表。注意最后两列：</p>\n<ul>\n<li><strong>Number of Error Code Correction Blocks</strong>：需要分多少个块。</li>\n<li><strong>Error Correction Code Per Blocks</strong>：每一个块中的code个数，所谓的code的个数，也就是有多少个8bits的字节。</li>\n</ul>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Error-Correction-Blocks.png\" alt=\"alt\"></p>\n<p>举个例子：上述的Version 5 + Q纠错级：需要4个Blocks（2个Blocks为一组，共两组），头一组的两个Blocks中各15个bits数据 + 各 9个bits的纠错码（注：表中的codewords就是一个8bits的byte）（再注：最后一例中的（c, k, r ）的公式为：c = k + 2 * r，因为后脚注解释了：纠错码的容量小于纠错码的一半）</p>\n<p>下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）</p>\n<p>下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）</p>\n<table>\n<thead>\n<tr>\n<th>组</th>\n<th style=\"text-align:left\">块</th>\n<th style=\"text-align:left\">数据</th>\n<th style=\"text-align:left\">对每个块的纠错码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">67 85 70 134 87 38 85 194 119 50 6 18 6 103 38</td>\n<td style=\"text-align:left\">213 199 11 45 115 247 241 223 229 248 154 117 154 111 86 161 111 39</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">246 246 66 7 118 134 242 7 38 86 22 198 199 146 6</td>\n<td style=\"text-align:left\">87 204 96 60 202 182 124 157 200 134 27 129 209 17 163 163 120 133</td>\n</tr>\n<tr>\n<td>2</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">182 230 247 119 50 7 118 134 87 38 82 6 134 151 50 7</td>\n<td style=\"text-align:left\">148 116 177 212 76 133 75 242 238 76 195 230 189 10 108 240 192 141</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">70 247 118 86 194 6 151 50 16 236 17 236 17 236 17 236</td>\n<td style=\"text-align:left\">235 159 5 173 24 147 59 33 106 40 255 172 82 2 131 32 178 236</td>\n</tr>\n</tbody>\n</table>\n<p>注：二维码的纠错码主要是通过<a href=\"http://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction\" target=\"_blank\" rel=\"external\">Reed-Solomon error correction</a>（里德-所罗门纠错算法）来实现的。对于这个算法，对于我来说是相当的复杂，里面有很多的数学计算，比如：多项式除法，把1-255的数映射成2的n次方（0&lt;=n&lt;=255）的伽罗瓦域Galois Field之类的神一样的东西，以及基于这些基础的纠错数学公式，因为我的数据基础差，对于我来说太过复杂，所以我一时半会儿还有点没搞明白，还在学习中，所以，我在这里就不展开说这些东西了。还请大家见谅了。（当然，如果有朋友很明白，也繁请教教我）</p>\n<h1 id=\"最终编码\"><a href=\"#最终编码\" class=\"headerlink\" title=\"最终编码\"></a><strong>最终编码</strong></h1><h2 id=\"穿插放置\"><a href=\"#穿插放置\" class=\"headerlink\" title=\"穿插放置\"></a>穿插放置</h2><p>如果你以为我们可以开始画图，你就错了。二维码的混乱技术还没有玩完，它还要把数据码和纠错码的各个codewords交替放在一起。如何交替呢，规则如下：</p>\n<p>对于数据码：把每个块的第一个codewords先拿出来按顺度排列好，然后再取第一块的第二个，如此类推。如：上述示例中的Data Codewords如下：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>块 1</td>\n<td>67</td>\n<td>85</td>\n<td>70</td>\n<td>134</td>\n<td>87</td>\n<td>38</td>\n<td>85</td>\n<td>194</td>\n<td>119</td>\n<td>50</td>\n<td>6</td>\n<td>18</td>\n<td>6</td>\n<td>103</td>\n<td>38</td>\n<td></td>\n</tr>\n<tr>\n<td>块 2</td>\n<td>246</td>\n<td>246</td>\n<td>66</td>\n<td>7</td>\n<td>118</td>\n<td>134</td>\n<td>242</td>\n<td>7</td>\n<td>38</td>\n<td>86</td>\n<td>22</td>\n<td>198</td>\n<td>199</td>\n<td>146</td>\n<td>6</td>\n<td></td>\n</tr>\n<tr>\n<td>块 3</td>\n<td>182</td>\n<td>230</td>\n<td>247</td>\n<td>119</td>\n<td>50</td>\n<td>7</td>\n<td>118</td>\n<td>134</td>\n<td>87</td>\n<td>38</td>\n<td>82</td>\n<td>6</td>\n<td>134</td>\n<td>151</td>\n<td>50</td>\n<td>7</td>\n</tr>\n<tr>\n<td>块 4</td>\n<td>70</td>\n<td>247</td>\n<td>118</td>\n<td>86</td>\n<td>194</td>\n<td>6</td>\n<td>151</td>\n<td>50</td>\n<td>16</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n</tr>\n</tbody>\n</table>\n<p>我们先取第一列的：67， 246， 182， 70</p>\n<p>然后再取第二列的：67， 246， 182， 70， 85，246，230 ，247</p>\n<p>如此类推：67， 246， 182， 70， 85，246，230 ，247 ………  ……… ，38，6，50，17，7，236</p>\n<p>对于纠错码，也是一样：<br>||||||||||||||||||<br>| — | — | — | — | — | — | — | — | — | — | — | — | — | — | — | — | — |<br>|块 1|    213|    199|    11|    45|    115|    247|    241|    223|    229|    248|    154|    117|    154|    111|    86|    161|    111|    39|<br>|块 2|    87|    204|    96|    60|    202|    182|    124|    157|    200|    134|    27|    129|    209|    17|    163|    163|    120|    133|<br>|块 3|    148|    116|    177|    212|    76|    133|    75|    242|    238|    76|    195|    230|    189|    10|    108|    240|    192|    141|<br>|块 4|    235|    159|    5|    173|    24|    147|    59|    33|    106|    40|    255|    172|    82|    2|    131|    32|    178|    236|</p>\n<p>和数据码取的一样，得到：213，87，148，235，199，204，116，159，…… …… 39，133，141，236</p>\n<p>然后，再把这两组放在一起（纠错码放在数据码之后）得到：</p>\n<p>67, 246, 182, 70, 85, 246, 230, 247, 70, 66, 247, 118, 134, 7, 119, 86, 87, 118, 50, 194, 38, 134, 7, 6, 85, 242, 118, 151, 194, 7, 134, 50, 119, 38, 87, 16, 50, 86, 38, 236, 6, 22, 82, 17, 18, 198, 6, 236, 6, 199, 134, 17, 103, 146, 151, 236, 38, 6, 50, 17, 7, 236, 213, 87, 148, 235, 199, 204, 116, 159, 11, 96, 177, 5, 45, 60, 212, 173, 115, 202, 76, 24, 247, 182, 133, 147, 241, 124, 75, 59, 223, 157, 242, 33, 229, 200, 238, 106, 248, 134, 76, 40, 154, 27, 195, 255, 117, 129, 230, 172, 154, 209, 189, 82, 111, 17, 10, 2, 86, 163, 108, 131, 161, 163, 240, 32, 111, 120, 192, 178, 39, 133, 141, 236</p>\n<p>这就是我们的数据区。</p>\n<h2 id=\"Remainder-Bits\"><a href=\"#Remainder-Bits\" class=\"headerlink\" title=\"Remainder Bits\"></a><strong>Remainder Bits</strong></h2><p>最后再加上Reminder Bits，对于某些Version的QR，上面的还不够长度，还要加上Remainder Bits，比如：上述的5Q版的二维码，还要加上7个bits，Remainder Bits加零就好了。关于哪些Version需要多少个Remainder bit，可以参看QR Code Spec的第15页的Table-1的定义表。</p>\n<h1 id=\"画二维码图\"><a href=\"#画二维码图\" class=\"headerlink\" title=\"画二维码图\"></a><strong>画二维码图</strong></h1><h2 id=\"Position-Detection-Pattern\"><a href=\"#Position-Detection-Pattern\" class=\"headerlink\" title=\"Position Detection Pattern\"></a><strong>Position Detection Pattern</strong></h2><p>首先，先把Position Detection图案画在三个角上。（无论Version如何，这个图案的尺寸就是这么大）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/finder.png\" alt=\"alt\"></p>\n<h2 id=\"Alignment-Pattern\"><a href=\"#Alignment-Pattern\" class=\"headerlink\" title=\"Alignment Pattern\"></a><strong>Alignment Pattern</strong></h2><p>然后，再把Alignment图案画上（无论Version如何，这个图案的尺寸就是这么大）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/alignment-pattern.png\" alt=\"alt\"></p>\n<p>关于Alignment的位置，可以查看QR Code Spec的第81页的Table-E.1的定义表（下表是不完全表格）<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Alignment-Position.png\" alt=\"alt\"></p>\n<p>下图是根据上述表格中的Version8的一个例子（6，24，42）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/alignment-example.png\" alt=\"alt\"></p>\n<h2 id=\"Timing-Pattern\"><a href=\"#Timing-Pattern\" class=\"headerlink\" title=\"Timing Pattern\"></a><strong>Timing Pattern</strong></h2><p>接下来是Timing Pattern的线（这个不用多说了）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Timing-Pattern.png\" alt=\"alt\"></p>\n<h2 id=\"Format-Information\"><a href=\"#Format-Information\" class=\"headerlink\" title=\"Format Information\"></a><strong>Format Information</strong></h2><p>再接下来是Formation Information，下图中的蓝色部分。</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Format-Information.png\" alt=\"alt\"></p>\n<p>Format Information是一个15个bits的信息，每一个bit的位置如下图所示：（注意图中的Dark Module，那是永远出现的）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Format-Info-bits-postion.png\" alt=\"alt\"></p>\n<p>这15个bits中包括：</p>\n<ul>\n<li>5个数据bits：其中，2个bits用于表示使用什么样的Error Correction Level， 3个bits表示使用什么样的Mask</li>\n<li>10个纠错bits。主要通过BCH Code来计算</li>\n</ul>\n<p>然后15个bits还要与101010000010010做XOR操作。这样就保证不会因为我们选用了00的纠错级别和000的Mask，从而造成全部为白色，这会增加我们的扫描器的图像识别的困难。</p>\n<p>下面是一个示例：</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Format-Information-Example.png\" alt=\"alt\"></p>\n<p>关于Error Correction Level如下表所示：</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Error-Correction-Indicator-Code.png\" alt=\"alt\"></p>\n<p>关于Mask图案如后面的Table 23所示。</p>\n<h2 id=\"Version-Information\"><a href=\"#Version-Information\" class=\"headerlink\" title=\"Version Information\"></a><strong>Version Information</strong></h2><p>再接下来是Version Information（版本7以后需要这个编码），下图中的蓝色部分。<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Version-Information.png\" alt=\"alt\"></p>\n<p>Version Information一共是18个bits，其中包括6个bits的版本号以及12个bits的纠错码，下面是一个示例：<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Example.png\" alt=\"alt\"></p>\n<p>而其填充位置如下：</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Position.png\" alt=\"alt\"></p>\n<h2 id=\"数据和数据纠错码\"><a href=\"#数据和数据纠错码\" class=\"headerlink\" title=\"数据和数据纠错码\"></a><strong>数据和数据纠错码</strong></h2><p>然后是填接我们的最终编码，最终编码的填充方式如下：从左下角开始沿着红线填我们的各个bits，1是黑色，0是白色。如果遇到了上面的非数据区，则绕开或跳过。</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Data-Placement.png\" alt=\"alt\"></p>\n<h2 id=\"掩码图案\"><a href=\"#掩码图案\" class=\"headerlink\" title=\"掩码图案\"></a><strong>掩码图案</strong></h2><p>这样下来，我们的图就填好了，但是，也许那些点并不均衡，如果出现大面积的空白或黑块，会告诉我们扫描识别的困难。所以，我们还要做Masking操作（靠，还嫌不复杂）QR的Spec中说了，QR有8个Mask你可以使用，如下所示：其中，各个mask的公式在各个图下面。所谓mask，说白了，就是和上面生成的图做XOR操作。Mask只会和数据区进行XOR，不会影响功能区。（注：选择一个合适的Mask也是有算法的）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/masking-pattern.png\" alt=\"alt\"></p>\n<p>其Mask的标识码如下所示：（其中的i,j分别对应于上图的x,y）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Mask-Pattern-Code.png\" alt=\"alt\"></p>\n<p>下面是Mask后的一些样子，我们可以看到被某些Mask XOR了的数据变得比较零散了。</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Masking-Examples.png\" alt=\"alt\"></p>\n<p>Mask过后的二维码就成最终的图了。</p>\n<p>好了，大家可以去尝试去写一下QR的编码程序，当然，你可以用网上找个Reed Soloman的纠错算法的库，或是看看别人的源代码是怎么实现这个繁锁的编码。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>二维码又称QR Code，QR全称Quick Response，是一个近几年来移动设备上超流行的一种编码方式，它比传统的Bar Code条形码能存更多的信息，也能表示更多的数据类型：比如：字符，数字，日文，中文等等。这两天学习了一下二维码图片生成的相关细节，觉得这个玩意就是一个密码算法，在此写一这篇文章 ，揭露一下。供好学的人一同学习之。</p>\n<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><h2 id=\"二维码定位\"><a href=\"#二维码定位\" class=\"headerlink\" title=\"二维码定位\"></a>二维码定位</h2><p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/QR-Code-Overview.jpeg\" alt=\"alt\"></p>\n<ul>\n<li><p>Position Detection Pattern是定位图案，用于标记二维码的矩形大小。这三个定位图案有白边叫Separators for Postion Detection Patterns。之所以三个而不是四个意思就是三个就可以标识一个矩形了。</p>\n</li>\n<li><p>Timing Patterns也是用于定位的。原因是二维码有40种尺寸，尺寸过大了后需要有根标准线，不然扫描的时候可能会扫歪了。</p>\n</li>\n<li><p>Alignment Patterns 只有Version 2以上（包括Version2）的二维码需要这个东东，同样是为了定位用的。</p>\n</li>\n</ul>\n<h2 id=\"功能性定位\"><a href=\"#功能性定位\" class=\"headerlink\" title=\"功能性定位\"></a>功能性定位</h2><ul>\n<li>Format Information 存在于所有的尺寸中，用于存放一些格式化数据的。</li>\n<li>Version Information 在 &gt;= Version 7以上，需要预留两块3 x 6的区域存放一些版本信息。</li>\n</ul>\n<h2 id=\"数据码和纠错码\"><a href=\"#数据码和纠错码\" class=\"headerlink\" title=\"数据码和纠错码\"></a>数据码和纠错码</h2><ul>\n<li><p>除了上述的那些地方，剩下的地方存放 Data Code 数据码 和 Error Correction Code 纠错码。</p>\n<h1 id=\"数据编码\"><a href=\"#数据编码\" class=\"headerlink\" title=\"数据编码\"></a>数据编码</h1><p>我们先来说说数据编码。QR码支持如下的编码：</p>\n</li>\n</ul>\n<p><strong>Numeric mode</strong> 数字编码，从0到9。如果需要编码的数字的个数不是3的倍数，那么，最后剩下的1或2位数会被转成4或7bits，则其它的每3位数字会被编成 10，12，14bits，编成多长还要看二维码的尺寸（下面有一个表Table 3说明了这点）</p>\n<p><strong>Alphanumeric mode</strong> 字符编码。包括 0-9，大写的A到Z（没有小写），以及符号$ % * + – . / : 包括空格。这些字符会映射成一个字符索引表。如下所示：（其中的SP是空格，Char是字符，Value是其索引值） 编码的过程是把字符两两分组，然后转成下表的45进制，然后转成11bits的二进制，如果最后有一个落单的，那就转成6bits的二进制。而编码模式和字符的个数需要根据不同的Version尺寸编成9, 11或13个二进制（如下表中Table 3）<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Alphanumeric-mode.png\" alt=\"alt\"></p>\n<p><strong>Byte mode</strong>, 字节编码，可以是0-255的ISO-8859-1字符。有些二维码的扫描器可以自动检测是否是UTF-8的编码。</p>\n<p><strong>Kanji mode</strong> 这是日文编码，也是双字节编码。同样，也可以用于中文编码。日文和汉字的编码会减去一个值。如：在0X8140 to 0X9FFC中的字符会减去8140，在0XE040到0XEBBF中的字符要减去0XC140，然后把结果前两个16进制位拿出来乘以0XC0，然后再加上后两个16进制位，最后转成13bit的编码。如下图示例:<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Kanji-mode.png\" alt=\"alt\"></p>\n<p><strong>Extended Channel Interpretation (ECI) mode</strong> 主要用于特殊的字符集。并不是所有的扫描器都支持这种编码。</p>\n<p><strong>Structured Append mode</strong> 用于混合编码，也就是说，这个二维码中包含了多种编码格式。</p>\n<p><strong>FNC1 mode</strong> 这种编码方式主要是给一些特殊的工业或行业用的。比如GS1条形码之类的。</p>\n<p>简单起见，后面三种不会在本文 中讨论。</p>\n<p>下面两张表中，</p>\n<ul>\n<li>Table 2 是各个编码格式的“编号”，这个东西要写在Format Information中。注：中文是1101</li>\n<li>Table 3 表示了，不同版本（尺寸）的二维码，对于，数字，字符，字节和Kanji模式下，对于单个编码的2进制的位数。（在二维码的规格说明书中，有各种各样的编码规范表，后面还会提到）<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Mode-Indicator.png\" alt=\"alt\"></li>\n</ul>\n<p>下面我们看几个示例，</p>\n<h2 id=\"示例一：数字编码\"><a href=\"#示例一：数字编码\" class=\"headerlink\" title=\"示例一：数字编码\"></a><strong>示例一：数字编码</strong></h2><p>在Version 1的尺寸下，纠错级别为H的情况下，编码： 01234567</p>\n<ol>\n<li><p>把上述数字分成三组: 012 345 67</p>\n</li>\n<li><p>把他们转成二进制:  012 转成 0000001100；  345 转成 0101011001；  67 转成 1000011。</p>\n</li>\n<li><p>把这三个二进制串起来: 0000001100 0101011001 1000011</p>\n</li>\n<li><p>把数字的个数转成二进制 (version 1-H是10 bits ): 8个数字的二进制是 0000001000</p>\n</li>\n<li><p>把数字编码的标志0001和第4步的编码加到前面:  0001 0000001000 0000001100 0101011001 1000011</p>\n</li>\n</ol>\n<h2 id=\"示例二：字符编码\"><a href=\"#示例二：字符编码\" class=\"headerlink\" title=\"示例二：字符编码\"></a><strong>示例二：字符编码</strong></h2><p>在Version 1的尺寸下，纠错级别为H的情况下，编码: AC-42</p>\n<ol>\n<li><p>从字符索引表中找到 AC-42 这五个字条的索引 (10,12,41,4,2)</p>\n</li>\n<li><p>两两分组: (10,12) (41,4) (2)</p>\n</li>\n<li><p>把每一组转成11bits的二进制:</p>\n<pre><code>(10,12) 10*45+12 等于 462 转成 00111001110\n(41,4) 41*45+4 等于 1849 转成 11100111001\n(2) 等于 2 转成 000010\n</code></pre></li>\n<li><p>把这些二进制连接起来：00111001110 11100111001 000010</p>\n</li>\n<li><p>把字符的个数转成二进制 (Version 1-H为9 bits ): 5个字符，5转成 000000101</p>\n</li>\n<li><p>在头上加上编码标识 0010 和第5步的个数编码:  0010 000000101 00111001110 11100111001 000010</p>\n</li>\n</ol>\n<h2 id=\"结束符和补齐符\"><a href=\"#结束符和补齐符\" class=\"headerlink\" title=\"结束符和补齐符\"></a><strong>结束符和补齐符</strong></h2><p>假如我们有个HELLO WORLD的字符串要编码，根据上面的示例二，我们可以得到下面的编码，</p>\n<table>\n<thead>\n<tr>\n<th>编码</th>\n<th style=\"text-align:center\">字符数</th>\n<th style=\"text-align:center\">HELLO WORLD的编码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0010</td>\n<td style=\"text-align:center\">000001011</td>\n<td style=\"text-align:center\">01100001011 01111000110 10001011100 10110111000 10011010100 001101</td>\n</tr>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>我们还要加上结束符<br>| 编码        | 字符数           | HELLO WORLD的编码  | 结束 |<br>| ————- |:————-:|:————-:| —–:|<br>| 0010      | 000001011 | 01100001011 01111000110 10001011100 10110111000 10011010100 001101 | 0000 |<br>| | |</p>\n<h2 id=\"按8bits重排\"><a href=\"#按8bits重排\" class=\"headerlink\" title=\"按8bits重排\"></a><strong>按8bits重排</strong></h2><p>如果所有的编码加起来不是8个倍数我们还要在后面加上足够的0，比如上面一共有78个bits，所以，我们还要加上2个0，然后按8个bits分好组：</p>\n<p>00100000   01011011   00001011   01111000   11010001   01110010   11011100   01001101   01000011   010000<font color=\"red\"><strong>00</strong></font></p>\n<h2 id=\"补齐码（Padding-Bytes）\"><a href=\"#补齐码（Padding-Bytes）\" class=\"headerlink\" title=\"补齐码（Padding Bytes）\"></a><strong>补齐码（Padding Bytes）</strong></h2><p>最后，如果如果还没有达到我们最大的bits数的限制，我们还要加一些补齐码（Padding Bytes），Padding Bytes就是重复下面的两个bytes：11101100 00010001 （这两个二进制转成十进制是236和17，我也不知道为什么，只知道Spec上是这么写的）关于每一个Version的每一种纠错级别的最大Bits限制，可以参看QR Code Spec的第28页到32页的Table-7一表。</p>\n<p>假设我们需要编码的是Version 1的Q纠错级，那么，其最大需要104个bits，而我们上面只有80个bits，所以，还需要补24个bits，也就是需要3个Padding Bytes，我们就添加三个，于是得到下面的编码：</p>\n<p>00100000 01011011 00001011 01111000 11010001 01110010 11011100 01001101 01000011 01000000 <font color=\"red\"><strong>11101100 00010001 11101100</strong></font></p>\n<p>上面的编码就是数据码了，叫Data Codewords，每一个8bits叫一个codeword，我们还要对这些数据码加上纠错信息。</p>\n<h1 id=\"纠错码\"><a href=\"#纠错码\" class=\"headerlink\" title=\"纠错码\"></a><strong>纠错码</strong></h1><p>上面我们说到了一些纠错级别，Error Correction Code Level，二维码中有四种级别的纠错，这就是为什么二维码有残缺还能扫出来，也就是为什么有人在二维码的中心位置加入图标。</p>\n<table>\n<thead>\n<tr>\n<th>错误修正容量</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>L水平</td>\n<td style=\"text-align:center\">7%的字码可被修正 </td>\n</tr>\n<tr>\n<td>M水平</td>\n<td style=\"text-align:center\">15%的字码可被修正 </td>\n</tr>\n<tr>\n<td>Q水平</td>\n<td style=\"text-align:center\">25%的字码可被修正</td>\n</tr>\n<tr>\n<td>H水平</td>\n<td style=\"text-align:center\">30%的字码可被修正</td>\n</tr>\n</tbody>\n</table>\n<p>那么，QR是怎么对数据码加上纠错码的？首先，我们需要对数据码进行分组，也就是分成不同的Block，然后对各个Block进行纠错编码，对于如何分组，我们可以查看QR Code Spec的第33页到44页的Table-13到Table-22的定义表。注意最后两列：</p>\n<ul>\n<li><strong>Number of Error Code Correction Blocks</strong>：需要分多少个块。</li>\n<li><strong>Error Correction Code Per Blocks</strong>：每一个块中的code个数，所谓的code的个数，也就是有多少个8bits的字节。</li>\n</ul>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Error-Correction-Blocks.png\" alt=\"alt\"></p>\n<p>举个例子：上述的Version 5 + Q纠错级：需要4个Blocks（2个Blocks为一组，共两组），头一组的两个Blocks中各15个bits数据 + 各 9个bits的纠错码（注：表中的codewords就是一个8bits的byte）（再注：最后一例中的（c, k, r ）的公式为：c = k + 2 * r，因为后脚注解释了：纠错码的容量小于纠错码的一半）</p>\n<p>下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）</p>\n<p>下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）</p>\n<table>\n<thead>\n<tr>\n<th>组</th>\n<th style=\"text-align:left\">块</th>\n<th style=\"text-align:left\">数据</th>\n<th style=\"text-align:left\">对每个块的纠错码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">67 85 70 134 87 38 85 194 119 50 6 18 6 103 38</td>\n<td style=\"text-align:left\">213 199 11 45 115 247 241 223 229 248 154 117 154 111 86 161 111 39</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">246 246 66 7 118 134 242 7 38 86 22 198 199 146 6</td>\n<td style=\"text-align:left\">87 204 96 60 202 182 124 157 200 134 27 129 209 17 163 163 120 133</td>\n</tr>\n<tr>\n<td>2</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">182 230 247 119 50 7 118 134 87 38 82 6 134 151 50 7</td>\n<td style=\"text-align:left\">148 116 177 212 76 133 75 242 238 76 195 230 189 10 108 240 192 141</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">70 247 118 86 194 6 151 50 16 236 17 236 17 236 17 236</td>\n<td style=\"text-align:left\">235 159 5 173 24 147 59 33 106 40 255 172 82 2 131 32 178 236</td>\n</tr>\n</tbody>\n</table>\n<p>注：二维码的纠错码主要是通过<a href=\"http://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction\" target=\"_blank\" rel=\"external\">Reed-Solomon error correction</a>（里德-所罗门纠错算法）来实现的。对于这个算法，对于我来说是相当的复杂，里面有很多的数学计算，比如：多项式除法，把1-255的数映射成2的n次方（0&lt;=n&lt;=255）的伽罗瓦域Galois Field之类的神一样的东西，以及基于这些基础的纠错数学公式，因为我的数据基础差，对于我来说太过复杂，所以我一时半会儿还有点没搞明白，还在学习中，所以，我在这里就不展开说这些东西了。还请大家见谅了。（当然，如果有朋友很明白，也繁请教教我）</p>\n<h1 id=\"最终编码\"><a href=\"#最终编码\" class=\"headerlink\" title=\"最终编码\"></a><strong>最终编码</strong></h1><h2 id=\"穿插放置\"><a href=\"#穿插放置\" class=\"headerlink\" title=\"穿插放置\"></a>穿插放置</h2><p>如果你以为我们可以开始画图，你就错了。二维码的混乱技术还没有玩完，它还要把数据码和纠错码的各个codewords交替放在一起。如何交替呢，规则如下：</p>\n<p>对于数据码：把每个块的第一个codewords先拿出来按顺度排列好，然后再取第一块的第二个，如此类推。如：上述示例中的Data Codewords如下：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>块 1</td>\n<td>67</td>\n<td>85</td>\n<td>70</td>\n<td>134</td>\n<td>87</td>\n<td>38</td>\n<td>85</td>\n<td>194</td>\n<td>119</td>\n<td>50</td>\n<td>6</td>\n<td>18</td>\n<td>6</td>\n<td>103</td>\n<td>38</td>\n<td></td>\n</tr>\n<tr>\n<td>块 2</td>\n<td>246</td>\n<td>246</td>\n<td>66</td>\n<td>7</td>\n<td>118</td>\n<td>134</td>\n<td>242</td>\n<td>7</td>\n<td>38</td>\n<td>86</td>\n<td>22</td>\n<td>198</td>\n<td>199</td>\n<td>146</td>\n<td>6</td>\n<td></td>\n</tr>\n<tr>\n<td>块 3</td>\n<td>182</td>\n<td>230</td>\n<td>247</td>\n<td>119</td>\n<td>50</td>\n<td>7</td>\n<td>118</td>\n<td>134</td>\n<td>87</td>\n<td>38</td>\n<td>82</td>\n<td>6</td>\n<td>134</td>\n<td>151</td>\n<td>50</td>\n<td>7</td>\n</tr>\n<tr>\n<td>块 4</td>\n<td>70</td>\n<td>247</td>\n<td>118</td>\n<td>86</td>\n<td>194</td>\n<td>6</td>\n<td>151</td>\n<td>50</td>\n<td>16</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n<td>17</td>\n<td>236</td>\n</tr>\n</tbody>\n</table>\n<p>我们先取第一列的：67， 246， 182， 70</p>\n<p>然后再取第二列的：67， 246， 182， 70， 85，246，230 ，247</p>\n<p>如此类推：67， 246， 182， 70， 85，246，230 ，247 ………  ……… ，38，6，50，17，7，236</p>\n<p>对于纠错码，也是一样：<br>||||||||||||||||||<br>| — | — | — | — | — | — | — | — | — | — | — | — | — | — | — | — | — |<br>|块 1|    213|    199|    11|    45|    115|    247|    241|    223|    229|    248|    154|    117|    154|    111|    86|    161|    111|    39|<br>|块 2|    87|    204|    96|    60|    202|    182|    124|    157|    200|    134|    27|    129|    209|    17|    163|    163|    120|    133|<br>|块 3|    148|    116|    177|    212|    76|    133|    75|    242|    238|    76|    195|    230|    189|    10|    108|    240|    192|    141|<br>|块 4|    235|    159|    5|    173|    24|    147|    59|    33|    106|    40|    255|    172|    82|    2|    131|    32|    178|    236|</p>\n<p>和数据码取的一样，得到：213，87，148，235，199，204，116，159，…… …… 39，133，141，236</p>\n<p>然后，再把这两组放在一起（纠错码放在数据码之后）得到：</p>\n<p>67, 246, 182, 70, 85, 246, 230, 247, 70, 66, 247, 118, 134, 7, 119, 86, 87, 118, 50, 194, 38, 134, 7, 6, 85, 242, 118, 151, 194, 7, 134, 50, 119, 38, 87, 16, 50, 86, 38, 236, 6, 22, 82, 17, 18, 198, 6, 236, 6, 199, 134, 17, 103, 146, 151, 236, 38, 6, 50, 17, 7, 236, 213, 87, 148, 235, 199, 204, 116, 159, 11, 96, 177, 5, 45, 60, 212, 173, 115, 202, 76, 24, 247, 182, 133, 147, 241, 124, 75, 59, 223, 157, 242, 33, 229, 200, 238, 106, 248, 134, 76, 40, 154, 27, 195, 255, 117, 129, 230, 172, 154, 209, 189, 82, 111, 17, 10, 2, 86, 163, 108, 131, 161, 163, 240, 32, 111, 120, 192, 178, 39, 133, 141, 236</p>\n<p>这就是我们的数据区。</p>\n<h2 id=\"Remainder-Bits\"><a href=\"#Remainder-Bits\" class=\"headerlink\" title=\"Remainder Bits\"></a><strong>Remainder Bits</strong></h2><p>最后再加上Reminder Bits，对于某些Version的QR，上面的还不够长度，还要加上Remainder Bits，比如：上述的5Q版的二维码，还要加上7个bits，Remainder Bits加零就好了。关于哪些Version需要多少个Remainder bit，可以参看QR Code Spec的第15页的Table-1的定义表。</p>\n<h1 id=\"画二维码图\"><a href=\"#画二维码图\" class=\"headerlink\" title=\"画二维码图\"></a><strong>画二维码图</strong></h1><h2 id=\"Position-Detection-Pattern\"><a href=\"#Position-Detection-Pattern\" class=\"headerlink\" title=\"Position Detection Pattern\"></a><strong>Position Detection Pattern</strong></h2><p>首先，先把Position Detection图案画在三个角上。（无论Version如何，这个图案的尺寸就是这么大）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/finder.png\" alt=\"alt\"></p>\n<h2 id=\"Alignment-Pattern\"><a href=\"#Alignment-Pattern\" class=\"headerlink\" title=\"Alignment Pattern\"></a><strong>Alignment Pattern</strong></h2><p>然后，再把Alignment图案画上（无论Version如何，这个图案的尺寸就是这么大）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/alignment-pattern.png\" alt=\"alt\"></p>\n<p>关于Alignment的位置，可以查看QR Code Spec的第81页的Table-E.1的定义表（下表是不完全表格）<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Alignment-Position.png\" alt=\"alt\"></p>\n<p>下图是根据上述表格中的Version8的一个例子（6，24，42）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/alignment-example.png\" alt=\"alt\"></p>\n<h2 id=\"Timing-Pattern\"><a href=\"#Timing-Pattern\" class=\"headerlink\" title=\"Timing Pattern\"></a><strong>Timing Pattern</strong></h2><p>接下来是Timing Pattern的线（这个不用多说了）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Timing-Pattern.png\" alt=\"alt\"></p>\n<h2 id=\"Format-Information\"><a href=\"#Format-Information\" class=\"headerlink\" title=\"Format Information\"></a><strong>Format Information</strong></h2><p>再接下来是Formation Information，下图中的蓝色部分。</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Format-Information.png\" alt=\"alt\"></p>\n<p>Format Information是一个15个bits的信息，每一个bit的位置如下图所示：（注意图中的Dark Module，那是永远出现的）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Format-Info-bits-postion.png\" alt=\"alt\"></p>\n<p>这15个bits中包括：</p>\n<ul>\n<li>5个数据bits：其中，2个bits用于表示使用什么样的Error Correction Level， 3个bits表示使用什么样的Mask</li>\n<li>10个纠错bits。主要通过BCH Code来计算</li>\n</ul>\n<p>然后15个bits还要与101010000010010做XOR操作。这样就保证不会因为我们选用了00的纠错级别和000的Mask，从而造成全部为白色，这会增加我们的扫描器的图像识别的困难。</p>\n<p>下面是一个示例：</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Format-Information-Example.png\" alt=\"alt\"></p>\n<p>关于Error Correction Level如下表所示：</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Error-Correction-Indicator-Code.png\" alt=\"alt\"></p>\n<p>关于Mask图案如后面的Table 23所示。</p>\n<h2 id=\"Version-Information\"><a href=\"#Version-Information\" class=\"headerlink\" title=\"Version Information\"></a><strong>Version Information</strong></h2><p>再接下来是Version Information（版本7以后需要这个编码），下图中的蓝色部分。<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Version-Information.png\" alt=\"alt\"></p>\n<p>Version Information一共是18个bits，其中包括6个bits的版本号以及12个bits的纠错码，下面是一个示例：<br><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Example.png\" alt=\"alt\"></p>\n<p>而其填充位置如下：</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Version-Information-Position.png\" alt=\"alt\"></p>\n<h2 id=\"数据和数据纠错码\"><a href=\"#数据和数据纠错码\" class=\"headerlink\" title=\"数据和数据纠错码\"></a><strong>数据和数据纠错码</strong></h2><p>然后是填接我们的最终编码，最终编码的填充方式如下：从左下角开始沿着红线填我们的各个bits，1是黑色，0是白色。如果遇到了上面的非数据区，则绕开或跳过。</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Data-Placement.png\" alt=\"alt\"></p>\n<h2 id=\"掩码图案\"><a href=\"#掩码图案\" class=\"headerlink\" title=\"掩码图案\"></a><strong>掩码图案</strong></h2><p>这样下来，我们的图就填好了，但是，也许那些点并不均衡，如果出现大面积的空白或黑块，会告诉我们扫描识别的困难。所以，我们还要做Masking操作（靠，还嫌不复杂）QR的Spec中说了，QR有8个Mask你可以使用，如下所示：其中，各个mask的公式在各个图下面。所谓mask，说白了，就是和上面生成的图做XOR操作。Mask只会和数据区进行XOR，不会影响功能区。（注：选择一个合适的Mask也是有算法的）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/masking-pattern.png\" alt=\"alt\"></p>\n<p>其Mask的标识码如下所示：（其中的i,j分别对应于上图的x,y）</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Mask-Pattern-Code.png\" alt=\"alt\"></p>\n<p>下面是Mask后的一些样子，我们可以看到被某些Mask XOR了的数据变得比较零散了。</p>\n<p><img src=\"http://coolshell.cn/wp-content/uploads/2013/10/Masking-Examples.png\" alt=\"alt\"></p>\n<p>Mask过后的二维码就成最终的图了。</p>\n<p>好了，大家可以去尝试去写一下QR的编码程序，当然，你可以用网上找个Reed Soloman的纠错算法的库，或是看看别人的源代码是怎么实现这个繁锁的编码。</p>\n"},{"title":"kotlin惯用法","date":"2017-05-26T02:01:03.000Z","_content":"\nkotlin提供了一些惯用法（语法糖？），简单的记录一下。\n\n## data class\n有时候需要一些类要保存数据，而不需要其他操作，当然基本操作除外，kotlin为data class提供的基本操作有：\n\n- equals() 相当与“==”操作\n- hashCode() 计算hash值\n- toString() 函数\n- componentsN() 函数\n- copy() 拷贝\n\n```kotlin\n\ndata class User(val name: String = \"nobody\", val age: Int = 0)\n\nfun main(args: Array<String>) {\n    //默认参数\n    val nobody = User()\n    //User(name=nobody, age=0)\n    println(nobody)\n    \n    val johnny = User(\"Johnny\", 29)\n    //解构赋值\n    val (name, age) = johnny\n    //name: Johnny, age: 29\n    println(\"name: $name, age: $age\")\n    \n    //toString用法\n    //User(name=Johnny, age=29)\n    println(johnny)\n    \n    //hashCode用法\n    //233064103\n    println(johnny.hashCode())\n    \n    //\"==\" 和\"===\"\n    //true\n    println(\"johnny == johnny  ${johnny == johnny}\")\n    //true\n    println(\"johnny === johnny  ${johnny === johnny}\")\n    \n    //copy用法\n    val youngJohnny = johnny.copy(age = 2)\n    //\"User(name=Johnny, age=2)\"\n    println(youngJohnny)\n    //false\n    println(\"johnny == youngJohnny  ${johnny == youngJohnny}\")\n    //false\n    println(\"johnny === youngJohnny  ${johnny === youngJohnny}\")\n    //false\n    println(\"johnny.hashCode() == yongJohnny.hashCode() ${johnny.hashCode() == youngJohnny.hashCode()}\")\n    \n    val copyJohnny = johnny.copy()\n    //true\n    println(\"johnny == copyJohnny  ${johnny == copyJohnny}\")\n    //false\n    println(\"johnny === copyJohnny  ${johnny === copyJohnny}\")\n    //true\n    println(\"johnny.equals(copyJohnny)  ${johnny.equals(copyJohnny)}\")\n    //true\n    println(\"johnny.hashCode() == copyJohnny.hashCode() ${johnny.hashCode() == copyJohnny.hashCode()}\")\n    \n    val anotherJohnny = User(\"Johnny\", 29)\n    //true\n    println(\"johnny == anotherJohnny  ${johnny == anotherJohnny}\")\n    //false\n    println(\"johnny === anotherJohnny  ${johnny === anotherJohnny}\")\n    //true\n    println(\"johnny.equals(anotherJohnny)  ${johnny.equals(anotherJohnny)}\")\n    //true\n    println(\"johnny.hashCode() == anotherJohnny.hashCode() ${johnny.hashCode() == anotherJohnny.hashCode()}\")\n}\n```\n<!-- more -->\n\n## 函数(包括构造函数)的默认值\n\n如上例的\n```kotlin\ndata class User(val name: String = \"nobody\", val age: Int = 0)\n```\n对于普通函数\n```kotlin\nfun foo(a: Int = 0, b: String = \"\") { ... }\n```\n\n有了默认的参数，就可以避免写多个重载函数\n如下面的java代码\n```java\npublic String foo(String name, int number, boolean toUpperCase) {\n    return (toUpperCase ? name.toUpperCase() : name) + number;\n}\npublic String foo(String name, int number) {\n    return foo(name, number, false);\n}\npublic String foo(String name, boolean toUpperCase) {\n    return foo(name, 42, toUpperCase);\n}\npublic String foo(String name) {\n    return foo(name, 42);\n}\n```\n可以用一个kotlin函数表示\n```kotlin\nfun foo(name: String, number: Int = 42, toUpperCase: Boolean = false) =\n        (if (toUpperCase) name.toUpperCase() else name) + number\n```\n\n## 过滤list\n```kotlin\nval positives = list.filter { x => x > 0}\n```\n甚至可以更简洁一点\n```kotlin\nval positives = list.filter { it > 0 }\n```\n\n## 字符串模板\n```kotlin\nprintln(\"Name $name\")\n```\n\n## 类型检查\n```kotlin\nwhen (x) {\n    is Foo -> ...\n    is Bar -> ...\n    else   -> ...\n}\n```\n\n## 遍历集合\n```kotlin\nfor ((k, v) in map) {\n    println(\"$k -> $v\")\n}\n```\n\n## 使用范围（Ranges）\n```kotlin\nfor (i in 1..100) { ... }  // 闭区间包含100\nfor (i in 1 until 100) { ... } // 半开区间，不包含100\nfor (x in 2..10 step 2) { ... } \nfor (x in 10 downTo 1) { ... }\nif (x in 1..10) { ... }\n```\n\n## 构造只读列表\n```kotlin\nval list = listOf(\"a\", \"b\", \"c\")\n```\n\n## 构造只读map\n```kotlin\nval map = mapOf(\"a\" to 1, \"b\" to 2, \"c\" to 3)\n```\n\n## 访问map\n```kotlin\nprintln(map[\"key\"])\nmap[\"key\"] = value\n```\n\n## 延迟加载\n```kotlin\nval p: String by lazy {\n    // compute the string\n}\n```\n\n## 函数扩展\n```kotlin\nfun String.spaceToCamelCase() { ... }\n\n\"Convert this to camelcase\".spaceToCamelCase()\n```\n\n## 创建单例\n```kotlin\nobject Resource {\n    var name = \"Name\"\n}\n\nfun main(args: Array<String>) {\n\tvar rs = Resource;\n    //Name\n    println(rs.name)\n    var rs2 = Resource;\n    //Name\n    println(rs2.name)\n    rs.name = \"Anthoer\"\n    //Another\n    println(rs.name)\n    //Another\n    println(rs2.name)\n}\n```\n\n## 判断null\n\n### ?.\n```kotlin\nval files = File(\"Test\").listFiles()\n\nprintln(files?.size)\n```\n例如：\n```kotlin\nfun getList(isNull: Boolean): List<String>? =\n    if(isNull) null else listOf(\"a\", \"b\", \"c\")\n\nfun main(args: Array<String>) {\n    var list = getList(true)\n    //\"null\"\n    println(list?.size)\n    \n    list = getList(false)\n    //\"3\"\n    println(list?.size)\n}\n```\n### ?. 可以执行语句块\nval data = ...\n\ndata?.let {\n    ... // execute this block if not null\n}\n\n### ?:\n上述println语句可以改为\n```kotlin\nprintln(list?.size ?: \"empty\" )\n```\n这打印结果如下\n```\nempty\n3\n```\n### ?: 后面的字符串也可以换成表达式\n```kotlin\nval data = ...\nval email = data[\"email\"] ?: throw IllegalStateException(\"Email is missing!\")\n```\n\n## 返回when语句\n```kotlin\nfun transform(color: String): Int {\n    return when (color) {\n        \"Red\" -> 0\n        \"Green\" -> 1\n        \"Blue\" -> 2\n        else -> throw IllegalArgumentException(\"Invalid color param value\")\n    }\n}\n```\n\n## 'try/catch' 表达式\n```kotlin\nfun test() {\n    val result = try {\n        count()\n    } catch (e: ArithmeticException) {\n        throw IllegalStateException(e)\n    }\n\n    // result是count()返回值\n}\n```\n\n## 'if'表达式\n```kotlin\nfun foo(param: Int) {\n    val result = if (param == 1) {\n        \"one\"\n    } else if (param == 2) {\n        \"two\"\n    } else {\n        \"three\"\n    }\n}\n```\n\n\n## 表达式函数\n```kotlin\nfun theAnswer() = 42\n```\n等于如下函数\n```kotlin\nfun theAnswer(): Int {\n    return 42\n}\n```\n表达式函数可以很方便的和其他惯用法结合在一起使用\n```kotlin\nfun transform(color: String): Int = when (color) {\n    \"Red\" -> 0\n    \"Green\" -> 1\n    \"Blue\" -> 2\n    else -> throw IllegalArgumentException(\"Invalid color param value\")\n}\n```\n\n## with语句（ES6不是快废除这个了？）\nwith语句块的函数都是对()括号内的对象的方法调用。\n```kotlin\nclass Turtle {\n    fun penDown()\n    fun penUp()\n    fun turn(degrees: Double)\n    fun forward(pixels: Double)\n}\n\nval myTurtle = Turtle()\nwith(myTurtle) { //draw a 100 pix square\n    penDown()\n    for(i in 1..4) {\n        forward(100.0)\n        turn(90.0)\n    }\n    penUp()\n}\n```\n\n## nullable的Boolean对象\n```kotlin\nval b: Boolean? = ...\nif (b == true) {\n    ...\n} else {\n    // `b` 为false或者null\n}\n```\n","source":"_posts/kotlin惯用法.md","raw":"---\ntitle: kotlin惯用法\ndate: 2017-05-26 10:01:03\ntags: kotlin\n---\n\nkotlin提供了一些惯用法（语法糖？），简单的记录一下。\n\n## data class\n有时候需要一些类要保存数据，而不需要其他操作，当然基本操作除外，kotlin为data class提供的基本操作有：\n\n- equals() 相当与“==”操作\n- hashCode() 计算hash值\n- toString() 函数\n- componentsN() 函数\n- copy() 拷贝\n\n```kotlin\n\ndata class User(val name: String = \"nobody\", val age: Int = 0)\n\nfun main(args: Array<String>) {\n    //默认参数\n    val nobody = User()\n    //User(name=nobody, age=0)\n    println(nobody)\n    \n    val johnny = User(\"Johnny\", 29)\n    //解构赋值\n    val (name, age) = johnny\n    //name: Johnny, age: 29\n    println(\"name: $name, age: $age\")\n    \n    //toString用法\n    //User(name=Johnny, age=29)\n    println(johnny)\n    \n    //hashCode用法\n    //233064103\n    println(johnny.hashCode())\n    \n    //\"==\" 和\"===\"\n    //true\n    println(\"johnny == johnny  ${johnny == johnny}\")\n    //true\n    println(\"johnny === johnny  ${johnny === johnny}\")\n    \n    //copy用法\n    val youngJohnny = johnny.copy(age = 2)\n    //\"User(name=Johnny, age=2)\"\n    println(youngJohnny)\n    //false\n    println(\"johnny == youngJohnny  ${johnny == youngJohnny}\")\n    //false\n    println(\"johnny === youngJohnny  ${johnny === youngJohnny}\")\n    //false\n    println(\"johnny.hashCode() == yongJohnny.hashCode() ${johnny.hashCode() == youngJohnny.hashCode()}\")\n    \n    val copyJohnny = johnny.copy()\n    //true\n    println(\"johnny == copyJohnny  ${johnny == copyJohnny}\")\n    //false\n    println(\"johnny === copyJohnny  ${johnny === copyJohnny}\")\n    //true\n    println(\"johnny.equals(copyJohnny)  ${johnny.equals(copyJohnny)}\")\n    //true\n    println(\"johnny.hashCode() == copyJohnny.hashCode() ${johnny.hashCode() == copyJohnny.hashCode()}\")\n    \n    val anotherJohnny = User(\"Johnny\", 29)\n    //true\n    println(\"johnny == anotherJohnny  ${johnny == anotherJohnny}\")\n    //false\n    println(\"johnny === anotherJohnny  ${johnny === anotherJohnny}\")\n    //true\n    println(\"johnny.equals(anotherJohnny)  ${johnny.equals(anotherJohnny)}\")\n    //true\n    println(\"johnny.hashCode() == anotherJohnny.hashCode() ${johnny.hashCode() == anotherJohnny.hashCode()}\")\n}\n```\n<!-- more -->\n\n## 函数(包括构造函数)的默认值\n\n如上例的\n```kotlin\ndata class User(val name: String = \"nobody\", val age: Int = 0)\n```\n对于普通函数\n```kotlin\nfun foo(a: Int = 0, b: String = \"\") { ... }\n```\n\n有了默认的参数，就可以避免写多个重载函数\n如下面的java代码\n```java\npublic String foo(String name, int number, boolean toUpperCase) {\n    return (toUpperCase ? name.toUpperCase() : name) + number;\n}\npublic String foo(String name, int number) {\n    return foo(name, number, false);\n}\npublic String foo(String name, boolean toUpperCase) {\n    return foo(name, 42, toUpperCase);\n}\npublic String foo(String name) {\n    return foo(name, 42);\n}\n```\n可以用一个kotlin函数表示\n```kotlin\nfun foo(name: String, number: Int = 42, toUpperCase: Boolean = false) =\n        (if (toUpperCase) name.toUpperCase() else name) + number\n```\n\n## 过滤list\n```kotlin\nval positives = list.filter { x => x > 0}\n```\n甚至可以更简洁一点\n```kotlin\nval positives = list.filter { it > 0 }\n```\n\n## 字符串模板\n```kotlin\nprintln(\"Name $name\")\n```\n\n## 类型检查\n```kotlin\nwhen (x) {\n    is Foo -> ...\n    is Bar -> ...\n    else   -> ...\n}\n```\n\n## 遍历集合\n```kotlin\nfor ((k, v) in map) {\n    println(\"$k -> $v\")\n}\n```\n\n## 使用范围（Ranges）\n```kotlin\nfor (i in 1..100) { ... }  // 闭区间包含100\nfor (i in 1 until 100) { ... } // 半开区间，不包含100\nfor (x in 2..10 step 2) { ... } \nfor (x in 10 downTo 1) { ... }\nif (x in 1..10) { ... }\n```\n\n## 构造只读列表\n```kotlin\nval list = listOf(\"a\", \"b\", \"c\")\n```\n\n## 构造只读map\n```kotlin\nval map = mapOf(\"a\" to 1, \"b\" to 2, \"c\" to 3)\n```\n\n## 访问map\n```kotlin\nprintln(map[\"key\"])\nmap[\"key\"] = value\n```\n\n## 延迟加载\n```kotlin\nval p: String by lazy {\n    // compute the string\n}\n```\n\n## 函数扩展\n```kotlin\nfun String.spaceToCamelCase() { ... }\n\n\"Convert this to camelcase\".spaceToCamelCase()\n```\n\n## 创建单例\n```kotlin\nobject Resource {\n    var name = \"Name\"\n}\n\nfun main(args: Array<String>) {\n\tvar rs = Resource;\n    //Name\n    println(rs.name)\n    var rs2 = Resource;\n    //Name\n    println(rs2.name)\n    rs.name = \"Anthoer\"\n    //Another\n    println(rs.name)\n    //Another\n    println(rs2.name)\n}\n```\n\n## 判断null\n\n### ?.\n```kotlin\nval files = File(\"Test\").listFiles()\n\nprintln(files?.size)\n```\n例如：\n```kotlin\nfun getList(isNull: Boolean): List<String>? =\n    if(isNull) null else listOf(\"a\", \"b\", \"c\")\n\nfun main(args: Array<String>) {\n    var list = getList(true)\n    //\"null\"\n    println(list?.size)\n    \n    list = getList(false)\n    //\"3\"\n    println(list?.size)\n}\n```\n### ?. 可以执行语句块\nval data = ...\n\ndata?.let {\n    ... // execute this block if not null\n}\n\n### ?:\n上述println语句可以改为\n```kotlin\nprintln(list?.size ?: \"empty\" )\n```\n这打印结果如下\n```\nempty\n3\n```\n### ?: 后面的字符串也可以换成表达式\n```kotlin\nval data = ...\nval email = data[\"email\"] ?: throw IllegalStateException(\"Email is missing!\")\n```\n\n## 返回when语句\n```kotlin\nfun transform(color: String): Int {\n    return when (color) {\n        \"Red\" -> 0\n        \"Green\" -> 1\n        \"Blue\" -> 2\n        else -> throw IllegalArgumentException(\"Invalid color param value\")\n    }\n}\n```\n\n## 'try/catch' 表达式\n```kotlin\nfun test() {\n    val result = try {\n        count()\n    } catch (e: ArithmeticException) {\n        throw IllegalStateException(e)\n    }\n\n    // result是count()返回值\n}\n```\n\n## 'if'表达式\n```kotlin\nfun foo(param: Int) {\n    val result = if (param == 1) {\n        \"one\"\n    } else if (param == 2) {\n        \"two\"\n    } else {\n        \"three\"\n    }\n}\n```\n\n\n## 表达式函数\n```kotlin\nfun theAnswer() = 42\n```\n等于如下函数\n```kotlin\nfun theAnswer(): Int {\n    return 42\n}\n```\n表达式函数可以很方便的和其他惯用法结合在一起使用\n```kotlin\nfun transform(color: String): Int = when (color) {\n    \"Red\" -> 0\n    \"Green\" -> 1\n    \"Blue\" -> 2\n    else -> throw IllegalArgumentException(\"Invalid color param value\")\n}\n```\n\n## with语句（ES6不是快废除这个了？）\nwith语句块的函数都是对()括号内的对象的方法调用。\n```kotlin\nclass Turtle {\n    fun penDown()\n    fun penUp()\n    fun turn(degrees: Double)\n    fun forward(pixels: Double)\n}\n\nval myTurtle = Turtle()\nwith(myTurtle) { //draw a 100 pix square\n    penDown()\n    for(i in 1..4) {\n        forward(100.0)\n        turn(90.0)\n    }\n    penUp()\n}\n```\n\n## nullable的Boolean对象\n```kotlin\nval b: Boolean? = ...\nif (b == true) {\n    ...\n} else {\n    // `b` 为false或者null\n}\n```\n","slug":"kotlin惯用法","published":1,"updated":"2017-05-26T03:47:58.791Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o57001oiwl7fk8leocp","content":"<p>kotlin提供了一些惯用法（语法糖？），简单的记录一下。</p>\n<h2 id=\"data-class\"><a href=\"#data-class\" class=\"headerlink\" title=\"data class\"></a>data class</h2><p>有时候需要一些类要保存数据，而不需要其他操作，当然基本操作除外，kotlin为data class提供的基本操作有：</p>\n<ul>\n<li>equals() 相当与“==”操作</li>\n<li>hashCode() 计算hash值</li>\n<li>toString() 函数</li>\n<li>componentsN() 函数</li>\n<li>copy() 拷贝</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>(<span class=\"keyword\">val</span> name: String = <span class=\"string\">\"nobody\"</span>, <span class=\"keyword\">val</span> age: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//默认参数</span></div><div class=\"line\">    <span class=\"keyword\">val</span> nobody = User()</div><div class=\"line\">    <span class=\"comment\">//User(name=nobody, age=0)</span></div><div class=\"line\">    println(nobody)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">val</span> johnny = User(<span class=\"string\">\"Johnny\"</span>, <span class=\"number\">29</span>)</div><div class=\"line\">    <span class=\"comment\">//解构赋值</span></div><div class=\"line\">    <span class=\"keyword\">val</span> (name, age) = johnny</div><div class=\"line\">    <span class=\"comment\">//name: Johnny, age: 29</span></div><div class=\"line\">    println(<span class=\"string\">\"name: <span class=\"subst\">$name</span>, age: <span class=\"subst\">$age</span>\"</span>)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//toString用法</span></div><div class=\"line\">    <span class=\"comment\">//User(name=Johnny, age=29)</span></div><div class=\"line\">    println(johnny)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//hashCode用法</span></div><div class=\"line\">    <span class=\"comment\">//233064103</span></div><div class=\"line\">    println(johnny.hashCode())</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//\"==\" 和\"===\"</span></div><div class=\"line\">    <span class=\"comment\">//true</span></div><div class=\"line\">    println(<span class=\"string\">\"johnny == johnny  <span class=\"subst\">$&#123;johnny == johnny&#125;</span>\"</span>)</div><div class=\"line\">    <span class=\"comment\">//true</span></div><div class=\"line\">    println(<span class=\"string\">\"johnny === johnny  <span class=\"subst\">$&#123;johnny === johnny&#125;</span>\"</span>)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//copy用法</span></div><div class=\"line\">    <span class=\"keyword\">val</span> youngJohnny = johnny.copy(age = <span class=\"number\">2</span>)</div><div class=\"line\">    <span class=\"comment\">//\"User(name=Johnny, age=2)\"</span></div><div class=\"line\">    println(youngJohnny)</div><div class=\"line\">    <span class=\"comment\">//false</span></div><div class=\"line\">    println(<span class=\"string\">\"johnny == youngJohnny  <span class=\"subst\">$&#123;johnny == youngJohnny&#125;</span>\"</span>)</div><div class=\"line\">    <span class=\"comment\">//false</span></div><div class=\"line\">    println(<span class=\"string\">\"johnny === youngJohnny  <span class=\"subst\">$&#123;johnny === youngJohnny&#125;</span>\"</span>)</div><div class=\"line\">    <span class=\"comment\">//false</span></div><div class=\"line\">    println(<span class=\"string\">\"johnny.hashCode() == yongJohnny.hashCode() <span class=\"subst\">$&#123;johnny.hashCode() == youngJohnny.hashCode()&#125;</span>\"</span>)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">val</span> copyJohnny = johnny.copy()</div><div class=\"line\">    <span class=\"comment\">//true</span></div><div class=\"line\">    println(<span class=\"string\">\"johnny == copyJohnny  <span class=\"subst\">$&#123;johnny == copyJohnny&#125;</span>\"</span>)</div><div class=\"line\">    <span class=\"comment\">//false</span></div><div class=\"line\">    println(<span class=\"string\">\"johnny === copyJohnny  <span class=\"subst\">$&#123;johnny === copyJohnny&#125;</span>\"</span>)</div><div class=\"line\">    <span class=\"comment\">//true</span></div><div class=\"line\">    println(<span class=\"string\">\"johnny.equals(copyJohnny)  <span class=\"subst\">$&#123;johnny.equals(copyJohnny)&#125;</span>\"</span>)</div><div class=\"line\">    <span class=\"comment\">//true</span></div><div class=\"line\">    println(<span class=\"string\">\"johnny.hashCode() == copyJohnny.hashCode() <span class=\"subst\">$&#123;johnny.hashCode() == copyJohnny.hashCode()&#125;</span>\"</span>)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">val</span> anotherJohnny = User(<span class=\"string\">\"Johnny\"</span>, <span class=\"number\">29</span>)</div><div class=\"line\">    <span class=\"comment\">//true</span></div><div class=\"line\">    println(<span class=\"string\">\"johnny == anotherJohnny  <span class=\"subst\">$&#123;johnny == anotherJohnny&#125;</span>\"</span>)</div><div class=\"line\">    <span class=\"comment\">//false</span></div><div class=\"line\">    println(<span class=\"string\">\"johnny === anotherJohnny  <span class=\"subst\">$&#123;johnny === anotherJohnny&#125;</span>\"</span>)</div><div class=\"line\">    <span class=\"comment\">//true</span></div><div class=\"line\">    println(<span class=\"string\">\"johnny.equals(anotherJohnny)  <span class=\"subst\">$&#123;johnny.equals(anotherJohnny)&#125;</span>\"</span>)</div><div class=\"line\">    <span class=\"comment\">//true</span></div><div class=\"line\">    println(<span class=\"string\">\"johnny.hashCode() == anotherJohnny.hashCode() <span class=\"subst\">$&#123;johnny.hashCode() == anotherJohnny.hashCode()&#125;</span>\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"函数-包括构造函数-的默认值\"><a href=\"#函数-包括构造函数-的默认值\" class=\"headerlink\" title=\"函数(包括构造函数)的默认值\"></a>函数(包括构造函数)的默认值</h2><p>如上例的<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>(<span class=\"keyword\">val</span> name: String = <span class=\"string\">\"nobody\"</span>, <span class=\"keyword\">val</span> age: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>)</div></pre></td></tr></table></figure></p>\n<p>对于普通函数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">(a: <span class=\"type\">Int</span> = <span class=\"number\">0</span>, b: <span class=\"type\">String</span> = <span class=\"string\">\"\"</span>)</span></span> &#123; ... &#125;</div></pre></td></tr></table></figure></p>\n<p>有了默认的参数，就可以避免写多个重载函数<br>如下面的java代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">foo</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> number, <span class=\"keyword\">boolean</span> toUpperCase)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (toUpperCase ? name.toUpperCase() : name) + number;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">foo</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> number)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> foo(name, number, <span class=\"keyword\">false</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">foo</span><span class=\"params\">(String name, <span class=\"keyword\">boolean</span> toUpperCase)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> foo(name, <span class=\"number\">42</span>, toUpperCase);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">foo</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> foo(name, <span class=\"number\">42</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以用一个kotlin函数表示<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">(name: <span class=\"type\">String</span>, number: <span class=\"type\">Int</span> = <span class=\"number\">42</span>, toUpperCase: <span class=\"type\">Boolean</span> = <span class=\"literal\">false</span>)</span></span> =</div><div class=\"line\">        (<span class=\"keyword\">if</span> (toUpperCase) name.toUpperCase() <span class=\"keyword\">else</span> name) + number</div></pre></td></tr></table></figure></p>\n<h2 id=\"过滤list\"><a href=\"#过滤list\" class=\"headerlink\" title=\"过滤list\"></a>过滤list</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> positives = list.filter &#123; x =&gt; x &gt; <span class=\"number\">0</span>&#125;</div></pre></td></tr></table></figure>\n<p>甚至可以更简洁一点<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> positives = list.filter &#123; it &gt; <span class=\"number\">0</span> &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"字符串模板\"><a href=\"#字符串模板\" class=\"headerlink\" title=\"字符串模板\"></a>字符串模板</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">println(<span class=\"string\">\"Name <span class=\"subst\">$name</span>\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"类型检查\"><a href=\"#类型检查\" class=\"headerlink\" title=\"类型检查\"></a>类型检查</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">when</span> (x) &#123;</div><div class=\"line\">    <span class=\"keyword\">is</span> Foo -&gt; ...</div><div class=\"line\">    <span class=\"keyword\">is</span> Bar -&gt; ...</div><div class=\"line\">    <span class=\"keyword\">else</span>   -&gt; ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"遍历集合\"><a href=\"#遍历集合\" class=\"headerlink\" title=\"遍历集合\"></a>遍历集合</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> ((k, v) <span class=\"keyword\">in</span> map) &#123;</div><div class=\"line\">    println(<span class=\"string\">\"<span class=\"subst\">$k</span> -&gt; <span class=\"subst\">$v</span>\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"使用范围（Ranges）\"><a href=\"#使用范围（Ranges）\" class=\"headerlink\" title=\"使用范围（Ranges）\"></a>使用范围（Ranges）</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.100</span>) &#123; ... &#125;  <span class=\"comment\">// 闭区间包含100</span></div><div class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1</span> until <span class=\"number\">100</span>) &#123; ... &#125; <span class=\"comment\">// 半开区间，不包含100</span></div><div class=\"line\"><span class=\"keyword\">for</span> (x <span class=\"keyword\">in</span> <span class=\"number\">2.</span><span class=\"number\">.10</span> step <span class=\"number\">2</span>) &#123; ... &#125; </div><div class=\"line\"><span class=\"keyword\">for</span> (x <span class=\"keyword\">in</span> <span class=\"number\">10</span> downTo <span class=\"number\">1</span>) &#123; ... &#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (x <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.10</span>) &#123; ... &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"构造只读列表\"><a href=\"#构造只读列表\" class=\"headerlink\" title=\"构造只读列表\"></a>构造只读列表</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> list = listOf(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"构造只读map\"><a href=\"#构造只读map\" class=\"headerlink\" title=\"构造只读map\"></a>构造只读map</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> map = mapOf(<span class=\"string\">\"a\"</span> to <span class=\"number\">1</span>, <span class=\"string\">\"b\"</span> to <span class=\"number\">2</span>, <span class=\"string\">\"c\"</span> to <span class=\"number\">3</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"访问map\"><a href=\"#访问map\" class=\"headerlink\" title=\"访问map\"></a>访问map</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">println(map[<span class=\"string\">\"key\"</span>])</div><div class=\"line\">map[<span class=\"string\">\"key\"</span>] = value</div></pre></td></tr></table></figure>\n<h2 id=\"延迟加载\"><a href=\"#延迟加载\" class=\"headerlink\" title=\"延迟加载\"></a>延迟加载</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> p: String <span class=\"keyword\">by</span> lazy &#123;</div><div class=\"line\">    <span class=\"comment\">// compute the string</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"函数扩展\"><a href=\"#函数扩展\" class=\"headerlink\" title=\"函数扩展\"></a>函数扩展</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> String.<span class=\"title\">spaceToCamelCase</span><span class=\"params\">()</span></span> &#123; ... &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\"Convert this to camelcase\"</span>.spaceToCamelCase()</div></pre></td></tr></table></figure>\n<h2 id=\"创建单例\"><a href=\"#创建单例\" class=\"headerlink\" title=\"创建单例\"></a>创建单例</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">object</span> Resource &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">\"Name\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> rs = Resource;</div><div class=\"line\">    <span class=\"comment\">//Name</span></div><div class=\"line\">    println(rs.name)</div><div class=\"line\">    <span class=\"keyword\">var</span> rs2 = Resource;</div><div class=\"line\">    <span class=\"comment\">//Name</span></div><div class=\"line\">    println(rs2.name)</div><div class=\"line\">    rs.name = <span class=\"string\">\"Anthoer\"</span></div><div class=\"line\">    <span class=\"comment\">//Another</span></div><div class=\"line\">    println(rs.name)</div><div class=\"line\">    <span class=\"comment\">//Another</span></div><div class=\"line\">    println(rs2.name)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"判断null\"><a href=\"#判断null\" class=\"headerlink\" title=\"判断null\"></a>判断null</h2><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"?.\"></a>?.</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> files = File(<span class=\"string\">\"Test\"</span>).listFiles()</div><div class=\"line\"></div><div class=\"line\">println(files?.size)</div></pre></td></tr></table></figure>\n<p>例如：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getList</span><span class=\"params\">(isNull: <span class=\"type\">Boolean</span>)</span></span>: List&lt;String&gt;? =</div><div class=\"line\">    <span class=\"keyword\">if</span>(isNull) <span class=\"literal\">null</span> <span class=\"keyword\">else</span> listOf(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> list = getList(<span class=\"literal\">true</span>)</div><div class=\"line\">    <span class=\"comment\">//\"null\"</span></div><div class=\"line\">    println(list?.size)</div><div class=\"line\">    </div><div class=\"line\">    list = getList(<span class=\"literal\">false</span>)</div><div class=\"line\">    <span class=\"comment\">//\"3\"</span></div><div class=\"line\">    println(list?.size)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"可以执行语句块\"><a href=\"#可以执行语句块\" class=\"headerlink\" title=\"?. 可以执行语句块\"></a>?. 可以执行语句块</h3><p>val data = …</p>\n<p>data?.let {<br>    … // execute this block if not null<br>}</p>\n<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"?:\"></a>?:</h3><p>上述println语句可以改为<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">println(list?.size ?: <span class=\"string\">\"empty\"</span> )</div></pre></td></tr></table></figure></p>\n<p>这打印结果如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">empty</div><div class=\"line\">3</div></pre></td></tr></table></figure></p>\n<h3 id=\"后面的字符串也可以换成表达式\"><a href=\"#后面的字符串也可以换成表达式\" class=\"headerlink\" title=\"?: 后面的字符串也可以换成表达式\"></a>?: 后面的字符串也可以换成表达式</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> <span class=\"keyword\">data</span> = ...</div><div class=\"line\"><span class=\"keyword\">val</span> email = <span class=\"keyword\">data</span>[<span class=\"string\">\"email\"</span>] ?: <span class=\"keyword\">throw</span> IllegalStateException(<span class=\"string\">\"Email is missing!\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"返回when语句\"><a href=\"#返回when语句\" class=\"headerlink\" title=\"返回when语句\"></a>返回when语句</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">transform</span><span class=\"params\">(color: <span class=\"type\">String</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">when</span> (color) &#123;</div><div class=\"line\">        <span class=\"string\">\"Red\"</span> -&gt; <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"string\">\"Green\"</span> -&gt; <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"string\">\"Blue\"</span> -&gt; <span class=\"number\">2</span></div><div class=\"line\">        <span class=\"keyword\">else</span> -&gt; <span class=\"keyword\">throw</span> IllegalArgumentException(<span class=\"string\">\"Invalid color param value\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"‘try-catch’-表达式\"><a href=\"#‘try-catch’-表达式\" class=\"headerlink\" title=\"‘try/catch’ 表达式\"></a>‘try/catch’ 表达式</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> result = <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        count()</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e: ArithmeticException) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> IllegalStateException(e)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// result是count()返回值</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"‘if’表达式\"><a href=\"#‘if’表达式\" class=\"headerlink\" title=\"‘if’表达式\"></a>‘if’表达式</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">(param: <span class=\"type\">Int</span>)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> result = <span class=\"keyword\">if</span> (param == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"string\">\"one\"</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (param == <span class=\"number\">2</span>) &#123;</div><div class=\"line\">        <span class=\"string\">\"two\"</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"string\">\"three\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"表达式函数\"><a href=\"#表达式函数\" class=\"headerlink\" title=\"表达式函数\"></a>表达式函数</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">theAnswer</span><span class=\"params\">()</span></span> = <span class=\"number\">42</span></div></pre></td></tr></table></figure>\n<p>等于如下函数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">theAnswer</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">42</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>表达式函数可以很方便的和其他惯用法结合在一起使用<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">transform</span><span class=\"params\">(color: <span class=\"type\">String</span>)</span></span>: <span class=\"built_in\">Int</span> = <span class=\"keyword\">when</span> (color) &#123;</div><div class=\"line\">    <span class=\"string\">\"Red\"</span> -&gt; <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"string\">\"Green\"</span> -&gt; <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"string\">\"Blue\"</span> -&gt; <span class=\"number\">2</span></div><div class=\"line\">    <span class=\"keyword\">else</span> -&gt; <span class=\"keyword\">throw</span> IllegalArgumentException(<span class=\"string\">\"Invalid color param value\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"with语句（ES6不是快废除这个了？）\"><a href=\"#with语句（ES6不是快废除这个了？）\" class=\"headerlink\" title=\"with语句（ES6不是快废除这个了？）\"></a>with语句（ES6不是快废除这个了？）</h2><p>with语句块的函数都是对()括号内的对象的方法调用。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Turtle</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">penDown</span><span class=\"params\">()</span></span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">penUp</span><span class=\"params\">()</span></span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">turn</span><span class=\"params\">(degrees: <span class=\"type\">Double</span>)</span></span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">forward</span><span class=\"params\">(pixels: <span class=\"type\">Double</span>)</span></span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">val</span> myTurtle = Turtle()</div><div class=\"line\">with(myTurtle) &#123; <span class=\"comment\">//draw a 100 pix square</span></div><div class=\"line\">    penDown()</div><div class=\"line\">    <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.4</span>) &#123;</div><div class=\"line\">        forward(<span class=\"number\">100.0</span>)</div><div class=\"line\">        turn(<span class=\"number\">90.0</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    penUp()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"nullable的Boolean对象\"><a href=\"#nullable的Boolean对象\" class=\"headerlink\" title=\"nullable的Boolean对象\"></a>nullable的Boolean对象</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> b: <span class=\"built_in\">Boolean</span>? = ...</div><div class=\"line\"><span class=\"keyword\">if</span> (b == <span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// `b` 为false或者null</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>kotlin提供了一些惯用法（语法糖？），简单的记录一下。</p>\n<h2 id=\"data-class\"><a href=\"#data-class\" class=\"headerlink\" title=\"data class\"></a>data class</h2><p>有时候需要一些类要保存数据，而不需要其他操作，当然基本操作除外，kotlin为data class提供的基本操作有：</p>\n<ul>\n<li>equals() 相当与“==”操作</li>\n<li>hashCode() 计算hash值</li>\n<li>toString() 函数</li>\n<li>componentsN() 函数</li>\n<li>copy() 拷贝</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>(<span class=\"keyword\">val</span> name: String = <span class=\"string\">\"nobody\"</span>, <span class=\"keyword\">val</span> age: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//默认参数</span></div><div class=\"line\">    <span class=\"keyword\">val</span> nobody = User()</div><div class=\"line\">    <span class=\"comment\">//User(name=nobody, age=0)</span></div><div class=\"line\">    println(nobody)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">val</span> johnny = User(<span class=\"string\">\"Johnny\"</span>, <span class=\"number\">29</span>)</div><div class=\"line\">    <span class=\"comment\">//解构赋值</span></div><div class=\"line\">    <span class=\"keyword\">val</span> (name, age) = johnny</div><div class=\"line\">    <span class=\"comment\">//name: Johnny, age: 29</span></div><div class=\"line\">    println(<span class=\"string\">\"name: <span class=\"subst\">$name</span>, age: <span class=\"subst\">$age</span>\"</span>)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//toString用法</span></div><div class=\"line\">    <span class=\"comment\">//User(name=Johnny, age=29)</span></div><div class=\"line\">    println(johnny)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//hashCode用法</span></div><div class=\"line\">    <span class=\"comment\">//233064103</span></div><div class=\"line\">    println(johnny.hashCode())</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//\"==\" 和\"===\"</span></div><div class=\"line\">    <span class=\"comment\">//true</span></div><div class=\"line\">    println(<span class=\"string\">\"johnny == johnny  <span class=\"subst\">$&#123;johnny == johnny&#125;</span>\"</span>)</div><div class=\"line\">    <span class=\"comment\">//true</span></div><div class=\"line\">    println(<span class=\"string\">\"johnny === johnny  <span class=\"subst\">$&#123;johnny === johnny&#125;</span>\"</span>)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//copy用法</span></div><div class=\"line\">    <span class=\"keyword\">val</span> youngJohnny = johnny.copy(age = <span class=\"number\">2</span>)</div><div class=\"line\">    <span class=\"comment\">//\"User(name=Johnny, age=2)\"</span></div><div class=\"line\">    println(youngJohnny)</div><div class=\"line\">    <span class=\"comment\">//false</span></div><div class=\"line\">    println(<span class=\"string\">\"johnny == youngJohnny  <span class=\"subst\">$&#123;johnny == youngJohnny&#125;</span>\"</span>)</div><div class=\"line\">    <span class=\"comment\">//false</span></div><div class=\"line\">    println(<span class=\"string\">\"johnny === youngJohnny  <span class=\"subst\">$&#123;johnny === youngJohnny&#125;</span>\"</span>)</div><div class=\"line\">    <span class=\"comment\">//false</span></div><div class=\"line\">    println(<span class=\"string\">\"johnny.hashCode() == yongJohnny.hashCode() <span class=\"subst\">$&#123;johnny.hashCode() == youngJohnny.hashCode()&#125;</span>\"</span>)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">val</span> copyJohnny = johnny.copy()</div><div class=\"line\">    <span class=\"comment\">//true</span></div><div class=\"line\">    println(<span class=\"string\">\"johnny == copyJohnny  <span class=\"subst\">$&#123;johnny == copyJohnny&#125;</span>\"</span>)</div><div class=\"line\">    <span class=\"comment\">//false</span></div><div class=\"line\">    println(<span class=\"string\">\"johnny === copyJohnny  <span class=\"subst\">$&#123;johnny === copyJohnny&#125;</span>\"</span>)</div><div class=\"line\">    <span class=\"comment\">//true</span></div><div class=\"line\">    println(<span class=\"string\">\"johnny.equals(copyJohnny)  <span class=\"subst\">$&#123;johnny.equals(copyJohnny)&#125;</span>\"</span>)</div><div class=\"line\">    <span class=\"comment\">//true</span></div><div class=\"line\">    println(<span class=\"string\">\"johnny.hashCode() == copyJohnny.hashCode() <span class=\"subst\">$&#123;johnny.hashCode() == copyJohnny.hashCode()&#125;</span>\"</span>)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">val</span> anotherJohnny = User(<span class=\"string\">\"Johnny\"</span>, <span class=\"number\">29</span>)</div><div class=\"line\">    <span class=\"comment\">//true</span></div><div class=\"line\">    println(<span class=\"string\">\"johnny == anotherJohnny  <span class=\"subst\">$&#123;johnny == anotherJohnny&#125;</span>\"</span>)</div><div class=\"line\">    <span class=\"comment\">//false</span></div><div class=\"line\">    println(<span class=\"string\">\"johnny === anotherJohnny  <span class=\"subst\">$&#123;johnny === anotherJohnny&#125;</span>\"</span>)</div><div class=\"line\">    <span class=\"comment\">//true</span></div><div class=\"line\">    println(<span class=\"string\">\"johnny.equals(anotherJohnny)  <span class=\"subst\">$&#123;johnny.equals(anotherJohnny)&#125;</span>\"</span>)</div><div class=\"line\">    <span class=\"comment\">//true</span></div><div class=\"line\">    println(<span class=\"string\">\"johnny.hashCode() == anotherJohnny.hashCode() <span class=\"subst\">$&#123;johnny.hashCode() == anotherJohnny.hashCode()&#125;</span>\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<h2 id=\"函数-包括构造函数-的默认值\"><a href=\"#函数-包括构造函数-的默认值\" class=\"headerlink\" title=\"函数(包括构造函数)的默认值\"></a>函数(包括构造函数)的默认值</h2><p>如上例的<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>(<span class=\"keyword\">val</span> name: String = <span class=\"string\">\"nobody\"</span>, <span class=\"keyword\">val</span> age: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>)</div></pre></td></tr></table></figure></p>\n<p>对于普通函数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">(a: <span class=\"type\">Int</span> = <span class=\"number\">0</span>, b: <span class=\"type\">String</span> = <span class=\"string\">\"\"</span>)</span></span> &#123; ... &#125;</div></pre></td></tr></table></figure></p>\n<p>有了默认的参数，就可以避免写多个重载函数<br>如下面的java代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">foo</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> number, <span class=\"keyword\">boolean</span> toUpperCase)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (toUpperCase ? name.toUpperCase() : name) + number;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">foo</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> number)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> foo(name, number, <span class=\"keyword\">false</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">foo</span><span class=\"params\">(String name, <span class=\"keyword\">boolean</span> toUpperCase)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> foo(name, <span class=\"number\">42</span>, toUpperCase);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">foo</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> foo(name, <span class=\"number\">42</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以用一个kotlin函数表示<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">(name: <span class=\"type\">String</span>, number: <span class=\"type\">Int</span> = <span class=\"number\">42</span>, toUpperCase: <span class=\"type\">Boolean</span> = <span class=\"literal\">false</span>)</span></span> =</div><div class=\"line\">        (<span class=\"keyword\">if</span> (toUpperCase) name.toUpperCase() <span class=\"keyword\">else</span> name) + number</div></pre></td></tr></table></figure></p>\n<h2 id=\"过滤list\"><a href=\"#过滤list\" class=\"headerlink\" title=\"过滤list\"></a>过滤list</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> positives = list.filter &#123; x =&gt; x &gt; <span class=\"number\">0</span>&#125;</div></pre></td></tr></table></figure>\n<p>甚至可以更简洁一点<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> positives = list.filter &#123; it &gt; <span class=\"number\">0</span> &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"字符串模板\"><a href=\"#字符串模板\" class=\"headerlink\" title=\"字符串模板\"></a>字符串模板</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">println(<span class=\"string\">\"Name <span class=\"subst\">$name</span>\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"类型检查\"><a href=\"#类型检查\" class=\"headerlink\" title=\"类型检查\"></a>类型检查</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">when</span> (x) &#123;</div><div class=\"line\">    <span class=\"keyword\">is</span> Foo -&gt; ...</div><div class=\"line\">    <span class=\"keyword\">is</span> Bar -&gt; ...</div><div class=\"line\">    <span class=\"keyword\">else</span>   -&gt; ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"遍历集合\"><a href=\"#遍历集合\" class=\"headerlink\" title=\"遍历集合\"></a>遍历集合</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> ((k, v) <span class=\"keyword\">in</span> map) &#123;</div><div class=\"line\">    println(<span class=\"string\">\"<span class=\"subst\">$k</span> -&gt; <span class=\"subst\">$v</span>\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"使用范围（Ranges）\"><a href=\"#使用范围（Ranges）\" class=\"headerlink\" title=\"使用范围（Ranges）\"></a>使用范围（Ranges）</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.100</span>) &#123; ... &#125;  <span class=\"comment\">// 闭区间包含100</span></div><div class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1</span> until <span class=\"number\">100</span>) &#123; ... &#125; <span class=\"comment\">// 半开区间，不包含100</span></div><div class=\"line\"><span class=\"keyword\">for</span> (x <span class=\"keyword\">in</span> <span class=\"number\">2.</span><span class=\"number\">.10</span> step <span class=\"number\">2</span>) &#123; ... &#125; </div><div class=\"line\"><span class=\"keyword\">for</span> (x <span class=\"keyword\">in</span> <span class=\"number\">10</span> downTo <span class=\"number\">1</span>) &#123; ... &#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (x <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.10</span>) &#123; ... &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"构造只读列表\"><a href=\"#构造只读列表\" class=\"headerlink\" title=\"构造只读列表\"></a>构造只读列表</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> list = listOf(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"构造只读map\"><a href=\"#构造只读map\" class=\"headerlink\" title=\"构造只读map\"></a>构造只读map</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> map = mapOf(<span class=\"string\">\"a\"</span> to <span class=\"number\">1</span>, <span class=\"string\">\"b\"</span> to <span class=\"number\">2</span>, <span class=\"string\">\"c\"</span> to <span class=\"number\">3</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"访问map\"><a href=\"#访问map\" class=\"headerlink\" title=\"访问map\"></a>访问map</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">println(map[<span class=\"string\">\"key\"</span>])</div><div class=\"line\">map[<span class=\"string\">\"key\"</span>] = value</div></pre></td></tr></table></figure>\n<h2 id=\"延迟加载\"><a href=\"#延迟加载\" class=\"headerlink\" title=\"延迟加载\"></a>延迟加载</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> p: String <span class=\"keyword\">by</span> lazy &#123;</div><div class=\"line\">    <span class=\"comment\">// compute the string</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"函数扩展\"><a href=\"#函数扩展\" class=\"headerlink\" title=\"函数扩展\"></a>函数扩展</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> String.<span class=\"title\">spaceToCamelCase</span><span class=\"params\">()</span></span> &#123; ... &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\"Convert this to camelcase\"</span>.spaceToCamelCase()</div></pre></td></tr></table></figure>\n<h2 id=\"创建单例\"><a href=\"#创建单例\" class=\"headerlink\" title=\"创建单例\"></a>创建单例</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">object</span> Resource &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">\"Name\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> rs = Resource;</div><div class=\"line\">    <span class=\"comment\">//Name</span></div><div class=\"line\">    println(rs.name)</div><div class=\"line\">    <span class=\"keyword\">var</span> rs2 = Resource;</div><div class=\"line\">    <span class=\"comment\">//Name</span></div><div class=\"line\">    println(rs2.name)</div><div class=\"line\">    rs.name = <span class=\"string\">\"Anthoer\"</span></div><div class=\"line\">    <span class=\"comment\">//Another</span></div><div class=\"line\">    println(rs.name)</div><div class=\"line\">    <span class=\"comment\">//Another</span></div><div class=\"line\">    println(rs2.name)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"判断null\"><a href=\"#判断null\" class=\"headerlink\" title=\"判断null\"></a>判断null</h2><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"?.\"></a>?.</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> files = File(<span class=\"string\">\"Test\"</span>).listFiles()</div><div class=\"line\"></div><div class=\"line\">println(files?.size)</div></pre></td></tr></table></figure>\n<p>例如：<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getList</span><span class=\"params\">(isNull: <span class=\"type\">Boolean</span>)</span></span>: List&lt;String&gt;? =</div><div class=\"line\">    <span class=\"keyword\">if</span>(isNull) <span class=\"literal\">null</span> <span class=\"keyword\">else</span> listOf(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> list = getList(<span class=\"literal\">true</span>)</div><div class=\"line\">    <span class=\"comment\">//\"null\"</span></div><div class=\"line\">    println(list?.size)</div><div class=\"line\">    </div><div class=\"line\">    list = getList(<span class=\"literal\">false</span>)</div><div class=\"line\">    <span class=\"comment\">//\"3\"</span></div><div class=\"line\">    println(list?.size)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"可以执行语句块\"><a href=\"#可以执行语句块\" class=\"headerlink\" title=\"?. 可以执行语句块\"></a>?. 可以执行语句块</h3><p>val data = …</p>\n<p>data?.let {<br>    … // execute this block if not null<br>}</p>\n<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"?:\"></a>?:</h3><p>上述println语句可以改为<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">println(list?.size ?: <span class=\"string\">\"empty\"</span> )</div></pre></td></tr></table></figure></p>\n<p>这打印结果如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">empty</div><div class=\"line\">3</div></pre></td></tr></table></figure></p>\n<h3 id=\"后面的字符串也可以换成表达式\"><a href=\"#后面的字符串也可以换成表达式\" class=\"headerlink\" title=\"?: 后面的字符串也可以换成表达式\"></a>?: 后面的字符串也可以换成表达式</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> <span class=\"keyword\">data</span> = ...</div><div class=\"line\"><span class=\"keyword\">val</span> email = <span class=\"keyword\">data</span>[<span class=\"string\">\"email\"</span>] ?: <span class=\"keyword\">throw</span> IllegalStateException(<span class=\"string\">\"Email is missing!\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"返回when语句\"><a href=\"#返回when语句\" class=\"headerlink\" title=\"返回when语句\"></a>返回when语句</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">transform</span><span class=\"params\">(color: <span class=\"type\">String</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">when</span> (color) &#123;</div><div class=\"line\">        <span class=\"string\">\"Red\"</span> -&gt; <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"string\">\"Green\"</span> -&gt; <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"string\">\"Blue\"</span> -&gt; <span class=\"number\">2</span></div><div class=\"line\">        <span class=\"keyword\">else</span> -&gt; <span class=\"keyword\">throw</span> IllegalArgumentException(<span class=\"string\">\"Invalid color param value\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"‘try-catch’-表达式\"><a href=\"#‘try-catch’-表达式\" class=\"headerlink\" title=\"‘try/catch’ 表达式\"></a>‘try/catch’ 表达式</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">test</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> result = <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        count()</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e: ArithmeticException) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> IllegalStateException(e)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// result是count()返回值</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"‘if’表达式\"><a href=\"#‘if’表达式\" class=\"headerlink\" title=\"‘if’表达式\"></a>‘if’表达式</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">(param: <span class=\"type\">Int</span>)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> result = <span class=\"keyword\">if</span> (param == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"string\">\"one\"</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (param == <span class=\"number\">2</span>) &#123;</div><div class=\"line\">        <span class=\"string\">\"two\"</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"string\">\"three\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"表达式函数\"><a href=\"#表达式函数\" class=\"headerlink\" title=\"表达式函数\"></a>表达式函数</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">theAnswer</span><span class=\"params\">()</span></span> = <span class=\"number\">42</span></div></pre></td></tr></table></figure>\n<p>等于如下函数<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">theAnswer</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">42</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>表达式函数可以很方便的和其他惯用法结合在一起使用<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">transform</span><span class=\"params\">(color: <span class=\"type\">String</span>)</span></span>: <span class=\"built_in\">Int</span> = <span class=\"keyword\">when</span> (color) &#123;</div><div class=\"line\">    <span class=\"string\">\"Red\"</span> -&gt; <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"string\">\"Green\"</span> -&gt; <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"string\">\"Blue\"</span> -&gt; <span class=\"number\">2</span></div><div class=\"line\">    <span class=\"keyword\">else</span> -&gt; <span class=\"keyword\">throw</span> IllegalArgumentException(<span class=\"string\">\"Invalid color param value\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"with语句（ES6不是快废除这个了？）\"><a href=\"#with语句（ES6不是快废除这个了？）\" class=\"headerlink\" title=\"with语句（ES6不是快废除这个了？）\"></a>with语句（ES6不是快废除这个了？）</h2><p>with语句块的函数都是对()括号内的对象的方法调用。<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Turtle</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">penDown</span><span class=\"params\">()</span></span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">penUp</span><span class=\"params\">()</span></span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">turn</span><span class=\"params\">(degrees: <span class=\"type\">Double</span>)</span></span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">forward</span><span class=\"params\">(pixels: <span class=\"type\">Double</span>)</span></span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">val</span> myTurtle = Turtle()</div><div class=\"line\">with(myTurtle) &#123; <span class=\"comment\">//draw a 100 pix square</span></div><div class=\"line\">    penDown()</div><div class=\"line\">    <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.4</span>) &#123;</div><div class=\"line\">        forward(<span class=\"number\">100.0</span>)</div><div class=\"line\">        turn(<span class=\"number\">90.0</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    penUp()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"nullable的Boolean对象\"><a href=\"#nullable的Boolean对象\" class=\"headerlink\" title=\"nullable的Boolean对象\"></a>nullable的Boolean对象</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">val</span> b: <span class=\"built_in\">Boolean</span>? = ...</div><div class=\"line\"><span class=\"keyword\">if</span> (b == <span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// `b` 为false或者null</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"ubuntu如何反编译apk（2016最新方法）","date":"2017-12-13T06:38:02.000Z","_content":"\n\n# 下载apktool\n1. Download Linux [wrapper script](https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool) (Right click, Save Link As apktool)\n```\ncd ~/\nwget https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool\n```\n\n2. Download apktool-2 ([find newest here](https://bitbucket.org/iBotPeaches/apktool/downloads))\n```\nwget https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.2.1.jar\n```\n\n3. Make sure you have the 32bit libraries (ia32-libs) downloaded and installed by your linux package manager, if you are on a 64bit unix system.\n(This helps provide support for the 32bit native binary aapt, which is required by apktool)\n```\nsudo apt-get install ia32-libs\n```\n\n4. Rename downloaded jar to apktool.jar\n```\nmv apktool_2.2.1.jar apktool.jar\n```\n\n5. Move both files (apktool.jar & apktool) to /usr/local/bin (root needed)\n```\nsudo mv apktool.jar apktool /usr/local/bin/\n```\n\n6. Make sure both files are executable (chmod +x)\n```\nchmod +x /usr/local/bin/apktool /usr/local/bin/apktool.jar\n```\n\n7. Try running apktool via cli\n```\napktool d xxx.apk\n```\n\n# 下载dex2jar\ndex2jar，功能：反编译出jar文件，即apk的源程序文件的字节码，\n下载地址：[https://github.com/pxb1988/dex2jar](https://github.com/pxb1988/dex2jar)\n\n```\ngit clone https://github.com/pxb1988/dex2jar\n```\n\n## 参考\n[https://ibotpeaches.github.io/Apktool/](https://ibotpeaches.github.io/Apktool/)\n\n","source":"_drafts/reverse-engineering-apk.md","raw":"---\ntitle: ubuntu如何反编译apk（2016最新方法）\ntags:\n  - ubuntu\n  - android\n  - apk\n  - reverse engineering\ndate: 2017-12-13 14:38:02\n---\n\n\n# 下载apktool\n1. Download Linux [wrapper script](https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool) (Right click, Save Link As apktool)\n```\ncd ~/\nwget https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool\n```\n\n2. Download apktool-2 ([find newest here](https://bitbucket.org/iBotPeaches/apktool/downloads))\n```\nwget https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.2.1.jar\n```\n\n3. Make sure you have the 32bit libraries (ia32-libs) downloaded and installed by your linux package manager, if you are on a 64bit unix system.\n(This helps provide support for the 32bit native binary aapt, which is required by apktool)\n```\nsudo apt-get install ia32-libs\n```\n\n4. Rename downloaded jar to apktool.jar\n```\nmv apktool_2.2.1.jar apktool.jar\n```\n\n5. Move both files (apktool.jar & apktool) to /usr/local/bin (root needed)\n```\nsudo mv apktool.jar apktool /usr/local/bin/\n```\n\n6. Make sure both files are executable (chmod +x)\n```\nchmod +x /usr/local/bin/apktool /usr/local/bin/apktool.jar\n```\n\n7. Try running apktool via cli\n```\napktool d xxx.apk\n```\n\n# 下载dex2jar\ndex2jar，功能：反编译出jar文件，即apk的源程序文件的字节码，\n下载地址：[https://github.com/pxb1988/dex2jar](https://github.com/pxb1988/dex2jar)\n\n```\ngit clone https://github.com/pxb1988/dex2jar\n```\n\n## 参考\n[https://ibotpeaches.github.io/Apktool/](https://ibotpeaches.github.io/Apktool/)\n\n","slug":"reverse-engineering-apk","published":0,"updated":"2017-12-13T06:38:02.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32o5a001piwl77p3gartg","content":"<h1 id=\"下载apktool\"><a href=\"#下载apktool\" class=\"headerlink\" title=\"下载apktool\"></a>下载apktool</h1><ol>\n<li><p>Download Linux <a href=\"https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool\" target=\"_blank\" rel=\"external\">wrapper script</a> (Right click, Save Link As apktool)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/</div><div class=\"line\">wget https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool</div></pre></td></tr></table></figure>\n</li>\n<li><p>Download apktool-2 (<a href=\"https://bitbucket.org/iBotPeaches/apktool/downloads\" target=\"_blank\" rel=\"external\">find newest here</a>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.2.1.jar</div></pre></td></tr></table></figure>\n</li>\n<li><p>Make sure you have the 32bit libraries (ia32-libs) downloaded and installed by your linux package manager, if you are on a 64bit unix system.<br>(This helps provide support for the 32bit native binary aapt, which is required by apktool)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install ia32-libs</div></pre></td></tr></table></figure>\n</li>\n<li><p>Rename downloaded jar to apktool.jar</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv apktool_2.2.1.jar apktool.jar</div></pre></td></tr></table></figure>\n</li>\n<li><p>Move both files (apktool.jar &amp; apktool) to /usr/local/bin (root needed)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mv apktool.jar apktool /usr/local/bin/</div></pre></td></tr></table></figure>\n</li>\n<li><p>Make sure both files are executable (chmod +x)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod +x /usr/local/bin/apktool /usr/local/bin/apktool.jar</div></pre></td></tr></table></figure>\n</li>\n<li><p>Try running apktool via cli</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apktool d xxx.apk</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"下载dex2jar\"><a href=\"#下载dex2jar\" class=\"headerlink\" title=\"下载dex2jar\"></a>下载dex2jar</h1><p>dex2jar，功能：反编译出jar文件，即apk的源程序文件的字节码，<br>下载地址：<a href=\"https://github.com/pxb1988/dex2jar\" target=\"_blank\" rel=\"external\">https://github.com/pxb1988/dex2jar</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/pxb1988/dex2jar</div></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://ibotpeaches.github.io/Apktool/\" target=\"_blank\" rel=\"external\">https://ibotpeaches.github.io/Apktool/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"下载apktool\"><a href=\"#下载apktool\" class=\"headerlink\" title=\"下载apktool\"></a>下载apktool</h1><ol>\n<li><p>Download Linux <a href=\"https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool\" target=\"_blank\" rel=\"external\">wrapper script</a> (Right click, Save Link As apktool)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/</div><div class=\"line\">wget https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool</div></pre></td></tr></table></figure>\n</li>\n<li><p>Download apktool-2 (<a href=\"https://bitbucket.org/iBotPeaches/apktool/downloads\" target=\"_blank\" rel=\"external\">find newest here</a>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.2.1.jar</div></pre></td></tr></table></figure>\n</li>\n<li><p>Make sure you have the 32bit libraries (ia32-libs) downloaded and installed by your linux package manager, if you are on a 64bit unix system.<br>(This helps provide support for the 32bit native binary aapt, which is required by apktool)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install ia32-libs</div></pre></td></tr></table></figure>\n</li>\n<li><p>Rename downloaded jar to apktool.jar</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv apktool_2.2.1.jar apktool.jar</div></pre></td></tr></table></figure>\n</li>\n<li><p>Move both files (apktool.jar &amp; apktool) to /usr/local/bin (root needed)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mv apktool.jar apktool /usr/local/bin/</div></pre></td></tr></table></figure>\n</li>\n<li><p>Make sure both files are executable (chmod +x)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod +x /usr/local/bin/apktool /usr/local/bin/apktool.jar</div></pre></td></tr></table></figure>\n</li>\n<li><p>Try running apktool via cli</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apktool d xxx.apk</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"下载dex2jar\"><a href=\"#下载dex2jar\" class=\"headerlink\" title=\"下载dex2jar\"></a>下载dex2jar</h1><p>dex2jar，功能：反编译出jar文件，即apk的源程序文件的字节码，<br>下载地址：<a href=\"https://github.com/pxb1988/dex2jar\" target=\"_blank\" rel=\"external\">https://github.com/pxb1988/dex2jar</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/pxb1988/dex2jar</div></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://ibotpeaches.github.io/Apktool/\" target=\"_blank\" rel=\"external\">https://ibotpeaches.github.io/Apktool/</a></p>\n"},{"title":"小白的全栈梦之从零搭建Android OTA系统（0）","date":"2017-12-20T09:45:28.000Z","_content":"\n### 起因\n作为一个半路出家的码农，一个野生Android工程师，一直对<b>全栈</b>心怀憧憬，但未有行动。直到两年之前有机会开始接触javascript，写了一些前端的代码，加上nodejs社区这些年的蓬勃发展，我觉得这是一个机会。正如某位长者教导的:\n>人的一生当然要靠自我奋斗,当然也要考虑历史的进程。\n\n我觉得是时候了。\n\n这是一个完整的项目，也许耗时会比较长，因为上班时间还有工作要完成，但是我会尽力完成它，我的目标是达到可以商用的水平，而不是一个玩具。实现的过程的文章会贴在[本站](http://www.yinlijun.com)，代码将会托管到github [android ota system](https://github.com/yinlijun2004/android_ota_system)。\n\n### 目标\n到这个项目完结的时候，能实现如下功能。\n\n- 服务端\n  - 版本管理后台\n  - 用户管理后台\n- PC端\n  - 版本管理界面\n  - 用户操作界面\n- Android端\n  - 查询版本\n  - 下载版本\n  - 升级版本 \n\n\n### 我的技术背景\n\n语言方面\n- javascript 熟练度 30%\n\n框架\n- nodejs 熟练度 5%\n- react 熟练度 10%\n\n### 会使用到的库\n- react\n- express\n\n### 目录\n- {% post_link my-ota-tutorial-1 用户注册登录的后台实现 %}\n- {% post_link my-ota-tutorial-2 用户注册登录前端界面实现 %}","source":"_posts/my-ota-tutorial.md","raw":"---\ntitle: 小白的全栈梦之从零搭建Android OTA系统（0）\ndate: 2017-12-20 17:45:28\ntags: [express, react, nodejs]\n---\n\n### 起因\n作为一个半路出家的码农，一个野生Android工程师，一直对<b>全栈</b>心怀憧憬，但未有行动。直到两年之前有机会开始接触javascript，写了一些前端的代码，加上nodejs社区这些年的蓬勃发展，我觉得这是一个机会。正如某位长者教导的:\n>人的一生当然要靠自我奋斗,当然也要考虑历史的进程。\n\n我觉得是时候了。\n\n这是一个完整的项目，也许耗时会比较长，因为上班时间还有工作要完成，但是我会尽力完成它，我的目标是达到可以商用的水平，而不是一个玩具。实现的过程的文章会贴在[本站](http://www.yinlijun.com)，代码将会托管到github [android ota system](https://github.com/yinlijun2004/android_ota_system)。\n\n### 目标\n到这个项目完结的时候，能实现如下功能。\n\n- 服务端\n  - 版本管理后台\n  - 用户管理后台\n- PC端\n  - 版本管理界面\n  - 用户操作界面\n- Android端\n  - 查询版本\n  - 下载版本\n  - 升级版本 \n\n\n### 我的技术背景\n\n语言方面\n- javascript 熟练度 30%\n\n框架\n- nodejs 熟练度 5%\n- react 熟练度 10%\n\n### 会使用到的库\n- react\n- express\n\n### 目录\n- {% post_link my-ota-tutorial-1 用户注册登录的后台实现 %}\n- {% post_link my-ota-tutorial-2 用户注册登录前端界面实现 %}","slug":"my-ota-tutorial","published":1,"updated":"2017-12-21T11:38:48.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbm32oa1004liwl7v7n5zalu","content":"<h3 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h3><p>作为一个半路出家的码农，一个野生Android工程师，一直对<b>全栈</b>心怀憧憬，但未有行动。直到两年之前有机会开始接触javascript，写了一些前端的代码，加上nodejs社区这些年的蓬勃发展，我觉得这是一个机会。正如某位长者教导的:</p>\n<blockquote>\n<p>人的一生当然要靠自我奋斗,当然也要考虑历史的进程。</p>\n</blockquote>\n<p>我觉得是时候了。</p>\n<p>这是一个完整的项目，也许耗时会比较长，因为上班时间还有工作要完成，但是我会尽力完成它，我的目标是达到可以商用的水平，而不是一个玩具。实现的过程的文章会贴在<a href=\"http://www.yinlijun.com\">本站</a>，代码将会托管到github <a href=\"https://github.com/yinlijun2004/android_ota_system\" target=\"_blank\" rel=\"external\">android ota system</a>。</p>\n<h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>到这个项目完结的时候，能实现如下功能。</p>\n<ul>\n<li>服务端<ul>\n<li>版本管理后台</li>\n<li>用户管理后台</li>\n</ul>\n</li>\n<li>PC端<ul>\n<li>版本管理界面</li>\n<li>用户操作界面</li>\n</ul>\n</li>\n<li>Android端<ul>\n<li>查询版本</li>\n<li>下载版本</li>\n<li>升级版本 </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"我的技术背景\"><a href=\"#我的技术背景\" class=\"headerlink\" title=\"我的技术背景\"></a>我的技术背景</h3><p>语言方面</p>\n<ul>\n<li>javascript 熟练度 30%</li>\n</ul>\n<p>框架</p>\n<ul>\n<li>nodejs 熟练度 5%</li>\n<li>react 熟练度 10%</li>\n</ul>\n<h3 id=\"会使用到的库\"><a href=\"#会使用到的库\" class=\"headerlink\" title=\"会使用到的库\"></a>会使用到的库</h3><ul>\n<li>react</li>\n<li>express</li>\n</ul>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li><a href=\"/2017/12/20/my-ota-tutorial-1/\" title=\"用户注册登录的后台实现\">用户注册登录的后台实现</a></li>\n<li><a href=\"/2017/12/21/my-ota-tutorial-2/\" title=\"用户注册登录前端界面实现\">用户注册登录前端界面实现</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h3><p>作为一个半路出家的码农，一个野生Android工程师，一直对<b>全栈</b>心怀憧憬，但未有行动。直到两年之前有机会开始接触javascript，写了一些前端的代码，加上nodejs社区这些年的蓬勃发展，我觉得这是一个机会。正如某位长者教导的:</p>\n<blockquote>\n<p>人的一生当然要靠自我奋斗,当然也要考虑历史的进程。</p>\n</blockquote>\n<p>我觉得是时候了。</p>\n<p>这是一个完整的项目，也许耗时会比较长，因为上班时间还有工作要完成，但是我会尽力完成它，我的目标是达到可以商用的水平，而不是一个玩具。实现的过程的文章会贴在<a href=\"http://www.yinlijun.com\">本站</a>，代码将会托管到github <a href=\"https://github.com/yinlijun2004/android_ota_system\" target=\"_blank\" rel=\"external\">android ota system</a>。</p>\n<h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>到这个项目完结的时候，能实现如下功能。</p>\n<ul>\n<li>服务端<ul>\n<li>版本管理后台</li>\n<li>用户管理后台</li>\n</ul>\n</li>\n<li>PC端<ul>\n<li>版本管理界面</li>\n<li>用户操作界面</li>\n</ul>\n</li>\n<li>Android端<ul>\n<li>查询版本</li>\n<li>下载版本</li>\n<li>升级版本 </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"我的技术背景\"><a href=\"#我的技术背景\" class=\"headerlink\" title=\"我的技术背景\"></a>我的技术背景</h3><p>语言方面</p>\n<ul>\n<li>javascript 熟练度 30%</li>\n</ul>\n<p>框架</p>\n<ul>\n<li>nodejs 熟练度 5%</li>\n<li>react 熟练度 10%</li>\n</ul>\n<h3 id=\"会使用到的库\"><a href=\"#会使用到的库\" class=\"headerlink\" title=\"会使用到的库\"></a>会使用到的库</h3><ul>\n<li>react</li>\n<li>express</li>\n</ul>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li><a href=\"/2017/12/20/my-ota-tutorial-1/\" title=\"用户注册登录的后台实现\">用户注册登录的后台实现</a></li>\n<li><a href=\"/2017/12/21/my-ota-tutorial-2/\" title=\"用户注册登录前端界面实现\">用户注册登录前端界面实现</a></li>\n</ul>\n"},{"title":"小白的全栈梦之从零搭建Android OTA系统（2）","date":"2017-12-21T11:55:31.000Z","_content":"\n本文实现前端注册与登录界面。\n\n#### 创建前端项目\n利用目前最流行的前端脚手架，创建名为ota_fe的项目。\n```bash\ncreate-react-appp ota_fe\n```\n\n#### 安装antd\n我打算用目前比较流行的ui框架，来构建前端界面。\n当然还有比不可少的react-redux, react-router。\n```\nyarn add antd react-redux react-router react-router-dom\n```\n\n\n\n\n\n\n","source":"_drafts/my-ota-tutorial-2.md","raw":"---\ntitle: 小白的全栈梦之从零搭建Android OTA系统（2）\ndate: 2017-12-21 19:55:31\ntags: [react, nodejs, ]\n---\n\n本文实现前端注册与登录界面。\n\n#### 创建前端项目\n利用目前最流行的前端脚手架，创建名为ota_fe的项目。\n```bash\ncreate-react-appp ota_fe\n```\n\n#### 安装antd\n我打算用目前比较流行的ui框架，来构建前端界面。\n当然还有比不可少的react-redux, react-router。\n```\nyarn add antd react-redux react-router react-router-dom\n```\n\n\n\n\n\n\n","slug":"my-ota-tutorial-2","published":0,"updated":"2017-12-25T10:54:11.511Z","_id":"cjbm36aki0000nkl7r63jjxpr","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本文实现前端注册与登录界面。</p>\n<h4 id=\"创建前端项目\"><a href=\"#创建前端项目\" class=\"headerlink\" title=\"创建前端项目\"></a>创建前端项目</h4><p>利用目前最流行的前端脚手架，创建名为ota_fe的项目。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">create-react-appp ota_fe</div></pre></td></tr></table></figure></p>\n<h4 id=\"安装antd\"><a href=\"#安装antd\" class=\"headerlink\" title=\"安装antd\"></a>安装antd</h4><p>我打算用目前比较流行的ui框架，来构建前端界面。<br>当然还有比不可少的react-redux, react-router。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yarn add antd react-redux react-router react-router-dom</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文实现前端注册与登录界面。</p>\n<h4 id=\"创建前端项目\"><a href=\"#创建前端项目\" class=\"headerlink\" title=\"创建前端项目\"></a>创建前端项目</h4><p>利用目前最流行的前端脚手架，创建名为ota_fe的项目。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">create-react-appp ota_fe</div></pre></td></tr></table></figure></p>\n<h4 id=\"安装antd\"><a href=\"#安装antd\" class=\"headerlink\" title=\"安装antd\"></a>安装antd</h4><p>我打算用目前比较流行的ui框架，来构建前端界面。<br>当然还有比不可少的react-redux, react-router。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yarn add antd react-redux react-router react-router-dom</div></pre></td></tr></table></figure></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjbm32o49000xiwl7h0vpddq3","category_id":"cjbm32o45000uiwl74bar9kyb","_id":"cjbm32o4o0012iwl7v3sbt62u"},{"post_id":"cjbm32o41000riwl79oq9oacx","category_id":"cjbm32o45000uiwl74bar9kyb","_id":"cjbm32o4q0015iwl7b926eibo"},{"post_id":"cjbm32o4b000yiwl7nlzpxape","category_id":"cjbm32o45000uiwl74bar9kyb","_id":"cjbm32o4t0019iwl796k6w27j"},{"post_id":"cjbm32o4m0010iwl71gftq1yv","category_id":"cjbm32o45000uiwl74bar9kyb","_id":"cjbm32o4w001ciwl7x06wv2rv"},{"post_id":"cjbm32o4q0017iwl7vbwxdhdq","category_id":"cjbm32o45000uiwl74bar9kyb","_id":"cjbm32o4y001giwl7ds6xvrkj"}],"PostTag":[{"post_id":"cjbm32o2f0000iwl790hmxn4o","tag_id":"cjbm32o2t0004iwl71f5oy240","_id":"cjbm32o3b0009iwl78wxqh1r3"},{"post_id":"cjbm32o2m0002iwl7spa93t0u","tag_id":"cjbm32o390008iwl7dik546my","_id":"cjbm32o3i000eiwl7bd9jvb4v"},{"post_id":"cjbm32o2x0005iwl79jgpq2vz","tag_id":"cjbm32o3g000ciwl7vb3jx2gp","_id":"cjbm32o3u000liwl7pslud0go"},{"post_id":"cjbm32o2x0005iwl79jgpq2vz","tag_id":"cjbm32o3l000giwl7i1xt8i0g","_id":"cjbm32o3x000niwl79s17h929"},{"post_id":"cjbm32o300006iwl7qfd99uhj","tag_id":"cjbm32o3l000giwl7i1xt8i0g","_id":"cjbm32o4o0011iwl7l9bx2s0c"},{"post_id":"cjbm32o300006iwl7qfd99uhj","tag_id":"cjbm32o3x000oiwl75pfrve12","_id":"cjbm32o4p0014iwl7rt0bx0j8"},{"post_id":"cjbm32o300006iwl7qfd99uhj","tag_id":"cjbm32o42000siwl766u3xu8m","_id":"cjbm32o4s0018iwl7mth554m0"},{"post_id":"cjbm32o300006iwl7qfd99uhj","tag_id":"cjbm32o48000wiwl78lfl0v0p","_id":"cjbm32o4w001biwl7ye5s4xt0"},{"post_id":"cjbm32o330007iwl7rux3y4yh","tag_id":"cjbm32o4m000ziwl7dqfkd5de","_id":"cjbm32o4x001fiwl7vx6mmd0u"},{"post_id":"cjbm32o3c000aiwl75ege1k3x","tag_id":"cjbm32o4m000ziwl7dqfkd5de","_id":"cjbm32o4z001iiwl7lbibisr5"},{"post_id":"cjbm32o3f000biwl7b2ypkb78","tag_id":"cjbm32o4w001diwl7l32rdyg7","_id":"cjbm32o5c001riwl7o6x5sxs4"},{"post_id":"cjbm32o3f000biwl7b2ypkb78","tag_id":"cjbm32o51001kiwl76tkwgn00","_id":"cjbm32o5c001siwl75ic09gnl"},{"post_id":"cjbm32o3f000biwl7b2ypkb78","tag_id":"cjbm32o56001niwl7voxplf6d","_id":"cjbm32o5d001uiwl762rfxa38"},{"post_id":"cjbm32o3h000diwl73e1om14g","tag_id":"cjbm32o3l000giwl7i1xt8i0g","_id":"cjbm32o5d001wiwl70vujeptm"},{"post_id":"cjbm32o3h000diwl73e1om14g","tag_id":"cjbm32o5c001tiwl7tp0oh9ro","_id":"cjbm32o5e001xiwl7rdl2mrpp"},{"post_id":"cjbm32o3h000diwl73e1om14g","tag_id":"cjbm32o3g000ciwl7vb3jx2gp","_id":"cjbm32o5f001ziwl730uy50si"},{"post_id":"cjbm32o3j000fiwl70q3e8j5h","tag_id":"cjbm32o4m000ziwl7dqfkd5de","_id":"cjbm32o5g0020iwl7a5cdjd6s"},{"post_id":"cjbm32o3m000hiwl7xe6sanzq","tag_id":"cjbm32o56001niwl7voxplf6d","_id":"cjbm32o5h0022iwl7tsob1iv6"},{"post_id":"cjbm32o3n000iiwl73yp1rxy3","tag_id":"cjbm32o56001niwl7voxplf6d","_id":"cjbm32o5k0025iwl7efzdi4pk"},{"post_id":"cjbm32o3n000iiwl73yp1rxy3","tag_id":"cjbm32o5i0023iwl7mlp7gc27","_id":"cjbm32o5k0026iwl7h7ts3teh"},{"post_id":"cjbm32o3r000kiwl7g7wiwpb1","tag_id":"cjbm32o5j0024iwl7v2zc0v9s","_id":"cjbm32o5l0029iwl7772go88f"},{"post_id":"cjbm32o3r000kiwl7g7wiwpb1","tag_id":"cjbm32o5k0027iwl7emxjmv4r","_id":"cjbm32o5l002aiwl73i9dj37b"},{"post_id":"cjbm32o3y000piwl729ja0912","tag_id":"cjbm32o5k0028iwl7zb09gp42","_id":"cjbm32o5m002giwl7md7do3dm"},{"post_id":"cjbm32o3z000qiwl7zjx9g47r","tag_id":"cjbm32o3l000giwl7i1xt8i0g","_id":"cjbm32o5o002jiwl79hcmpz6k"},{"post_id":"cjbm32o3z000qiwl7zjx9g47r","tag_id":"cjbm32o5k0027iwl7emxjmv4r","_id":"cjbm32o5o002kiwl7xsxbngdg"},{"post_id":"cjbm32o3z000qiwl7zjx9g47r","tag_id":"cjbm32o5n002hiwl7t9hmckwa","_id":"cjbm32o5o002miwl7qttvs4z7"},{"post_id":"cjbm32o41000riwl79oq9oacx","tag_id":"cjbm32o5k0028iwl7zb09gp42","_id":"cjbm32o5p002piwl7hcwoqddl"},{"post_id":"cjbm32o41000riwl79oq9oacx","tag_id":"cjbm32o5o002liwl7w5q4g14y","_id":"cjbm32o5p002qiwl7umxejs6k"},{"post_id":"cjbm32o41000riwl79oq9oacx","tag_id":"cjbm32o5o002niwl7b63wpini","_id":"cjbm32o5q002siwl7121bjlt6"},{"post_id":"cjbm32o43000tiwl7w6qlystk","tag_id":"cjbm32o5c001tiwl7tp0oh9ro","_id":"cjbm32o5q002tiwl7dv33z8so"},{"post_id":"cjbm32o43000tiwl7w6qlystk","tag_id":"cjbm32o3g000ciwl7vb3jx2gp","_id":"cjbm32o5q002viwl75382splw"},{"post_id":"cjbm32o46000viwl7zpccqg79","tag_id":"cjbm32o5p002riwl74mq8o27o","_id":"cjbm32o5s002xiwl7ubvjr91p"},{"post_id":"cjbm32o46000viwl7zpccqg79","tag_id":"cjbm32o5k0028iwl7zb09gp42","_id":"cjbm32o5s002yiwl7vkofw2jd"},{"post_id":"cjbm32o46000viwl7zpccqg79","tag_id":"cjbm32o3x000oiwl75pfrve12","_id":"cjbm32o5t0030iwl75r9rjiup"},{"post_id":"cjbm32o49000xiwl7h0vpddq3","tag_id":"cjbm32o5k0028iwl7zb09gp42","_id":"cjbm32o5u0033iwl7dqz0kch4"},{"post_id":"cjbm32o49000xiwl7h0vpddq3","tag_id":"cjbm32o5o002liwl7w5q4g14y","_id":"cjbm32o5u0034iwl71t3y1hbf"},{"post_id":"cjbm32o49000xiwl7h0vpddq3","tag_id":"cjbm32o5o002niwl7b63wpini","_id":"cjbm32o5u0036iwl727zmkis0"},{"post_id":"cjbm32o4b000yiwl7nlzpxape","tag_id":"cjbm32o5k0028iwl7zb09gp42","_id":"cjbm32o5v0039iwl77869lg7z"},{"post_id":"cjbm32o4b000yiwl7nlzpxape","tag_id":"cjbm32o5o002liwl7w5q4g14y","_id":"cjbm32o5w003aiwl7sb5mtuft"},{"post_id":"cjbm32o4b000yiwl7nlzpxape","tag_id":"cjbm32o5o002niwl7b63wpini","_id":"cjbm32o5w003ciwl7qbfd7i6l"},{"post_id":"cjbm32o4m0010iwl71gftq1yv","tag_id":"cjbm32o5k0028iwl7zb09gp42","_id":"cjbm32o5y003fiwl7d6j7z64y"},{"post_id":"cjbm32o4m0010iwl71gftq1yv","tag_id":"cjbm32o5o002liwl7w5q4g14y","_id":"cjbm32o5y003giwl7ska6ooow"},{"post_id":"cjbm32o4m0010iwl71gftq1yv","tag_id":"cjbm32o5o002niwl7b63wpini","_id":"cjbm32o5z003iiwl727or8zgb"},{"post_id":"cjbm32o4o0013iwl7ttwqhjnp","tag_id":"cjbm32o5k0028iwl7zb09gp42","_id":"cjbm32o62003liwl7cfiwavgx"},{"post_id":"cjbm32o4o0013iwl7ttwqhjnp","tag_id":"cjbm32o5o002liwl7w5q4g14y","_id":"cjbm32o63003miwl7mj4pn5lw"},{"post_id":"cjbm32o4o0013iwl7ttwqhjnp","tag_id":"cjbm32o5o002niwl7b63wpini","_id":"cjbm32o64003oiwl70hwgbwvg"},{"post_id":"cjbm32o4q0017iwl7vbwxdhdq","tag_id":"cjbm32o5k0028iwl7zb09gp42","_id":"cjbm32o65003riwl7ng82g167"},{"post_id":"cjbm32o4q0017iwl7vbwxdhdq","tag_id":"cjbm32o5o002liwl7w5q4g14y","_id":"cjbm32o65003siwl7t6j5zd8q"},{"post_id":"cjbm32o4q0017iwl7vbwxdhdq","tag_id":"cjbm32o5o002niwl7b63wpini","_id":"cjbm32o66003uiwl7ia1ajgo0"},{"post_id":"cjbm32o4t001aiwl7e8pebxr8","tag_id":"cjbm32o5c001tiwl7tp0oh9ro","_id":"cjbm32o66003wiwl7on7zffwu"},{"post_id":"cjbm32o4t001aiwl7e8pebxr8","tag_id":"cjbm32o66003tiwl7lnnbyoox","_id":"cjbm32o66003xiwl7ag8n95wg"},{"post_id":"cjbm32o4x001eiwl7drr6dofr","tag_id":"cjbm32o5c001tiwl7tp0oh9ro","_id":"cjbm32o670040iwl7313dhv2s"},{"post_id":"cjbm32o4x001eiwl7drr6dofr","tag_id":"cjbm32o3l000giwl7i1xt8i0g","_id":"cjbm32o670041iwl7nc95qslk"},{"post_id":"cjbm32o4x001eiwl7drr6dofr","tag_id":"cjbm32o66003yiwl78aweogk0","_id":"cjbm32o680043iwl7yphxqsrj"},{"post_id":"cjbm32o4y001hiwl7yoyeddff","tag_id":"cjbm32o67003ziwl7yqajne0r","_id":"cjbm32o680045iwl7b1f3iwb7"},{"post_id":"cjbm32o4y001hiwl7yoyeddff","tag_id":"cjbm32o670042iwl741fgljsi","_id":"cjbm32o680046iwl7ie2gmly9"},{"post_id":"cjbm32o50001jiwl7hs4fxf2g","tag_id":"cjbm32o67003ziwl7yqajne0r","_id":"cjbm32o690049iwl74djyaywr"},{"post_id":"cjbm32o50001jiwl7hs4fxf2g","tag_id":"cjbm32o680047iwl7qngzheqb","_id":"cjbm32o69004aiwl70004btnn"},{"post_id":"cjbm32o52001liwl7vyjpk89l","tag_id":"cjbm32o690048iwl77cmn11om","_id":"cjbm32o69004ciwl7znfppwa9"},{"post_id":"cjbm32o57001oiwl7fk8leocp","tag_id":"cjbm32o5n002hiwl7t9hmckwa","_id":"cjbm32o6a004eiwl7nlkdbsyf"},{"post_id":"cjbm32o5a001piwl77p3gartg","tag_id":"cjbm32o5c001tiwl7tp0oh9ro","_id":"cjbm32o6b004hiwl739zx8apm"},{"post_id":"cjbm32o5a001piwl77p3gartg","tag_id":"cjbm32o3l000giwl7i1xt8i0g","_id":"cjbm32o6b004iiwl7yi7t92vk"},{"post_id":"cjbm32o5a001piwl77p3gartg","tag_id":"cjbm32o6a004fiwl7t0x9hkv2","_id":"cjbm32o6c004jiwl7vyd3d1j0"},{"post_id":"cjbm32o5a001piwl77p3gartg","tag_id":"cjbm32o6b004giwl769dqpbml","_id":"cjbm32o6c004kiwl752nfktir"},{"post_id":"cjbm32oa1004liwl7v7n5zalu","tag_id":"cjbm32o5p002riwl74mq8o27o","_id":"cjbm32oa3004miwl78sid6qqj"},{"post_id":"cjbm32oa1004liwl7v7n5zalu","tag_id":"cjbm32o5k0028iwl7zb09gp42","_id":"cjbm32oa3004niwl7gcv7b1g5"},{"post_id":"cjbm32oa1004liwl7v7n5zalu","tag_id":"cjbm32o3x000oiwl75pfrve12","_id":"cjbm32oa3004oiwl7qeb5xq1p"},{"post_id":"cjbm36aki0000nkl7r63jjxpr","tag_id":"cjbm32o5k0028iwl7zb09gp42","_id":"cjbm36akl0001nkl7bvprfgme"},{"post_id":"cjbm36aki0000nkl7r63jjxpr","tag_id":"cjbm32o3x000oiwl75pfrve12","_id":"cjbm36akl0002nkl76mxpembm"}],"Tag":[{"name":"css","_id":"cjbm32o2t0004iwl71f5oy240"},{"name":"javascript","_id":"cjbm32o390008iwl7dik546my"},{"name":"android studio","_id":"cjbm32o3g000ciwl7vb3jx2gp"},{"name":"android","_id":"cjbm32o3l000giwl7i1xt8i0g"},{"name":"nodejs","_id":"cjbm32o3x000oiwl75pfrve12"},{"name":"https","_id":"cjbm32o42000siwl766u3xu8m"},{"name":"openssl","_id":"cjbm32o48000wiwl78lfl0v0p"},{"name":"jQuery","_id":"cjbm32o4m000ziwl7dqfkd5de"},{"name":"hexo","_id":"cjbm32o4w001diwl7l32rdyg7"},{"name":"ECS","_id":"cjbm32o51001kiwl76tkwgn00"},{"name":"git","_id":"cjbm32o56001niwl7voxplf6d"},{"name":"ubuntu","_id":"cjbm32o5c001tiwl7tp0oh9ro"},{"name":".gitignore","_id":"cjbm32o5i0023iwl7mlp7gc27"},{"name":"openjdk","_id":"cjbm32o5j0024iwl7v2zc0v9s"},{"name":"java","_id":"cjbm32o5k0027iwl7emxjmv4r"},{"name":"react","_id":"cjbm32o5k0028iwl7zb09gp42"},{"name":"kotlin","_id":"cjbm32o5n002hiwl7t9hmckwa"},{"name":"react-router","_id":"cjbm32o5o002liwl7w5q4g14y"},{"name":"翻译文档","_id":"cjbm32o5o002niwl7b63wpini"},{"name":"express","_id":"cjbm32o5p002riwl74mq8o27o"},{"name":"update-alternatives","_id":"cjbm32o66003tiwl7lnnbyoox"},{"name":"环境搭建","_id":"cjbm32o66003yiwl78aweogk0"},{"name":"windows","_id":"cjbm32o67003ziwl7yqajne0r"},{"name":"npm","_id":"cjbm32o670042iwl741fgljsi"},{"name":"mongodb","_id":"cjbm32o680047iwl7qngzheqb"},{"name":"son","_id":"cjbm32o690048iwl77cmn11om"},{"name":"apk","_id":"cjbm32o6a004fiwl7t0x9hkv2"},{"name":"reverse engineering","_id":"cjbm32o6b004giwl769dqpbml"}]}}