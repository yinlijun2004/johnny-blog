<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Johnny</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-12-02T11:32:25.843Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Johnny</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NavigationPrompt-react router 4.0.0 api中文文档</title>
    <link href="http://yoursite.com/2016/12/02/react-router-4-0-0-api-NavigationPrompt/"/>
    <id>http://yoursite.com/2016/12/02/react-router-4-0-0-api-NavigationPrompt/</id>
    <published>2016-12-02T11:16:00.000Z</published>
    <updated>2016-12-02T11:32:25.843Z</updated>
    
    <content type="html"><![CDATA[<font size="6em">&lt;NavigationPrompt&gt;</font>

<p>当你的应用进入一个状态，但是需要防止用户从当前状态离开时（比如填了一半的表单），渲染出一个导航确认（NavigationPrompt）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;formIsHalfFilledOut &amp;&amp; (</div><div class="line">  &lt;NavigationPrompt message=&quot;Are you sure you want to leave?&quot;/&gt;</div><div class="line">)&#125;</div></pre></td></tr></table></figure></p>
<h3 id="message-string"><a href="#message-string" class="headerlink" title="message: string"></a><font color="red">message: string</font></h3><a id="more"></a>
<p>当用户试图从当前状态离开时显示的信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;NavigationPrompt message=&quot;Are you sure you want to leave?&quot;/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="message-func"><a href="#message-func" class="headerlink" title="message: func"></a><font color="red">message: func</font></h3><p>这个函数返回一个提示用户跳转的信息，如果返回true，则允许跳转，函数的参数是用户将要跳转的下一个链接，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;NavigationPrompt message=&#123;(location) =&gt; (</div><div class="line">  `Are you sure you want to go to $&#123;location.pathname&#125;?`</div><div class="line">)&#125;/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="when-bool"><a href="#when-bool" class="headerlink" title="when: bool"></a><font color="red">when: bool</font></h3><p>when是一个逻辑变量，为true时，将显示message内容的弹窗，为false时，直接跳转。</p>
<p><navigationprompt when="{formIsHalfFilledOut}" message="Are you sure?"></navigationprompt></p>
<font size="6em">&lt;/NavigationPrompt&gt;</font>

]]></content>
    
    <summary type="html">
    
      &lt;font size=&quot;6em&quot;&gt;&amp;lt;NavigationPrompt&amp;gt;&lt;/font&gt;

&lt;p&gt;当你的应用进入一个状态，但是需要防止用户从当前状态离开时（比如填了一半的表单），渲染出一个导航确认（NavigationPrompt）。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;formIsHalfFilledOut &amp;amp;&amp;amp; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;NavigationPrompt message=&amp;quot;Are you sure you want to leave?&amp;quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;message-string&quot;&gt;&lt;a href=&quot;#message-string&quot; class=&quot;headerlink&quot; title=&quot;message: string&quot;&gt;&lt;/a&gt;&lt;font color=&quot;red&quot;&gt;message: string&lt;/font&gt;&lt;/h3&gt;
    
    </summary>
    
      <category term="react router 4.0.0 api中文文档" scheme="http://yoursite.com/categories/react-router-4-0-0-api%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="react-router" scheme="http://yoursite.com/tags/react-router/"/>
    
      <category term="翻译文档" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>Link-react router 4.0.0 api中文文档</title>
    <link href="http://yoursite.com/2016/11/29/react-router-4-0-0-api-Link/"/>
    <id>http://yoursite.com/2016/11/29/react-router-4-0-0-api-Link/</id>
    <published>2016-11-29T06:18:08.000Z</published>
    <updated>2016-12-02T11:15:33.039Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://react-router.now.sh/Link" target="_blank" rel="external">原文链接</a></p>
<font size="6em">&lt;Link&gt;</font>

<p>为你的应用提供可以声明的，可访问的导航功能。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Link to=<span class="string">"/about"</span> activeClassName=<span class="string">"active"</span>&gt;</div><div class="line">  About</div><div class="line">&lt;<span class="regexp">/Link&gt;</span></div></pre></td></tr></table></figure></p>
<font color="red">children: node | func</font>

<p>Link组件可以接受一个函数作为子控件，使得允许你使用自定义的组件渲染Link对象。</p>
<a id="more"></a>
<p>子控件函数的参数是一个对象，包含如下属性：</p>
<ul>
<li>isActive: (bool) 当前链接是否激活</li>
<li>location: 传递给Link的链接</li>
<li>href: (string) 路由的url</li>
<li>onClick: (func) dom的onClick处理函数</li>
<li>transition: (func) 它是router.transitionTo的快捷方式，代表Link对象的to属性。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Link to=<span class="string">"/courses"</span>&gt;&#123;</div><div class="line">  (&#123;isActive, location, href, onClick, transition&#125;) =&gt; </div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">RaisedButton</span> <span class="attr">label</span>=<span class="string">"Courses"</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span> <span class="attr">primary</span>=<span class="string">&#123;isActive&#125;</span> <span class="attr">href</span>=<span class="string">&#123;href&#125;</span> /&gt;</span></span></div><div class="line">&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<font color="red">to: string | object</font>

<p>链接的描述。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Link to=&quot;/courses&quot;/&gt;</div><div class="line">&lt;Link to=&#123;&#123;</div><div class="line">  pathname: &apos;/courses&apos;,</div><div class="line">  query: &#123; sort: &apos;name&apos; &#125;,</div><div class="line">  state: &#123; fromDashboard: true &#125;</div><div class="line">&#125;&#125;/&gt;</div></pre></td></tr></table></figure></p>
<font color="red">activeStyle: object</font>

<p>当链接匹配到<font color="grey" size="5em"><strong>to</strong></font>属性时的样式对象。它会和tyle对象合并之后生效。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;Link</div><div class="line">  to=&quot;/courses&quot;</div><div class="line">  style=&#123;&#123; color: &apos;blue&apos;, background: &apos;gray&apos; &#125;&#125;</div><div class="line">  activeStyle=&#123;&#123; color: &apos;red&apos; &#125;&#125;</div><div class="line">/&gt;</div><div class="line">// 总是有灰色背景</div><div class="line">// 链接为/foo时字体为blue</div><div class="line">// 为/courses为red(激活状态)</div></pre></td></tr></table></figure></p>
<font color="red">activeClassName: string</font>

<p>当匹配到链接时，生效的className。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;Link</div><div class="line">  to=<span class="string">"/courses"</span></div><div class="line">  className=<span class="string">"course-link"</span></div><div class="line">  activeClassName=<span class="string">"active"</span></div><div class="line">/&gt;</div><div class="line"><span class="comment">// will always have "course-link"</span></div><div class="line"><span class="comment">// at /courses it will be "course-link active"</span></div></pre></td></tr></table></figure></p>
<font color="red">activeOnlyWhenExact: bool</font>

<p>为true时, 只有当严格匹配，activeClassName和activeStyle才会生效。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Link to=&quot;/courses&quot; activeOnlyWhenExact activeClassName=&quot;active&quot;/&gt;</div><div class="line">// /courses 被激活</div><div class="line">// /courses/123 不被激活</div></pre></td></tr></table></figure>
<font color="red">isActive: func</font>

<p>允许自定义当前链接是否被激活，激活时返回true，否则返回false。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;Link</div><div class="line">  to=<span class="string">"/"</span></div><div class="line">  activeStyle=&#123;&#123; color: <span class="string">'red'</span> &#125;&#125;</div><div class="line">  isActive=&#123;(location) =&gt; (</div><div class="line">    <span class="comment">// 只有当没有query字段时被激活</span></div><div class="line">    !<span class="built_in">Object</span>.keys(location.query).length</div><div class="line">  )&#125;</div><div class="line">/&gt;</div><div class="line"></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">Link</span></span></span></div><div class="line">  <span class="attr">to</span>=<span class="string">"/courses"</span></div><div class="line">  <span class="attr">activeStyle</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> '<span class="attr">red</span>' &#125;&#125;</div><div class="line">  <span class="attr">isActive</span>=<span class="string">&#123;(location,</span> <span class="attr">props</span>) =&gt; (</div><div class="line">    // 匹配到"/courses" 或者 "/course/123"被激活</div><div class="line">    // 尽管这不是真正意义上的被激活, it is</div><div class="line">    // theoretically for the sake of a navigation menu</div><div class="line">    location.pathname.match(/course(s)?/)</div><div class="line">  )&#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<font color="red">location</font>

<p>如果你不想使用上下文中的location, 可以传递一个location的属性作为替代，这在链接比较深的redux应用中很有用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Match pattern=&quot;/foo&quot; location=&#123;this.props.location&#125;/&gt;</div></pre></td></tr></table></figure></p>
<font size="6em">&lt;/Link&gt;</font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://react-router.now.sh/Link&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;font size=&#39;6em&#39;&gt;&amp;lt;Link&amp;gt;&lt;/font&gt;

&lt;p&gt;为你的应用提供可以声明的，可访问的导航功能。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;Link to=&lt;span class=&quot;string&quot;&gt;&quot;/about&quot;&lt;/span&gt; activeClassName=&lt;span class=&quot;string&quot;&gt;&quot;active&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  About&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/Link&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;font color=&#39;red&#39;&gt;children: node | func&lt;/font&gt;

&lt;p&gt;Link组件可以接受一个函数作为子控件，使得允许你使用自定义的组件渲染Link对象。&lt;/p&gt;
    
    </summary>
    
      <category term="react router 4.0.0 api中文文档" scheme="http://yoursite.com/categories/react-router-4-0-0-api%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="react-router" scheme="http://yoursite.com/tags/react-router/"/>
    
      <category term="翻译文档" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>Miss-react router 4.0.0 api中文文档</title>
    <link href="http://yoursite.com/2016/11/29/react-router-4-0-0-api-Miss/"/>
    <id>http://yoursite.com/2016/11/29/react-router-4-0-0-api-Miss/</id>
    <published>2016-11-29T05:55:49.000Z</published>
    <updated>2016-11-29T06:13:53.581Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://react-router.now.sh/Miss" target="_blank" rel="external">原文链接</a></p>
<font size="6em">&lt;Miss&gt;</font>

<p>当没有匹配到当前的地址时，将会渲染Miss。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> App = () =&gt; (</div><div class="line">  &lt;Router&gt;</div><div class="line">    &lt;Match pattern="/foo"/&gt;</div><div class="line">    &lt;Match pattern="/bar"/&gt;</div><div class="line">    &lt;Miss component=&#123;NoMatch&#125;/&gt;</div><div class="line">  &lt;/Router&gt;</div><div class="line">)</div><div class="line"></div><div class="line">const NoMatch = (&#123; location &#125;) =&gt; (</div><div class="line">  &lt;div&gt;Nothing matched &#123;location.pathname&#125;.&lt;/div&gt;</div><div class="line">)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="component"><a href="#component" class="headerlink" title="component"></a><font color="red">component</font></h3><p>跟Match一样的，表示将要渲染的组建，但是不同的是只有location一个prop传进去。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Miss component=&#123;NoMatch&#125;/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="render-func"><a href="#render-func" class="headerlink" title="render: func"></a><font color="red">render: func</font></h3><p>跟Match一样的，可以提供一个渲染函数，同样，也只有location一个prop传进去。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Miss render=&#123;(&#123; location &#125;) =&gt; (</div><div class="line">  &lt;div&gt;Nothing matched &#123;location.pathname&#125;.&lt;/div&gt;</div><div class="line">)&#125;/&gt;</div></pre></td></tr></table></figure></p>
<p><font size="6em">&lt;/Miss&gt;<font></font></font></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://react-router.now.sh/Miss&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;font size=&#39;6em&#39;&gt;&amp;lt;Miss&amp;gt;&lt;/font&gt;

&lt;p&gt;当没有匹配到当前的地址时，将会渲染Miss。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; App = () =&amp;gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;Router&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;Match pattern=&quot;/foo&quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;Match pattern=&quot;/bar&quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;Miss component=&amp;#123;NoMatch&amp;#125;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;/Router&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;const NoMatch = (&amp;#123; location &amp;#125;) =&amp;gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;div&amp;gt;Nothing matched &amp;#123;location.pathname&amp;#125;.&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="react router 4.0.0 api中文文档" scheme="http://yoursite.com/categories/react-router-4-0-0-api%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="react-router" scheme="http://yoursite.com/tags/react-router/"/>
    
      <category term="翻译文档" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>解决 /dev/kvm is not found 的问题</title>
    <link href="http://yoursite.com/2016/11/28/fix-dev-kvm-is-not-found/"/>
    <id>http://yoursite.com/2016/11/28/fix-dev-kvm-is-not-found/</id>
    <published>2016-11-28T11:44:23.000Z</published>
    <updated>2016-11-28T11:44:23.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题出现环境"><a href="#问题出现环境" class="headerlink" title="问题出现环境"></a>问题出现环境</h2><ul>
<li>Ubuntu 12.04</li>
<li>Android Studio 2.2.2</li>
</ul>
<h2 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h2><h3 id="开启VT-x"><a href="#开启VT-x" class="headerlink" title="开启VT-x"></a>开启VT-x</h3><p>在ubuntu上使用Android Studio创建模拟器时，会提示一个错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/dev/kvm is not found</div></pre></td></tr></table></figure></p>
<p>并且提示要在<em>BIOS</em>里面开启<font size="4em"><strong>VT-x</strong></font>。</p>
<a id="more"></a>
<p>重启电脑，按<em>DEL</em>键进入<em>BIOS</em>,发现确实没有启用，于是启用后再此重启电脑。</p>
<p>此时打开Android Studio，仍然提示一样的错误。</p>
<p>再次在网上搜寻，发现如下解决方案，记录一下。</p>
<p><a href="http://askubuntu.com/questions/600727/replacement-for-haxm-on-ubuntu-says-intel-x86-emulator-accelerator-is-not-comp" target="_blank" rel="external">http://askubuntu.com/questions/600727/replacement-for-haxm-on-ubuntu-says-intel-x86-emulator-accelerator-is-not-comp</a></p>
<p>###<br>Check if your CPU supports hardware virtualization, by typing:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">egrep -c &apos;(vmx|svm)&apos; /proc/cpuinfo</div></pre></td></tr></table></figure></p>
<p>If the result is 0, your CPU does not support hardware virtualization, which is necessary to run the KVM. If you get 1 or more, that means you’re fine.</p>
<p>Next, install KVM. First make sure if your processor supports KVM by typing:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kvm-ok</div></pre></td></tr></table></figure></p>
<p>You will see this if that’s the case:</p>
<p>INFO: Your CPU supports KVM extensions INFO: /dev/kvm exists KVM acceleration can be used<br>If this is the result, you need to turn on Intel VT in BIOS:</p>
<p>INFO: KVM is disabled by your BIOS HINT: Enter your BIOS setup and enable Virtualization Technology (VT), and then hard poweroff/poweron your system KVM acceleration can NOT be used<br>The next step is to install the KVM and a few other packages needed. To do so, type:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils</div></pre></td></tr></table></figure></p>
<p>Add your user to some groups, replacing by your own username:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo adduser &lt;user&gt; libvirtd</div><div class="line">sudo adduser &lt;user&gt; kvm</div></pre></td></tr></table></figure></p>
<p>Check if everything is ok:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo virsh -c qemu:///system list</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题出现环境&quot;&gt;&lt;a href=&quot;#问题出现环境&quot; class=&quot;headerlink&quot; title=&quot;问题出现环境&quot;&gt;&lt;/a&gt;问题出现环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Ubuntu 12.04&lt;/li&gt;
&lt;li&gt;Android Studio 2.2.2&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;解决步骤&quot;&gt;&lt;a href=&quot;#解决步骤&quot; class=&quot;headerlink&quot; title=&quot;解决步骤&quot;&gt;&lt;/a&gt;解决步骤&lt;/h2&gt;&lt;h3 id=&quot;开启VT-x&quot;&gt;&lt;a href=&quot;#开启VT-x&quot; class=&quot;headerlink&quot; title=&quot;开启VT-x&quot;&gt;&lt;/a&gt;开启VT-x&lt;/h3&gt;&lt;p&gt;在ubuntu上使用Android Studio创建模拟器时，会提示一个错误：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/dev/kvm is not found&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;并且提示要在&lt;em&gt;BIOS&lt;/em&gt;里面开启&lt;font size=&#39;4em&#39;&gt;&lt;strong&gt;VT-x&lt;/strong&gt;&lt;/font&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ubuntu" scheme="http://yoursite.com/tags/ubuntu/"/>
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="android studio" scheme="http://yoursite.com/tags/android-studio/"/>
    
  </entry>
  
  <entry>
    <title>https双向验证功能的实现</title>
    <link href="http://yoursite.com/2016/11/28/android-https-verify-ways/"/>
    <id>http://yoursite.com/2016/11/28/android-https-verify-ways/</id>
    <published>2016-11-28T00:51:23.000Z</published>
    <updated>2016-11-29T00:59:51.151Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍一个简单echo服务器的实现，服务端用nodejs，客户端用android。</p>
<h2 id="用openssl一系列证书"><a href="#用openssl一系列证书" class="headerlink" title="用openssl一系列证书"></a><font size="6em">用openssl一系列证书</font></h2><h3 id="生成自己的CA根证书"><a href="#生成自己的CA根证书" class="headerlink" title="生成自己的CA根证书"></a><font size="5em">生成自己的CA根证书</font></h3><h4 id="生成跟证书私钥ca-key"><a href="#生成跟证书私钥ca-key" class="headerlink" title="生成跟证书私钥ca.key"></a><font size="4em">生成跟证书私钥ca.key</font></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ openssl genrsa -des3 -out ca.key 1024</div></pre></td></tr></table></figure>
<h4 id="生成X-509证书签名请求文件ca-csr"><a href="#生成X-509证书签名请求文件ca-csr" class="headerlink" title="生成X.509证书签名请求文件ca.csr"></a><font size="4em">生成X.509证书签名请求文件ca.csr</font></h4><p>在生成ca.csr的过程中，会让输入一些组织信息等。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ openssl req -new -key ca.key -out ca.csr</div></pre></td></tr></table></figure></p>
<a id="more"></a> 
<p>输出如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Enter pass phrase for ca.key:</div><div class="line">You are about to be asked to enter information that will be incorporated</div><div class="line">into your certificate request.</div><div class="line">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class="line">There are quite a few fields but you can leave some blank</div><div class="line">For some fields there will be a default value,</div><div class="line">If you enter &apos;.&apos;, the field will be left blank.</div><div class="line">-----</div><div class="line">Country Name (2 letter code) [AU]:CN</div><div class="line">State or Province Name (full name) [Some-State]:GuangDong</div><div class="line">Locality Name (eg, city) []:ShenZhen</div><div class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:IBoxPay</div><div class="line">Organizational Unit Name (eg, section) []:IBoxPay</div><div class="line">Common Name (e.g. server FQDN or YOUR name) []:</div><div class="line">Email Address []:admin@iboxpay.com</div><div class="line"></div><div class="line">Please enter the following &apos;extra&apos; attributes</div><div class="line">to be sent with your certificate request</div><div class="line">A challenge password []:</div><div class="line">An optional company name []:</div></pre></td></tr></table></figure></p>
<h4 id="生成X-509格式的CA根证书ca-crt"><a href="#生成X-509格式的CA根证书ca-crt" class="headerlink" title="生成X.509格式的CA根证书ca.crt"></a><font size="4em">生成X.509格式的CA根证书ca.crt</font></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ openssl x509 -req -days 365 -in ca.csr -out ca.crt -signkey ca.key</div></pre></td></tr></table></figure>
<p>输出如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Signature ok</div><div class="line">subject=/C=CN/ST=GuangDong/L=ShenZhen/O=IBoxPay/OU=IBoxPay/emailAddress=admin@iboxpay.com</div><div class="line">Getting Private key</div><div class="line">Enter pass phrase for ca.key:</div></pre></td></tr></table></figure></p>
<h3 id="生成服务端的证书"><a href="#生成服务端的证书" class="headerlink" title="生成服务端的证书"></a><font size="5em">生成服务端的证书</font></h3><h4 id="生成服务端私钥文件-server-key"><a href="#生成服务端私钥文件-server-key" class="headerlink" title="生成服务端私钥文件 server.key"></a><font size="4em">生成服务端私钥文件 server.key</font></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ openssl genrsa -des3 -out server.key 1024</div></pre></td></tr></table></figure>
<h4 id="服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server-csr"><a href="#服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server-csr" class="headerlink" title="服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server.csr"></a><font size="4em">服务端需要向CA机构申请签名证书，在申请签名证书之前依然是创建自己的证书签名请求文件server.csr</font></h4><p>这一步需要填写一个组织信息，不要跟根证书的组织的一样。另外Common Name填一个自己的域名（如果没有实际的域名也可以写，后面在/etc/hosts映射一个，我写的就是yinlijun.com），不要填localhost，android会报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl req -new -key server.key -out server.csr</div></pre></td></tr></table></figure></p>
<p>输出如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Enter pass phrase for server.key:</div><div class="line">You are about to be asked to enter information that will be incorporated</div><div class="line">into your certificate request.</div><div class="line">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class="line">There are quite a few fields but you can leave some blank</div><div class="line">For some fields there will be a default value,</div><div class="line">If you enter &apos;.&apos;, the field will be left blank.</div><div class="line">-----</div><div class="line">Country Name (2 letter code) [AU]:CN</div><div class="line">State or Province Name (full name) [Some-State]:GuangDong</div><div class="line">Locality Name (eg, city) []:ShenZhen</div><div class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:yinlijun</div><div class="line">Organizational Unit Name (eg, section) []:yinlijun</div><div class="line">Common Name (e.g. server FQDN or YOUR name) []:yinlijun.com</div><div class="line">Email Address []:admin@yinlijun.com</div><div class="line"></div><div class="line">Please enter the following &apos;extra&apos; attributes</div><div class="line">to be sent with your certificate request</div><div class="line">A challenge password []:</div></pre></td></tr></table></figure></p>
<h4 id="删除私钥的密码，这一步非常重要，一定要执行-否则会影响后面的步骤。"><a href="#删除私钥的密码，这一步非常重要，一定要执行-否则会影响后面的步骤。" class="headerlink" title="删除私钥的密码，这一步非常重要，一定要执行,否则会影响后面的步骤。"></a><font size="4em">删除私钥的密码，这一步非常<strong>重要</strong>，一定要执行,否则会影响后面的步骤。</font></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cp server.key server.key.passphrase</div><div class="line">$ openssl rsa -in server.key.passphrase -out server.key</div></pre></td></tr></table></figure>
<p>输出如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Enter pass phrase for server.key.passphrase:</div><div class="line">writing RSA key</div></pre></td></tr></table></figure></p>
<h4 id="签发服务器证书server-crt："><a href="#签发服务器证书server-crt：" class="headerlink" title="签发服务器证书server.crt："></a><font size="4em">签发服务器证书server.crt：</font></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt</div></pre></td></tr></table></figure>
<p>输出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Signature ok</div><div class="line">subject=/C=CN/ST=GuangDong/L=ShenZhen/O=yinlijun/OU=yinlijun/CN=yinlijun.com/emailAddress=admin@yinlijun.com</div><div class="line">Getting Private key</div></pre></td></tr></table></figure></p>
<p>到现在为止，你目录下的文件应该有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">ls -la</div><div class="line">total 36</div><div class="line">drwxr-xr-x  2 user user 4096 Sep  5 16:19 .</div><div class="line">drwxr-xr-x 12 user user 4096 Sep  5 16:09 ..</div><div class="line">-rw-r--r--  1 user user  757 Sep  5 16:12 ca.crt</div><div class="line">-rw-r--r--  1 user user  603 Sep  5 16:10 ca.csr</div><div class="line">-rw-r--r--  1 user user  963 Sep  5 16:09 ca.key</div><div class="line">-rw-r--r--  1 user user  757 Sep  5 16:19 server.crt</div><div class="line">-rw-r--r--  1 user user  603 Sep  5 16:16 server.csr</div><div class="line">-rw-r--r--  1 user user  887 Sep  5 16:18 server.key</div><div class="line">-rw-r--r--  1 user user  951 Sep  5 16:17 server.key.passphrase</div></pre></td></tr></table></figure></p>
<h4 id="生成之后察看服务器证书信息。"><a href="#生成之后察看服务器证书信息。" class="headerlink" title="生成之后察看服务器证书信息。"></a>生成之后察看服务器证书信息。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl x509 -in server.crt -text -noout</div></pre></td></tr></table></figure>
<h4 id="生成服务器的pfx文件，这个文件node服务器要用到。"><a href="#生成服务器的pfx文件，这个文件node服务器要用到。" class="headerlink" title="生成服务器的pfx文件，这个文件node服务器要用到。"></a>生成服务器的pfx文件，这个文件node服务器要用到。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl pkcs12 -export -in server.crt -inkey server.key -certfile ca.crt -out server.pfx</div></pre></td></tr></table></figure>
<p>输出如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Enter Export Password:</div><div class="line">Verifying - Enter Export Password:</div></pre></td></tr></table></figure></p>
<h4 id="生成服务端的p12文件。，这个是为了生成服务端bks文件用的"><a href="#生成服务端的p12文件。，这个是为了生成服务端bks文件用的" class="headerlink" title="生成服务端的p12文件。，这个是为了生成服务端bks文件用的"></a>生成服务端的p12文件。，这个是为了生成服务端bks文件用的</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl pkcs12 -export -clcerts -in server.crt -inkey server.key -out server.p12</div></pre></td></tr></table></figure>
<h3 id="下载一个bcprov-jdk16-141-jar，也是为了生成服务端bks文件要用到的。"><a href="#下载一个bcprov-jdk16-141-jar，也是为了生成服务端bks文件要用到的。" class="headerlink" title="下载一个bcprov-jdk16-141.jar，也是为了生成服务端bks文件要用到的。"></a>下载一个bcprov-jdk16-141.jar，也是为了生成服务端bks文件要用到的。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">下载地址：[http://www.java2s.com/Code/JarDownload/bcprov/bcprov-jdk16-141.jar.zip](http://www.java2s.com/Code/JarDownload/bcprov/bcprov-jdk16-141.jar.zip)</div></pre></td></tr></table></figure>
<h3 id="生成服务端的bks文件，这个android程序要用到"><a href="#生成服务端的bks文件，这个android程序要用到" class="headerlink" title="生成服务端的bks文件，这个android程序要用到"></a>生成服务端的bks文件，这个android程序要用到</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -importkeystore -srckeystore server.p12 -srcstoretype pkcs12 -destkeystore server.bks -deststoretype bks -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath bcprov-jdk16-141.jar</div></pre></td></tr></table></figure>
<p>输出如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">输入目标密钥库口令:  </div><div class="line">再次输入新密码: </div><div class="line">输入源密钥库口令:  </div><div class="line">已成功导入别名 1 项。</div><div class="line">已完成导入命令: 1 项成功导入，0 项失败或取消</div></pre></td></tr></table></figure></p>
<p>因为要进行双向验证，还需要生成客户端证书。</p>
<h4 id="生成客户端密钥"><a href="#生成客户端密钥" class="headerlink" title="生成客户端密钥"></a>生成客户端密钥</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl genrsa -des3 -out client.key 1024</div></pre></td></tr></table></figure>
<h4 id="生成客户端证书请求签名文件"><a href="#生成客户端证书请求签名文件" class="headerlink" title="生成客户端证书请求签名文件"></a>生成客户端证书请求签名文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl req -new -out client.csr -key client.key</div></pre></td></tr></table></figure>
<p>输出如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Enter pass phrase for client.key:</div><div class="line">You are about to be asked to enter information that will be incorporated</div><div class="line">into your certificate request.</div><div class="line">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class="line">There are quite a few fields but you can leave some blank</div><div class="line">For some fields there will be a default value,</div><div class="line">If you enter &apos;.&apos;, the field will be left blank.</div><div class="line">-----</div><div class="line">Country Name (2 letter code) [AU]:CN</div><div class="line">State or Province Name (full name) [Some-State]:GuangDong </div><div class="line">Locality Name (eg, city) []:ShenZhen</div><div class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:ruochen</div><div class="line">Organizational Unit Name (eg, section) []:ruochen</div><div class="line">Common Name (e.g. server FQDN or YOUR name) []:</div><div class="line">Email Address []:admin@ruochen.com</div><div class="line"></div><div class="line">Please enter the following &apos;extra&apos; attributes</div><div class="line">to be sent with your certificate request</div><div class="line">A challenge password []:</div><div class="line">An optional company name []:</div></pre></td></tr></table></figure></p>
<h4 id="创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。"><a href="#创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。" class="headerlink" title="创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。"></a>创建一个自当前日期起有效期为十年的客户端证书，需要根证书和根密钥参与。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl x509 -req -in client.csr -out client.cert -signkey client.key -CA ca.crt -CAkey ca.key -CAcreateserial -days 3650</div></pre></td></tr></table></figure>
<p>输入如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Signature ok</div><div class="line">subject=/C=CN/ST=GuangDong/L=ShenZhen/O=ruochen/OU=ruochen/emailAddress=admin@ruochen.com</div><div class="line">Getting Private key</div><div class="line">Enter pass phrase for client.key:</div><div class="line">Getting CA Private Key</div><div class="line">Enter pass phrase for ca.key:</div><div class="line">yinlijun@yinlijun:~/personal_github/echo-https-server/keys$ ls</div><div class="line">ca.crt  ca.csr  ca.key  ca.srl  client.cert  client.csr  client.key  server.crt  server.csr  server.key  server.key.passphrase  server.pfx</div><div class="line">yinlijun@yinlijun:~/personal_github/echo-https-server/keys$ openssl pkcs12 -export -clcerts -in client.cert -inkey client.key -out client.p12</div><div class="line">Enter pass phrase for client.key:</div><div class="line">Enter Export Password:</div><div class="line">Verifying - Enter Export Password:</div></pre></td></tr></table></figure></p>
<h4 id="生成浏览器支持的p12文件"><a href="#生成浏览器支持的p12文件" class="headerlink" title="生成浏览器支持的p12文件"></a>生成浏览器支持的p12文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl pkcs12 -export -clcerts -in client.cert -inkey client.key -out client.p12</div></pre></td></tr></table></figure>
<h4 id="将客户端证书文件client-crt和客户端证书密钥文件client-key合并成客户端证书安装包client-pfx"><a href="#将客户端证书文件client-crt和客户端证书密钥文件client-key合并成客户端证书安装包client-pfx" class="headerlink" title="将客户端证书文件client.crt和客户端证书密钥文件client.key合并成客户端证书安装包client.pfx"></a>将客户端证书文件client.crt和客户端证书密钥文件client.key合并成客户端证书安装包client.pfx</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl pkcs12 -export -in client.crt -inkey client.key -out client.pfx</div></pre></td></tr></table></figure>
<p>以上的文件我只用到了一部分，应该有替代关系，具体我也搞不清楚:)。 不同的实现方式有用到不同的文件。<br>我的android客户端用到了</p>
<ul>
<li>server.bks</li>
<li>client.p12</li>
</ul>
<p>看了网上的一些例子，好像server.bks可以用server.crt替代。</p>
<p>node用到了</p>
<ul>
<li>server.pfx</li>
</ul>
<p>察看node的文档，server.pfx可以用server.crt和server.key替代。</p>
<h2 id="服务端（nodejs）的代码"><a href="#服务端（nodejs）的代码" class="headerlink" title="服务端（nodejs）的代码"></a>服务端（nodejs）的代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> https =<span class="built_in">require</span>(<span class="string">'https'</span>), fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">    key: fs.readFileSync(<span class="string">'./keys/server.key'</span>),</div><div class="line">    cert: fs.readFileSync(<span class="string">'./keys/server.crt'</span>),</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> server = https.createServer(options, app);</div><div class="line">server.listen(<span class="number">443</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Https server listening on port '</span> + <span class="number">443</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="android应用自有证书的验证方式"><a href="#android应用自有证书的验证方式" class="headerlink" title="android应用自有证书的验证方式"></a>android应用自有证书的验证方式</h2><p>将服务端证书拷贝到app资源目录下，一般是<project_dir>/assets/server.crt</project_dir></p>
<h3 id="方法一：直接根据server-crt初始化TrustManagerFactory"><a href="#方法一：直接根据server-crt初始化TrustManagerFactory" class="headerlink" title="方法一：直接根据server.crt初始化TrustManagerFactory"></a>方法一：直接根据server.crt初始化TrustManagerFactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">    CertificateFactory cf = CertificateFactory.getInstance(<span class="string">"X.509"</span>);</div><div class="line">    InputStream caInput = <span class="keyword">new</span> BufferedInputStream(getAssets().open(<span class="string">"server.crt"</span>));</div><div class="line">    <span class="keyword">final</span> Certificate ca;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        ca = cf.generateCertificate(caInput);</div><div class="line">        Log.i(TAG, <span class="string">"ca="</span> + ((X509Certificate) ca).getSubjectDN());</div><div class="line">        Log.i(TAG, <span class="string">"key="</span> + ((X509Certificate) ca).getPublicKey());</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        caInput.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    String keyStoreType = KeyStore.getDefaultType();</div><div class="line">    Log.d(TAG, <span class="string">"keystore type:"</span> + keyStoreType);</div><div class="line">    KeyStore keyStore = KeyStore.getInstance(keyStoreType);</div><div class="line">    keyStore.load(<span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">    keyStore.setCertificateEntry(<span class="string">"cert"</span>, ca);</div><div class="line"></div><div class="line">    String tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();</div><div class="line">    Log.d(TAG, <span class="string">"tmfAlgorithm:"</span> + tmfAlgorithm);</div><div class="line">    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(tmfAlgorithm);</div><div class="line">    trustManagerFactory.init(keyStore);</div><div class="line"></div><div class="line">    mSSLContext = SSLContext.getInstance(<span class="string">"TLS"</span>);</div><div class="line">    mSSLContext.init(<span class="keyword">null</span>, trustManagerFactory.getTrustManagers(), <span class="keyword">null</span>);</div><div class="line"></div><div class="line">    URL url = <span class="keyword">new</span> URL(<span class="string">"https://yinlijun.com"</span>);</div><div class="line">    HttpsURLConnection urlConnection =</div><div class="line">            (HttpsURLConnection)url.openConnection();</div><div class="line">    urlConnection.setSSLSocketFactory(mSSLContext.getSocketFactory());</div><div class="line">    InputStream in = urlConnection.getInputStream();</div><div class="line">    copyInputStreamToOutputStream(in, System.out);</div><div class="line">&#125; <span class="keyword">catch</span> (CertificateException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (KeyManagementException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (KeyStoreException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>copyInputStreamToOutputStream方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">copyInputStreamToOutputStream</span><span class="params">(InputStream in, PrintStream out)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> ((c = in.read(buffer)) != -<span class="number">1</span>) &#123;</div><div class="line">        out.write(buffer, <span class="number">0</span>, c);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    CertificateFactory cf = CertificateFactory.getInstance(<span class="string">"X.509"</span>);</div><div class="line">    InputStream caInput = <span class="keyword">new</span> BufferedInputStream(getAssets().open(<span class="string">"server.crt"</span>));</div><div class="line">    <span class="keyword">final</span> Certificate ca;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        ca = cf.generateCertificate(caInput);</div><div class="line">        Log.i(<span class="string">"Longer"</span>, <span class="string">"ca="</span> + ((X509Certificate) ca).getSubjectDN());</div><div class="line">        Log.i(<span class="string">"Longer"</span>, <span class="string">"key="</span> + ((X509Certificate) ca).getPublicKey());</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        caInput.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Create an SSLContext that uses our TrustManager</span></div><div class="line">    SSLContext context = SSLContext.getInstance(<span class="string">"TLSv1"</span>,<span class="string">"AndroidOpenSSL"</span>);</div><div class="line">    context.init(<span class="keyword">null</span>, <span class="keyword">new</span> TrustManager[]&#123;</div><div class="line">            <span class="keyword">new</span> X509TrustManager() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] chain,</span></span></div><div class="line">                                                String authType)</div><div class="line">                        <span class="keyword">throws</span> CertificateException &#123;</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] chain,</span></span></div><div class="line">                                                String authType)</div><div class="line">                        <span class="keyword">throws</span> CertificateException &#123;</div><div class="line">                    <span class="keyword">for</span> (X509Certificate cert : chain) &#123;</div><div class="line"></div><div class="line">                        <span class="comment">// Make sure that it hasn't expired.</span></div><div class="line">                        cert.checkValidity();</div><div class="line"></div><div class="line">                        <span class="comment">// Verify the certificate's public key chain.</span></div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            cert.verify(((X509Certificate) ca).getPublicKey());</div><div class="line">                        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125; <span class="keyword">catch</span> (NoSuchProviderException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125; <span class="keyword">catch</span> (SignatureException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> X509Certificate[<span class="number">0</span>];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">    &#125;, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">    URL url = <span class="keyword">new</span> URL(<span class="string">"https://yinlijun.com/"</span>);</div><div class="line">    HttpsURLConnection urlConnection =</div><div class="line">            (HttpsURLConnection)url.openConnection();</div><div class="line">    urlConnection.setSSLSocketFactory(context.getSocketFactory());</div><div class="line">    InputStream in = urlConnection.getInputStream();</div><div class="line">    copyInputStreamToOutputStream(in, System.out);</div></pre></td></tr></table></figure>
<h2 id="双向认证"><a href="#双向认证" class="headerlink" title="双向认证"></a>双向认证</h2><p>单向验证只能验证服务器，如果服务器也想对客户端进行验证，即所谓（双向验证），需要在连接是一起发送客户端证书。</p>
<h3 id="双向认证，服务器代码"><a href="#双向认证，服务器代码" class="headerlink" title="双向认证，服务器代码"></a>双向认证，服务器代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> tls = <span class="built_in">require</span>(<span class="string">'tls'</span>);</div><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> options = &#123;</div><div class="line">  pfx: fs.readFileSync(<span class="string">'./server.pfx'</span>),</div><div class="line">  passphrase: <span class="string">"123456"</span>,</div><div class="line">  <span class="comment">// This is necessary only if using the client certificate authentication.</span></div><div class="line">  requestCert: <span class="literal">true</span>,</div><div class="line">  rejectUnauthorized: <span class="literal">true</span> <span class="comment">//如果接受也非认证链接，可以删除此行。</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">//需要双向认证才需要配置requestCert为true。</span></div><div class="line"><span class="keyword">const</span> server = tls.createServer(options, (socket) =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'server connected'</span>,</div><div class="line">              socket.authorized ? <span class="string">'authorized'</span> : <span class="string">'unauthorized'</span>);</div><div class="line">  socket.setEncoding(<span class="string">'utf8'</span>);</div><div class="line">  socket.on(<span class="string">'data'</span>, (data) =&gt; &#123;</div><div class="line">      <span class="built_in">console</span>.log(data);</div><div class="line">      socket.write(data);</div><div class="line">  &#125;);</div><div class="line">  socket.on(<span class="string">'end'</span>, (socket) =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"socket closed"</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line">server.listen(<span class="number">8000</span>, () =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'server bound'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="双向认证，android的代码，实现方式一"><a href="#双向认证，android的代码，实现方式一" class="headerlink" title="双向认证，android的代码，实现方式一"></a>双向认证，android的代码，实现方式一</h3><p>server.pfx和client.p12放到<project_dir>/assets/目录下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    KeyStore trustStore = KeyStore.getInstance(<span class="string">"bks"</span>);</div><div class="line">    InputStream tsIn = getResources().getAssets().open(<span class="string">"server.bks"</span>);</div><div class="line"></div><div class="line">    KeyStore keyStore = KeyStore.getInstance(<span class="string">"PKCS12"</span>);</div><div class="line">    InputStream ksIn = getResources().getAssets().open(<span class="string">"client.p12"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        keyStore.load(ksIn, <span class="string">"123456"</span>.toCharArray());</div><div class="line">        trustStore.load(tsIn, <span class="string">"123456"</span>.toCharArray());</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ksIn.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception ignore) &#123;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            tsIn.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception ignore) &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(<span class="string">"X509"</span>);</div><div class="line">    keyManagerFactory.init(keyStore, <span class="string">"123456"</span>.toCharArray());</div><div class="line">    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());</div><div class="line">    trustManagerFactory.init(trustStore);</div><div class="line">    mSSLContext = SSLContext.getInstance(<span class="string">"TLS"</span>);</div><div class="line">    mSSLContext.init(<span class="keyword">null</span>, trustManagerFactory.getTrustManagers(), <span class="keyword">null</span>);</div><div class="line"></div><div class="line">    mSSLSocket = (SSLSocket) mSSLContext.getSocketFactory().createSocket(<span class="string">"yinlijun.com"</span>, <span class="number">8000</span>);</div><div class="line">    mSSLSocket.startHandshake();</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (KeyManagementException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (KeyStoreException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (UnrecoverableKeyException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure></project_dir></p>
<h3 id="双向认证，android的代码，实现方式2，用server-crt替代server-bks"><a href="#双向认证，android的代码，实现方式2，用server-crt替代server-bks" class="headerlink" title="双向认证，android的代码，实现方式2，用server.crt替代server.bks"></a>双向认证，android的代码，实现方式2，用server.crt替代server.bks</h3><p>server.crt和client.p12放到<project_dir>/assets/目录下</project_dir></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    CertificateFactory cf = CertificateFactory.getInstance(<span class="string">"X.509"</span>);</div><div class="line">    InputStream caInput = <span class="keyword">new</span> BufferedInputStream(getAssets().open(<span class="string">"server.crt"</span>));</div><div class="line">    <span class="keyword">final</span> Certificate ca;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        ca = cf.generateCertificate(caInput);</div><div class="line">        Log.i(<span class="string">"Longer"</span>, <span class="string">"ca="</span> + ((X509Certificate) ca).getSubjectDN());</div><div class="line">        Log.i(<span class="string">"Longer"</span>, <span class="string">"key="</span> + ((X509Certificate) ca).getPublicKey());</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        caInput.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    KeyStore keyStore = KeyStore.getInstance(<span class="string">"PKCS12"</span>);</div><div class="line">    InputStream ksIn = getResources().getAssets().open(<span class="string">"client.p12"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        keyStore.load(ksIn, <span class="string">"123456"</span>.toCharArray());</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ksIn.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception ignore) &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(<span class="string">"X509"</span>);</div><div class="line">    keyManagerFactory.init(keyStore, <span class="string">"123456"</span>.toCharArray());</div><div class="line"></div><div class="line">    <span class="comment">// Create an SSLContext that uses our TrustManager</span></div><div class="line">    SSLContext context = SSLContext.getInstance(<span class="string">"TLSv1"</span>,<span class="string">"AndroidOpenSSL"</span>);</div><div class="line">    context.init(keyManagerFactory.getKeyManagers(), <span class="keyword">new</span> TrustManager[]&#123;</div><div class="line">            <span class="keyword">new</span> X509TrustManager() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] chain,</span></span></div><div class="line">                                                String authType)</div><div class="line">                        <span class="keyword">throws</span> CertificateException &#123;</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] chain,</span></span></div><div class="line">                                                String authType)</div><div class="line">                        <span class="keyword">throws</span> CertificateException &#123;</div><div class="line">                    <span class="keyword">for</span> (X509Certificate cert : chain) &#123;</div><div class="line"></div><div class="line">                        <span class="comment">// Make sure that it hasn't expired.</span></div><div class="line">                        cert.checkValidity();</div><div class="line"></div><div class="line">                        <span class="comment">// Verify the certificate's public key chain.</span></div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            cert.verify(((X509Certificate) ca).getPublicKey());</div><div class="line">                        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125; <span class="keyword">catch</span> (NoSuchProviderException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125; <span class="keyword">catch</span> (SignatureException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> X509Certificate[<span class="number">0</span>];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">    &#125;, <span class="keyword">null</span>);</div><div class="line">    <span class="comment">//...</span></div></pre></td></tr></table></figure>
<p>项目地址：</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://matoski.com/article/node-express-generate-ssl/" target="_blank" rel="external">How to generate self-signed certificate for usage in Express4 or Node.js HTTP</a></li>
<li><a href="http://blog.csdn.net/fyang2007/article/details/6180361" target="_blank" rel="external">SSL证书生成方法</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/22816331" target="_blank" rel="external">Android安全开发之安全使用HTTPS</a></li>
<li><a href="https://developer.android.com/training/articles/security-ssl.html#nogotofail" target="_blank" rel="external">通过 HTTPS 和 SSL 确保安全</a> (要翻墙)</li>
<li><a href="https://nodejs.org/api/tls.html" target="_blank" rel="external">https://nodejs.org/api/tls.html</a></li>
<li><a href="https://gist.github.com/Frank-Zhu/41e21a00df26d63cd38d" target="_blank" rel="external">https://gist.github.com/Frank-Zhu/41e21a00df26d63cd38d</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍一个简单echo服务器的实现，服务端用nodejs，客户端用android。&lt;/p&gt;
&lt;h2 id=&quot;用openssl一系列证书&quot;&gt;&lt;a href=&quot;#用openssl一系列证书&quot; class=&quot;headerlink&quot; title=&quot;用openssl一系列证书&quot;&gt;&lt;/a&gt;&lt;font size=&#39;6em&#39;&gt;用openssl一系列证书&lt;/font&gt;&lt;/h2&gt;&lt;h3 id=&quot;生成自己的CA根证书&quot;&gt;&lt;a href=&quot;#生成自己的CA根证书&quot; class=&quot;headerlink&quot; title=&quot;生成自己的CA根证书&quot;&gt;&lt;/a&gt;&lt;font size=&#39;5em&#39;&gt;生成自己的CA根证书&lt;/font&gt;&lt;/h3&gt;&lt;h4 id=&quot;生成跟证书私钥ca-key&quot;&gt;&lt;a href=&quot;#生成跟证书私钥ca-key&quot; class=&quot;headerlink&quot; title=&quot;生成跟证书私钥ca.key&quot;&gt;&lt;/a&gt;&lt;font size=&#39;4em&#39;&gt;生成跟证书私钥ca.key&lt;/font&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ openssl genrsa -des3 -out ca.key 1024&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;生成X-509证书签名请求文件ca-csr&quot;&gt;&lt;a href=&quot;#生成X-509证书签名请求文件ca-csr&quot; class=&quot;headerlink&quot; title=&quot;生成X.509证书签名请求文件ca.csr&quot;&gt;&lt;/a&gt;&lt;font size=&#39;4em&#39;&gt;生成X.509证书签名请求文件ca.csr&lt;/font&gt;&lt;/h4&gt;&lt;p&gt;在生成ca.csr的过程中，会让输入一些组织信息等。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ openssl req -new -key ca.key -out ca.csr&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
      <category term="https" scheme="http://yoursite.com/tags/https/"/>
    
      <category term="openssl" scheme="http://yoursite.com/tags/openssl/"/>
    
  </entry>
  
  <entry>
    <title>Match-react router 4.0.0 api中文文档</title>
    <link href="http://yoursite.com/2016/11/25/react-router-4-0-0-api-Match/"/>
    <id>http://yoursite.com/2016/11/25/react-router-4-0-0-api-Match/</id>
    <published>2016-11-25T05:05:50.000Z</published>
    <updated>2016-11-29T06:15:43.093Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://react-router.now.sh/Match" target="_blank" rel="external">原文链接</a></p>
<font size="6em">&lt;Match&gt;<font><br><br>匹配到地址(location)时进行UI渲染<br><br>### <font color="red">pattern: string</font>

<p>任何<a href="https://www.npmjs.com/package/path-to-regexp" target="_blank" rel="external">path-to-regexp</a>可以理解的URL模式表达式<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Match</span> <span class="attr">pattern</span>=<span class="string">"/users/:id"</span> <span class="attr">component</span>=<span class="string">&#123;User&#125;/</span>&gt;</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="exactly-bool"><a href="#exactly-bool" class="headerlink" title="exactly: bool"></a><font color="red">exactly: bool</font></h3><p>当为true时，只有模式表达式严格匹配时，才算匹配上。</p>
<table>
<thead>
<tr>
<th>pattern</th>
<th style="text-align:center">location.pathname</th>
<th style="text-align:center">exactly?</th>
<th style="text-align:center">matches?</th>
</tr>
</thead>
<tbody>
<tr>
<td>/foo</td>
<td style="text-align:center">/foo/bar</td>
<td style="text-align:center">yes</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td>/foo</td>
<td style="text-align:center">/foo/bar</td>
<td style="text-align:center">no</td>
<td style="text-align:center">yes</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Match</span> <span class="attr">pattern</span>=<span class="string">"/foo"</span> <span class="attr">exactly</span> <span class="attr">component</span>=<span class="string">&#123;Foo&#125;/</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="location"><a href="#location" class="headerlink" title="location"></a><font color="red">location</font></h3><p>如果你不想匹配上下文(context)中的地址(location)时，你可以传入一个location参数来替代。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Match</span> <span class="attr">pattern</span>=<span class="string">"/foo"</span> <span class="attr">location</span>=<span class="string">&#123;&#123;</span> <span class="attr">pathname:</span> '/<span class="attr">foo</span>' &#125;&#125;/&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="component"><a href="#component" class="headerlink" title="component"></a><font color="red">component</font></h3><p>当匹配到地址时渲染的React组件，渲染该组件时，会传入如下属性(props)：</p>
<ul>
<li>pattern: (string) 匹配表达式.</li>
<li>pathname: (string) 匹配后的路径.</li>
<li>isExact: (bool) 是否严格匹配 (v. partial).</li>
<li>location: 匹配到的location对象.</li>
<li>params: 根据匹配模式解析出来的参数</li>
</ul>
<p>如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">const</span> &#123;params, pattern, pathname, isExact, location&#125; = <span class="keyword">this</span>.props;</div><div class="line">        <span class="keyword">return</span> (&lt;div&gt;</div><div class="line">            &lt;h2&gt;User&lt;/h2&gt;</div><div class="line">            &lt;div&gt;</div><div class="line">                location:&#123;JSON.stringify(location)&#125;</div><div class="line">                &lt;br /&gt;</div><div class="line">                pattern:&#123;pattern&#125;</div><div class="line">                &lt;br /&gt;</div><div class="line">                pathname:&#123;pathname&#125;</div><div class="line">                &lt;br /&gt;</div><div class="line">                isExact:&#123;isExact ? "true" : "false"&#125;</div><div class="line">                &lt;br /&gt;</div><div class="line">                params:&#123;JSON.stringify(params, null, 2)&#125;</div><div class="line">                &lt;br /&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/div&gt;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;Match pattern="/:user" component=&#123;User&#125;/&gt;</div></pre></td></tr></table></figure></p>
<p>效果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">location:&#123;&quot;pathname&quot;:&quot;/kim&quot;,&quot;search&quot;:&quot;&quot;,&quot;hash&quot;:&quot;&quot;,&quot;state&quot;:null,&quot;query&quot;:null,&quot;key&quot;:&quot;a21zge&quot;&#125;</div><div class="line">pattern:/:user</div><div class="line">pathname:/kim</div><div class="line">isExact:true</div><div class="line">params:&#123; &quot;user&quot;: &quot;kim&quot; &#125;</div></pre></td></tr></table></figure></p>
<h3 id="render-func"><a href="#render-func" class="headerlink" title="render: func"></a><font color="red">render: func</font></h3><p>相对于直接渲染一个组件，你可以之间传一个渲染函数，该函数被调用时，会传入组件一样的参数。</p>
<p>这相当于提供了一种内联(inline rendering)渲染方式，或者对Match的封装(wrapping)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 非常方便的内联渲染</span></div><div class="line">&lt;Match pattern=<span class="string">"/home"</span> render=&#123;() =&gt; <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&#125;/&gt;</div><div class="line"></div><div class="line"><span class="comment">// 对Match进行封装</span></div><div class="line"><span class="keyword">const</span> MatchWithFade = (&#123; component:Component, ...rest &#125;) =&gt; (</div><div class="line">  &lt;Match &#123;...rest&#125; render=&#123;(matchProps) =&gt; (</div><div class="line">    &lt;FadeIn&gt;</div><div class="line">      &lt;Component &#123;...matchProps&#125;/&gt;</div><div class="line">    &lt;/FadeIn&gt;</div><div class="line">  )&#125;/&gt;</div><div class="line">)</div><div class="line"></div><div class="line">&lt;MatchWithFade pattern="/cool" component=&#123;Something&#125;/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="children-func"><a href="#children-func" class="headerlink" title="children: func"></a><font color="red">children: func</font></h3><p>有时你可能需要根据匹配与否进行不同的渲染，这时，你可以使用children属性，它的类型为function，<br>它的表现有点象render函数，但是有以下不同：</p>
<p>(1) 不管有没有匹配上都会被调用。 </p>
<p>(2) 回传递一个matched属性表示有没有被匹配上。</p>
<p>It seems unlikely you’ll need this for anything besides animating when a component transitions from matching to not matching and back, but who knows?</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;Match children=&#123;(&#123; matched, ...rest&#125;) =&gt; (</div><div class="line">  &#123;<span class="comment">/* 因为Animate 总是能被渲染，所以你可以利用组件的生命周期(lifecycle)来实现动画。*/</span>&#125;</div><div class="line">  &lt;Animate&gt;</div><div class="line">    &#123;matched &amp;&amp; (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Something</span> &#123;<span class="attr">...rest</span>&#125;/&gt;</span></span></div><div class="line">    )&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">Animate</span>&gt;</span></div><div class="line">)&#125;/&gt;</div></pre></td></tr></table></figure>
<font size="6em">&lt;/Match&gt;</font></font></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://react-router.now.sh/Match&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;font size=&#39;6em&#39;&gt;&amp;lt;Match&amp;gt;&lt;font&gt;&lt;br&gt;&lt;br&gt;匹配到地址(location)时进行UI渲染&lt;br&gt;&lt;br&gt;### &lt;font color=&#39;red&#39;&gt;pattern: string&lt;/font&gt;

&lt;p&gt;任何&lt;a href=&quot;https://www.npmjs.com/package/path-to-regexp&quot;&gt;path-to-regexp&lt;/a&gt;可以理解的URL模式表达式&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Match&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;pattern&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/users/:id&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;component&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;User&amp;#125;/&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="react router 4.0.0 api中文文档" scheme="http://yoursite.com/categories/react-router-4-0-0-api%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="react-router" scheme="http://yoursite.com/tags/react-router/"/>
    
      <category term="翻译文档" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>React组件生命周期</title>
    <link href="http://yoursite.com/2016/11/24/react-lifecycle/"/>
    <id>http://yoursite.com/2016/11/24/react-lifecycle/</id>
    <published>2016-11-24T07:23:54.000Z</published>
    <updated>2016-11-28T11:43:16.461Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.flappyend.com/react-component-lifecycle/" target="_blank" rel="external">原文链接</a></p>
<h2 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h2><h3 id="首次实例化"><a href="#首次实例化" class="headerlink" title="首次实例化"></a>首次实例化</h3><ul>
<li>getDefaultProps</li>
<li>getInitialState</li>
<li>componentWillMount</li>
<li>render</li>
<li>componentDidMount</li>
</ul>
<a id="more"></a>
<h3 id="实例化完成后的更新"><a href="#实例化完成后的更新" class="headerlink" title="实例化完成后的更新"></a>实例化完成后的更新</h3><p>getInitialState<br>componentWillMount<br>render<br>componentDidMount</p>
<h2 id="存在期"><a href="#存在期" class="headerlink" title="存在期"></a>存在期</h2><h3 id="组件已存在时的状态改变"><a href="#组件已存在时的状态改变" class="headerlink" title="组件已存在时的状态改变"></a>组件已存在时的状态改变</h3><ul>
<li>componentWillReceiveProps</li>
<li>shouldComponentUpdate</li>
<li>componentWillUpdate</li>
<li>render</li>
<li>componentDidUpdate</li>
</ul>
<h2 id="销毁-amp-清理期"><a href="#销毁-amp-清理期" class="headerlink" title="销毁&amp;清理期"></a>销毁&amp;清理期</h2><ul>
<li>componentWillUnmount</li>
</ul>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>生命周期共提供了10个不同的API。</p>
<ol>
<li>getDefaultProps</li>
</ol>
<p>作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享。</p>
<ol>
<li>getInitialState</li>
</ol>
<p>作用于组件的实例，在实例创建时调用一次，用于初始化每个实例的state，此时可以访问this.props。</p>
<ol>
<li>componentWillMount</li>
</ol>
<p>在完成首次渲染之前调用，此时仍可以修改组件的state。</p>
<ol>
<li>render</li>
</ol>
<p>必选的方法，创建虚拟DOM，该方法具有特殊的规则：</p>
<ul>
<li>只能通过this.props和this.state访问数据</li>
<li>可以返回null、false或任何React组件</li>
<li>只能出现一个顶级组件（不能返回数组）</li>
<li>不能改变组件的状态</li>
<li>不能修改DOM的输出</li>
</ul>
<ol>
<li>componentDidMount</li>
</ol>
<p>真实的DOM被渲染出来后调用，在该方法中可通过this.getDOMNode()访问到真实的DOM元素。此时已可以使用其他类库来操作这个DOM。</p>
<p><em>在服务端中，该方法不会被调用。</em></p>
<ol>
<li>componentWillReceiveProps</li>
</ol>
<p>组件接收到新的props时调用，并将其作为参数nextProps使用，此时可以更改组件props及state。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">componentWillReceiveProps: <span class="function"><span class="keyword">function</span>(<span class="params">nextProps</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (nextProps.bool) &#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;</div><div class="line">            bool: <span class="literal">true</span></div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ol>
<li>shouldComponentUpdate</li>
</ol>
<p>组件是否应当渲染新的props或state，返回false表示跳过后续的生命周期方法，通常不需要使用以避免出现bug。在出现应用的瓶颈时，可通过该方法进行适当的优化。</p>
<p><em>在首次渲染期间或者调用了forceUpdate方法后，该方法不会被调用</em></p>
<ol>
<li>componentWillUpdate</li>
</ol>
<p>接收到新的props或者state后，进行渲染之前调用，此时不允许更新props或state。</p>
<ol>
<li>componentDidUpdate</li>
</ol>
<p>完成渲染新的props或者state后调用，此时可以访问到新的DOM元素。</p>
<ol>
<li>componentWillUnmount</li>
</ol>
<p>组件被移除之前被调用，可以用于做一些清理工作，在componentDidMount方法中添加的所有任务都需要在该方法中撤销，比如创建的定时器或添加的事件监听器。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>React：引领未来的用户界面开发框架/寸志 范洪春 杨森 陈涌 译 – 电子工业出版社</li>
<li><a href="https://facebook.github.io/react/docs/component-specs.html" target="_blank" rel="external">Component Specs and Lifecycle190</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://blog.flappyend.com/react-component-lifecycle/&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;实例化&quot;&gt;&lt;a href=&quot;#实例化&quot; class=&quot;headerlink&quot; title=&quot;实例化&quot;&gt;&lt;/a&gt;实例化&lt;/h2&gt;&lt;h3 id=&quot;首次实例化&quot;&gt;&lt;a href=&quot;#首次实例化&quot; class=&quot;headerlink&quot; title=&quot;首次实例化&quot;&gt;&lt;/a&gt;首次实例化&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;getDefaultProps&lt;/li&gt;
&lt;li&gt;getInitialState&lt;/li&gt;
&lt;li&gt;componentWillMount&lt;/li&gt;
&lt;li&gt;render&lt;/li&gt;
&lt;li&gt;componentDidMount&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>BrowserRouter-react router 4.0.0 api中文文档</title>
    <link href="http://yoursite.com/2016/11/24/react-router-4-0-0-api-BrowserRouter/"/>
    <id>http://yoursite.com/2016/11/24/react-router-4-0-0-api-BrowserRouter/</id>
    <published>2016-11-24T06:54:00.000Z</published>
    <updated>2016-11-29T06:14:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://react-router.now.sh/BrowserRouter" target="_blank" rel="external">原文链接</a></p>
<font size="6em">&lt;BrowserRouter&gt;</font>

<p>保持你的界面与浏览器历史记录保持同步。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;BrowserRouter&gt;</div><div class="line">  &lt;App/&gt;</div><div class="line">&lt;/BrowserRouter&gt;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<font color="#FF0000">basename</font>

<p>所有路由的根URL，如果你的应用处于服务端的子目录, 你可以设置这个值为该子目录。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;BrowserRouter basename=&quot;/calendar&quot; /&gt;</div><div class="line"></div><div class="line">// 假设Link标签如下所示：</div><div class="line">&lt;Link to=&quot;/today&quot;/&gt;</div><div class="line">// 那么超链接指向 &quot;/calendar/today&quot;</div><div class="line">&lt;/BrowserRouter&gt;</div></pre></td></tr></table></figure>
<font size="6em">&lt;/BrowserRouter&gt;</font>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://react-router.now.sh/BrowserRouter&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;font size=&#39;6em&#39;&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/font&gt;

&lt;p&gt;保持你的界面与浏览器历史记录保持同步。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;App/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/BrowserRouter&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="react router 4.0.0 api中文文档" scheme="http://yoursite.com/categories/react-router-4-0-0-api%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="react-router" scheme="http://yoursite.com/tags/react-router/"/>
    
      <category term="翻译文档" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu编译android 6.0源代码环境搭建</title>
    <link href="http://yoursite.com/2016/11/16/ubuntu%E7%BC%96%E8%AF%91android%E6%BA%90%E4%BB%A3%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2016/11/16/ubuntu编译android源代码环境搭建/</id>
    <published>2016-11-16T01:04:37.000Z</published>
    <updated>2016-11-16T11:18:54.718Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install openjdk-7-jdk openjdk-7-jre</div></pre></td></tr></table></figure>
<p>如果之前系统是其他版本的JDK，需要把环境变量切换过来。</p>
<a id="more"></a>
<p>jdk版本错误会导致编译错误，如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">prebuilts/sdk/api/23.txt:41822: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)</div><div class="line">prebuilts/sdk/api/23.txt:41823: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(MarginLayoutParams)</div><div class="line">prebuilts/sdk/api/23.txt:41824: error 9: Removed public constructor android.widget.Toolbar.LayoutParams.Toolbar.LayoutParams(LayoutParams)</div><div class="line">prebuilts/sdk/api/23.txt:42895: error 9: Removed public constructor java.io.ObjectInputStream.GetField.ObjectInputStream.GetField()</div><div class="line">prebuilts/sdk/api/23.txt:42955: error 9: Removed public constructor java.io.ObjectOutputStream.PutField.ObjectOutputStream.PutField()</div><div class="line">prebuilts/sdk/api/23.txt:43623: error 9: Removed public constructor java.lang.Character.Subset.Character.Subset(String)</div><div class="line">prebuilts/sdk/api/23.txt:46730: error 9: Removed public constructor java.nio.channels.Pipe.SinkChannel.Pipe.SinkChannel(SelectorProvider)</div><div class="line">prebuilts/sdk/api/23.txt:46735: error 9: Removed public constructor java.nio.channels.Pipe.SourceChannel.Pipe.SourceChannel(SelectorProvider)</div><div class="line">prebuilts/sdk/api/23.txt:47370: error 9: Removed public constructor java.security.KeyStore.Builder.KeyStore.Builder()</div><div class="line">prebuilts/sdk/api/23.txt:47379: error 9: Removed public constructor java.security.KeyStore.CallbackHandlerProtection.KeyStore.CallbackHandlerProtection(CallbackHandler)</div><div class="line">prebuilts/sdk/api/23.txt:47391: error 9: Removed public constructor java.security.KeyStore.PasswordProtection.KeyStore.PasswordProtection(char)</div></pre></td></tr></table></figure></p>
<h2 id="安装其他工具包"><a href="#安装其他工具包" class="headerlink" title="安装其他工具包"></a>安装其他工具包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install git gitg gnupg flex bison gperf build-essential  zip curl libc6-dev  libncurses5-dev:i386 x11proto-core-dev  libx11-dev:i386 libreadline6-dev:i386   libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown	libxml2-utils xsltproc zlib1g-dev:i386 libarchive-zip-perl</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装jdk&quot;&gt;&lt;a href=&quot;#安装jdk&quot; class=&quot;headerlink&quot; title=&quot;安装jdk&quot;&gt;&lt;/a&gt;安装jdk&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get install openjdk-7-jdk openjdk-7-jre&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果之前系统是其他版本的JDK，需要把环境变量切换过来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ubuntu" scheme="http://yoursite.com/tags/ubuntu/"/>
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="环境搭建" scheme="http://yoursite.com/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>如何下载安装openJDK</title>
    <link href="http://yoursite.com/2016/11/15/how-to-download-openjdk/"/>
    <id>http://yoursite.com/2016/11/15/how-to-download-openjdk/</id>
    <published>2016-11-15T12:04:44.000Z</published>
    <updated>2016-11-16T11:38:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JDK-8"><a href="#JDK-8" class="headerlink" title="JDK 8"></a>JDK 8</h2><h3 id="Debian-Ubuntu"><a href="#Debian-Ubuntu" class="headerlink" title="Debian, Ubuntu"></a><strong>Debian, Ubuntu</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install openjdk-8-jre</div></pre></td></tr></table></figure>
<p>openjdk-8-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-8-jdk。</p>
<a id="more"></a>
<h3 id="Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux"><a href="#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux" class="headerlink" title="Fedora, Oracle Linux, Red Hat Enterprise Linux"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ su -c &quot;yum install java-1.8.0-openjdk&quot;</div></pre></td></tr></table></figure>
<p>java-1.8.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.8.0-openjdk-devel。</p>
<h2 id="JDK-7"><a href="#JDK-7" class="headerlink" title="JDK 7"></a>JDK 7</h2><h3 id="Debian-Ubuntu-1"><a href="#Debian-Ubuntu-1" class="headerlink" title="Debian, Ubuntu"></a><strong>Debian, Ubuntu</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install openjdk-7-jre</div></pre></td></tr></table></figure>
<p>openjdk-7-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-7-jdk。</p>
<h3 id="Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-1"><a href="#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-1" class="headerlink" title="Fedora, Oracle Linux, Red Hat Enterprise Linux"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ su -c &quot;yum install java-1.7.0-openjdk&quot;</div></pre></td></tr></table></figure>
<p>java-1.7.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.7.0-openjdk-devel。</p>
<h2 id="JDK-6"><a href="#JDK-6" class="headerlink" title="JDK 6"></a>JDK 6</h2><h3 id="Debian-Ubuntu-2"><a href="#Debian-Ubuntu-2" class="headerlink" title="Debian, Ubuntu"></a><strong>Debian, Ubuntu</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install openjdk-6-jre</div></pre></td></tr></table></figure>
<p>openjdk-6-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-6-jdk。</p>
<h3 id="Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-2"><a href="#Fedora-Oracle-Linux-Red-Hat-Enterprise-Linux-2" class="headerlink" title="Fedora, Oracle Linux, Red Hat Enterprise Linux"></a><strong>Fedora, Oracle Linux, Red Hat Enterprise Linux</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ su -c &quot;yum install java-1.6.0-openjdk&quot;</div></pre></td></tr></table></figure>
<p>java-1.6.0-openjdk只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装java-1.6.0-openjdk-devel。</p>
<p>参考<a href="http://openjdk.java.net/install/" target="_blank" rel="external">http://openjdk.java.net/install/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JDK-8&quot;&gt;&lt;a href=&quot;#JDK-8&quot; class=&quot;headerlink&quot; title=&quot;JDK 8&quot;&gt;&lt;/a&gt;JDK 8&lt;/h2&gt;&lt;h3 id=&quot;Debian-Ubuntu&quot;&gt;&lt;a href=&quot;#Debian-Ubuntu&quot; class=&quot;headerlink&quot; title=&quot;Debian, Ubuntu&quot;&gt;&lt;/a&gt;&lt;strong&gt;Debian, Ubuntu&lt;/strong&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo apt-get install openjdk-8-jre&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;openjdk-8-jre只包含运行时环境(Java Runtime Environment）。如果你想开发java程序，请安装openjdk-8-jdk。&lt;/p&gt;
    
    </summary>
    
    
      <category term="openjdk" scheme="http://yoursite.com/tags/openjdk/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu利用update-alternatives配置java</title>
    <link href="http://yoursite.com/2016/11/15/ubuntu%E5%88%A9%E7%94%A8update-alternatives%E9%85%8D%E7%BD%AEjava/"/>
    <id>http://yoursite.com/2016/11/15/ubuntu利用update-alternatives配置java/</id>
    <published>2016-11-15T11:32:21.000Z</published>
    <updated>2016-11-16T01:14:37.507Z</updated>
    
    <content type="html"><![CDATA[<p>利用Android Studio开发，经常会碰到JDK版本的切换问题，安装好新版本的<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">jdk</a>之后，需要先配置到可选项。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yinlijun@sj:~$ sudo update-alternatives --install /usr/bin/java java /opt/jdk1.8.0_101/bin/java 100</div><div class="line">update-alternatives: 警告: /etc/alternatives/java has been changed (manually or by a script); switching to manual updates only</div><div class="line">yinlijun@sj:~$ sudo update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_101/bin/javac 100</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>然后，选择默认的JDK版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">yinlijun@sj:~$ sudo update-alternatives --config java</div><div class="line">有 3 个候选项可用于替换 java (提供 /usr/bin/java)。</div><div class="line"></div><div class="line">  选择       路径                                          优先级  状态</div><div class="line">------------------------------------------------------------</div><div class="line">  0            /opt/jdk1.6.0_37/bin/java                        10000     自动模式</div><div class="line">  1            /opt/jdk1.6.0_37/bin/java                        10000     手动模式</div><div class="line">  2            /opt/jdk1.8.0_101/bin/java                       100       手动模式</div><div class="line">  3            /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java   1051      手动模式</div><div class="line"></div><div class="line">要维持当前值[*]请按回车键，或者键入选择的编号：2</div><div class="line">update-alternatives: using /opt/jdk1.8.0_101/bin/java to provide /usr/bin/java (java) <span class="keyword">in</span> 手动模式</div><div class="line">yinlijun@sj:~$ sudo update-alternatives --config javac</div><div class="line">有 3 个候选项可用于替换 javac (提供 /usr/bin/javac)。</div><div class="line"></div><div class="line">  选择       路径                                       优先级  状态</div><div class="line">------------------------------------------------------------</div><div class="line">  0            /opt/jdk1.6.0_37/bin/javac                    10000     自动模式</div><div class="line">  1            /opt/jdk1.6.0_37/bin/javac                    10000     手动模式</div><div class="line">  2            /opt/jdk1.8.0_101/bin/javac                   100       手动模式</div><div class="line">* 3            /usr/lib/jvm/java-7-openjdk-amd64/bin/javac   1051      手动模式</div><div class="line"></div><div class="line">要维持当前值[*]请按回车键，或者键入选择的编号：2</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用Android Studio开发，经常会碰到JDK版本的切换问题，安装好新版本的&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;jdk&lt;/a&gt;之后，需要先配置到可选项。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;yinlijun@sj:~$ sudo update-alternatives --install /usr/bin/java java /opt/jdk1.8.0_101/bin/java 100&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;update-alternatives: 警告: /etc/alternatives/java has been changed (manually or by a script); switching to manual updates only&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;yinlijun@sj:~$ sudo update-alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_101/bin/javac 100&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ubuntu" scheme="http://yoursite.com/tags/ubuntu/"/>
    
      <category term="update-alternatives" scheme="http://yoursite.com/tags/update-alternatives/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 12.04 生成桌面图标</title>
    <link href="http://yoursite.com/2016/11/15/make-ubutun-desktop/"/>
    <id>http://yoursite.com/2016/11/15/make-ubutun-desktop/</id>
    <published>2016-11-15T10:04:19.000Z</published>
    <updated>2016-11-16T01:14:28.807Z</updated>
    
    <content type="html"><![CDATA[<p>在Ubuntu上从网上下载压缩包版本（非.deb包）的应用程序之后，是不生成桌面图表的，比如网上下载的<a href="http://www.android-studio.org/" target="_blank" rel="external">Android Studio</a>, 所以需要自己做一个桌面图标。</p>
<ol>
<li><p>进入到/usr/share/applications/目录下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/share/applications/</div></pre></td></tr></table></figure>
</li>
<li><p>新建一个android-studio.desktop文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim android-studio.desktop</div></pre></td></tr></table></figure>
</li>
</ol>
<a id="more"></a>
<ol>
<li>输入一下内容<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Version=2.2</div><div class="line">Name=Android Studio</div><div class="line">GenericName=Android IDE</div><div class="line">Comment=Android Development</div><div class="line">Exec=/home/yinlijun/android_toolchain/android-studio/bin/studio.sh %U</div><div class="line">Terminal=<span class="literal">false</span></div><div class="line">Icon=/home/yinlijun/android_toolchain/android-studio/bin/studio.png</div><div class="line">Type=Application</div><div class="line">Categories=Android;IDE;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>保存退出之后，在应用程序里面就可以找到，绑定了图标的应用程序，可以将其固定到启动器上。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Ubuntu上从网上下载压缩包版本（非.deb包）的应用程序之后，是不生成桌面图表的，比如网上下载的&lt;a href=&quot;http://www.android-studio.org/&quot;&gt;Android Studio&lt;/a&gt;, 所以需要自己做一个桌面图标。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;进入到/usr/share/applications/目录下&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; /usr/share/applications/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;新建一个android-studio.desktop文件。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;vim android-studio.desktop&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="ubuntu" scheme="http://yoursite.com/tags/ubuntu/"/>
    
      <category term="android studio" scheme="http://yoursite.com/tags/android-studio/"/>
    
  </entry>
  
  <entry>
    <title>git配置user.name和user.email</title>
    <link href="http://yoursite.com/2016/11/15/git%E9%85%8D%E7%BD%AEuser-name%E5%92%8Cuser-email/"/>
    <id>http://yoursite.com/2016/11/15/git配置user-name和user-email/</id>
    <published>2016-11-15T10:02:54.000Z</published>
    <updated>2016-11-15T12:17:44.749Z</updated>
    
    <content type="html"><![CDATA[<p>github在统计提交的时候，会判断邮箱是否跟github的登陆邮箱匹配，不匹配则不计算活跃度，即不生成小绿块。</p>
<p>获取配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email</div><div class="line">aaa@aaa.com</div><div class="line">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.name</div><div class="line">aaa</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>设置当前仓库的user.name/user.email<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa</div><div class="line">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email aaa@aaa.com</div></pre></td></tr></table></figure></p>
<p>设置全局user.name/user.email<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.name yinlijun</div><div class="line">yinlijun@yinlijun:~/personal_github/johnny-blog$ git config --global user.email yinlijun2004@gmail.com</div></pre></td></tr></table></figure></p>
<p>如果当前仓库未设置user.name/user.email则采用全局的user.name/user.email，否则当前仓库的user.name/user.email会覆盖全局的user.name/user.email。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;github在统计提交的时候，会判断邮箱是否跟github的登陆邮箱匹配，不匹配则不计算活跃度，即不生成小绿块。&lt;/p&gt;
&lt;p&gt;获取配置&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.email&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;aaa@aaa.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;yinlijun@yinlijun:~/personal_github/johnny-blog$ git config user.name&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;aaa&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>windows配置mongdb记录</title>
    <link href="http://yoursite.com/2016/11/09/windows%E9%85%8D%E7%BD%AEmongdb%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2016/11/09/windows配置mongdb记录/</id>
    <published>2016-11-09T09:55:51.000Z</published>
    <updated>2016-11-16T01:14:55.479Z</updated>
    
    <content type="html"><![CDATA[<p>刚给windows电脑配置了mongdb记录一下。</p>
<ul>
<li><p>前往<a href="https://www.mongodb.com/download-center" target="_blank" rel="external">官网</a>下载合适的安装包，我选择的是msi安装包，也可以选择下载zip包。</p>
</li>
<li><p>运行msi安装包（默认安装在C盘，没找到在哪里可以修改盘符）。</p>
</li>
<li><p>在D:\下创建好相关文件夹<br><img src="http://img.blog.csdn.net/20161109194149759" alt="这里写图片描述"></p>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>打开命令提示符，进入到mongodb安装文件夹下的bin目录<br><img src="http://img.blog.csdn.net/20161109194331090" alt="这里写图片描述"></p>
</li>
<li><p>输入如下命令，注册MongoDB服务 </p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod.exe --logpath D:\MongoDB\data\<span class="built_in">log</span>\MongoDB.log --logappend --dbpath D:\MongoDB\data\db --directoryperdb --storageEngin=mmappv1 --serviceName MongoDB --install</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20161109194436279" alt="这里写图片描述"></p>
<ul>
<li>启动MongoDB服务</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net start MongoDB</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20161109194520874" alt="这里写图片描述"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚给windows电脑配置了mongdb记录一下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;前往&lt;a href=&quot;https://www.mongodb.com/download-center&quot;&gt;官网&lt;/a&gt;下载合适的安装包，我选择的是msi安装包，也可以选择下载zip包。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;运行msi安装包（默认安装在C盘，没找到在哪里可以修改盘符）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在D:\下创建好相关文件夹&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20161109194149759&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="windows" scheme="http://yoursite.com/tags/windows/"/>
    
      <category term="mongodb" scheme="http://yoursite.com/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>windows下文件路径太深，无法删除解决办法</title>
    <link href="http://yoursite.com/2016/11/08/windows%E4%B8%8B%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E5%A4%AA%E6%B7%B1%EF%BC%8C%E6%97%A0%E6%B3%95%E5%88%A0%E9%99%A4%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2016/11/08/windows下文件路径太深，无法删除解决办法/</id>
    <published>2016-11-08T10:02:04.000Z</published>
    <updated>2016-11-16T01:14:48.487Z</updated>
    
    <content type="html"><![CDATA[<p>windows下npm开发时，有时候node_modules/下的目录嵌套太深，导致无法删除项目。</p>
<p>npm社区贡献了一个工具<a href="https://www.npmjs.com/package/windows-node-deps-deleter" target="_blank" rel="external">windows-node-deps-deleter</a>可供删除这样的目录。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">E:\vscode&gt;npm install -g windows-node-deps-deleter</div><div class="line">C:\Users\xx\AppData\Roaming\npm\wnddel -&gt; C:\Users\xx\AppData\Roaming\npm\no</div><div class="line">de_modules\windows-node-deps-deleter\wnddel.js</div><div class="line">windows-node-deps-deleter@0.1.1 C:\Users\xx\AppData\Roaming\npm\node_modules\w</div><div class="line">indows-node-deps-deleter</div><div class="line">└── fs-extra@0.13.0 (ncp@1.0.1, jsonfile@2.4.0, rimraf@2.5.4)</div><div class="line"></div><div class="line">E:\vscode&gt;wnddel react-todo-list</div><div class="line">Deleting &quot;react-todo-list&quot; ...</div><div class="line">&quot;react-todo-list&quot; deleted.</div></pre></td></tr></table></figure>
<p>参考：<a href="https://www.npmjs.com/package/windows-node-deps-deleter#readme" target="_blank" rel="external">windows-node-deps-delete</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;windows下npm开发时，有时候node_modules/下的目录嵌套太深，导致无法删除项目。&lt;/p&gt;
&lt;p&gt;npm社区贡献了一个工具&lt;a href=&quot;https://www.npmjs.com/package/windows-node-deps-deleter&quot;&gt;windows-node-deps-deleter&lt;/a&gt;可供删除这样的目录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="windows" scheme="http://yoursite.com/tags/windows/"/>
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>.gitignore无效，不能过滤某些文件</title>
    <link href="http://yoursite.com/2016/11/06/gitignore%E6%97%A0%E6%95%88%EF%BC%8C%E4%B8%8D%E8%83%BD%E8%BF%87%E6%BB%A4%E6%9F%90%E4%BA%9B%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2016/11/06/gitignore无效，不能过滤某些文件/</id>
    <published>2016-11-06T10:03:31.000Z</published>
    <updated>2016-11-16T01:14:20.883Z</updated>
    
    <content type="html"><![CDATA[<p>利用.gitignore过滤文件，如编译过程中的中间文件，等等，这些文件不需要被追踪管理。</p>
<p>现象：</p>
<p>在.gitignore添加file1文件，以过滤该文件，但是通过Git status查看仍显示file1文件的状态。</p>
<a id="more"></a>
<p>原因：</p>
<p>在git库中已存在了这个文件，之前push提交过该文件。</p>
<p>.gitignore文件只对还没有加入版本管理的文件起作用，如果之前已经用git把这些文件纳入了版本库，就不起作用了</p>
<p>解决：</p>
<p>需要在git库中删除该文件，并更新。</p>
<p>然后再次git status查看状态，file1文件不再显示状态。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用.gitignore过滤文件，如编译过程中的中间文件，等等，这些文件不需要被追踪管理。&lt;/p&gt;
&lt;p&gt;现象：&lt;/p&gt;
&lt;p&gt;在.gitignore添加file1文件，以过滤该文件，但是通过Git status查看仍显示file1文件的状态。&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term=".gitignore" scheme="http://yoursite.com/tags/gitignore/"/>
    
  </entry>
  
  <entry>
    <title>android studio编译错误: *** 目标模式不含有“%”。 停止。</title>
    <link href="http://yoursite.com/2016/11/05/android-studio%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF-%E7%9B%AE%E6%A0%87%E6%A8%A1%E5%BC%8F%E4%B8%8D%E5%90%AB%E6%9C%89%E2%80%9C-%E2%80%9D%E3%80%82-%E5%81%9C%E6%AD%A2%E3%80%82/"/>
    <id>http://yoursite.com/2016/11/05/android-studio编译错误-目标模式不含有“-”。-停止。/</id>
    <published>2016-11-05T10:04:19.000Z</published>
    <updated>2016-11-16T01:14:06.123Z</updated>
    
    <content type="html"><![CDATA[<p>Android Studio NDK编译出现如下错误：<br><strong><em> target pattern contains no `%’. Stop<br>中文：
</em></strong> 目标模式不含有“%”。 停止。<br>可能是obj目录的问题，需要删掉。<br>在工程目录下find所有的obj目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -name obj</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android Studio NDK编译出现如下错误：&lt;br&gt;&lt;strong&gt;&lt;em&gt; target pattern contains no `%’. Stop&lt;br&gt;中文：
&lt;/em&gt;&lt;/strong&gt; 目标模式不含有“%”。 停止。&lt;br&gt;可能是obj目录的问题，需要删
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="android studio" scheme="http://yoursite.com/tags/android-studio/"/>
    
  </entry>
  
  <entry>
    <title>高性能Javscript - 笔记</title>
    <link href="http://yoursite.com/2016/11/05/High-Performance-Javascript/"/>
    <id>http://yoursite.com/2016/11/05/High-Performance-Javascript/</id>
    <published>2016-11-05T10:04:19.000Z</published>
    <updated>2016-11-15T10:09:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章-加载和执行"><a href="#第一章-加载和执行" class="headerlink" title="第一章 加载和执行"></a>第一章 加载和执行</h2><h3 id="减少Javascript加载对性能的影响"><a href="#减少Javascript加载对性能的影响" class="headerlink" title="减少Javascript加载对性能的影响"></a>减少Javascript加载对性能的影响</h3><ul>
<li>&lt;/body&gt;闭合标签之前，将所有&lt;javascript&gt;标签放到页面底部。这能确保在脚本执行前页面已经完成了渲染</li>
<li>合并脚本，减少&lt;javascript&gt;标签</li>
<li>使用&lt;javascript&gt;标签的defer属性<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">'text/javascript'</span> src=<span class="string">'file1.js'</span> defer&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>利用动态创建的&lt;javascript&gt;元素来下载并执行代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElemnet(<span class="string">'script'</span>);</div><div class="line">script.type = <span class="string">'text/javascript'</span>;</div><div class="line">script.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">'Script loaded!'</span>);</div><div class="line">&#125;</div><div class="line">script.src = <span class="string">'file1.js'</span>;</div><div class="line"><span class="built_in">document</span>.getElementByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(script);</div></pre></td></tr></table></figure>
</li>
<li><p>使用XHR对象下载Javascript代码并注入页面中</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'file1.js'</span>, <span class="literal">true</span>);</div><div class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span> || xhr.status === <span class="number">304</span>) &#123;</div><div class="line">            <span class="keyword">var</span> script = <span class="built_in">document</span>.createElemnet(<span class="string">'script'</span>);</div><div class="line">            script.type = <span class="string">'text/javascript'</span>;</div><div class="line">            script.text = xhr.responseText;</div><div class="line">            <span class="built_in">document</span>.body.appendChild(script);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="几种类库加载js的方式"><a href="#几种类库加载js的方式" class="headerlink" title="几种类库加载js的方式"></a>几种类库加载js的方式</h3><ul>
<li><p>YUI3</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">'text/javascript'</span> src=<span class="string">'http://yui.yahooapis.com/combo?3.0.0/build/yui/yui-min.js'</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script type=<span class="string">'text/javascript'</span>&gt;</div><div class="line">    YUI().use(<span class="string">'dom'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">Y</span>) </span>&#123;</div><div class="line">        Y.DOM.addClass(<span class="built_in">document</span>.body, <span class="string">'loaded'</span>);</div><div class="line">    &#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>LazyLoad</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">'text/javascript'</span> src=<span class="string">'lazyload-min.js'</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script type=<span class="string">'text/javascript'</span>&gt;</div><div class="line">    LazyLoad.js(<span class="string">'the-rest.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        Applicationn.init();</div><div class="line">    &#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>LABjs</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">'text/javascript'</span> src=<span class="string">'lab.js'</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script type=<span class="string">'text/javascript'</span>&gt; </div><div class="line">    $LAB.script(<span class="string">'first-file.js'</span>)</div><div class="line">        .wait()</div><div class="line">        .script(<span class="string">'the-rest.js'</span>)</div><div class="line">        .wait(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            Applicationn.init();</div><div class="line">        &#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="第二章-数据存取"><a href="#第二章-数据存取" class="headerlink" title="第二章 数据存取"></a>第二章 数据存取</h2><p>在Javascript中，数据存储的位置会对代码整体性能产成重大影响。数据存储共有4中方式：字面量、变量、数组项、对象成员。它们有着各自的性能特点。</p>
<ul>
<li>访问字面量和局部变量的速度最快，相反，访问数组元素和对象成员相对较慢。</li>
<li>由于局部变量存在于作用域链的起始位置，因此访问局部变量比访问跨作用域变量更快。变量在作用域中的位置越深，访问所需时间就越长。由于全局变量总处在作用域的最末端，因此访问速度时最慢的。</li>
<li>避免使用with语句。</li>
<li>嵌套的对象成员会明显影响性能，尽量少用。</li>
<li>属性或方法在原型链中的位置越深，访问它的速度也越慢。</li>
<li>通常来说，你可以通过把常用的对象成员、数组元素、跨域变量保存在局部变量中来改善Javascript性能，因为局部变量访问速度更快。</li>
</ul>
<h2 id="第三章-DOM编程"><a href="#第三章-DOM编程" class="headerlink" title="第三章 DOM编程"></a>第三章 DOM编程</h2><p>访问和操作DOM时现在Web应用的重要部分。但每次穿越链接ECMAScript和DOM都会有性能消耗，为了减少DOM编程带来的消耗，请记住以下几点：</p>
<ul>
<li>最小化DOM访问次数，尽可能在Javascript端处理。</li>
<li>如果需要多次访问某个DOM节点，请使用局部变量存储它的引用。</li>
<li>小心处理HTML集合，把集合的长度缓存到一个变量中，并在迭代中使用它。如果需要经常操作集合，建议把它靠背到一个数组中。</li>
<li>如果可能的话，使用速度更快的API，比如querySelecetAll()和firstElementChild。</li>
<li>要留意重排和重绘，批量修改样式时，离线操作DOM树，使用缓存，并减少布局信息的次数。</li>
<li>动画中使用绝对定位，使用拖放代理。</li>
<li>使用事件委托来减少事件处理器的数量。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一章-加载和执行&quot;&gt;&lt;a href=&quot;#第一章-加载和执行&quot; class=&quot;headerlink&quot; title=&quot;第一章 加载和执行&quot;&gt;&lt;/a&gt;第一章 加载和执行&lt;/h2&gt;&lt;h3 id=&quot;减少Javascript加载对性能的影响&quot;&gt;&lt;a href=&quot;#减少Javascript加载对性能的影响&quot; class=&quot;headerlink&quot; title=&quot;减少Javascript加载对性能的影响&quot;&gt;&lt;/a&gt;减少Javascript加载对性能的影响&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&amp;lt;/body&amp;gt;闭合标签之前，将所有&amp;lt;javascript&amp;gt;标签放到页面底部。这能确保在脚本执行前页面已经完成了渲染&lt;/li&gt;
&lt;li&gt;合并脚本，减少&amp;lt;javascript&amp;gt;标签&lt;/li&gt;
&lt;li&gt;使用&amp;lt;javascript&amp;gt;标签的defer属性&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;script type=&lt;span class=&quot;string&quot;&gt;&#39;text/javascript&#39;&lt;/span&gt; src=&lt;span class=&quot;string&quot;&gt;&#39;file1.js&#39;&lt;/span&gt; defer&amp;gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>CSS权威值南-笔记</title>
    <link href="http://yoursite.com/2016/09/06/CSS-The-Definitive-Guide/"/>
    <id>http://yoursite.com/2016/09/06/CSS-The-Definitive-Guide/</id>
    <published>2016-09-06T10:04:19.000Z</published>
    <updated>2016-11-15T10:09:13.424Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章-css和文档"><a href="#第一章-css和文档" class="headerlink" title="第一章 css和文档"></a>第一章 css和文档</h2><ul>
<li><p>文档内定义样式</p>
<pre><code>&lt;style type=&quot;text/css&quot;&gt;
    @import url(sheet2.css)
    h1 {color: maroon;}
&lt;/style&gt;
</code></pre></li>
<li><p>引入css文件</p>
<pre><code>&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;sheet1.css&quot; media=&quot;all&quot; /&gt;
</code></pre></li>
</ul>
<a id="more"></a>
<h2 id="第二章-选择器"><a href="#第二章-选择器" class="headerlink" title="第二章 选择器"></a>第二章 选择器</h2><ul>
<li>ID选择器和指定id的属性选择器不是一回事，h1#page-title和h1[id=”page-title”]之间有差别。</li>
<li><p>p.warning和p[class~=”warning”]是等价的，但是p[class=”warning”]匹配只有一个class的p元素。</p>
<ul>
<li>类似的还有[foo^=”bar”] 选择foo属性值以bar开头的所有元素</li>
<li>[foo$=”bar”] 选择foo属性值以bar结尾的所有元素</li>
<li>[foo*=”bar”] 选择foo属性值中含有bar子串的所有元素</li>
</ul>
</li>
<li><p>后代选择器中，两个元素之间的层次间隔可以是无限的，如果想匹配直接相连的父子元素，可以使用子结合符”&gt;”</p>
</li>
<li><p>兄弟元素选择器 h1 +  p {margin-top: 0}</p>
</li>
<li><p>伪类选择器，伪类的顺序很重要 link-visited-focus-hover-active</p>
<ul>
<li><p>连接伪类</p>
<ul>
<li>:link 未访问的超连接</li>
<li>:visited  已访问的超连接</li>
</ul>
</li>
<li><p>动态伪类</p>
<ul>
<li>:focus 拥有焦点的元素（可以接受键盘输入或者能已某种方式激活的元素）</li>
<li>:hover 鼠标指针悬停的元素</li>
<li>:active 用户输入激活的元素</li>
</ul>
</li>
<li><p>静态伪类</p>
<ul>
<li>:first-child 第一个子元素</li>
<li>:first-letter 第一个字母</li>
<li>:first-line 第一行</li>
<li>:lang(fr) 根据语言选择</li>
</ul>
</li>
<li>:first-letter和:first-line只能用于标记或段落之类的块元素，不能用于超连接等行内元素。</li>
</ul>
</li>
</ul>
<h2 id="第三章-结构和层叠"><a href="#第三章-结构和层叠" class="headerlink" title="第三章 结构和层叠"></a>第三章 结构和层叠</h2><ul>
<li><p>选择器的特殊性</p>
<ul>
<li><p>给定的各个ID属性值，加0，1，0，0</p>
</li>
<li><p>给形的各个类的属性值，属性选择或者伪类，加0，0，1，0</p>
</li>
<li><p>给定的各个元素和伪元素加0，0，0，1</p>
</li>
<li><p>结合符和通配选择器对特属性没有任何贡献</p>
</li>
</ul>
</li>
<li><p>样式继承</p>
<ul>
<li>文本颜色可被继承</li>
<li><p>border不能被继承，一般的大多数框模型属性不能被继承（包括外边框，内边距，背景和边框）</p>
</li>
<li><p>继承的值没有特殊性，连0特殊性都没有p(61)，因此需要避免不加区别的使用通配选择器。</p>
</li>
</ul>
</li>
<li><p>层叠权重大小顺序</p>
<ul>
<li><p>读者的重要声明</p>
</li>
<li><p>创作人员的重要声明</p>
</li>
<li><p>创作人员的正常声明</p>
</li>
<li><p>读者的正常声明</p>
</li>
<li><p>用户代理声明</p>
</li>
</ul>
</li>
</ul>
<h2 id="第四章-值和单位"><a href="#第四章-值和单位" class="headerlink" title="第四章 值和单位"></a>第四章 值和单位</h2><ul>
<li><p>颜色表示</p>
<ul>
<li><p>命名颜色 {color: gray;}</p>
</li>
<li><p>函数式RGB {color: rgb(100%, 50%, 50%);}，或者{color: rgb(52, 95, 153);}</p>
</li>
<li><p>十六进制RGB {color: #ff0000;} 如果3组各自成对，可以简写#f00，相当于#ff0000</p>
</li>
</ul>
</li>
<li><p>WEB安全颜色</p>
<ul>
<li><p>RGB百分表示法，能被20整除的颜色，如rgb(60, 40, 120)</p>
</li>
<li><p>十六进制，使用00，33，66，99，cc，ff，如#99ffcc</p>
</li>
</ul>
</li>
<li><p>长度单位</p>
<ul>
<li><p>绝对长度单位 在打印文档的样式表时更为有用，Web设计中不使用绝对长度单位。</p>
<ul>
<li><p>英寸 (in)</p>
</li>
<li><p>厘米(cm) 1in = 2.54cm</p>
</li>
<li><p>毫米(mm) 1in = 25.4mm</p>
</li>
<li><p>点(pt) 1in = 72pt</p>
</li>
<li><p>派卡(pc)  1pc = 12pt, 6pc = 1in</p>
</li>
</ul>
</li>
<li><p>相对长度单位</p>
<ul>
<li>em (em-height) 1em定义未一种给定字体的font-size的值，随元素的不同而不同，国外最常用，也是未来的趋势，更容易适配移动端。</li>
<li>ex (x-height) 1ex定位未一种给定字体的小写x的高度，不同字体ex的值不同。</li>
<li>px像素</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第五章-字体"><a href="#第五章-字体" class="headerlink" title="第五章 字体"></a>第五章 字体</h2><p>css定义了5中通用字体</p>
<ul>
<li>Serif 成比例的有上下短线的字体</li>
<li>Sans-serif 成比例的，没有上下短线</li>
<li>Monospace 不成比例，通常用于模拟打字机打出的问题</li>
<li>Cursive  手写体</li>
<li>Fantasy 无法用任何特征来定义的字体</li>
</ul>
<p>特定字体：如Times，Verdana, Helvetica, Arial等，每一种特定的字体都会落入上述通用系列中。</p>
<ul>
<li>font-family 如h1 {font-family: Georgia, serif}, Georgia是特定字体，serif是通用字体。</li>
<li>font-weight<ul>
<li>normal</li>
<li>bold</li>
<li>bolder</li>
<li>lighter</li>
<li>100/200/300/400/500/600/700/800/900</li>
</ul>
</li>
<li>font-size<ul>
<li>xx-small/x-small/small/medium/large/x-large/xx-large/smaller/larger</li>
<li>&lt;length&gt;/&lt;percentage&gt;</li>
</ul>
</li>
<li>font-style字体风格<ul>
<li>italic/oblique/normal/inherit</li>
</ul>
</li>
<li>font-variant 字体变形<ul>
<li>small-caps 首字母大写</li>
<li>normal</li>
<li>inherit</li>
</ul>
</li>
</ul>
<h2 id="第六章-文本属性"><a href="#第六章-文本属性" class="headerlink" title="第六章 文本属性"></a>第六章 文本属性</h2><ul>
<li>text-indent 首行缩进<ul>
<li>&lt;length&gt; 如：p {text-indent: 3em}</li>
<li>&lt;percentag&gt; 相对于父元素宽度</li>
<li>inhert</li>
</ul>
</li>
<li>text-align 水平对齐<ul>
<li>left</li>
<li>right</li>
<li>center</li>
<li>justify 两端对齐，在打印领域很常见</li>
<li>inherit</li>
</ul>
</li>
<li>line-height 行高，定义了基线之间的距离，而不是字体大小，可以控制行间距。行间距=行高-字体大小<ul>
<li>&lt;length&gt;</li>
<li>&lt;percentage&gt;</li>
<li>&lt;number&gt;</li>
<li>normal</li>
<li>inherit</li>
</ul>
</li>
<li>vertical-align 行内元素和表单元格的垂直方向对齐<ul>
<li>base-line 基线对齐，元素的底端和副元素的基线对齐</li>
<li>sub/super 上标/下标，相对于基线升高/降低</li>
<li>bottom 元素行内框的底端和行框的底端对齐</li>
<li>text-bottom 元素行内框的底端和文本的底端对齐</li>
<li>top 与bottom相反</li>
<li>text-top 与text-bottom相反</li>
<li>middle 居中对齐</li>
<li>&lt;percentage&gt;</li>
<li>&lt;length&gt;</li>
<li>inherit</li>
</ul>
</li>
<li>word-spacing 字间隔<ul>
<li>&lt;length&gt;</li>
<li>normal</li>
<li>inherit</li>
</ul>
</li>
<li>letter-spacing 字母间隔<ul>
<li>&lt;length&gt;</li>
<li>normal</li>
<li>inherit</li>
</ul>
</li>
<li>text-transform<ul>
<li>uppercase 全大写</li>
<li>lowercase 全小写</li>
<li>capitalize 单词首字母大写</li>
<li>none</li>
<li>inherit</li>
</ul>
</li>
<li>text-decoration 文字效果<ul>
<li>none</li>
<li>underline 下划线</li>
<li>overline 上划线</li>
<li>line-through 中划线</li>
<li>blink</li>
<li>inherit</li>
</ul>
</li>
<li><p>text-shadow</p>
<ul>
<li><p>none</p>
</li>
<li><p>颜色值和三个长度值 text-shadow: silver 2px 2px 2px;</p>
</li>
</ul>
</li>
<li>white-space<ul>
<li>normal 合并空白符，忽略换行符，允许自动换行。</li>
<li>nowrap 合并空白符，忽略换行符号，不允许自动换行。</li>
<li>pre 保留空白符号，保留换行符号，不允许自动换行。</li>
<li>pre-wrap 保留空白符，保留换行符，允许自动换行。</li>
<li>pre-line 合并空白符，保留换行符，允许自动换行。</li>
<li>inherit</li>
</ul>
</li>
<li>direction 文本方向<ul>
<li>ltr</li>
<li>rtl</li>
<li>inherit</li>
</ul>
</li>
</ul>
<h2 id="第七章-基本视觉格式化"><a href="#第七章-基本视觉格式化" class="headerlink" title="第七章 基本视觉格式化"></a>第七章 基本视觉格式化</h2><p>水平格式化<br>七大水平属性</p>
<ul>
<li>margin-left</li>
<li>border-left</li>
<li>padding-left</li>
<li>width</li>
<li>padding-right</li>
<li>border-right</li>
<li>maring-right</li>
</ul>
<p>这7个属性值加起来就是元素包含块的宽度，这往往是副元素的width值。<br>width就是左内边距到右内边距的距离。<br>这7个属性中，只有3个属性可以设置为auto: margin-left, width, margin-right，可以用auto弥补实际值和所需总和的差距。如果三个值都为非auto的某个值，这些格式化属性过分受限，此时会强制设置margin-right为auto.<br>不止一个auto的情况：</p>
<ul>
<li>margin-left和margin-right为auto，此时元素居中，与text-align:center的区别，text-align只应用块级元素的内联内容，并不能使元素居中。</li>
<li>margin-left和width为auto，此时margin-left为0，width会填满剩余包块。</li>
<li>margin-right和width为auto，此时margin-right为0，width填满剩余包块。</li>
<li>margin-left和margin-right和width都为auto，此时margin-left和margin-right都为0,width会填满包块。这种情况和默认是相同的。</li>
</ul>
<p>水平外边距不会合并，父元素的内边距，边距和外边距可能影响子元素。</p>
<p>负外边距<br>   负外边距时，  会使得内容宽度超出包块，因为根据等式父包块width=7大水平之和，margin-left或margin-right为负时，width要增大。</p>
<p>垂直格式化<br>如果元素的内容的高度，大于元素框的高度，用户代理的具体行为将取决于overflow属性。<br>垂直格式化的七大属性</p>
<ul>
<li>margin-top</li>
<li>border-top</li>
<li>padding-top</li>
<li>height</li>
<li>padding-bottom</li>
<li>border-bottom</li>
<li>margin-bottom</li>
</ul>
<p>这7个属性值的值和必须等于含块的height，其中，3个值可以设置为auto，margin-top，height，margin-bottom，如果margin-top或margin-bottom设置为auto则自动计算0，这就是为什么不容易设置元素为垂直居中，这与水平时不一样的。对于定位元素，上下边距为auto时，处理不同。</p>
<p>如果没有显式声明包含块的height，百分数高度为重置为auto，如果块级中场元素的height设置为auto，显示时的高度将恰好足以包含其内联内容。<br>如果块级正常流元素高度设置为auto，而且只有块级子元素，其默认高度将是从最高块级子元素的外边框边界到最低块级子元素外边框边界之间的距离。<br>不过，如果块级元素有padding或者border，则高度则是最高子元素的上外边距到其最低子元素的下外边距边界之间的距离。</p>
<p>合并垂直外边距<br>垂直合并只引用与外边距，不会应用于内边距和边框。<br>负的下外边距会使段落看上去向下拉，负的上边会使段落看上去向上拉。</p>
<h2 id="第八章-内边距、边框和外边距"><a href="#第八章-内边距、边框和外边距" class="headerlink" title="第八章 内边距、边框和外边距"></a>第八章 内边距、边框和外边距</h2><ul>
<li><p>border-style</p>
<ul>
<li>none</li>
<li>hidden</li>
<li>dotted</li>
<li>dashed</li>
<li>solid</li>
<li>double</li>
<li>groove</li>
<li>ridge</li>
<li>inset</li>
<li>outset</li>
</ul>
</li>
<li><p>设置多个边框样式 p.asize {boder-style:  solid dashed dotted solid;}</p>
</li>
<li>boder-top-style/boder-right-style/border-bottom-style/border-left-style 单独设置边框样式</li>
<li>border-width边框宽度<ul>
<li>thin</li>
<li>medium</li>
<li>thick</li>
<li>&lt;length&gt;</li>
</ul>
</li>
<li>border-top-width/border-right-width/border-bottom-width/border-left-width单独设置宽度</li>
<li>boder-color边框颜色<ul>
<li>&lt;color&gt;</li>
<li>transparent 透明</li>
</ul>
</li>
<li>border-top-color/border-right-color/border-bottom-color/border-left-color单独设置颜色</li>
<li>border-top/boder-right/border-bottom/border-left单独设置边框<ul>
<li>[&lt;border-width&gt;] [&lt;border-style&gt;][boder-color]</li>
</ul>
</li>
<li>border 全局边框，应用到四条边<ul>
<li>[&lt;border-width&gt;] [&lt;border-style&gt;][boder-color]</li>
</ul>
</li>
</ul>
<p>对于只包含文本的行，能改变行间距离的属性只有line-height, font-size和vertical-align。<br>行内元素使用正左右外边距，可以多出来水平空间，负的左右外边距会使行内元素与其他内容重叠。<br>行内元素的边框，不会改变行高。<br>行内元素使用正的左右边框可以多出来水平空间。</p>
<ul>
<li>padding 内边距<ul>
<li>&lt;length&gt;</li>
<li>&lt;percentage&gt;</li>
</ul>
</li>
</ul>
<p>行内非替换元素使用左右内边距时，可以多出来水平空间，而上下边距不会改变行高。<br>可以想图像使用内边距,外边距，边框时，它可以改变行高，也可以水平方向留出距离。</p>
<ul>
<li>background-color 背景元素<ul>
<li>&lt;color&gt;</li>
<li>transparent</li>
</ul>
</li>
<li>background-image 如body {background-image: url(bg23.gif)}<ul>
<li>&lt;uri&gt;</li>
<li>none</li>
</ul>
</li>
<li>background-repeat 有方向的重复<ul>
<li>repeat</li>
<li>repeat-x</li>
<li>repeat-y</li>
<li>no-repeat</li>
</ul>
</li>
<li>background-position 背景定位<ul>
<li>&lt;percentage&gt;</li>
<li>&lt;length&gt;</li>
<li>left/center/right/top/bottom</li>
</ul>
</li>
</ul>
<p>background-position单个关键字等价<br>center: cener center<br>top: top center或者center top<br>bottom: bottom center或者center bottom<br>left: left center 或者center left<br>right: right center 或者center right</p>
<ul>
<li><p>background-attachment</p>
<ul>
<li>scroll 跟随文档滚动</li>
<li>fixed 不跟随文档滚动</li>
</ul>
</li>
<li><p>background 简写属性</p>
<ul>
<li>&lt;background-color&gt; || &lt;background-image&gt; || &lt;backgroud-repeat&gt; || &lt;background-attachment&gt; || &lt;background-position&gt;</li>
</ul>
</li>
</ul>
<h2 id="第十章-浮动和定位"><a href="#第十章-浮动和定位" class="headerlink" title="第十章 浮动和定位"></a>第十章 浮动和定位</h2><ul>
<li>float<ul>
<li>left</li>
<li>right</li>
<li>none</li>
</ul>
</li>
</ul>
<p>浮动元素会从文档的正常流中删除，它还是会影响布局。其他内容会环绕元素，浮动元素的外边距不会合并</p>
<ul>
<li><p>position</p>
<ul>
<li>static 默认 块元素生成一个矩形框，行内元素创建一个或多个行框，置于父元素中</li>
<li>relative 元素偏移某个距离，元素仍保持未定位前的形状，它原本占据的空间仍保留</li>
<li>absolute 元素框从文档流中完全删除，并相对于其包含块定位。</li>
<li>fixed 元素的表现类似于absolute，不过，其包含块是视窗本身。</li>
</ul>
</li>
<li><p>偏移属性，在position为relative,absolute和fixed时，可以设置偏移属性top right bottom left</p>
<ul>
<li>&lt;length&gt;</li>
<li>&lt;percentage&gt;</li>
<li>auto 初始值</li>
</ul>
</li>
</ul>
<p>包含块</p>
<p>根元素的包含块，由用户代理建立，即html元素或body元素<br>对于一个非根元素，如果其position时relative或static，包含块则由最近的块级框，表单元格或行内块祖先框的内容边界构成。<br>对于一个非根元素，如果其position时absolute，包含块则由最近的position值不是static的祖先元素。</p>
<ul>
<li>overflow<ul>
<li>visible</li>
<li>hidden</li>
<li>scroll</li>
<li>auto</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一章-css和文档&quot;&gt;&lt;a href=&quot;#第一章-css和文档&quot; class=&quot;headerlink&quot; title=&quot;第一章 css和文档&quot;&gt;&lt;/a&gt;第一章 css和文档&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;文档内定义样式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
    @import url(sheet2.css)
    h1 {color: maroon;}
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;引入css文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;link type=&amp;quot;text/css&amp;quot; rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;sheet1.css&amp;quot; media=&amp;quot;all&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>锋利的jQeury 第四章-笔记</title>
    <link href="http://yoursite.com/2016/09/05/chapter-4/"/>
    <id>http://yoursite.com/2016/09/05/chapter-4/</id>
    <published>2016-09-05T10:04:19.000Z</published>
    <updated>2016-11-15T10:08:44.328Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第四章-jQuery中的事件和动画"><a href="#第四章-jQuery中的事件和动画" class="headerlink" title="第四章 jQuery中的事件和动画"></a>第四章 jQuery中的事件和动画</h2><ul>
<li>window.onload方法，相当于<code>jQuery</code>中的$(window).load(function(){})方法。都是等文档中的所有元素加载完成时调用，包括关联css文件和javascript文件。</li>
<li>$(document).ready(function() {})则不会等待关联文件下载完，在DOM准备好之后就会调用。</li>
<li>$(window).load(function(){})可以调用多次，都会执行，而window.onload只会调用最后一次赋予的函数。</li>
<li>$(document).ready(function() {})可以简写为$(function() {});</li>
</ul>
<a id="more"></a>
<h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><ul>
<li><p>bind(type [, data], fn);第1个参数是事件类型，包括focus、load、click、dbclik等。，第2个参数可选，作为event.data传递，第3个参数是回调函数。示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'#panel h5.head'</span>).bind(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">        $(<span class="keyword">this</span>).next().show();</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>bind函数可以级联，如</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#panel h5.head'</span>).bind(<span class="string">'mouseover'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    $(<span class="keyword">this</span>).next().show();</div><div class="line">&#125;).bind(<span class="string">'mouseout'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    $(<span class="keyword">this</span>).next().hide();</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>bind可以简写，如</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#panel h5.head'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    $(<span class="keyword">this</span>).next().toggle();</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>合成事件</p>
<p>  <code>jQuery</code>有两个合成事件，hover()和toggle(),都有两个回调函数作为参数，可以看成是语法糖。hover表示移入移出两个事件，toggle表示前后两次点击事件，如</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#panel h5.head'</span>).hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="keyword">this</span>).next().show(); <span class="comment">//划过时显示下一个元素</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="keyword">this</span>).next().hide(); <span class="comment">//划出隐藏下一个元素</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#panel h5.head'</span>).toggle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="keyword">this</span>).next().show(); <span class="comment">//点击时显示下一个元素</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="keyword">this</span>).next().hide(); <span class="comment">//再次点击时隐藏下一个元素</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>事件对象的属性</p>
<ul>
<li>event.type 事件类型，字符串格式，如’click’, ‘dbclick’, ‘load’等。</li>
<li>event.preventDefault()阻止默认行为，可以用return false代替。</li>
<li>event.stopProgagation()组织事件冒泡，可以用return false代替。</li>
<li>event.target 触发事件的元素。</li>
<li>event.pageX event.pageY,相对于页面的x，y坐标。</li>
<li>event.which 不同事件含义不同，鼠标事件表示那个键，键盘事件表示键值。</li>
<li>event.metaKey ctl键是否按下。</li>
</ul>
</li>
<li>移除事件 unbind([type],[data]) <ul>
<li>如果没有参数，表示删除所有事件。</li>
<li>如果只提供type，表示移除所有type对应的事件回调。</li>
<li>如果传递了2个参数，表示对应的处理函数会被删除。</li>
</ul>
</li>
<li>单次事件 one(type, [data], fn);执行一次后，事件回被移除。</li>
<li><p>事件模拟</p>
<ul>
<li>原生事件 $(‘#btn’).trigger(‘click’)或者$(‘#btn’).click();</li>
<li>自定义事件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#btn'</span>).bind(<span class="string">'myClick'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'#test'</span>).append(<span class="string">'&amp;lt;p&gt;我的自定义事件&amp;lt;/p&gt;'</span>)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="string">'#btn'</span>).trigger(<span class="string">'myClick'</span>); <span class="comment">//触发事件。</span></div><div class="line"><span class="string">``</span><span class="string">`    </span></div><div class="line">- 传递数据</div><div class="line">`<span class="string">``</span>javascript</div><div class="line">$(<span class="string">'#btn'</span>).bind(<span class="string">'myClick'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event, msg1, msg2</span>)</span>&#123;</div><div class="line">    $(<span class="string">'#test'</span>).append(<span class="string">'&amp;lt;p&gt;我的自定义事件&amp;lt;/p&gt;'</span>)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="string">'#btn'</span>).trigger(<span class="string">'myClick'</span>. [<span class="string">'参数1'</span>，<span class="string">'参数2'</span>]); <span class="comment">//触发事件。</span></div><div class="line"><span class="string">``</span><span class="string">`   </span></div><div class="line">- 执行默认操作 triggerHandler，例如，只触发focus事件，但是不获取焦点（浏览器默认行为）</div><div class="line">`<span class="string">``</span>javascript</div><div class="line">$(<span class="string">'input'</span>).triggerHandler(<span class="string">'focus'</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>事件命名空间</p>
<ul>
<li>添加命名空间<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#div'</span>).bind(<span class="string">'mouseover.plugin'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;)</div><div class="line">$(<span class="string">'#btn'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">'#div'</span>).unbind(<span class="string">'.plugin'</span>); <span class="comment">//移除上面的事件。</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><ul>
<li>show(duration) 显示元素，duration不为0时，表示显示动画。将元素display属性从’none‘设置为原来的值</li>
<li>hide(duration) 隐藏元素，duration不为0时，表示隐藏动画。将元素display属性设置为’none’</li>
<li>fadeIn(duration) 与show一样，但是不改变display样式。</li>
<li>fadeOut(duration) 与hide一样，但是不改变display样式。</li>
<li>slideUp(duration)和slideDown(duration)，只改变高度。</li>
<li><p>animate(param, speed, callback)</p>
<ul>
<li>param 包含样式属性值，如{left: ‘400px’, top: ‘400px’}，可累加或累减，如{left: ‘+=400px’}</li>
<li>speed 动画时间</li>
<li><p>callback 动画完成回调<br>-累加动画</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#panel'</span>).animate(&#123;left:<span class="string">'400px'</span>, height:<span class="string">'200px'</span>, opacity:<span class="number">1</span>&#125;, <span class="number">3000</span>)</div><div class="line">    .animate(&#123;top:<span class="string">'200px'</span>, width:<span class="string">'200px'</span>&#125;, <span class="number">3000</span>， <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        consle.log(<span class="string">'animate done'</span>);</div><div class="line">    &#125;)</div><div class="line">    .fadeOut(<span class="string">'slow'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>停止动画stop([clearQueue], [gotoEnd])</p>
</li>
<li>判断是否处于动画状态 $(element).is(‘:animated’)</li>
<li>延迟动画delay(duration),延迟一段时间开始动画，$(this).animate({left:’400px’}).delay(200);</li>
<li>其他动画方法<ul>
<li>toggle(speed, [callback]) 显示/隐藏元素</li>
<li>slideToggle(speed, [easing], [callback])通过改变高度来显示/隐藏元素</li>
<li>fadeTo(speed, opacity, [callback]) 通过改变不透明度来显示/隐藏元素</li>
<li>fadeToggle(speed, [easing], [callback]) 通过不透明度来显示/隐藏元素。</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第四章-jQuery中的事件和动画&quot;&gt;&lt;a href=&quot;#第四章-jQuery中的事件和动画&quot; class=&quot;headerlink&quot; title=&quot;第四章 jQuery中的事件和动画&quot;&gt;&lt;/a&gt;第四章 jQuery中的事件和动画&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;window.onload方法，相当于&lt;code&gt;jQuery&lt;/code&gt;中的$(window).load(function(){})方法。都是等文档中的所有元素加载完成时调用，包括关联css文件和javascript文件。&lt;/li&gt;
&lt;li&gt;$(document).ready(function() {})则不会等待关联文件下载完，在DOM准备好之后就会调用。&lt;/li&gt;
&lt;li&gt;$(window).load(function(){})可以调用多次，都会执行，而window.onload只会调用最后一次赋予的函数。&lt;/li&gt;
&lt;li&gt;$(document).ready(function() {})可以简写为$(function() {});&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
</feed>
