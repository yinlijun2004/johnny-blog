<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>尹莉军</title>
  <subtitle>个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.yinlijun.com/"/>
  <updated>2018-04-20T11:48:06.059Z</updated>
  <id>http://www.yinlijun.com/</id>
  
  <author>
    <name>尹莉军 &lt;yinlijun2004@gmail.com&gt;</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>带进度条按钮的实现</title>
    <link href="http://www.yinlijun.com/2018/04/20/progress-action-button-tutorial/"/>
    <id>http://www.yinlijun.com/2018/04/20/progress-action-button-tutorial/</id>
    <published>2018-04-20T11:34:08.000Z</published>
    <updated>2018-04-20T11:48:06.059Z</updated>
    
    <content type="html"><![CDATA[<p>写一个带进度条的按钮：<a href="https://github.com/yinlijun2004/ProgressActionButton" target="_blank" rel="external">ProgressActionButton</a>，支持外观定制。</p>
<p>可以当单纯的进度条使用，也可以当单纯的按钮使用，还可以当带进度的按钮使用。</p>
<p>主要难点就是实现椭圆按钮的绘制，思路就是，先绘制背景图片，再绘制前景图片，然后剪切一个圆角矩形出来。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Bitmap <span class="title">drawRadiusBitmap</span><span class="params">(Bitmap bg, Bitmap fg, Rect rect, RectF rectF)</span> </span>&#123;</div><div class="line">    Bitmap output = Bitmap.createBitmap(rect.width(), rect.height(), Bitmap.Config.ARGB_8888);</div><div class="line">    Canvas canvas = <span class="keyword">new</span> Canvas(output);</div><div class="line">    <span class="keyword">int</span> color = <span class="number">0xff424242</span>;</div><div class="line">    Paint paint = <span class="keyword">new</span> Paint();</div><div class="line">    paint.setAntiAlias(<span class="keyword">true</span>);</div><div class="line">    canvas.drawARGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    paint.setColor(color);</div><div class="line"></div><div class="line">    canvas.drawRoundRect(rectF, buttonRadius, buttonRadius, paint);</div><div class="line">    paint.setXfermode(<span class="keyword">new</span> PorterDuffXfermode(PorterDuff.Mode.SRC_IN));</div><div class="line">    canvas.drawBitmap(bg, rect, rect, paint);</div><div class="line">    <span class="keyword">if</span>(fg != <span class="keyword">null</span>) &#123;</div><div class="line">        Rect fgRect = <span class="keyword">new</span> Rect(rect.left, rect.top, rect.left + (<span class="keyword">int</span>) (rect.width() * progress / <span class="number">100.0f</span>), rect.bottom);</div><div class="line">        canvas.drawBitmap(fg, fgRect, fgRect, paint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> output;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>支持定制属性：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"ProgressActionButton"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"initBg"</span> <span class="attr">format</span>=<span class="string">"reference"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"successBg"</span> <span class="attr">format</span>=<span class="string">"reference"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"failBg"</span> <span class="attr">format</span>=<span class="string">"reference"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"progressBg"</span> <span class="attr">format</span>=<span class="string">"reference"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"progressFg"</span> <span class="attr">format</span>=<span class="string">"reference"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"disableBg"</span> <span class="attr">format</span>=<span class="string">"reference"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"buttonRadius"</span> <span class="attr">format</span>=<span class="string">"dimension"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div></pre></td></tr></table></figure>
<p>用法：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.trendit.progressactionbutton.ProgressActionButton</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@id/progress_bar"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"@dimen/progress_action_button_height"</span></div><div class="line">    <span class="attr">android:textSize</span>=<span class="string">"@dimen/progress_action_button_text_size"</span></div><div class="line">    <span class="attr">android:textColor</span>=<span class="string">"#DEFFFFFF"</span></div><div class="line">    <span class="attr">app:initBg</span>=<span class="string">"@drawable/default_progress_bg"</span></div><div class="line">    /&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写一个带进度条的按钮：&lt;a href=&quot;https://github.com/yinlijun2004/ProgressActionButton&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ProgressActionButton&lt;/a&gt;，支持外观定制。&lt;/p&gt;
&lt;p&gt;可以当单纯的进度条使用，也可以当单纯的按钮使用，还可以当带进度的按钮使用。&lt;/p&gt;
&lt;p&gt;主要难点就是实现椭圆按钮的绘制，思路就是，先绘制背景图片，再绘制前景图片，然后剪切一个圆角矩形出来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://www.yinlijun.com/tags/android/"/>
    
      <category term="button" scheme="http://www.yinlijun.com/tags/button/"/>
    
      <category term="progressbar" scheme="http://www.yinlijun.com/tags/progressbar/"/>
    
  </entry>
  
  <entry>
    <title>从零搭建Android OTA系统——用户管理规则实现</title>
    <link href="http://www.yinlijun.com/2018/04/19/my-ota-tutorial-5/"/>
    <id>http://www.yinlijun.com/2018/04/19/my-ota-tutorial-5/</id>
    <published>2018-04-19T02:16:18.000Z</published>
    <updated>2018-04-19T03:01:26.514Z</updated>
    
    <content type="html"><![CDATA[<p>OTA系统提供两套API，一套用于普通的查询功能，比如以发布的版本列表，版本下载地址等，另一套提供管理功能，比如新建，编辑，删除等。</p>
<p>管理功能API，需要区分用户类型，不同的用户有不同的权限，用户分为以下四类：</p>
<ul>
<li>系统管理员<ul>
<li>批准用户注册申请</li>
<li>删除用户</li>
<li>重置用户密码</li>
<li>管理测试SN</li>
<li>管理Android版本</li>
<li>管理版本类别</li>
</ul>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>软件工程师</p>
<ul>
<li>新建版本</li>
<li>修改版本</li>
<li>上传固件包</li>
<li>发布Alpha测试</li>
</ul>
</li>
<li><p>测试工程师</p>
<ul>
<li>撤回Alpha测试</li>
<li>发布Beta测试</li>
</ul>
</li>
<li><p>运营工程师</p>
<ul>
<li>撤回Beta测试</li>
<li>发布Release版本</li>
</ul>
</li>
</ul>
<h3 id="注册用户"><a href="#注册用户" class="headerlink" title="注册用户"></a>注册用户</h3><h4 id="前端注册请求"><a href="#前端注册请求" class="headerlink" title="前端注册请求"></a>前端注册请求</h4><p>saga/homeSaga.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span>* <span class="title">register</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">yield</span> put(&#123;type:IndexActionTypes.FETCH_START&#125;);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">yield</span> call(puter, <span class="string">'/user'</span>, data)</div><div class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</div><div class="line">        <span class="keyword">yield</span> put(&#123;type:IndexActionTypes.SET_MESSAGE,msgContent:<span class="string">'注册失败'</span>,msgType:<span class="number">0</span>&#125;);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">yield</span> put(&#123;type: IndexActionTypes.FETCH_END&#125;); </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="后端处理注册请求"><a href="#后端处理注册请求" class="headerlink" title="后端处理注册请求"></a>后端处理注册请求</h4><p>routes/user.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//注册</span></div><div class="line">router.put(<span class="string">'/'</span>, validRequest.validUsernamePassword, user.register);</div></pre></td></tr></table></figure></p>
<p>validRequest中间件用来校验用户名密码。</p>
<p>controller/user.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">exports.register = (req, res, next) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> &#123;</div><div class="line">    type,</div><div class="line">    username,</div><div class="line">    password&#125; = req.body;</div><div class="line">  <span class="keyword">var</span> newUser = <span class="keyword">new</span> User();</div><div class="line">  newUser.username = username;</div><div class="line">  newUser.password = newUser.encryptPassword(password);</div><div class="line">  newUser.type = type;</div><div class="line">  newUser.state = <span class="string">"pending"</span>;</div><div class="line">  </div><div class="line">  newUser.save()</div><div class="line">    .then(user =&gt; &#123;</div><div class="line">      responseClient(res, <span class="number">200</span>, errorCode.ERROR_CODE_SUCCESS, <span class="string">"注册成功，请联系管理员批准"</span>);</div><div class="line">    &#125;)</div><div class="line">    .catch(err =&gt; &#123;</div><div class="line">      <span class="built_in">console</span>.log(err.message);</div><div class="line">      responseClient(res, <span class="number">406</span>, errorCode.ERROR_CODE_SERVER, err.message);</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建用户时，初始状态为pending，存储密码用密文。</p>
<h3 id="批准用户"><a href="#批准用户" class="headerlink" title="批准用户"></a>批准用户</h3><p>批准用户需要管理员身份。</p>
<h4 id="前端发送批准请求"><a href="#前端发送批准请求" class="headerlink" title="前端发送批准请求"></a>前端发送批准请求</h4><p>adminManagerUserSaga.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">acceptUser</span>(<span class="params">username</span>) </span>&#123;</div><div class="line">    <span class="keyword">yield</span> put(&#123;type: IndexActionTypes.FETCH_START&#125;);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">yield</span> call(post, <span class="string">`/user_manager/accept`</span>, &#123;username&#125;);</div><div class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</div><div class="line">        <span class="keyword">yield</span> put(&#123;type: IndexActionTypes.SET_MESSAGE, msgContent: <span class="string">'网络请求错误'</span>, msgType: <span class="number">0</span>&#125;);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">yield</span> put(&#123;type: IndexActionTypes.FETCH_END&#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="后端处理批准请求"><a href="#后端处理批准请求" class="headerlink" title="后端处理批准请求"></a>后端处理批准请求</h4><p>routes/user_manager.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//批准用户</span></div><div class="line">router.post(<span class="string">'/accept'</span>, validRequest.validUserType(<span class="string">'admin'</span>), user.acceptUser);</div></pre></td></tr></table></figure></p>
<p>controller/user_manager.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">exports.acceptUser = (req, res, next) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> &#123;</div><div class="line">    username,</div><div class="line">  &#125; = req.body;</div><div class="line">  </div><div class="line">  <span class="keyword">if</span>(!username) &#123;</div><div class="line">    responseClient(res, <span class="number">401</span>, errorCode.ERROR_CODE_CLIENT, <span class="string">"未知用户名"</span>);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  User.findOne(&#123;username: username&#125;).exec()</div><div class="line">    .then(user =&gt; &#123;</div><div class="line">      <span class="keyword">if</span>(!user) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`未知用户名:<span class="subst">$&#123;username&#125;</span>`</span>)</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(user.state === <span class="string">'accept'</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(user);</div><div class="line">      &#125;</div><div class="line">      user.state = <span class="string">'accept'</span>;</div><div class="line">      <span class="keyword">return</span> user.save();</div><div class="line">    &#125;)</div><div class="line">    .then(user =&gt; &#123;</div><div class="line">      responseClient(res, <span class="number">200</span>, errorCode.ERROR_CODE_SUCCESS, <span class="string">`<span class="subst">$&#123;username&#125;</span>已批准`</span>);</div><div class="line">    &#125;)</div><div class="line">    .catch(error =&gt; &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'acceptUser'</span>, error.message);</div><div class="line">      responseClient(res, <span class="number">401</span>, errorCode.ERROR_CODE_CLIENT, <span class="string">`批准用户失败`</span>);</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其他用户管理操作的流程是类似的。</p>
<p>以上所有的源代码都可以在<a href="https://github.com/yinlijun2004/android_ota_system" target="_blank" rel="external">https://github.com/yinlijun2004/android_ota_system</a>中找到。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OTA系统提供两套API，一套用于普通的查询功能，比如以发布的版本列表，版本下载地址等，另一套提供管理功能，比如新建，编辑，删除等。&lt;/p&gt;
&lt;p&gt;管理功能API，需要区分用户类型，不同的用户有不同的权限，用户分为以下四类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统管理员&lt;ul&gt;
&lt;li&gt;批准用户注册申请&lt;/li&gt;
&lt;li&gt;删除用户&lt;/li&gt;
&lt;li&gt;重置用户密码&lt;/li&gt;
&lt;li&gt;管理测试SN&lt;/li&gt;
&lt;li&gt;管理Android版本&lt;/li&gt;
&lt;li&gt;管理版本类别&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="从零搭建Android OTA系统" scheme="http://www.yinlijun.com/categories/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAAndroid-OTA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="nodejs" scheme="http://www.yinlijun.com/tags/nodejs/"/>
    
      <category term="express" scheme="http://www.yinlijun.com/tags/express/"/>
    
      <category term="react" scheme="http://www.yinlijun.com/tags/react/"/>
    
      <category term="antd" scheme="http://www.yinlijun.com/tags/antd/"/>
    
  </entry>
  
  <entry>
    <title>从零搭建Android OTA系统——版本发布规则实现</title>
    <link href="http://www.yinlijun.com/2018/04/19/my-ota-tutorial-4/"/>
    <id>http://www.yinlijun.com/2018/04/19/my-ota-tutorial-4/</id>
    <published>2018-04-19T01:32:37.000Z</published>
    <updated>2018-04-19T02:14:07.233Z</updated>
    
    <content type="html"><![CDATA[<p>版本包含两部分</p>
<ul>
<li>版本元信息<br>存放在业务服务器上，存储版本号，版本类型，Android版本号等等。</li>
<li>版本固件包 存放在七牛云服务器上。</li>
</ul>
<a id="more"></a>
<p>总体框图如下：<br><img src="https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/5e891902dcc45c5a8384d25d7779d5eb937fd0183a1fd67496650f84621404c5ea46a384b1d2b8836819fa09c44df7e0?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=OTA%E6%A1%86%E5%9B%BE.png&amp;size=1024" alt=""></p>
<p>发布版本规则，其实就是改变版本的状态，我将版本分为四个状态。</p>
<ul>
<li>new 新建状态，可以上传固件包，编辑版本信息。</li>
<li>alpha Alpha状态，可以在后台配置支持alpha测试的SN号，对应的终端设备能收到升级提示。</li>
<li>beta Beta状态，可以在后台配置支持beta测试的SN号，对应的终端设备能收到升级提示。</li>
<li>Release状态，所有的设备都能收到升级提示。</li>
</ul>
<p>版本状态迁移：</p>
<p><img src="https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/f8279f93bdf2d68e2d599d0498b747cfe83430bbd7161ce4a39268a1156af75ff42effdec511f08e0dc4d6489e58dbbe?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=firmware_process.png&amp;size=1024" alt="版本状态迁移："></p>
<h3 id="创建版本"><a href="#创建版本" class="headerlink" title="创建版本"></a>创建版本</h3><h4 id="前端上传版本信息"><a href="#前端上传版本信息" class="headerlink" title="前端上传版本信息"></a>前端上传版本信息</h4><p>adminManagerFirmwareSaga.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span>* <span class="title">createFirmwareInfo</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> put(&#123;type: IndexActionTypes.FETCH_START&#125;);</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    data.releaseNotes = <span class="built_in">JSON</span>.stringify(data.releaseNotes);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">yield</span> call(puter, <span class="string">'/firmware_manager/firmware'</span>, data);</div><div class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</div><div class="line">    <span class="comment">//</span></div><div class="line">  &#125; <span class="keyword">finally</span> &#123;</div><div class="line">    <span class="keyword">yield</span> put(&#123;type: IndexActionTypes.FETCH_END&#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="后端处理新建版本"><a href="#后端处理新建版本" class="headerlink" title="后端处理新建版本"></a>后端处理新建版本</h4><p>routes/firmware_manager.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//新建版本</span></div><div class="line">router.put(<span class="string">'/firmware'</span>, </div><div class="line">    validRequest.validUserType(<span class="string">'program'</span>), firmwareManager.createFirmware);</div></pre></td></tr></table></figure></p>
<p>这里用一个中间件过滤用户类型，只有program的用户才允许创建版本。</p>
<p>controller/firwmare_manager.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">exports.createFirmware = (req, res, next) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> &#123;</div><div class="line">    firmwareCode, </div><div class="line">    firmwareDescription, </div><div class="line">    androidVersion, </div><div class="line">    firmwareClass,</div><div class="line">    releaseNotes,</div><div class="line">  &#125; = req.body; </div><div class="line">  <span class="keyword">if</span>(!firmwareCode || !firmwareDescription || !androidVersion || !firmwareClass || !releaseNotes) &#123;</div><div class="line">    responseClient(res, <span class="number">401</span>, errorCode.ERROR_CODE_CLIENT, <span class="string">"invalid param"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">let</span> notes;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">     notes = <span class="built_in">JSON</span>.parse(releaseNotes);</div><div class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</div><div class="line">    <span class="built_in">console</span>.log(err.message);</div><div class="line">    responseClient(res, <span class="number">401</span>, errorCode.ERROR_CODE_CLIENT, <span class="string">"release notes parse failed"</span>);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">Promise</span>.all(</div><div class="line">    [</div><div class="line">      Firmware.findOne(&#123;firmwareClass: firmwareClass, firmwareCode: firmwareCode&#125;).exec(),</div><div class="line">      Firmware.find(&#123;firmwareClass: firmwareClass&#125;).exec()</div><div class="line">    ]).then(([newFirmware, allFirmwares]) =&gt; &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"newFirmware:"</span>, newFirmware, <span class="string">"allFirmwares:"</span>, allFirmwares);</div><div class="line">      <span class="keyword">if</span>(newFirmware) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`firmware code: <span class="subst">$&#123;firmwareCode&#125;</span> in class <span class="subst">$&#123;firmwareClass&#125;</span> already exsist!`</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"release notes:"</span>, notes);</div><div class="line">      <span class="keyword">let</span> data = &#123;</div><div class="line">        firmwareCode: firmwareCode,</div><div class="line">        firmwareDescription: firmwareDescription,</div><div class="line">        androidVersion: androidVersion,</div><div class="line">        firmwareClass: firmwareClass,</div><div class="line">        releaseNotes: notes,</div><div class="line">        firmwareState: <span class="string">"new"</span>,</div><div class="line">      &#125;;</div><div class="line">      <span class="keyword">if</span>(allFirmwares &amp;&amp; allFirmwares.length &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">let</span> diffPath = allFirmwares.filter(f =&gt; &#123;</div><div class="line">          <span class="keyword">return</span> firmwareUtils.compareFirmwareCode(firmwareCode, f.firmwareCode) &gt; <span class="number">0</span>;</div><div class="line">        &#125;).map(f =&gt; &#123;</div><div class="line">          <span class="keyword">return</span> &#123;firmwareCode: f.firmwareCode, firmwareId: f._id&#125;;</div><div class="line">        &#125;)</div><div class="line">        data.diffPackagePath = diffPath;</div><div class="line">      &#125;</div><div class="line">      firmwareUtils.assertFirmwareContent(data);</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Firmware(data).save();</div><div class="line">    &#125;)</div><div class="line">    .then(firmware =&gt; &#123;</div><div class="line">      responseClient(res, <span class="number">200</span>, errorCode.ERROR_CODE_SUCCESS, <span class="string">"firmware created"</span>);</div><div class="line">    &#125;)</div><div class="line">    .catch(error =&gt; &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'firmware save error'</span>, error.message);</div><div class="line">      responseClient(res, <span class="number">406</span>, errorCode.ERROR_CODE_CLIENT, error.message);</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建版本后，初始化版本状态为new。</p>
<h3 id="修改版本状态"><a href="#修改版本状态" class="headerlink" title="修改版本状态"></a>修改版本状态</h3><h4 id="前端发送请求"><a href="#前端发送请求" class="headerlink" title="前端发送请求"></a>前端发送请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">firmwarePublishAlpha</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> put(&#123;type: IndexActionTypes.FETCH_START&#125;)</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">yield</span> call(post, <span class="string">`/firmware_manager/<span class="subst">$&#123;id&#125;</span>/alpha`</span>);</div><div class="line">  &#125; <span class="keyword">catch</span>(error) &#123;</div><div class="line">    <span class="comment">//</span></div><div class="line">  &#125; <span class="keyword">finally</span> &#123;</div><div class="line">    <span class="keyword">yield</span> put(&#123;type: IndexActionTypes.FETCH_END&#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">firmwareReverseAlpha</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> put(&#123;type: IndexActionTypes.FETCH_START&#125;)</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">yield</span> call(deleter, <span class="string">`/firmware_manager/<span class="subst">$&#123;id&#125;</span>/alpha`</span>);</div><div class="line">  &#125; <span class="keyword">catch</span>(error) &#123;</div><div class="line">    <span class="comment">//</span></div><div class="line">  &#125; <span class="keyword">finally</span> &#123;</div><div class="line">    <span class="keyword">yield</span> put(&#123;type: IndexActionTypes.FETCH_END&#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">firmwarePublishBeta</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> put(&#123;type: IndexActionTypes.FETCH_START&#125;)</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">yield</span> call(post, <span class="string">`/firmware_manager/<span class="subst">$&#123;id&#125;</span>/beta`</span>);</div><div class="line">  &#125; <span class="keyword">catch</span>(error) &#123;</div><div class="line">    <span class="comment">//</span></div><div class="line">  &#125; <span class="keyword">finally</span> &#123;</div><div class="line">    <span class="keyword">yield</span> put(&#123;type: IndexActionTypes.FETCH_END&#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">firmwareReverseBeta</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> put(&#123;type: IndexActionTypes.FETCH_START&#125;)</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">yield</span> call(deleter, <span class="string">`/firmware_manager/<span class="subst">$&#123;id&#125;</span>/beta`</span>);</div><div class="line">  &#125; <span class="keyword">catch</span>(error) &#123;</div><div class="line">    <span class="comment">//</span></div><div class="line">  &#125; <span class="keyword">finally</span> &#123;</div><div class="line">    <span class="keyword">yield</span> put(&#123;type: IndexActionTypes.FETCH_END&#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">firmwarePublishRelease</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> put(&#123;type: IndexActionTypes.FETCH_START&#125;)</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">yield</span> call(post, <span class="string">`/firmware_manager/<span class="subst">$&#123;id&#125;</span>/release`</span>);</div><div class="line">  &#125; <span class="keyword">catch</span>(error) &#123;</div><div class="line">    <span class="comment">//</span></div><div class="line">  &#125; <span class="keyword">finally</span> &#123;</div><div class="line">    <span class="keyword">yield</span> put(&#123;type: IndexActionTypes.FETCH_END&#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接口设计遵循restful原则。</p>
<h4 id="后端处理"><a href="#后端处理" class="headerlink" title="后端处理"></a>后端处理</h4><p>routes/firwmare_manager.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//发布alpha测试</span></div><div class="line">router.post(<span class="string">'/:id/alpha'</span>,</div><div class="line">    validRequest.validUserType(<span class="string">'program'</span>), firmwareManager.changeState(<span class="string">"new"</span>, <span class="string">"alpha"</span>));</div><div class="line"></div><div class="line"><span class="comment">//撤回alpha测试</span></div><div class="line">router.delete(<span class="string">'/:id/alpha'</span>,</div><div class="line">    validRequest.validUserType(<span class="string">'test'</span>), firmwareManager.changeState(<span class="string">"alpha"</span>, <span class="string">"new"</span>));</div><div class="line"></div><div class="line"><span class="comment">//发布beta测试</span></div><div class="line">router.post(<span class="string">'/:id/beta'</span>,</div><div class="line">    validRequest.validUserType(<span class="string">'test'</span>), firmwareManager.changeState(<span class="string">"alpha"</span>, <span class="string">"beta"</span>));</div><div class="line"></div><div class="line"><span class="comment">//撤回beta测试</span></div><div class="line">router.delete(<span class="string">'/:id/beta'</span>,</div><div class="line">    validRequest.validUserType(<span class="string">'operation'</span>), firmwareManager.changeState(<span class="string">"beta"</span>, <span class="string">"alpha"</span>));</div><div class="line"></div><div class="line"><span class="comment">//发布release版本</span></div><div class="line">router.post(<span class="string">'/:id/release'</span>,</div><div class="line">    validRequest.validUserType(<span class="string">'operation'</span>), firmwareManager.changeState(<span class="string">"beta"</span>, <span class="string">"release"</span>));</div></pre></td></tr></table></figure></p>
<p>上面的api接口，统一放在changeState里面做。</p>
<p>controller/firwmare_manager.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">exports.changeState = (prevState, nextState) =&gt; &#123;</div><div class="line">  <span class="keyword">return</span> (req, res, next) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> id = req.params.id;</div><div class="line"></div><div class="line">    Firmware.findById(id).exec() </div><div class="line">    .then(item =&gt; &#123;</div><div class="line">      <span class="keyword">if</span>(!item) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`firmware id <span class="subst">$&#123;id&#125;</span> not found`</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span>(item.firmwareState != prevState) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`user has no permission change <span class="subst">$&#123;prevState&#125;</span> to <span class="subst">$&#123;nextState&#125;</span>`</span>);</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      <span class="keyword">if</span>(prevState === <span class="string">"new"</span> &amp;&amp; (!item.fullPackagePath || item.fullPackagePath.length === <span class="number">0</span>)) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`state change failed, full package not found`</span>);</div><div class="line">      &#125;</div><div class="line">      item.firmwareState = nextState;</div><div class="line">      item.save();</div><div class="line">    &#125;)</div><div class="line">    .then(item =&gt; &#123;</div><div class="line">      responseClient(res, <span class="number">200</span>, errorCode.ERROR_CODE_SUCCESS, <span class="string">"firmware publish success"</span>);</div><div class="line">    &#125;)</div><div class="line">    .catch(error =&gt; &#123;</div><div class="line">      responseClient(res, <span class="number">404</span>, errorCode.ERROR_CODE_SERVER, error.message);</div><div class="line">    &#125;)</div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上所有的源代码都可以在<a href="https://github.com/yinlijun2004/android_ota_system" target="_blank" rel="external">https://github.com/yinlijun2004/android_ota_system</a>中找到。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;版本包含两部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;版本元信息&lt;br&gt;存放在业务服务器上，存储版本号，版本类型，Android版本号等等。&lt;/li&gt;
&lt;li&gt;版本固件包 存放在七牛云服务器上。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="从零搭建Android OTA系统" scheme="http://www.yinlijun.com/categories/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAAndroid-OTA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="nodejs" scheme="http://www.yinlijun.com/tags/nodejs/"/>
    
      <category term="express" scheme="http://www.yinlijun.com/tags/express/"/>
    
      <category term="react" scheme="http://www.yinlijun.com/tags/react/"/>
    
      <category term="antd" scheme="http://www.yinlijun.com/tags/antd/"/>
    
  </entry>
  
  <entry>
    <title>pm2启动参数加入环境变量</title>
    <link href="http://www.yinlijun.com/2018/04/18/pm2-load-environment/"/>
    <id>http://www.yinlijun.com/2018/04/18/pm2-load-environment/</id>
    <published>2018-04-18T09:35:30.000Z</published>
    <updated>2018-04-19T01:07:10.623Z</updated>
    
    <content type="html"><![CDATA[<p>pm2用来管理nodejs应用的时候，可以简单的用命令行来启动，如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 start ./ota_server/bin/www --name=ota-server</div></pre></td></tr></table></figure></p>
<p>更常用的方法是将启动脚本配置成json，如:</p>
<a id="more"></a>
<p>start.json<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    app: [</div><div class="line">        &#123;</div><div class="line">            name: "ota-server",</div><div class="line">            script: "./ota_server/bin/www",</div><div class="line">            watch: false,</div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果你的项目package.json启动参数里面带了环境变量，比如：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">"scripts": &#123;</div><div class="line">    "start"："cross-env NODE_ENV=production node ./bin/www",</div><div class="line">    "start-dev": "node ./bin/www"</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个时候可以在start.json里面加上相应的环境变量配置。</p>
<p>start.json<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    app: [</div><div class="line">        &#123;</div><div class="line">            name: "ota-server",</div><div class="line">            script: "./ota_server/bin/www",</div><div class="line">            watch: false,</div><div class="line">            env_prod: &#123;</div><div class="line">                "NODE_ENV": "production",</div><div class="line">            &#125;,</div><div class="line">            env_dev: &#123;</div><div class="line">                "NODE_ENV": "development",</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后用如下命令加入环境变量了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 start start.json --env=prod</div></pre></td></tr></table></figure></p>
<p>这样可以在代码里面这样应用环境变量：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">domain: process.env.NODE_ENV === <span class="string">"production"</span> ? <span class="string">'http://ota.yinlijun.com'</span> : <span class="string">'http://yinlijun.viphk.ngrok.org'</span>,</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pm2用来管理nodejs应用的时候，可以简单的用命令行来启动，如:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;pm2 start ./ota_server/bin/www --name=ota-server&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;更常用的方法是将启动脚本配置成json，如:&lt;/p&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="http://www.yinlijun.com/tags/nodejs/"/>
    
      <category term="pm2" scheme="http://www.yinlijun.com/tags/pm2/"/>
    
  </entry>
  
  <entry>
    <title>从零搭建Android OTA系统——七牛云存储接口实现</title>
    <link href="http://www.yinlijun.com/2018/04/18/my-ota-tutorial-3/"/>
    <id>http://www.yinlijun.com/2018/04/18/my-ota-tutorial-3/</id>
    <published>2018-04-18T07:34:06.000Z</published>
    <updated>2018-04-19T01:11:48.150Z</updated>
    
    <content type="html"><![CDATA[<p>我们的OTA的固件存放在七牛，需要用到他们的一些SDK。</p>
<ul>
<li><a href="https://developer.qiniu.com/kodo/sdk/1289/nodejs" target="_blank" rel="external">Nodejs sdk</a></li>
<li><a href="https://developer.qiniu.com/kodo/sdk/1283/javascript" target="_blank" rel="external">js sdk</a></li>
<li><a href="https://developer.qiniu.com/kodo/sdk/1236/android" target="_blank" rel="external">Android sdk</a> </li>
</ul>
<h3 id="上传流程"><a href="#上传流程" class="headerlink" title="上传流程"></a>上传流程</h3><a id="more"></a>
<h4 id="客户端请求生成上传凭证"><a href="#客户端请求生成上传凭证" class="headerlink" title="客户端请求生成上传凭证"></a>客户端请求生成上传凭证</h4><p>adminManagerFirmwareSaga.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">getUpToken</span>(<span class="params">tokenInfo</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">yield</span> call(get, <span class="string">`/firmware_manager/<span class="subst">$&#123;tokenInfo.curFirmwareId&#125;</span>/uptoken`</span>, &#123;prevFirmwareId: tokenInfo.prevFirmwareId&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="服务端路由返回上传凭证"><a href="#服务端路由返回上传凭证" class="headerlink" title="服务端路由返回上传凭证"></a>服务端路由返回上传凭证</h4><p>routes/firwmare_manager.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">router.get(<span class="string">'/:id/uptoken'</span>,</div><div class="line">    validRequest.validUserType(<span class="string">'program'</span>), firmwareManager.createUploadToken);</div></pre></td></tr></table></figure></p>
<p>controller/firmware_manager.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">exports.createUploadToken = (req, res, next) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> &#123;</div><div class="line">    prevFirmwareId,</div><div class="line">  &#125; = req.query;</div><div class="line">  <span class="keyword">const</span> id = req.params.id;</div><div class="line">  Firmware.findById(id).exec() </div><div class="line">    .then(item =&gt; &#123;</div><div class="line">      <span class="keyword">if</span>(!item) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`firmware id <span class="subst">$&#123;id&#125;</span> not found`</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">const</span> isFullPackage = !prevFirmwareId;</div><div class="line">      <span class="keyword">const</span> options = &#123;</div><div class="line">          expires: <span class="number">36000</span>,</div><div class="line">          callbackUrl: <span class="string">`<span class="subst">$&#123;config.domain&#125;</span>/api/firmware_manager/<span class="subst">$&#123;item._id&#125;</span>/notify_package_uploaded`</span>,</div><div class="line">      &#125;;</div><div class="line">      </div><div class="line">      <span class="keyword">const</span> &#123; _id, firmwareClass &#125; = item;</div><div class="line">      <span class="keyword">const</span> currentFirmwareCode = item.firmwareCode;</div><div class="line"></div><div class="line">      <span class="keyword">if</span>(isFullPackage) &#123;</div><div class="line">        <span class="keyword">const</span> path = <span class="string">`<span class="subst">$&#123;firmwareClass&#125;</span>/<span class="subst">$&#123;currentFirmwareCode&#125;</span>/<span class="subst">$&#123;currentFirmwareCode&#125;</span>.zip`</span>;</div><div class="line">        options.scope = <span class="string">`<span class="subst">$&#123;qiniuConfig.bucketFirmware&#125;</span>:<span class="subst">$&#123;path&#125;</span>`</span>;</div><div class="line">        options.callbackBody = <span class="string">`&#123;"currentFirmwareCode": "<span class="subst">$&#123;currentFirmwareCode&#125;</span>", "hash":"$(etag)"&#125;`</span>;</div><div class="line">        options.callbackBodyType= <span class="string">'application/json'</span>;</div><div class="line">        <span class="keyword">const</span> token = qiniu.createUptoken(qiniuConfig.bucketFirmware, path, options);</div><div class="line"></div><div class="line">        responseClient(res, <span class="number">200</span>, errorCode.ERROR_CODE_SUCCESS, <span class="string">"create upload token success"</span>, &#123;token: token, key: path&#125;);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//diff package</span></div><div class="line">        Firmware.findById(prevFirmwareId).exec()</div><div class="line">          .then(item =&gt; &#123;</div><div class="line">            <span class="keyword">if</span>(!item) &#123;</div><div class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`previous firmware id <span class="subst">$&#123;prevFirmwareId&#125;</span> not found`</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(item.firmwareClass !== item.firmwareClass) &#123;</div><div class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`firmware class not match`</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">const</span> prevFirmwareCode = item.firmwareCode;</div><div class="line">            <span class="keyword">const</span> path = <span class="string">`<span class="subst">$&#123;firmwareClass&#125;</span>/<span class="subst">$&#123;currentFirmwareCode&#125;</span>/diff_<span class="subst">$&#123;currentFirmwareCode&#125;</span>_<span class="subst">$&#123;prevFirmwareCode&#125;</span>.zip`</span>;</div><div class="line">            options.scope = <span class="string">`<span class="subst">$&#123;qiniuConfig.bucketFirmware&#125;</span>:<span class="subst">$&#123;path&#125;</span>`</span>;</div><div class="line">            options.callbackBody =<span class="string">`&#123;"prevFirmwareCode": "<span class="subst">$&#123;prevFirmwareCode&#125;</span>", "hash":"$(etag)"&#125;`</span>;</div><div class="line">            options.callbackBodyType = <span class="string">'application/json'</span></div><div class="line">            <span class="keyword">const</span> token = qiniu.createUptoken(qiniuConfig.bucketFirmware, path, options);</div><div class="line"></div><div class="line">            responseClient(res, <span class="number">200</span>, errorCode.ERROR_CODE_SUCCESS, </div><div class="line">                    <span class="string">"create upload token success"</span>, &#123;token: token, key: path&#125;, options);</div><div class="line">          &#125;);</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">    .catch(error =&gt; &#123;</div><div class="line">      responseClient(res, <span class="number">406</span>, errorCode.ERROR_CODE_SERVER, error.message);</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>根据prevFirmwareId参数是否存在，判断是否是全包还是差分包，两者的路径不同，最后调用封装的qiniu api接口。<br>callbackBody是七牛的回调请求参数，etag用来保存文件的hash，用来Android客户端校验固件完整性用的。</p>
<p>qiniu_proxy.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> qiniu = <span class="built_in">require</span>(<span class="string">'qiniu'</span>);</div><div class="line"><span class="keyword">var</span> qiniuConfig = <span class="built_in">require</span>(<span class="string">'../config'</span>).qiniuConfig;</div><div class="line"></div><div class="line"><span class="keyword">const</span> accessKey = qiniuConfig.accessKey;</div><div class="line"><span class="keyword">const</span> secretKey = qiniuConfig.secretKey;</div><div class="line"></div><div class="line">qiniu.conf.ACCESS_KEY = accessKey;</div><div class="line">qiniu.conf.SECRET_KEY = secretKey;</div><div class="line"><span class="keyword">const</span> mac = <span class="keyword">new</span> qiniu.auth.digest.Mac(accessKey, secretKey);</div><div class="line"><span class="keyword">var</span> config = <span class="keyword">new</span> qiniu.conf.Config();</div><div class="line"><span class="keyword">var</span> bucketManager = <span class="keyword">new</span> qiniu.rs.BucketManager(mac, config);</div><div class="line"></div><div class="line">exports.createUptoken = (bucket, key, options) =&gt; &#123;</div><div class="line">  <span class="keyword">if</span>(!key) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"empty key"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>(!bucket) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"empty bucket"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> keyToOverwrite = key;</div><div class="line">  options = options || &#123;</div><div class="line">      scope: bucket + <span class="string">":"</span> + keyToOverwrite,</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> putPolicy = <span class="keyword">new</span> qiniu.rs.PutPolicy(options);</div><div class="line">  <span class="keyword">const</span> token = putPolicy.uploadToken(mac);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> token;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> getDomainByBucketName = (bucket) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> buckets = qiniuConfig.buckets;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> buckets) &#123;</div><div class="line">    <span class="keyword">if</span>(item.name === bucket) &#123;</div><div class="line">      <span class="keyword">return</span> item.domain;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.createPrivateDownloadUrl = (bucket, key) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> privateDomain = getDomainByBucketName(bucket);</div><div class="line">  <span class="keyword">if</span>(privateDomain) &#123;</div><div class="line">    <span class="keyword">const</span> deadline = <span class="built_in">parseInt</span>(<span class="built_in">Date</span>.now() / <span class="number">1000</span>) + <span class="number">3600</span>; <span class="comment">// 1小时过期</span></div><div class="line">    <span class="keyword">const</span> privateDownloadUrl = bucketManager.privateDownloadUrl(privateDomain, key, deadline);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> privateDownloadUrl;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.createPublicDownloadUrl = (bucket, key) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> publicDomain = getDomainByBucketName(bucket);</div><div class="line">  <span class="keyword">if</span>(publicDomain) &#123;</div><div class="line">    <span class="keyword">const</span> publicDownloadUrl = bucketManager.publicDownloadUrl(privateDomain, key);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> publicDownloadUrl;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="前端上传固件"><a href="#前端上传固件" class="headerlink" title="前端上传固件"></a>前端上传固件</h4><p>FileUploader.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">uploadFirmwarePackage(file, key, uptoken) &#123;</div><div class="line">    <span class="keyword">var</span> observer = &#123;</div><div class="line">    next: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;uploading: <span class="literal">true</span>, status:<span class="string">'active'</span>, percent: <span class="built_in">Math</span>.floor(res.total.percent)&#125;)</div><div class="line">    &#125;.bind(<span class="keyword">this</span>),</div><div class="line">    error: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"upload err"</span>, err);</div><div class="line">        <span class="keyword">this</span>.setState(&#123;uploading: <span class="literal">false</span>, status:<span class="string">'exception'</span>, token: <span class="literal">null</span>&#125;);</div><div class="line">    &#125;.bind(<span class="keyword">this</span>),</div><div class="line">    complete: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;key: <span class="literal">undefined</span>, uploading: <span class="literal">false</span>, status:<span class="string">'success'</span>, fileList: [], token: <span class="literal">null</span>&#125;);</div><div class="line">        <span class="keyword">this</span>.props.onUploadSuccess();</div><div class="line">    &#125;.bind(<span class="keyword">this</span>)</div><div class="line">    &#125;;</div><div class="line">    startUploadFirmwarePackage(file, key, uptoken, observer);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>FileUploader是个React组件，将上传状态放在组件内部，本来想放在saga里面统一管理，但是发现generate跟七牛上传observer回调函数搞不通。</p>
<p>qiniuApi.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">startUploadFirmwarePackage</span>(<span class="params">file, key, uptoken, observer</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> observable = qiniu.upload(file, key, uptoken, putExtra, config);</div><div class="line">  observable.subscribe(observer);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="服务器处理上传通知"><a href="#服务器处理上传通知" class="headerlink" title="服务器处理上传通知"></a>服务器处理上传通知</h4><p>七牛上传完之后，会给业务服务器发一个成功的请求，将固件信息在保存到数据库中。</p>
<p>controller/firmware_manager.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">exports.notifyPackageUploaded = (req, res, next) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> id = req.params.id;</div><div class="line">  <span class="keyword">const</span> &#123;</div><div class="line">    prevFirmwareCode,</div><div class="line">    hash,</div><div class="line">  &#125; = req.body;</div><div class="line">  </div><div class="line">  Firmware.findById(id).exec()</div><div class="line">    .then(item =&gt; &#123;</div><div class="line">      <span class="keyword">if</span>(!item) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`firmware id <span class="subst">$&#123;id&#125;</span> not found`</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">const</span> firmwareClass  = item.firmwareClass;</div><div class="line">      <span class="keyword">const</span> currentFirmwareCode = item.firmwareCode;</div><div class="line">      <span class="keyword">const</span> isFullPackage = !prevFirmwareCode;</div><div class="line">      <span class="keyword">if</span>(isFullPackage) &#123;</div><div class="line">        <span class="comment">//full package uploaded notification</span></div><div class="line">        item.fullPackagePath = &#123;</div><div class="line">          firmwarePath: <span class="string">`<span class="subst">$&#123;firmwareClass&#125;</span>/<span class="subst">$&#123;currentFirmwareCode&#125;</span>/<span class="subst">$&#123;currentFirmwareCode&#125;</span>.zip`</span>,</div><div class="line">          packageHash: hash,</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> item.save();</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//diff package uploaded notification</span></div><div class="line">        <span class="keyword">const</span> path = <span class="string">`<span class="subst">$&#123;firmwareClass&#125;</span>/<span class="subst">$&#123;currentFirmwareCode&#125;</span>/diff_<span class="subst">$&#123;currentFirmwareCode&#125;</span>_<span class="subst">$&#123;prevFirmwareCode&#125;</span>.zip`</span>;</div><div class="line">        <span class="keyword">const</span> package = item.diffPackagePath.find(p =&gt; &#123;</div><div class="line">          <span class="keyword">return</span> p.firmwareCode === prevFirmwareCode;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">if</span>(package) &#123;</div><div class="line">          <span class="comment">//override original path</span></div><div class="line">          package.firmwarePath = path;</div><div class="line">          package.packageHash = hash;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          item.diffPackagePath.push(&#123;firmwareCode: prevFirmwareCode, firmwarePath: path, packageHash: hash&#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> item.save();</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">    .then(item =&gt; &#123;</div><div class="line">        responseClient(res, <span class="number">200</span>, errorCode.ERROR_CODE_SUCCESS, <span class="string">"upload success"</span>);</div><div class="line">    &#125;) </div><div class="line">    .catch(error =&gt; &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"error"</span>, error.message);</div><div class="line">      responseClient(res, <span class="number">500</span>, errorCode.ERROR_CODE_SERVER, error.message);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="客户端下载流程"><a href="#客户端下载流程" class="headerlink" title="客户端下载流程"></a>客户端下载流程</h3><h4 id="获取下载凭证"><a href="#获取下载凭证" class="headerlink" title="获取下载凭证"></a>获取下载凭证</h4><p>routes/firmware_common.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">router.get(<span class="string">'/firmware'</span>, firmwareCommon.getDownloadUrl);</div></pre></td></tr></table></figure></p>
<p>controller/firmware_common.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">exports.getDownloadUrl = (req, res, next) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> &#123; </div><div class="line">    firmwareClass, </div><div class="line">    currentFirmwareCode,</div><div class="line">    targetFirmwareCode</div><div class="line">  &#125; = req.query;</div><div class="line">  <span class="comment">//console.log("getDownloadUrl", req.body);</span></div><div class="line">  <span class="keyword">if</span>(!firmwareClass || !targetFirmwareCode) &#123;</div><div class="line">    responseClient(res, <span class="number">404</span>, errorCode.ERROR_CODE_CLIENT, <span class="string">`invalid firmware class or target firmware code`</span>);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  Firmware.findOne(&#123;firmwareClass: firmwareClass, firmwareCode: targetFirmwareCode&#125;).exec()</div><div class="line">    .then(item =&gt; &#123;</div><div class="line">      <span class="keyword">if</span>(!item) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;targetFirmwareCode&#125;</span> for class <span class="subst">$&#123;firmwareClass&#125;</span> not found`</span>);</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      <span class="comment">//first try diff package download</span></div><div class="line">      <span class="keyword">let</span> diffPackage;</div><div class="line">      <span class="keyword">if</span>(currentFirmwareCode) &#123;</div><div class="line">        diffPackage = item.diffPackagePath.find(p =&gt; &#123;</div><div class="line">          <span class="keyword">if</span>(firmwareUtils.compareFirmwareCode(p.firmwareCode, currentFirmwareCode) === <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">//bingo! found it</span></div><div class="line">            <span class="keyword">return</span> p;</div><div class="line">          &#125;</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span>(diffPackage &amp;&amp; diffPackage.firmwarePath) &#123;</div><div class="line">        <span class="comment">//ok make a download url</span></div><div class="line">        <span class="keyword">const</span> url = qiniu.createPrivateDownloadUrl(qiniuConfig.bucketFirmware, diffPackage.firmwarePath);</div><div class="line">        <span class="comment">//console.log("diffpackage", "key", diffPackage.firmwarePath, "hash", diffPackage.packageHash, "url", url);</span></div><div class="line">        responseClient(res, <span class="number">200</span>, errorCode.ERROR_CODE_SUCCESS, <span class="string">"found url success"</span>, &#123;url: url, hash: diffPackage.packageHash&#125;);  </div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//no diff package, try full package download</span></div><div class="line">        <span class="keyword">if</span>(!item.fullPackagePath) &#123;</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;targetFirmwareCode&#125;</span> package for class <span class="subst">$&#123;firmwareClass&#125;</span> not found, may be has not uploaded`</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> key = item.fullPackagePath.firmwarePath;</div><div class="line">        <span class="keyword">let</span> hash = item.fullPackagePath.packageHash;</div><div class="line">        <span class="keyword">const</span> url = qiniu.createPrivateDownloadUrl(qiniuConfig.bucketFirmware, key);</div><div class="line">        <span class="comment">//console.log("fullpackage", "key", key, "hash", hash, "url", url);</span></div><div class="line">        responseClient(res, <span class="number">200</span>, errorCode.ERROR_CODE_SUCCESS, <span class="string">"found url success"</span>, &#123;url: url, hash: hash&#125;);</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">    .catch(error =&gt; &#123;</div><div class="line">      responseClient(res, <span class="number">404</span>, errorCode.ERROR_CODE_CLIENT, error.message);</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Android下载"><a href="#Android下载" class="headerlink" title="Android下载"></a>Android下载</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloadFirmware</span><span class="params">(<span class="keyword">final</span> String filePath, <span class="keyword">final</span> Subscriber&lt;Integer&gt; subscriber)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(downloadListener != <span class="keyword">null</span>) &#123;</div><div class="line">        downloadListener.onStartDownload();</div><div class="line">    &#125;</div><div class="line">    setUpdateState(UpdateStateManager.STATE_DOWNLOADING);</div><div class="line">    Map&lt;String, String&gt; params = OtaParamFactory.createDownloadFirmwareParam(mContext);</div><div class="line">    otaServerApi.getDownloadUtl(params)</div><div class="line">            .subscribeOn(Schedulers.io())</div><div class="line">            .map(<span class="keyword">new</span> Func1&lt;VersionDownloadUrl, String&gt;() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(VersionDownloadUrl url)</span> </span>&#123;</div><div class="line">                    mFirmwareManager.savePackageHash(url.getData().getHash());</div><div class="line">                    <span class="keyword">return</span> url.getData().getUrl();</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">            .flatMap(<span class="keyword">new</span> Func1&lt;String, rx.Observable&lt;ResponseBody&gt;&gt;() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="keyword">public</span> rx.<span class="function">Observable&lt;ResponseBody&gt; <span class="title">call</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">                    <span class="keyword">return</span> qiniuServiceApi.downloadFirmware(url);</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">              .subscribeOn(Schedulers.io())</div><div class="line">              .unsubscribeOn(Schedulers.io())</div><div class="line">              .map(<span class="keyword">new</span> Func1&lt;ResponseBody, String&gt;() &#123;</div><div class="line">                  <span class="meta">@Override</span></div><div class="line">                  <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(ResponseBody responseBody)</span> </span>&#123;</div><div class="line">                      saveToDisk(responseBody, filePath);</div><div class="line">                      <span class="keyword">return</span> mPackagePath;</div><div class="line">                  &#125;</div><div class="line">              &#125;)</div><div class="line">              .observeOn(Schedulers.io())</div><div class="line">              .map(<span class="keyword">new</span> Func1&lt;String, Integer&gt;() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">                    setUpdateState(UpdateStateManager.STATE_VERIFYING);</div><div class="line">                    <span class="keyword">int</span> result = checkPackageHash();</div><div class="line">                    <span class="keyword">if</span>(result != Util.OTAresult.CHECK_OK) &#123;</div><div class="line">                        <span class="keyword">return</span> result;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">return</span> checkUpdagePackage(path);</div><div class="line">                &#125;</div><div class="line">              &#125;)</div><div class="line">              .observeOn(AndroidSchedulers.mainThread())</div><div class="line">              .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">                  <span class="meta">@Override</span></div><div class="line">                  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">                      subscriber.onCompleted();</div><div class="line">                  &#125;</div><div class="line"></div><div class="line">                  <span class="meta">@Override</span></div><div class="line">                  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">                      setUpdateState(UpdateStateManager.STATE_FAIL);</div><div class="line">                      subscriber.onError(e);</div><div class="line">                  &#125;</div><div class="line"></div><div class="line">                  <span class="meta">@Override</span></div><div class="line">                  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer result)</span> </span>&#123;</div><div class="line">                      <span class="keyword">if</span>(result == Util.OTAresult.CHECK_OK) &#123;</div><div class="line">                          <span class="keyword">if</span>(downloadListener != <span class="keyword">null</span>) &#123;</div><div class="line">                              downloadListener.onFinishDownload();</div><div class="line">                          &#125;</div><div class="line">                          setUpdateState(UpdateStateManager.STATE_READY);</div><div class="line">                      &#125; <span class="keyword">else</span> &#123;</div><div class="line">                          <span class="keyword">if</span>(downloadListener != <span class="keyword">null</span>) &#123;</div><div class="line">                              downloadListener.onFail(<span class="string">"download fail code:"</span> + result);</div><div class="line">                          &#125;</div><div class="line">                          setUpdateState(UpdateStateManager.STATE_FAIL);</div><div class="line">                      &#125;</div><div class="line">                      subscriber.onNext(result);</div><div class="line">                  &#125;</div><div class="line">              &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="比较Hash值"><a href="#比较Hash值" class="headerlink" title="比较Hash值"></a>比较Hash值</h4><p>Etag是七牛Android SDK提供的工具类，用来计算hash，之前我们在业务服务器要求七牛回传etag值，在这里比较两者是否相等。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">private Integer checkPackageHash() &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="built_in">String</span> tag = Etag.file(mPackagePath);</div><div class="line">        <span class="built_in">String</span> originTag = mFirmwareManager.getPackageHash();</div><div class="line">        <span class="keyword">if</span>(tag != <span class="literal">null</span> &amp;&amp; tag.equals(originTag)) &#123;</div><div class="line">            <span class="keyword">return</span> Util.OTAresult.CHECK_OK;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Util.OTAresult.ERROR_OTA_FILE;</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> Util.OTAresult.ERROR_OTA_FILE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上所有的源代码都可以在<a href="https://github.com/yinlijun2004/android_ota_system" target="_blank" rel="external">https://github.com/yinlijun2004/android_ota_system</a>中找到。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们的OTA的固件存放在七牛，需要用到他们的一些SDK。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.qiniu.com/kodo/sdk/1289/nodejs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nodejs sdk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.qiniu.com/kodo/sdk/1283/javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;js sdk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.qiniu.com/kodo/sdk/1236/android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android sdk&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;上传流程&quot;&gt;&lt;a href=&quot;#上传流程&quot; class=&quot;headerlink&quot; title=&quot;上传流程&quot;&gt;&lt;/a&gt;上传流程&lt;/h3&gt;
    
    </summary>
    
      <category term="从零搭建Android OTA系统" scheme="http://www.yinlijun.com/categories/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAAndroid-OTA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="nodejs" scheme="http://www.yinlijun.com/tags/nodejs/"/>
    
      <category term="express" scheme="http://www.yinlijun.com/tags/express/"/>
    
      <category term="react" scheme="http://www.yinlijun.com/tags/react/"/>
    
      <category term="antd" scheme="http://www.yinlijun.com/tags/antd/"/>
    
  </entry>
  
  <entry>
    <title>七牛存储空间别名创建</title>
    <link href="http://www.yinlijun.com/2018/04/17/qiniu-create-bucket-cname/"/>
    <id>http://www.yinlijun.com/2018/04/17/qiniu-create-bucket-cname/</id>
    <published>2018-04-17T12:36:18.000Z</published>
    <updated>2018-04-19T01:23:33.558Z</updated>
    
    <content type="html"><![CDATA[<p>七牛的存储空间会提供一个默认的域名，用来访问里面的资源，但是这个域名使用是受限的，七牛会有如下提示：</p>
<blockquote>
<p>测试域名</p>
<p>此类测试域名，限总流量，限单 IP 访问频率，限速，仅供测试使用，不能用于自定义域名的 CNAME 相关文档</p>
<p>p71uhtys2.bkt.clouddn.com</p>
</blockquote>
<p>我们可以创建一个融合CDN加速域名指向这个空间。</p>
<a id="more"></a>
<p>步骤如下：</p>
<h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>在存储空间详情页面，点击立即绑定一个域名。<br><img src="https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/5e9d840cd7942567816fd657772bfdbe28cd8d836eb51e630c0f3d8190e17406cff3244e7b2c7241768836c0ea7bc52f?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417204257.png&amp;size=1024" alt=""></p>
<p>进来之后，填写你要绑定的域名，和对应的存储空间。<br><img src="https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/e17d5d729c824b0da89d182e7cc930735ece4e9ce6db44b5f81b268c715670598e07cf95b1f5ecb22f3e6052bdadd6f5?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417204544.png&amp;size=1024" alt=""><br>注意这个域名是要经过备案的，备案的经过我之前的文章<a href="/2017/12/18/hexo-to-ali-ecs/" title="部署HEXO博客到阿里云ECS">部署HEXO博客到阿里云ECS</a>有介绍过: 。</p>
<p>其他的地方按需要填写，填写完之后拉到下面点创建按钮。</p>
<p>然后会提示创建成功的消息。<br><img src="https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/eaecffc8d117ed56fa2bf60a3e34017b538c25b556529d1f4d154609c76f740b5a6862e98a36b09feeb32e6e1c387ca8?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417204616.png&amp;size=1024" alt=""></p>
<p>然后再回去看，会看到CDN的状态变为等待CNAME。<br><img src="https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/937e05f8155fb32f3193a7ad8ec7e131ba2637c5cebf6a3b6aeb2b2e995c5b461423102874ecb9e3cfe15957f30f20c8?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417205340.png&amp;size=1024" alt=""></p>
<h3 id="添加域名解析"><a href="#添加域名解析" class="headerlink" title="添加域名解析"></a>添加域名解析</h3><p>因为我的域名是在阿里云申请的，需要到阿里云去填写域名解析信息。</p>
<p>在云解析DNS界面，添加一条解析规则。<br><img src="https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/2a13b25abc02dc6fe2ea0887557e72cf51918e4780c987217f2ece9dbfb83f3a6d2af12eb16e439c6e450601ade40159?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417205140.png&amp;size=1024" alt=""></p>
<p>记录值就填刚才的CNAME，主机记录就填二级域名。</p>
<p>点击确认，等待十分钟，七牛那边的CDN状态就会变为成功。<br><img src="https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/7c7094162ed066f451bfc9d7e12764a95a29ecd5e4b6ad3989008dacbc236df7f7394167c529aaf8b73bf01d326cd219?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180417205804.png&amp;size=1024" alt=""></p>
<p>或者windows下可以用命令行查询解析是否成功。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ nslookup -qt=mx qiniu.yinlijun.com</div><div class="line">▒▒Ȩ▒▒Ӧ▒▒:</div><div class="line">▒▒▒▒▒▒:  UnKnown</div><div class="line">Address:  192.168.1.1</div><div class="line"></div><div class="line">qiniu.yinlijun.com      canonical name = qiniu.yinlijun.com.qiniudns.com</div><div class="line">qiniu.yinlijun.com.qiniudns.com canonical name = largeqiniu.b0.aicdn.com</div><div class="line">largeqiniu.b0.aicdn.com canonical name = nm.aicdn.com</div><div class="line">nm.aicdn.com    canonical name = nm.ctn.aicdn.com</div><div class="line"></div><div class="line">aicdn.com</div><div class="line">        primary name server = ns1.ialloc.com</div><div class="line">        responsible mail addr = wtzhu182.163.com</div><div class="line">        serial  = 2015102101</div><div class="line">        refresh = 3600 (1 hour)</div><div class="line">        retry   = 180 (3 mins)</div><div class="line">        expire  = 1209600 (14 days)</div><div class="line">        default TTL = 10800 (3 hours)</div></pre></td></tr></table></figure></p>
<p>这样的话，可以在代码里面，用你自定义的域名，代替原先七牛提供的测试域名了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;七牛的存储空间会提供一个默认的域名，用来访问里面的资源，但是这个域名使用是受限的，七牛会有如下提示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;测试域名&lt;/p&gt;
&lt;p&gt;此类测试域名，限总流量，限单 IP 访问频率，限速，仅供测试使用，不能用于自定义域名的 CNAME 相关文档&lt;/p&gt;
&lt;p&gt;p71uhtys2.bkt.clouddn.com&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们可以创建一个融合CDN加速域名指向这个空间。&lt;/p&gt;
    
    </summary>
    
    
      <category term="qiniu" scheme="http://www.yinlijun.com/tags/qiniu/"/>
    
      <category term="aliyun" scheme="http://www.yinlijun.com/tags/aliyun/"/>
    
      <category term="ecs" scheme="http://www.yinlijun.com/tags/ecs/"/>
    
  </entry>
  
  <entry>
    <title>OTA用户使用指南</title>
    <link href="http://www.yinlijun.com/2018/04/10/ota-user-manual/"/>
    <id>http://www.yinlijun.com/2018/04/10/ota-user-manual/</id>
    <published>2018-04-10T02:14:21.000Z</published>
    <updated>2018-04-18T07:26:12.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><h3 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h3><p>系统分为四类用户，分别是</p>
<ul>
<li>系统管理员<ul>
<li>批准用户注册申请</li>
<li>删除用户</li>
<li>重置用户密码</li>
<li>管理测试SN</li>
<li>管理Android版本</li>
<li>管理版本类别</li>
</ul>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>软件工程师</p>
<ul>
<li>新建版本</li>
<li>修改版本</li>
<li>上传固件包</li>
<li>发布Alpha测试</li>
</ul>
</li>
<li><p>测试工程师</p>
<ul>
<li>撤回Alpha测试</li>
<li>发布Beta测试</li>
</ul>
</li>
<li><p>运营工程师</p>
<ul>
<li>撤回Beta测试</li>
<li>发布Release版本</li>
</ul>
</li>
</ul>
<h4 id="系统管理员权限"><a href="#系统管理员权限" class="headerlink" title="系统管理员权限"></a>系统管理员权限</h4><ul>
<li>批准用户注册申请<br>用户在OTA主界面注册成为OTA系统用户，注册时需要从以下列表选择一种身份：<ul>
<li>软件工程师</li>
<li>测试工程师</li>
<li>运营工程师</li>
</ul>
</li>
</ul>
<p><img src="https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/be617eb7472b662e17af2c693abf6022859fe84604c503b38480a183386139a99b110736f96a163c855f3285fc2760a6?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=1523346231%281%29.png&amp;size=1024" alt=""></p>
<p>管理员登录之后，在用户管理页面，可以批准或者删除用户的注册申请。<br><img src="https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/27099809ab4a1b5194e22e59f458d34c927d7cc627fae348c9d3f1fe2b342abce0968f6c4c740a78cc51cece3d8a1189?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180410154736.png&amp;size=1024" alt=""></p>
<ul>
<li><p>删除用户 用户离职之后，管理员可以选择删除用户。</p>
</li>
<li><p>重置用户密码 用户忘记密码之后，管理员可以帮助用户重置用户密码。</p>
</li>
<li><p>管理测试SN 管理员可以添加SN号，用来标识对应的版本类别，如果勾选了Alpha，则可以进行Alpha版本状态下的版本升级；如果勾选了Beta，则可以进行Beta版本状态下的版本升级。</p>
</li>
<li><p>管理Android版本 管理员可以添加/删除Andriod版本，软件工程师可以从中选择一个版本。</p>
</li>
<li><p>管理版本类别 管理员可以添加/删除版本类别，一个版本类别标识一类终端产品，OTA会选择同一版本类别的更高的版本进行升级。</p>
</li>
</ul>
<p><img src="https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/521e0ddaabd7cd53cdc0f5e1b4ff3864d74919bbe73f5682fa054c57b734ff14d81b3e1b0f2353339b9cf7f0c9d43f1b?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180410162612.png&amp;size=1024" alt=""></p>
<h4 id="软件工程师权限"><a href="#软件工程师权限" class="headerlink" title="软件工程师权限"></a>软件工程师权限</h4><ul>
<li><p>新建版本<br>软件工程师将版本编译出来之后，新建一个版本，需要填写如下信息：</p>
<ul>
<li>版本类别</li>
<li>版本号</li>
<li>版本描述</li>
<li>Android版本</li>
<li>更新记录</li>
</ul>
</li>
</ul>
<p><img src="https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/b3331a73196a0d3d630155832b3bea3249e262bc3fccb5736bd39ce05a86181f065e320f8f140000cc6698dac00c3f73?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180410164617.png&amp;size=1024" alt=""></p>
<p>创建之后，跳转到版本列表界面<br><img src="https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/8f8b4b1d6e83a323fcc830f362fd2f2e3b50aefe50a1c1ffd0c80b6367d0899df72c2ee4732bef8420f2cbd240d3e09f?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180410164917.png&amp;size=1024" alt=""></p>
<p>点击包管理，进入升级包上传界面<br><img src="https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/45c9173a9a48fed2a8a1fe11c36abad36691e158957ca97f01a4acbc005144b515c043cb3069677c5f8e9c6616a22aaa?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20180410165043.png&amp;size=1024" alt=""></p>
<p>上传完完整包和固件包。</p>
<ul>
<li><p>修改版本<br>软件工程师可以在新建状态下更改版本信息，但是不能修改版本类别和版本号。</p>
</li>
<li><p>发布Alpha测试<br>上传完固件包之后，回到版本列表界面，发布alpha测试。如果某台终端被允许Alpha测试，则会收到该版本的更新提示。</p>
</li>
</ul>
<h4 id="测试工程师权限"><a href="#测试工程师权限" class="headerlink" title="测试工程师权限"></a>测试工程师权限</h4><ul>
<li><p>撤回Alpha测试<br>若测试工程师在测试过程中发现问题，可以撤回到新建状态，要求软件工程师重新上传固件版本。</p>
</li>
<li><p>发布Beta测试<br>若测试工程师在Alpha测试过程中没有发现问题，则发布Beta测试。</p>
</li>
</ul>
<h4 id="运营工程师权限"><a href="#运营工程师权限" class="headerlink" title="运营工程师权限"></a>运营工程师权限</h4><ul>
<li><p>撤回Beta测试<br>如果测试过程中发现问题，可以由运营工程师撤回到Alpha测试状态，由测试工程师确认。</p>
</li>
<li><p>发布Release版本<br>如果Beta测试过程中发现问题，可以由运营工程师发布Release状态。</p>
</li>
</ul>
<h3 id="版本状态说明"><a href="#版本状态说明" class="headerlink" title="版本状态说明"></a>版本状态说明</h3><p>版本的状态分为四个：</p>
<ul>
<li>新建状态 该状态下，可以修改版本信息，上传固件包。</li>
<li>Alpha测试状态 该状态下，支持Alpha测试的终端将会收到版本提示。</li>
<li>Beta测试状态 该状态下，支持Beta测试的终端将会收到版本提示。Beta测试状态与Alpha测试状态类似，Beta测试需要更多的终端设备验证。</li>
<li>Release状态 该状态下，所有终端将会收到版本提示。</li>
</ul>
<p>版本状态迁移：</p>
<p><img src="https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/f8279f93bdf2d68e2d599d0498b747cfe83430bbd7161ce4a39268a1156af75ff42effdec511f08e0dc4d6489e58dbbe?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=firmware_process.png&amp;size=1024" alt="版本状态迁移："></p>
<h3 id="异常操作"><a href="#异常操作" class="headerlink" title="异常操作"></a>异常操作</h3><ul>
<li><p>如果某台终端，升级了某个Alpha版本或Beta版本，但是该版本最后被撤回，没有发布到Release状态，如何升级到后续版本？</p>
<p>  此时不能进行差分包升级了，需要进行OTA全包升级。</p>
</li>
</ul>
<h3 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h3><ul>
<li>上传固件包时，完整包是必选的。</li>
<li>与历史版本的差分包是可选的，然后终端有限选择差分包进行OTA升级，如果没有查询到差分包，则下载完整包。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;用户管理&quot;&gt;&lt;a href=&quot;#用户管理&quot; class=&quot;headerlink&quot; title=&quot;用户管理&quot;&gt;&lt;/a&gt;用户管理&lt;/h2&gt;&lt;h3 id=&quot;用户权限&quot;&gt;&lt;a href=&quot;#用户权限&quot; class=&quot;headerlink&quot; title=&quot;用户权限&quot;&gt;&lt;/a&gt;用户权限&lt;/h3&gt;&lt;p&gt;系统分为四类用户，分别是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统管理员&lt;ul&gt;
&lt;li&gt;批准用户注册申请&lt;/li&gt;
&lt;li&gt;删除用户&lt;/li&gt;
&lt;li&gt;重置用户密码&lt;/li&gt;
&lt;li&gt;管理测试SN&lt;/li&gt;
&lt;li&gt;管理Android版本&lt;/li&gt;
&lt;li&gt;管理版本类别&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从零搭建Android OTA系统——用户注册登录前端界面实现</title>
    <link href="http://www.yinlijun.com/2018/04/09/my-ota-tutorial-2/"/>
    <id>http://www.yinlijun.com/2018/04/09/my-ota-tutorial-2/</id>
    <published>2018-04-09T09:17:31.000Z</published>
    <updated>2018-04-18T07:27:02.401Z</updated>
    
    <content type="html"><![CDATA[<p>OTA的前端界面，打算用react实现，采用的库有</p>
<ul>
<li><a href="https://ant.design/index-cn" target="_blank" rel="external">antd</a> 目前比较流行UI组件库。</li>
<li><a href="https://www.npmjs.com/package/axios" target="_blank" rel="external">axios</a> 网络请求库。</li>
<li><a href="https://www.npmjs.com/package/redux-saga" target="_blank" rel="external">redux-saga</a> 一个处理异步流处理的库。</li>
</ul>
<p>目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">src</div><div class="line"> - components</div><div class="line"> - containers</div><div class="line"> - reducers</div><div class="line"> - sagas</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>components用来存放无状态组件</p>
<p>containers用来存放状态组件</p>
<p>reducers用来存放reducer文件</p>
<p>sagas用来存放redux-saga文件</p>
<h4 id="component和container的区别"><a href="#component和container的区别" class="headerlink" title="component和container的区别"></a>component和container的区别</h4><p>我的理解，component是无状态、可复用的，只负责渲染的组件，它的输入是Props，输出是render的结果。</p>
<p>container负责和redux连接，从store里面获取数据。</p>
<h4 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h4><p>登录和注册组件，可以作为一个component，用一个Tabs组件包装。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">        <span class="keyword">this</span>.shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate.bind(<span class="keyword">this</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">const</span> &#123; login, register &#125; = <span class="keyword">this</span>.props;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;Tabs defaultActiveKey="1" tabBarStyle=&#123;&#123; textAlign: 'center' &#125;&#125; className=&#123; style.container &#125;&gt;</div><div class="line">                &lt;TabPane tab="登录" key="1"&gt;</div><div class="line">                    &lt;LoginForm login=&#123; login &#125;/&gt;</div><div class="line">                &lt;/TabPane&gt;</div><div class="line">                &lt;TabPane tab="注册" key="2"&gt;</div><div class="line">                    &lt;RegisterForm register=&#123; register &#125;/&gt;</div><div class="line">                &lt;/TabPane&gt;</div><div class="line">            &lt;/Tabs&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> actions = &#123;</div><div class="line">    login: <span class="function"><span class="keyword">function</span> (<span class="params">username, password</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            type: actionsTypes.USER_LOGIN,</div><div class="line">            username,</div><div class="line">            password</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    logout: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            type: actionsTypes.USER_LOGOUT,</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    register: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            type: actionsTypes.USER_REGISTER,</div><div class="line">            data</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>data是注册表单的内容</p>
<h4 id="saga"><a href="#saga" class="headerlink" title="saga"></a>saga</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span>* <span class="title">login</span>(<span class="params">username, password</span>) </span>&#123;</div><div class="line">    <span class="keyword">yield</span> put(&#123;type: IndexActionTypes.FETCH_START&#125;);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">yield</span> call(post, <span class="string">'/user/login'</span>, &#123;username, password&#125;)</div><div class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"login failed"</span>, error.message);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">yield</span> put(&#123;type: IndexActionTypes.FETCH_END&#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span>* <span class="title">loginFlow</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">        <span class="keyword">let</span> request = <span class="keyword">yield</span> take(IndexActionTypes.USER_LOGIN);</div><div class="line">        <span class="keyword">let</span> response = <span class="keyword">yield</span> call(login, request.username, request.password);</div><div class="line">        <span class="keyword">if</span>(response &amp;&amp; response.code === <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">yield</span> put(&#123;type:IndexActionTypes.SET_MESSAGE,msgContent:<span class="string">'登录成功!'</span>,msgType:<span class="number">1</span>&#125;);</div><div class="line">            <span class="keyword">yield</span> put(&#123;type:IndexActionTypes.RESPONSE_USER_INFO,data:response.data&#125;)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">yield</span> put(&#123;type:IndexActionTypes.SET_MESSAGE,msgContent: (response &amp;&amp; response.message) || <span class="string">'登录失败'</span>,msgType:<span class="number">0</span>&#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span>* <span class="title">logout</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">yield</span> put(&#123;type: IndexActionTypes.FETCH_START&#125;);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">yield</span> call(get, <span class="string">'/user/logout'</span>)</div><div class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"logout failed"</span>, error.message);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">yield</span> put(&#123;type: IndexActionTypes.FETCH_END&#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span>* <span class="title">logoutFlow</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</div><div class="line">        <span class="keyword">let</span> request = <span class="keyword">yield</span> take(IndexActionTypes.USER_LOGOUT);</div><div class="line">        <span class="keyword">let</span> response = <span class="keyword">yield</span> call(logout);</div><div class="line">        <span class="keyword">yield</span> put(&#123;type:IndexActionTypes.SET_MESSAGE,msgContent:<span class="string">'已退出当前账号'</span>,msgType:<span class="number">1</span>&#125;);</div><div class="line">        <span class="keyword">yield</span> put(&#123;type:IndexActionTypes.RESPONSE_USER_INFO,data:&#123;&#125;&#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span>* <span class="title">register</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">yield</span> put(&#123;type:IndexActionTypes.FETCH_START&#125;);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">yield</span> call(puter, <span class="string">'/user'</span>, data)</div><div class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</div><div class="line">        <span class="keyword">yield</span> put(&#123;type:IndexActionTypes.SET_MESSAGE,msgContent:<span class="string">'注册失败'</span>,msgType:<span class="number">0</span>&#125;);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">yield</span> put(&#123;type: IndexActionTypes.FETCH_END&#125;); </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span>* <span class="title">registerFlow</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</div><div class="line">        <span class="keyword">let</span> request = <span class="keyword">yield</span> take(IndexActionTypes.USER_REGISTER);</div><div class="line">        <span class="keyword">let</span> response = <span class="keyword">yield</span> call(register, request.data);</div><div class="line">        <span class="keyword">if</span>(response &amp;&amp; response.code === <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">yield</span> put(&#123;type:IndexActionTypes.SET_MESSAGE,msgContent:<span class="string">'注册成功，请联系管理员批准!'</span>,msgType:<span class="number">1</span>&#125;);</div><div class="line">            <span class="keyword">yield</span> put(&#123;type:IndexActionTypes.RESPONSE_USER_INFO,data:response.data&#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h4><p>为了和saga的操作put分开，axios的put方法被我封装成了puter。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> config = &#123;</div><div class="line">    baseURL: <span class="string">'/api'</span>,</div><div class="line">    transformRequest: [</div><div class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">            <span class="keyword">let</span> ret = <span class="string">''</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> it <span class="keyword">in</span> data) &#123;</div><div class="line">                ret += <span class="built_in">encodeURIComponent</span>(it) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(data[it]) + <span class="string">'&amp;'</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> ret</div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">    transformResponse: [</div><div class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> data</div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">    headers: &#123;</div><div class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded;charset=UTF-8'</span>,</div><div class="line">    &#125;,</div><div class="line">    timeout: <span class="number">10000</span>,</div><div class="line">    responseType: <span class="string">'json'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">    <span class="comment">//相应拦截器</span></div><div class="line">    <span class="keyword">return</span> res.data;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url, params</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"url"</span>, url);</div><div class="line">    config.params = params;</div><div class="line">    <span class="keyword">return</span> axios.get(url, config)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">url, data</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"url"</span>, url, <span class="string">"data"</span>, data);</div><div class="line">    <span class="keyword">if</span>(config.params) &#123;</div><div class="line">        <span class="keyword">delete</span> config.params</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> axios.post(url, data, config)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">puter</span>(<span class="params">url, data</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"url"</span>, url, <span class="string">"data"</span>, data);</div><div class="line">    <span class="keyword">if</span>(config.params) &#123;</div><div class="line">        <span class="keyword">delete</span> config.params</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> axios.put(url, data, config);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">deleter</span>(<span class="params">url, param</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"url"</span>, url, <span class="string">"param"</span>, param);</div><div class="line">    config.params = param;</div><div class="line">    <span class="keyword">return</span> axios.delete(url, config);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上所有的源代码都可以在<a href="https://github.com/yinlijun2004/android_ota_system" target="_blank" rel="external">https://github.com/yinlijun2004/android_ota_system</a>中找到。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OTA的前端界面，打算用react实现，采用的库有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ant.design/index-cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;antd&lt;/a&gt; 目前比较流行UI组件库。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/axios&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;axios&lt;/a&gt; 网络请求库。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/redux-saga&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;redux-saga&lt;/a&gt; 一个处理异步流处理的库。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目录结构：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;src&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; - components&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; - containers&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; - reducers&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; - sagas&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="从零搭建Android OTA系统" scheme="http://www.yinlijun.com/categories/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAAndroid-OTA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="nodejs" scheme="http://www.yinlijun.com/tags/nodejs/"/>
    
      <category term="express" scheme="http://www.yinlijun.com/tags/express/"/>
    
      <category term="react" scheme="http://www.yinlijun.com/tags/react/"/>
    
      <category term="antd" scheme="http://www.yinlijun.com/tags/antd/"/>
    
  </entry>
  
  <entry>
    <title>Android 5.0中的布局文件onClick回调报错</title>
    <link href="http://www.yinlijun.com/2018/03/29/android-theme-onclick/"/>
    <id>http://www.yinlijun.com/2018/03/29/android-theme-onclick/</id>
    <published>2018-03-29T12:16:55.000Z</published>
    <updated>2018-04-18T07:28:14.718Z</updated>
    
    <content type="html"><![CDATA[<p>监听控件的onClick事件有两种方法：</p>
<ul>
<li>方法1<br>调用控件的setOnClickListener设置监听回调。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Button button = (Button) findViewById(R.id.button);</div><div class="line">button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>方法2<br>将回调方法名赋值给布局文件中的onClick属性，然后在Activity中实现该方法。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"Button"</span></div><div class="line">    <span class="attr">android:onClick</span>=<span class="string">"onClickButton"</span>/&gt;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClickButton</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是方法2在5.0上有个坑，如果当前控件的layout的中xml中写了theme属性，那么就会报找不到该方法的错误。<br>如<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span></div><div class="line">    <span class="attr">android:onClick</span>=<span class="string">"onClickButton"</span></div><div class="line">    <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.MenuDefaultItem"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"text"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这是一个LinearLayout嵌套一个TextView，将onClick回调写在LinearLayout里，然后加上一个theme属性，这时点击LinearLayout就会报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">03-30 08:48:24.060 29147-29147/trendit.com.posusageintro E/AndroidRuntime: FATAL EXCEPTION: main</div><div class="line">                                                                           Process: trendit.com.posusageintro, PID: 29147</div><div class="line">                                                                           java.lang.IllegalStateException: Could not find a method onClickButton(View) in the activity class android.view.ContextThemeWrapper for onClick handler on view class android.widget.LinearLayout</div><div class="line">                                                                               at android.view.View$1.onClick(View.java:4008)</div><div class="line">                                                                               at android.view.View.performClick(View.java:4781)</div><div class="line">                                                                               at android.view.View$PerformClick.run(View.java:19874)</div><div class="line">                                                                               at android.os.Handler.handleCallback(Handler.java:739)</div><div class="line">                                                                               at android.os.Handler.dispatchMessage(Handler.java:95)</div><div class="line">                                                                               at android.os.Looper.loop(Looper.java:135)</div><div class="line">                                                                               at android.app.ActivityThread.main(ActivityThread.java:5254)</div><div class="line">                                                                               at java.lang.reflect.Method.invoke(Native Method)</div><div class="line">                                                                               at java.lang.reflect.Method.invoke(Method.java:372)</div><div class="line">                                                                               at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:902)</div><div class="line">                                                                               at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:697)</div><div class="line">                                                                            Caused by: java.lang.NoSuchMethodException: onClickButton [class android.view.View]</div><div class="line">                                                                               at java.lang.Class.getMethod(Class.java:664)</div><div class="line">                                                                               at java.lang.Class.getMethod(Class.java:643)</div><div class="line">                                                                               at android.view.View$1.onClick(View.java:4001)</div><div class="line">                                                                               at android.view.View.performClick(View.java:4781) </div><div class="line">                                                                               at android.view.View$PerformClick.run(View.java:19874) </div><div class="line">                                                                               at android.os.Handler.handleCallback(Handler.java:739) </div><div class="line">                                                                               at android.os.Handler.dispatchMessage(Handler.java:95) </div><div class="line">                                                                               at android.os.Looper.loop(Looper.java:135) </div><div class="line">                                                                               at android.app.ActivityThread.main(ActivityThread.java:5254) </div><div class="line">                                                                               at java.lang.reflect.Method.invoke(Native Method) </div><div class="line">                                                                               at java.lang.reflect.Method.invoke(Method.java:372) </div><div class="line">                                                                               at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:902) </div><div class="line">                                                                               at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:697)</div></pre></td></tr></table></figure></p>
<p><a href="https://stackoverflow.com/questions/27531381/android-5-and-onclick-in-xml-layout/28345359#28345359" target="_blank" rel="external">StackOverflow</a>上有一段解释，在Android 5.0上的layout布局上，如果应用android:theme属性，就会报这个错误。较老的版本不会有这个问题。解决方法就是要么使用上面的方法1，要么将android:theme应用到application上。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">application</span> </span></div><div class="line">         <span class="attr">...</span></div><div class="line">         <span class="attr">android:theme</span>=<span class="string">"@android:style/Theme.Holo.Light"</span></div><div class="line">         <span class="attr">...</span>  &gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;监听控件的onClick事件有两种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法1&lt;br&gt;调用控件的setOnClickListener设置监听回调。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Button button = (Button) findViewById(R.id.button);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;button.setOnClickListener(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; View.OnClickListener() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(View view)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://www.yinlijun.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Windows下Ngrok工具的使用</title>
    <link href="http://www.yinlijun.com/2018/03/24/ngrok-intro/"/>
    <id>http://www.yinlijun.com/2018/03/24/ngrok-intro/</id>
    <published>2018-03-24T02:09:26.000Z</published>
    <updated>2018-04-18T07:29:24.878Z</updated>
    
    <content type="html"><![CDATA[<p>最近在本机调试七牛云上传，碰到一个问题。七牛云存储完成上传操作后，会有一个回调操作，告诉服务器上传结果。</p>
<blockquote>
<p><a href="https://developer.qiniu.com/kodo/sdk/1289/nodejs" target="_blank" rel="external">https://developer.qiniu.com/kodo/sdk/1289/nodejs</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">  scope: bucket,</div><div class="line">  callbackUrl: <span class="string">'http://api.example.com/qiniu/upload/callback'</span>,</div><div class="line">  callbackBody: <span class="string">'key=$(key)&amp;hash=$(etag)&amp;bucket=$(bucket)&amp;fsize=$(fsize)&amp;name=$(x:name)'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> putPolicy = <span class="keyword">new</span> qiniu.rs.PutPolicy(options);</div><div class="line"><span class="keyword">var</span> uploadToken=putPolicy.uploadToken(mac);</div></pre></td></tr></table></figure></p>
</blockquote>
<a id="more"></a>
<p>上面的<b><a href="http://api.example.com" target="_blank" rel="external">http://api.example.com</a></b>就是回调的url，在开发模式下肯定是指向本机的，而不是生产服务器。</p>
<p>因此需要一个内网穿透的工具，在网上找到<a href="https://www.ngrok.cc" target="_blank" rel="external">Ngrok</a>。</p>
<p>Ngrok会生成一个指向你本机服务的隧道，隧道信息，包含一个三级域名（就是上面的回调url），本地端口（就是你的服务运行的端口），协议类型等信息。<br><img src="https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/56d49defca68f6178c2aadc601ea157c78729113241118fa8f5471199a8e707a5a5ee24a8e08fb8e264665971dbf42db?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=QQ%E5%9B%BE%E7%89%8720180324102303.png&amp;size=1024" alt=""></p>
<p>隧道有免费的，也有付费的，但免费的貌似不稳定。</p>
<p>然后在server端可以用环境变量区分回调的url。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">qiniuCallbackDomain: process.env.NODE_ENV === <span class="string">"production"</span> ? <span class="string">'http://test.xxx.com'</span> :<span class="string">'http://prod.xx.com'</span>,</div></pre></td></tr></table></figure></p>
<p>Ngrok支持大部分的平台，我的是windows 64位，下载完<a href="https://www.ngrok.cc/download.html" target="_blank" rel="external">客户端</a>，解压，运行<b>Sunny-Ngrok启动工具.bat</b>，填入隧道ID，即可实现外网访问。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在本机调试七牛云上传，碰到一个问题。七牛云存储完成上传操作后，会有一个回调操作，告诉服务器上传结果。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.qiniu.com/kodo/sdk/1289/nodejs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.qiniu.com/kodo/sdk/1289/nodejs&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; options = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  scope: bucket,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  callbackUrl: &lt;span class=&quot;string&quot;&gt;&#39;http://api.example.com/qiniu/upload/callback&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  callbackBody: &lt;span class=&quot;string&quot;&gt;&#39;key=$(key)&amp;amp;hash=$(etag)&amp;amp;bucket=$(bucket)&amp;amp;fsize=$(fsize)&amp;amp;name=$(x:name)&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; putPolicy = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; qiniu.rs.PutPolicy(options);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; uploadToken=putPolicy.uploadToken(mac);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="ngrok" scheme="http://www.yinlijun.com/tags/ngrok/"/>
    
      <category term="nodjs" scheme="http://www.yinlijun.com/tags/nodjs/"/>
    
  </entry>
  
  <entry>
    <title>从零搭建Android OTA系统——部署到阿里云ECS</title>
    <link href="http://www.yinlijun.com/2018/03/20/my-ota-tutorial-7/"/>
    <id>http://www.yinlijun.com/2018/03/20/my-ota-tutorial-7/</id>
    <published>2018-03-20T11:55:31.000Z</published>
    <updated>2018-04-18T07:27:09.077Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍如何将整个ota系统部署到阿里云ECS上去，没有看过正规军是如何部署的，以下只是我的个人经验。</p>
<h3 id="创建远程git目录"><a href="#创建远程git目录" class="headerlink" title="创建远程git目录"></a>创建远程git目录</h3><p>登陆阿里云ECS，创建一个bare仓库，存放ota_be代码。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init --bare ~/project/ota_server.git</div></pre></td></tr></table></figure></p>
<p>创建post-receive文件，捕获git推送操作，克隆一份到服务器本地，作为运行仓库。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch ~/project/ota_server.git/hooks/post-receive</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>填入如下内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/bin/bash -l</span></div><div class="line"></div><div class="line">GIT_REPO=/home/yinlijun/project/ota_server.git</div><div class="line">TMP_GIT_CLONE=/home/yinlijun/project/ota_server</div><div class="line"></div><div class="line">rm -rf <span class="variable">$&#123;TMP_GIT_CLONE&#125;</span></div><div class="line">git <span class="built_in">clone</span> <span class="variable">$&#123;GIT_REPO&#125;</span> <span class="variable">$&#123;TMP_GIT_CLONE&#125;</span></div></pre></td></tr></table></figure></p>
<h4 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h4><p>在本地ota目录下，创建.gitignore文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> ota_be_deploy &gt;&gt; .gitignore</div></pre></td></tr></table></figure></p>
<p>这个文件是忽略我们要临时发布目录用的。</p>
<h4 id="创建部署脚本"><a href="#创建部署脚本" class="headerlink" title="创建部署脚本"></a>创建部署脚本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch deploy.sh</div></pre></td></tr></table></figure>
<p>deploy.sh脚本内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 构建前端代码</span></div><div class="line"><span class="built_in">cd</span> ota_fe;</div><div class="line">yarn build;</div><div class="line"><span class="built_in">cd</span> ../</div><div class="line"><span class="built_in">echo</span> <span class="string">"ota_fe build done..."</span></div><div class="line"></div><div class="line"><span class="comment"># 拷贝前端构建结果到后端代码</span></div><div class="line">cp ota_fe/build/* ota_be/public/ -rf </div><div class="line"><span class="built_in">echo</span> <span class="string">"copy ota_fe build result done..."</span></div><div class="line"></div><div class="line"><span class="comment"># 从部署服务器clone一份代码</span></div><div class="line"><span class="keyword">if</span> [ ! <span class="_">-d</span> <span class="string">"ota_be_deploy"</span> ]; <span class="keyword">then</span></div><div class="line">    git <span class="built_in">clone</span> yinlijun@www.yinlijun.com:project/ota_server.git ./ota_be_deploy</div><div class="line">    <span class="built_in">echo</span> <span class="string">"clone remote ota_server done..."</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment"># 将后端代码，拷贝到临时目录</span></div><div class="line">cp -rf ota_be/*  ./ota_be_deploy/</div><div class="line"><span class="built_in">echo</span> <span class="string">"copy ota_be done..."</span></div><div class="line"></div><div class="line"><span class="comment"># 提交后端代码到远程master分支</span></div><div class="line"><span class="built_in">cd</span> ota_be_deploy; </div><div class="line">git add .;</div><div class="line">git commit -m <span class="string">"auto deploy server"</span>; </div><div class="line">git push origin master;</div><div class="line"><span class="built_in">cd</span> ../</div><div class="line"><span class="built_in">echo</span> <span class="string">"deploy done..."</span></div></pre></td></tr></table></figure></p>
<p>运行上述脚本，就会将本地的代码，推送到服务器的仓库上去，同时，因为我们hook了推送操作，就会在服务器上更新运行代码。</p>
<h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><p>pm2启动服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 start ~/project/ota_server/bin/www --name <span class="string">"ota-server"</span></div></pre></td></tr></table></figure></p>
<p>添加nginx代理<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch /etc/nginx/ota.conf</div></pre></td></tr></table></figure></p>
<p>内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen: 80;</div><div class="line">    server_name ota.yinlijun.com;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://127.0.0.1:3020;</div><div class="line">        proxy_http_version 1.1;</div><div class="line">        proxy_set_header Upgrade $http_upgrade;</div><div class="line">        proxy_set_header Connection &apos;upgrade&apos;;</div><div class="line">        proxy_set_header Host $host</div><div class="line">        proxy_cache_bapass $http_upgrade</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重启nginx<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/nginx restart</div></pre></td></tr></table></figure></p>
<h4 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h4><p><a href="http://ota.yinlijun.com/" target="_blank" rel="external">http://ota.yinlijun.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍如何将整个ota系统部署到阿里云ECS上去，没有看过正规军是如何部署的，以下只是我的个人经验。&lt;/p&gt;
&lt;h3 id=&quot;创建远程git目录&quot;&gt;&lt;a href=&quot;#创建远程git目录&quot; class=&quot;headerlink&quot; title=&quot;创建远程git目录&quot;&gt;&lt;/a&gt;创建远程git目录&lt;/h3&gt;&lt;p&gt;登陆阿里云ECS，创建一个bare仓库，存放ota_be代码。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git init --bare ~/project/ota_server.git&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;创建post-receive文件，捕获git推送操作，克隆一份到服务器本地，作为运行仓库。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;touch ~/project/ota_server.git/hooks/post-receive&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="从零搭建Android OTA系统" scheme="http://www.yinlijun.com/categories/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAAndroid-OTA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="nodejs" scheme="http://www.yinlijun.com/tags/nodejs/"/>
    
      <category term="express" scheme="http://www.yinlijun.com/tags/express/"/>
    
      <category term="react" scheme="http://www.yinlijun.com/tags/react/"/>
    
      <category term="ECS， nginx" scheme="http://www.yinlijun.com/tags/ECS%EF%BC%8C-nginx/"/>
    
  </entry>
  
  <entry>
    <title>HTTP请求头摘要</title>
    <link href="http://www.yinlijun.com/2018/01/09/http-summery/"/>
    <id>http://www.yinlijun.com/2018/01/09/http-summery/</id>
    <published>2018-01-09T03:09:03.000Z</published>
    <updated>2018-04-18T07:29:48.607Z</updated>
    
    <content type="html"><![CDATA[<h3 id="If-Modified-Since"><a href="#If-Modified-Since" class="headerlink" title="If-Modified-Since"></a>If-Modified-Since</h3><p><b>If-Modified-Since</b>是一个条件式请求首部，服务器只在请求的资源在给定的日期时间之后对内容进行过修改的情况下才会返回，状态码<b>200</b>。如果请求的资源从那时起未经修改，则返回一个不带消息主体的<b>304</b>响应，而在<b>Last-Modified</b>首部中会带有上次修改的时间。</p>
<p>语法：If-Modified-Since: <day-name>, <day> <month> <year> <hour>:<minute>:<second> GMT</second></minute></hour></year></month></day></day-name></p>
<p>示例：If-Modified-Since: Wed, 21 Oct 2015 07:28:00 GMT</p>
<a id="more"></a>
<h3 id="If-Unmodified-Since"><a href="#If-Unmodified-Since" class="headerlink" title="If-Unmodified-Since"></a>If-Unmodified-Since</h3><p>只有当资源在指定的时间之后没有进行过修改，服务器在返回请求的资源，或是接受<b>POST</b>或其他non-safe方法的请求。如果所请求的资源在指定的时间之后发生的修改，那么会返回<b>412</b>(Proceondition Failed)错误。</p>
<p>常见应用场景：</p>
<ul>
<li><p>与non-safe方法如<b>POST</b>搭配使用，可以用来优化并发控制，例如某些wiki应用中的做法：假如在原始副本获取之后，服务器上所存储的文档已经被修改，那么对其做出的编辑会被拒绝提交。</p>
</li>
<li><p>与含有<b>If-Range</b>消息头的范围请求搭配使用，用来确保新的请求片段来自于未经修改的文档。</p>
</li>
</ul>
<p>语法：<br>If-Unmodified-Since: <day-name>, <day> <month> <year> <hour>:<minute>:<second> GMT</second></minute></hour></year></month></day></day-name></p>
<p>示例：<br>If-Unmodified-Since: Wed, 21 Oct 2015 07:28:00 GMT</p>
<h3 id="If-None-Match"><a href="#If-None-Match" class="headerlink" title="If-None-Match"></a>If-None-Match</h3><p>对于<b>GET</b>和<b>HEAD</b>请求来说，当且仅当服务器上没有任何资源的ETag属性值与这个首部中列出的相匹配的时候，服务器端才会返回所请求的资源，响应码200。对其他方法来说，当且仅当最终确认没有已存在的资源的ETag的属性值与这个首部所列出的相匹配的时候，才会对请求进行相应的处理。</p>
<h3 id="If-Range"><a href="#If-Range" class="headerlink" title="If-Range"></a>If-Range</h3><p>If-Range跟Range一起使用，但字段中的d饿到满足时，Range头字段才会起作用，同时服务器返回(Partial Content)状态码；如果字段值中的条件没有得到满足，服务器返回200状态码，返回完整的请求资源。</p>
<p>字段值中既可以用Last-Modified时间用作验证，也可以用ETag标记作为验证，但不能同时使用。</p>
<p>常见场景：<br>If-Range头字段通常用于断点续传的下载过程中，用来自上次中断后，确保下载的资源没有发生改变。</p>
<p>语法：<br>If-Range: &lt;星期&gt;, &lt;日&gt; &lt;月&gt; &lt;年&gt; &lt;时&gt;:&lt;分&gt;:&lt;秒&gt; GMT<br>If-Range: <etag></etag></p>
<p>示例：<br>If-Range: Wed, 21 Oct 2015 07:28:00 GMT<br>If-Range: “675af34563dc-tr34”</p>
<h3 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h3><p><b>Range</b>告知服务器返回文件的哪个部分。在一个Range首部中，可以一次性请求多个部分，服务器会以multipart文件的形式返回。如果服务器返回的是范围响应，需要使用206(Partial Content)状态码。加入所请求的范围不合法，那么服务器会返回416（Range Not Satisfiable）状态码，表示客户端错误。服务器允许忽略Range首部，从而返回整个文件，状态码用200。</p>
<p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Range: &lt;unit&gt;=&lt;range-start&gt;-</div><div class="line">Range: &lt;unit&gt;=&lt;range-start&gt;-&lt;range-end&gt;</div><div class="line">Range: &lt;unit&gt;=&lt;range-start&gt;-&lt;range-end&gt;, &lt;range-start&gt;-&lt;range-end&gt;</div><div class="line">Range: &lt;unit&gt;=&lt;range-start&gt;-&lt;range-end&gt;, &lt;range-start&gt;-&lt;range-end&gt;, &lt;range-start&gt;-&lt;range-end&gt;</div></pre></td></tr></table></figure></p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Range: bytes=200-1000, 2000-6576, 19000-</div></pre></td></tr></table></figure></p>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul>
<li><p><b>If-Modified-Since</b>和<b>If-Unmodified-Since</b></p>
<p>  <b>If-Mmodified-Since</b>只会出现在<b>GET</b>和<b>HEAD</b>请求中。</p>
</li>
<li><p><b>If-Modified-Since</b>和<b>If-None-Match</b></p>
<p>  <b>If-Modified-Since</b>比<b>If-None-Match</b>优先级要高，但两者都存在时，后者会被忽略，除非服务器不支持<b>If-None-Match</b></p>
</li>
</ul>
<p>参考资料：<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Unmodified-Since" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Unmodified-Since</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Range" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Range</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Range" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Range</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-None-Match" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-None-Match</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;If-Modified-Since&quot;&gt;&lt;a href=&quot;#If-Modified-Since&quot; class=&quot;headerlink&quot; title=&quot;If-Modified-Since&quot;&gt;&lt;/a&gt;If-Modified-Since&lt;/h3&gt;&lt;p&gt;&lt;b&gt;If-Modified-Since&lt;/b&gt;是一个条件式请求首部，服务器只在请求的资源在给定的日期时间之后对内容进行过修改的情况下才会返回，状态码&lt;b&gt;200&lt;/b&gt;。如果请求的资源从那时起未经修改，则返回一个不带消息主体的&lt;b&gt;304&lt;/b&gt;响应，而在&lt;b&gt;Last-Modified&lt;/b&gt;首部中会带有上次修改的时间。&lt;/p&gt;
&lt;p&gt;语法：If-Modified-Since: &lt;day-name&gt;, &lt;day&gt; &lt;month&gt; &lt;year&gt; &lt;hour&gt;:&lt;minute&gt;:&lt;second&gt; GMT&lt;/second&gt;&lt;/minute&gt;&lt;/hour&gt;&lt;/year&gt;&lt;/month&gt;&lt;/day&gt;&lt;/day-name&gt;&lt;/p&gt;
&lt;p&gt;示例：If-Modified-Since: Wed, 21 Oct 2015 07:28:00 GMT&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从零搭建Android OTA系统——创建后端项目</title>
    <link href="http://www.yinlijun.com/2017/12/20/my-ota-tutorial-1/"/>
    <id>http://www.yinlijun.com/2017/12/20/my-ota-tutorial-1/</id>
    <published>2017-12-20T10:23:04.000Z</published>
    <updated>2018-04-18T07:25:15.517Z</updated>
    
    <content type="html"><![CDATA[<p>本文实现简单的服务端的注册，登录功能，暂时不实现前端界面，用curl模拟前端请求。</p>
<h3 id="创建后端项目"><a href="#创建后端项目" class="headerlink" title="创建后端项目"></a>创建后端项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">express ota_be</div></pre></td></tr></table></figure>
<h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>model存放数据库代码，routes存放路由代码，controller存放处理代码，middleware存放中间件代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">├─app.js</div><div class="line">├─config.js</div><div class="line">├─model/</div><div class="line">├─routes/</div><div class="line">├─controller/</div><div class="line">├─middleware/</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="用户注册"><a href="#用户注册" class="headerlink" title="用户注册"></a>用户注册</h3><h4 id="实现用户集合"><a href="#实现用户集合" class="headerlink" title="实现用户集合"></a>实现用户集合</h4><p>创建model/user.js，目前只保存username和password，其中username唯一。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</div><div class="line"><span class="keyword">var</span> Schema = mongoose.Schema;</div><div class="line"></div><div class="line"><span class="keyword">var</span> UserSchema = <span class="keyword">new</span> Schema(&#123;</div><div class="line">  username: &#123;</div><div class="line">    type: <span class="built_in">String</span>,</div><div class="line">    unique: <span class="literal">true</span>,</div><div class="line">  &#125;,</div><div class="line">  password: &#123;</div><div class="line">    type: <span class="built_in">String</span>, </div><div class="line">  &#125;,</div><div class="line">&#125;)</div><div class="line">mongoose.model(<span class="string">'User'</span>, UserSchema);</div></pre></td></tr></table></figure></p>
<p>创建model/index.js，连接数据库。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</div><div class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>);</div><div class="line"></div><div class="line">mongoose.connect(config.mongodb, &#123;</div><div class="line">  server: &#123;poolSize: <span class="number">20</span>&#125;,</div><div class="line">  useMongoClient: <span class="literal">true</span>,</div><div class="line">&#125;, err =&gt; &#123;</div><div class="line">  <span class="keyword">if</span>(err) &#123;</div><div class="line">    <span class="built_in">console</span>.error(<span class="string">"connect to %s failed"</span>, config.mongodb, err</div><div class="line">    .message);</div><div class="line">    process.exit(<span class="number">-1</span>);</div><div class="line">  &#125; </div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">require</span>(<span class="string">'./user'</span>);</div><div class="line"></div><div class="line">exports.User = mongoose.model(<span class="string">'User'</span>);</div></pre></td></tr></table></figure></p>
<h4 id="路由实现"><a href="#路由实现" class="headerlink" title="路由实现"></a>路由实现</h4><p>创建routes/user.js。<br>这里的路由，都分发到控制器的user实现功能。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> user = <span class="built_in">require</span>(<span class="string">'../controller/user'</span>);</div><div class="line"><span class="keyword">var</span> router = express.Router();</div><div class="line"><span class="keyword">var</span> passport = <span class="built_in">require</span>(<span class="string">'passport'</span>);</div><div class="line"></div><div class="line">router.post(<span class="string">'/user/register'</span>,  user.register);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = router;</div></pre></td></tr></table></figure>
<p>创建routes/index.js，引入路由文件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> router = express.Router();</div><div class="line"><span class="keyword">var</span> user = <span class="built_in">require</span>(<span class="string">'./user'</span>);</div><div class="line"></div><div class="line">router.use(user);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = router;</div></pre></td></tr></table></figure></p>
<p>修改app.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">'./routes'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="comment">//...</span></div><div class="line">app.use(<span class="string">'/'</span>, router);</div></pre></td></tr></table></figure>
<h4 id="实现注册操作"><a href="#实现注册操作" class="headerlink" title="实现注册操作"></a>实现注册操作</h4><p>创建controller/user.js。<br>用户密码需要利用bcyptsjs加密，不存储明文密码。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Model = <span class="built_in">require</span>(<span class="string">'../model'</span>);</div><div class="line"><span class="keyword">var</span> User = Model.User;</div><div class="line"><span class="keyword">var</span> bcrypt = <span class="built_in">require</span>(<span class="string">'bcryptjs'</span>)</div><div class="line"></div><div class="line">validUserRequest = body =&gt; &#123;</div><div class="line">  <span class="comment">//TODO 更详细校验</span></div><div class="line">  <span class="keyword">if</span>(!body.username || !body.password) &#123;</div><div class="line">      <span class="keyword">return</span> &#123;code: <span class="number">-1</span>, message: <span class="string">"valid param"</span>&#125;;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.register = (req, res, next) =&gt; &#123;</div><div class="line">  <span class="keyword">var</span> error = validUserRequest(req.body);</div><div class="line">  <span class="keyword">if</span>(error) &#123;</div><div class="line">    res.status(<span class="number">400</span>).send(error);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">const</span> &#123;username, password&#125; = req.body;</div><div class="line">  bcrypt.hash(password, <span class="number">10</span>)</div><div class="line">    .then(hash =&gt; &#123;</div><div class="line">      <span class="keyword">var</span> user = <span class="keyword">new</span> User(&#123;</div><div class="line">        username: username,</div><div class="line">        password: hash</div><div class="line">      &#125;);</div><div class="line">      <span class="keyword">return</span> user.save()</div><div class="line">    &#125;)</div><div class="line">    .then(user =&gt; &#123;</div><div class="line">      res.json(&#123;code: <span class="number">0</span>, message: <span class="string">"create user success"</span>&#125;);</div><div class="line">    &#125;)</div><div class="line">    .catch(err =&gt; &#123;</div><div class="line">      res.status(<span class="number">406</span>).send(&#123;code: <span class="number">-1</span>, message: err.message&#125;);</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>因为用到了mongoose库，需要本地先启用mongod服务，端口需要跟config.js中的一致。<br>config.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> config = &#123;</div><div class="line">  mongodb: <span class="string">'mongodb://127.0.0.1:50000/ota_server'</span>,</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = config;</div></pre></td></tr></table></figure></p>
<p>然后启动应用。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yarn start</div></pre></td></tr></table></figure></p>
<h4 id="测试注册接口"><a href="#测试注册接口" class="headerlink" title="测试注册接口"></a>测试注册接口</h4><p>在终端里面用如下指令模拟注册请求。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ curl <span class="_">-d</span> <span class="string">"username=yinlijun&amp;password=123456"</span> <span class="string">"http://127.0.0.1:3020/user/register"</span></div><div class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class="line">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class="line">100    75  100    42  100    33    168    132 --:--:-- --:--:-- --:--:--   168&#123;<span class="string">"code"</span>:0,<span class="string">"message"</span>:<span class="string">"create user success"</span>&#125;</div></pre></td></tr></table></figure></p>
<p>利用mongo客户端打开集合，查看集合数据，插入成功。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ mongo mongodb://127.0.0.1:50000</div><div class="line">MongoDB shell version v3.4.9</div><div class="line">connecting to: mongodb://127.0.0.1:50000</div><div class="line">MongoDB server version: 3.4.9</div><div class="line"></div><div class="line">$ use ota_server</div><div class="line">switched to db ota_server</div><div class="line"></div><div class="line">$ db.users.<span class="function"><span class="title">find</span></span>()</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a3b61b1db2e604ebca6dfc4"</span>), <span class="string">"username"</span> : <span class="string">"yinlijun"</span>, <span class="string">"password"</span> : <span class="string">"<span class="variable">$2a</span><span class="variable">$10</span><span class="variable">$Zc33sn8Zj1kJslfTTXM0deFNUjVMJyWk</span>.tMsuh.aaLtZEFUSedLQW"</span>, <span class="string">"__v"</span> : 0 &#125;</div></pre></td></tr></table></figure></p>
<p>再次注册同名用户，报错。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ curl <span class="_">-d</span> <span class="string">"username=yinlijun&amp;password=123456"</span> <span class="string">"http://127.0.0.1:3020/user/register"</span></div><div class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class="line">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class="line">100   158  100   125  100    33   1344    354 --:--:-- --:--:-- --:--:--  1344&#123;<span class="string">"code"</span>:-1,<span class="string">"message"</span>:<span class="string">"E11000 duplicate key error collection: ota_server.users index: username_1 dup key: &#123; : \"yinlijun\" &#125;"</span>&#125;</div></pre></td></tr></table></figure></p>
<h3 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h3><h4 id="路由实现-1"><a href="#路由实现-1" class="headerlink" title="路由实现"></a>路由实现</h4><p>添加路由routes/user.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">router.post(<span class="string">'/user/login'</span>, user.login);</div></pre></td></tr></table></figure></p>
<h4 id="实现登录操作"><a href="#实现登录操作" class="headerlink" title="实现登录操作"></a>实现登录操作</h4><p>在controller/user.js中添加如下代码，校验用户名和密码，校验密码用到了bcrypt.compareSync。</p>
<p>然后生成cookie发到前端。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">exports.login = (req, res, next) =&gt; &#123;</div><div class="line">  <span class="keyword">let</span> &#123;username, password&#125; = req.body;</div><div class="line">  User.findOne(&#123;username: username&#125;)</div><div class="line">    .then(user =&gt; &#123;</div><div class="line">      <span class="keyword">if</span>(!user) &#123;</div><div class="line">        res.status(<span class="number">400</span>).send(&#123;code: <span class="number">-1</span>, message:<span class="string">"invalid username or password"</span>&#125;);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span>(!bcrypt.compareSync(password, user.password)) &#123;</div><div class="line">        res.status(<span class="number">400</span>).send(&#123;code: <span class="number">-1</span>, message:<span class="string">"invalid username or password"</span>&#125;);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">      genCookie(user, res);    </div><div class="line">      res.send(&#123;code:<span class="number">0</span>, message:<span class="string">"登录成功"</span>&#125;);</div><div class="line">    &#125;)</div><div class="line">&#125;;</div><div class="line"></div><div class="line">genCookie = (user, res) =&gt; &#123;</div><div class="line">  <span class="keyword">var</span> token = user._id + <span class="string">'$$$'</span>;</div><div class="line">  <span class="keyword">var</span> opts = &#123;</div><div class="line">    path: <span class="string">'/'</span>,</div><div class="line">    maxAge: config.session_age,</div><div class="line">    httpOnly: <span class="literal">true</span>,</div><div class="line">  &#125;;</div><div class="line">  res.cookie(config.cookie_name, token);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里可以看到有个重复调用的validUserRequest函数，可以做成一个middleware。</p>
<p>创建middleware/validRequest.js。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">exports.validUsernamePassword = (req, res, next) =&gt; &#123;</div><div class="line">  <span class="comment">//TODO 更详细校验</span></div><div class="line">  <span class="keyword">let</span> &#123;username, password&#125; = req.body;</div><div class="line">  <span class="keyword">if</span>(!username || !password) &#123;</div><div class="line">      res.status(<span class="number">400</span>).send(&#123;code: <span class="number">-1</span>, message: <span class="string">"valid param"</span>&#125;);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  next();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后修改routes/user.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> validRequest = <span class="built_in">require</span>(<span class="string">'../middleware/validRequest'</span>);</div><div class="line"></div><div class="line">router.post(<span class="string">'/user/register'</span>, validRequest.validUsernamePassword, user.register);</div><div class="line"></div><div class="line">router.post(<span class="string">'/user/login'</span>, validRequest.validUsernamePassword, user.login);</div></pre></td></tr></table></figure></p>
<p>把controller/user.js的register中validUserRequest调用去掉。</p>
<p>测试一下这个middleware：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> $ curl <span class="_">-d</span> <span class="string">"username=yinlijun&amp;password="</span> <span class="string">"http://127.0.0.1:3020/user/register"</span></div><div class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class="line">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class="line">100    62  100    35  100    27   1093    843 --:--:-- --:--:-- --:--:--  1093&#123;<span class="string">"code"</span>:-1,<span class="string">"message"</span>:<span class="string">"valid param"</span>&#125;</div></pre></td></tr></table></figure></p>
<h4 id="测试登录接口"><a href="#测试登录接口" class="headerlink" title="测试登录接口"></a>测试登录接口</h4><p>输入错误的用户名:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ curl <span class="_">-d</span> <span class="string">"username=liudehua&amp;password=123456"</span> <span class="string">"http://127.0.0.1:3020/user/login"</span></div><div class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class="line">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class="line">100    85  100    52  100    33   1106    702 --:--:-- --:--:-- --:--:--  1106&#123;<span class="string">"code"</span>:-1,<span class="string">"message"</span>:<span class="string">"invalid username or password"</span>&#125;</div></pre></td></tr></table></figure></p>
<p>输入错误密码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ curl <span class="_">-d</span> <span class="string">"username=yinlijun&amp;password=654321"</span> <span class="string">"http://127.0.0.1:3020/user/login"</span></div><div class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class="line">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class="line">100    85  100    52  100    33    553    351 --:--:-- --:--:-- --:--:--   553&#123;<span class="string">"code"</span>:-1,<span class="string">"message"</span>:<span class="string">"invalid username or password"</span>&#125;</div></pre></td></tr></table></figure></p>
<p>输入正确的用户名密码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ curl -d &quot;username=yinlijun&amp;password=123456&quot; &quot;http://127.0.0.1:3020/user/login&quot;</div><div class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class="line">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class="line">100    68  100    35  100    33    372    351 --:--:-- --:--:-- --:--:--   372&#123;&quot;code&quot;:0,&quot;message&quot;:&quot;登录成功&quot;&#125;</div></pre></td></tr></table></figure></p>
<h3 id="利用passport校验登录功能。"><a href="#利用passport校验登录功能。" class="headerlink" title="利用passport校验登录功能。"></a>利用passport校验登录功能。</h3><p>社区里面有个passport的组件，可以用来实现校验登录功能。</p>
<h4 id="封装passport中间件"><a href="#封装passport中间件" class="headerlink" title="封装passport中间件"></a>封装passport中间件</h4><p>创建middleware/passport.js，封装passport模块。</p>
<p>将校验密码的操作挪到passport中，校验成功之后用户信息将会保存到req.user。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> passport = <span class="built_in">require</span>(<span class="string">'passport'</span>);</div><div class="line"><span class="keyword">var</span> User = <span class="built_in">require</span>(<span class="string">'../model'</span>).User;</div><div class="line"><span class="keyword">var</span> LocalStrategy = <span class="built_in">require</span>(<span class="string">'passport-local'</span>).Strategy;</div><div class="line"></div><div class="line">passport.use(<span class="string">'local.login'</span>, <span class="keyword">new</span> LocalStrategy((username, password, done) =&gt; &#123;</div><div class="line">  User.findOne(&#123;username: username&#125;)</div><div class="line">    .exec()</div><div class="line">    .then(user =&gt; &#123;</div><div class="line">      <span class="keyword">if</span>(!user) &#123;</div><div class="line">        <span class="keyword">return</span> done(<span class="literal">null</span>, <span class="literal">false</span>, &#123;code: <span class="number">-1</span>, message: <span class="string">"invalid username or password"</span>&#125;);</div><div class="line">      &#125; </div><div class="line">      <span class="keyword">if</span>(!user.validPassword(password)) &#123;</div><div class="line">        <span class="keyword">return</span> done(<span class="literal">null</span>, <span class="literal">false</span>, &#123;code: <span class="number">-1</span>, message: <span class="string">"invalid username or password"</span>&#125;);</div><div class="line">      &#125; </div><div class="line">      <span class="keyword">return</span> done(<span class="literal">null</span>, user);</div><div class="line">    &#125;)</div><div class="line">    .catch(err =&gt; &#123;</div><div class="line">      done(<span class="literal">null</span>, <span class="literal">false</span>, &#123;code: <span class="number">-1</span>, message: err.message&#125;);</div><div class="line">    &#125;)</div><div class="line">&#125;))</div><div class="line"></div><div class="line">passport.serializeUser((user, done) =&gt; &#123;</div><div class="line">  done(<span class="literal">null</span>, user._id);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">passport.deserializeUser((id, done) =&gt; &#123;</div><div class="line">  User.findById(id)</div><div class="line">    .exec()</div><div class="line">    .then(user =&gt; &#123;</div><div class="line">      done(<span class="literal">null</span>, user);</div><div class="line">    &#125;)</div><div class="line">    .catch(err =&gt; &#123;</div><div class="line">      done(<span class="literal">null</span>, <span class="literal">false</span>, &#123;code: <span class="number">-1</span>, message: err.message&#125;);</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = passport;</div></pre></td></tr></table></figure></p>
<h4 id="重新实现登录操作"><a href="#重新实现登录操作" class="headerlink" title="重新实现登录操作"></a>重新实现登录操作</h4><p>修改controller/user.js的login函数，去掉验证用户名密码的代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">exports.login = (req, res, next) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> user = req.user;</div><div class="line">  genCookie(user, res);    </div><div class="line">  res.send(&#123;code:<span class="number">0</span>, message:<span class="string">"login success"</span>&#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>在middleware/validRequest.js添加一个校验中间件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">exports.validByPassport = (req, res, next) =&gt; &#123;</div><div class="line">    passport.authenticate(<span class="string">'local.login'</span>, &#123;</div><div class="line">      failureMessage: <span class="string">'invalid username or password'</span>,</div><div class="line">    &#125;)(req,  res, next);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="修改路由"><a href="#修改路由" class="headerlink" title="修改路由"></a>修改路由</h4><p>修改router/user.js路由<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">router.post(<span class="string">'/user/login'</span>, validRequest.validByPassport, user.login);</div></pre></td></tr></table></figure></p>
<p>这样，用户登录就会走passport的校验流程。</p>
<h3 id="退出功能"><a href="#退出功能" class="headerlink" title="退出功能"></a>退出功能</h3><p>主要是清除cookie，controller/user.js中添加代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">exports.logout = (req, res, next) =&gt; &#123;</div><div class="line">  clearCookie(res);</div><div class="line">  res.send(&#123;code:<span class="number">0</span>, message:<span class="string">"exit success"</span>&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">clearCookie = (res) =&gt; &#123;</div><div class="line">  res.clearCookie(config.cookie_name, &#123;path: <span class="string">'/'</span>&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ curl &quot;http://127.0.0.1:3020/user/logout&quot;</div><div class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class="line">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class="line">100    35  100    35    0     0   2187      0 --:--:-- --:--:-- --:--:--  2187&#123;&quot;code&quot;:0,&quot;message&quot;:&quot;exit success&quot;&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文实现简单的服务端的注册，登录功能，暂时不实现前端界面，用curl模拟前端请求。&lt;/p&gt;
&lt;h3 id=&quot;创建后端项目&quot;&gt;&lt;a href=&quot;#创建后端项目&quot; class=&quot;headerlink&quot; title=&quot;创建后端项目&quot;&gt;&lt;/a&gt;创建后端项目&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;express ota_be&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;目录结构&quot;&gt;&lt;a href=&quot;#目录结构&quot; class=&quot;headerlink&quot; title=&quot;目录结构&quot;&gt;&lt;/a&gt;目录结构&lt;/h4&gt;&lt;p&gt;model存放数据库代码，routes存放路由代码，controller存放处理代码，middleware存放中间件代码。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;├─app.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─config.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─model/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─routes/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─controller/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;├─middleware/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="从零搭建Android OTA系统" scheme="http://www.yinlijun.com/categories/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAAndroid-OTA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="nodejs" scheme="http://www.yinlijun.com/tags/nodejs/"/>
    
      <category term="express" scheme="http://www.yinlijun.com/tags/express/"/>
    
      <category term="react" scheme="http://www.yinlijun.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>从零搭建Android OTA系统——开篇</title>
    <link href="http://www.yinlijun.com/2017/12/20/my-ota-tutorial/"/>
    <id>http://www.yinlijun.com/2017/12/20/my-ota-tutorial/</id>
    <published>2017-12-20T09:45:28.000Z</published>
    <updated>2018-04-20T11:32:32.703Z</updated>
    
    <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>作为一个半路出家的码农，一个野生Android工程师，一直对<b>全栈</b>心怀憧憬，但未有行动。直到两年之前有机会开始接触javascript，写了一些前端的代码，加上nodejs社区这些年的蓬勃发展，我觉得这是一个机会。正如某位长者教导的:</p>
<blockquote>
<p>人的一生当然要靠自我奋斗,当然也要考虑历史的进程。</p>
</blockquote>
<p>我觉得是时候了。</p>
<p>这是一个完整的项目，也许耗时会比较长，因为上班时间还有工作要完成，但是我会尽力完成它，我的目标是达到可以商用的水平，而不是一个玩具。实现的过程的文章会贴在<a href="http://www.yinlijun.com">本站</a>，代码将会托管到github <a href="https://github.com/yinlijun2004/android_ota_system" target="_blank" rel="external">android ota system</a>。</p>
<a id="more"></a>
<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>到这个项目完结的时候，能实现如下功能。</p>
<ul>
<li>服务端<ul>
<li>版本管理后台</li>
<li>用户管理后台</li>
</ul>
</li>
<li>PC端<ul>
<li>版本管理界面</li>
<li>用户操作界面</li>
</ul>
</li>
<li>Android端<ul>
<li>查询版本</li>
<li>下载版本</li>
<li>升级版本 </li>
</ul>
</li>
</ul>
<h3 id="我的技术背景"><a href="#我的技术背景" class="headerlink" title="我的技术背景"></a>我的技术背景</h3><p>语言方面</p>
<ul>
<li>javascript 熟练度 30%</li>
</ul>
<p>框架</p>
<ul>
<li>nodejs 熟练度 5%</li>
<li>react 熟练度 10%</li>
</ul>
<h3 id="会使用到的库"><a href="#会使用到的库" class="headerlink" title="会使用到的库"></a>会使用到的库</h3><ul>
<li>react</li>
<li>express</li>
</ul>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li><a href="/2017/12/20/my-ota-tutorial-1/" title="用户注册登录的后台实现">用户注册登录的后台实现</a></li>
<li><a href="/2018/04/09/my-ota-tutorial-2/" title="用户注册登录前端界面实现">用户注册登录前端界面实现</a></li>
<li><a href="/2018/04/18/my-ota-tutorial-3/" title="七牛云存储接口实现">七牛云存储接口实现</a></li>
<li><a href="/2018/04/19/my-ota-tutorial-4/" title="版本发布规则实现">版本发布规则实现</a></li>
<li><a href="/2018/04/19/my-ota-tutorial-5/" title="用户管理规则实现">用户管理规则实现</a></li>
<li><a href="/2018/03/20/my-ota-tutorial-7/" title="部署到阿里云ECS">部署到阿里云ECS</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h3&gt;&lt;p&gt;作为一个半路出家的码农，一个野生Android工程师，一直对&lt;b&gt;全栈&lt;/b&gt;心怀憧憬，但未有行动。直到两年之前有机会开始接触javascript，写了一些前端的代码，加上nodejs社区这些年的蓬勃发展，我觉得这是一个机会。正如某位长者教导的:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人的一生当然要靠自我奋斗,当然也要考虑历史的进程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我觉得是时候了。&lt;/p&gt;
&lt;p&gt;这是一个完整的项目，也许耗时会比较长，因为上班时间还有工作要完成，但是我会尽力完成它，我的目标是达到可以商用的水平，而不是一个玩具。实现的过程的文章会贴在&lt;a href=&quot;http://www.yinlijun.com&quot;&gt;本站&lt;/a&gt;，代码将会托管到github &lt;a href=&quot;https://github.com/yinlijun2004/android_ota_system&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android ota system&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="从零搭建Android OTA系统" scheme="http://www.yinlijun.com/categories/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAAndroid-OTA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="nodejs" scheme="http://www.yinlijun.com/tags/nodejs/"/>
    
      <category term="express" scheme="http://www.yinlijun.com/tags/express/"/>
    
      <category term="react" scheme="http://www.yinlijun.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>部署HEXO博客到阿里云ECS</title>
    <link href="http://www.yinlijun.com/2017/12/18/hexo-to-ali-ecs/"/>
    <id>http://www.yinlijun.com/2017/12/18/hexo-to-ali-ecs/</id>
    <published>2017-12-18T09:46:56.000Z</published>
    <updated>2018-04-18T07:30:05.293Z</updated>
    
    <content type="html"><![CDATA[<p>本文假设你具备如下条件：</p>
<ul>
<li>熟悉hexo操作</li>
<li>熟悉linux基本指令</li>
<li>熟悉express(nodejs)框架</li>
<li>在github上已经部署了hexo博客</li>
</ul>
<a id="more"></a>
<h2 id="ECS准备"><a href="#ECS准备" class="headerlink" title="ECS准备"></a>ECS准备</h2><h3 id="购买ECS"><a href="#购买ECS" class="headerlink" title="购买ECS"></a>购买ECS</h3><p>前往阿里云购买<a href="https://ecs-buy.aliyun.com" target="_blank" rel="external">ECS</a>，根据个人需要和财务状况，选择对应规模的ECS。<br>我购买的是这个配置，费用是330.00¥。<br><img src="https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/a6b1134939a35cdf34dab8f9d564c777b7aafbb5518fae80c8450e0ba8d5280bf07d7e677b3b3c2028e2f7a5c778e5a8?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=1GE9BH_P%29%600QGAZLQY6E%7D0G.png&amp;size=1024" alt="img"></p>
<h3 id="配置ECS"><a href="#配置ECS" class="headerlink" title="配置ECS"></a>配置ECS</h3><p>购买之后，可以远程登录ECS实例，可以选择网页登录，即点击上图的远程连接，此时需要输入远程连接密码。<br><img src="https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/8f23cd09eff9be82c51f1dcbe340257766d02aae3ea6c33a920a3fbdf917426660d0df1eecce1e99548aa7aafad45df3?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=2RK%5D3A%28ZCW9N7%7DRB801Q92V.png&amp;size=1024" alt="img"><br>这个密码在创建ECS实例的时候会提供给你，点击确认之后，就可以登录root用户。</p>
<p>我的本地是ubuntu系统，所以可以利用ssh登录。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh root@xx.xx.xx.xx</div></pre></td></tr></table></figure></p>
<p>登录之后，创建一个非root用户。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adduser yinlijun</div></pre></td></tr></table></figure></p>
<p>切换到该用户<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">su yinlijun</div></pre></td></tr></table></figure></p>
<h3 id="上传本地公钥，方便部署。"><a href="#上传本地公钥，方便部署。" class="headerlink" title="上传本地公钥，方便部署。"></a>上传本地公钥，方便部署。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub yinlijun@xx.xx.xx.xx</div></pre></td></tr></table></figure>
<p>如果需要绑定域名，还需要如下申请域名和备案：</p>
<h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h2><p>前往<a href="https://wanwang.aliyun.com/domain" target="_blank" rel="external">阿里域名服务</a>选购域名。</p>
<h2 id="域名备案"><a href="#域名备案" class="headerlink" title="域名备案"></a>域名备案</h2><p>前往<a href="https://beian.aliyun.com/" target="_blank" rel="external">备案专区</a>，进行备案，需要时间比较长，我花了12天，备案完成后，阿里云会给你的ECS续费，续费的天数就是你的备案花的天数。<br>期间要填写资料，上传备案照片等等。</p>
<p>备案完成之后，需要设置域名解析。<br><img src="https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/02ad73354fe97dd378b486349444aeebd3f5fc81ebe1853b1773f70416c90e7878a24b24afa25c27f122c679c20d523b?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=AJTAI%40%601%7DB3GU6Q%60ZWZO%24Z3.png&amp;size=1024" alt="img"><br>上图的记录值，填写你的ECS的公网IP。</p>
<h3 id="在ECS上创建hexo仓库"><a href="#在ECS上创建hexo仓库" class="headerlink" title="在ECS上创建hexo仓库"></a>在ECS上创建hexo仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init --bare ~/project/hexo.git</div></pre></td></tr></table></figure>
<h3 id="捕获post操作"><a href="#捕获post操作" class="headerlink" title="捕获post操作"></a>捕获post操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch ~/project/hexo.git/hooks/post-receive</div></pre></td></tr></table></figure>
<p>输入如下内容</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/bin/bash -l</span></div><div class="line">GIT_REPO=&lt;到hexo.git的目录&gt;</div><div class="line">TMP_GIT_CLONE=&lt;到临时blog的目录&gt;</div><div class="line">PUBLIC_WWW=&lt;到blog服务的目录/public/blog&gt;</div><div class="line"></div><div class="line">rm -rf <span class="variable">$&#123;TMP_GIT_CLONE&#125;</span></div><div class="line">git <span class="built_in">clone</span> <span class="variable">$&#123;GIT_REPO&#125;</span> <span class="variable">$&#123;TMP_GIT_CLONE&#125;</span></div><div class="line">rm -rf <span class="variable">$&#123;PUBLIC_WWW&#125;</span>/*</div><div class="line">cp -rf <span class="variable">$&#123;TMP_GIT_CLONE&#125;</span>/* <span class="variable">$&#123;PUBLIC_WWW&#125;</span></div></pre></td></tr></table></figure>
<h3 id="本地blog-express-服务"><a href="#本地blog-express-服务" class="headerlink" title="本地blog(express)服务"></a>本地blog(express)服务</h3><p>新建express服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">express blog-server</div></pre></td></tr></table></figure></p>
<p>修改app.js，配置静态文件目录<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.use(express.static(path.join(__dirname, <span class="string">'public/blog/'</span>)));</div></pre></td></tr></table></figure></p>
<h3 id="启动blog服务"><a href="#启动blog服务" class="headerlink" title="启动blog服务"></a>启动blog服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 start bin/www</div></pre></td></tr></table></figure>
<h3 id="安装nginx，反向代理二级域名"><a href="#安装nginx，反向代理二级域名" class="headerlink" title="安装nginx，反向代理二级域名"></a>安装nginx，反向代理二级域名</h3><p>通过域名访问默认的80端口，blog默认监听3000端口，因此需要配置代理。<br>创建blog.conf配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch /etc/nginx/conf.d/blog.conf</div></pre></td></tr></table></figure></p>
<p>输入如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name yinlijun.com www.yinlijun.com bloc.yinlijun.com;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://127.0.0.1:3000;</div><div class="line">        proxy_http_version 1.1;</div><div class="line">        proxy_set_header Upgrade $http_upgrade;</div><div class="line">        proxy_set_header Connection &apos;upgrade&apos;;</div><div class="line">        proxy_set_header Host $host;</div><div class="line">        proxy_cache_bypass $http_upgrade;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h2><h3 id="把github上的blog目录clone下来"><a href="#把github上的blog目录clone下来" class="headerlink" title="把github上的blog目录clone下来"></a>把github上的blog目录clone下来</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> git@github.com:yinlijun2004/johnny-blog.git</div></pre></td></tr></table></figure>
<p>如果你原来没有在github上部署hexo博客，也可以用hexo新建一个，然后托管到某个git仓库。</p>
<h3 id="修改-config-yml配置"><a href="#修改-config-yml配置" class="headerlink" title="修改_config.yml配置"></a>修改_config.yml配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: yinlijun@www.yinlijun.com:project/hexo.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<h3 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h3><p>撰写好博客后，如下命令部署。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure></p>
<h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p><a href="http://www.yinlijun.com">www.yinlijun.com</a></p>
<h2 id="有可能碰到的问题"><a href="#有可能碰到的问题" class="headerlink" title="有可能碰到的问题"></a>有可能碰到的问题</h2><h3 id="外网无法访问端口"><a href="#外网无法访问端口" class="headerlink" title="外网无法访问端口"></a>外网无法访问端口</h3><p>需要配置安全组规则。<br><img src="https://picabstract-preview-ftn.weiyun.com:8443/ftn_pic_abs_v2/87f1aead6dd1582f56cae6e0179540db4090e83c7f3636e20bd26f24faf1bb04340403773fc999742081809ea9168224?pictype=scale&amp;from=30113&amp;version=2.0.0.2&amp;uin=474724984&amp;fname=3VAK%25~%7DO0ZZZXL9M%60%2963UF7.png&amp;size=1024" alt="img"><br>上图是默认开通的端口，如果你的端口不在里面，则需要自行添加安全组规则。</p>
<h3 id="hexo-deploy之后没有反应"><a href="#hexo-deploy之后没有反应" class="headerlink" title="hexo deploy之后没有反应"></a>hexo deploy之后没有反应</h3><ul>
<li>检查有没有上传本机公钥</li>
<li>检查hexo.git仓库的路径是否正确</li>
<li>检查备案的域名是否能正常访问</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文假设你具备如下条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;熟悉hexo操作&lt;/li&gt;
&lt;li&gt;熟悉linux基本指令&lt;/li&gt;
&lt;li&gt;熟悉express(nodejs)框架&lt;/li&gt;
&lt;li&gt;在github上已经部署了hexo博客&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://www.yinlijun.com/tags/git/"/>
    
      <category term="hexo" scheme="http://www.yinlijun.com/tags/hexo/"/>
    
      <category term="ECS" scheme="http://www.yinlijun.com/tags/ECS/"/>
    
  </entry>
  
  <entry>
    <title>kotlin惯用法</title>
    <link href="http://www.yinlijun.com/2017/05/26/kotlin%E6%83%AF%E7%94%A8%E6%B3%95/"/>
    <id>http://www.yinlijun.com/2017/05/26/kotlin惯用法/</id>
    <published>2017-05-26T02:01:03.000Z</published>
    <updated>2018-04-19T01:15:49.570Z</updated>
    
    <content type="html"><![CDATA[<p>kotlin提供了一些惯用法（语法糖？），简单的记录一下。</p>
<h2 id="data-class"><a href="#data-class" class="headerlink" title="data class"></a>data class</h2><p>有时候需要一些类要保存数据，而不需要其他操作，当然基本操作除外，kotlin为data class提供的基本操作有：</p>
<ul>
<li>equals() 相当与“==”操作</li>
<li>hashCode() 计算hash值</li>
<li>toString() 函数</li>
<li>componentsN() 函数</li>
<li>copy() 拷贝</li>
</ul>
<a id="more"></a>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(<span class="keyword">val</span> name: String = <span class="string">"nobody"</span>, <span class="keyword">val</span> age: <span class="built_in">Int</span> = <span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="comment">//默认参数</span></div><div class="line">    <span class="keyword">val</span> nobody = User()</div><div class="line">    <span class="comment">//User(name=nobody, age=0)</span></div><div class="line">    println(nobody)</div><div class="line">    </div><div class="line">    <span class="keyword">val</span> johnny = User(<span class="string">"Johnny"</span>, <span class="number">29</span>)</div><div class="line">    <span class="comment">//解构赋值</span></div><div class="line">    <span class="keyword">val</span> (name, age) = johnny</div><div class="line">    <span class="comment">//name: Johnny, age: 29</span></div><div class="line">    println(<span class="string">"name: <span class="subst">$name</span>, age: <span class="subst">$age</span>"</span>)</div><div class="line">    </div><div class="line">    <span class="comment">//toString用法</span></div><div class="line">    <span class="comment">//User(name=Johnny, age=29)</span></div><div class="line">    println(johnny)</div><div class="line">    </div><div class="line">    <span class="comment">//hashCode用法</span></div><div class="line">    <span class="comment">//233064103</span></div><div class="line">    println(johnny.hashCode())</div><div class="line">    </div><div class="line">    <span class="comment">//"==" 和"==="</span></div><div class="line">    <span class="comment">//true</span></div><div class="line">    println(<span class="string">"johnny == johnny  <span class="subst">$&#123;johnny == johnny&#125;</span>"</span>)</div><div class="line">    <span class="comment">//true</span></div><div class="line">    println(<span class="string">"johnny === johnny  <span class="subst">$&#123;johnny === johnny&#125;</span>"</span>)</div><div class="line">    </div><div class="line">    <span class="comment">//copy用法</span></div><div class="line">    <span class="keyword">val</span> youngJohnny = johnny.copy(age = <span class="number">2</span>)</div><div class="line">    <span class="comment">//"User(name=Johnny, age=2)"</span></div><div class="line">    println(youngJohnny)</div><div class="line">    <span class="comment">//false</span></div><div class="line">    println(<span class="string">"johnny == youngJohnny  <span class="subst">$&#123;johnny == youngJohnny&#125;</span>"</span>)</div><div class="line">    <span class="comment">//false</span></div><div class="line">    println(<span class="string">"johnny === youngJohnny  <span class="subst">$&#123;johnny === youngJohnny&#125;</span>"</span>)</div><div class="line">    <span class="comment">//false</span></div><div class="line">    println(<span class="string">"johnny.hashCode() == yongJohnny.hashCode() <span class="subst">$&#123;johnny.hashCode() == youngJohnny.hashCode()&#125;</span>"</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">val</span> copyJohnny = johnny.copy()</div><div class="line">    <span class="comment">//true</span></div><div class="line">    println(<span class="string">"johnny == copyJohnny  <span class="subst">$&#123;johnny == copyJohnny&#125;</span>"</span>)</div><div class="line">    <span class="comment">//false</span></div><div class="line">    println(<span class="string">"johnny === copyJohnny  <span class="subst">$&#123;johnny === copyJohnny&#125;</span>"</span>)</div><div class="line">    <span class="comment">//true</span></div><div class="line">    println(<span class="string">"johnny.equals(copyJohnny)  <span class="subst">$&#123;johnny.equals(copyJohnny)&#125;</span>"</span>)</div><div class="line">    <span class="comment">//true</span></div><div class="line">    println(<span class="string">"johnny.hashCode() == copyJohnny.hashCode() <span class="subst">$&#123;johnny.hashCode() == copyJohnny.hashCode()&#125;</span>"</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">val</span> anotherJohnny = User(<span class="string">"Johnny"</span>, <span class="number">29</span>)</div><div class="line">    <span class="comment">//true</span></div><div class="line">    println(<span class="string">"johnny == anotherJohnny  <span class="subst">$&#123;johnny == anotherJohnny&#125;</span>"</span>)</div><div class="line">    <span class="comment">//false</span></div><div class="line">    println(<span class="string">"johnny === anotherJohnny  <span class="subst">$&#123;johnny === anotherJohnny&#125;</span>"</span>)</div><div class="line">    <span class="comment">//true</span></div><div class="line">    println(<span class="string">"johnny.equals(anotherJohnny)  <span class="subst">$&#123;johnny.equals(anotherJohnny)&#125;</span>"</span>)</div><div class="line">    <span class="comment">//true</span></div><div class="line">    println(<span class="string">"johnny.hashCode() == anotherJohnny.hashCode() <span class="subst">$&#123;johnny.hashCode() == anotherJohnny.hashCode()&#125;</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="函数-包括构造函数-的默认值"><a href="#函数-包括构造函数-的默认值" class="headerlink" title="函数(包括构造函数)的默认值"></a>函数(包括构造函数)的默认值</h2><p>如上例的<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(<span class="keyword">val</span> name: String = <span class="string">"nobody"</span>, <span class="keyword">val</span> age: <span class="built_in">Int</span> = <span class="number">0</span>)</div></pre></td></tr></table></figure></p>
<p>对于普通函数<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(a: <span class="type">Int</span> = <span class="number">0</span>, b: <span class="type">String</span> = <span class="string">""</span>)</span></span> &#123; ... &#125;</div></pre></td></tr></table></figure></p>
<p>有了默认的参数，就可以避免写多个重载函数<br>如下面的java代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">foo</span><span class="params">(String name, <span class="keyword">int</span> number, <span class="keyword">boolean</span> toUpperCase)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (toUpperCase ? name.toUpperCase() : name) + number;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">foo</span><span class="params">(String name, <span class="keyword">int</span> number)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> foo(name, number, <span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">foo</span><span class="params">(String name, <span class="keyword">boolean</span> toUpperCase)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> foo(name, <span class="number">42</span>, toUpperCase);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">foo</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> foo(name, <span class="number">42</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以用一个kotlin函数表示<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(name: <span class="type">String</span>, number: <span class="type">Int</span> = <span class="number">42</span>, toUpperCase: <span class="type">Boolean</span> = <span class="literal">false</span>)</span></span> =</div><div class="line">        (<span class="keyword">if</span> (toUpperCase) name.toUpperCase() <span class="keyword">else</span> name) + number</div></pre></td></tr></table></figure></p>
<h2 id="过滤list"><a href="#过滤list" class="headerlink" title="过滤list"></a>过滤list</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> positives = list.filter &#123; x =&gt; x &gt; <span class="number">0</span>&#125;</div></pre></td></tr></table></figure>
<p>甚至可以更简洁一点<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> positives = list.filter &#123; it &gt; <span class="number">0</span> &#125;</div></pre></td></tr></table></figure></p>
<h2 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">println(<span class="string">"Name <span class="subst">$name</span>"</span>)</div></pre></td></tr></table></figure>
<h2 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">when</span> (x) &#123;</div><div class="line">    <span class="keyword">is</span> Foo -&gt; ...</div><div class="line">    <span class="keyword">is</span> Bar -&gt; ...</div><div class="line">    <span class="keyword">else</span>   -&gt; ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="遍历集合"><a href="#遍历集合" class="headerlink" title="遍历集合"></a>遍历集合</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ((k, v) <span class="keyword">in</span> map) &#123;</div><div class="line">    println(<span class="string">"<span class="subst">$k</span> -&gt; <span class="subst">$v</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用范围（Ranges）"><a href="#使用范围（Ranges）" class="headerlink" title="使用范围（Ranges）"></a>使用范围（Ranges）</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.100</span>) &#123; ... &#125;  <span class="comment">// 闭区间包含100</span></div><div class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span> until <span class="number">100</span>) &#123; ... &#125; <span class="comment">// 半开区间，不包含100</span></div><div class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> <span class="number">2.</span><span class="number">.10</span> step <span class="number">2</span>) &#123; ... &#125; </div><div class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> <span class="number">10</span> downTo <span class="number">1</span>) &#123; ... &#125;</div><div class="line"><span class="keyword">if</span> (x <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span>) &#123; ... &#125;</div></pre></td></tr></table></figure>
<h2 id="构造只读列表"><a href="#构造只读列表" class="headerlink" title="构造只读列表"></a>构造只读列表</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> list = listOf(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>)</div></pre></td></tr></table></figure>
<h2 id="构造只读map"><a href="#构造只读map" class="headerlink" title="构造只读map"></a>构造只读map</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> map = mapOf(<span class="string">"a"</span> to <span class="number">1</span>, <span class="string">"b"</span> to <span class="number">2</span>, <span class="string">"c"</span> to <span class="number">3</span>)</div></pre></td></tr></table></figure>
<h2 id="访问map"><a href="#访问map" class="headerlink" title="访问map"></a>访问map</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">println(map[<span class="string">"key"</span>])</div><div class="line">map[<span class="string">"key"</span>] = value</div></pre></td></tr></table></figure>
<h2 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> p: String <span class="keyword">by</span> lazy &#123;</div><div class="line">    <span class="comment">// compute the string</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="函数扩展"><a href="#函数扩展" class="headerlink" title="函数扩展"></a>函数扩展</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">spaceToCamelCase</span><span class="params">()</span></span> &#123; ... &#125;</div><div class="line"></div><div class="line"><span class="string">"Convert this to camelcase"</span>.spaceToCamelCase()</div></pre></td></tr></table></figure>
<h2 id="创建单例"><a href="#创建单例" class="headerlink" title="创建单例"></a>创建单例</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">object</span> Resource &#123;</div><div class="line">    <span class="keyword">var</span> name = <span class="string">"Name"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> rs = Resource;</div><div class="line">    <span class="comment">//Name</span></div><div class="line">    println(rs.name)</div><div class="line">    <span class="keyword">var</span> rs2 = Resource;</div><div class="line">    <span class="comment">//Name</span></div><div class="line">    println(rs2.name)</div><div class="line">    rs.name = <span class="string">"Anthoer"</span></div><div class="line">    <span class="comment">//Another</span></div><div class="line">    println(rs.name)</div><div class="line">    <span class="comment">//Another</span></div><div class="line">    println(rs2.name)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="判断null"><a href="#判断null" class="headerlink" title="判断null"></a>判断null</h2><h3 id=""><a href="#" class="headerlink" title="?."></a>?.</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> files = File(<span class="string">"Test"</span>).listFiles()</div><div class="line"></div><div class="line">println(files?.size)</div></pre></td></tr></table></figure>
<p>例如：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getList</span><span class="params">(isNull: <span class="type">Boolean</span>)</span></span>: List&lt;String&gt;? =</div><div class="line">    <span class="keyword">if</span>(isNull) <span class="literal">null</span> <span class="keyword">else</span> listOf(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> list = getList(<span class="literal">true</span>)</div><div class="line">    <span class="comment">//"null"</span></div><div class="line">    println(list?.size)</div><div class="line">    </div><div class="line">    list = getList(<span class="literal">false</span>)</div><div class="line">    <span class="comment">//"3"</span></div><div class="line">    println(list?.size)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="可以执行语句块"><a href="#可以执行语句块" class="headerlink" title="?. 可以执行语句块"></a>?. 可以执行语句块</h3><p>val data = …</p>
<p>data?.let {<br>    … // execute this block if not null<br>}</p>
<h3 id="-1"><a href="#-1" class="headerlink" title="?:"></a>?:</h3><p>上述println语句可以改为<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">println(list?.size ?: <span class="string">"empty"</span> )</div></pre></td></tr></table></figure></p>
<p>这打印结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">empty</div><div class="line">3</div></pre></td></tr></table></figure></p>
<h3 id="后面的字符串也可以换成表达式"><a href="#后面的字符串也可以换成表达式" class="headerlink" title="?: 后面的字符串也可以换成表达式"></a>?: 后面的字符串也可以换成表达式</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> <span class="keyword">data</span> = ...</div><div class="line"><span class="keyword">val</span> email = <span class="keyword">data</span>[<span class="string">"email"</span>] ?: <span class="keyword">throw</span> IllegalStateException(<span class="string">"Email is missing!"</span>)</div></pre></td></tr></table></figure>
<h2 id="返回when语句"><a href="#返回when语句" class="headerlink" title="返回when语句"></a>返回when语句</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">transform</span><span class="params">(color: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">when</span> (color) &#123;</div><div class="line">        <span class="string">"Red"</span> -&gt; <span class="number">0</span></div><div class="line">        <span class="string">"Green"</span> -&gt; <span class="number">1</span></div><div class="line">        <span class="string">"Blue"</span> -&gt; <span class="number">2</span></div><div class="line">        <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"Invalid color param value"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="‘try-catch’-表达式"><a href="#‘try-catch’-表达式" class="headerlink" title="‘try/catch’ 表达式"></a>‘try/catch’ 表达式</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> result = <span class="keyword">try</span> &#123;</div><div class="line">        count()</div><div class="line">    &#125; <span class="keyword">catch</span> (e: ArithmeticException) &#123;</div><div class="line">        <span class="keyword">throw</span> IllegalStateException(e)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// result是count()返回值</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="‘if’表达式"><a href="#‘if’表达式" class="headerlink" title="‘if’表达式"></a>‘if’表达式</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(param: <span class="type">Int</span>)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> result = <span class="keyword">if</span> (param == <span class="number">1</span>) &#123;</div><div class="line">        <span class="string">"one"</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (param == <span class="number">2</span>) &#123;</div><div class="line">        <span class="string">"two"</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="string">"three"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="表达式函数"><a href="#表达式函数" class="headerlink" title="表达式函数"></a>表达式函数</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">theAnswer</span><span class="params">()</span></span> = <span class="number">42</span></div></pre></td></tr></table></figure>
<p>等于如下函数<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">theAnswer</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">42</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>表达式函数可以很方便的和其他惯用法结合在一起使用<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">transform</span><span class="params">(color: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span> = <span class="keyword">when</span> (color) &#123;</div><div class="line">    <span class="string">"Red"</span> -&gt; <span class="number">0</span></div><div class="line">    <span class="string">"Green"</span> -&gt; <span class="number">1</span></div><div class="line">    <span class="string">"Blue"</span> -&gt; <span class="number">2</span></div><div class="line">    <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"Invalid color param value"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="with语句（ES6不是快废除这个了？）"><a href="#with语句（ES6不是快废除这个了？）" class="headerlink" title="with语句（ES6不是快废除这个了？）"></a>with语句（ES6不是快废除这个了？）</h2><p>with语句块的函数都是对()括号内的对象的方法调用。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Turtle</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">penDown</span><span class="params">()</span></span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">penUp</span><span class="params">()</span></span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">turn</span><span class="params">(degrees: <span class="type">Double</span>)</span></span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">forward</span><span class="params">(pixels: <span class="type">Double</span>)</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">val</span> myTurtle = Turtle()</div><div class="line">with(myTurtle) &#123; <span class="comment">//draw a 100 pix square</span></div><div class="line">    penDown()</div><div class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.4</span>) &#123;</div><div class="line">        forward(<span class="number">100.0</span>)</div><div class="line">        turn(<span class="number">90.0</span>)</div><div class="line">    &#125;</div><div class="line">    penUp()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="nullable的Boolean对象"><a href="#nullable的Boolean对象" class="headerlink" title="nullable的Boolean对象"></a>nullable的Boolean对象</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> b: <span class="built_in">Boolean</span>? = ...</div><div class="line"><span class="keyword">if</span> (b == <span class="literal">true</span>) &#123;</div><div class="line">    ...</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// `b` 为false或者null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;kotlin提供了一些惯用法（语法糖？），简单的记录一下。&lt;/p&gt;
&lt;h2 id=&quot;data-class&quot;&gt;&lt;a href=&quot;#data-class&quot; class=&quot;headerlink&quot; title=&quot;data class&quot;&gt;&lt;/a&gt;data class&lt;/h2&gt;&lt;p&gt;有时候需要一些类要保存数据，而不需要其他操作，当然基本操作除外，kotlin为data class提供的基本操作有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;equals() 相当与“==”操作&lt;/li&gt;
&lt;li&gt;hashCode() 计算hash值&lt;/li&gt;
&lt;li&gt;toString() 函数&lt;/li&gt;
&lt;li&gt;componentsN() 函数&lt;/li&gt;
&lt;li&gt;copy() 拷贝&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="kotlin" scheme="http://www.yinlijun.com/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>kotlin初探</title>
    <link href="http://www.yinlijun.com/2017/05/25/kotlin-sample/"/>
    <id>http://www.yinlijun.com/2017/05/25/kotlin-sample/</id>
    <published>2017-05-25T04:33:34.000Z</published>
    <updated>2018-04-18T07:30:57.865Z</updated>
    
    <content type="html"><![CDATA[<p>最近google推出了新的Android开发语言<a href="http://kotlinlang.org/" target="_blank" rel="external">kotlin</a>，花了点时间了解一下皮毛。</p>
<p>在<a href="http://kotlinlang.org/" target="_blank" rel="external">kotlin</a>官网上的资料还是比较丰富的，提供了一个在线的<a href="https://try.kotlinlang.org/#/Examples/Hello,%20world!/Simplest%20version/Simplest%20version.kt" target="_blank" rel="external">编辑器</a>，可以写一些小的程序片段。另外提供了一个代码翻译的工具，可以直接将java代码片段翻译成kotlin。</p>
<a id="more"></a>
<p>例如以下java代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String greeting;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Greeting</span><span class="params">(String g)</span> </span>&#123;</div><div class="line">		greeting = g;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String you)</span> </span>&#123;</div><div class="line">		System.out.println(greeting + <span class="string">" "</span> + you);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> </span>&#123;</div><div class="line">		Greeting greeting = <span class="keyword">new</span> Greeting(<span class="string">"Hello"</span>);</div><div class="line">		greeting.sayHello(argv[<span class="number">0</span>]);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对应的kotlin代码如下：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">Greeting</span></span>(g:String) &#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">val</span> greeting:String</div><div class="line">  init&#123;</div><div class="line">    greeting = g</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">sayHello</span><span class="params">(you:<span class="type">String</span>)</span></span> &#123;</div><div class="line">    println(greeting + <span class="string">" "</span> + you)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</div><div class="line">    <span class="meta">@JvmStatic</span> <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(argv:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">      <span class="keyword">val</span> greeting = Greeting(<span class="string">"Hello"</span>)</div><div class="line">      greeting.sayHello(argv[<span class="number">0</span>])</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>kotlin语法很多特性都有javascript ES6的影子，比如字符串模板，解构赋值，箭头函数，元编程。</p>
<h3 id="包定义。"><a href="#包定义。" class="headerlink" title="包定义。"></a>包定义。</h3><p>包定义必需位于源文件的顶端，格式如下<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> my.demo</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.*</div><div class="line"></div><div class="line"><span class="comment">// ...</span></div></pre></td></tr></table></figure></p>
<p>这个跟java是一样的。</p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="定义两个Int类型参数的求和函数"><a href="#定义两个Int类型参数的求和函数" class="headerlink" title="定义两个Int类型参数的求和函数"></a>定义两个Int类型参数的求和函数</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> a + b</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的函数可以有更简单的表达式写法</p>
<h4 id="定义表达式函数"><a href="#定义表达式函数" class="headerlink" title="定义表达式函数"></a>定义表达式函数</h4><p>可以看出表达式函数的返回值是自动推断的。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> = a + b</div></pre></td></tr></table></figure></p>
<h3 id="定义空返回值函数"><a href="#定义空返回值函数" class="headerlink" title="定义空返回值函数"></a>定义空返回值函数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printSum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Unit</span> &#123;</div><div class="line">    println(<span class="string">"sum of <span class="subst">$a</span> and <span class="subst">$b</span> is <span class="subst">$&#123;a + b&#125;</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中<b>Unit</b>可以省略<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printSum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: &#123;</div><div class="line">    println(<span class="string">"sum of <span class="subst">$a</span> and <span class="subst">$b</span> is <span class="subst">$&#123;a + b&#125;</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参见<a href="http://kotlinlang.org/docs/reference/functions.html" target="_blank" rel="external">函数</a></p>
<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><h4 id="定义常量（只允许赋值一次）"><a href="#定义常量（只允许赋值一次）" class="headerlink" title="定义常量（只允许赋值一次）"></a>定义常量（只允许赋值一次）</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> a: <span class="built_in">Int</span> = <span class="number">1</span>  <span class="comment">// 立即赋值</span></div><div class="line"><span class="keyword">val</span> b = <span class="number">2</span>   <span class="comment">// 类型推断，为`Int`</span></div><div class="line"><span class="keyword">val</span> c: <span class="built_in">Int</span>  <span class="comment">// 如果没有给出初始化的值，需要给出变量类型</span></div><div class="line">c = <span class="number">3</span>       <span class="comment">// 延迟赋值</span></div></pre></td></tr></table></figure>
<h4 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">5</span> <span class="comment">// 类型推断</span></div><div class="line">x += <span class="number">1</span></div></pre></td></tr></table></figure>
<p>参见<a href="http://kotlinlang.org/docs/reference/properties.html" target="_blank" rel="external">属性和域</a></p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>kotlin的注释跟java是一样的，支持行和块两种注释方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// This is an end-of-line comment</div><div class="line"></div><div class="line">/* This is a block comment</div><div class="line">   on multiple lines. */</div></pre></td></tr></table></figure></p>
<p>跟java不一样的是，kotlin的块注释是可以嵌套的。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> *This is a block comment</div><div class="line"> *  on multiple lines</div><div class="line"> /* This is a nested block comment.*/</div><div class="line"> *This <span class="keyword">is</span> a block comment</div><div class="line"> *  on multiple lines</div><div class="line"> */</div></pre></td></tr></table></figure></p>
<p>参见<a href="http://kotlinlang.org/docs/reference/kotlin-doc.html" target="_blank" rel="external">注释</a></p>
<h3 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span></div><div class="line"><span class="comment">// 简单的字符串模板：</span></div><div class="line"><span class="keyword">val</span> s1 = <span class="string">"a is <span class="subst">$a</span>"</span> </div><div class="line"></div><div class="line">a = <span class="number">2</span></div><div class="line"><span class="comment">// 任意表达式的模板：</span></div><div class="line"><span class="keyword">val</span> s2 = <span class="string">"<span class="subst">$&#123;s1.replace("is", "was")&#125;</span>, but now is <span class="subst">$a</span>"</span></div></pre></td></tr></table></figure>
<p>参见<a href="http://kotlinlang.org/docs/reference/basic-types.html#string-templates" target="_blank" rel="external">字符串模板</a></p>
<h3 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h3><p>kotlin没有三目运算符，取而代之的是条件表达式。</p>
<p>例如一个常规的求最大值函数<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">maxOf</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">    <span class="keyword">if</span>(a &gt; b) &#123;</div><div class="line">        <span class="keyword">return</span> a</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> b</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>假如用条件表达式可以这样写<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">maxOf</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> = <span class="keyword">if</span>(a &gt; b) a <span class="keyword">else</span> b</div></pre></td></tr></table></figure></p>
<p>参见<a href="http://kotlinlang.org/docs/reference/control-flow.html#if-expression" target="_blank" rel="external">if表达式</a></p>
<h3 id="使用nullable和判断null"><a href="#使用nullable和判断null" class="headerlink" title="使用nullable和判断null"></a>使用nullable和判断null</h3><p>如果一个值可能是null的话必须显示的标记出来，如<br>如果<b>str</b>转换成<b>Int</b>失败，返回<b>null</b>:<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">parseInt</span><span class="params">(str: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span>? &#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用返回nullable的函数。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printProduct</span><span class="params">(arg1: <span class="type">String</span>, arg2: <span class="type">String</span>)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> x = parseInt(arg1)</div><div class="line">    <span class="keyword">val</span> y = parseInt(arg2)</div><div class="line">    <span class="keyword">if</span>(x != <span class="literal">null</span> &amp;&amp; y != <span class="literal">null</span>) &#123;</div><div class="line">        println(x * y)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        println(<span class="string">"'<span class="subst">$arg1</span>' 或者 '<span class="subst">$arg2</span>' 不是数字"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参见<a href="http://kotlinlang.org/docs/reference/null-safety.html" target="_blank" rel="external">安全的null</a></p>
<h3 id="类型检查和自动转换"><a href="#类型检查和自动转换" class="headerlink" title="类型检查和自动转换"></a>类型检查和自动转换</h3><p>这个操作用来检查一个对象的类型，局部变量或者属性经过判断之后，不用再显示的转换了，例如。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getStringLength</span><span class="params">(obj: <span class="type">Any</span>)</span></span>: <span class="built_in">Int</span>? &#123;</div><div class="line">    <span class="keyword">if</span>(obj <span class="keyword">is</span> String) &#123;</div><div class="line">        <span class="comment">//obj在这个分支内自动转为"String"类型</span></div><div class="line">        <span class="keyword">return</span> obj.length</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//在上面的类型检查分支之外，类型仍然为"Any"</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另一种方式<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getStringLength</span><span class="params">(obj: <span class="type">Any</span>)</span></span>: <span class="built_in">Int</span>? &#123;</div><div class="line">    <span class="keyword">if</span>(obj !<span class="keyword">is</span> String) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">null</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> obj.length</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>甚至可以这样<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getStringLength</span><span class="params">(obj: <span class="type">Any</span>)</span></span>: <span class="built_in">Int</span>? &#123;</div><div class="line">    <span class="comment">//obj在&amp;&amp;右侧自动转换为String类型</span></div><div class="line">    <span class="keyword">if</span>(obj <span class="keyword">is</span> String &amp;&amp; obj.length &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> obj.length</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参见<a href="http://kotlinlang.org/docs/reference/classes.html" target="_blank" rel="external">类</a>和<a href="http://kotlinlang.org/docs/reference/typecasts.html" target="_blank" rel="external">类型转换</a></p>
<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> items = listOf(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"kiwi"</span>)</div><div class="line"><span class="keyword">for</span>(item <span class="keyword">in</span> items) &#123;</div><div class="line">    println(item)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> items = listOf(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"kiwi"</span>)</div><div class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> items.indices) &#123;</div><div class="line">    println(<span class="string">"item at <span class="subst">$i</span> is <span class="subst">$&#123;item[i]&#125;</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参见<a href="http://kotlinlang.org/docs/reference/control-flow.html#for-loops" target="_blank" rel="external">for循环</a></p>
<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> items = listOf(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"kiwi"</span>)</div><div class="line"><span class="keyword">var</span> i = <span class="number">0</span></div><div class="line"><span class="keyword">while</span>(i &lt; items.size) &#123;</div><div class="line">    println(<span class="string">"item at <span class="subst">$i</span> is <span class="subst">$&#123;item[i]&#125;</span>"</span>)</div><div class="line">    i++</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参见<a href="http://kotlinlang.org/docs/reference/control-flow.html#while-loops" target="_blank" rel="external">while循环</a></p>
<h3 id="when表达式"><a href="#when表达式" class="headerlink" title="when表达式"></a>when表达式</h3><p>when通常用来代替switch和多个if else，且功能强大的多。如<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">describe</span><span class="params">(obj: <span class="type">Any</span>)</span></span>: String = </div><div class="line"><span class="keyword">when</span>(obj) &#123;</div><div class="line">    <span class="number">1</span> -&gt; <span class="string">"One"</span></div><div class="line">    <span class="string">"Hello"</span> -&gt; <span class="string">"Greeting"</span></div><div class="line">    <span class="keyword">is</span> <span class="built_in">Long</span> -&gt; <span class="string">"Long"</span></div><div class="line">    !<span class="keyword">is</span> String -&gt; <span class="string">"Not a String"</span></div><div class="line">    <span class="keyword">else</span> -&gt; <span class="string">"Unknow"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参见<a href="http://kotlinlang.org/docs/reference/control-flow.html#when-expression" target="_blank" rel="external">when表达式</a></p>
<h3 id="使用范围表达式"><a href="#使用范围表达式" class="headerlink" title="使用范围表达式(..)"></a>使用范围表达式(<b>..</b>)</h3><h4 id="用in运算符检查一个数字是否在一个范围内。"><a href="#用in运算符检查一个数字是否在一个范围内。" class="headerlink" title="用in运算符检查一个数字是否在一个范围内。"></a>用in运算符检查一个数字是否在一个范围内。</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> x = <span class="number">10</span></div><div class="line"><span class="keyword">val</span> y = <span class="number">9</span></div><div class="line"><span class="comment">//这是个闭区间,1和y+1都算进去。</span></div><div class="line"><span class="keyword">if</span>(x <span class="keyword">in</span> <span class="number">1.</span>.y+<span class="number">1</span>) &#123;</div><div class="line">    println(<span class="string">"fits in range"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="检查一个数字是否超出范围"><a href="#检查一个数字是否超出范围" class="headerlink" title="检查一个数字是否超出范围"></a>检查一个数字是否超出范围</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> list = listOf(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>)</div><div class="line"><span class="keyword">if</span>(<span class="number">-1</span> !<span class="keyword">in</span> <span class="number">0.</span>.list.lastIndex) &#123;</div><div class="line">    println(<span class="string">"-1 is out of range"</span>)</div><div class="line">&#125; </div><div class="line"><span class="keyword">if</span>(list.size !<span class="keyword">is</span> list.indices) &#123;</div><div class="line">    println(<span class="string">"list size is out of valid list indices range too"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="遍历一个范围"><a href="#遍历一个范围" class="headerlink" title="遍历一个范围"></a>遍历一个范围</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(x <span class="keyword">in</span> <span class="number">1.</span><span class="number">.5</span>) &#123;</div><div class="line">    print(x)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="使用步进遍历范围"><a href="#使用步进遍历范围" class="headerlink" title="使用步进遍历范围"></a>使用步进遍历范围</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(x <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span> step <span class="number">2</span>) &#123;</div><div class="line">    print(x)</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(x <span class="keyword">in</span> <span class="number">9</span> downTo <span class="number">0</span> step <span class="number">3</span>) &#123;</div><div class="line">    print(x)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参见<a href="http://kotlinlang.org/docs/reference/ranges.html" target="_blank" rel="external">范围</a></p>
<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>遍历一个集合<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (item <span class="keyword">in</span> items) &#123;</div><div class="line">    println(item)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用in操作判断集合是否含有某元素，如<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> items = setOf(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"kiwi"</span>)</div><div class="line">    <span class="keyword">when</span> &#123;</div><div class="line">        <span class="string">"orange"</span> <span class="keyword">in</span> items -&gt; println(<span class="string">"juicy"</span>)</div><div class="line">        <span class="string">"apple"</span> <span class="keyword">in</span> items -&gt; println(<span class="string">"apple is fine too"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上述代码输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apple is fine too</div></pre></td></tr></table></figure></p>
<p>使用lambda表达式过滤map集合<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> fruits = listOf(<span class="string">"banana"</span>, <span class="string">"avocado"</span>, <span class="string">"apple"</span>, <span class="string">"kiwi"</span>)</div><div class="line">    fruits</div><div class="line">    .filter &#123; it.startsWith(<span class="string">"a"</span>) &#125;</div><div class="line">    .sortedBy &#123; it &#125;</div><div class="line">    .map &#123; it.toUpperCase() &#125;</div><div class="line">    .forEach &#123; println(it) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上述代码输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">APPLE</div><div class="line">AVOCADO</div></pre></td></tr></table></figure></p>
<p>参见<a href="http://kotlinlang.org/docs/reference/lambdas.html" target="_blank" rel="external">高阶函数和lambda</a></p>
<h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><h4 id="数组求和"><a href="#数组求和" class="headerlink" title="数组求和"></a>数组求和</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Your task is to implement the sum() function so that it computes the sum of</div><div class="line"> * all elements in the given array a.</div><div class="line"> */</div><div class="line"><span class="keyword">package</span> sum</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">IntArray</span>)</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> s = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span>(n <span class="keyword">in</span> a) &#123;</div><div class="line">        s += n</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> s</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="求数组最大值索引"><a href="#求数组最大值索引" class="headerlink" title="求数组最大值索引"></a>求数组最大值索引</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Your task is to implement the indexOfMax() function so that it returns</div><div class="line"> * the index of the largest element in the array, or null if the array is empty.</div><div class="line"> */</div><div class="line"><span class="keyword">package</span> maxindex</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">indexOfMax</span><span class="params">(a: <span class="type">IntArray</span>)</span></span>: <span class="built_in">Int</span>? &#123;</div><div class="line">	<span class="keyword">if</span>(a.size == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">null</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> m = Integer.MIN_VALUE</div><div class="line">    <span class="keyword">var</span> ret = <span class="number">-1</span></div><div class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> a.indices) &#123;</div><div class="line">        <span class="keyword">if</span>(a[i] &gt;= m) &#123;</div><div class="line">            m = a[i]</div><div class="line">            ret = i;</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> ret</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="这是求个什么？自己看解释吧"><a href="#这是求个什么？自己看解释吧" class="headerlink" title="这是求个什么？自己看解释吧"></a>这是求个什么？自己看解释吧</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Any array may be viewed as a number of "runs" of equal numbers.</div><div class="line"> * For example, the following array has two runs:</div><div class="line"> *   1, 1, 1, 2, 2</div><div class="line"> * Three 1's in a row form the first run, and two 2's form the second.</div><div class="line"> * This array has two runs of length one:</div><div class="line"> *   3, 4</div><div class="line"> * And this one has five runs:</div><div class="line"> *   1, 0, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0</div><div class="line"> * Your task is to implement the runs() function so that it returns the number</div><div class="line"> * of runs in the given array.</div><div class="line"> */</div><div class="line"><span class="keyword">package</span> runs</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">runs</span><span class="params">(a: <span class="type">IntArray</span>)</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">    <span class="keyword">if</span>(a.size == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> ret = <span class="number">1</span></div><div class="line">    <span class="keyword">var</span> cur = a[<span class="number">0</span>]</div><div class="line">    <span class="keyword">for</span>(n <span class="keyword">in</span> a) &#123;</div><div class="line">    	<span class="keyword">if</span>(n != cur) &#123;</div><div class="line">            ++ret</div><div class="line">            cur = n</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="求是否是回文字符串"><a href="#求是否是回文字符串" class="headerlink" title="求是否是回文字符串"></a>求是否是回文字符串</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Your task is to implement a palindrome test.</div><div class="line"> *</div><div class="line"> * A string is called a palindrome when it reads the same way left-to-right</div><div class="line"> * and right-to-left.</div><div class="line"> *</div><div class="line"> * See http://en.wikipedia.org/wiki/Palindrome</div><div class="line"> */</div><div class="line"><span class="keyword">package</span> palindrome</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">isPalindrome</span><span class="params">(s: <span class="type">String</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</div><div class="line">    <span class="keyword">if</span>(s.length &lt; <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> len = s.length / <span class="number">2</span></div><div class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">0.</span>.len - <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(s[i] != s[s.length - i - <span class="number">1</span>]) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="求落单数字"><a href="#求落单数字" class="headerlink" title="求落单数字"></a>求落单数字</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Think of a perfect world where everybody has a soulmate.</div><div class="line"> * Now, the real world is imperfect: there is exactly one number in the array</div><div class="line"> * that does not have a pair. A pair is an element with the same value.</div><div class="line"> * For example in this array:</div><div class="line"> *   1, 2, 1, 2</div><div class="line"> * every number has a pair, but in this one:</div><div class="line"> *   1, 1, 1</div><div class="line"> * one of the ones is lonely.</div><div class="line"> *</div><div class="line"> * Your task is to implement the findPairless() function so that it finds the</div><div class="line"> * lonely number and returns it.</div><div class="line"> *</div><div class="line"> * A hint: there's a solution that looks at each element only once and uses no</div><div class="line"> * data structures like collections or trees.</div><div class="line"> */</div><div class="line"><span class="keyword">package</span> pairless</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">findPairless</span><span class="params">(a: <span class="type">IntArray</span>)</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">    <span class="comment">// Write your solution here</span></div><div class="line">    <span class="keyword">var</span> map = hashMapOf&lt;<span class="built_in">Int</span>, <span class="built_in">Int</span>&gt;();</div><div class="line">    <span class="keyword">for</span>(n <span class="keyword">in</span> a) &#123;</div><div class="line">        <span class="keyword">var</span> i = map.<span class="keyword">get</span>(n)</div><div class="line">        </div><div class="line">        map.put(n, <span class="keyword">if</span>(i == <span class="literal">null</span>) <span class="number">1</span> <span class="keyword">else</span> i + <span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>((k, v) <span class="keyword">in</span> map) &#123;</div><div class="line">        <span class="keyword">if</span>(v % <span class="number">2</span> == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> k</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近google推出了新的Android开发语言&lt;a href=&quot;http://kotlinlang.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kotlin&lt;/a&gt;，花了点时间了解一下皮毛。&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;http://kotlinlang.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kotlin&lt;/a&gt;官网上的资料还是比较丰富的，提供了一个在线的&lt;a href=&quot;https://try.kotlinlang.org/#/Examples/Hello,%20world!/Simplest%20version/Simplest%20version.kt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;编辑器&lt;/a&gt;，可以写一些小的程序片段。另外提供了一个代码翻译的工具，可以直接将java代码片段翻译成kotlin。&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://www.yinlijun.com/tags/android/"/>
    
      <category term="java" scheme="http://www.yinlijun.com/tags/java/"/>
    
      <category term="kotlin" scheme="http://www.yinlijun.com/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>NavigationPrompt-react router 4.0.0 api中文文档</title>
    <link href="http://www.yinlijun.com/2016/12/02/react-router-4-0-0-api-NavigationPrompt/"/>
    <id>http://www.yinlijun.com/2016/12/02/react-router-4-0-0-api-NavigationPrompt/</id>
    <published>2016-12-02T11:16:00.000Z</published>
    <updated>2017-05-25T03:41:18.236Z</updated>
    
    <content type="html"><![CDATA[<font size="6em">&lt;NavigationPrompt&gt;</font>

<p>当你的应用进入一个状态，但是需要防止用户从当前状态离开时（比如填了一半的表单），渲染出一个导航确认（NavigationPrompt）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;formIsHalfFilledOut &amp;&amp; (</div><div class="line">  &lt;NavigationPrompt message=&quot;Are you sure you want to leave?&quot;/&gt;</div><div class="line">)&#125;</div></pre></td></tr></table></figure></p>
<h3 id="message-string"><a href="#message-string" class="headerlink" title="message: string"></a><font color="red">message: string</font></h3><a id="more"></a>
<p>当用户试图从当前状态离开时显示的信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;NavigationPrompt message=&quot;Are you sure you want to leave?&quot;/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="message-func"><a href="#message-func" class="headerlink" title="message: func"></a><font color="red">message: func</font></h3><p>这个函数返回一个提示用户跳转的信息，如果返回true，则允许跳转，函数的参数是用户将要跳转的下一个链接，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;NavigationPrompt message=&#123;(location) =&gt; (</div><div class="line">  `Are you sure you want to go to $&#123;location.pathname&#125;?`</div><div class="line">)&#125;/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="when-bool"><a href="#when-bool" class="headerlink" title="when: bool"></a><font color="red">when: bool</font></h3><p>when是一个逻辑变量，为true时，将显示message内容的弹窗，为false时，直接跳转。</p>
<p><navigationprompt when="{formIsHalfFilledOut}" message="Are you sure?"></navigationprompt></p>
<font size="6em">&lt;/NavigationPrompt&gt;</font>

]]></content>
    
    <summary type="html">
    
      &lt;font size=&quot;6em&quot;&gt;&amp;lt;NavigationPrompt&amp;gt;&lt;/font&gt;

&lt;p&gt;当你的应用进入一个状态，但是需要防止用户从当前状态离开时（比如填了一半的表单），渲染出一个导航确认（NavigationPrompt）。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;formIsHalfFilledOut &amp;amp;&amp;amp; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;NavigationPrompt message=&amp;quot;Are you sure you want to leave?&amp;quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;message-string&quot;&gt;&lt;a href=&quot;#message-string&quot; class=&quot;headerlink&quot; title=&quot;message: string&quot;&gt;&lt;/a&gt;&lt;font color=&quot;red&quot;&gt;message: string&lt;/font&gt;&lt;/h3&gt;
    
    </summary>
    
      <category term="react router 4.0.0 api中文文档" scheme="http://www.yinlijun.com/categories/react-router-4-0-0-api%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="react" scheme="http://www.yinlijun.com/tags/react/"/>
    
      <category term="react-router" scheme="http://www.yinlijun.com/tags/react-router/"/>
    
      <category term="翻译文档" scheme="http://www.yinlijun.com/tags/%E7%BF%BB%E8%AF%91%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>Link-react router 4.0.0 api中文文档</title>
    <link href="http://www.yinlijun.com/2016/11/29/react-router-4-0-0-api-Link/"/>
    <id>http://www.yinlijun.com/2016/11/29/react-router-4-0-0-api-Link/</id>
    <published>2016-11-29T06:18:08.000Z</published>
    <updated>2017-05-25T03:41:18.235Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://react-router.now.sh/Link" target="_blank" rel="external">原文链接</a></p>
<font size="6em">&lt;Link&gt;</font>

<p>为你的应用提供可以声明的，可访问的导航功能。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Link to=<span class="string">"/about"</span> activeClassName=<span class="string">"active"</span>&gt;</div><div class="line">  About</div><div class="line">&lt;<span class="regexp">/Link&gt;</span></div></pre></td></tr></table></figure></p>
<font color="red">children: node | func</font>

<p>Link组件可以接受一个函数作为子控件，使得允许你使用自定义的组件渲染Link对象。</p>
<a id="more"></a>
<p>子控件函数的参数是一个对象，包含如下属性：</p>
<ul>
<li>isActive: (bool) 当前链接是否激活</li>
<li>location: 传递给Link的链接</li>
<li>href: (string) 路由的url</li>
<li>onClick: (func) dom的onClick处理函数</li>
<li>transition: (func) 它是router.transitionTo的快捷方式，代表Link对象的to属性。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Link to=<span class="string">"/courses"</span>&gt;&#123;</div><div class="line">  (&#123;isActive, location, href, onClick, transition&#125;) =&gt; </div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">RaisedButton</span> <span class="attr">label</span>=<span class="string">"Courses"</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span> <span class="attr">primary</span>=<span class="string">&#123;isActive&#125;</span> <span class="attr">href</span>=<span class="string">&#123;href&#125;</span> /&gt;</span></span></div><div class="line">&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<font color="red">to: string | object</font>

<p>链接的描述。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Link to=&quot;/courses&quot;/&gt;</div><div class="line">&lt;Link to=&#123;&#123;</div><div class="line">  pathname: &apos;/courses&apos;,</div><div class="line">  query: &#123; sort: &apos;name&apos; &#125;,</div><div class="line">  state: &#123; fromDashboard: true &#125;</div><div class="line">&#125;&#125;/&gt;</div></pre></td></tr></table></figure></p>
<font color="red">activeStyle: object</font>

<p>当链接匹配到<font color="grey" size="5em"><strong>to</strong></font>属性时的样式对象。它会和tyle对象合并之后生效。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;Link</div><div class="line">  to=&quot;/courses&quot;</div><div class="line">  style=&#123;&#123; color: &apos;blue&apos;, background: &apos;gray&apos; &#125;&#125;</div><div class="line">  activeStyle=&#123;&#123; color: &apos;red&apos; &#125;&#125;</div><div class="line">/&gt;</div><div class="line">// 总是有灰色背景</div><div class="line">// 链接为/foo时字体为blue</div><div class="line">// 为/courses为red(激活状态)</div></pre></td></tr></table></figure></p>
<font color="red">activeClassName: string</font>

<p>当匹配到链接时，生效的className。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;Link</div><div class="line">  to=<span class="string">"/courses"</span></div><div class="line">  className=<span class="string">"course-link"</span></div><div class="line">  activeClassName=<span class="string">"active"</span></div><div class="line">/&gt;</div><div class="line"><span class="comment">// will always have "course-link"</span></div><div class="line"><span class="comment">// at /courses it will be "course-link active"</span></div></pre></td></tr></table></figure></p>
<font color="red">activeOnlyWhenExact: bool</font>

<p>为true时, 只有当严格匹配，activeClassName和activeStyle才会生效。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Link to=&quot;/courses&quot; activeOnlyWhenExact activeClassName=&quot;active&quot;/&gt;</div><div class="line">// /courses 被激活</div><div class="line">// /courses/123 不被激活</div></pre></td></tr></table></figure>
<font color="red">isActive: func</font>

<p>允许自定义当前链接是否被激活，激活时返回true，否则返回false。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;Link</div><div class="line">  to=<span class="string">"/"</span></div><div class="line">  activeStyle=&#123;&#123; color: <span class="string">'red'</span> &#125;&#125;</div><div class="line">  isActive=&#123;(location) =&gt; (</div><div class="line">    <span class="comment">// 只有当没有query字段时被激活</span></div><div class="line">    !<span class="built_in">Object</span>.keys(location.query).length</div><div class="line">  )&#125;</div><div class="line">/&gt;</div><div class="line"></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">Link</span></span></span></div><div class="line">  <span class="attr">to</span>=<span class="string">"/courses"</span></div><div class="line">  <span class="attr">activeStyle</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> '<span class="attr">red</span>' &#125;&#125;</div><div class="line">  <span class="attr">isActive</span>=<span class="string">&#123;(location,</span> <span class="attr">props</span>) =&gt; (</div><div class="line">    // 匹配到"/courses" 或者 "/course/123"被激活</div><div class="line">    // 尽管这不是真正意义上的被激活, it is</div><div class="line">    // theoretically for the sake of a navigation menu</div><div class="line">    location.pathname.match(/course(s)?/)</div><div class="line">  )&#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<font color="red">location</font>

<p>如果你不想使用上下文中的location, 可以传递一个location的属性作为替代，这在链接比较深的redux应用中很有用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Match pattern=&quot;/foo&quot; location=&#123;this.props.location&#125;/&gt;</div></pre></td></tr></table></figure></p>
<font size="6em">&lt;/Link&gt;</font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://react-router.now.sh/Link&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;font size=&quot;6em&quot;&gt;&amp;lt;Link&amp;gt;&lt;/font&gt;

&lt;p&gt;为你的应用提供可以声明的，可访问的导航功能。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;Link to=&lt;span class=&quot;string&quot;&gt;&quot;/about&quot;&lt;/span&gt; activeClassName=&lt;span class=&quot;string&quot;&gt;&quot;active&quot;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  About&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/Link&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;font color=&quot;red&quot;&gt;children: node | func&lt;/font&gt;

&lt;p&gt;Link组件可以接受一个函数作为子控件，使得允许你使用自定义的组件渲染Link对象。&lt;/p&gt;
    
    </summary>
    
      <category term="react router 4.0.0 api中文文档" scheme="http://www.yinlijun.com/categories/react-router-4-0-0-api%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="react" scheme="http://www.yinlijun.com/tags/react/"/>
    
      <category term="react-router" scheme="http://www.yinlijun.com/tags/react-router/"/>
    
      <category term="翻译文档" scheme="http://www.yinlijun.com/tags/%E7%BF%BB%E8%AF%91%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>Miss-react router 4.0.0 api中文文档</title>
    <link href="http://www.yinlijun.com/2016/11/29/react-router-4-0-0-api-Miss/"/>
    <id>http://www.yinlijun.com/2016/11/29/react-router-4-0-0-api-Miss/</id>
    <published>2016-11-29T05:55:49.000Z</published>
    <updated>2017-05-25T03:41:18.236Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://react-router.now.sh/Miss" target="_blank" rel="external">原文链接</a></p>
<font size="6em">&lt;Miss&gt;</font>

<p>当没有匹配到当前的地址时，将会渲染Miss。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> App = () =&gt; (</div><div class="line">  &lt;Router&gt;</div><div class="line">    &lt;Match pattern="/foo"/&gt;</div><div class="line">    &lt;Match pattern="/bar"/&gt;</div><div class="line">    &lt;Miss component=&#123;NoMatch&#125;/&gt;</div><div class="line">  &lt;/Router&gt;</div><div class="line">)</div><div class="line"></div><div class="line">const NoMatch = (&#123; location &#125;) =&gt; (</div><div class="line">  &lt;div&gt;Nothing matched &#123;location.pathname&#125;.&lt;/div&gt;</div><div class="line">)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="component"><a href="#component" class="headerlink" title="component"></a><font color="red">component</font></h3><p>跟Match一样的，表示将要渲染的组建，但是不同的是只有location一个prop传进去。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Miss component=&#123;NoMatch&#125;/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="render-func"><a href="#render-func" class="headerlink" title="render: func"></a><font color="red">render: func</font></h3><p>跟Match一样的，可以提供一个渲染函数，同样，也只有location一个prop传进去。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Miss render=&#123;(&#123; location &#125;) =&gt; (</div><div class="line">  &lt;div&gt;Nothing matched &#123;location.pathname&#125;.&lt;/div&gt;</div><div class="line">)&#125;/&gt;</div></pre></td></tr></table></figure></p>
<p><font size="6em">&lt;/Miss&gt;<font></font></font></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://react-router.now.sh/Miss&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;font size=&quot;6em&quot;&gt;&amp;lt;Miss&amp;gt;&lt;/font&gt;

&lt;p&gt;当没有匹配到当前的地址时，将会渲染Miss。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; App = () =&amp;gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;Router&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;Match pattern=&quot;/foo&quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;Match pattern=&quot;/bar&quot;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;Miss component=&amp;#123;NoMatch&amp;#125;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;/Router&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;const NoMatch = (&amp;#123; location &amp;#125;) =&amp;gt; (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;div&amp;gt;Nothing matched &amp;#123;location.pathname&amp;#125;.&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="react router 4.0.0 api中文文档" scheme="http://www.yinlijun.com/categories/react-router-4-0-0-api%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="react" scheme="http://www.yinlijun.com/tags/react/"/>
    
      <category term="react-router" scheme="http://www.yinlijun.com/tags/react-router/"/>
    
      <category term="翻译文档" scheme="http://www.yinlijun.com/tags/%E7%BF%BB%E8%AF%91%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
</feed>
